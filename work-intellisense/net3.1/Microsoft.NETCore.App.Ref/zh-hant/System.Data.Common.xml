<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Common</name>
  </assembly>
  <members>
    <member name="T:System.Data.AcceptRejectRule">
      <summary>判斷在具有 <see cref="T:System.Data.ForeignKeyConstraint" /> 的 <see cref="T:System.Data.DataTable" /> 上叫用 <see cref="M:System.Data.DataSet.AcceptChanges" /> 或 <see cref="M:System.Data.DataTable.RejectChanges" /> 方法時會發生的動作。</summary>
    </member>
    <member name="F:System.Data.AcceptRejectRule.Cascade">
      <summary>跨越關聯性來串聯變更。</summary>
    </member>
    <member name="F:System.Data.AcceptRejectRule.None">
      <summary>未發生任何動作 (預設值)。</summary>
    </member>
    <member name="T:System.Data.CommandBehavior">
      <summary>提供查詢結果的描述及其對資料庫的影響。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.CloseConnection">
      <summary>當命令執行時，相關聯的 <see langword="Connection" /> 物件會在相關聯的 <see langword="DataReader" /> 物件關閉時關閉。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.Default">
      <summary>要求可能傳回多個結果集 (Result Set)。 執行查詢可能會影響資料庫狀態。 <see langword="Default" /> 設定為沒有 <see cref="T:System.Data.CommandBehavior" /> 旗標，所以呼叫 <see langword="ExecuteReader(CommandBehavior.Default)" /> 在功能上相當於呼叫 <see langword="ExecuteReader()" />。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.KeyInfo">
      <summary>查詢會傳回資料行和主索引鍵資訊。 提供者會將額外資料行附加到現有主索引鍵和時間戳記資料行的結果集中。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SchemaOnly">
      <summary>查詢只會傳回資料行資訊。 當使用 <see cref="F:System.Data.CommandBehavior.SchemaOnly" /> 時，.NET Framework Data Provider for SQL Server 會優先於使用 SET FMTONLY ON 執行的陳述式。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SequentialAccess">
      <summary>提供方法來讓 <see langword="DataReader" /> 使用大型二進位值來處理含有資料行的資料列。 <see langword="SequentialAccess" /> 並不會載入整個資料列，而是啟用 <see langword="DataReader" /> 來載入資料做為資料流。 然後您可以使用 <see langword="GetBytes" /> 或 <see langword="GetChars" /> 方法來指定要開始讀取作業的位元組位置和所傳回資料的限制緩衝區大小。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SingleResult">
      <summary>查詢傳回單一結果集。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SingleRow">
      <summary>查詢預期會傳回第一個結果集的單一資料列。 執行查詢可能會影響資料庫狀態。 某些 .NET Framework 資料提供者可以使用這項資訊來最佳化命令的效能，但並不一定需要使用。 當您使用 <see cref="F:System.Data.CommandBehavior.SingleRow" /> 物件的 <see cref="M:System.Data.OleDb.OleDbCommand.ExecuteReader" /> 方法來指定 <see cref="T:System.Data.OleDb.OleDbCommand" /> 時，.NET Framework Data Provider for OLE DB 會使用 OLE DB <see langword="IRow" /> 介面 (如果可用) 來執行繫結。 否則，它會使用 <see langword="IRowset" /> 介面。 如果 SQL 陳述式預期只會傳回單一資料列，則指定 <see cref="F:System.Data.CommandBehavior.SingleRow" /> 也可以增進應用程式效能。 在執行預期會傳回多個結果集的要求時，可能指定 <see langword="SingleRow" />。  在這種情況下，也就是同時指定多結果集 SQL 查詢及單一資料列時，傳回的結果將只會包含第一個結果集中的第一個資料列， 而不會傳回查詢的其他結果集。</summary>
    </member>
    <member name="T:System.Data.CommandType">
      <summary>指定如何解譯命令字串。</summary>
    </member>
    <member name="F:System.Data.CommandType.StoredProcedure">
      <summary>預存程序的名稱。</summary>
    </member>
    <member name="F:System.Data.CommandType.TableDirect">
      <summary>資料表的名稱。</summary>
    </member>
    <member name="F:System.Data.CommandType.Text">
      <summary>SQL 文字命令 (預設值。)</summary>
    </member>
    <member name="T:System.Data.Common.CatalogLocation">
      <summary>表示文字命令之合格資料表名稱中類別目錄名稱的位置。</summary>
    </member>
    <member name="F:System.Data.Common.CatalogLocation.End">
      <summary>表示類別目錄名稱的位置處於文字命令之完整合格資料表名稱的結構描述部分之後。 <c>End</c> 和 <c>Start</c> 為互斥。</summary>
    </member>
    <member name="F:System.Data.Common.CatalogLocation.Start">
      <summary>表示類別目錄名稱的位置處於文字命令之完整合格資料表名稱的結構描述部分之前。 <c>Start</c> 和 <c>End</c> 為互斥。</summary>
    </member>
    <member name="T:System.Data.Common.DataAdapter">
      <summary>代表一組 SQL 命令和一個資料庫連接，用來填入 <see cref="T:System.Data.DataSet" /> 並更新資料來源。</summary>
    </member>
    <member name="M:System.Data.Common.DataAdapter.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DataAdapter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)">
      <summary>從相同類型的現有物件，初始化 <see cref="T:System.Data.Common.DataAdapter" /> 類別的新執行個體。</summary>
      <param name="from">
        <see cref="T:System.Data.Common.DataAdapter" /> 物件，用來建立新的 <see cref="T:System.Data.Common.DataAdapter" />。</param>
    </member>
    <member name="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill">
      <summary>取得或設定值，指出在任何一種 Fill 作業期間，當 <see cref="T:System.Data.DataRow" /> 新增至 <see cref="T:System.Data.DataTable" /> 之後，是否要在其上呼叫 <see cref="M:System.Data.DataRow.AcceptChanges" />。</summary>
      <returns>如果在 <see cref="M:System.Data.DataRow.AcceptChanges" /> 上呼叫 <see cref="T:System.Data.DataRow" />，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.AcceptChangesDuringUpdate">
      <summary>取得或設定在 <see cref="M:System.Data.DataRow.AcceptChanges" /> 期間是否呼叫 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />。</summary>
      <returns>如果在 <see cref="M:System.Data.DataRow.AcceptChanges" /> 期間呼叫 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.CloneInternals">
      <summary>建立 <see cref="T:System.Data.Common.DataAdapter" /> 的這個執行個體的複本。</summary>
      <returns>
        <see cref="T:System.Data.Common.DataAdapter" /> 的複製 (Clone) 執行個體。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.ContinueUpdateOnError">
      <summary>取得或設定數值，指定當資料列更新期間發生錯誤時，是否產生例外狀況。</summary>
      <returns>若要繼續更新而不產生例外狀況，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.CreateTableMappings">
      <summary>建立新的 <see cref="T:System.Data.Common.DataTableMappingCollection" />。</summary>
      <returns>新的資料表對應集合。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Data.Common.DataAdapter" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)">
      <summary>新增或重新整理 <see cref="T:System.Data.DataSet" /> 中的資料列，使其符合資料來源中的資料列。</summary>
      <param name="dataSet">要填入資料錄和結構描述 (如果必要的話) 的 <see cref="T:System.Data.DataSet" />。</param>
      <returns>成功加入至 <see cref="T:System.Data.DataSet" /> 或在其中重新整理的資料列數目。 這不包含被不傳回資料列之陳述式所影響的資料列。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataSet" /> 名稱，加入或重新整理 <see cref="T:System.Data.DataTable" /> 中指定範圍內的資料列，以符合那些在資料來源中的資料列。</summary>
      <param name="dataSet">要填入資料錄的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="srcTable">字串，表示來源資料表的名稱。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 的執行個體。</param>
      <param name="startRecord">起始記錄之以零起始的索引。</param>
      <param name="maxRecords">整數，表示資料錄的最大數目。</param>
      <returns>成功加入至 <see cref="T:System.Data.DataSet" /> 或在其中重新整理的資料列數目。 這不包含被不傳回資料列之陳述式所影響的資料列。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)">
      <summary>使用 <see cref="T:System.Data.DataTable" /> 名稱和指定的 <see cref="T:System.Data.DataTable" />，加入或重新整理 <see cref="T:System.Data.IDataReader" /> 中的資料列，以符合資料來源中的資料列。</summary>
      <param name="dataTable">要填入資料錄的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 的執行個體。</param>
      <returns>成功加入至 <see cref="T:System.Data.DataTable" /> 或在其中重新整理的資料列數目。 這不包含被不傳回資料列之陳述式所影響的資料列。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>在 <see cref="T:System.Data.DataTable" /> 物件集合中所指定的範圍內加入或重新整理資料列，以符合那些在資料來源中的資料列。</summary>
      <param name="dataTables">要填入資料錄的 <see cref="T:System.Data.DataTable" /> 物件集合。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 的執行個體。</param>
      <param name="startRecord">起始記錄之以零起始的索引。</param>
      <param name="maxRecords">整數，表示資料錄的最大數目。</param>
      <returns>成功加入至 <see cref="T:System.Data.DataTable" /> 或在其中重新整理的資料列數目。 這不包含被不傳回資料列之陳述式所影響的資料列。</returns>
    </member>
    <member name="E:System.Data.Common.DataAdapter.FillError">
      <summary>當填入作業期間發生錯誤時傳回。</summary>
    </member>
    <member name="P:System.Data.Common.DataAdapter.FillLoadOption">
      <summary>取得或設定 <see cref="T:System.Data.LoadOption" />，決定配接器如何從 <see cref="T:System.Data.DataTable" /> 填入 <see cref="T:System.Data.Common.DbDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.LoadOption" /> 值。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>將 <see cref="T:System.Data.DataTable" /> 加入至指定的 <see cref="T:System.Data.DataSet" />，並且根據指定的 <see cref="T:System.Data.SchemaType" /> 設定結構描述，以符合資料來源中的資料表。</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" />，以資料來源中的結構描述來填入其中。</param>
      <param name="schemaType">其中一個 <see cref="T:System.Data.SchemaType" /> 值。</param>
      <returns>
        <see cref="T:System.Data.DataTable" /> 物件，包含從資料來源傳回的結構描述資訊。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)">
      <summary>將 <see cref="T:System.Data.DataTable" /> 加入至指定的 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="dataSet">要從 <see cref="T:System.Data.DataTable" /> 中填入的 <see cref="T:System.Data.IDataReader" />。</param>
      <param name="schemaType">其中一個 <see cref="T:System.Data.SchemaType" /> 值。</param>
      <param name="srcTable">用於資料表對應的來源資料表名稱。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" />，在填入 <see cref="T:System.Data.DataTable" /> 時用做資料來源。</param>
      <returns>一個被新增至 <see cref="T:System.Data.DataSet" /> 的物件 <see cref="T:System.Data.DataTable" /> 之集合的參考。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)">
      <summary>將 <see cref="T:System.Data.DataTable" /> 加入至指定的 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="dataTable">要從 <see cref="T:System.Data.DataTable" /> 中填入的 <see cref="T:System.Data.IDataReader" />。</param>
      <param name="schemaType">其中一個 <see cref="T:System.Data.SchemaType" /> 值。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" />，在填入 <see cref="T:System.Data.DataTable" /> 時用做資料來源。</param>
      <returns>
        <see cref="T:System.Data.DataTable" /> 物件，包含從資料來源傳回的結構描述資訊。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.GetFillParameters">
      <summary>取得在執行 SQL SELECT 陳述式時由使用者設定的參數。</summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 物件的陣列，含有由使用者設定的參數。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.HasTableMappings">
      <summary>指出是否已經建立 <see cref="T:System.Data.Common.DataTableMappingCollection" />。</summary>
      <returns>如果已經建立 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.MissingMappingAction">
      <summary>判斷在傳入的資料不具有相符的資料表或資料行時要採取的動作。</summary>
      <returns>其中一個 <see cref="T:System.Data.MissingMappingAction" /> 值。 預設為 <see langword="Passthrough" />。</returns>
      <exception cref="T:System.ArgumentException">設定的值不是其中一個 <see cref="T:System.Data.MissingMappingAction" /> 值。</exception>
    </member>
    <member name="P:System.Data.Common.DataAdapter.MissingSchemaAction">
      <summary>判斷在現有 <see cref="T:System.Data.DataSet" /> 結構描述 (Schema) 與傳入的資料不相符時要採取的動作。</summary>
      <returns>其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。 預設為 <see langword="Add" />。</returns>
      <exception cref="T:System.ArgumentException">設定的值不是其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。</exception>
    </member>
    <member name="M:System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)">
      <summary>當在 <see langword="Fill" /> 期間發生錯誤時叫用。</summary>
      <param name="value">
        <see cref="T:System.Data.FillErrorEventArgs" /> 物件。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ResetFillLoadOption">
      <summary>將 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 重設為其預設狀態，並讓 <see cref="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)" /> 接受 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" />。</summary>
    </member>
    <member name="P:System.Data.Common.DataAdapter.ReturnProviderSpecificTypes">
      <summary>取得或設定 <see langword="Fill" /> 方法應當傳回提供者特定的值，還是通用符合 CLS 標準的值。</summary>
      <returns>如果 <see langword="true" /> 方法應傳回提供者特定的值，則為 <see langword="Fill" />，否則為 <see langword="false" />，表示傳回通用符合 CLS 標準的值。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill">
      <summary>判斷是否應該保存 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> 屬性。</summary>
      <returns>如果保存 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> 屬性則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption">
      <summary>判斷是否應該保存 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 屬性。</summary>
      <returns>如果保存 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 屬性則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeTableMappings">
      <summary>判斷一個或多個 <see cref="T:System.Data.Common.DataTableMapping" /> 物件是否存在並且應該保存 (Persist)。</summary>
      <returns>如果存在一個或多個 <see cref="T:System.Data.Common.DataTableMapping" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings">
      <summary>指示來源資料表如何對應至資料集資料表。</summary>
      <returns>集合，提供傳回的資料錄和 <see cref="T:System.Data.DataSet" /> 之間的主要對應。 預設值為空集合。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.TableMappings">
      <summary>取得提供來源資料表和 <see cref="T:System.Data.DataTable" /> 之間主要對應的集合。</summary>
      <returns>集合，提供傳回的資料錄和 <see cref="T:System.Data.DataSet" /> 之間的主要對應。 預設值為空集合。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)">
      <summary>從名為 "Table" 之 <see cref="T:System.Data.DataSet" /> 的指定 <see cref="T:System.Data.DataTable" /> 中，為每個插入、更新或刪除的資料列分別呼叫 INSERT、UPDATE 或 DELETE 陳述式。</summary>
      <param name="dataSet">用來更新資料來源的 <see cref="T:System.Data.DataSet" />。</param>
      <returns>自 <see cref="T:System.Data.DataSet" /> 中成功更新的資料列數目。</returns>
      <exception cref="T:System.InvalidOperationException">來源資料表無效。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">嘗試執行 INSERT、UPDATE 或 DELETE 陳述式會造成沒有資料錄受影響。</exception>
    </member>
    <member name="T:System.Data.Common.DataColumnMapping">
      <summary>含有繼承自 <see cref="T:System.Data.Common.DataAdapter" /> 之物件的泛用資料行對應。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DataColumnMapping" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.#ctor(System.String,System.String)">
      <summary>使用指定來源資料行名稱和要對應至的 <see cref="T:System.Data.Common.DataColumnMapping" /> 資料行名稱，來初始化 <see cref="T:System.Data.DataSet" /> 類別的新執行個體。</summary>
      <param name="sourceColumn">來自資料來源的區分大小寫資料行名稱。</param>
      <param name="dataSetColumn">來自要對應至的 <see cref="T:System.Data.DataSet" /> 之資料行名稱，不區分大小寫。</param>
    </member>
    <member name="P:System.Data.Common.DataColumnMapping.DataSetColumn">
      <summary>取得或設定在要對應的 <see cref="T:System.Data.DataSet" /> 中的目的資料行名稱。</summary>
      <returns>在要對應的 <see cref="T:System.Data.DataSet" /> 中的目的資料行名稱。 名稱不區分大小寫。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)">
      <summary>使用 <see cref="T:System.Data.DataColumn" /> 和 <see cref="T:System.Data.DataTable" /> 屬性來從指定的 <see cref="T:System.Data.MissingSchemaAction" /> 取得 <see cref="P:System.Data.Common.DataColumnMapping.DataSetColumn" />。</summary>
      <param name="dataTable">可取得資料行的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="dataType">資料行的 <see cref="T:System.Type" />。</param>
      <param name="schemaAction">其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。</param>
      <returns>資料行。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.String,System.String,System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)">
      <summary>
        <see cref="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)" /> 的靜態 (Static) 版本，無需對 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件執行個體化即可對其進行呼叫。</summary>
      <param name="sourceColumn">來自資料來源的區分大小寫資料行名稱。</param>
      <param name="dataSetColumn">來自要對應至的 <see cref="T:System.Data.DataSet" /> 之資料行名稱，不區分大小寫。</param>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 的執行個體。</param>
      <param name="dataType">所對應之資料行的資料型別。</param>
      <param name="schemaAction">判斷在現有 <see cref="T:System.Data.DataSet" /> 結構描述 (Schema) 與傳入的資料不相符時要採取的動作。</param>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMapping.SourceColumn">
      <summary>取得或設定在資料來源中的來源資料行名稱。 名稱區分大小寫。</summary>
      <returns>在資料來源中的資料行的區分大小寫名稱。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.System#ICloneable#Clone">
      <summary>建立目前執行個體複本的新物件。</summary>
      <returns>目前物件的複本。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.ToString">
      <summary>將目前的 <see cref="P:System.Data.Common.DataColumnMapping.SourceColumn" /> 名稱轉換為字串。</summary>
      <returns>做為字串的目前 <see cref="P:System.Data.Common.DataColumnMapping.SourceColumn" /> 名稱。</returns>
    </member>
    <member name="T:System.Data.Common.DataColumnMappingCollection">
      <summary>包含 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件的集合。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.#ctor">
      <summary>建立空的 <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Add(System.Object)">
      <summary>將 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件加入至集合。</summary>
      <param name="value">要加入集合的 <see langword="DataColumnMapping" /> 物件。</param>
      <returns>加入至集合的 <see langword="DataColumnMapping" /> 索引。</returns>
      <exception cref="T:System.InvalidCastException">傳入的物件不是 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Add(System.String,System.String)">
      <summary>在提供來源資料行名稱和 <see cref="T:System.Data.Common.DataColumnMapping" /> 資料行名稱時，將 <see cref="T:System.Data.DataSet" /> 物件加入至集合。</summary>
      <param name="sourceColumn">要對應至的來源資料行之區分大小寫名稱。</param>
      <param name="dataSetColumn">要對應至的 <see cref="T:System.Data.DataSet" /> 資料行名稱，不區分大小寫。</param>
      <returns>加入至集合的 <see langword="DataColumnMapping" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.AddRange(System.Array)">
      <summary>將指定 <see cref="T:System.Array" /> 的元素複製到集合結尾。</summary>
      <param name="values">要加入至集合的 <see cref="T:System.Array" />。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.AddRange(System.Data.Common.DataColumnMapping[])">
      <summary>將指定的 <see cref="T:System.Data.Common.DataColumnMapping" /> 陣列元素複製到集合的末端。</summary>
      <param name="values">要加入至集合的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件陣列。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Clear">
      <summary>從集合中移除所有 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Contains(System.Object)">
      <summary>取得值，指出具有指定 <see cref="T:System.Data.Common.DataColumnMapping" /> 的 <see cref="T:System.Object" /> 物件是否存在於集合中。</summary>
      <param name="value">
        <see cref="T:System.Object" />，即是 <see cref="T:System.Data.Common.DataColumnMapping" />。</param>
      <returns>如果集合含有指定的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidCastException">傳入的物件不是 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Contains(System.String)">
      <summary>取得值，指出具有指定來源資料行名稱的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件是否存在於集合中。</summary>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 的區分大小寫來源資料行名稱。</param>
      <returns>如果集合包含具有指定來源資料行名稱的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.CopyTo(System.Array,System.Int32)">
      <summary>複製 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 的項目至指定陣列。</summary>
      <param name="array">要複製 <see cref="T:System.Array" /> 項目至的 <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</param>
      <param name="index">陣列的開始索引。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.CopyTo(System.Data.Common.DataColumnMapping[],System.Int32)">
      <summary>複製 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 的項目至指定的 <see cref="T:System.Data.Common.DataColumnMapping" /> 陣列。</summary>
      <param name="array">要將 <see cref="T:System.Data.Common.DataColumnMapping" /> 項目複製至的 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 陣列。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Count">
      <summary>取得集合中 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件的數目。</summary>
      <returns>集合中的項目數目</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetByDataSetColumn(System.String)">
      <summary>取得具有指定 <see cref="T:System.Data.Common.DataColumnMapping" /> 資料行名稱的 <see cref="T:System.Data.DataSet" /> 物件。</summary>
      <param name="value">要尋找的 <see cref="T:System.Data.DataSet" /> 資料行名稱，不區分大小寫。</param>
      <returns>具有指定 <see cref="T:System.Data.Common.DataColumnMapping" /> 資料行名稱的 <see cref="T:System.Data.DataSet" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetColumnMappingBySchemaAction(System.Data.Common.DataColumnMappingCollection,System.String,System.Data.MissingMappingAction)">
      <summary>為指定 <see cref="T:System.Data.Common.DataColumnMapping" />、來源資料行名稱和 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 取得 <see cref="T:System.Data.MissingMappingAction" />。</summary>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</param>
      <param name="sourceColumn">要尋找的區分大小寫來源資料行名稱。</param>
      <param name="mappingAction">其中一個 <see cref="T:System.Data.MissingMappingAction" /> 值。</param>
      <returns>
        <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 參數已經設定為 <see langword="Error" />，並且未指定任何對應。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetDataColumn(System.Data.Common.DataColumnMappingCollection,System.String,System.Type,System.Data.DataTable,System.Data.MissingMappingAction,System.Data.MissingSchemaAction)">
      <summary>靜態 (Static) 方法，傳回 <see cref="T:System.Data.DataColumn" /> 物件，而無需對 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 物件執行個體化。</summary>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</param>
      <param name="sourceColumn">來自資料來源的區分大小寫資料行名稱。</param>
      <param name="dataType">所對應之資料行的資料型別。</param>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 的執行個體。</param>
      <param name="mappingAction">其中一個 <see cref="T:System.Data.MissingMappingAction" /> 值。</param>
      <param name="schemaAction">判斷在現有 <see cref="T:System.Data.DataSet" /> 結構描述 (Schema) 與傳入的資料不相符時要採取的動作。</param>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetEnumerator">
      <summary>取得可以逐一查看集合的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOf(System.Object)">
      <summary>取得在集合中為 <see cref="T:System.Object" /> 的指定 <see cref="T:System.Data.Common.DataColumnMapping" /> 位置。</summary>
      <param name="value">
        <see cref="T:System.Object" />，即是要尋找的 <see cref="T:System.Data.Common.DataColumnMapping" />。</param>
      <returns>在集合中為 <see cref="T:System.Object" /> 的指定 <see cref="T:System.Data.Common.DataColumnMapping" /> 之以零起始位置。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOf(System.String)">
      <summary>取得具有指定來源資料行名稱的 <see cref="T:System.Data.Common.DataColumnMapping" /> 位置。</summary>
      <param name="sourceColumn">來源資料行的區分大小寫名稱。</param>
      <returns>具有指定區分大小寫來源資料行名稱的 <see cref="T:System.Data.Common.DataColumnMapping" /> 之以零起始的位置。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOfDataSetColumn(System.String)">
      <summary>取得具有指定 <see cref="T:System.Data.Common.DataColumnMapping" /> 資料行名稱的指定 <see cref="T:System.Data.DataSet" /> 位置。</summary>
      <param name="dataSetColumn">要尋找的資料集資料行名稱，不區分大小寫。</param>
      <returns>具有指定 <see langword="DataSet" /> 資料行名稱的指定 <see cref="T:System.Data.Common.DataColumnMapping" /> 之以零起始位置，或 -1 (<see langword="DataColumnMapping" /> 物件不存在於集合中)。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Insert(System.Int32,System.Data.Common.DataColumnMapping)">
      <summary>將 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件插入 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 的指定索引處。</summary>
      <param name="index">要插入之 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件以零為起始的索引。</param>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Insert(System.Int32,System.Object)">
      <summary>將 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件插入 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 的指定索引處。</summary>
      <param name="index">要插入之 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件以零為起始的索引。</param>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</param>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Item(System.Int32)">
      <summary>取得或設定在指定索引處的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</summary>
      <param name="index">要尋找的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件之以零起始的索引。</param>
      <returns>位於指定索引處的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Item(System.String)">
      <summary>取得或設定具有指定來源資料行名稱的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</summary>
      <param name="sourceColumn">來源資料行的區分大小寫名稱。</param>
      <returns>具有指定來源資料行名稱的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Remove(System.Data.Common.DataColumnMapping)">
      <summary>從集合移除指定的 <see cref="T:System.Data.Common.DataColumnMapping" />。</summary>
      <param name="value">要移除的 <see cref="T:System.Data.Common.DataColumnMapping" />。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Remove(System.Object)">
      <summary>從集合移除為 <see cref="T:System.Object" /> 的 <see cref="T:System.Data.Common.DataColumnMapping" />。</summary>
      <param name="value">
        <see cref="T:System.Object" />，即是要移除的 <see cref="T:System.Data.Common.DataColumnMapping" />。</param>
      <exception cref="T:System.InvalidCastException">指定的物件不是 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</exception>
      <exception cref="T:System.ArgumentException">指定的物件不在集合中。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.RemoveAt(System.Int32)">
      <summary>從集合移除具有指定索引的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</summary>
      <param name="index">要移除之 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件的以零為基底的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">沒有具有指定索引的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.RemoveAt(System.String)">
      <summary>從集合移除具有指定來源資料列名稱的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</summary>
      <param name="sourceColumn">區分大小寫的來源資料行名稱。</param>
      <exception cref="T:System.IndexOutOfRangeException">沒有具有指定來源資料行名稱的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</exception>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，這個值會指出 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (具備安全執行緒)。</summary>
      <returns>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#ICollection#SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns>如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#IsReadOnly">
      <summary>取得值，這個值表示 <see cref="T:System.Collections.IList" /> 是否為唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <param name="index">要取得或設定之以零為起始的項目索引。</param>
      <returns>在指定索引上的項目。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#Add(System.String,System.String)">
      <summary>使用來源資料行和 <see cref="T:System.Data.Common.DataColumnMapping" /> 資料行名稱，將 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 物件加入至 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="sourceColumnName">來源資料行的區分大小寫名稱。</param>
      <param name="dataSetColumnName">
        <see cref="T:System.Data.DataSet" /> 資料行的名稱。</param>
      <returns>加入至集合的 ColumnMapping 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#GetByDataSetColumn(System.String)">
      <summary>取得具有指定之 <see cref="T:System.Data.Common.DataColumnMapping" /> 資料行名稱的 <see cref="T:System.Data.DataSet" /> 物件。</summary>
      <param name="dataSetColumnName">要尋找的 <see cref="T:System.Data.DataSet" /> 資料行名稱，不區分大小寫。</param>
      <returns>具有指定之 <see cref="T:System.Data.Common.DataColumnMapping" /> 資料行名稱的 <see cref="T:System.Data.DataSet" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#Item(System.String)">
      <summary>取得或設定具有指定 <see langword="SourceColumn" /> 名稱的 <see cref="T:System.Data.IColumnMapping" /> 物件。</summary>
      <param name="index">項目的索引。</param>
      <returns>具有指定 <see langword="IColumnMapping" /> 名稱的 <see langword="SourceColumn" /> 物件。</returns>
    </member>
    <member name="T:System.Data.Common.DataTableMapping">
      <summary>含有來源資料表和 <see cref="T:System.Data.DataTable" /> 之間對應關聯性 (Relationship) 的描述。 在填入 <see cref="T:System.Data.Common.DataAdapter" /> 時，<see cref="T:System.Data.DataSet" /> 會使用這個類別。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DataTableMapping" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor(System.String,System.String)">
      <summary>使用在提供來源資料表名稱和 <see cref="T:System.Data.Common.DataTableMapping" /> 名稱時的來源來初始化 <see cref="T:System.Data.DataTable" /> 類別的新執行個體。</summary>
      <param name="sourceTable">來自資料來源的區分大小寫之來源資料表名稱。</param>
      <param name="dataSetTable">來自要對應至的 <see cref="T:System.Data.DataSet" /> 之資料表名稱。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor(System.String,System.String,System.Data.Common.DataColumnMapping[])">
      <summary>在提供來源資料表名稱、<see cref="T:System.Data.Common.DataTableMapping" /> 名稱和 <see cref="T:System.Data.DataTable" /> 物件的陣列時，初始化 <see cref="T:System.Data.Common.DataColumnMapping" /> 類別的新執行個體。</summary>
      <param name="sourceTable">來自資料來源的區分大小寫之來源資料表名稱。</param>
      <param name="dataSetTable">來自要對應至的 <see cref="T:System.Data.DataSet" /> 之資料表名稱。</param>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 物件的陣列。</param>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.ColumnMappings">
      <summary>取得 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>資料行對應集合。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.DataSetTable">
      <summary>從 <see cref="T:System.Data.DataSet" /> 取得或設定資料表名稱。</summary>
      <returns>來自 <see cref="T:System.Data.DataSet" /> 的資料表名稱。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetColumnMappingBySchemaAction(System.String,System.Data.MissingMappingAction)">
      <summary>使用指定的 <see cref="T:System.Data.DataColumn" /> 值和 <see cref="T:System.Data.DataTable" /> 的名稱來從指定的 <see cref="T:System.Data.MissingMappingAction" /> 取得 <see cref="T:System.Data.DataColumn" />。</summary>
      <param name="sourceColumn">
        <see cref="T:System.Data.DataColumn" /> 的名稱。</param>
      <param name="mappingAction">其中一個 <see cref="T:System.Data.MissingMappingAction" /> 值。</param>
      <returns>資料行。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 參數已經設定為 <see langword="Error" />，並且未指定任何對應。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetDataColumn(System.String,System.Type,System.Data.DataTable,System.Data.MissingMappingAction,System.Data.MissingSchemaAction)">
      <summary>傳回指定資料行名稱的 <see cref="T:System.Data.DataColumn" /> 物件。</summary>
      <param name="sourceColumn">
        <see cref="T:System.Data.DataColumn" /> 的名稱。</param>
      <param name="dataType">
        <paramref name="sourceColumn" /> 的資料型別。</param>
      <param name="dataTable">來自要對應至的 <see cref="T:System.Data.DataSet" /> 之資料表名稱。</param>
      <param name="mappingAction">其中一個 <see cref="T:System.Data.MissingMappingAction" /> 值。</param>
      <param name="schemaAction">其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。</param>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetDataTableBySchemaAction(System.Data.DataSet,System.Data.MissingSchemaAction)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" /> 值來為指定 <see cref="T:System.Data.DataSet" /> 取得目前的 <see cref="T:System.Data.MissingSchemaAction" />。</summary>
      <param name="dataSet">用來取得 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="schemaAction">其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。</param>
      <returns>資料表。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.SourceTable">
      <summary>從資料來源取得或設定區分大小寫的來源資料表名稱。</summary>
      <returns>來自資料來源的區分大小寫之來源資料表名稱。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.System#Data#ITableMapping#ColumnMappings">
      <summary>為 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 取得衍生的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>資料行對應集合。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.System#ICloneable#Clone">
      <summary>建立目前執行個體複本的新物件。</summary>
      <returns>目前執行個體複本的新物件。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.ToString">
      <summary>將目前的 <see cref="P:System.Data.Common.DataTableMapping.SourceTable" /> 名稱轉換為字串。</summary>
      <returns>目前的 <see cref="P:System.Data.Common.DataTableMapping.SourceTable" /> 名稱，做為字串。</returns>
    </member>
    <member name="T:System.Data.Common.DataTableMappingCollection">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" /> 物件的集合。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 類別的新執行個體。 這個新執行個體 (Instance) 是空的，也就是說，它尚未含有任何 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Add(System.Object)">
      <summary>加入即是資料表對應的 <see cref="T:System.Object" /> 至集合。</summary>
      <param name="value">要加入集合的 <see langword="DataTableMapping" /> 物件。</param>
      <returns>加入至集合的 <see langword="DataTableMapping" /> 的索引。</returns>
      <exception cref="T:System.InvalidCastException">傳入的物件不是 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Add(System.String,System.String)">
      <summary>在提供來源資料表名稱和 <see cref="T:System.Data.Common.DataTableMapping" /> 資料表名稱時，將 <see cref="T:System.Data.DataSet" /> 物件加入至集合。</summary>
      <param name="sourceTable">要對應的來源資料行之區分大小寫名稱。</param>
      <param name="dataSetTable">要對應至的 <see cref="T:System.Data.DataSet" /> 資料表名稱，不區分大小寫。</param>
      <returns>加入至集合的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.AddRange(System.Array)">
      <summary>將指定 <see cref="T:System.Array" /> 的元素複製到集合結尾。</summary>
      <param name="values">要加入至集合的值 <see cref="T:System.Array" />。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.AddRange(System.Data.Common.DataTableMapping[])">
      <summary>將指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 陣列元素複製到集合的末端。</summary>
      <param name="values">要加入至集合的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件陣列。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Clear">
      <summary>從集合中移除所有 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Contains(System.Object)">
      <summary>取得值，指出指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件是否存在於集合。</summary>
      <param name="value">
        <see cref="T:System.Object" />，即是 <see cref="T:System.Data.Common.DataTableMapping" />。</param>
      <returns>如果這個集合包含指定的 <see cref="T:System.Data.Common.DataTableMapping" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Contains(System.String)">
      <summary>取得值，指出具有指定來源資料表名稱的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件是否存在於集合。</summary>
      <param name="value">含有 <see cref="T:System.Data.Common.DataTableMapping" /> 物件的區分大小寫來源資料表名稱。</param>
      <returns>如果集合包含具有這個來源資料表名稱的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.CopyTo(System.Array,System.Int32)">
      <summary>複製 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 的項目至指定陣列。</summary>
      <param name="array">要複製 <see cref="T:System.Array" /> 項目至的 <see cref="T:System.Data.Common.DataTableMappingCollection" />。</param>
      <param name="index">陣列的開始索引。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.CopyTo(System.Data.Common.DataTableMapping[],System.Int32)">
      <summary>複製 <see cref="T:System.Data.Common.DataTableMapping" /> 的項目至指定陣列。</summary>
      <param name="array">將 <see cref="T:System.Data.Common.DataTableMapping" /> 項目複製至的 <see cref="T:System.Data.Common.DataTableMappingCollection" />。</param>
      <param name="index">陣列的開始索引。</param>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Count">
      <summary>取得集合中 <see cref="T:System.Data.Common.DataTableMapping" /> 物件的數目。</summary>
      <returns>集合中的 <see langword="DataTableMapping" /> 物件數目。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetByDataSetTable(System.String)">
      <summary>取得具有指定 <see cref="T:System.Data.Common.DataTableMapping" /> 資料表名稱的 <see cref="T:System.Data.DataSet" /> 物件。</summary>
      <param name="dataSetTable">要尋找的 <see cref="T:System.Data.DataSet" /> 資料表名稱，不區分大小寫。</param>
      <returns>具有指定 <see cref="T:System.Data.Common.DataTableMapping" /> 資料表名稱的 <see cref="T:System.Data.DataSet" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetEnumerator">
      <summary>取得可以逐一查看集合的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetTableMappingBySchemaAction(System.Data.Common.DataTableMappingCollection,System.String,System.String,System.Data.MissingMappingAction)">
      <summary>使用指定的 <see cref="T:System.Data.Common.DataColumnMapping" /> 來取得具有指定來源資料表名稱和 <see cref="T:System.Data.DataSet" /> 資料表名稱的 <see cref="T:System.Data.MissingMappingAction" /> 物件。</summary>
      <param name="tableMappings">要搜尋的 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 集合。</param>
      <param name="sourceTable">已對應來源資料表的區分大小寫名稱。</param>
      <param name="dataSetTable">已對應 <see cref="T:System.Data.DataSet" /> 資料表的名稱，不區分大小寫。</param>
      <param name="mappingAction">其中一個 <see cref="T:System.Data.MissingMappingAction" /> 值。</param>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 參數已經設定為 <see langword="Error" />，並且未指定任何對應。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOf(System.Object)">
      <summary>取得集合中指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件位置。</summary>
      <param name="value">
        <see cref="T:System.Object" />，即是要尋找的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</param>
      <returns>集合中指定 <see cref="T:System.Data.Common.DataTableMapping" /> 物件的以零起始位置。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOf(System.String)">
      <summary>取得具有指定來源資料表名稱的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件位置。</summary>
      <param name="sourceTable">來源資料表的區分大小寫名稱。</param>
      <returns>具有指定來源資料表名稱的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件之以零起始的位置。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOfDataSetTable(System.String)">
      <summary>取得具有指定 <see cref="T:System.Data.Common.DataTableMapping" /> 資料表名稱的 <see cref="T:System.Data.DataSet" /> 物件位置。</summary>
      <param name="dataSetTable">要尋找的 <see langword="DataSet" /> 資料表名稱，不區分大小寫。</param>
      <returns>具有指定 <see cref="T:System.Data.Common.DataTableMapping" /> 資料表名稱的 <see cref="T:System.Data.DataSet" /> 物件之以零起始位置，或 -1 (如果 <see cref="T:System.Data.Common.DataTableMapping" /> 物件不存在於集合中)。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Insert(System.Int32,System.Data.Common.DataTableMapping)">
      <summary>將 <see cref="T:System.Data.Common.DataTableMapping" /> 物件插入 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 的指定索引處。</summary>
      <param name="index">要插入之 <see cref="T:System.Data.Common.DataTableMapping" /> 物件以零為起始的索引。</param>
      <param name="value">要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Insert(System.Int32,System.Object)">
      <summary>將 <see cref="T:System.Data.Common.DataTableMapping" /> 物件插入 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 的指定索引處。</summary>
      <param name="index">要插入之 <see cref="T:System.Data.Common.DataTableMapping" /> 物件以零為起始的索引。</param>
      <param name="value">要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</param>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Item(System.Int32)">
      <summary>取得或設定在指定索引處的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</summary>
      <param name="index">要傳回的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件之以零起始的索引。</param>
      <returns>位於指定索引處的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Item(System.String)">
      <summary>取得或設定具有指定來源資料表名稱的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</summary>
      <param name="sourceTable">來源資料表的區分大小寫名稱。</param>
      <returns>具有指定來源資料表名稱的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Remove(System.Data.Common.DataTableMapping)">
      <summary>從集合中移除指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</summary>
      <param name="value">要移除的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Remove(System.Object)">
      <summary>從集合中移除指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</summary>
      <param name="value">要移除的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</param>
      <exception cref="T:System.InvalidCastException">指定的物件不是 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</exception>
      <exception cref="T:System.ArgumentException">指定的物件不在集合中。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.RemoveAt(System.Int32)">
      <summary>從集合移除位在指定索引處的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</summary>
      <param name="index">要移除之 <see cref="T:System.Data.Common.DataTableMapping" /> 物件的以零為基底的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">不存在具有指定索引的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.RemoveAt(System.String)">
      <summary>從集合移除具有指定來源資料表名稱的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</summary>
      <param name="sourceTable">要尋找的區分大小寫來源資料表名稱。</param>
      <exception cref="T:System.IndexOutOfRangeException">不存在具有指定來源資料表名稱的 <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</exception>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#ICollection#SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns>如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>從集合中取得或設定在指定索引的項目。</summary>
      <param name="index">要取得或設定的項目之以零起始的索引。</param>
      <returns>在指定索引上的項目。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#Add(System.String,System.String)">
      <summary>加入資料表對應至集合。</summary>
      <param name="sourceTableName">來源資料表的區分大小寫名稱。</param>
      <param name="dataSetTableName">
        <see cref="T:System.Data.DataSet" /> 資料表的名稱。</param>
      <returns>新對應 <see cref="T:System.Data.ITableMapping" /> 物件的參考。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#GetByDataSetTable(System.String)">
      <summary>取得具有指定 <see cref="T:System.Data.DataSet" /> 資料表名稱的 TableMapping 物件。</summary>
      <param name="dataSetTableName">在集合中的 <see langword="DataSet" /> 資料表名稱。</param>
      <returns>具有指定 <see langword="DataSet" /> 資料表名稱的 TableMapping 物件。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#Item(System.String)">
      <summary>取得或設定具有指定 <see cref="T:System.Data.ITableMapping" /> 名稱之 <see cref="P:System.Data.ITableMapping.SourceTable" /> 的執行個體。</summary>
      <param name="index">
        <see cref="T:System.Data.ITableMapping" /> 的 <see langword="SourceTable" /> 名稱。</param>
      <returns>具有指定 <see langword="SourceTable" /> 名稱之 <see cref="T:System.Data.ITableMapping" /> 的執行個體。</returns>
    </member>
    <member name="T:System.Data.Common.DbColumn">
      <summary>表示資料來源內的資料行。</summary>
    </member>
    <member name="M:System.Data.Common.DbColumn.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbColumn" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Common.DbColumn.AllowDBNull">
      <summary>取得可為 Null 的布林值，指出此資料行是否允許 <see langword="DBNull" /> 值，或如未設定任何值，則傳回 <see langword="null" />。 在衍生類別中覆寫時，可以設定為 <see langword="true" /> 或 <see langword="false" />，指出此資料行是否允許 <see langword="DBNull" /> 值，或為 <see langword="null" /> (Visual Basic 為 <see langword="Nothing" />)。</summary>
      <returns>如果此資料行允許 <see langword="DBNull" /> 值，則傳回 <see langword="true" />；否則傳回 <see langword="false" />。 如未設定任何值，則傳回 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseCatalogName">
      <summary>取得與資料來源建立關聯的目錄名稱，如未設定任何值則為 <see langword="null" />。 在衍生類別中覆寫時，可以設定為目錄名稱或 <see langword="null" />。</summary>
      <returns>與資料來源建立關聯的目錄名稱，如未設定任何值則為 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseColumnName">
      <summary>取得基底資料行名稱，如未設定任何值則為 <see langword="null" />。 在衍生類別中覆寫時，可以設定為資料行名稱或 <see langword="null" />。</summary>
      <returns>基底資料行名稱，如未設定任何值則為 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseSchemaName">
      <summary>取得與資料來源建立關聯的結構描述名稱，如未設定任何值則為 <see langword="null" />。 在衍生類別中覆寫時，可以設定為結構描述名稱或 <see langword="null" />。</summary>
      <returns>與資料來源建立關聯的結構描述名稱，如未設定任何值則為 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseServerName">
      <summary>取得與資料行建立關聯的伺服器名稱，如未設定任何值則為 <see langword="null" />。 在衍生類別中覆寫時，可以設定為伺服器名稱或 <see langword="null" />。</summary>
      <returns>與資料行建立關聯的伺服器名稱，如未設定任何值則為 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseTableName">
      <summary>取得結構描述中的資料表名稱，如未設定任何值則為 <see langword="null" />。 在衍生類別中覆寫時，可以設定為資料表名稱或 <see langword="null" />。</summary>
      <returns>結構描述中的資料表名稱，如未設定任何值則為 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.ColumnName">
      <summary>取得資料行名稱。 在衍生類別中覆寫時，可以設定為資料行名稱。</summary>
      <returns>資料行名稱。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.ColumnOrdinal">
      <summary>取得資料來源資料列中的資料行位置 (序數)，如未設定任何值則為 <see langword="null" />。 在衍生類別中覆寫時，可以設定為 <see langword="int32" /> 值以指定資料行位置，或為 <see langword="null" />。</summary>
      <returns>資料行序數的 <see langword="int32" /> 值，如未設定任何值則為 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.ColumnSize">
      <summary>取得資料行大小，如未設定任何值則為 <see langword="null" />。 在衍生類別中覆寫時，可以設定為 <see langword="int32" /> 值以指定資料行大小，或為 <see langword="null" />。</summary>
      <returns>資料行大小的<see langword="Nothing" /> 值; 如果未設定任何值，則為 null 參考（在 Visual Basic 中）。 <see langword="int32" /></returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.DataType">
      <summary>取得儲存在資料行的資料類型。 在衍生類別中覆寫時，可以設定為 <see cref="T:System.Type" /> 物件，表示資料行中的資料類型。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示資料行包含的資料類型。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.DataTypeName">
      <summary>取得資料類型的名稱，如未設定任何值則取得 <see langword="null" />。 在衍生類別中覆寫時，可以設定為資料類型名稱或 <see langword="null" />。</summary>
      <returns>資料類型的名稱，如未設定任何值則為 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsAliased">
      <summary>取得可為 Null 的布林值，指出此資料行是否為別名，或如未設定任何值，則傳回 <see langword="null" />。 在衍生類別中覆寫時，可以設定為 <see langword="true" /> 或 <see langword="false" />，指出此資料行是否為別名，或為 <see langword="null" /> (Visual Basic 為 <see langword="Nothing" />)。</summary>
      <returns>如果此資料行是別名，則傳回 <see langword="true" />；否則傳回 <see langword="false" />。 如未設定任何值，則傳回 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsAutoIncrement">
      <summary>取得可為 Null 的布林值，指出此資料行的值是否會自動累加，或如未設定任何值，則傳回 <see langword="null" />。 在衍生類別中覆寫時，可以設定為 <see langword="true" /> 或 <see langword="false" />，指出此資料行的值是否可以自動累加，或為 <see langword="null" /> (Visual Basic 為 <see langword="Nothing" />)。</summary>
      <returns>如果此資料行中的值會自動累加，則傳回 <see langword="true" />；否則傳回 <see langword="false" />。 如未設定任何值，則傳回 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsExpression">
      <summary>取得可為 Null 的布林值，指出此資料行是否為運算式，或如未設定任何值，則傳回 <see langword="null" />。 在衍生類別中覆寫時，可以設定為 <see langword="true" /> 或 <see langword="false" />，指出此資料行是否為運算式，或為 <see langword="null" /> (Visual Basic 為 <see langword="Nothing" />)。</summary>
      <returns>如果此資料行是運算式，則傳回 <see langword="true" />；否則傳回 <see langword="false" />。 如未設定任何值，則傳回 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsHidden">
      <summary>取得可為 Null 的布林值，指出是否隱藏此資料行，或如未設定任何值，則傳回 <see langword="null" />。 在衍生類別中覆寫時，可以設定為 <see langword="true" /> 或 <see langword="false" />，指出是否隱藏此資料行，或為 <see langword="null" /> (Visual Basic 為 <see langword="Nothing" />)。</summary>
      <returns>如果此資料行被隱藏，則傳回 <see langword="true" />；否則傳回 <see langword="false" />。 如未設定任何值，則傳回 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsIdentity">
      <summary>取得可為 Null 的布林值，指出此資料行是否為身分識別，或如未設定任何值，則傳回 <see langword="null" />。 在衍生類別中覆寫時，可以設定為 <see langword="true" /> 或 <see langword="false" />，指出此資料行是否為身分識別，或為 <see langword="null" /> (Visual Basic 為 <see langword="Nothing" />)。</summary>
      <returns>如果此資料行是身分識別，則傳回 <see langword="true" />；否則傳回 <see langword="false" />。 如未設定任何值，則傳回 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsKey">
      <summary>取得可為 Null 的布林值，指出此資料行是否為索引鍵，或如未設定任何值，則傳回 <see langword="null" />。 在衍生類別中覆寫時，可以設定為 <see langword="true" /> 或 <see langword="false" />，指出此資料行是否為索引鍵，或為 <see langword="null" /> (Visual Basic 為 <see langword="Nothing" />)。</summary>
      <returns>如果此資料行是索引鍵，則傳回 <see langword="true" />；否則傳回 <see langword="false" />。 如未設定任何值，則傳回 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsLong">
      <summary>取得可為 Null 的布林值，指出此資料行是否包含長資料，或如未設定任何值，則傳回 <see langword="null" />。 在衍生類別中覆寫時，可以設定為 <see langword="true" /> 或 <see langword="false" />，指出此資料行是否包含長資料，或為 <see langword="null" /> (Visual Basic 為 <see langword="Nothing" />)。</summary>
      <returns>如果此資料行包含長資料，則傳回 <see langword="true" />；否則傳回 <see langword="false" />。 如未設定任何值，則傳回 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsReadOnly">
      <summary>取得可為 Null 的布林值，指出此資料行是否為唯讀，或如未設定任何值，則傳回 <see langword="null" />。 在衍生類別中覆寫時，可以設定為 <see langword="true" /> 或 <see langword="false" />，指出此資料行是否為唯讀，或為 <see langword="null" /> (Visual Basic 為 <see langword="Nothing" />)。</summary>
      <returns>如果此資料行是唯讀的，則傳回 <see langword="true" />；否則傳回 <see langword="false" />。 如未設定任何值，則傳回 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsUnique">
      <summary>取得可為 Null 的布林值，指出此資料行是否套用唯一的限制式，或如未設定任何值，則傳回 <see langword="null" />。 在衍生類別中覆寫時，可以設定為 <see langword="true" /> 或 <see langword="false" />，指出此資料行是否套用唯一的限制式，或為 <see langword="null" /> (Visual Basic 為 <see langword="Nothing" />)。</summary>
      <returns>如果此資料行套用唯一的限制式，則傳回 <see langword="true" />；否則傳回 <see langword="false" />。 如未設定任何值，則傳回 Null 參考 (Visual Basic 為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.Item(System.String)">
      <summary>根據資料行屬性名稱取得物件。</summary>
      <param name="property">資料行屬性名稱。</param>
      <returns>以資料行屬性名稱為基礎的物件。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.NumericPrecision">
      <summary>取得資料行資料的數值有效位數，如未設定任何值則為 <see langword="null" />。 在衍生類別中覆寫時，可以設定為 <see langword="int32" /> 值以指定資料行資料的數值有效位數，或為 <see langword="null" />。</summary>
      <returns>如果<see langword="int32" />資料為數值，則為指定資料行資料之有效位數的值; 否則為 null 參考（<see langword="Nothing" />如果未設定任何值，則為 Visual Basic）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.NumericScale">
      <summary>取得可為 Null 的 <see langword="int32" /> 值，其會傳回 <see langword="null" /> 或資料行資料的數值小數位數。 在衍生類別中覆寫時，可以設定為資料行資料數值小數位數的 <see langword="null" /> 或 <see langword="int32" /> 值。</summary>
      <returns>如未設定任何值則為 Null 參考 (Visual Basic 為 <see langword="Nothing" />)；如為數值資料，則為指定資料行資料小數位數的 <see langword="int32" /> 值。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.UdtAssemblyQualifiedName">
      <summary>取得代表資料行中資料類型的 <see cref="T:System.Type" /> 物件的組件限定名稱，如未設定任何值則為 <see langword="null" />。 在衍生類別中覆寫時，可以設定為組件限定名稱或 <see langword="null" />。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件的組件限定名稱，代表資料行中資料的類型；若未設定值，則為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="T:System.Data.Common.DbCommand">
      <summary>表示要針對資料來源執行的 SQL 陳述式或預存程序。 為表示命令的資料庫特定類別，提供基底類別。 <see cref="Overload:System.Data.Common.DbCommand.ExecuteNonQueryAsync" /></summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.#ctor">
      <summary>建構 <see cref="T:System.Data.Common.DbCommand" /> 物件的執行個體。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.Cancel">
      <summary>當覆寫衍生類別時，嘗試取消執行 <see cref="T:System.Data.Common.DbCommand" />。</summary>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandText">
      <summary>當覆寫衍生類別時，取得或設定要對資料來源執行的文字命令。</summary>
      <returns>要執行的文字命令。 預設值為空字串 ("")。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandTimeout">
      <summary>當覆寫衍生類別時，取得或設定終止執行命令或產生錯誤之嘗試前的等待時間 (以秒為單位)。</summary>
      <returns>等待命令執行的時間 (以秒為單位)。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandType">
      <summary>當覆寫衍生類別時，取得設定 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 屬性的解譯方式。</summary>
      <returns>其中一個列舉值，指定如何解讀命令字串。 預設為 <see langword="Text" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.Connection">
      <summary>取得或設定由這個 <see cref="T:System.Data.Common.DbConnection" /> 使用的 <see cref="T:System.Data.Common.DbCommand" />。</summary>
      <returns>與資料來源的連接。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.CreateDbParameter">
      <summary>當覆寫衍生類別時，建立新的 <see cref="T:System.Data.Common.DbParameter" /> 物件執行個體。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.CreateParameter">
      <summary>建立 <see cref="T:System.Data.Common.DbParameter" /> 物件的新執行個體。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbConnection">
      <summary>當覆寫衍生類別時，取得或設定此 <see cref="T:System.Data.Common.DbCommand" /> 使用的 <see cref="T:System.Data.Common.DbConnection" />。</summary>
      <returns>與資料來源的連接。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbParameterCollection">
      <summary>當覆寫衍生類別時，取得 <see cref="T:System.Data.Common.DbParameter" /> 物件的集合。</summary>
      <returns>SQL 陳述式或預存程序的參數。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbTransaction">
      <summary>當覆寫衍生類別時，取得或設定此 <see cref="T:System.Data.Common.DbCommand" /> 物件執行所在的 <see cref="P:System.Data.Common.DbCommand.DbTransaction" />。</summary>
      <returns>在其中執行 .NET 資料提供者之命令物件的交易。 預設值為 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DesignTimeVisible">
      <summary>當覆寫衍生類別時，取得或設定指出是否應在自訂介面控制項中顯示命令物件的值。</summary>
      <returns>如果命令物件應該在控制項中顯示，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.DisposeAsync">
      <summary>非同步地處置命令物件。</summary>
      <returns>代表非同步作業的 <see cref="T:System.Threading.Tasks.ValueTask" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
      <summary>當覆寫衍生類別時，對連線執行命令文字。</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 的執行個體。</param>
      <returns>表示作業的工作。</returns>
      <exception cref="T:System.Data.Common.DbException">執行命令文字時發生錯誤。</exception>
      <exception cref="T:System.ArgumentException">無效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>提供者應該實作這個方法，以提供 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> 多載的非預設實作。
預設實作會叫用同步<see cref="M:System.Data.Common.DbCommand.ExecuteReader" />方法，並傳回完成的工作，封鎖呼叫的執行緒。 如果傳遞一個已經被取消的取消語彙基元，預設實作會傳回已取消的工作。 ExecuteReader 擲回的例外狀況會透過傳回的 Task Exception 屬性來傳送。
這個方法會接受可以用來要求提早取消作業的取消語彙基元。 實作可以忽略這項要求。</summary>
      <param name="behavior">陳述式執行和資料擷取的選項。</param>
      <param name="cancellationToken">取消非同步作業的語彙基元。</param>
      <returns>表示非同步作業的工作。</returns>
      <exception cref="T:System.Data.Common.DbException">執行命令文字時發生錯誤。</exception>
      <exception cref="T:System.ArgumentException">無效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQuery">
      <summary>當覆寫衍生類別時，對連線物件執行 SQL 陳述式。</summary>
      <returns>受影響的資料列數目。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync">
      <summary>非同步版本的 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />，這個版本會對連接物件執行 SQL 陳述式。
以 CancellationToken.None 叫用 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />。</summary>
      <returns>表示非同步作業的工作。</returns>
      <exception cref="T:System.Data.Common.DbException">執行命令文字時發生錯誤。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>這是 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> 的非同步版本。 提供者應該覆寫為適當的實作。 可以選擇性地接受忽略語彙基元。
預設實作會叫用同步<see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />方法，並傳回完成的工作，封鎖呼叫的執行緒。 如果傳遞一個已經被取消的取消語彙基元，預設實作會傳回已取消的工作。  <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> 擲回的例外狀況會透過傳回的工作例外狀況屬性來傳送。
在傳回的工作完成之前，不叫用 <see langword="DbCommand" /> 物件的其他方法及屬性。</summary>
      <param name="cancellationToken">取消非同步作業的語彙基元。</param>
      <returns>表示非同步作業的工作。</returns>
      <exception cref="T:System.Data.Common.DbException">執行命令文字時發生錯誤。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReader">
      <summary>針對 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 執行 <see cref="P:System.Data.Common.DbCommand.Connection" />，並傳回 <see cref="T:System.Data.Common.DbDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>針對 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 執行 <see cref="P:System.Data.Common.DbCommand.Connection" />，並使用其中一個 <see cref="T:System.Data.Common.DbDataReader" /> 值來建置 <see cref="T:System.Data.CommandBehavior" />。</summary>
      <param name="behavior">列舉值之一，指定命令的行為。</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync">
      <summary>非同步版本的 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />，該版本會針對 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 執行 <see cref="P:System.Data.Common.DbCommand.Connection" />，並傳回 <see cref="T:System.Data.Common.DbDataReader" />。
以 CancellationToken.None 叫用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />。</summary>
      <returns>表示非同步作業的工作。</returns>
      <exception cref="T:System.Data.Common.DbException">執行命令文字時發生錯誤。</exception>
      <exception cref="T:System.ArgumentException">無效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>非同步版本的 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />，該版本會針對 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 執行 <see cref="P:System.Data.Common.DbCommand.Connection" />，並傳回 <see cref="T:System.Data.Common.DbDataReader" />。
叫用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />。</summary>
      <param name="behavior">列舉值之一，指定命令的行為。</param>
      <returns>表示非同步作業的工作。</returns>
      <exception cref="T:System.Data.Common.DbException">執行命令文字時發生錯誤。</exception>
      <exception cref="T:System.ArgumentException">無效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>叫用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />。</summary>
      <param name="behavior">列舉值之一，指定命令的行為。</param>
      <param name="cancellationToken">取消非同步作業的語彙基元。</param>
      <returns>表示非同步作業的工作。</returns>
      <exception cref="T:System.Data.Common.DbException">執行命令文字時發生錯誤。</exception>
      <exception cref="T:System.ArgumentException">無效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>非同步版本的 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />，該版本會針對 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 執行 <see cref="P:System.Data.Common.DbCommand.Connection" />，並傳回 <see cref="T:System.Data.Common.DbDataReader" />。 此方法會散佈通知，表示不應取消作業。
叫用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />。</summary>
      <param name="cancellationToken">取消非同步作業的語彙基元。</param>
      <returns>表示非同步作業的工作。</returns>
      <exception cref="T:System.Data.Common.DbException">執行命令文字時發生錯誤。</exception>
      <exception cref="T:System.ArgumentException">無效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalar">
      <summary>當覆寫衍生類別時執行查詢，並傳回查詢傳回之結果集中第一列的第一欄。 會忽略所有其他的資料行和資料列。</summary>
      <returns>結果集中第一個資料列的第一個資料行。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalarAsync">
      <summary>
        <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> 的非同步版本，該版本會執行查詢並傳回查詢所傳回的結果集中第一個資料列的第一個資料行。 會忽略所有其他的資料行和資料列。
以 CancellationToken.None 叫用 <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />。</summary>
      <returns>表示非同步作業的工作。</returns>
      <exception cref="T:System.Data.Common.DbException">執行命令文字時發生錯誤。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)">
      <summary>這是 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> 的非同步版本。 提供者應該覆寫為適當的實作。 可以選擇性地接受忽略語彙基元。
預設實作會叫用同步<see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />方法，並傳回完成的工作，封鎖呼叫的執行緒。 如果傳遞一個已經被取消的取消語彙基元，預設實作會傳回已取消的工作。 ExecuteScalar 擲回的例外狀況會透過傳回的工作例外狀況屬性來傳送。
在傳回的工作完成之前，不叫用 <see langword="DbCommand" /> 物件的其他方法及屬性。</summary>
      <param name="cancellationToken">取消非同步作業的語彙基元。</param>
      <returns>表示非同步作業的工作。</returns>
      <exception cref="T:System.Data.Common.DbException">執行命令文字時發生錯誤。</exception>
    </member>
    <member name="P:System.Data.Common.DbCommand.Parameters">
      <summary>取得 <see cref="T:System.Data.Common.DbParameter" /> 物件的集合。 如需參數的詳細資訊，請參閱設定參數和參數資料類型。</summary>
      <returns>SQL 陳述式或預存程序的參數。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.Prepare">
      <summary>當覆寫衍生類別時，在資料來源上建立預先準備 (或預先編譯) 版本的命令。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.PrepareAsync(System.Threading.CancellationToken)">
      <summary>在資料來源上非同步地建立預先準備 (或預先編譯) 版本的命令。</summary>
      <param name="cancellationToken">取消非同步作業的選擇性語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>代表非同步作業的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Connection">
      <summary>取得或設定 <see cref="T:System.Data.IDbCommand" /> 的這個執行個體所使用的 <see cref="T:System.Data.IDbConnection" />。</summary>
      <returns>與資料來源的連接。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#CreateParameter">
      <summary>建立 <see cref="T:System.Data.IDbDataParameter" /> 物件的新執行個體。</summary>
      <returns>
        <see langword="IDbDataParameter" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader">
      <summary>針對 <see cref="P:System.Data.IDbCommand.Connection" /> 執行 <see cref="P:System.Data.IDbCommand.CommandText" />，並建置 <see cref="T:System.Data.IDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
      <summary>針對 <see cref="P:System.Data.IDbCommand.Connection" /> 執行 <see cref="P:System.Data.IDbCommand.CommandText" />，並使用其中一個 <see cref="T:System.Data.CommandBehavior" /> 值來建置 <see cref="T:System.Data.IDataReader" />。</summary>
      <param name="behavior">列舉值之一，指定命令的行為。</param>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Parameters">
      <summary>取得 <see cref="T:System.Data.IDataParameterCollection" />。</summary>
      <returns>SQL 陳述式或預存程序的參數。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Transaction">
      <summary>取得或設定 <see cref="P:System.Data.Common.DbCommand.DbTransaction" />，此 <see cref="T:System.Data.Common.DbCommand" /> 物件會在其中執行。</summary>
      <returns>.NET Framework 資料提供者的 <see langword="Command" /> 物件會在其中執行的交易。 預設值為 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.Transaction">
      <summary>取得或設定 <see cref="T:System.Data.Common.DbTransaction" />，此 <see cref="T:System.Data.Common.DbCommand" /> 物件會在其中執行。</summary>
      <returns>.NET Framework 資料提供者的 <see langword="Command" /> 物件會在其中執行的交易。 預設值為 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.UpdatedRowSource">
      <summary>當覆寫衍生類別時，取得或設定當 <see cref="T:System.Data.Common.DbDataAdapter" /> 的 Update 方法使使用 <see cref="T:System.Data.DataRow" /> 時，命令結果的套用方式。</summary>
      <returns>其中一個列舉值，指出命令結果的套用方式。 除非會自動產生命令，否則預設值為 <see langword="Both" />。 預設值為 <see langword="None" />。</returns>
    </member>
    <member name="T:System.Data.Common.DbCommandBuilder">
      <summary>自動產生單一資料表命令，可用來調解對 <see cref="T:System.Data.DataSet" /> 的變更和相關的資料庫。 這是只能被繼承的抽象類別。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.#ctor">
      <summary>初始化一個從 <see cref="T:System.Data.Common.DbCommandBuilder" /> 類別繼承的類別之新執行個體。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
      <summary>允許 <see cref="T:System.Data.Common.DbCommandBuilder" /> 類別的提供者實作處理其他參數屬性。</summary>
      <param name="parameter">套用其他修改的 <see cref="T:System.Data.Common.DbParameter" />。</param>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 所提供之結構描述資料表的 <see cref="M:System.Data.Common.DbDataReader.GetSchemaTable" />。</param>
      <param name="statementType">產生的命令類型：INSERT、UPDATE 或 DELETE。</param>
      <param name="whereClause">如果參數是更新或刪除 WHERE 子句的一部分，則為 <see langword="true" />，如果它是插入或更新值的一部分，則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.CatalogLocation">
      <summary>取得或設定 <see cref="T:System.Data.Common.DbCommandBuilder" /> 類別執行個體的 <see cref="T:System.Data.Common.CatalogLocation" />。</summary>
      <returns>
        <see cref="T:System.Data.Common.CatalogLocation" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.CatalogSeparator">
      <summary>取得或設定作為 <see cref="T:System.Data.Common.DbCommandBuilder" /> 類別執行個體之目錄分隔符號使用的字串。</summary>
      <returns>字串，表示與 <see cref="T:System.Data.Common.DbCommandBuilder" /> 類別之執行個體搭配使用的目錄分隔符號。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.ConflictOption">
      <summary>指定 <see cref="T:System.Data.ConflictOption" /> 所要使用的 <see cref="T:System.Data.Common.DbCommandBuilder" />。</summary>
      <returns>傳回其中一個 <see cref="T:System.Data.ConflictOption" /> 值，描述這個 <see cref="T:System.Data.Common.DbCommandBuilder" /> 的行為。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.DataAdapter">
      <summary>取得或設定會自動產生 Transact-SQL 陳述式的 <see cref="T:System.Data.Common.DbDataAdapter" /> 物件。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataAdapter" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Data.Common.DbCommandBuilder" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand">
      <summary>取得在資料來源上執行刪除時所需之自動產生的 <see cref="T:System.Data.Common.DbCommand" /> 物件。</summary>
      <returns>自動產生的 <see cref="T:System.Data.Common.DbCommand" /> 物件，執行刪除時所需要的。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
      <summary>選擇性地使用參數名稱的資料行，取得自動產生的 <see cref="T:System.Data.Common.DbCommand" /> 物件，其為在資料來源執行刪除時所需。</summary>
      <param name="useColumnsForParameterNames">如果為 <see langword="true" />，則盡可能產生符合資料行名稱的參數名稱。 若為 <see langword="false" />，則會產生 <c>@p1</c>、<c>@p2</c> 等等。</param>
      <returns>自動產生的 <see cref="T:System.Data.Common.DbCommand" /> 物件，執行刪除時所需要的。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetInsertCommand">
      <summary>取得在資料來源上執行插入時所需之自動產生的 <see cref="T:System.Data.Common.DbCommand" /> 物件。</summary>
      <returns>執行插入所需而自動產生的 <see cref="T:System.Data.Common.DbCommand" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
      <summary>選擇性地使用參數名稱的資料行，取得自動產生的 <see cref="T:System.Data.Common.DbCommand" /> 物件，其為在資料來源執行插入時所需。</summary>
      <param name="useColumnsForParameterNames">如果為 <see langword="true" />，則盡可能產生符合資料行名稱的參數名稱。 若為 <see langword="false" />，則會產生 <c>@p1</c>、<c>@p2</c> 等等。</param>
      <returns>執行插入所需而自動產生的 <see cref="T:System.Data.Common.DbCommand" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)">
      <summary>以 <c>@p#</c> 格式傳回指定參數的名稱。 建置自訂命令產生器時使用。</summary>
      <param name="parameterOrdinal">數字，要加入做為參數名稱的一部分。</param>
      <returns>參數的名稱，具有指定的數字附加做為參數名稱的一部分。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.String)">
      <summary>已提供部分參數名稱時，傳回完整參數名稱。</summary>
      <param name="parameterName">參數的部分名稱。</param>
      <returns>對應到所要求之部分參數名稱的完整參數名稱。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)">
      <summary>傳回相關 SQL 陳述式中參數的預留位置。</summary>
      <param name="parameterOrdinal">數字，要加入做為參數名稱的一部分。</param>
      <returns>已附加指定之數字的參數名稱。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)">
      <summary>傳回 <see cref="T:System.Data.Common.DbCommandBuilder" /> 的結構描述資料表。</summary>
      <param name="sourceCommand">要擷取對應結構描述資料表的 <see cref="T:System.Data.Common.DbCommand" />。</param>
      <returns>
        <see cref="T:System.Data.DataTable" />，表示特定 <see cref="T:System.Data.Common.DbCommand" /> 的結構描述。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand">
      <summary>取得在資料來源上執行更新時所需之自動產生的 <see cref="T:System.Data.Common.DbCommand" /> 物件。</summary>
      <returns>自動產生的 <see cref="T:System.Data.Common.DbCommand" /> 物件，執行更新時所需要的。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
      <summary>選擇性地使用參數名稱的資料行，取得自動產生的 <see cref="T:System.Data.Common.DbCommand" /> 物件，其為在資料來源執行更新時所需。</summary>
      <param name="useColumnsForParameterNames">如果為 <see langword="true" />，則盡可能產生符合資料行名稱的參數名稱。 若為 <see langword="false" />，則會產生 <c>@p1</c>、<c>@p2</c> 等等。</param>
      <returns>自動產生的 <see cref="T:System.Data.Common.DbCommand" /> 物件，執行更新時所需要的。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)">
      <summary>重設 <see cref="P:System.Data.Common.DbCommand.CommandTimeout" /> 上的 <see cref="P:System.Data.Common.DbCommand.Transaction" />、<see cref="P:System.Data.Common.DbCommand.CommandType" />、<see cref="T:System.Data.UpdateRowSource" /> 和 <see cref="T:System.Data.Common.DbCommand" /> 屬性。</summary>
      <param name="command">由命令產生器用於對應插入、更新或刪除命令的 <see cref="T:System.Data.Common.DbCommand" />。</param>
      <returns>用於每個插入、更新或刪除作業的 <see cref="T:System.Data.Common.DbCommand" /> 執行個體。 傳遞 null 值允許 <see cref="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)" /> 方法根據與 <see cref="T:System.Data.Common.DbCommand" /> 相關的 Select 命令來建立 <see cref="T:System.Data.Common.DbCommandBuilder" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)">
      <summary>在正確目錄案例中提供不具引號的識別項時，傳回該識別項具引號的正確格式，包括適當逸出識別項中的任何內嵌引號。</summary>
      <param name="unquotedIdentifier">原始的不具引號之識別項。</param>
      <returns>具引號版本的識別項。 識別項內的內嵌引號已適當逸出。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.QuotePrefix">
      <summary>取得或設定開始字元 (一個或多個)，當指定其名稱包含空白或保留語彙基元 (Token) 之類字元的資料庫物件時，就可以使用。</summary>
      <returns>要使用的開始字元。 預設為空字串。</returns>
      <exception cref="T:System.InvalidOperationException">在已經產生插入、更新或刪除命令之後，無法變更這個屬性。</exception>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.QuoteSuffix">
      <summary>取得或設定結束字元 (一個或多個)，當指定其名稱包含空白或保留語彙基元之類字元的資料庫物件時，就可以使用。</summary>
      <returns>要使用的結束字元。 預設為空字串。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.RefreshSchema">
      <summary>清除與這個 <see cref="T:System.Data.Common.DbCommandBuilder" /> 關聯的命令。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)">
      <summary>加入 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> 事件的事件處理常式。</summary>
      <param name="rowUpdatingEvent">
        <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 執行個體，包含關於事件的資訊。</param>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.SchemaSeparator">
      <summary>取得或設定用於結構描述識別項和任何其他識別項間之分隔符號的字元。</summary>
      <returns>當做結構描述分隔符號使用的字元。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.SetAllValues">
      <summary>指定更新陳述式中包含所有資料行值或只包含已變更的資料行值。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbCommandBuilder" /> 所產生的 UPDATE 陳述式包含所有資料行，則為 <see langword="true" />，如果只包含已變更的資料行，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
      <summary>註冊 <see cref="T:System.Data.Common.DbCommandBuilder" />，以處理 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> 的 <see cref="T:System.Data.Common.DbDataAdapter" /> 事件。</summary>
      <param name="adapter">要用於更新的 <see cref="T:System.Data.Common.DbDataAdapter" />。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)">
      <summary>已提供引號識別項時，傳回該識別項不具引號的正確格式，包括不逸出識別項中的任何內嵌引號。</summary>
      <param name="quotedIdentifier">將移除其內嵌引號的識別項。</param>
      <returns>不具引號的識別項，會適當包含內嵌的引號。</returns>
    </member>
    <member name="T:System.Data.Common.DbConnection">
      <summary>定義資料庫連線的核心行為，並為資料庫特定連線提供基底類別。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbConnection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)">
      <summary>當在衍生類別中被覆寫時，會開始進行資料庫交易。</summary>
      <param name="isolationLevel">其中一個列舉值，它指定指定要使用之交易的隔離等級。</param>
      <returns>代表新異動的物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginDbTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
      <summary>以非同步方式開始資料庫交易。</summary>
      <param name="isolationLevel">其中一個列舉值，它指定指定要使用之交易的隔離等級。</param>
      <param name="cancellationToken">取消非同步作業的語彙基元。</param>
      <returns>一個工作，其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性是代表新交易的物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransaction">
      <summary>開始資料庫交易。</summary>
      <returns>代表新異動的物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>使用指定的隔離等級開始資料庫異動。</summary>
      <param name="isolationLevel">其中一個列舉值，它指定指定要使用之交易的隔離等級。</param>
      <returns>代表新異動的物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
      <summary>以非同步方式開始資料庫交易。</summary>
      <param name="isolationLevel">其中一個列舉值，它指定指定要使用之交易的隔離等級。</param>
      <param name="cancellationToken">取消非同步作業的選擇性語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>一個工作，其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性是代表新交易的物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransactionAsync(System.Threading.CancellationToken)">
      <summary>以非同步方式開始資料庫交易。</summary>
      <param name="cancellationToken">取消非同步作業的選擇性語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>一個工作，其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性是代表新交易的物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.ChangeDatabase(System.String)">
      <summary>當在衍生類別中被覆寫時，針對開啟的連線變更目前的資料庫。</summary>
      <param name="databaseName">連線要使用之資料庫的名稱。</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.ChangeDatabaseAsync(System.String,System.Threading.CancellationToken)">
      <summary>以非同步方式針對開啟的連線變更目前的資料庫。</summary>
      <param name="databaseName">連線要使用之資料庫的名稱。</param>
      <param name="cancellationToken">取消非同步作業的選擇性語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步作業的工作。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.Close">
      <summary>當在衍生類別中被覆寫時，關閉與資料庫的連線。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.CloseAsync">
      <summary>以非同步方式關閉與資料庫的連線。</summary>
      <returns>代表非同步作業的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ConnectionString">
      <summary>當在衍生類別中覆寫時，取得或設定用於開啟連線的字串。</summary>
      <returns>用來建立初始連接的連接字串。 連接字串的確切內容取決於這個連接的特定資料來源。 預設值為空字串。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ConnectionTimeout">
      <summary>取得在終止嘗試並產生錯誤前建立連接的等待時間 (以秒為單位)。</summary>
      <returns>等待連接開啟的時間 (以秒為單位)。 預設值是由您使用的連接特定型別所決定。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.CreateCommand">
      <summary>建立並傳回與目前連接相關聯的 <see cref="T:System.Data.Common.DbCommand" /> 物件。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.CreateDbCommand">
      <summary>當在衍生類別中被覆寫時，建立並傳回與目前連線相關聯的 <see cref="T:System.Data.Common.DbCommand" /> 物件。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.Database">
      <summary>當在衍生類別中被覆寫時，取得連線開啟後的目前資料庫名稱，或連線開啟前連接字串中所指定的資料庫名稱。</summary>
      <returns>目前資料庫的名稱或連接開啟後要使用之資料庫的名稱。 預設值為空字串。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.DataSource">
      <summary>在衍生類別中被覆寫時，取得要連線之資料庫伺服器的名稱。</summary>
      <returns>要連接的資料庫伺服器名稱。 預設值為空字串。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.DbProviderFactory">
      <summary>取得此 <see cref="T:System.Data.Common.DbProviderFactory" /> 的 <see cref="T:System.Data.Common.DbConnection" />。</summary>
      <returns>用於建立資料來源類別 (class) 之提供者 (Provider) 實作 (Implementation) 執行個體的一組方法。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.DisposeAsync">
      <summary>以非同步方式處置連線物件。</summary>
      <returns>代表非同步作業的 <see cref="T:System.Threading.Tasks.ValueTask" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>登記指定的交易。</summary>
      <param name="transaction">要登記之現有 <see cref="T:System.Transactions.Transaction" /> 的參考。</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema">
      <summary>傳回這個 <see cref="T:System.Data.Common.DbConnection" /> 之資料來源的結構描述資訊。</summary>
      <returns>包含結構描述資訊的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema(System.String)">
      <summary>使用結構描述名稱的特定字串，傳回這個 <see cref="T:System.Data.Common.DbConnection" /> 之資料來源的結構描述資訊。</summary>
      <param name="collectionName">指定要傳回之結構描述的名稱。</param>
      <returns>包含結構描述資訊的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionName" /> 指定為 null。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema(System.String,System.String[])">
      <summary>使用結構描述名稱的特定字串和限制值的特定字串陣列，傳回這個 <see cref="T:System.Data.Common.DbConnection" /> 的資料來源的結構描述資訊。</summary>
      <param name="collectionName">指定要傳回之結構描述的名稱。</param>
      <param name="restrictionValues">指定所要求之結構描述的限制值集合。</param>
      <returns>包含結構描述資訊的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionName" /> 指定為 null。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)">
      <summary>引發 <see cref="E:System.Data.Common.DbConnection.StateChange" /> 事件。</summary>
      <param name="stateChange">
        <see cref="T:System.Data.StateChangeEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.Open">
      <summary>當在衍生類別中被覆寫時，使用由 <see cref="P:System.Data.Common.DbConnection.ConnectionString" /> 指定的設定開啟資料庫連線。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.OpenAsync">
      <summary>非同步版本的 <see cref="M:System.Data.Common.DbConnection.Open" />，這個版本會透過 <see cref="P:System.Data.Common.DbConnection.ConnectionString" /> 所指定的設定開啟資料庫連接。 這個方法會叫用虛擬方法 <see cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)" /> 與 CancellationToken.None。</summary>
      <returns>表示非同步作業的工作。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>這是 <see cref="M:System.Data.Common.DbConnection.Open" /> 的非同步版本。 提供者應該覆寫為適當的實作。 可以選擇性地接受取消語彙基元。
預設實作會叫用同步<see cref="M:System.Data.Common.DbConnection.Open" />呼叫並傳回完成的工作。 如果傳遞一個已經被取消的 cancellationToken，預設實作會傳回已取消的工作。 Open 擲回的例外狀況會透過傳回的工作例外狀況屬性來傳送。
在傳回的工作完成之前，不叫用 <see langword="DbConnection" /> 物件的其他方法及屬性。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示非同步作業的工作。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ServerVersion">
      <summary>當在衍生類別中被覆寫時，取得代表物件所連線之伺服器版本的字串。</summary>
      <returns>資料庫的版本。 傳回的字串格式取決於您所使用的連接特定型別。</returns>
      <exception cref="T:System.InvalidOperationException">傳回的工作未完成時即已呼叫 <see cref="P:System.Data.Common.DbConnection.ServerVersion" />，而且在呼叫 <see cref="Overload:System.Data.Common.DbConnection.OpenAsync" /> 之後未開啟連接。</exception>
    </member>
    <member name="P:System.Data.Common.DbConnection.State">
      <summary>取得字串，描述連接的狀態。</summary>
      <returns>連接的狀態。 傳回的字串格式取決於您所使用的連接特定型別。</returns>
    </member>
    <member name="E:System.Data.Common.DbConnection.StateChange">
      <summary>發生於事件的狀態變更時。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction">
      <summary>開始資料庫異動。</summary>
      <returns>代表新異動的物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)">
      <summary>使用指定的隔離等級開始資料庫異動。</summary>
      <param name="isolationLevel">其中一個列舉值，它指定指定要使用之交易的隔離等級。</param>
      <returns>代表新異動的物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand">
      <summary>建立並傳回與目前連線相關聯的 <see cref="T:System.Data.Common.DbCommand" /> 物件。</summary>
      <returns>與連線相關聯的 <see cref="T:System.Data.Common.DbCommand" /> 物件。</returns>
    </member>
    <member name="T:System.Data.Common.DbConnectionStringBuilder">
      <summary>提供強類型連接字串產生器的基底類別。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.#ctor(System.Boolean)">
      <summary>選擇性地使用 ODBC 規則將值以引號括住，進而初始化 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 類別的新執行個體。</summary>
      <param name="useOdbcRules">
        <see langword="true" /> 表示使用 {} 分隔欄位，<see langword="false" /> 表示使用引號。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)">
      <summary>將有指定索引鍵和數值項目加入 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中。</summary>
      <param name="keyword">要加入至 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的索引鍵。</param>
      <param name="value">指定索引鍵的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是唯讀的。
-或-
<see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)">
      <summary>提供有效且安全的方法，將索引鍵和值附加至現有的 <see cref="T:System.Text.StringBuilder" /> 物件。</summary>
      <param name="builder">要加入機碼值組的 <see cref="T:System.Text.StringBuilder" /></param>
      <param name="keyword">要加入的索引鍵。</param>
      <param name="value">所提供的索引鍵值。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
      <summary>提供有效且安全的方法，將索引鍵和值附加至現有的 <see cref="T:System.Text.StringBuilder" /> 物件。</summary>
      <param name="builder">要加入機碼值組的 <see cref="T:System.Text.StringBuilder" /></param>
      <param name="keyword">要加入的索引鍵。</param>
      <param name="value">所提供的索引鍵值。</param>
      <param name="useOdbcRules">
        <see langword="true" /> 表示使用 {} 分隔欄位，<see langword="false" /> 表示使用引號。</param>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.BrowsableConnectionString">
      <summary>取得或設定值，指出 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 屬性是否會顯示在 Visual Studio 設計工具中。</summary>
      <returns>如果連接字串顯示在設計工具中，則為 <see langword="true" />；否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Clear">
      <summary>清除 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 執行個體的內容。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ClearPropertyDescriptors">
      <summary>清除在相關聯 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 上的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 物件集合。</summary>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString">
      <summary>取得或設定與 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 相關聯的連接字串。</summary>
      <returns>從包含於 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的索引鍵/值組所建立的目前連接字串。 預設值為空字串。</returns>
      <exception cref="T:System.ArgumentException">已提供無效的連接字串引數。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)">
      <summary>判斷 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是否包含特定索引鍵。</summary>
      <param name="keyword">要在 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中尋找的索引鍵。</param>
      <returns>如果 <see langword="true" /> 包含具有指定索引鍵的項目，則為 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</exception>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Count">
      <summary>取得 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 屬性內所包含的索引鍵目前數目。</summary>
      <returns>包含在 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 執行個體所維護之連接字串內的索引鍵數目。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)">
      <summary>比較在這個 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 物件中的連接資訊和提供之物件中的連接資訊。</summary>
      <param name="connectionStringBuilder">要與這個 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 物件比較的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</param>
      <returns>如果這兩個 <see langword="true" /> 物件中的連接資訊會產生相等的連接字串，則為 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.GetProperties(System.Collections.Hashtable)">
      <summary>以這個 <see cref="T:System.Collections.Hashtable" /> 之所有屬性的相關資訊填滿提供的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</summary>
      <param name="propertyDescriptors">要使用這個 <see cref="T:System.Collections.Hashtable" /> 之相關資訊填滿的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</param>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是否有固定的大小。</summary>
      <returns>如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.IsReadOnly">
      <summary>取得值，這個值表示 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是否為唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Item(System.String)">
      <summary>取得或設定與指定之索引鍵相關聯的值。</summary>
      <param name="keyword">要取得或設定之項目的索引鍵。</param>
      <returns>與指定之索引鍵關聯的值。 如果找不到指定的索引鍵，嘗試使其傳回 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，並且嘗試將其設定為使用指定的索引鍵建立新項目。
傳遞 null (在 Visual Basic 中為 <see langword="Nothing" />) 索引鍵會擲回 <see cref="T:System.ArgumentNullException" />。 指派 null 值會移除索引鍵/值組。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定，而且 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是唯讀的。
-或-
屬性已設定、<paramref name="keyword" /> 不在於集合中，而且 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的大小固定。</exception>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Keys">
      <summary>取得 <see cref="T:System.Collections.ICollection" /> 中包含索引鍵的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中包含索引鍵的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Remove(System.String)">
      <summary>從 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 執行個體移除具有指定之索引鍵的項目。</summary>
      <param name="keyword">要從這個 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的連接字串中移除之索引鍵/值組的索引鍵。</param>
      <returns>如果索引鍵存在於連接字串中且遭到移除，則為 <see langword="true" />；如果索引鍵不存在，則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 為 null (在 Visual Basic 中為 <see langword="Nothing" />)。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是唯讀的，或 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)">
      <summary>指出這個 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 執行個體中，是否存在指定的索引鍵。</summary>
      <param name="keyword">要在 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中尋找的索引鍵。</param>
      <returns>如果 <see langword="true" /> 包含具有指定索引鍵的項目，則為 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Collections.ICollection" /> 索引開始，將 <see cref="T:System.Array" /> 的項目複製到 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>將隨附有索引鍵和值的項目加入至 <see cref="T:System.Collections.IDictionary" /> 物件。</summary>
      <param name="keyword">
        <see cref="T:System.Object" />，用做要加入之項目的索引鍵。</param>
      <param name="value">
        <see cref="T:System.Object" />，用做要加入之項目的值。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IDictionary" /> 物件是否包含具有指定索引鍵的項目。</summary>
      <param name="keyword">要在 <see cref="T:System.Collections.IDictionary" /> 物件中尋找的索引鍵。</param>
      <returns>如果 <see langword="true" /> 包含具有該索引鍵的項目，則為 <see cref="T:System.Collections.IDictionary" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件的 <see cref="T:System.Collections.IDictionary" /> 物件。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件的 <see cref="T:System.Collections.IDictionary" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Item(System.Object)">
      <summary>取得或設定具有指定索引鍵的項目。</summary>
      <param name="keyword">要取得或設定之項目的索引鍵。</param>
      <returns>具有指定索引鍵的項目。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IDictionary" /> 物件中移除具有指定索引鍵的項目。</summary>
      <param name="keyword">要移除的項目索引鍵。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 物件，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>傳回元件之這個執行個體的自訂屬性集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" />，其包含此物件的屬性。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>傳回這個元件執行個體的類別名稱。</summary>
      <returns>此物件的類別名稱，或如果類別沒有名稱，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>傳回這個元件執行個體的名稱。</summary>
      <returns>物件的名稱；如果物件沒有名稱，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>傳回這個元件執行個體的類型轉換子。</summary>
      <returns>這個物件之轉換子的 <see cref="T:System.ComponentModel.TypeConverter" />；如果這個物件沒有 <see langword="null" />，則為 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>傳回這個元件執行個體的預設事件。</summary>
      <returns>代表這個物件之預設事件的 <see cref="T:System.ComponentModel.EventDescriptor" />；如果這個物件沒有事件，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>傳回這個元件執行個體的屬性。</summary>
      <returns>代表這個物件之預設屬性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果這個物件沒有屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>傳回元件的這個執行個體之指定類型編輯器。</summary>
      <param name="editorBaseType">表示此物件編輯器的 <see cref="T:System.Type" />。</param>
      <returns>為此物件之編輯器的指定類型 <see cref="T:System.Object" />，如果找不到編輯器，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>傳回這個元件執行個體的事件。</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" />，代表此元件執行個體的事件。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>使用指定屬性陣列做為篩選條件傳回元件之執行個體的事件。</summary>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 類型陣列，可當做篩選條件使用。</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" />，代表此元件執行個體篩選過的事件。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>傳回元件之這個執行個體的屬性。</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，代表這個元件執行個體的屬性。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>使用屬性陣列做為篩選條件，傳回這個元件執行個體的屬性。</summary>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 類型陣列，可當做篩選條件使用。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，代表這個元件執行個體的篩選後屬性。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>傳回物件，包含指定的屬性描述項所描述的屬性。</summary>
      <param name="pd">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，代表要尋找其擁有者的屬性。</param>
      <returns>
        <see cref="T:System.Object" />，代表指定之屬性的擁有者。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ToString">
      <summary>傳回與這個 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 相關聯的連接字串。</summary>
      <returns>目前的 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>從這個 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 擷取對應到所提供之索引鍵的值。</summary>
      <param name="keyword">要擷取之項目的索引鍵。</param>
      <param name="value">對應至 <paramref name="keyword" /> 的值。</param>
      <returns>如果在連接字串中找到 <see langword="true" />，則為 <paramref name="keyword" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 包含 null 值 (在 Visual Basic 中為 <see langword="Nothing" />)。</exception>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Values">
      <summary>取得包含 <see cref="T:System.Collections.ICollection" /> 中之值的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />，其中包含 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中的值。</returns>
    </member>
    <member name="T:System.Data.Common.DbDataAdapter">
      <summary>協助 <see cref="T:System.Data.IDbDataAdapter" /> 介面的實作。 <see cref="T:System.Data.Common.DbDataAdapter" /> 繼承者實作一組函式以提供強型別，但繼承大多數完整實作 DataAdapter 所需的功能。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.#ctor">
      <summary>初始化 DataAdapter 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)">
      <summary>從相同類型的現有物件，初始化 <see langword="DataAdapter" /> 類別的新執行個體。</summary>
      <param name="adapter">
        <see langword="DataAdapter" /> 物件，用來建立新的 <see langword="DataAdapter" />。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)">
      <summary>加入 <see cref="T:System.Data.IDbCommand" /> 至目前批次。</summary>
      <param name="command">要加入至批次的 <see cref="T:System.Data.IDbCommand" />。</param>
      <returns>加入 <see cref="T:System.Data.IDbCommand" /> 之前，批次中的命令數目。</returns>
      <exception cref="T:System.NotSupportedException">配置器不支援批次。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.ClearBatch">
      <summary>將所有的 <see cref="T:System.Data.IDbCommand" /> 物件從批次中移除。</summary>
      <exception cref="T:System.NotSupportedException">配置器不支援批次。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 類別的新執行個體。</summary>
      <param name="dataRow">用來更新資料來源的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">在 <see cref="T:System.Data.IDbCommand" /> 期間執行的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="statementType">命令為 UPDATE、INSERT、DELETE 或 SELECT 陳述式。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</param>
      <returns>
        <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 類別的新執行個體。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 類別的新執行個體。</summary>
      <param name="dataRow">更新資料來源的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">要在 <see cref="T:System.Data.IDbCommand" /> 期間執行的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="statementType">命令為 UPDATE、INSERT、DELETE 或 SELECT 陳述式。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 物件。</param>
      <returns>
        <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 類別的新執行個體。</returns>
    </member>
    <member name="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName">
      <summary>資料表對應之 <see cref="T:System.Data.Common.DataAdapter" /> 物件所使用的預設名稱。</summary>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.DeleteCommand">
      <summary>取得或設定命令，以從資料集刪除資料錄。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />，在 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 期間用來為資料集中所刪除的資料列刪除在資料來源中的資料錄。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Data.Common.DbDataAdapter" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.ExecuteBatch">
      <summary>執行目前批次。</summary>
      <returns>批次中上一個命令的傳回值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)">
      <summary>在 <see cref="T:System.Data.DataSet" /> 中加入或重新整理資料列。</summary>
      <param name="dataSet">要填入資料錄和結構描述 (如果必要的話) 的 <see cref="T:System.Data.DataSet" />。</param>
      <returns>成功加入至 <see cref="T:System.Data.DataSet" /> 或在其中重新整理的資料列數目。 這不包含被不傳回資料列之陳述式所影響的資料列。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)">
      <summary>使用 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataSet" /> 名稱，加入或重新整理 <see cref="T:System.Data.DataTable" /> 中指定範圍內的資料列，以符合那些在資料來源中的資料列。</summary>
      <param name="dataSet">要填入資料錄和結構描述 (如果必要的話) 的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="startRecord">要起始之以零為起始的資料錄編號。</param>
      <param name="maxRecords">要擷取之資料錄的最大數目。</param>
      <param name="srcTable">用於資料表對應的來源資料表名稱。</param>
      <returns>成功加入至 <see cref="T:System.Data.DataSet" /> 或在其中重新整理的資料列數目。 這不包含被不傳回資料列之陳述式所影響的資料列。</returns>
      <exception cref="T:System.SystemException">
        <see cref="T:System.Data.DataSet" /> 無效。</exception>
      <exception cref="T:System.InvalidOperationException">來源資料表無效。
-或-
連接無效。</exception>
      <exception cref="T:System.InvalidCastException">找不到連線。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 參數小於 0。
-或-
<paramref name="maxRecords" /> 參數小於 0。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>使用 <see cref="T:System.Data.DataSet" />、來源資料表名稱、命令字串和命令行為，加入或重新整理 <see cref="T:System.Data.DataSet" /> 中指定範圍內的資料列，以符合那些在資料來源中的資料列。</summary>
      <param name="dataSet">要填入資料錄和結構描述 (如果必要的話) 的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="startRecord">要起始之以零為起始的資料錄編號。</param>
      <param name="maxRecords">要擷取之資料錄的最大數目。</param>
      <param name="srcTable">用於資料表對應的來源資料表名稱。</param>
      <param name="command">用來從資料來源擷取資料列的 SQL SELECT 陳述式。</param>
      <param name="behavior">其中一個 <see cref="T:System.Data.CommandBehavior" /> 值。</param>
      <returns>成功加入至 <see cref="T:System.Data.DataSet" /> 或在其中重新整理的資料列數目。 這不包含被不傳回資料列之陳述式所影響的資料列。</returns>
      <exception cref="T:System.InvalidOperationException">來源資料表無效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 參數小於 0。
-或-
<paramref name="maxRecords" /> 參數小於 0。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)">
      <summary>使用 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataSet" /> 名稱，加入或重新整理 <see cref="T:System.Data.DataTable" /> 中的資料列，以符合那些在資料來源中的資料列。</summary>
      <param name="dataSet">要填入資料錄和結構描述 (如果必要的話) 的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="srcTable">用於資料表對應的來源資料表名稱。</param>
      <returns>成功加入至 <see cref="T:System.Data.DataSet" /> 或在其中重新整理的資料列數目。 這不包含被不傳回資料列之陳述式所影響的資料列。</returns>
      <exception cref="T:System.SystemException">來源資料表無效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)">
      <summary>使用 <see cref="T:System.Data.DataSet" /> 名稱，加入或重新整理 <see cref="T:System.Data.DataTable" /> 中指定範圍內的資料列，以符合那些在資料來源中的資料列。</summary>
      <param name="dataTable">用於資料表對應的 <see cref="T:System.Data.DataTable" /> 名稱。</param>
      <returns>成功加入至 <see cref="T:System.Data.DataSet" /> 或在其中重新整理的資料列數目。 這不包含被不傳回資料列之陳述式所影響的資料列。</returns>
      <exception cref="T:System.InvalidOperationException">來源資料表無效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" />、<see cref="T:System.Data.DataTable" /> 和 <see cref="T:System.Data.IDbCommand" />，加入或重新整理 <see cref="T:System.Data.CommandBehavior" /> 中的資料列，以符合那些在資料來源中的資料列。</summary>
      <param name="dataTable">要填入資料錄和結構描述 (如果必要的話) 的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="command">用來從資料來源擷取資料列的 SQL SELECT 陳述式。</param>
      <param name="behavior">其中一個 <see cref="T:System.Data.CommandBehavior" /> 值。</param>
      <returns>成功加入至 <see cref="T:System.Data.DataTable" /> 或在其中重新整理的資料列數目。 這不包含被不傳回資料列之陳述式所影響的資料列。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>使用 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataSet" /> 名稱，加入或重新整理 <see cref="T:System.Data.DataTable" /> 中指定範圍內的資料列，以符合那些在資料來源中的資料列。</summary>
      <param name="dataTables">要從資料來源填入的 <see cref="T:System.Data.DataTable" /> 物件。</param>
      <param name="startRecord">要起始之以零為起始的資料錄編號。</param>
      <param name="maxRecords">要擷取之資料錄的最大數目。</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" />，執行其以填入 <see cref="T:System.Data.DataTable" /> 物件。</param>
      <param name="behavior">其中一個 <see cref="T:System.Data.CommandBehavior" /> 值。</param>
      <returns>加入至資料的資料表 (Data Table) 或在其中重新整理的資料列數目。</returns>
      <exception cref="T:System.SystemException">
        <see cref="T:System.Data.DataSet" /> 無效。</exception>
      <exception cref="T:System.InvalidOperationException">來源資料表無效。
-或-
連接無效。</exception>
      <exception cref="T:System.InvalidCastException">找不到連線。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 參數小於 0。
-或-
<paramref name="maxRecords" /> 參數小於 0。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])">
      <summary>從指定的記錄開始擷取直到指定的記錄最大數目為止，加入或重新整理 <see cref="T:System.Data.DataTable" /> 中的資料列，以符合那些在資料來源中的資料列。</summary>
      <param name="startRecord">要起始之以零為起始的資料錄編號。</param>
      <param name="maxRecords">要擷取之資料錄的最大數目。</param>
      <param name="dataTables">要從資料來源填入的 <see cref="T:System.Data.DataTable" /> 物件。</param>
      <returns>成功加入至 <see cref="T:System.Data.DataTable" /> 或在其中重新整理的資料列數目。 這個值不包含受未傳回資料列之陳述式所影響的資料列。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.FillCommandBehavior">
      <summary>取得或設定用來填入資料配接器 (Adapter) 之命令的行為。</summary>
      <returns>命令的 <see cref="T:System.Data.CommandBehavior" />，用於填入資料配接器。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>將名稱為 "Table" 的 <see cref="T:System.Data.DataTable" /> 加入至指定的 <see cref="T:System.Data.DataSet" />，並根據指定的 <see cref="T:System.Data.SchemaType" />，設定結構描述以符合資料來源中的資料表。</summary>
      <param name="dataSet">要插入結構描述的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">其中一個 <see cref="T:System.Data.SchemaType" /> 值，指定如何插入結構描述。</param>
      <returns>一個被新增至 <see cref="T:System.Data.DataSet" /> 的物件 <see cref="T:System.Data.DataTable" /> 之集合的參考。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)">
      <summary>將 <see cref="T:System.Data.DataTable" /> 加入至指定的 <see cref="T:System.Data.DataSet" />，並且根據指定的 <see cref="T:System.Data.SchemaType" /> 設定結構描述，以符合資料來源中的資料表。</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" />，以資料來源中的結構描述來填入其中。</param>
      <param name="schemaType">其中一個 <see cref="T:System.Data.SchemaType" /> 值。</param>
      <param name="command">用來從資料來源擷取資料列的 SQL SELECT 陳述式。</param>
      <param name="srcTable">用於資料表對應的來源資料表名稱。</param>
      <param name="behavior">其中一個 <see cref="T:System.Data.CommandBehavior" /> 值。</param>
      <returns>
        <see cref="T:System.Data.DataTable" /> 物件的陣列，包含從資料來源傳回的結構描述資訊。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)">
      <summary>將 <see cref="T:System.Data.DataTable" /> 加入至指定的 <see cref="T:System.Data.DataSet" />，並且根據指定的 <see cref="T:System.Data.SchemaType" /> 和 <see cref="T:System.Data.DataTable" /> 設定結構描述，以符合資料來源中的資料表。</summary>
      <param name="dataSet">要插入結構描述的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">其中一個 <see cref="T:System.Data.SchemaType" /> 值，指定插入結構描述的方法。</param>
      <param name="srcTable">用於資料表對應的來源資料表名稱。</param>
      <returns>一個被新增至 <see cref="T:System.Data.DataSet" /> 的物件 <see cref="T:System.Data.DataTable" /> 之集合的參考。</returns>
      <exception cref="T:System.ArgumentException">找不到要從中取得結構描述的來源資料表。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)">
      <summary>根據指定的 <see cref="T:System.Data.DataTable" />，設定指定 <see cref="T:System.Data.SchemaType" /> 的結構描述。</summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" />，以資料來源中的結構描述來填入其中。</param>
      <param name="schemaType">其中一個 <see cref="T:System.Data.SchemaType" /> 值。</param>
      <returns>包含資料來源所傳回結構描述資訊的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>根據指定的 <see cref="T:System.Data.DataTable" />、命令字串和 <see cref="T:System.Data.SchemaType" /> 值，設定指定 <see cref="T:System.Data.CommandBehavior" /> 的結構描述。</summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" />，以資料來源中的結構描述來填入其中。</param>
      <param name="schemaType">其中一個 <see cref="T:System.Data.SchemaType" /> 值。</param>
      <param name="command">用來從資料來源擷取資料列的 SQL SELECT 陳述式。</param>
      <param name="behavior">其中一個 <see cref="T:System.Data.CommandBehavior" /> 值。</param>
      <returns>
        <see cref="T:System.Data.DataTable" /> 物件，包含從資料來源傳回的結構描述資訊。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)">
      <summary>從目前批次中的其中一個命令傳回 <see cref="T:System.Data.IDataParameter" />。</summary>
      <param name="commandIdentifier">要從其中擷取參數的命令索引。</param>
      <param name="parameterIndex">命令內參數的索引。</param>
      <returns>指定的 <see cref="T:System.Data.IDataParameter" />。</returns>
      <exception cref="T:System.NotSupportedException">配置器不支援批次。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)">
      <summary>傳回在較大之批次更新中嘗試個別更新的相關資訊。</summary>
      <param name="commandIdentifier">批次中個別命令之以零為基礎的資料行序數。</param>
      <param name="recordsAffected">資料存放區中受批次內指定命令影響的資料行數目。</param>
      <param name="error">在指定命令的執行期間所擲回的 <see cref="T:System.Exception" />。 如果未擲回例外狀況，則傳回 <see langword="null" /> (在 Visual Basic 中為 <see langword="Nothing" />)。</param>
      <returns>在較大批次更新內個別更新嘗試的相關資訊。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetFillParameters">
      <summary>取得在執行 SQL SELECT 陳述式時由使用者設定的參數。</summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 物件的陣列，含有由使用者設定的參數。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.InitializeBatching">
      <summary>初始化 <see cref="T:System.Data.Common.DbDataAdapter" /> 的批次處理。</summary>
      <exception cref="T:System.NotSupportedException">配置器不支援批次。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.InsertCommand">
      <summary>取得或設定用來將新的資料錄插入至資料來源的命令。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />，在 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 期間用來為資料集中新的資料列插入在資料來源中的資料錄。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
      <summary>引發 .NET Framework 資料提供者的 <see langword="RowUpdated" /> 事件。</summary>
      <param name="value">
        <see cref="T:System.Data.Common.RowUpdatedEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
      <summary>引發 .NET Framework 資料提供者的 <see langword="RowUpdating" /> 事件。</summary>
      <param name="value">包含事件資料的 <see cref="T:System.Data.Common.RowUpdatingEventArgs" />。</param>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.SelectCommand">
      <summary>取得或設定用來在資料來源中選取資料錄的命令。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />，在 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 期間用來為資料集中的位置從資料來源選取資料錄。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
      <summary>取得或設定 SQL 陳述式從資料集刪除資料錄。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />，在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 期間用來為資料集中所刪除的資料列刪除在資料來源中的資料錄。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
      <summary>取得或設定用來將新的資料錄插入至資料來源的 SQL 陳述式。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />，在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 期間用來為資料集中新的資料列插入在資料來源中的資料錄。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
      <summary>取得或設定用來在資料來源中選取資料錄的 SQL 陳述式。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />，在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 期間用來為資料集中的位置從資料來源選取資料錄。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
      <summary>取得或設定用來在資料來源中更新資料錄的 SQL 陳述式。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />，在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 期間用來為資料集中所修改的資料列更新在資料來源中的資料錄。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone">
      <summary>建立目前執行個體複本的新物件。</summary>
      <returns>這個執行個體複本的新物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.TerminateBatching">
      <summary>結束 <see cref="T:System.Data.Common.DbDataAdapter" /> 的批次處理。</summary>
      <exception cref="T:System.NotSupportedException">配置器不支援批次。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])">
      <summary>針對 <see cref="T:System.Data.DataSet" /> 的指定陣列中每個插入、更新或刪除的資料列，執行個別的 INSERT、UPDATE 或 DELETE 陳述式，以更新資料庫中的值。</summary>
      <param name="dataRows">用來更新資料來源的 <see cref="T:System.Data.DataRow" /> 物件陣列。</param>
      <returns>自 <see cref="T:System.Data.DataSet" /> 中成功更新的資料列數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 無效。</exception>
      <exception cref="T:System.InvalidOperationException">來源資料表無效。</exception>
      <exception cref="T:System.SystemException">要更新的 <see cref="T:System.Data.DataRow" /> 不存在。
-或-
要更新的 <see cref="T:System.Data.DataTable" /> 不存在。
-或-
要用來做為來源的 <see cref="T:System.Data.DataSet" /> 不存在。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">嘗試執行 INSERT、UPDATE 或 DELETE 陳述式會造成沒有資料錄受影響。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)">
      <summary>針對 <see cref="T:System.Data.DataSet" /> 物件的指定陣列中每個插入、更新或刪除的資料列，執行個別的 INSERT、UPDATE 或 DELETE 陳述式，以更新資料庫中的值。</summary>
      <param name="dataRows">用來更新資料來源的 <see cref="T:System.Data.DataRow" /> 物件陣列。</param>
      <param name="tableMapping">要使用的 <see cref="P:System.Data.IDataAdapter.TableMappings" /> 集合。</param>
      <returns>自 <see cref="T:System.Data.DataSet" /> 中成功更新的資料列數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 無效。</exception>
      <exception cref="T:System.InvalidOperationException">來源資料表無效。</exception>
      <exception cref="T:System.SystemException">要更新的 <see cref="T:System.Data.DataRow" /> 不存在。
-或-
要更新的 <see cref="T:System.Data.DataTable" /> 不存在。
-或-
要用來做為來源的 <see cref="T:System.Data.DataSet" /> 不存在。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">嘗試執行 INSERT、UPDATE 或 DELETE 陳述式會造成沒有資料錄受影響。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)">
      <summary>針對指定之 <see cref="T:System.Data.DataSet" /> 中的每個插入、更新或刪除的資料列，執行個別的 INSERT、UPDATE 或 DELETE 陳述式，以更新資料庫中的值。</summary>
      <param name="dataSet">用來更新資料來源的 <see cref="T:System.Data.DataSet" />。</param>
      <returns>自 <see cref="T:System.Data.DataSet" /> 中成功更新的資料列數目。</returns>
      <exception cref="T:System.InvalidOperationException">來源資料表無效。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">嘗試執行 INSERT、UPDATE 或 DELETE 陳述式會造成沒有資料錄受影響。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)">
      <summary>針對具有指定 <see cref="T:System.Data.DataTable" /> 名稱之 <see cref="T:System.Data.DataSet" /> 中的每個插入、更新或刪除的資料列，執行個別的 INSERT、UPDATE 或 DELETE 陳述式，以更新資料庫中的值。</summary>
      <param name="dataSet">用來更新資料來源的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="srcTable">用於資料表對應的來源資料表名稱。</param>
      <returns>自 <see cref="T:System.Data.DataSet" /> 中成功更新的資料列數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 無效。</exception>
      <exception cref="T:System.InvalidOperationException">來源資料表無效。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">嘗試執行 INSERT、UPDATE 或 DELETE 陳述式會造成沒有資料錄受影響。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)">
      <summary>針對指定之 <see cref="T:System.Data.DataTable" /> 中的每個插入、更新或刪除的資料列，執行個別的 INSERT、UPDATE 或 DELETE 陳述式，以更新資料庫中的值。</summary>
      <param name="dataTable">用來更新資料來源的 <see cref="T:System.Data.DataTable" />。</param>
      <returns>自 <see cref="T:System.Data.DataTable" /> 中成功更新的資料列數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 無效。</exception>
      <exception cref="T:System.InvalidOperationException">來源資料表無效。</exception>
      <exception cref="T:System.SystemException">要更新的 <see cref="T:System.Data.DataRow" /> 不存在。
-或-
要更新的 <see cref="T:System.Data.DataTable" /> 不存在。
-或-
要用來做為來源的 <see cref="T:System.Data.DataSet" /> 不存在。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">嘗試執行 INSERT、UPDATE 或 DELETE 陳述式會造成沒有資料錄受影響。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.UpdateBatchSize">
      <summary>取得或設定值，其啟用或停用批次處理支援，並指定可於批次中執行的命令數目。</summary>
      <returns>每一批次要處理的資料列數目。
  值為 
  作用 
  0 
  批次大小沒有任何限制。  
  
  1 
  停用批次更新。  
  
  &gt; 1 
  使用 <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> 作業的批次一次傳送變更。  
  
   
將此設定為1以外的值時，與 <see cref="T:System.Data.Common.DbDataAdapter" /> 相關聯的所有命令都必須將其 <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> 屬性設定為None或OutputParameters。 否則會擲回例外狀況。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.UpdateCommand">
      <summary>取得或設定用來在資料來源中更新資料錄的命令。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />，在 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 期間用來為資料集中修改的資料列更新在資料來源中的資料錄。</returns>
    </member>
    <member name="T:System.Data.Common.DbDataReader">
      <summary>從資料來源讀取順向的資料流。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbDataReader" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Close">
      <summary>關閉 <see cref="T:System.Data.Common.DbDataReader" /> 物件。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.CloseAsync">
      <summary>非同步關閉 <see cref="T:System.Data.Common.DbDataReader" /> 物件。</summary>
      <returns>表示非同步作業的工作。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Depth">
      <summary>取得值，表示目前資料列的巢狀深度。</summary>
      <returns>目前資料列的巢狀深度。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Dispose">
      <summary>釋放 <see cref="T:System.Data.Common.DbDataReader" /> 類別目前的執行個體所使用的全部資源。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Data.Common.DbDataReader" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋出 Managed 和 Unmanaged 資源，<see langword="false" /> 表示只釋出 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Data.Common.DbDataReader.DisposeAsync">
      <summary>以非同步方式將 <see cref="T:System.Data.Common.DbDataReader" /> 類別的目前執行個體所使用所有資源釋出。</summary>
      <returns>代表非同步作業的 <see cref="T:System.Threading.Tasks.ValueTask" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.FieldCount">
      <summary>在衍生類別中覆寫時，取得目前資料列中的資料行數目。</summary>
      <returns>目前資料列中的資料行數目。</returns>
      <exception cref="T:System.NotSupportedException">目前沒有連接至 SQL Server 的執行個體。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetBoolean(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指定資料行的值作為布林值。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetByte(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指定資料行的值作為位元組。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，從起始於指定索引的指定資料行讀取指定的位元組數，並將其寫入至起始於緩衝區中指定位置的緩衝區。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <param name="dataOffset">要開始讀取作業之資料列中的來源索引。</param>
      <param name="buffer">要將資料複製到其中的目的緩衝區。</param>
      <param name="bufferOffset">要對其複製資料的緩衝區索引。</param>
      <param name="length">要讀取的字元數上限。</param>
      <returns>讀取的實際位元組數目。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetChar(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指定資料行的值作為單一字元。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，從起始於指定索引的指定資料行讀取指定的位元組數，並將其寫入至起始於指定位置的的緩衝區。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <param name="dataOffset">要開始讀取作業之資料列中的來源索引。</param>
      <param name="buffer">要將資料複製到其中的目的緩衝區。</param>
      <param name="bufferOffset">要對其複製資料的緩衝區索引。</param>
      <param name="length">要讀取的字元數上限。</param>
      <returns>讀取的實際字元數目。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetData(System.Int32)">
      <summary>傳回所要求資料行的巢狀資料讀取器。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>資料讀取器。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指定資料行的資料類型名稱。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>資料型別的名稱。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDateTime(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指定資料行的值作為 <see cref="T:System.DateTime" /> 物件。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)">
      <summary>傳回所要求資料行序數的 <see cref="T:System.Data.Common.DbDataReader" /> 物件，可使用提供者特定的實作 (Implementation) 覆寫。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDecimal(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指定資料行的值作為 <see cref="T:System.Decimal" />。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDouble(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指定資料行的值作為雙精確度浮點數。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetEnumerator">
      <summary>在衍生類別中覆寫時，傳回可以用來逐一查看資料讀取器中資料列的列舉程式。</summary>
      <returns>可用來逐一查看資料讀取器中資料列的列舉程式。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldType(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指定資料行的資料類型。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定資料行的資料類型。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)">
      <summary>取得所指定資料行值作為要求類型。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <typeparam name="T">要傳回的值型别。</typeparam>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.InvalidOperationException">連線在資料擷取期間已中斷或關閉。
-或-
資料讀取器在資料擷取期間已關閉。
-或-
沒有可供讀取的資料 (例如，沒有呼叫第一個 <see cref="M:System.Data.Common.DbDataReader.Read" />，或傳回 <see langword="false" />)。
-或-
讀取器已嘗試在循序模式下讀取先前讀取的資料行。
-或-
有進行中的非同步作業。 當在循序模式中執行時，此適用於所有 Get* 方法，因為在讀取資料流時可能會呼叫它們。</exception>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">資料來源傳回的值不符合或無法轉換成 <typeparamref name="T" />。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)">
      <summary>以非同步方式取得所指定資料行的值作為要求類型。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <typeparam name="T">要傳回的值型别。</typeparam>
      <returns>其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 包含所指定資料行值的工作。</returns>
      <exception cref="T:System.InvalidOperationException">連線在資料擷取期間已中斷或關閉。
-或-
資料讀取器在資料擷取期間已關閉。
-或-
沒有可供讀取的資料 (例如，沒有呼叫第一個 <see cref="M:System.Data.Common.DbDataReader.Read" />，或傳回 <see langword="false" />)。
-或-
嘗試在循序模式下讀取先前讀取的資料行。
-或-
有進行中的非同步作業。 當在循序模式中執行時，此適用於所有 Get_*_ 方法，因為在讀取資料流時可能會呼叫它們。</exception>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">資料來源傳回的值不符合或無法轉換成 <typeparamref name="T" />。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)">
      <summary>以非同步方式取得所指定資料行的值作為要求類型。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <param name="cancellationToken">取消非同步作業的語彙基元。</param>
      <typeparam name="T">要傳回的值型别。</typeparam>
      <returns>其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 包含所指定資料行值的工作。</returns>
      <exception cref="T:System.InvalidOperationException">連線在資料擷取期間已中斷或關閉。
-或-
資料讀取器在資料擷取期間已關閉。
-或-
沒有可供讀取的資料 (例如，沒有呼叫第一個 <see cref="M:System.Data.Common.DbDataReader.Read" />，或傳回 <see langword="false" />)。
-或-
嘗試在循序模式下讀取先前讀取的資料行。
-或-
有進行中的非同步作業。 當在循序模式中執行時，此適用於所有 Get_*_ 方法，因為在讀取資料流時可能會呼叫它們。</exception>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">資料來源傳回的值不符合或無法轉換成 <typeparamref name="T" />。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFloat(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指定資料行的值作為單精確度浮點數。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetGuid(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指定資料行的值作為通用唯一識別碼 (GUID)。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt16(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指定資料行的值作為 16 位元帶正負號的整數。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt32(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指定資料行的值作為 32 位元帶正負號的整數。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt64(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指定資料行的值作為 64 位元帶正負號的整數。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetName(System.Int32)">
      <summary>在衍生類別中覆寫時，取得資料行序數從零開始的資料行名稱。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定資料行的名稱。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetOrdinal(System.String)">
      <summary>在衍生類別中覆寫時，取得具有資料行名稱的資料行序數。</summary>
      <param name="name">資料行名稱。</param>
      <returns>以零為基底的資料行序數。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>取得指定資料行的提供者特定類型。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>提供者特定的 .NET 類型。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>取得所指定資料行值作為提供者特定類型的執行個體。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>為目前的資料列在集合中取得所有提供者特定的屬性資料行。</summary>
      <param name="values">要複製屬性資料行的目的 <see cref="T:System.Object" /> 陣列。</param>
      <returns>陣列中元素的執行個體數目。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetSchemaTable">
      <summary>傳回 <see cref="T:System.Data.DataTable" />，以描述 <see cref="T:System.Data.Common.DbDataReader" /> 的資料行中繼資料。</summary>
      <returns>描述資料行中繼資料的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Common.DbDataReader" /> 已關閉。</exception>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.NotSupportedException">僅限 .NET Core：不支援此成員。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetStream(System.Int32)">
      <summary>取得資料流以從指定的資料行擷取資料。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>資料流。</returns>
      <exception cref="T:System.InvalidOperationException">連線在資料擷取期間已中斷或關閉。
-或-
資料讀取器在資料擷取期間已關閉。
-或-
沒有可供讀取的資料 (例如，第一個 <see cref="M:System.Data.Common.DbDataReader.Read" /> 沒有被呼叫，或傳回 false)。
-或-
資料讀取器已嘗試在循序模式下讀取先前讀取的資料行。
-或-
有進行中的非同步作業。 當在循序模式中執行時，此適用於所有 Get* 方法，因為在讀取資料流時可能會呼叫它們。</exception>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不是支援使用 <see cref="T:System.IO.Stream" /> 讀取的二進位型別。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetString(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指定資料行的值作為 <see cref="T:System.String" /> 的執行個體。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetTextReader(System.Int32)">
      <summary>取得文字讀取器以從資料行擷取資料。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>文字讀取器。</returns>
      <exception cref="T:System.InvalidOperationException">連線在資料擷取期間已中斷或關閉。
-或-
資料讀取器在資料擷取期間已關閉。
-或-
沒有可供讀取的資料 (例如，第一個 <see cref="M:System.Data.Common.DbDataReader.Read" /> 沒有被呼叫，或傳回 false)。
-或-
資料讀取器已嘗試在循序模式下讀取先前讀取的資料行。
-或-
有進行中的非同步作業。 當在循序模式中執行時，此適用於所有 Get* 方法，因為在讀取資料流時可能會呼叫它們。</exception>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不是支援使用 <see cref="T:System.IO.TextReader" /> 讀取的文字型別。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetValue(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指定資料行的值作為 <see cref="T:System.Object" /> 的執行個體。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetValues(System.Object[])">
      <summary>在衍生類別中覆寫時，使用目前資料列的資料行值填入物件陣列。</summary>
      <param name="values">要複製屬性資料行的目的 <see cref="T:System.Object" /> 陣列。</param>
      <returns>陣列中 <see cref="T:System.Object" /> 的執行個體數目。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.HasRows">
      <summary>在衍生類別中覆寫時，取得指出這個 <see cref="T:System.Data.Common.DbDataReader" /> 是否包含一或多個資料列的值。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbDataReader" /> 包含一個或更多資料列，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.IsClosed">
      <summary>在衍生類別中覆寫時，取得指出 <see cref="T:System.Data.Common.DbDataReader" /> 是否已關閉的值。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbDataReader" /> 關閉，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Common.DbDataReader" /> 已關閉。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指出資料行是否包含不存在或遺漏之值的值。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>如果指定的資料行等於 <see cref="T:System.DBNull" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)">
      <summary>以非同步方式取得值，指出資料行是否包含不存在或遺漏的值。</summary>
      <param name="ordinal">要擷取的以零起始的資料行。</param>
      <returns>如果所指定資料行值等於 <see langword="DBNull" />，則 <see cref="T:System.Threading.Tasks.Task`1" /> 的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 值為 <see langword="true" />；如果不相等，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">連線在資料擷取期間已中斷或關閉。
-或-
資料讀取器在資料擷取期間已關閉。
-或-
沒有可供讀取的資料 (例如，第一個 <see cref="M:System.Data.Common.DbDataReader.Read" /> 沒有被呼叫，或傳回 false)。
-或-
嘗試在循序模式下讀取先前讀取的資料行。
-或-
有進行中的非同步作業。 當在循序模式中執行時，此適用於所有 Get* 方法，因為在讀取資料流時可能會呼叫它們。</exception>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>以非同步方式取得值，指出資料行是否包含不存在或遺漏的值。</summary>
      <param name="ordinal">要擷取的以零起始的資料行。</param>
      <param name="cancellationToken">取消非同步作業的語彙基元。</param>
      <returns>如果所指定資料行值等於 <see langword="DBNull" />，則 <see cref="T:System.Threading.Tasks.Task`1" /> 的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 值為 <see langword="true" />；如果不相等，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">連線在資料擷取期間已中斷或關閉。
-或-
資料讀取器在資料擷取期間已關閉。
-或-
沒有可供讀取的資料 (例如，第一個 <see cref="M:System.Data.Common.DbDataReader.Read" /> 沒有被呼叫，或傳回 false)。
-或-
嘗試在循序模式下讀取先前讀取的資料行。
-或-
有進行中的非同步作業。 當在循序模式中執行時，此適用於所有 Get* 方法，因為在讀取資料流時可能會呼叫它們。</exception>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Item(System.Int32)">
      <summary>在衍生類別中覆寫時，取得指定資料行的值作為 <see cref="T:System.Object" /> 的執行個體。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">資料行索引超出範圍。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Item(System.String)">
      <summary>在衍生類別中覆寫時，取得指定資料行的值作為 <see cref="T:System.Object" /> 的執行個體。</summary>
      <param name="name">資料行名稱。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">找不到具有指定名稱的資料行。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResult">
      <summary>在衍生類別中覆寫時，當讀取陳述式批次的結果時，將讀取器向前移到下一個結果。</summary>
      <returns>如果有其他的結果集 (Result Set)，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResultAsync">
      <summary>在讀取陳述式批次的結果時，以非同步方式將讀取器向前移到下一個結果。</summary>
      <returns>如果有多個結果集，則為 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性為 <see langword="true" /> 的工作；如果沒有，則為 <see langword="false" />。</returns>
      <exception cref="T:System.Data.Common.DbException">執行命令文字時發生錯誤。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>在讀取陳述式批次的結果時，以非同步方式將讀取器向前移到下一個結果。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>如果有多個結果集，則 <see cref="T:System.Threading.Tasks.Task`1" /> 的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性為 <see langword="true" />；如果沒有，則為 <see langword="false" />。</returns>
      <exception cref="T:System.Data.Common.DbException">執行命令文字時發生錯誤。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Read">
      <summary>在衍生類別中覆寫時，將讀取器向前移到結果集中的下一筆記錄。</summary>
      <returns>如果有多個資料列，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.ReadAsync">
      <summary>以非同步方式將讀取器向前移到結果集中的下一筆記錄。</summary>
      <returns>如果有多個資料列，則 <see cref="T:System.Threading.Tasks.Task`1" /> 的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性為 <see langword="true" />；如果沒有，則為 <see langword="false" />。</returns>
      <exception cref="T:System.Data.Common.DbException">執行命令文字時發生錯誤。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>以非同步方式將讀取器向前移到結果集中的下一筆記錄。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>如果有多個資料列，則 <see cref="T:System.Threading.Tasks.Task`1" /> 的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性為 <see langword="true" />；如果沒有，則為 <see langword="false" />。</returns>
      <exception cref="T:System.Data.Common.DbException">執行命令文字時發生錯誤。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataReader.RecordsAffected">
      <summary>在衍生類別中覆寫時，取得因執行 SQL 陳述式所變更、插入或刪除的資料列數目。</summary>
      <returns>已變更、插入或刪除的資料列數。 SELECT 陳述式的值為 -1，如果沒有任何資料列受到影響，或是陳述式失敗，則為 0。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Data.IDataRecord.GetData(System.Int32)" />。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 的執行個體，可在欄位指向多個遠端結構化資料時使用。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.VisibleFieldCount">
      <summary>取得 <see cref="T:System.Data.Common.DbDataReader" /> 中沒有隱藏的欄位數。</summary>
      <returns>沒有隱藏的欄位數。</returns>
    </member>
    <member name="T:System.Data.Common.DbDataReaderExtensions">
      <summary>此類別包含 <see cref="T:System.Data.Common.DbDataReader" /> 的資料行結構描述擴充方法。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)">
      <summary>取得值，指出 <see cref="T:System.Data.Common.DbDataReader" /> 是否可取得資料行結構描述。</summary>
      <param name="reader">
        <see cref="T:System.Data.Common.DbDataReader" />，檢查是否支援資料行結構描述。</param>
      <returns>若 <see cref="T:System.Data.Common.DbDataReader" /> 可取得資料行結構描述即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)">
      <summary>取得 <see cref="T:System.Data.Common.DbDataReader" /> 的資料行結構描述 (<see cref="T:System.Data.Common.DbColumn" /> 集合)。</summary>
      <param name="reader">
        <see cref="T:System.Data.Common.DbDataReader" />，傳回資料行結構描述。</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 的資料行結構描述 (<see cref="T:System.Data.Common.DbColumn" /> 集合)。</returns>
    </member>
    <member name="T:System.Data.Common.DbDataRecord">
      <summary>實作 <see cref="T:System.Data.IDataRecord" /> 和 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />，並為 <see cref="T:System.Data.Common.DbEnumerator" /> 提供資料繫結支援。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbDataRecord" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.FieldCount">
      <summary>指出目前記錄內的欄位數目。 這個屬性是唯讀的。</summary>
      <returns>目前記錄內的欄位數目。</returns>
      <exception cref="T:System.NotSupportedException">未連接到要讀取的資料來源。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetBoolean(System.Int32)">
      <summary>傳回指定資料行的值做為布林值。</summary>
      <param name="i">資料行序數。</param>
      <returns>如果布林值是 <see langword="true" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetByte(System.Int32)">
      <summary>傳回指定資料行的值做為位元組。</summary>
      <param name="i">資料行序數。</param>
      <returns>指定的資料行值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>傳回指定資料行的值做為位元組陣列。</summary>
      <param name="i">以零為基底的資料行序數。</param>
      <param name="dataIndex">要開始讀取作業之欄位中的索引。</param>
      <param name="buffer">要將位元組資料流讀取到其中的緩衝區。</param>
      <param name="bufferIndex">要開始讀取作業的 <paramref name="buffer" /> 索引。</param>
      <param name="length">要讀取的位元組數。</param>
      <returns>指定的資料行值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetChar(System.Int32)">
      <summary>傳回指定資料行的值做為字元。</summary>
      <param name="i">資料行序數。</param>
      <returns>指定的資料行值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>傳回指定資料行的值做為字元陣列。</summary>
      <param name="i">資料行序數。</param>
      <param name="dataIndex">要將資料複製到其中的緩衝區。</param>
      <param name="buffer">要複製到緩衝區的最大長度。</param>
      <param name="bufferIndex">緩衝區中的起始點。</param>
      <param name="length">來源資料中的起始點。</param>
      <returns>指定的資料行值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetData(System.Int32)">
      <summary>目前不支援。</summary>
      <param name="i">目前不支援。</param>
      <returns>目前不支援。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDataTypeName(System.Int32)">
      <summary>傳回後端資料類型的名稱。</summary>
      <param name="i">資料行序數。</param>
      <returns>後端資料類型的名稱。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDateTime(System.Int32)">
      <summary>傳回指定資料行的值做為 <see cref="T:System.DateTime" /> 物件。</summary>
      <param name="i">資料行序數。</param>
      <returns>指定的資料行值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDbDataReader(System.Int32)">
      <summary>傳回所要求資料行序數的 <see cref="T:System.Data.Common.DbDataReader" /> 物件，可使用提供者特定的實作 (Implementation) 覆寫。</summary>
      <param name="i">以零為基底的資料行序數。</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDecimal(System.Int32)">
      <summary>傳回指定資料行的值做為 <see cref="T:System.Decimal" /> 物件。</summary>
      <param name="i">資料行序數。</param>
      <returns>指定的資料行值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDouble(System.Int32)">
      <summary>傳回指定資料行的值做為雙精確度浮點數。</summary>
      <param name="i">資料行序數。</param>
      <returns>指定的資料行值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetFieldType(System.Int32)">
      <summary>傳回 <see cref="T:System.Type" />，此為物件的資料類型。</summary>
      <param name="i">資料行序數。</param>
      <returns>
        <see cref="T:System.Type" />，此為物件的資料類型。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetFloat(System.Int32)">
      <summary>傳回指定資料行的值做為單精確度浮點數。</summary>
      <param name="i">資料行序數。</param>
      <returns>指定的資料行值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetGuid(System.Int32)">
      <summary>傳回指定欄位的 GUID 值。</summary>
      <param name="i">要傳回的欄位索引。</param>
      <returns>指定欄位的 GUID 值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt16(System.Int32)">
      <summary>傳回指定資料行的值做為 16 位元帶正負號的整數。</summary>
      <param name="i">資料行序數。</param>
      <returns>指定的資料行值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt32(System.Int32)">
      <summary>傳回指定資料行的值做為 32 位元帶正負號的整數。</summary>
      <param name="i">資料行序數。</param>
      <returns>指定的資料行值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt64(System.Int32)">
      <summary>傳回指定資料行的值做為 64 位元帶正負號的整數。</summary>
      <param name="i">資料行序數。</param>
      <returns>指定的資料行值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetName(System.Int32)">
      <summary>傳回指定資料行的名稱。</summary>
      <param name="i">資料行序數。</param>
      <returns>指定資料行的名稱。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetOrdinal(System.String)">
      <summary>指定資料行的名稱，傳回資料行序數。</summary>
      <param name="name">資料行名稱。</param>
      <returns>資料行序數。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetString(System.Int32)">
      <summary>傳回指定資料行的值做為字串。</summary>
      <param name="i">資料行序數。</param>
      <returns>指定的資料行值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetValue(System.Int32)">
      <summary>以其原生格式傳回指定資料行的值。</summary>
      <param name="i">資料行序數。</param>
      <returns>要傳回的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetValues(System.Object[])">
      <summary>使用目前記錄的資料行值填入物件的陣列。</summary>
      <param name="values">要將屬性欄位複製到其中的 <see cref="T:System.Object" /> 陣列。</param>
      <returns>陣列中 <see cref="T:System.Object" /> 的執行個體數目。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.IsDBNull(System.Int32)">
      <summary>用來表示不存在的值。</summary>
      <param name="i">資料行序數。</param>
      <returns>如果指定的資料行等於 <see cref="T:System.DBNull" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.Item(System.Int32)">
      <summary>指定資料行序數，以其原生格式傳回指定資料行的值。 這個屬性是唯讀的。</summary>
      <param name="i">資料行序數。</param>
      <returns>指定資料行的值，以其原生格式表示。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.Item(System.String)">
      <summary>指定資料行名稱，以其原生格式傳回指定資料行的值。 這個屬性是唯讀的。</summary>
      <param name="name">資料行名稱。</param>
      <returns>指定資料行的值，以其原生格式表示。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>傳回元件之這個執行個體的自訂屬性集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" />，包含這個物件的屬性。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>傳回這個元件執行個體的類別名稱。</summary>
      <returns>此物件的類別名稱，或如果類別沒有名稱，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>傳回這個元件執行個體的名稱。</summary>
      <returns>物件的名稱；如果物件沒有名稱，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>傳回這個元件執行個體的類型轉換子。</summary>
      <returns>這個物件之轉換子的 <see cref="T:System.ComponentModel.TypeConverter" />；如果這個物件沒有 <see cref="T:System.ComponentModel.TypeConverter" />，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>傳回這個元件執行個體的預設事件。</summary>
      <returns>代表這個物件之預設事件的 <see cref="T:System.ComponentModel.EventDescriptor" />；如果這個物件沒有事件，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>傳回這個元件執行個體的屬性。</summary>
      <returns>代表這個物件之預設屬性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果這個物件沒有屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>傳回元件的這個執行個體之指定類型編輯器。</summary>
      <param name="editorBaseType">表示此物件編輯器的 <see cref="T:System.Type" />。</param>
      <returns>為此物件之編輯器的指定類型 <see cref="T:System.Object" />，如果找不到編輯器，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>傳回這個元件執行個體的事件。</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" />，代表此元件執行個體的事件。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>使用指定屬性陣列做為篩選條件傳回元件之執行個體的事件。</summary>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 類型陣列，可當做篩選條件使用。</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" />，代表此元件執行個體篩選過的事件。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>傳回元件之這個執行個體的屬性。</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，代表這個元件執行個體的屬性。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>使用屬性陣列做為篩選條件，傳回這個元件執行個體的屬性。</summary>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 類型陣列，可當做篩選條件使用。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，代表這個元件執行個體的篩選後屬性。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>傳回物件，包含指定的屬性描述項所描述的屬性。</summary>
      <param name="pd">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，代表要尋找其擁有者的屬性。</param>
      <returns>
        <see cref="T:System.Object" />，代表指定之屬性的擁有者。</returns>
    </member>
    <member name="T:System.Data.Common.DbDataSourceEnumerator">
      <summary>提供列舉區域網路內所有可用之資料庫伺服器執行個體的機制。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataSourceEnumerator.#ctor">
      <summary>建立 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataSourceEnumerator.GetDataSources">
      <summary>擷取 <see cref="T:System.Data.DataTable" />，包含伺服器 (這個類別的強型別 (Strongly Typed) 所表示) 之所有可見執行個體的相關資訊。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" />，包含相關聯資料來源的可見執行個體相關資訊。</returns>
    </member>
    <member name="T:System.Data.Common.DbEnumerator">
      <summary>公開 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 方法，該方法支援由 .NET Framework 資料提供者對集合執行簡單的反覆查看。</summary>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)">
      <summary>使用指定的資料讀取器，初始化 <see cref="T:System.Data.Common.DbEnumerator" /> 類別的新執行個體。</summary>
      <param name="reader">要逐一查看的 DataReader。</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)">
      <summary>使用指定的讀取器初始化 <see cref="T:System.Data.Common.DbEnumerator" /> 類別的新執行個體，並指出是否要在逐一查看其資料之後自動關閉讀取器。</summary>
      <param name="reader">要逐一查看的 DataReader。</param>
      <param name="closeReader">設為 <see langword="true" /> 會在逐一查看其資料後自動關閉 DataReader，否則設為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)">
      <summary>使用指定的 <see cref="T:System.Data.Common.DbEnumerator" />，初始化 <see langword="DataReader" /> 類別的新執行個體。</summary>
      <param name="reader">重複執行要透過的 <see langword="DataReader" />。</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)">
      <summary>使用指定的 <see langword="DataReader" /> 初始化 <see cref="T:System.Data.Common.DbEnumerator" /> 類別的新執行個體，並指出是否要在逐一查看其資料之後自動關閉 <see langword="DataReader" />。</summary>
      <param name="reader">重複執行要透過的 <see langword="DataReader" />。</param>
      <param name="closeReader">設為 <see langword="true" /> 會在逐一查看其資料後自動關閉 <see langword="DataReader" />，否則設為 <see langword="false" />。</param>
    </member>
    <member name="P:System.Data.Common.DbEnumerator.Current">
      <summary>取得集合中目前的項目。</summary>
      <returns>集合中目前的項目。</returns>
      <exception cref="T:System.InvalidOperationException">列舉值是放在集合的第一個項目之前，或最後一個項目之後。</exception>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.MoveNext">
      <summary>將列舉值往前推至下集合中的下一個項目。</summary>
      <returns>如果列舉值成功前移至下一個項目，則為 <see langword="true" />；如果列舉值超過集合的結尾，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">建立列舉值之後，集合已修改。</exception>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.Reset">
      <summary>設定列舉值至它的初始位置，這是在集合中第一個元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">建立列舉值之後，集合已修改。</exception>
    </member>
    <member name="T:System.Data.Common.DbException">
      <summary>代表資料來源擲回之所有例外狀況的基底類別。</summary>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化 (Serialization) 資訊和內容，初始化 <see cref="T:System.Data.Common.DbException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Data.Common.DbException" /> 類別的新執行個體。</summary>
      <param name="message">顯示這個例外狀況的訊息。</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.Data.Common.DbException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤訊息字串。</param>
      <param name="innerException">內部例外狀況參考。</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String,System.Int32)">
      <summary>使用指定的錯誤訊息和錯誤碼，初始化 <see cref="T:System.Data.Common.DbException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="errorCode">例外狀況的錯誤碼。</param>
    </member>
    <member name="T:System.Data.Common.DbMetaDataCollectionNames">
      <summary>提供已知 MetaDataCollections 的常數清單：DataSourceInformation、DataTypes、MetaDataCollections、ReservedWords 和 Restrictions。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation">
      <summary>表示 DataSourceInformation 集合的常數，與 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 方法搭配使用。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.DataTypes">
      <summary>表示 DataTypes 集合的常數，與 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 方法搭配使用。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.MetaDataCollections">
      <summary>表示 MetaDataCollections 集合的常數，與 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 方法搭配使用。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.ReservedWords">
      <summary>表示 ReservedWords 集合的常數，與 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 方法搭配使用。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.Restrictions">
      <summary>表示 Restrictions 集合的常數，與 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 方法搭配使用。</summary>
    </member>
    <member name="T:System.Data.Common.DbMetaDataColumnNames">
      <summary>提供靜態值，用於 <see cref="T:System.Data.DataTable" /> 中所含 MetaDataCollection 物件的資料行名稱。 <see cref="T:System.Data.DataTable" /> 是由 GetSchema 方法建立。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CollectionName">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 CollectionName 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ColumnSize">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 ColumnSize 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CompositeIdentifierSeparatorPattern">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation 集合中的 CompositeIdentifierSeparatorPattern 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CreateFormat">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 CreateFormat 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CreateParameters">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 CreateParameters 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductName">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation 集合中的 DataSourceProductName 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductVersion">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation 集合中的 DataSourceProductVersion 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductVersionNormalized">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation 集合中的 DataSourceProductVersionNormalized 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataType">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 DataType 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.GroupByBehavior">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation 集合中的 GroupByBehavior 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IdentifierCase">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation 集合中的 IdentifierCase 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IdentifierPattern">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation 集合中的 IdentifierPattern 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsAutoIncrementable">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 IsAutoIncrementable 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsBestMatch">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 IsBestMatch 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsCaseSensitive">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 IsCaseSensitive 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsConcurrencyType">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 IsConcurrencyType 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsFixedLength">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 IsFixedLength 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsFixedPrecisionScale">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 IsFixedPrecisionScale 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsLiteralSupported">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 IsLiteralSupported 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsLong">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 IsLong 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsNullable">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 IsNullable 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsSearchable">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 IsSearchable 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsSearchableWithLike">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 IsSearchableWithLike 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsUnsigned">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 IsUnsigned 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.LiteralPrefix">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 LiteralPrefix 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.LiteralSuffix">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 LiteralSuffix 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.MaximumScale">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 MaximumScale 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.MinimumScale">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 MinimumScale 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.NumberOfIdentifierParts">
      <summary>由 GetSchema 方法用來建立 MetaDataCollections 集合中的 NumberOfIdentifierParts 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.NumberOfRestrictions">
      <summary>由 GetSchema方法用來建立 MetaDataCollections 集合中的 NumberOfRestrictions 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.OrderByColumnsInSelect">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation 集合中的 OrderByColumnsInSelect 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation 集合中的 ParameterMarkerFormat 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerPattern">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation 集合中的 ParameterMarkerPattern 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation 集合中的 ParameterNameMaxLength 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation集合中的 ParameterNamePattern 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ProviderDbType">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 ProviderDbType 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.QuotedIdentifierCase">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation 集合中的 QuotedIdentifierCase 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.QuotedIdentifierPattern">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation 集合中的 QuotedIdentifierPattern 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ReservedWord">
      <summary>由 GetSchema 方法用來建立 ReservedWords 集合中的 ReservedWord 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.StatementSeparatorPattern">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation 集合中的 StatementSeparatorPattern 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.StringLiteralPattern">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation 集合中的 StringLiteralPattern 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.SupportedJoinOperators">
      <summary>由 GetSchema 方法用來建立 DataSourceInformation 集合中的 SupportedJoinOperators 資料行。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.TypeName">
      <summary>由 GetSchema 方法用來建立 DataTypes 集合中的 TypeName 資料行。</summary>
    </member>
    <member name="T:System.Data.Common.DbParameter">
      <summary>表示 <see cref="T:System.Data.Common.DbCommand" /> 的參數及其對 <see cref="T:System.Data.DataSet" /> 資料行的對應 (選擇性)。 如需參數的詳細資訊，請參閱設定參數和參數資料類型。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameter.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbParameter" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Common.DbParameter.DbType">
      <summary>取得或設定參數的 <see cref="T:System.Data.DbType" />。</summary>
      <returns>其中一個 <see cref="T:System.Data.DbType" /> 值。 預設為 <see cref="F:System.Data.DbType.String" />。</returns>
      <exception cref="T:System.ArgumentException">屬性未設為有效的 <see cref="T:System.Data.DbType" />。</exception>
    </member>
    <member name="P:System.Data.Common.DbParameter.Direction">
      <summary>取得或設定值，以表示參數是僅限輸入、僅限輸出、雙向 (Bidirectional) 或預存程序 (Stored Procedure) 傳回值參數。</summary>
      <returns>其中一個 <see cref="T:System.Data.ParameterDirection" /> 值。 預設為 <see langword="Input" />。</returns>
      <exception cref="T:System.ArgumentException">屬性未設為其中一個有效的 <see cref="T:System.Data.ParameterDirection" /> 值。</exception>
    </member>
    <member name="P:System.Data.Common.DbParameter.IsNullable">
      <summary>取得或設定值，這個值指出該參數是否接受 null 值。</summary>
      <returns>如果接受 null 值，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.ParameterName">
      <summary>取得或設定 <see cref="T:System.Data.Common.DbParameter" /> 的名稱。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 的名稱。 預設為空字串 ("")。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Precision">
      <summary>取得或設定用來表示 <see cref="P:System.Data.Common.DbParameter.Value" /> 屬性的最大位數。</summary>
      <returns>用來表示 <see cref="P:System.Data.Common.DbParameter.Value" /> 屬性的最大位數。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameter.ResetDbType">
      <summary>將 DbType 屬性重設為其原始設定。</summary>
    </member>
    <member name="P:System.Data.Common.DbParameter.Scale">
      <summary>取得或設定 <see cref="P:System.Data.Common.DbParameter.Value" /> 所解析的小數點位數。</summary>
      <returns>
        <see cref="P:System.Data.Common.DbParameter.Value" /> 所解析的小數點位數。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Size">
      <summary>取得或設定資料行中資料的最大大小 (以位元組為單位)。</summary>
      <returns>資料行中資料的最大大小 (以位元組為單位)。 預設值是由參數值推斷。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceColumn">
      <summary>取得或設定來源資料行的名稱，這個資料行對應至 <see cref="T:System.Data.DataSet" />，並用來載入或傳回 <see cref="P:System.Data.Common.DbParameter.Value" />。</summary>
      <returns>對應至 <see cref="T:System.Data.DataSet" /> 的來源資料行名稱。 預設為空字串。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceColumnNullMapping">
      <summary>取得或設定值，這個值表示來源資料行是否可為 Null。 這可讓 <see cref="T:System.Data.Common.DbCommandBuilder" /> 正確產生可為 Null 的資料行的 Update 陳述式。</summary>
      <returns>如果來源資料行可為 Null，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceVersion">
      <summary>取得或設定載入 <see cref="T:System.Data.DataRowVersion" /> 時要使用的 <see cref="P:System.Data.Common.DbParameter.Value" />。</summary>
      <returns>其中一個 <see cref="T:System.Data.DataRowVersion" /> 值。 預設為 <see langword="Current" />。</returns>
      <exception cref="T:System.ArgumentException">屬性未設為其中一個 <see cref="T:System.Data.DataRowVersion" /> 值。</exception>
    </member>
    <member name="P:System.Data.Common.DbParameter.System#Data#IDbDataParameter#Precision">
      <summary>表示數值參數的整數位數。</summary>
      <returns>用來表示資料提供者 <see langword="Parameter" /> 物件的 <see langword="Value" /> 屬性的最大位數。 預設值是 0，表示資料提供者會設定 <see langword="Value" /> 的整數位數。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.System#Data#IDbDataParameter#Scale">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Data.IDbDataParameter.Scale" />。</summary>
      <returns>
        <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 所解析的小數點位數。 預設值為 0。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Value">
      <summary>取得或設定參數的值。</summary>
      <returns>
        <see cref="T:System.Object" />，為參數的值。 預設值為 null。</returns>
    </member>
    <member name="T:System.Data.Common.DbParameterCollection">
      <summary>
        <see cref="T:System.Data.Common.DbCommand" /> 相關參數集合的基底類別。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbParameterCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Add(System.Object)">
      <summary>將指定的 <see cref="T:System.Data.Common.DbParameter" /> 物件加入至 <see cref="T:System.Data.Common.DbParameterCollection" />。</summary>
      <param name="value">要加入集合之 <see cref="T:System.Data.Common.DbParameter" /> 的 <see cref="P:System.Data.Common.DbParameter.Value" />。</param>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 物件在集合中的索引。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.AddRange(System.Array)">
      <summary>將具有指定值的項目陣列加入 <see cref="T:System.Data.Common.DbParameterCollection" />。</summary>
      <param name="values">要加入集合之 <see cref="T:System.Data.Common.DbParameter" /> 類型的值陣列。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Clear">
      <summary>從 <see cref="T:System.Data.Common.DbParameterCollection" /> 中移除所有 <see cref="T:System.Data.Common.DbParameter" /> 值。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Contains(System.Object)">
      <summary>指出集合中是否包含具有指定 <see cref="P:System.Data.Common.DbParameter.Value" /> 的 <see cref="T:System.Data.Common.DbParameter" />。</summary>
      <param name="value">要在集合中尋找之 <see cref="T:System.Data.Common.DbParameter" /> 的 <see cref="P:System.Data.Common.DbParameter.Value" />。</param>
      <returns>如果集合中有 <see cref="T:System.Data.Common.DbParameter" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Contains(System.String)">
      <summary>指出集合中是否存在具有指定名稱的 <see cref="T:System.Data.Common.DbParameter" />。</summary>
      <param name="value">要在集合中尋找的 <see cref="T:System.Data.Common.DbParameter" /> 名稱。</param>
      <returns>如果集合中有 <see cref="T:System.Data.Common.DbParameter" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>從指定索引處開始，將項目的陣列複製到集合。</summary>
      <param name="array">要複製至集合的項目陣列。</param>
      <param name="index">要複製項目之集合中的索引。</param>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Count">
      <summary>指定集合中的項目數目。</summary>
      <returns>集合中的項目數目</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetEnumerator">
      <summary>公開 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 方法，該方法支援由 .NET Framework 資料提供者對集合執行簡單的反覆查看。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetParameter(System.Int32)">
      <summary>傳回位於此集合指定索引處的 <see cref="T:System.Data.Common.DbParameter" /> 物件。</summary>
      <param name="index">此集合中之 <see cref="T:System.Data.Common.DbParameter" /> 的索引。</param>
      <returns>位於此集合指定索引處的 <see cref="T:System.Data.Common.DbParameter" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetParameter(System.String)">
      <summary>傳回具有指定名稱的 <see cref="T:System.Data.Common.DbParameter" /> 物件。</summary>
      <param name="parameterName">此集合中的 <see cref="T:System.Data.Common.DbParameter" /> 名稱。</param>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" />，具有指定名稱的物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.IndexOf(System.Object)">
      <summary>傳回 <see cref="T:System.Data.Common.DbParameter" /> 物件指定之索引。</summary>
      <param name="value">集合裡的 <see cref="T:System.Data.Common.DbParameter" /> 物件。</param>
      <returns>指定的 <see cref="T:System.Data.Common.DbParameter" /> 物件索引。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.IndexOf(System.String)">
      <summary>傳回具有指定名稱的 <see cref="T:System.Data.Common.DbParameter" /> 物件之索引。</summary>
      <param name="parameterName">集合中的 <see cref="T:System.Data.Common.DbParameter" /> 物件名稱。</param>
      <returns>具有指定名稱的 <see cref="T:System.Data.Common.DbParameter" /> 物件之索引。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Insert(System.Int32,System.Object)">
      <summary>將具有指定名稱的 <see cref="T:System.Data.Common.DbParameter" /> 物件指定索引插入位於指定索引的集合中。</summary>
      <param name="index">要插入 <see cref="T:System.Data.Common.DbParameter" /> 物件的索引。</param>
      <param name="value">要插入集合的 <see cref="T:System.Data.Common.DbParameter" /> 物件。</param>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsFixedSize">
      <summary>指定此集合是否為固定大小。</summary>
      <returns>如果集合為固定大小則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsReadOnly">
      <summary>指定此集合是否為唯讀。</summary>
      <returns>如果此集合是唯讀，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsSynchronized">
      <summary>指定是否同步處理集合。</summary>
      <returns>如果集合已同步處理則傳回 <see langword="true" />，否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Item(System.Int32)">
      <summary>取得或設定在指定索引處的 <see cref="T:System.Data.Common.DbParameter" />。</summary>
      <param name="index">參數之以零為起始的索引。</param>
      <returns>指定索引處的 <see cref="T:System.Data.Common.DbParameter" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不存在。</exception>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Item(System.String)">
      <summary>取得或設定具有指定之名稱的 <see cref="T:System.Data.Common.DbParameter" />。</summary>
      <param name="parameterName">參數名稱。</param>
      <returns>具有指定名稱的 <see cref="T:System.Data.Common.DbParameter" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不存在。</exception>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Remove(System.Object)">
      <summary>從集合中移除指定的 <see cref="T:System.Data.Common.DbParameter" /> 物件。</summary>
      <param name="value">要移除的 <see cref="T:System.Data.Common.DbParameter" /> 物件。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.RemoveAt(System.Int32)">
      <summary>從集合中的指定位置移除 <see cref="T:System.Data.Common.DbParameter" /> 物件。</summary>
      <param name="index">
        <see cref="T:System.Data.Common.DbParameter" /> 物件所在的索引。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.RemoveAt(System.String)">
      <summary>從集合中移除具有指定名稱的 <see cref="T:System.Data.Common.DbParameter" /> 物件。</summary>
      <param name="parameterName">要移除的 <see cref="T:System.Data.Common.DbParameter" /> 物件名稱。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
      <summary>將指定索引處的 <see cref="T:System.Data.Common.DbParameter" /> 物件設定為新值。</summary>
      <param name="index">
        <see cref="T:System.Data.Common.DbParameter" /> 物件所在的索引。</param>
      <param name="value">新的 <see cref="T:System.Data.Common.DbParameter" /> 值。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
      <summary>將具有指定名稱的 <see cref="T:System.Data.Common.DbParameter" /> 物件設定為新值。</summary>
      <param name="parameterName">集合中的 <see cref="T:System.Data.Common.DbParameter" /> 物件名稱。</param>
      <param name="value">新的 <see cref="T:System.Data.Common.DbParameter" /> 值。</param>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.SyncRoot">
      <summary>指定要用來同步存取此集合的 <see cref="T:System.Object" />。</summary>
      <returns>用來同步處理存取 <see cref="T:System.Data.Common.DbParameterCollection" /> 的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Collections#IList#Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <param name="index">要取得或設定之以零為起始的項目索引。</param>
      <returns>在指定索引上的項目。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Data#IDataParameterCollection#Item(System.String)">
      <summary>在指定索引位置上取得或設定參數。</summary>
      <param name="parameterName">要擷取的參數名稱。</param>
      <returns>位於指定索引位置上的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderFactories">
      <summary>表示用於建立 <see cref="T:System.Data.Common.DbProviderFactory" /> 類別 (Class) 之一個或多個執行個體的一組靜態方法。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.Data.Common.DbConnection)">
      <summary>傳回 <see cref="T:System.Data.Common.DbProviderFactory" /> 的執行個體。</summary>
      <param name="connection">已使用的連接。</param>
      <returns>指定連接之 <see cref="T:System.Data.Common.DbProviderFactory" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.Data.DataRow)">
      <summary>傳回 <see cref="T:System.Data.Common.DbProviderFactory" /> 的執行個體。</summary>
      <param name="providerRow">
        <see cref="T:System.Data.DataRow" />，包含提供者 (Provider) 的組態資訊。</param>
      <returns>指定之 <see cref="T:System.Data.Common.DbProviderFactory" /> 的 <see cref="T:System.Data.DataRow" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.String)">
      <summary>傳回 <see cref="T:System.Data.Common.DbProviderFactory" /> 的執行個體。</summary>
      <param name="providerInvariantName">提供者的非變異名稱。</param>
      <returns>指定之提供者名稱的 <see cref="T:System.Data.Common.DbProviderFactory" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactoryClasses">
      <summary>傳回 <see cref="T:System.Data.DataTable" />，包含所有實作 <see cref="T:System.Data.Common.DbProviderFactory" /> 之已安裝提供者的相關資訊。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 包含含有下列資料的 <see cref="T:System.Data.DataRow" /> 物件：
 資料行序數 
 資料行名稱 
 說明 
 0 
 **名稱**  
  
 資料提供者 (Data Provider) 之人們可讀取的名稱。  
  
 1 
 **說明**  
  
 資料提供者之人們可讀取的描述。  
  
 2 
 **InvariantName**  
  
 名稱，可用於以程式的方式參考資料提供者。  
  
 3 
 **AssemblyQualifiedName**  
  
 Factory 類別的完整名稱，包含執行個體化物件的足夠資訊。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetProviderInvariantNames">
      <summary>傳回 <see cref="T:System.Data.Common.DbProviderFactory" /> 所有已註冊執行個體的不變提供者名稱。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbProviderFactory" /> 所有已註冊執行個體的不變提供者名稱。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.RegisterFactory(System.String,System.Data.Common.DbProviderFactory)">
      <summary>在指定的不變提供者名稱下註冊 <see cref="T:System.Data.Common.DbProviderFactory" /> 的執行個體。</summary>
      <param name="providerInvariantName">用來註冊提供者的不變提供者名稱。</param>
      <param name="factory">要註冊的提供者處理站執行個體。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.RegisterFactory(System.String,System.String)">
      <summary>在指定的不變提供者名稱下使用給定的組件限定名稱註冊 <see cref="T:System.Data.Common.DbProviderFactory" />。</summary>
      <param name="providerInvariantName">用來註冊提供者的不變提供者名稱。</param>
      <param name="factoryTypeAssemblyQualifiedName">
        <see cref="T:System.Data.Common.DbProviderFactory" /> 的組件限定名稱。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.RegisterFactory(System.String,System.Type)">
      <summary>在指定的不變提供者名稱下使用給定的型別註冊 <see cref="T:System.Data.Common.DbProviderFactory" />。</summary>
      <param name="providerInvariantName">用來註冊提供者的不變提供者名稱。</param>
      <param name="providerFactoryClass">代表 <see cref="T:System.Data.Common.DbProviderFactory" /> 的型別。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.TryGetFactory(System.String,System.Data.Common.DbProviderFactory@)">
      <summary>嘗試在指定的不變提供者名稱下註冊 <see cref="T:System.Data.Common.DbProviderFactory" />。</summary>
      <param name="providerInvariantName">要查閱的不變提供者名稱。</param>
      <param name="factory">當此方法傳回時，包含與所指定不變提供者名稱關聯的 <see cref="T:System.Data.Common.DbProviderFactory" /> (若找到該名稱)；否則為 <see langword="null" />。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>若提供者是在指定的不變提供者名稱下註冊，為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.UnregisterFactory(System.String)">
      <summary>從給定的提供者不變名稱移除 <see cref="T:System.Data.Common.DbProviderFactory" /> 註冊。</summary>
      <param name="providerInvariantName">要移除之註冊的不變提供者名稱。</param>
      <returns>若成功找到註冊並移除，為 <see langword="true" />；否則為 <see langword="false" />。 若找不到 <paramref name="providerInvariantName" /> 的註冊，此方法會傳回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderFactory">
      <summary>表示用於建立資料來源類別 (class) 之提供者 (Provider) 實作 (Implementation) 執行個體的一組方法。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbProviderFactory" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Common.DbProviderFactory.CanCreateCommandBuilder">
      <summary>取得值，指出這個 <see cref="T:System.Data.Common.DbProviderFactory" /> 執行個體是否支援 <see cref="T:System.Data.Common.DbCommandBuilder" /> 類別。</summary>
      <returns>
        <see langword="true" />如果這個實例支援<see cref="T:System.Data.Common.DbCommandBuilder" />類別，則為， <see langword="false" />否則為。</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderFactory.CanCreateDataAdapter">
      <summary>取得值，指出這個 <see cref="T:System.Data.Common.DbProviderFactory" /> 執行個體是否支援 <see cref="T:System.Data.Common.DbDataAdapter" /> 類別。</summary>
      <returns>
        <see langword="true" />如果實例支援<see cref="T:System.Data.Common.DbDataAdapter" />類別，則為， <see langword="false" />否則為。</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderFactory.CanCreateDataSourceEnumerator">
      <summary>取得值，指出這個 <see cref="T:System.Data.Common.DbProviderFactory" /> 執行個體是否支援 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 類別。</summary>
      <returns>
        <see langword="true" />如果實例支援<see cref="T:System.Data.Common.DbDataSourceEnumerator" />類別，則為， <see langword="false" />否則為。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateCommand">
      <summary>傳回提供者類別的新執行個體，該執行個體會實作 <see cref="T:System.Data.Common.DbCommand" /> 類別。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateCommandBuilder">
      <summary>傳回提供者類別的新執行個體，該執行個體會實作 <see cref="T:System.Data.Common.DbCommandBuilder" /> 類別。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateConnection">
      <summary>傳回提供者類別的新執行個體，該執行個體會實作 <see cref="T:System.Data.Common.DbConnection" /> 類別。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnection" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateConnectionStringBuilder">
      <summary>傳回提供者類別的新執行個體，該執行個體會實作 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 類別。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateDataAdapter">
      <summary>傳回提供者類別的新執行個體，該執行個體會實作 <see cref="T:System.Data.Common.DbDataAdapter" /> 類別。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataAdapter" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateDataSourceEnumerator">
      <summary>傳回提供者類別的新執行個體，該執行個體會實作 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 類別。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateParameter">
      <summary>傳回提供者類別的新執行個體，該執行個體會實作 <see cref="T:System.Data.Common.DbParameter" /> 類別。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 的新執行個體。</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderSpecificTypePropertyAttribute">
      <summary>設定特定提供者型別時，識別要使用強型別 (Strongly Typed) 參數類別 (Class) 中的哪個特定提供者屬性。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderSpecificTypePropertyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Common.DbProviderSpecificTypePropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="isProviderSpecificTypeProperty">指定這個屬性是否為特定提供者屬性。</param>
    </member>
    <member name="P:System.Data.Common.DbProviderSpecificTypePropertyAttribute.IsProviderSpecificTypeProperty">
      <summary>指出使用屬性 (Attribute) 的屬性 (Property) 是否為提供者特定的型別。</summary>
      <returns>如果這個屬性 (Attribute) 套用到的屬性 (Property) 為提供者特定的型別屬性 (Property)，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Data.Common.DbTransaction">
      <summary>定義資料庫交易的核心行為，並為資料庫相關交易提供基底類別。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.#ctor">
      <summary>初始化新的 <see cref="T:System.Data.Common.DbTransaction" /> 物件。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Commit">
      <summary>當覆寫衍生類別時，認可資料庫交易。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.CommitAsync(System.Threading.CancellationToken)">
      <summary>非同步地認可資料庫交易。</summary>
      <param name="cancellationToken">取消非同步作業的選擇性語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>代表非同步作業的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.Connection">
      <summary>指定與交易關聯的 <see cref="T:System.Data.Common.DbConnection" /> 物件。</summary>
      <returns>與交易相關聯的 <see cref="T:System.Data.Common.DbConnection" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.DbConnection">
      <summary>當覆寫衍生類別時，取得交易相關聯的 <see cref="T:System.Data.Common.DbConnection" /> 物件。</summary>
      <returns>與交易相關聯的 <see cref="T:System.Data.Common.DbConnection" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Dispose">
      <summary>釋放由 <see cref="T:System.Data.Common.DbTransaction" /> 使用的 Unmanaged 資源。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Data.Common.DbTransaction" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">如果為 <see langword="true" />，則這個方法會釋放這個 <see cref="T:System.Data.Common.DbTransaction" /> 參考之任何 Managed 物件所持有的所有資源。</param>
    </member>
    <member name="M:System.Data.Common.DbTransaction.DisposeAsync">
      <summary>非同步地處置交易物件。</summary>
      <returns>代表非同步作業的 <see cref="T:System.Threading.Tasks.ValueTask" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.IsolationLevel">
      <summary>當覆寫衍生類別時，取得此交易的隔離等級。</summary>
      <returns>此交易的隔離等級。</returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Rollback">
      <summary>當覆寫衍生類別時，復原暫止狀態的交易。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.RollbackAsync(System.Threading.CancellationToken)">
      <summary>非同步地復原暫止狀態的交易。</summary>
      <param name="cancellationToken">取消非同步作業的選擇性語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步作業的工作。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.System#Data#IDbTransaction#Connection">
      <summary>取得與交易相關聯的 <see cref="T:System.Data.Common.DbConnection" /> 物件，如果交易已不再有效，則為 Null 參考。</summary>
      <returns>與交易相關聯的 <see cref="T:System.Data.Common.DbConnection" /> 物件。</returns>
    </member>
    <member name="T:System.Data.Common.GroupByBehavior">
      <summary>指定 GROUP BY 子句中的資料行與 SELECT 陳述式 (Statement) 之 SELECT 清單中非彙總 (Non-aggregated) 資料行之間的關聯性 (Relationship)。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.ExactMatch">
      <summary>GROUP BY 子句必須包含 SELECT 清單中的所有非彙總資料行，且不可以包含其他不在 SELECT 清單中的資料行。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.MustContainAll">
      <summary>GROUP BY 子句必須包含 SELECT 清單中的所有非彙總資料行，且可以包含其他不在 SELECT 清單中的資料行。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.NotSupported">
      <summary>不支援 GROUP BY 子句。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.Unknown">
      <summary>是否支援 GROUP BY 子句是未知的。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.Unrelated">
      <summary>GROUP BY 子句中的資料行與 SELECT 清單中的非彙總資料行之間的沒有關聯性。 您可以依任何資料行進行分組。</summary>
    </member>
    <member name="T:System.Data.Common.IDbColumnSchemaGenerator">
      <summary>產生資料行結構描述。</summary>
    </member>
    <member name="M:System.Data.Common.IDbColumnSchemaGenerator.GetColumnSchema">
      <summary>取得資料行結構描述 (<see cref="T:System.Data.Common.DbColumn" /> 集合)。</summary>
      <returns>資料行結構描述 (<see cref="T:System.Data.Common.DbColumn" /> 集合)。</returns>
    </member>
    <member name="T:System.Data.Common.IdentifierCase">
      <summary>指定在搜尋系統資料庫目錄 (Catalog) 時，資料來源如何處理識別項。</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Insensitive">
      <summary>資料來源在搜尋系統資料庫目錄時會忽略識別項的大小寫。 識別項 "ab" 與 "AB" 會符合。</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Sensitive">
      <summary>資料來源在搜尋系統資料庫目錄時會區分識別項的大小寫。 識別項 "ab" 與 "AB" 不符合。</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Unknown">
      <summary>資料來源對識別項大小寫的規則 (Rule) 模稜兩可，無法獲取此資訊。</summary>
    </member>
    <member name="T:System.Data.Common.RowUpdatedEventArgs">
      <summary>為 .NET Framework 資料提供者 (Data Provider) 的 <see langword="RowUpdated" /> 事件提供資料。</summary>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 類別的新執行個體。</summary>
      <param name="dataRow">透過 <see cref="T:System.Data.DataRow" /> 傳送的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="command">當呼叫 <see cref="T:System.Data.IDbCommand" /> 時執行的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="statementType">已執行的 SQL 陳述式型別。</param>
      <param name="tableMapping">透過 <see cref="T:System.Data.Common.DataTableMapping" /> 傳送的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Command">
      <summary>呼叫 <see cref="T:System.Data.IDbCommand" /> 時，會使得 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 執行。</summary>
      <returns>當呼叫 <see cref="T:System.Data.IDbCommand" /> 時執行的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[])">
      <summary>複製已修改之列的參考至所提供的陣列中。</summary>
      <param name="array">要複製至其中之 <see cref="T:System.Data.DataRow" /> 的陣列。</param>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[],System.Int32)">
      <summary>複製已修改之列的參考至所提供的陣列中。</summary>
      <param name="array">要複製至其中之 <see cref="T:System.Data.DataRow" /> 的陣列。</param>
      <param name="arrayIndex">陣列中的索引，要開始複製至其中。</param>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Errors">
      <summary>取得執行 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 時由 .NET Framework 資料提供者產生的任何錯誤。</summary>
      <returns>錯誤，在執行 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 時由 .NET Framework 資料提供者產生。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.RecordsAffected">
      <summary>取得因執行 SQL 陳述式所變更、插入或刪除的資料列數目。</summary>
      <returns>已變更、插入或刪除的資料列數目；如果沒有任何資料列受到影響或陳述式失敗，則為 0；如果是 SELECT 陳述式，則為 -1。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Row">
      <summary>取得經由 <see cref="T:System.Data.DataRow" /> 所傳送的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</summary>
      <returns>透過 <see cref="T:System.Data.DataRow" /> 傳送的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.RowCount">
      <summary>取得在已更新記錄的批次中處理的列數。</summary>
      <returns>
        <see langword="int" />，指定已處理列的數目。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.StatementType">
      <summary>取得已執行的 SQL 陳述式型別。</summary>
      <returns>已執行的 SQL 陳述式型別。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Status">
      <summary>取得 <see cref="T:System.Data.UpdateStatus" /> 的 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />。</summary>
      <returns>其中一個 <see cref="T:System.Data.UpdateStatus" /> 值。 預設為 <see langword="Continue" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.TableMapping">
      <summary>取得經由 <see cref="T:System.Data.Common.DataTableMapping" /> 所傳送的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</summary>
      <returns>透過 <see cref="T:System.Data.Common.DataTableMapping" /> 傳送的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="T:System.Data.Common.RowUpdatingEventArgs">
      <summary>為 .NET Framework Data Provider 的 RowUpdating 事件提供資料。</summary>
    </member>
    <member name="M:System.Data.Common.RowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 類別的新執行個體。</summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" /> 的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="command">要在呼叫 <see cref="T:System.Data.IDbCommand" /> 時執行的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="statementType">要執行的 SQL 陳述式型別。</param>
      <param name="tableMapping">要經由 <see cref="T:System.Data.Common.DataTableMapping" /> 傳送的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.BaseCommand">
      <summary>取得或設定這個類別之執行個體的 <see cref="T:System.Data.IDbCommand" /> 物件。</summary>
      <returns>要在 <see cref="T:System.Data.IDbCommand" /> 期間執行的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Command">
      <summary>取得要在 <see cref="T:System.Data.IDbCommand" /> 作業期間執行的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</summary>
      <returns>要在 <see cref="T:System.Data.IDbCommand" /> 期間執行的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Errors">
      <summary>取得 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 執行時由 .NET Framework 資料提供者產生的任何錯誤。</summary>
      <returns>錯誤，在 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 執行時由 .NET Framework 資料提供者產生。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Row">
      <summary>取得 <see cref="T:System.Data.DataRow" />，將做為插入、更新或刪除作業的一部分傳送到伺服器。</summary>
      <returns>要經由 <see cref="T:System.Data.DataRow" /> 傳送的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.StatementType">
      <summary>取得要執行的 SQL 陳述式型別。</summary>
      <returns>要執行的 SQL 陳述式型別。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Status">
      <summary>取得或設定 <see cref="T:System.Data.UpdateStatus" /> 屬性的 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />。</summary>
      <returns>其中一個 <see cref="T:System.Data.UpdateStatus" /> 值。 預設為 <see langword="Continue" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.TableMapping">
      <summary>取得要經由 <see cref="T:System.Data.Common.DataTableMapping" /> 傳送的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</summary>
      <returns>要經由 <see cref="T:System.Data.Common.DataTableMapping" /> 傳送的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="T:System.Data.Common.SchemaTableColumn">
      <summary>描述資料庫資料表之結構描述的資料行中繼資料 (Metadata)。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.AllowDBNull">
      <summary>指定是否允許值 <see langword="DBNull" />。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseColumnName">
      <summary>指定結構描述資料表中資料行的名稱。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseSchemaName">
      <summary>指定結構描述資料表中結構描述的名稱。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseTableName">
      <summary>指定結構描述資料表中資料表的名稱。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnName">
      <summary>指定結構描述資料表中資料行的名稱。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnOrdinal">
      <summary>指定資料行的序數。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnSize">
      <summary>指定資料行的大小。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.DataType">
      <summary>指定資料行中的資料型別。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsAliased">
      <summary>指定這個資料行是否已產生別名。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsExpression">
      <summary>指定這個資料行是否為運算式。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsKey">
      <summary>指定這個資料行是否為資料表的索引鍵。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsLong">
      <summary>指定這個資料行是否包含 LONG 資料。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsUnique">
      <summary>指定唯一的條件約束 (Unique Constraint) 是否套用至這個資料行。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NonVersionedProviderType">
      <summary>指定資料行的沒有建立版本的提供者特定資料型別。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NumericPrecision">
      <summary>指定資料行資料的精確度 (如果資料為數值)。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NumericScale">
      <summary>指定資料行資料的小數點位數 (如果資料為數值)。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ProviderType">
      <summary>指定資料行的提供者特定資料型別。</summary>
    </member>
    <member name="T:System.Data.Common.SchemaTableOptionalColumn">
      <summary>描述資料庫資料表之結構描述的選擇性資料行中繼資料 (Metadata)。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.AutoIncrementSeed">
      <summary>指定會指派新識別資料行系列的值。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.AutoIncrementStep">
      <summary>指定識別資料行中各個值之間的遞增。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseCatalogName">
      <summary>與最新查詢結果相關聯的資料庫目錄 (Catalog) 名稱。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseColumnNamespace">
      <summary>資料行的命名空間。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseServerName">
      <summary>資料行的伺服器名稱。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseTableNamespace">
      <summary>包含資料行之資料表的命名空間。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.ColumnMapping">
      <summary>指定資料行的對應。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.DefaultValue">
      <summary>資料行的預設值。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.Expression">
      <summary>用於計算資料行的運算式。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsAutoIncrement">
      <summary>指定資料行中的資料行值是否會自動遞增。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsHidden">
      <summary>指定這個資料行是否已隱藏。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsReadOnly">
      <summary>指定這個資料行是否為唯讀。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsRowVersion">
      <summary>指定這個資料行是否包含資料列版本資訊。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.ProviderSpecificDataType">
      <summary>指定資料行的提供者特定資料型別。</summary>
    </member>
    <member name="T:System.Data.Common.SupportedJoinOperators">
      <summary>指定資料來源支援之 Transact-SQL join 陳述式的型別。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.FullOuter">
      <summary>資料來源支援完整外部聯結 (Full Outer Join)。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.Inner">
      <summary>資料來源支援內部聯結 (Inner Join)。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.LeftOuter">
      <summary>資料來源支援左外部聯結 (Left Outer Join)。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.None">
      <summary>資料來源不支援聯結查詢。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.RightOuter">
      <summary>資料來源支援右外部聯結 (Right Outer Join)。</summary>
    </member>
    <member name="T:System.Data.ConflictOption">
      <summary>指定資料來源的變更衝突將如何偵測及解決。</summary>
    </member>
    <member name="F:System.Data.ConflictOption.CompareAllSearchableValues">
      <summary>更新及刪除陳述式將包括 WHERE 子句的資料表中所有可搜尋的資料行。 這相當於指定 <see langword="CompareAllValuesUpdate" /> | <see langword="CompareAllValuesDelete" />。</summary>
    </member>
    <member name="F:System.Data.ConflictOption.CompareRowVersion">
      <summary>如果資料表中有任何時間戳記資料行，它們是用在所有已產生之更新陳述式的 WHERE 子句中。 這相當於指定 <see langword="CompareRowVersionUpdate" /> | <see langword="CompareRowVersionDelete" />。</summary>
    </member>
    <member name="F:System.Data.ConflictOption.OverwriteChanges">
      <summary>所有更新和刪除陳述式在 WHERE 子句中都只包含 <see cref="P:System.Data.DataTable.PrimaryKey" /> 資料行。 如果沒有定義 <see cref="P:System.Data.DataTable.PrimaryKey" />，則將可搜尋的資料行包含在 WHERE 子句中。 這相當於 <see langword="OverwriteChangesUpdate" /> | <see langword="OverwriteChangesDelete" />。</summary>
    </member>
    <member name="T:System.Data.ConnectionState">
      <summary>描述連接至資料來源的目前狀態。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Broken">
      <summary>與資料來源的連接。 這只會發生在連接已經開啟之後。 這個狀態下的連接可能會先關閉再重新開啟 (這個值已保留供後續版本使用)。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Closed">
      <summary>連接關閉。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Connecting">
      <summary>連接物件正連接至資料來源</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Executing">
      <summary>物件正在執行命令 (這個值已保留供後續版本使用)。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Fetching">
      <summary>連接物件正在擷取資料 (這個值已保留供後續版本使用)。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Open">
      <summary>連接開啟。</summary>
    </member>
    <member name="T:System.Data.Constraint">
      <summary>表示可以在一或多個 <see cref="T:System.Data.DataColumn" /> 物件上強制使用的條件約束。</summary>
    </member>
    <member name="P:System.Data.Constraint._DataSet">
      <summary>取得這個條件約束所屬的 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>條件約束所屬的 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="M:System.Data.Constraint.CheckStateForProperty">
      <summary>取得這個條件約束所屬的 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="P:System.Data.Constraint.ConstraintName">
      <summary>
        <see cref="T:System.Data.ConstraintCollection" /> 中的條件約束名稱。</summary>
      <returns>
        <see cref="T:System.Data.Constraint" /> 的名稱。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.Constraint" /> 名稱為 null 值或空字串。</exception>
      <exception cref="T:System.Data.DuplicateNameException">
        <see cref="T:System.Data.ConstraintCollection" /> 已經包含具有相同名稱的 <see cref="T:System.Data.Constraint" /> (該比較不區分大小寫)。</exception>
    </member>
    <member name="P:System.Data.Constraint.ExtendedProperties">
      <summary>取得使用者定義條件約束屬性的集合。</summary>
      <returns>自訂資訊的 <see cref="T:System.Data.PropertyCollection" />。</returns>
    </member>
    <member name="M:System.Data.Constraint.SetDataSet(System.Data.DataSet)">
      <summary>設定條件約束的 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="dataSet">這個條件約束將歸屬的 <see cref="T:System.Data.DataSet" />。</param>
    </member>
    <member name="P:System.Data.Constraint.Table">
      <summary>取得條件約束套用至的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>條件約束套用至的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Constraint.ToString">
      <summary>取得 <see cref="P:System.Data.Constraint.ConstraintName" /> (如果有) 做為字串。</summary>
      <returns>
        <see cref="P:System.Data.Constraint.ConstraintName" /> 的字串值。</returns>
    </member>
    <member name="T:System.Data.ConstraintCollection">
      <summary>表示為 <see cref="T:System.Data.DataTable" /> 的條件約束 (Constraint) 集合。</summary>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.Data.Constraint)">
      <summary>將指定的 <see cref="T:System.Data.Constraint" /> 物件加入至集合。</summary>
      <param name="constraint">要加入的 <see langword="Constraint" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">條件約束已經屬於此集合，或屬於另一個集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合已經有相同名稱的條件約束。 (這項比較不會區分大小寫。)</exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Boolean)">
      <summary>使用指定的名稱、<see cref="T:System.Data.UniqueConstraint" /> 和表示資料行是否為主索引鍵的值，來建構新的 <see cref="T:System.Data.DataColumn" />，並將它加入至集合中。</summary>
      <param name="name">
        <see langword="UniqueConstraint" /> 的名稱。</param>
      <param name="column">條件約束套用至的 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="primaryKey">指定資料行是否應為主索引鍵。 如果是 <see langword="true" />，表示資料行將會是主索引鍵資料行。</param>
      <returns>新的 <see langword="UniqueConstraint" />。</returns>
      <exception cref="T:System.ArgumentException">條件約束已屬於這個集合。
-或者-
條件約束屬於另一個集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合已經有指定名稱的條件約束 (這項比較不會區分大小寫。)</exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>使用指定的名稱、父資料行和子資料行建構新的 <see cref="T:System.Data.ForeignKeyConstraint" />，並將條件約束加入至集合。</summary>
      <param name="name">
        <see cref="T:System.Data.ForeignKeyConstraint" /> 的名稱。</param>
      <param name="primaryKeyColumn">主索引鍵，或父 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="foreignKeyColumn">外部索引鍵，或子 <see cref="T:System.Data.DataColumn" />。</param>
      <returns>新的 <see langword="ForeignKeyConstraint" />。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Boolean)">
      <summary>使用指定的名稱、<see cref="T:System.Data.UniqueConstraint" /> 物件的陣列，以及表示資料行是否為主索引鍵的值，來建構新的 <see cref="T:System.Data.DataColumn" />，並將它加入至集合中。</summary>
      <param name="name">
        <see cref="T:System.Data.UniqueConstraint" /> 的名稱。</param>
      <param name="columns">條件約束套用至的 <see cref="T:System.Data.DataColumn" /> 物件的陣列。</param>
      <param name="primaryKey">指定資料行是否應為主索引鍵。 如果是 <see langword="true" />，表示資料行將會是主索引鍵資料行。</param>
      <returns>新的 <see langword="UniqueConstraint" />。</returns>
      <exception cref="T:System.ArgumentException">條件約束已屬於這個集合。
-或者-
條件約束屬於另一個集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合已經有指定名稱的條件約束 (這項比較不會區分大小寫。)</exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>使用父資料行和子資料行的指定陣列，建構新的 <see cref="T:System.Data.ForeignKeyConstraint" />，並將條件約束加入至集合。</summary>
      <param name="name">
        <see cref="T:System.Data.ForeignKeyConstraint" /> 的名稱。</param>
      <param name="primaryKeyColumns">
        <see cref="T:System.Data.DataColumn" /> 物件 (為主索引鍵或父資料行) 的陣列。</param>
      <param name="foreignKeyColumns">
        <see cref="T:System.Data.DataColumn" /> 物件 (為外部索引鍵或子資料行) 的陣列。</param>
      <returns>新的 <see langword="ForeignKeyConstraint" />。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])">
      <summary>將指定的 <see cref="T:System.Data.ConstraintCollection" /> 陣列元素複製到集合的末端。</summary>
      <param name="constraints">要加入至集合中之 <see cref="T:System.Data.ConstraintCollection" /> 物件的陣列。</param>
    </member>
    <member name="M:System.Data.ConstraintCollection.CanRemove(System.Data.Constraint)">
      <summary>指示是否能移除 <see cref="T:System.Data.Constraint" />。</summary>
      <param name="constraint">針對從集合移除以測試的 <see cref="T:System.Data.Constraint" />。</param>
      <returns>如果可以從集合中移除 <see cref="T:System.Data.Constraint" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Clear">
      <summary>清除任何 <see cref="T:System.Data.Constraint" /> 物件的集合。</summary>
    </member>
    <member name="E:System.Data.ConstraintCollection.CollectionChanged">
      <summary>由於正在加入或移除 <see cref="T:System.Data.ConstraintCollection" /> 物件而導致 <see cref="T:System.Data.Constraint" /> 變更時，就會發生此情況。</summary>
    </member>
    <member name="M:System.Data.ConstraintCollection.Contains(System.String)">
      <summary>指示依名稱所指定的 <see cref="T:System.Data.Constraint" /> 物件是否存在於集合中。</summary>
      <param name="name">條件約束的 <see cref="P:System.Data.Constraint.ConstraintName" />。</param>
      <returns>如果集合包含指定的條件約束，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.CopyTo(System.Data.Constraint[],System.Int32)">
      <summary>將集合物件複製到指定索引開頭的一維 <see cref="T:System.Array" /> 執行個體。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合複製之值的目的端。</param>
      <param name="index">要開始插入的陣列索引。</param>
    </member>
    <member name="M:System.Data.ConstraintCollection.IndexOf(System.Data.Constraint)">
      <summary>取得指定 <see cref="T:System.Data.Constraint" /> 的索引。</summary>
      <param name="constraint">要搜尋的 <see cref="T:System.Data.Constraint" />。</param>
      <returns>
        <see cref="T:System.Data.Constraint" /> 之以零起始的索引 (如果位於集合中)，否則為 -1。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.IndexOf(System.String)">
      <summary>取得根據名稱所指定的 <see cref="T:System.Data.Constraint" /> 之索引。</summary>
      <param name="constraintName">
        <see cref="T:System.Data.Constraint" /> 的名稱。</param>
      <returns>
        <see cref="T:System.Data.Constraint" /> 的索引 (如果位於集合中)，否則為 -1。</returns>
    </member>
    <member name="P:System.Data.ConstraintCollection.Item(System.Int32)">
      <summary>從集合的指定索引處取得 <see cref="T:System.Data.Constraint" />。</summary>
      <param name="index">要傳回之條件約束的索引。</param>
      <returns>指定索引處的 <see cref="T:System.Data.Constraint" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">索引值大於集合中項目的數目。</exception>
    </member>
    <member name="P:System.Data.ConstraintCollection.Item(System.String)">
      <summary>以指定名稱從集合取得 <see cref="T:System.Data.Constraint" />。</summary>
      <param name="name">要傳回之條件約束的 <see cref="P:System.Data.Constraint.ConstraintName" />。</param>
      <returns>具有指定名稱的 <see cref="T:System.Data.Constraint" />，否則為 Null 值 (如果 <see cref="T:System.Data.Constraint" /> 不存在)。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Remove(System.Data.Constraint)">
      <summary>從集合移除指定的 <see cref="T:System.Data.Constraint" />。</summary>
      <param name="constraint">要移除的 <see cref="T:System.Data.Constraint" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">條件約束不屬於集合。</exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Remove(System.String)">
      <summary>從集合中移除名稱所指定的 <see cref="T:System.Data.Constraint" /> 物件。</summary>
      <param name="name">要移除的 <see cref="T:System.Data.Constraint" /> 名稱。</param>
    </member>
    <member name="M:System.Data.ConstraintCollection.RemoveAt(System.Int32)">
      <summary>從集合移除指定之索引處的 <see cref="T:System.Data.Constraint" /> 物件。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.Constraint" /> 的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">集合在這個索引處沒有條件約束。</exception>
    </member>
    <member name="T:System.Data.ConstraintException">
      <summary>代表嘗試進行違反條件約束的動作時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor">
      <summary>初始化 <see cref="T:System.Data.ConstraintException" /> 類別的新執行個體。 這是無參數建構函式。</summary>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定序列化 (Serialization) 和資料流內容來初始化 <see cref="T:System.Data.ConstraintException" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需的資料。</param>
      <param name="context">來源的描述和指定的序列化資料流的目的端。</param>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.String)">
      <summary>使用指定的字串，初始化 <see cref="T:System.Data.ConstraintException" /> 類別的新執行個體。</summary>
      <param name="s">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.String,System.Exception)">
      <summary>使用指定的字串和內部例外狀況，初始化 <see cref="T:System.Data.ConstraintException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況擲回時要顯示的字串。</param>
      <param name="innerException">取得造成目前例外狀況的 <see langword="Exception" /> 執行個體。</param>
    </member>
    <member name="T:System.Data.DataColumn">
      <summary>表示 <see cref="T:System.Data.DataTable" /> 中資料行的結構描述。</summary>
    </member>
    <member name="M:System.Data.DataColumn.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體 (Instance) 為型別字串。</summary>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String)">
      <summary>使用指定的資料行名稱，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體為類型字串。</summary>
      <param name="columnName">字串，表示要建立的資料行名稱。 如果設定為 <see langword="null" /> 或空字串 ("")，則在加入資料行集合時將指定預設名稱。</param>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type)">
      <summary>使用指定的資料行名稱和資料類型，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="columnName">字串，表示要建立的資料行名稱。 如果設定為 <see langword="null" /> 或空字串 ("")，則在加入資料行集合時將指定預設名稱。</param>
      <param name="dataType">支援的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <exception cref="T:System.ArgumentNullException">未指定任何的 <paramref name="dataType" />。</exception>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String)">
      <summary>使用指定的名稱、資料型別和運算式，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="columnName">字串，表示要建立的資料行名稱。 如果設定為 <see langword="null" /> 或空字串 ("")，則在加入資料行集合時將指定預設名稱。</param>
      <param name="dataType">支援的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <param name="expr">用來建立資料行的運算式。 如需詳細資訊，請參閱 <see cref="P:System.Data.DataColumn.Expression" /> 屬性 (Property)。</param>
      <exception cref="T:System.ArgumentNullException">未指定任何的 <paramref name="dataType" />。</exception>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)">
      <summary>使用指定名稱、資料型別、運算式和判斷資料行是否是屬性 (Attribute) 的值，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="columnName">字串，表示要建立的資料行名稱。 如果設定為 <see langword="null" /> 或空字串 ("")，則在加入資料行集合時將指定預設名稱。</param>
      <param name="dataType">支援的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <param name="expr">用來建立資料行的運算式。 如需詳細資訊，請參閱 <see cref="P:System.Data.DataColumn.Expression" /> 屬性 (Property)。</param>
      <param name="type">其中一個 <see cref="T:System.Data.MappingType" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">未指定任何的 <paramref name="dataType" />。</exception>
    </member>
    <member name="P:System.Data.DataColumn.AllowDBNull">
      <summary>取得或設定值，指出對於屬於資料表的資料列而言，這個資料行中是否允許 Null 值。</summary>
      <returns>如果允許 null 值，則為 <see langword="true" />;否則，<see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrement">
      <summary>取得或設定值，指出對於加入至資料表的新資料列而言，該資料行是否自動遞增資料行的值。</summary>
      <returns>如果資料行值自動遞增，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">該資料行是計算的資料行。</exception>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrementSeed">
      <summary>取得或設定資料行的開始值，這個資料行的 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 屬性設定為 <see langword="true" />。 預設值為 0。</summary>
      <returns>
        <see cref="P:System.Data.DataColumn.AutoIncrement" /> 函式的開始值。</returns>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrementStep">
      <summary>取得或設定資料行所使用的遞增，這個資料行的 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 屬性設定為 <see langword="true" />。</summary>
      <returns>自動遞增資料行值所根據的數字。 預設為 1。</returns>
      <exception cref="T:System.ArgumentException">設定的值為零。</exception>
    </member>
    <member name="P:System.Data.DataColumn.Caption">
      <summary>取得或設定資料行的標題。</summary>
      <returns>資料行的標題。 如果未設定標題，則傳回 <see cref="P:System.Data.DataColumn.ColumnName" /> 值。</returns>
    </member>
    <member name="M:System.Data.DataColumn.CheckNotAllowNull">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
    </member>
    <member name="M:System.Data.DataColumn.CheckUnique">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
    </member>
    <member name="P:System.Data.DataColumn.ColumnMapping">
      <summary>取得或設定資料行的 <see cref="T:System.Data.MappingType" />。</summary>
      <returns>其中一個 <see cref="T:System.Data.MappingType" /> 值。</returns>
    </member>
    <member name="P:System.Data.DataColumn.ColumnName">
      <summary>取得或設定在 <see cref="T:System.Data.DataColumnCollection" /> 中的資料行名稱。</summary>
      <returns>資料行名稱。</returns>
      <exception cref="T:System.ArgumentException">屬性會設定為 <see langword="null" /> 或空字串，並且資料行會屬於集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">具有相同名稱的資料行已經存在於集合中。 名稱比較不區分大小寫。</exception>
    </member>
    <member name="P:System.Data.DataColumn.DataType">
      <summary>取得或設定儲存在資料行中的資料型別。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示資料行資料型別。</returns>
      <exception cref="T:System.ArgumentException">資料行已經具有儲存的資料。</exception>
    </member>
    <member name="P:System.Data.DataColumn.DateTimeMode">
      <summary>取得或設定資料行的 <see langword="DateTimeMode" />。</summary>
      <returns>指定之資料行的 <see cref="T:System.Data.DataSetDateTime" />。</returns>
    </member>
    <member name="P:System.Data.DataColumn.DefaultValue">
      <summary>在建立新資料列時，取得或設定資料行的預設值。</summary>
      <returns>適合資料行的 <see cref="P:System.Data.DataColumn.DataType" /> 之值。</returns>
      <exception cref="T:System.InvalidCastException">在加入資料列時，預設值不是資料行資料型別的執行個體。</exception>
    </member>
    <member name="P:System.Data.DataColumn.Expression">
      <summary>取得或設定運算式，用來篩選資料列、計算資料行中的值或建立彙總資料行。</summary>
      <returns>運算式，用來計算資料行的值或建立彙總資料行。 運算式的傳回型別是由資料行的 <see cref="P:System.Data.DataColumn.DataType" /> 所判斷。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Data.DataColumn.AutoIncrement" /> 或 <see cref="P:System.Data.DataColumn.Unique" /> 屬性是設定為 <see langword="true" />。</exception>
      <exception cref="T:System.FormatException">在使用 CONVERT 函式時，運算式評估為字串，但是字串不包含可以轉變為型別參數的表示。</exception>
      <exception cref="T:System.InvalidCastException">在使用 CONVERT 函式時，不可能進行所要求的轉型。 請參閱下面段落中的型別轉換函式 (Conversion Function)，取得有關可能轉型的詳細資訊。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">在使用 SUBSTRING 函式時，起始引數超出範圍。
-或者-
在使用 SUBSTRING 函式時，長度引數超出範圍。</exception>
      <exception cref="T:System.Exception">在使用 LEN 函式或 TRIM 函式時，運算式不會評估為字串。 這包括評估為 <see cref="T:System.Char" /> 的運算式。</exception>
    </member>
    <member name="P:System.Data.DataColumn.ExtendedProperties">
      <summary>取得與 <see cref="T:System.Data.DataColumn" /> 相關聯的自訂使用者資訊集合。</summary>
      <returns>自訂資訊的 <see cref="T:System.Data.PropertyCollection" />。</returns>
    </member>
    <member name="P:System.Data.DataColumn.MaxLength">
      <summary>取得或設定文字資料行的最大長度。</summary>
      <returns>資料行的最大長度，以字元為單位。 如果資料行沒有最大長度，則此值為-1 （預設值）。</returns>
    </member>
    <member name="P:System.Data.DataColumn.Namespace">
      <summary>取得或設定 <see cref="T:System.Data.DataColumn" /> 的命名空間。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 的命名空間。</returns>
      <exception cref="T:System.ArgumentException">命名空間已經有資料。</exception>
    </member>
    <member name="M:System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="pcevent">參數參考。</param>
    </member>
    <member name="P:System.Data.DataColumn.Ordinal">
      <summary>取得 <see cref="T:System.Data.DataColumnCollection" /> 集合中 (以零起始) 的資料行位置。</summary>
      <returns>資料行的位置。 如果資料行不是集合的成員，則取得 -1。</returns>
    </member>
    <member name="P:System.Data.DataColumn.Prefix">
      <summary>取得或設定建立 <see cref="T:System.Data.DataTable" /> 命名空間別名的 XML 前置詞。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 命名空間的 XML 前置詞。</returns>
    </member>
    <member name="M:System.Data.DataColumn.RaisePropertyChanging(System.String)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="name">參數參考。</param>
    </member>
    <member name="P:System.Data.DataColumn.ReadOnly">
      <summary>取得或設定值，指出是否資料列一加入至資料表，就允許變更資料行。</summary>
      <returns>如果資料行是唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">屬性在計算的資料行上設定為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Data.DataColumn.SetOrdinal(System.Int32)">
      <summary>將 <see cref="T:System.Data.DataColumn" /> 的序數或位置變更為指定的序數或位置。</summary>
      <param name="ordinal">指定的序數。</param>
    </member>
    <member name="P:System.Data.DataColumn.Table">
      <summary>取得資料行所屬的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 所屬的 <see cref="T:System.Data.DataColumn" />。</returns>
    </member>
    <member name="M:System.Data.DataColumn.ToString">
      <summary>取得資料行的 <see cref="P:System.Data.DataColumn.Expression" /> (如果存在)。</summary>
      <returns>如果屬性已經設定，則為 <see cref="P:System.Data.DataColumn.Expression" /> 值，否則為 <see cref="P:System.Data.DataColumn.ColumnName" /> 屬性。</returns>
    </member>
    <member name="P:System.Data.DataColumn.Unique">
      <summary>取得或設定值，指出在資料行之每個資料列中的值是否必須是唯一的。</summary>
      <returns>如果值必須是唯一的，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">該資料行是計算的資料行。</exception>
    </member>
    <member name="T:System.Data.DataColumnChangeEventArgs">
      <summary>提供 <see cref="E:System.Data.DataTable.ColumnChanging" /> 事件的資料。</summary>
    </member>
    <member name="M:System.Data.DataColumnChangeEventArgs.#ctor(System.Data.DataRow,System.Data.DataColumn,System.Object)">
      <summary>初始化 <see cref="T:System.Data.DataColumnChangeEventArgs" /> 類別的新執行個體。</summary>
      <param name="row">具有變更值之資料行的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="column">具有變更值之 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="value">新值。</param>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.Column">
      <summary>取得具有正在變更的值之 <see cref="T:System.Data.DataColumn" />。</summary>
      <returns>具有正在變更的值之 <see cref="T:System.Data.DataColumn" />。</returns>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.ProposedValue">
      <summary>取得或設定資料欄的建議新值。</summary>
      <returns>建議值，屬於型別 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.Row">
      <summary>取得具有正在變更的值之資料行的 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>具有正在變更的值之資料行的 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="T:System.Data.DataColumnChangeEventHandler">
      <summary>代表將處理 <see cref="E:System.Data.DataTable.ColumnChanging" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.Data.DataColumnChangeEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.Data.DataColumnCollection">
      <summary>表示 <see cref="T:System.Data.DataColumn" /> 的 <see cref="T:System.Data.DataTable" /> 物件集合。</summary>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add">
      <summary>建立 <see cref="T:System.Data.DataColumn" /> 物件，並將它加入 <see cref="T:System.Data.DataColumnCollection" />。</summary>
      <returns>新建立的 <see cref="T:System.Data.DataColumn" />。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)">
      <summary>建立指定的 <see cref="T:System.Data.DataColumn" /> 物件，並將它加入 <see cref="T:System.Data.DataColumnCollection" />。</summary>
      <param name="column">要加入的 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">資料行永遠屬於這個集合，或屬於另一個集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合不具有含有指定名稱的資料行 (這項比較不會區分大小寫。)</exception>
      <exception cref="T:System.Data.InvalidExpressionException">運算式無效。 請參閱 <see cref="P:System.Data.DataColumn.Expression" /> 屬性，取得如何建立運算式的詳細資訊。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String)">
      <summary>建立具有指定名稱的 <see cref="T:System.Data.DataColumn" /> 物件，並將它加入 <see cref="T:System.Data.DataColumnCollection" />。</summary>
      <param name="columnName">資料行名稱。</param>
      <returns>新建立的 <see cref="T:System.Data.DataColumn" />。</returns>
      <exception cref="T:System.Data.DuplicateNameException">集合不具有含有指定名稱的資料行 (這項比較不會區分大小寫。)</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String,System.Type)">
      <summary>建立具有指定名稱和型別的 <see cref="T:System.Data.DataColumn" /> 物件，並將它加入 <see cref="T:System.Data.DataColumnCollection" />。</summary>
      <param name="columnName">建立資料行時要使用的 <see cref="P:System.Data.DataColumn.ColumnName" />。</param>
      <param name="type">新資料行的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <returns>新建立的 <see cref="T:System.Data.DataColumn" />。</returns>
      <exception cref="T:System.Data.DuplicateNameException">集合不具有含有指定名稱的資料行 (這項比較不會區分大小寫。)</exception>
      <exception cref="T:System.Data.InvalidExpressionException">運算式無效。 請參閱 <see cref="P:System.Data.DataColumn.Expression" /> 屬性，取得如何建立運算式的詳細資訊。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String,System.Type,System.String)">
      <summary>建立具有指定名稱、型別和運算式的 <see cref="T:System.Data.DataColumn" /> 物件，並將它加入 <see cref="T:System.Data.DataColumnCollection" />。</summary>
      <param name="columnName">建立資料行時要使用的名稱。</param>
      <param name="type">新資料行的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <param name="expression">要指派給 <see cref="P:System.Data.DataColumn.Expression" /> 屬性的運算式。</param>
      <returns>新建立的 <see cref="T:System.Data.DataColumn" />。</returns>
      <exception cref="T:System.Data.DuplicateNameException">集合不具有含有指定名稱的資料行 (這項比較不會區分大小寫。)</exception>
      <exception cref="T:System.Data.InvalidExpressionException">運算式無效。 請參閱 <see cref="P:System.Data.DataColumn.Expression" /> 屬性，取得如何建立運算式的詳細資訊。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.AddRange(System.Data.DataColumn[])">
      <summary>將指定的 <see cref="T:System.Data.DataColumn" /> 陣列元素複製到集合的末端。</summary>
      <param name="columns">要加入至集合的 <see cref="T:System.Data.DataColumn" /> 物件陣列。</param>
    </member>
    <member name="M:System.Data.DataColumnCollection.CanRemove(System.Data.DataColumn)">
      <summary>檢查是否可以從集合移除特定的資料行。</summary>
      <param name="column">在集合中的 <see cref="T:System.Data.DataColumn" />。</param>
      <returns>如果可以移除該資料行則為 <see langword="true" />。 否則為 <see langword="false" />。

<paramref name="column" /> 參數是 <see langword="null" />。

資料行不屬於此集合。

資料行是關聯性的一部分。

另一個資料行的運算式相依於此資料行。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentException">資料行不屬於這個集合。
-或-
資料行是關聯性的部分。
-或-
另一個資料行的運算式相依於這個資料行。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Clear">
      <summary>清除任何資料行的集合。</summary>
    </member>
    <member name="E:System.Data.DataColumnCollection.CollectionChanged">
      <summary>發生於資料行集合變更時 (藉由加入或移除資料行)。</summary>
    </member>
    <member name="M:System.Data.DataColumnCollection.Contains(System.String)">
      <summary>檢查集合是否包含具有指定名稱的資料行。</summary>
      <param name="name">要尋找的資料行 <see cref="P:System.Data.DataColumn.ColumnName" />。</param>
      <returns>如果存在具有這個名稱的資料行，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.CopyTo(System.Data.DataColumn[],System.Int32)">
      <summary>將整個集合複製到現有陣列中，並於陣列中指定的索引處開始寫入。</summary>
      <param name="array">
        <see cref="T:System.Data.DataColumn" /> 物件的陣列，用來包含複製的集合。</param>
      <param name="index">做為開頭的索引。</param>
    </member>
    <member name="M:System.Data.DataColumnCollection.IndexOf(System.Data.DataColumn)">
      <summary>取得由名稱指定的資料行索引。</summary>
      <param name="column">要傳回的資料行名稱。</param>
      <returns>如果找到，則為 <paramref name="column" /> 指定的資料行索引，否則為 -1。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.IndexOf(System.String)">
      <summary>取得具有特定名稱 (名稱不區分大小寫) 的資料行索引。</summary>
      <param name="columnName">要尋找的資料行名稱。</param>
      <returns>具有指定名稱的資料行之以零起始的索引，如果集合中沒有該資料行，則為 -1。</returns>
    </member>
    <member name="P:System.Data.DataColumnCollection.Item(System.Int32)">
      <summary>從集合的指定索引處取得 <see cref="T:System.Data.DataColumn" />。</summary>
      <param name="index">要傳回的資料行之以零起始的索引。</param>
      <returns>指定索引處的 <see cref="T:System.Data.DataColumn" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">索引值大於集合中項目的數目。</exception>
    </member>
    <member name="P:System.Data.DataColumnCollection.Item(System.String)">
      <summary>以指定名稱從集合取得 <see cref="T:System.Data.DataColumn" />。</summary>
      <param name="name">要傳回的資料行 <see cref="P:System.Data.DataColumn.ColumnName" />。</param>
      <returns>集合中具有指定 <see cref="T:System.Data.DataColumn" /> 的 <see cref="P:System.Data.DataColumn.ColumnName" />，否則為 Null 值 (如果 <see cref="T:System.Data.DataColumn" /> 不存在)。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Remove(System.Data.DataColumn)">
      <summary>從集合中移除指定的 <see cref="T:System.Data.DataColumn" /> 物件。</summary>
      <param name="column">要移除的 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">資料行不屬於這個集合。
-或者-
資料行是關聯性的部分。
-或者-
另一個資料行的運算式相依於這個資料行。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Remove(System.String)">
      <summary>從集合移除具有指定名稱的 <see cref="T:System.Data.DataColumn" /> 物件。</summary>
      <param name="name">要移除的資料行名稱。</param>
      <exception cref="T:System.ArgumentException">集合不具有含有指定名稱的資料行。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.RemoveAt(System.Int32)">
      <summary>從集合移除在指定索引處的資料行。</summary>
      <param name="index">要移除的資料行索引。</param>
      <exception cref="T:System.ArgumentException">集合的指定索引處不具有資料行。</exception>
    </member>
    <member name="T:System.Data.DataException">
      <summary>表示會在使用 ADO.NET 元件產生錯誤時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.DataException.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataException" /> 類別的新執行個體。 這是無參數建構函式。</summary>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化 (Serialization) 資訊和內容，初始化 <see cref="T:System.Data.DataException" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需的資料。</param>
      <param name="context">來源的描述和指定的序列化資料流的目的端。</param>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.String)">
      <summary>使用指定的字串，初始化 <see cref="T:System.Data.DataException" /> 類別的新執行個體。</summary>
      <param name="s">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.String,System.Exception)">
      <summary>使用指定的字串和內部例外狀況，初始化 <see cref="T:System.Data.DataException" /> 類別的新執行個體。</summary>
      <param name="s">例外狀況擲回時要顯示的字串。</param>
      <param name="innerException">內部例外狀況的參考。</param>
    </member>
    <member name="T:System.Data.DataReaderExtensions">
      <summary>提供 <see cref="T:System.Data.Common.DbDataReader" /> 的擴充方法。</summary>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetBoolean(System.Data.Common.DbDataReader,System.String)">
      <summary>取得指定之資料行的值做為布林值 (Boolean)。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetByte(System.Data.Common.DbDataReader,System.String)">
      <summary>取得指定資料行的值做為位元組。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetBytes(System.Data.Common.DbDataReader,System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>從起始於所指定索引的指定資料行讀取所指定位元組數，並將其寫入至起始於緩衝區中指定位置的緩衝區。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <param name="dataOffset">要開始讀取作業之資料列中的來源索引。</param>
      <param name="buffer">要將資料複製到其中的目的緩衝區。</param>
      <param name="bufferOffset">要對其複製資料的緩衝區索引。</param>
      <param name="length">要讀取的字元數上限。</param>
      <returns>讀取的實際位元組數目。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetChar(System.Data.Common.DbDataReader,System.String)">
      <summary>取得指定的資料行值做為單一字元。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetChars(System.Data.Common.DbDataReader,System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>從起始於所指定索引的指定資料行讀取指定的字元數，並將其寫入至起始於指定位置的緩衝區。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <param name="dataOffset">要開始讀取作業之資料列中的來源索引。</param>
      <param name="buffer">要將資料複製到其中的目的緩衝區。</param>
      <param name="bufferOffset">要對其複製資料的緩衝區索引。</param>
      <param name="length">要讀取的字元數上限。</param>
      <returns>讀取的實際字元數目。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetData(System.Data.Common.DbDataReader,System.String)">
      <summary>傳回所要求資料行的巢狀資料讀取器。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>資料讀取器。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetDataTypeName(System.Data.Common.DbDataReader,System.String)">
      <summary>取得指定資料行的資料類型名稱。</summary>
      <param name="reader">要從中取得資料行類型名稱的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>資料型別的名稱。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetDateTime(System.Data.Common.DbDataReader,System.String)">
      <summary>取得指定之資料行的值做為 <see cref="T:System.DateTime" /> 物件。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetDecimal(System.Data.Common.DbDataReader,System.String)">
      <summary>取得指定的資料行值做為 <see cref="T:System.Decimal" />。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetDouble(System.Data.Common.DbDataReader,System.String)">
      <summary>取得指定資料行的值做為雙精確度浮點數。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetFieldType(System.Data.Common.DbDataReader,System.String)">
      <summary>取得指定資料行的資料類型。</summary>
      <param name="reader">要從中取得欄位類型的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>指定資料行的資料類型。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetFieldValue``1(System.Data.Common.DbDataReader,System.String)">
      <summary>取得所指定資料行值作為要求類型。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <typeparam name="T">要傳回的值型别。</typeparam>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.InvalidOperationException">連線在資料擷取期間已中斷或關閉。
-或-
資料讀取器在資料擷取期間已關閉。
-或-
沒有可供讀取的資料 (例如，沒有呼叫第一個 <see cref="M:System.Data.Common.DbDataReader.Read" />，或傳回 <see langword="false" />)。
-或-
讀取器已嘗試在循序模式下讀取先前讀取的資料行。
-或-
有進行中的非同步作業。 當在循序模式中執行時，此適用於所有 Get* 方法，因為在讀取資料流時可能會呼叫它們。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">資料來源傳回的值不符合或無法轉換成 <typeparamref name="T" />。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetFieldValueAsync``1(System.Data.Common.DbDataReader,System.String,System.Threading.CancellationToken)">
      <summary>以非同步方式取得所指定資料行的值作為要求類型。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <param name="cancellationToken">取消非同步作業的選擇性語彙基元。</param>
      <typeparam name="T">要傳回的值型别。</typeparam>
      <returns>其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 包含所指定資料行值的工作。</returns>
      <exception cref="T:System.InvalidOperationException">連線在資料擷取期間已中斷或關閉。
-或-
資料讀取器在資料擷取期間已關閉。
-或-
沒有可供讀取的資料 (例如，沒有呼叫第一個 <see cref="M:System.Data.Common.DbDataReader.Read" />，或傳回 <see langword="false" />)。
-或-
嘗試在循序模式下讀取先前讀取的資料行。
-或-
有進行中的非同步作業。 當在循序模式中執行時，此適用於所有 Get_*_ 方法，因為在讀取資料流時可能會呼叫它們。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">資料來源傳回的值不符合或無法轉換成 <typeparamref name="T" />。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetFloat(System.Data.Common.DbDataReader,System.String)">
      <summary>取得指定資料行的值做為單精確度浮點數。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetGuid(System.Data.Common.DbDataReader,System.String)">
      <summary>取得指定資料行的值做為全域唯一識別項 (GUID)。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetInt16(System.Data.Common.DbDataReader,System.String)">
      <summary>取得指定資料行的值做為 16 位元帶正負號的整數。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetInt32(System.Data.Common.DbDataReader,System.String)">
      <summary>取得指定資料行的值作為 32 位元帶正負號的整數。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetInt64(System.Data.Common.DbDataReader,System.String)">
      <summary>取得指定資料行的值做為 64 位元帶正負號的整數 (Signed Integer)。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetProviderSpecificFieldType(System.Data.Common.DbDataReader,System.String)">
      <summary>取得指定資料行的提供者特定類型。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>提供者特定的 .NET 類型。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetProviderSpecificValue(System.Data.Common.DbDataReader,System.String)">
      <summary>取得所指定資料行值作為提供者特定類型的執行個體。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetStream(System.Data.Common.DbDataReader,System.String)">
      <summary>取得資料流以從指定的資料行擷取資料。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>資料流。</returns>
      <exception cref="T:System.InvalidOperationException">連線在資料擷取期間已中斷或關閉。
-或-
資料讀取器在資料擷取期間已關閉。
-或-
沒有可供讀取的資料 (例如，第一個 <see cref="M:System.Data.Common.DbDataReader.Read" /> 沒有被呼叫，或傳回 false)。
-或-
資料讀取器已嘗試在循序模式下讀取先前讀取的資料行。
-或-
有進行中的非同步作業。 當在循序模式中執行時，此適用於所有 Get* 方法，因為在讀取資料流時可能會呼叫它們。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不是支援使用 <see cref="T:System.IO.Stream" /> 讀取的二進位型別。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetString(System.Data.Common.DbDataReader,System.String)">
      <summary>取得指定之資料行的值做為 <see cref="T:System.String" /> 的執行個體。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetTextReader(System.Data.Common.DbDataReader,System.String)">
      <summary>取得文字讀取器以從資料行擷取資料。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>文字讀取器。</returns>
      <exception cref="T:System.InvalidOperationException">連線在資料擷取期間已中斷或關閉。
-或-
資料讀取器在資料擷取期間已關閉。
-或-
沒有可供讀取的資料 (例如，第一個 <see cref="M:System.Data.Common.DbDataReader.Read" /> 沒有被呼叫，或傳回 false)。
-或-
資料讀取器已嘗試在循序模式下讀取先前讀取的資料行。
-或-
有進行中的非同步作業。 當在循序模式中執行時，此適用於所有 Get* 方法，因為在讀取資料流時可能會呼叫它們。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不是支援使用 <see cref="T:System.IO.TextReader" /> 讀取的文字型別。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetValue(System.Data.Common.DbDataReader,System.String)">
      <summary>取得指定之資料行的值做為 <see cref="T:System.Object" /> 的執行個體。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.IsDBNull(System.Data.Common.DbDataReader,System.String)">
      <summary>取得值，這個值表示資料行是否包含不存在或遺漏的值。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <returns>如果指定的資料行等於 <see cref="T:System.DBNull" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.IsDBNullAsync(System.Data.Common.DbDataReader,System.String,System.Threading.CancellationToken)">
      <summary>以非同步方式取得值，指出資料行是否包含不存在或遺漏的值。</summary>
      <param name="reader">要從中取得資料行值的資料讀取器。</param>
      <param name="name">資料行名稱。</param>
      <param name="cancellationToken">取消非同步作業的選擇性語彙基元。</param>
      <returns>如果所指定資料行值等於 <see langword="DBNull" />，則 <see cref="T:System.Threading.Tasks.Task`1" /> 的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 值為 <see langword="true" />；如果不相等，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">連線在資料擷取期間已中斷或關閉。
-或-
資料讀取器在資料擷取期間已關閉。
-或-
沒有可供讀取的資料 (例如，第一個 <see cref="M:System.Data.Common.DbDataReader.Read" /> 沒有被呼叫，或傳回 false)。
-或-
嘗試在循序模式下讀取先前讀取的資料行。
-或-
有進行中的非同步作業。 當在循序模式中執行時，此適用於所有 Get* 方法，因為在讀取資料流時可能會呼叫它們。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
    </member>
    <member name="T:System.Data.DataRelation">
      <summary>表示兩個 <see cref="T:System.Data.DataTable" /> 物件之間的父子關聯性。</summary>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 名稱以及父和子 <see cref="T:System.Data.DataRelation" /> 物件，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的名稱。 如果是 <see langword="null" /> 或空字串 ("")，在將建立的物件加入 <see cref="T:System.Data.DataRelationCollection" /> 時會指定預設的名稱。</param>
      <param name="parentColumn">關聯性中的父 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="childColumn">關聯性中的子 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataColumn" /> 物件的其中之一或兩者包含 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">資料行具有不同的資料型別
-或者-
資料表不屬於相同的 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)">
      <summary>使用指定的名稱、父和子 <see cref="T:System.Data.DataRelation" /> 物件，以及指出是否建立條件約束 (Constraint) 的值，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="relationName">關聯的名稱。 如果是 <see langword="null" /> 或空字串 ("")，在將建立的物件加入 <see cref="T:System.Data.DataRelationCollection" /> 時會指定預設的名稱。</param>
      <param name="parentColumn">關聯中的父 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="childColumn">關聯中的子 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="createConstraints">指出是否已建立條件約束的值。 如果已建立條件約束，則為 <see langword="true" />。 否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataColumn" /> 物件的其中之一或兩者包含 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">資料行具有不同的資料型別
-或者-
資料表不屬於相同的 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 名稱以及父和子 <see cref="T:System.Data.DataRelation" /> 物件的相符陣列，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="relationName">關聯的名稱。 如果是 <see langword="null" /> 或空字串 ("")，在將建立的物件加入 <see cref="T:System.Data.DataRelationCollection" /> 時會指定預設的名稱。</param>
      <param name="parentColumns">父 <see cref="T:System.Data.DataColumn" /> 物件的陣列。</param>
      <param name="childColumns">子 <see cref="T:System.Data.DataColumn" /> 物件的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataColumn" /> 物件的其中之一或兩者包含 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">
        <see cref="T:System.Data.DataColumn" /> 物件有不同的資料型別
-或者-
陣列的其中之一或兩者不是由相同資料表的不同資料行所組成。
-或者-
資料表不屬於相同的 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)">
      <summary>使用指定的名稱、父和子 <see cref="T:System.Data.DataRelation" /> 物件的相符陣列，以及指出是否建立條件約束的值，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="relationName">關聯的名稱。 如果是 <see langword="null" /> 或空字串 ("")，在將建立的物件加入 <see cref="T:System.Data.DataRelationCollection" /> 時會指定預設的名稱。</param>
      <param name="parentColumns">父 <see cref="T:System.Data.DataColumn" /> 物件的陣列。</param>
      <param name="childColumns">子 <see cref="T:System.Data.DataColumn" /> 物件的陣列。</param>
      <param name="createConstraints">指出是否建立條件約束的值。 如果已建立條件約束，則為 <see langword="true" />。 否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataColumn" /> 物件的其中之一或兩者都是 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">資料行具有不同的資料型別
-或者-
資料表不屬於相同的 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean)">
      <summary>這個建構函式是在 Visual Studio 環境中，針對支援設計階段而提供。</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的名稱。 如果是 <see langword="null" /> 或空字串 ("")，在將建立的物件加入 <see cref="T:System.Data.DataRelationCollection" /> 時會指定預設的名稱。</param>
      <param name="parentTableName">為關聯父資料表的 <see cref="T:System.Data.DataTable" /> 之名稱。</param>
      <param name="parentTableNamespace">父資料表命名空間的名稱。</param>
      <param name="childTableName">為關聯子資料表的 <see cref="T:System.Data.DataTable" /> 之名稱。</param>
      <param name="childTableNamespace">子資料表命名空間的名稱。</param>
      <param name="parentColumnNames">關聯的父 <see cref="T:System.Data.DataColumn" /> 中 <see cref="T:System.Data.DataTable" /> 物件名稱的陣列。</param>
      <param name="childColumnNames">關聯的子 <see cref="T:System.Data.DataColumn" /> 中 <see cref="T:System.Data.DataTable" /> 物件名稱的陣列。</param>
      <param name="nested">指出關聯性是否為巢狀 (Nest) 的值。</param>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Boolean)">
      <summary>這個建構函式是在 Visual Studio 環境中，針對支援設計階段而提供。</summary>
      <param name="relationName">關聯的名稱。 如果是 <see langword="null" /> 或空字串 ("")，在將建立的物件加入 <see cref="T:System.Data.DataRelationCollection" /> 時會指定預設的名稱。</param>
      <param name="parentTableName">為關聯父資料表的 <see cref="T:System.Data.DataTable" /> 之名稱。</param>
      <param name="childTableName">為關聯子資料表的 <see cref="T:System.Data.DataTable" /> 之名稱。</param>
      <param name="parentColumnNames">關聯的父 <see cref="T:System.Data.DataColumn" /> 中 <see cref="T:System.Data.DataTable" /> 物件名稱的陣列。</param>
      <param name="childColumnNames">關聯的子 <see cref="T:System.Data.DataColumn" /> 中 <see cref="T:System.Data.DataTable" /> 物件名稱的陣列。</param>
      <param name="nested">指出關聯性是否為巢狀 (Nest) 的值。</param>
    </member>
    <member name="M:System.Data.DataRelation.CheckStateForProperty">
      <summary>此方法支援 .NET Framework 結構而且並非設計直接從程式碼使用。</summary>
      <exception cref="T:System.Data.DataException">父和子資料表屬於不同的 <see cref="T:System.Data.DataSet" /> 物件。
-或者-
一或多對的父和子 <see cref="T:System.Data.DataColumn" /> 物件有不相符的資料型別。
-或者-
父和子 <see cref="T:System.Data.DataColumn" /> 物件相同。</exception>
    </member>
    <member name="P:System.Data.DataRelation.ChildColumns">
      <summary>取得這個關聯的子 <see cref="T:System.Data.DataColumn" /> 物件。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 物件的陣列。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ChildKeyConstraint">
      <summary>取得關聯的 <see cref="T:System.Data.ForeignKeyConstraint" />。</summary>
      <returns>
        <see langword="ForeignKeyConstraint" />。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ChildTable">
      <summary>取得這個關聯的子資料表。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" />，為關聯的子資料表。</returns>
    </member>
    <member name="P:System.Data.DataRelation.DataSet">
      <summary>取得 <see cref="T:System.Data.DataSet" /> 所屬的 <see cref="T:System.Data.DataRelation" />。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 所屬的 <see cref="T:System.Data.DataRelation" />。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ExtendedProperties">
      <summary>取得儲存自訂屬性的集合。</summary>
      <returns>
        <see cref="T:System.Data.PropertyCollection" />，其中包含自訂的屬性。</returns>
    </member>
    <member name="P:System.Data.DataRelation.Nested">
      <summary>取得或設定值，指出 <see cref="T:System.Data.DataRelation" /> 物件是否為巢狀。</summary>
      <returns>如果 <see cref="T:System.Data.DataRelation" /> 物件為巢狀，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRelation.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="pcevent">參數參考。</param>
    </member>
    <member name="P:System.Data.DataRelation.ParentColumns">
      <summary>取得為這個 <see cref="T:System.Data.DataColumn" /> 父資料行的 <see cref="T:System.Data.DataRelation" /> 物件陣列。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 物件 (為這個 <see cref="T:System.Data.DataRelation" /> 的父資料行) 的陣列。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ParentKeyConstraint">
      <summary>取得 <see cref="T:System.Data.UniqueConstraint" />，確保 <see cref="T:System.Data.DataRelation" /> 之父資料行中的值為唯一。</summary>
      <returns>
        <see cref="T:System.Data.UniqueConstraint" />，確保父資料行中的值是唯一的。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ParentTable">
      <summary>取得這個 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataRelation" />。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" />，為這個關聯的父資料表。</returns>
    </member>
    <member name="M:System.Data.DataRelation.RaisePropertyChanging(System.String)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="name">參數參考。</param>
    </member>
    <member name="P:System.Data.DataRelation.RelationName">
      <summary>取得或設定用來從 <see cref="T:System.Data.DataRelation" /> 擷取 <see cref="T:System.Data.DataRelationCollection" /> 的名稱。</summary>
      <returns>
        <see cref="T:System.Data.DataRelation" /> 的名稱。</returns>
      <exception cref="T:System.ArgumentException">
        <see langword="null" /> 或空字串 ("") 已傳遞到 <see cref="T:System.Data.DataColumn" /> (為 <see cref="T:System.Data.DataRelation" />)。</exception>
      <exception cref="T:System.Data.DuplicateNameException">
        <see cref="T:System.Data.DataRelation" /> 屬於已經包含具有相同名稱之 <see cref="T:System.Data.DataRelation" /> 的集合。</exception>
    </member>
    <member name="M:System.Data.DataRelation.ToString">
      <summary>取得 <see cref="P:System.Data.DataRelation.RelationName" /> (如果關聯名稱存在)。</summary>
      <returns>
        <see cref="P:System.Data.DataRelation.RelationName" /> 屬性的值。</returns>
    </member>
    <member name="T:System.Data.DataRelationCollection">
      <summary>表示這個 <see cref="T:System.Data.DataRelation" /> 的 <see cref="T:System.Data.DataSet" /> 物件集合。</summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataRelationCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataColumn,System.Data.DataColumn)">
      <summary>使用指定的父資料行和子資料行建立 <see cref="T:System.Data.DataRelation" />，並將它加入至集合中。</summary>
      <param name="parentColumn">關聯的父資料行。</param>
      <param name="childColumn">關聯的子資料行。</param>
      <returns>建立的關聯。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>使用指定的名稱以及父資料行和子資料行來建立 <see cref="T:System.Data.DataRelation" />，並將它加入至集合中。</summary>
      <param name="parentColumns">關聯的父資料行。</param>
      <param name="childColumns">關聯的子資料行。</param>
      <returns>建立的關聯。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 引數為 Null 值。</exception>
      <exception cref="T:System.ArgumentException">關聯永遠屬於這個集合，或屬於另一個集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合已經和相同名稱產生關聯 (名稱比較不區分大小寫)。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">關聯從一建立以來就進入無效的狀態。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataRelation)">
      <summary>將 <see cref="T:System.Data.DataRelation" /> 加入至 <see cref="T:System.Data.DataRelationCollection" />。</summary>
      <param name="relation">要加入至集合的 <see langword="DataRelation" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 引數為 Null 值。</exception>
      <exception cref="T:System.ArgumentException">關聯永遠屬於這個集合，或屬於另一個集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合已經和指定名稱產生關聯 (名稱比較不區分大小寫)。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">關聯從一建立以來就進入無效的狀態。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>使用指定的名稱以及父資料行和子資料行來建立 <see cref="T:System.Data.DataRelation" />，並將它加入至集合中。</summary>
      <param name="name">關聯的名稱。</param>
      <param name="parentColumn">關聯的父資料行。</param>
      <param name="childColumn">關聯的子資料行。</param>
      <returns>建立的關聯。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)">
      <summary>使用指定的名稱、父資料行和子資料行，並附根據 <paramref name="createConstraints" /> 參數值的選擇性條件約束，來建立 <see cref="T:System.Data.DataRelation" />，並將它加入至集合中。</summary>
      <param name="name">關聯的名稱。</param>
      <param name="parentColumn">關聯的父資料行。</param>
      <param name="childColumn">關聯的子資料行。</param>
      <param name="createConstraints">若要建立條件約束，則為 <see langword="true" />，否則為 <see langword="false" /> 預設值為 <see langword="true" />。</param>
      <returns>建立的關聯。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>使用指定名稱以及父資料行和子資料行的陣列來建立 <see cref="T:System.Data.DataRelation" />，並將它加入至集合。</summary>
      <param name="name">要建立的 <see langword="DataRelation" /> 名稱。</param>
      <param name="parentColumns">父 <see cref="T:System.Data.DataColumn" /> 物件的陣列。</param>
      <param name="childColumns">子 <see langword="DataColumn" /> 物件的陣列。</param>
      <returns>建立的 <see langword="DataRelation" />。</returns>
      <exception cref="T:System.ArgumentNullException">關聯名稱為 Null 值。</exception>
      <exception cref="T:System.ArgumentException">關聯永遠屬於這個集合，或屬於另一個集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合已經和相同名稱產生關聯 (名稱比較不區分大小寫)。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">關聯從一建立以來就進入無效的狀態。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)">
      <summary>使用指定名稱、父資料行和子資料行的陣列和指定是否要建立條件限制的值來建立 <see cref="T:System.Data.DataRelation" />，並將它加入至集合。</summary>
      <param name="name">要建立的 <see langword="DataRelation" /> 名稱。</param>
      <param name="parentColumns">父 <see cref="T:System.Data.DataColumn" /> 物件的陣列。</param>
      <param name="childColumns">子 <see langword="DataColumn" /> 物件的陣列。</param>
      <param name="createConstraints">若要建立條件約束，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>建立的關聯。</returns>
      <exception cref="T:System.ArgumentNullException">關聯名稱為 Null 值。</exception>
      <exception cref="T:System.ArgumentException">關聯永遠屬於這個集合，或屬於另一個集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合已經和相同名稱產生關聯 (名稱比較不區分大小寫)。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">關聯從一建立以來就進入無效的狀態。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.AddCore(System.Data.DataRelation)">
      <summary>在資料表上執行驗證。</summary>
      <param name="relation">要檢查的關聯。</param>
      <exception cref="T:System.ArgumentNullException">關聯為 null。</exception>
      <exception cref="T:System.ArgumentException">關聯永遠屬於這個集合，或屬於另一個集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合已經和相同名稱產生關聯 (名稱比較不區分大小寫)。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.AddRange(System.Data.DataRelation[])">
      <summary>將指定的 <see cref="T:System.Data.DataRelation" /> 陣列元素複製到集合的末端。</summary>
      <param name="relations">要加入至集合的 <see cref="T:System.Data.DataRelation" /> 物件陣列。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.CanRemove(System.Data.DataRelation)">
      <summary>驗證是否可以從集合移除指定的 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="relation">執行檢查所針對的關聯。</param>
      <returns>如果可以移除 <see cref="T:System.Data.DataRelation" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Clear">
      <summary>清除任何關聯的集合。</summary>
    </member>
    <member name="E:System.Data.DataRelationCollection.CollectionChanged">
      <summary>發生於集合變更時。</summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.Contains(System.String)">
      <summary>驗證集合中是否有具指定名稱 (不區分大小寫) 的 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="name">要尋找的關聯名稱。</param>
      <returns>如果存在具有指定名稱的關聯，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.CopyTo(System.Data.DataRelation[],System.Int32)">
      <summary>複製 <see cref="T:System.Data.DataRelation" /> 物件的集合，從指定的索引處開始。</summary>
      <param name="array">
        <see cref="T:System.Data.DataRelation" /> 物件的陣列，用來包含複製的集合。</param>
      <param name="index">做為開頭的索引。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.GetDataSet">
      <summary>此方法支援 .NET Framework 結構而且並非設計直接從程式碼使用。</summary>
      <returns>參考的資料集。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.IndexOf(System.Data.DataRelation)">
      <summary>取得指定 <see cref="T:System.Data.DataRelation" /> 物件的索引。</summary>
      <param name="relation">要搜尋的關聯。</param>
      <returns>關聯的以零起始之索引或 –1 (如果集合中未發現關聯)。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.IndexOf(System.String)">
      <summary>取得根據名稱所指定的 <see cref="T:System.Data.DataRelation" /> 之索引。</summary>
      <param name="relationName">要尋找的關聯名稱。</param>
      <returns>具有指定名稱的關聯之以零起始索引或 –1 (如果集合中未發現關聯)。</returns>
    </member>
    <member name="P:System.Data.DataRelationCollection.Item(System.Int32)">
      <summary>取得在指定之索引處的 <see cref="T:System.Data.DataRelation" /> 物件。</summary>
      <param name="index">要尋找的以零起始之索引。</param>
      <returns>
        <see cref="T:System.Data.DataRelation" /> 或 Null 值 (如果指定的 <see cref="T:System.Data.DataRelation" /> 不存在)。</returns>
      <exception cref="T:System.IndexOutOfRangeException">索引值大於集合中項目的數目。</exception>
    </member>
    <member name="P:System.Data.DataRelationCollection.Item(System.String)">
      <summary>取得根據名稱所指定的 <see cref="T:System.Data.DataRelation" /> 物件。</summary>
      <param name="name">要尋找的關聯名稱。</param>
      <returns>具名的 <see cref="T:System.Data.DataRelation" /> 或 Null 值 (如果指定的 <see cref="T:System.Data.DataRelation" /> 不存在)。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
      <summary>引發 <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 事件。</summary>
      <param name="ccevent">
        <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.OnCollectionChanging(System.ComponentModel.CollectionChangeEventArgs)">
      <summary>引發 <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 事件。</summary>
      <param name="ccevent">
        <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.Remove(System.Data.DataRelation)">
      <summary>從集合移除指定的關聯。</summary>
      <param name="relation">要移除的關聯。</param>
      <exception cref="T:System.ArgumentNullException">關聯為 null 值。</exception>
      <exception cref="T:System.ArgumentException">關聯不屬於集合。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Remove(System.String)">
      <summary>從集合移除具有指定名稱的關聯。</summary>
      <param name="name">要移除的關聯名稱。</param>
      <exception cref="T:System.IndexOutOfRangeException">集合沒有包含具有指定名稱的關聯。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.RemoveAt(System.Int32)">
      <summary>從集合移除在指定索引處的關聯。</summary>
      <param name="index">要移除的關聯索引。</param>
      <exception cref="T:System.ArgumentException">集合在指定索引處不具有關聯。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.RemoveCore(System.Data.DataRelation)">
      <summary>在指定的 <see cref="T:System.Data.DataRelation" /> 物件上執行驗證。</summary>
      <param name="relation">要驗證的 <see langword="DataRelation" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">集合在指定索引處不具有關聯。</exception>
      <exception cref="T:System.ArgumentException">指定的關聯不屬於這個集合，或者屬於另一個集合。</exception>
    </member>
    <member name="T:System.Data.DataRow">
      <summary>表示 <see cref="T:System.Data.DataTable" /> 中的資料列。</summary>
    </member>
    <member name="M:System.Data.DataRow.#ctor(System.Data.DataRowBuilder)">
      <summary>將新的 DataRow 執行個體初始化。 從產生器建構資料列。 僅供內部使用。</summary>
      <param name="builder">產生器</param>
    </member>
    <member name="M:System.Data.DataRow.AcceptChanges">
      <summary>認可自前一次呼叫 <see cref="M:System.Data.DataRow.AcceptChanges" /> 以來，對這個資料列所做的所有變更。</summary>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於資料表。</exception>
    </member>
    <member name="M:System.Data.DataRow.BeginEdit">
      <summary>在 <see cref="T:System.Data.DataRow" /> 物件上開始編輯作業。</summary>
      <exception cref="T:System.Data.InRowChangingEventException">在 <see cref="E:System.Data.DataTable.RowChanging" /> 事件中呼叫該方法。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">在刪除的資料列上呼叫該方法。</exception>
    </member>
    <member name="M:System.Data.DataRow.CancelEdit">
      <summary>取消資料列上目前的編輯。</summary>
      <exception cref="T:System.Data.InRowChangingEventException">在 <see cref="E:System.Data.DataTable.RowChanging" /> 事件中呼叫該方法。</exception>
    </member>
    <member name="M:System.Data.DataRow.ClearErrors">
      <summary>清除資料列的錯誤。 這包括 <see cref="P:System.Data.DataRow.RowError" /> 和以 <see cref="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)" /> 設定的錯誤。</summary>
    </member>
    <member name="M:System.Data.DataRow.Delete">
      <summary>刪除 <see cref="T:System.Data.DataRow" />。</summary>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
        <see cref="T:System.Data.DataRow" /> 已經刪除。</exception>
    </member>
    <member name="M:System.Data.DataRow.EndEdit">
      <summary>結束資料列上發生的編輯。</summary>
      <exception cref="T:System.Data.InRowChangingEventException">在 <see cref="E:System.Data.DataTable.RowChanging" /> 事件中呼叫該方法。</exception>
      <exception cref="T:System.Data.ConstraintException">編輯中斷條件約束。</exception>
      <exception cref="T:System.Data.ReadOnlyException">資料列屬於資料表，而且編輯嘗試變更唯讀資料行的值。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">編輯嘗試將 Null 值置於 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 為 False 的資料行。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.Data.DataRelation)">
      <summary>使用指定的 <see cref="T:System.Data.DataRow" />，取得這個 <see cref="T:System.Data.DataRelation" /> 的子資料列。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> 物件的陣列，或是長度為零的陣列。</returns>
      <exception cref="T:System.ArgumentException">關聯和資料列不屬於相同資料表。</exception>
      <exception cref="T:System.ArgumentNullException">relation 為 <see langword="null" />。</exception>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於資料表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">資料列沒有這個版本的資料。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>使用指定的 <see cref="T:System.Data.DataRow" /> 和 <see cref="T:System.Data.DataRelation" />，取得 <see cref="T:System.Data.DataRowVersion" /> 的子資料列。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">其中一個 <see cref="T:System.Data.DataRowVersion" /> 值，指定要取得的資料版本。 可能的值為 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> 物件的陣列。</returns>
      <exception cref="T:System.ArgumentException">關聯和資料列不屬於相同資料表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於資料表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">資料列沒有要求的 <see cref="T:System.Data.DataRowVersion" />。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.String)">
      <summary>使用 <see cref="T:System.Data.DataRow" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" />，取得 <see cref="T:System.Data.DataRelation" /> 的子資料列。</summary>
      <param name="relationName">要使用的 <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> 物件的陣列，或是長度為零的陣列。</returns>
      <exception cref="T:System.ArgumentException">關聯和資料列不屬於相同資料表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於資料表。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.String,System.Data.DataRowVersion)">
      <summary>使用 <see cref="T:System.Data.DataRow" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" /> 和 <see cref="T:System.Data.DataRelation" />，取得 <see cref="T:System.Data.DataRowVersion" /> 的子資料列。</summary>
      <param name="relationName">要使用的 <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">其中一個 <see cref="T:System.Data.DataRowVersion" /> 值，指定要取得的資料版本。 可能的值為 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> 物件的陣列，或是長度為零的陣列。</returns>
      <exception cref="T:System.ArgumentException">關聯和資料列不屬於相同資料表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於資料表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">資料列沒有要求的 <see cref="T:System.Data.DataRowVersion" />。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.Data.DataColumn)">
      <summary>取得指定 <see cref="T:System.Data.DataColumn" /> 的錯誤描述。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
      <returns>錯誤描述的文字。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.Int32)">
      <summary>取得索引指定的資料行的錯誤描述。</summary>
      <param name="columnIndex">資料行的以零起始的索引。</param>
      <returns>錯誤描述的文字。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 引數超出範圍。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.String)">
      <summary>取得名稱指定的資料行的錯誤描述。</summary>
      <param name="columnName">資料行名稱。</param>
      <returns>錯誤描述的文字。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetColumnsInError">
      <summary>取得具有錯誤的資料行陣列。</summary>
      <returns>包含錯誤的 <see cref="T:System.Data.DataColumn" /> 物件陣列。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.Data.DataRelation)">
      <summary>使用指定的 <see cref="T:System.Data.DataRow" />，取得 <see cref="T:System.Data.DataRelation" /> 的父資料列。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <returns>目前資料列的父 <see cref="T:System.Data.DataRow" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 不屬於 <see cref="T:System.Data.DataTable" />。
-或-
資料列為 <see langword="null" />。</exception>
      <exception cref="T:System.Data.DataException">子資料行有多個父代。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">這個資料列不屬於 <see cref="T:System.Data.DataRelation" /> 物件的子資料表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於資料表。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>使用指定的 <see cref="T:System.Data.DataRow" /> 和 <see cref="T:System.Data.DataRelation" />，取得 <see cref="T:System.Data.DataRowVersion" /> 的父資料列。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">其中一個 <see cref="T:System.Data.DataRowVersion" /> 值，指定要取得的資料版本。</param>
      <returns>目前資料列的父 <see cref="T:System.Data.DataRow" />。</returns>
      <exception cref="T:System.ArgumentNullException">資料列為 <see langword="null" />。
-或-
<paramref name="relation" /> 不屬於這個資料表的父關聯。</exception>
      <exception cref="T:System.Data.DataException">子資料行有多個父代。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">關聯的子資料表不是資料列所屬的資料表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於資料表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">資料列沒有這個版本的資料。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.String)">
      <summary>使用 <see cref="T:System.Data.DataRow" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" />，取得 <see cref="T:System.Data.DataRelation" /> 的父資料列。</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。</param>
      <returns>目前資料列的父 <see cref="T:System.Data.DataRow" />。</returns>
      <exception cref="T:System.ArgumentException">關聯和資料列不屬於相同資料表。</exception>
      <exception cref="T:System.Data.DataException">子資料行有多個父代。</exception>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於資料表。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.String,System.Data.DataRowVersion)">
      <summary>使用 <see cref="T:System.Data.DataRow" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" /> 和 <see cref="T:System.Data.DataRelation" />，取得 <see cref="T:System.Data.DataRowVersion" /> 的父資料列。</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">其中一個 <see cref="T:System.Data.DataRowVersion" /> 值。</param>
      <returns>目前資料列的父 <see cref="T:System.Data.DataRow" />。</returns>
      <exception cref="T:System.ArgumentException">關聯和資料列不屬於相同資料表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Data.DataException">子資料行有多個父代。</exception>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於資料表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">資料列沒有要求的 <see cref="T:System.Data.DataRowVersion" />。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.Data.DataRelation)">
      <summary>使用指定的 <see cref="T:System.Data.DataRow" />，取得 <see cref="T:System.Data.DataRelation" /> 的父資料列。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> 物件的陣列，或是長度為零的陣列。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.DataRelation" /> 不屬於這個資料列的 <see cref="T:System.Data.DataSet" />。</exception>
      <exception cref="T:System.ArgumentNullException">資料列為 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">關聯的子資料表不是資料列所屬的資料表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於 <see cref="T:System.Data.DataTable" />。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>使用指定的 <see cref="T:System.Data.DataRow" /> 和 <see cref="T:System.Data.DataRelation" />，取得 <see cref="T:System.Data.DataRowVersion" /> 的父資料列。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">其中一個 <see cref="T:System.Data.DataRowVersion" /> 值，指定要取得的資料版本。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> 物件的陣列，或是長度為零的陣列。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.DataRelation" /> 不屬於這個資料列的 <see cref="T:System.Data.DataSet" />。</exception>
      <exception cref="T:System.ArgumentNullException">資料列為 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">關聯的子資料表不是資料列所屬的資料表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於 <see cref="T:System.Data.DataTable" />。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">資料列沒有要求的 <see cref="T:System.Data.DataRowVersion" />。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.String)">
      <summary>使用 <see cref="T:System.Data.DataRow" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" />，取得 <see cref="T:System.Data.DataRelation" /> 的父資料列。</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> 物件的陣列，或是長度為零的陣列。</returns>
      <exception cref="T:System.ArgumentException">關聯和資料列不屬於相同資料表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於資料表。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.String,System.Data.DataRowVersion)">
      <summary>使用 <see cref="T:System.Data.DataRow" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" /> 和 <see cref="T:System.Data.DataRelation" />，取得 <see cref="T:System.Data.DataRowVersion" /> 的父資料列。</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">其中一個 <see cref="T:System.Data.DataRowVersion" /> 值，指定要取得的資料版本。 可能的值為 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> 物件的陣列，或是長度為零的陣列。</returns>
      <exception cref="T:System.ArgumentException">關聯和資料列不屬於相同資料表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於資料表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">資料列沒有要求的 <see cref="T:System.Data.DataRowVersion" />。</exception>
    </member>
    <member name="P:System.Data.DataRow.HasErrors">
      <summary>取得值，指出資料列中是否有錯誤。</summary>
      <returns>如果資料列含有錯誤，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRow.HasVersion(System.Data.DataRowVersion)">
      <summary>取得值，指出是否有指定的版本。</summary>
      <param name="version">其中一個 <see cref="T:System.Data.DataRowVersion" /> 值，指定資料列的版本。</param>
      <returns>如果版本存在，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Data.DataColumn)">
      <summary>取得值，指出指定的 <see cref="T:System.Data.DataColumn" /> 是否含有 Null 值。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
      <returns>如果資料行包含 Null 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於資料表。</exception>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>取得值，指出指定的 <see cref="T:System.Data.DataColumn" /> 和 <see cref="T:System.Data.DataRowVersion" /> 是否包含 Null 值。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
      <param name="version">其中一個 <see cref="T:System.Data.DataRowVersion" /> 值，指定資料列的版本。 可能的值為 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。</param>
      <returns>如果資料行包含 Null 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於資料表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">資料列沒有要求的 <paramref name="version" />。</exception>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Int32)">
      <summary>取得值，指出指定之索引處的資料行是否包含 Null 值。</summary>
      <param name="columnIndex">資料行的以零起始的索引。</param>
      <returns>如果資料行包含 Null 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">無資料行對應至 <paramref name="columnIndex" /> 指定的索引。</exception>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於資料表。</exception>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.String)">
      <summary>取得值，指出具名資料行是否包含 Null 值。</summary>
      <param name="columnName">資料行名稱。</param>
      <returns>如果資料行包含 Null 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">找不到 <paramref name="columnName" /> 指定的資料行。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="columnName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於資料表。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Data.DataColumn)">
      <summary>取得或設定儲存於指定的 <see cref="T:System.Data.DataColumn" /> 中的資料。</summary>
      <param name="column">包含資料的 <see cref="T:System.Data.DataColumn" />。</param>
      <returns>
        <see cref="T:System.Object" />，包含資料。</returns>
      <exception cref="T:System.ArgumentException">資料行不屬於這個資料表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 為 Null。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試在刪除的資料列上設定值。</exception>
      <exception cref="T:System.InvalidCastException">數值和資料行的資料型別不相符。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>取得儲存於指定的 <see cref="T:System.Data.DataColumn" /> 中指定版本的資料。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />，其中包含資料行的相關資訊。</param>
      <param name="version">其中一個 <see cref="T:System.Data.DataRowVersion" /> 值，指定您所要的資料列版本。 可能的值為 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。</param>
      <returns>
        <see cref="T:System.Object" />，包含資料。</returns>
      <exception cref="T:System.ArgumentException">此資料行不屬於此資料表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 引數包含 Null。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">資料列沒有這個版本的資料。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Int32)">
      <summary>取得或設定儲存於索引指定的資料行中的資料。</summary>
      <param name="columnIndex">資料行的以零起始的索引。</param>
      <returns>
        <see cref="T:System.Object" />，包含資料。</returns>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試在刪除的資料列上設定值時發生。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 引數超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">設定了值而新值的 <see cref="T:System.Type" /> 與 <see cref="P:System.Data.DataColumn.DataType" /> 不相符時發生。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Int32,System.Data.DataRowVersion)">
      <summary>取得儲存於資料行中的資料，它是由要擷取的資料索引和版本所指定。</summary>
      <param name="columnIndex">資料行的以零起始的索引。</param>
      <param name="version">其中一個 <see cref="T:System.Data.DataRowVersion" /> 值，指定您所要的資料列版本。 可能的值為 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。</param>
      <returns>
        <see cref="T:System.Object" />，包含資料。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 引數超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">數值和資料行的資料型別不相符。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">資料列沒有這個版本的資料。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試在刪除的資料列上設定值。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.String)">
      <summary>取得或設定儲存於名稱所指定之資料行的資料。</summary>
      <param name="columnName">資料行名稱。</param>
      <returns>
        <see cref="T:System.Object" />，包含資料。</returns>
      <exception cref="T:System.ArgumentException">找不到 <paramref name="columnName" /> 指定的資料行。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試在刪除的資料列上設定值時發生。</exception>
      <exception cref="T:System.InvalidCastException">當設定值而其 <see cref="T:System.Type" /> 與 <see cref="P:System.Data.DataColumn.DataType" /> 不相符時發生。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">發生於您嘗試將 null 值插入至 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 設定為 <see langword="false" /> 的資料行時。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.String,System.Data.DataRowVersion)">
      <summary>取得儲存於具名資料行中指定版本的資料。</summary>
      <param name="columnName">資料行名稱。</param>
      <param name="version">其中一個 <see cref="T:System.Data.DataRowVersion" /> 值，指定您所要的資料列版本。 可能的值為 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。</param>
      <returns>
        <see cref="T:System.Object" />，包含資料。</returns>
      <exception cref="T:System.ArgumentException">找不到 <paramref name="columnName" /> 指定的資料行。</exception>
      <exception cref="T:System.InvalidCastException">數值和資料行的資料型別不相符。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">資料列沒有這個版本的資料。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">資料列已經刪除。</exception>
    </member>
    <member name="P:System.Data.DataRow.ItemArray">
      <summary>透過陣列取得或設定這個資料列的所有值。</summary>
      <returns>類型為 <see cref="T:System.Object" /> 的陣列。</returns>
      <exception cref="T:System.ArgumentException">陣列大於資料表中的資料行數目。</exception>
      <exception cref="T:System.InvalidCastException">陣列中的值與其在個別的 <see cref="P:System.Data.DataColumn.DataType" /> 中之 <see cref="T:System.Data.DataColumn" /> 不相符。</exception>
      <exception cref="T:System.Data.ConstraintException">編輯中斷條件約束。</exception>
      <exception cref="T:System.Data.ReadOnlyException">編輯嘗試變更唯讀資料行的值。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">某項編輯作業嘗試將 null 值置於資料行中，而該資料行中 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 物件的 <see cref="T:System.Data.DataColumn" /> 為 <see langword="false" />。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">資料列已經刪除。</exception>
    </member>
    <member name="M:System.Data.DataRow.RejectChanges">
      <summary>拒絕自前一次呼叫 <see cref="M:System.Data.DataRow.AcceptChanges" /> 以來，對資料列所做的所有變更。</summary>
      <exception cref="T:System.Data.RowNotInTableException">資料列不屬於資料表。</exception>
    </member>
    <member name="P:System.Data.DataRow.RowError">
      <summary>取得或設定資料列的自訂錯誤描述。</summary>
      <returns>描述錯誤的文字。</returns>
    </member>
    <member name="P:System.Data.DataRow.RowState">
      <summary>取得關於資料列與 <see cref="T:System.Data.DataRowCollection" /> 之關聯性 (Relationship) 的資料列目前狀態。</summary>
      <returns>其中一個 <see cref="T:System.Data.DataRowState" /> 值。</returns>
    </member>
    <member name="M:System.Data.DataRow.SetAdded">
      <summary>將 <see cref="P:System.Data.DataRow.RowState" /> 的 <see cref="T:System.Data.DataRow" /> 變更為 <see langword="Added" />。</summary>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.Data.DataColumn,System.String)">
      <summary>對指定為 <see cref="T:System.Data.DataColumn" /> 的資料行設定錯誤描述。</summary>
      <param name="column">要為其設定錯誤描述的 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="error">錯誤描述。</param>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)">
      <summary>設定索引指定的資料行的錯誤描述。</summary>
      <param name="columnIndex">資料行的以零起始的索引。</param>
      <param name="error">錯誤描述。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 引數超出範圍</exception>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.String,System.String)">
      <summary>設定名稱指定的資料行的錯誤描述。</summary>
      <param name="columnName">資料行名稱。</param>
      <param name="error">錯誤描述。</param>
    </member>
    <member name="M:System.Data.DataRow.SetModified">
      <summary>將 <see cref="P:System.Data.DataRow.RowState" /> 的 <see cref="T:System.Data.DataRow" /> 變更為 <see langword="Modified" />。</summary>
    </member>
    <member name="M:System.Data.DataRow.SetNull(System.Data.DataColumn)">
      <summary>將指定的 <see cref="T:System.Data.DataColumn" /> 的值設定為 Null 值。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.DataRow.SetParentRow(System.Data.DataRow)">
      <summary>使用指定的新父 <see cref="T:System.Data.DataRow" />，設定 <see cref="T:System.Data.DataRow" /> 的父資料列。</summary>
      <param name="parentRow">新的父 <see cref="T:System.Data.DataRow" />。</param>
    </member>
    <member name="M:System.Data.DataRow.SetParentRow(System.Data.DataRow,System.Data.DataRelation)">
      <summary>使用指定的新父 <see cref="T:System.Data.DataRow" /> 和 <see cref="T:System.Data.DataRow" />，設定 <see cref="T:System.Data.DataRelation" /> 的父資料列。</summary>
      <param name="parentRow">新的父 <see cref="T:System.Data.DataRow" />。</param>
      <param name="relation">要使用的關聯 <see cref="T:System.Data.DataRelation" />。</param>
      <exception cref="T:System.Data.RowNotInTableException">其中一個資料列不屬於資料表。</exception>
      <exception cref="T:System.ArgumentNullException">其中一個資料列為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">關聯不屬於 <see cref="T:System.Data.DataRelationCollection" /> 物件 <see cref="T:System.Data.DataSet" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">關聯的子 <see cref="T:System.Data.DataTable" /> 不是這個資料列所屬的資料表。</exception>
    </member>
    <member name="P:System.Data.DataRow.Table">
      <summary>取得其中的這個資料列具有結構描述的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>這個資料列所屬的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="T:System.Data.DataRowAction">
      <summary>描述在 <see cref="T:System.Data.DataRow" /> 上執行的動作。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Add">
      <summary>資料列已經加入至資料表。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Change">
      <summary>資料列已經變更。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.ChangeCurrentAndOriginal">
      <summary>資料列的原始和目前版本已經變更。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.ChangeOriginal">
      <summary>資料列的原始版本已經變更。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Commit">
      <summary>資料列的變更已經認可。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Delete">
      <summary>資料列已經從資料表刪除。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Nothing">
      <summary>資料列尚未變更。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Rollback">
      <summary>資料列最近的變更已經復原。</summary>
    </member>
    <member name="T:System.Data.DataRowBuilder">
      <summary>
        <see langword="DataRowBuilder" /> 型別支援 .NET Framework 基礎結構，而且不適合直接從您的程式碼使用。</summary>
    </member>
    <member name="T:System.Data.DataRowChangeEventArgs">
      <summary>提供 <see cref="E:System.Data.DataTable.RowChanged" />、<see cref="E:System.Data.DataTable.RowChanging" />、<see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" /> 和 <see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" /> 事件的資料。</summary>
    </member>
    <member name="M:System.Data.DataRowChangeEventArgs.#ctor(System.Data.DataRow,System.Data.DataRowAction)">
      <summary>初始化 <see cref="T:System.Data.DataRowChangeEventArgs" /> 類別的新執行個體。</summary>
      <param name="row">動作正在發生的所在 <see cref="T:System.Data.DataRow" />。</param>
      <param name="action">其中一個 <see cref="T:System.Data.DataRowAction" /> 值。</param>
    </member>
    <member name="P:System.Data.DataRowChangeEventArgs.Action">
      <summary>取得已經在 <see cref="T:System.Data.DataRow" /> 上發生的動作。</summary>
      <returns>其中一個 <see cref="T:System.Data.DataRowAction" /> 值。</returns>
    </member>
    <member name="P:System.Data.DataRowChangeEventArgs.Row">
      <summary>取得動作已經發生的所在資料列。</summary>
      <returns>動作已經發生的所在 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="T:System.Data.DataRowChangeEventHandler">
      <summary>表示處理 <see cref="E:System.Data.DataTable.RowChanging" /> 之 <see cref="E:System.Data.DataTable.RowChanged" />、<see cref="E:System.Data.DataTable.RowDeleting" />、<see cref="E:System.Data.DataTable.RowDeleted" /> 和 <see cref="T:System.Data.DataTable" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.Data.DataRowChangeEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.Data.DataRowCollection">
      <summary>表示 <see cref="T:System.Data.DataTable" /> 的資料列集合。</summary>
    </member>
    <member name="M:System.Data.DataRowCollection.Add(System.Data.DataRow)">
      <summary>將指定的 <see cref="T:System.Data.DataRow" /> 加入至 <see cref="T:System.Data.DataRowCollection" /> 物件中。</summary>
      <param name="row">要加入的 <see cref="T:System.Data.DataRow" />。</param>
      <exception cref="T:System.ArgumentNullException">資料列為 null。</exception>
      <exception cref="T:System.ArgumentException">資料列不是屬於另一個資料表，就是已經屬於這個資料表。</exception>
      <exception cref="T:System.Data.ConstraintException">新增會使條件約束 (Constraint) 失效。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">新增會嘗試將 Null 置於 <see cref="T:System.Data.DataColumn" /> 為 False 的 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 中。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Add(System.Object[])">
      <summary>使用指定的值建立資料列，並將它加入至 <see cref="T:System.Data.DataRowCollection" />。</summary>
      <param name="values">用來建立新資料列之值的陣列。</param>
      <returns>無。</returns>
      <exception cref="T:System.ArgumentException">陣列大於資料表中的資料行數目。</exception>
      <exception cref="T:System.InvalidCastException">值不符合其個別的資料行型別。</exception>
      <exception cref="T:System.Data.ConstraintException">加入資料列會使條件約束失效。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">嘗試將 Null 置於 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 為 False 的資料行中。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Clear">
      <summary>清除所有資料列的集合。</summary>
      <exception cref="T:System.Data.InvalidConstraintException">在 <see cref="T:System.Data.ForeignKeyConstraint" /> 上強制使用 <see cref="T:System.Data.DataRowCollection" />。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Contains(System.Object)">
      <summary>取得值，指出集合中任何資料列的主索引鍵是否包含指定的值。</summary>
      <param name="key">要測試的主索引鍵值。</param>
      <returns>如果集合包含具有指定主索引鍵值的 <see cref="T:System.Data.DataRow" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.Data.MissingPrimaryKeyException">資料表沒有主索引鍵。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Contains(System.Object[])">
      <summary>取得值，指出集合中任何資料列的主索引鍵資料行是否包含在物件陣列中所指定的值。</summary>
      <param name="keys">要測試的主索引鍵值的陣列。</param>
      <returns>如果 <see cref="T:System.Data.DataRowCollection" /> 包含具有指定索引鍵值的 <see cref="T:System.Data.DataRow" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.Data.MissingPrimaryKeyException">資料表沒有主索引鍵。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)">
      <summary>將這個集合中所有的 <see cref="T:System.Data.DataRow" /> 物件複製到從指定目的端陣列索引開始的指定陣列中。</summary>
      <param name="ar">一維陣列，表示從這個 <see langword="DataRowCollection" /> 複製過來之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="index">陣列中以零為起始的索引，而且複製會從該位置開始。</param>
    </member>
    <member name="M:System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)">
      <summary>將這個集合中所有的 <see cref="T:System.Data.DataRow" /> 物件複製到從指定目的端陣列索引開始的指定陣列中。</summary>
      <param name="array">一維陣列，表示從這個 <see langword="DataRowCollection" /> 複製過來之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="index">陣列中以零為起始的索引，而且複製會從該位置開始。</param>
    </member>
    <member name="P:System.Data.DataRowCollection.Count">
      <summary>取得此集合中的 <see cref="T:System.Data.DataRow" /> 物件總數。</summary>
      <returns>此集合中的 <see cref="T:System.Data.DataRow" /> 物件總數。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.Find(System.Object)">
      <summary>取得主索引鍵值指定的資料列。</summary>
      <param name="key">要尋找之 <see cref="T:System.Data.DataRow" /> 的主索引鍵值。</param>
      <returns>
        <see cref="T:System.Data.DataRow" />，其中包含指定的主索引鍵值，否則，如果 <see cref="T:System.Data.DataRowCollection" /> 中沒有主索引鍵值，就傳回 Null 值。</returns>
      <exception cref="T:System.Data.MissingPrimaryKeyException">資料表沒有主索引鍵。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Find(System.Object[])">
      <summary>取得包含指定主索引鍵值的資料列。</summary>
      <param name="keys">要尋找的主索引鍵值的陣列。 陣列的型別為 <see langword="Object" />。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> 物件，其包含指定的主索引鍵值；如果 <see cref="T:System.Data.DataRowCollection" /> 中沒有主索引鍵值，則傳回 null 值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">沒有資料列對應至該索引值。</exception>
      <exception cref="T:System.Data.MissingPrimaryKeyException">資料表沒有主索引鍵。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.GetEnumerator">
      <summary>取得這個集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>這個集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.IndexOf(System.Data.DataRow)">
      <summary>取得指定 <see cref="T:System.Data.DataRow" /> 物件的索引。</summary>
      <param name="row">要搜尋的 <see langword="DataRow" />。</param>
      <returns>資料列的以零起始之索引；如果在集合中找不到此資料列，則為 -1。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)">
      <summary>將新的資料列插入集合的指定位置。</summary>
      <param name="row">要加入的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="pos">集合中要加入 <see langword="DataRow" /> 的 (以零起始) 位置。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="pos" /> 小於 0。</exception>
    </member>
    <member name="P:System.Data.DataRowCollection.Item(System.Int32)">
      <summary>取得在指定索引處的資料列。</summary>
      <param name="index">要傳回之資料列的以零起始的索引。</param>
      <returns>指定的 <see cref="T:System.Data.DataRow" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">索引值大於集合中項目的數目。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Remove(System.Data.DataRow)">
      <summary>從集合移除指定的 <see cref="T:System.Data.DataRow" />。</summary>
      <param name="row">要移除的 <see cref="T:System.Data.DataRow" />。</param>
    </member>
    <member name="M:System.Data.DataRowCollection.RemoveAt(System.Int32)">
      <summary>從集合的指定索引處移除資料列。</summary>
      <param name="index">要移除之資料列的索引。</param>
    </member>
    <member name="T:System.Data.DataRowComparer">
      <summary>傳回 <see cref="T:System.Data.DataRowComparer`1" /> 類別的單一執行個體。</summary>
    </member>
    <member name="P:System.Data.DataRowComparer.Default">
      <summary>取得 <see cref="T:System.Data.DataRowComparer`1" /> 的單一執行個體。 這個屬性是唯讀的。</summary>
      <returns>
        <see cref="T:System.Data.DataRowComparer`1" /> 的執行個體。</returns>
    </member>
    <member name="T:System.Data.DataRowComparer`1">
      <summary>使用數值比較，比較兩個 <see cref="T:System.Data.DataRow" /> 物件是否相等。</summary>
      <typeparam name="TRow">要比較之物件的型別，通常為 <see cref="T:System.Data.DataRow" />。</typeparam>
    </member>
    <member name="P:System.Data.DataRowComparer`1.Default">
      <summary>取得 <see cref="T:System.Data.DataRowComparer`1" /> 的單一執行個體。 這個屬性是唯讀的。</summary>
      <returns>
        <see cref="T:System.Data.DataRowComparer`1" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Data.DataRowComparer`1.Equals(`0,`0)">
      <summary>使用數值比較，逐資料行比較兩個 <see cref="T:System.Data.DataRow" /> 物件。</summary>
      <param name="leftRow">要比較的第一個 <see cref="T:System.Data.DataRow" /> 物件。</param>
      <param name="rightRow">要比較的第二個 <see cref="T:System.Data.DataRow" /> 物件。</param>
      <returns>如果這兩個 <see cref="T:System.Data.DataRow" /> 物件具有已排序的相等資料行值集合，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">來源 <see cref="T:System.Data.DataRow" /> 物件的其中之一或兩者都是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Data.DataRowComparer`1.GetHashCode(`0)">
      <summary>傳回指定之 <see cref="T:System.Data.DataRow" /> 物件的雜湊程式碼。</summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" />，要從中計算雜湊程式碼。</param>
      <returns>
        <see cref="T:System.Int32" /> 值，表示資料列的雜湊程式碼。</returns>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Data.DataRow" /> 物件不屬於 <see cref="T:System.Data.DataTable" />。</exception>
      <exception cref="T:System.ArgumentNullException">來源 <see cref="T:System.Data.DataRow" /> 物件為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Data.DataRowExtensions">
      <summary>定義 <see cref="T:System.Data.DataRow" /> 類別的擴充方法。 這是靜態類別。</summary>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)">
      <summary>提供強型別的權限以存取指定之資料列中每一個資料行的值。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)" /> 方法也支援可為 null 的型別。</summary>
      <param name="row">輸入 <see cref="T:System.Data.DataRow" />，作用為擴充方法的 <see langword="this" /> 執行個體。</param>
      <param name="column">輸入 <see cref="T:System.Data.DataColumn" /> 物件，指定要傳回其值的資料行。</param>
      <typeparam name="T">泛型參數，會指定資料行的傳回型別。</typeparam>
      <returns>
        <paramref name="T" /> 指定之 <see cref="T:System.Data.DataColumn" /> 的 <paramref name="column" /> 型別值。</returns>
      <exception cref="T:System.InvalidCastException">基礎資料行的實值型別不能轉換成泛型參數 <paramref name="T" /> 所指定的型別。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="column" /> 所指定的資料行不會出現在 <see cref="T:System.Data.DataTable" /> 所屬的 <see cref="T:System.Data.DataRow" />。</exception>
      <exception cref="T:System.NullReferenceException">null 值已指派給不可為 Null 的類型。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>提供強型別的權限以存取指定之資料列中每一個資料行的值。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)" /> 方法也支援可為 null 的型別。</summary>
      <param name="row">輸入 <see cref="T:System.Data.DataRow" />，作用為擴充方法的 <see langword="this" /> 執行個體。</param>
      <param name="column">輸入 <see cref="T:System.Data.DataColumn" /> 物件，指定要傳回其值的資料行。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 列舉，會指定要傳回之資料行值的版本，例如 <see langword="Current" /> 或 <see langword="Original" /> 版本。</param>
      <typeparam name="T">泛型參數，會指定資料行的傳回型別。</typeparam>
      <returns>
        <paramref name="T" /> 和 <paramref name="column" /> 指定之 <see cref="T:System.Data.DataColumn" /> 的 <paramref name="version" /> 型別值。</returns>
      <exception cref="T:System.InvalidCastException">基礎資料行的實值型別不能轉換成泛型參數 <paramref name="T" /> 所指定的型別。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="column" /> 所指定的資料行不會存在於 <see cref="T:System.Data.DataTable" /> 所屬的 <see cref="T:System.Data.DataRow" />。</exception>
      <exception cref="T:System.NullReferenceException">null 值已指派給不可為 Null 的類型。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)">
      <summary>提供強型別的權限以存取指定之資料列中每一個資料行的值。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)" /> 方法也支援可為 null 的型別。</summary>
      <param name="row">輸入 <see cref="T:System.Data.DataRow" />，作用為擴充方法的 <see langword="this" /> 執行個體。</param>
      <param name="columnIndex">資料行索引。</param>
      <typeparam name="T">泛型參數，會指定資料行的傳回型別。</typeparam>
      <returns>
        <paramref name="T" /> 指定之 <see cref="T:System.Data.DataColumn" /> 的 <paramref name="columnIndex" /> 型別值。</returns>
      <exception cref="T:System.InvalidCastException">基礎資料行的實值型別不能轉換成泛型參數 <paramref name="T" /> 所指定的型別。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 所指定的資料行不會存在於 <see cref="T:System.Data.DataTable" /> 所屬的 <see cref="T:System.Data.DataRow" />。</exception>
      <exception cref="T:System.NullReferenceException">null 值已指派給不可為 Null 的類型。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
      <summary>提供強型別的權限以存取指定之資料列中每一個資料行的值。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)" /> 方法也支援可為 null 的型別。</summary>
      <param name="row">輸入 <see cref="T:System.Data.DataRow" />，作用為擴充方法的 <see langword="this" /> 執行個體。</param>
      <param name="columnIndex">要傳回其值的資料行之以零起始的序數。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 列舉，會指定要傳回之資料行值的版本，例如 <see langword="Current" /> 或 <see langword="Original" /> 版本。</param>
      <typeparam name="T">泛型參數，會指定資料行的傳回型別。</typeparam>
      <returns>
        <paramref name="T" /> 和 <paramref name="ordinal" /> 指定之 <see cref="T:System.Data.DataColumn" /> 的 <paramref name="version" /> 型別值。</returns>
      <exception cref="T:System.InvalidCastException">基礎資料行的實值型別不能轉換成泛型參數 <paramref name="T" /> 所指定的型別。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 所指定的資料行不會存在於 <see cref="T:System.Data.DataTable" /> 所屬的 <see cref="T:System.Data.DataRow" />。</exception>
      <exception cref="T:System.NullReferenceException">null 值已指派給不可為 Null 的類型。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)">
      <summary>提供強型別的權限以存取指定之資料列中每一個資料行的值。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)" /> 方法也支援可為 null 的型別。</summary>
      <param name="row">輸入 <see cref="T:System.Data.DataRow" />，作用為擴充方法的 <see langword="this" /> 執行個體。</param>
      <param name="columnName">要傳回其值的資料行名稱。</param>
      <typeparam name="T">泛型參數，會指定資料行的傳回型別。</typeparam>
      <returns>
        <paramref name="T" /> 指定之 <see cref="T:System.Data.DataColumn" /> 的 <paramref name="columnName" /> 型別值。</returns>
      <exception cref="T:System.InvalidCastException">基礎資料行的實值型別不能轉換成泛型參數 <paramref name="T" /> 所指定的型別。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnName" /> 所指定的資料行不會出現在 <see cref="T:System.Data.DataTable" /> 所屬的 <see cref="T:System.Data.DataRow" />。</exception>
      <exception cref="T:System.NullReferenceException">
        <see langword="null" /> 值已指派給不可為 null 的型別。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
      <summary>提供強型別的權限以存取指定之資料列中每一個資料行的值。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)" /> 方法也支援可為 null 的型別。</summary>
      <param name="row">輸入 <see cref="T:System.Data.DataRow" />，作用為擴充方法的 <see langword="this" /> 執行個體。</param>
      <param name="columnName">要傳回其值的資料行名稱。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 列舉，會指定要傳回之資料行值的版本，例如 <see langword="Current" /> 或 <see langword="Original" /> 版本。</param>
      <typeparam name="T">泛型參數，會指定資料行的傳回型別。</typeparam>
      <returns>
        <paramref name="T" /> 和 <paramref name="columnName" /> 指定之 <see cref="T:System.Data.DataColumn" /> 的 <paramref name="version" /> 型別值。</returns>
      <exception cref="T:System.InvalidCastException">基礎資料行的實值型別不能轉換成泛型參數 <paramref name="T" /> 所指定的型別。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnName" /> 所指定的資料行不會存在於 <see cref="T:System.Data.DataTable" /> 所屬的 <see cref="T:System.Data.DataRow" />。</exception>
      <exception cref="T:System.NullReferenceException">null 值已指派給不可為 Null 的類型。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)">
      <summary>在 <see cref="T:System.Data.DataRow" /> 中，為指定的資料行設定新的值。 <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)" /> 方法也支援可為 null 的型別。</summary>
      <param name="row">輸入 <see cref="T:System.Data.DataRow" />，作用為擴充方法的 <see langword="this" /> 執行個體。</param>
      <param name="column">輸入 <see cref="T:System.Data.DataColumn" />，指定要擷取哪個資料列值。</param>
      <param name="value">指定之資料行的新資料列值，這個值的型別為 <paramref name="T" />。</param>
      <typeparam name="T">泛型參數，會指定資料行的實值型別。</typeparam>
      <exception cref="T:System.ArgumentException">找不到 <paramref name="column" /> 指定的資料行。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 為 null。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試在已刪除的資料列上設定值時發生。</exception>
      <exception cref="T:System.InvalidCastException">基礎資料行的實值型別不能轉換成泛型參數 <paramref name="T" /> 所指定的型別。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)">
      <summary>在 <see cref="T:System.Data.DataRow" /> (會針對它呼叫此方法) 中，為指定的資料行設定新的值。 <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)" /> 方法也支援可為 null 的型別。</summary>
      <param name="row">輸入 <see cref="T:System.Data.DataRow" />，作用為擴充方法的 <see langword="this" /> 執行個體。</param>
      <param name="columnIndex">要設定其值的資料行之以零起始的序數。</param>
      <param name="value">指定之資料行的新資料列值，這個值的型別為 <paramref name="T" />。</param>
      <typeparam name="T">泛型參數，會指定資料行的實值型別。</typeparam>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試在已刪除的資料列上設定值時發生。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 引數超出範圍。</exception>
      <exception cref="T:System.InvalidCastException">基礎資料行的實值型別不能轉換成泛型參數 <paramref name="T" /> 所指定的型別。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)">
      <summary>在 <see cref="T:System.Data.DataRow" /> 中，為指定的資料行設定新的值。 <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)" /> 方法也支援可為 null 的型別。</summary>
      <param name="row">輸入 <see cref="T:System.Data.DataRow" />，作用為擴充方法的 <see langword="this" /> 執行個體。</param>
      <param name="columnName">要設定其值的資料行名稱。</param>
      <param name="value">指定之資料行的新資料列值，這個值的型別為 <paramref name="T" />。</param>
      <typeparam name="T">泛型參數，會指定資料行的實值型別。</typeparam>
      <exception cref="T:System.ArgumentException">找不到 <paramref name="columnName" /> 指定的資料行。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試在已刪除的資料列上設定值時發生。</exception>
      <exception cref="T:System.InvalidCastException">基礎資料行的實值型別不能轉換成泛型參數 <paramref name="T" /> 所指定的型別。</exception>
    </member>
    <member name="T:System.Data.DataRowState">
      <summary>取得 <see cref="T:System.Data.DataRow" /> 物件的狀態。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Added">
      <summary>資料列已經加入至 <see cref="T:System.Data.DataRowCollection" />，並且尚未呼叫 <see cref="M:System.Data.DataRow.AcceptChanges" />。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Deleted">
      <summary>使用 <see cref="M:System.Data.DataRow.Delete" /> 的 <see cref="T:System.Data.DataRow" /> 方法來刪除資料列。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Detached">
      <summary>資料列已建立，但它不屬於任何 <see cref="T:System.Data.DataRowCollection" />。 <see cref="T:System.Data.DataRow" /> 在已經建立後、加入至集合前，或如果已經從集合移除後，會立即處在這個狀態中。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Modified">
      <summary>已經修改資料列，並且尚未呼叫 <see cref="M:System.Data.DataRow.AcceptChanges" />。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Unchanged">
      <summary>資料列從上次呼叫 <see cref="M:System.Data.DataRow.AcceptChanges" /> 之後就未變更。</summary>
    </member>
    <member name="T:System.Data.DataRowVersion">
      <summary>說明 <see cref="T:System.Data.DataRow" /> 的版本。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Current">
      <summary>資料列包含目前的值。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Default">
      <summary>
        <see cref="T:System.Data.DataRowState" /> 的預設版本。 針對 <see langword="Added" />、<see langword="Modified" /> 或 <see langword="Deleted" /> 的 <see langword="DataRowState" /> 值，預設版本是 <see langword="Current" />。 針對 <see langword="Detached" /> 的 <see cref="T:System.Data.DataRowState" /> 值，版本是 <see langword="Proposed" />。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Original">
      <summary>資料列包含其原始值。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Proposed">
      <summary>資料列包含建議值。</summary>
    </member>
    <member name="T:System.Data.DataRowView">
      <summary>表示 <see cref="T:System.Data.DataRow" /> 的自訂檢視。</summary>
    </member>
    <member name="M:System.Data.DataRowView.BeginEdit">
      <summary>開始編輯程序。</summary>
    </member>
    <member name="M:System.Data.DataRowView.CancelEdit">
      <summary>取消編輯程序。</summary>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.Data.DataRelation)">
      <summary>使用指定的子 <see cref="T:System.Data.DataView" />，傳回子系 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="relation">
        <see cref="T:System.Data.DataRelation" /> 物件。</param>
      <returns>子系 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.Data.DataRelation,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 和父系，傳回子系 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataView" />。</summary>
      <param name="relation">
        <see cref="T:System.Data.DataRelation" /> 物件。</param>
      <param name="followParent">父物件。</param>
      <returns>子 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="relation" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.String)">
      <summary>使用指定的子 <see cref="T:System.Data.DataView" /> 名稱，傳回子系 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="relationName">含有 <see cref="T:System.Data.DataRelation" /> 名稱的字串。</param>
      <returns>子系 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.String,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Data.DataView" /> 名稱和父代，傳回子系 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="relationName">含有 <see cref="T:System.Data.DataRelation" /> 名稱的字串。</param>
      <param name="followParent">
        <see langword="true" /> 讓建立的子檢視與父系保持同步；否則為 <see langword="false" />。</param>
      <returns>子系 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="relation" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Data.DataRowView.DataView">
      <summary>取得這個資料列所屬的 <see cref="T:System.Data.DataView" />。</summary>
      <returns>這個資料列所屬的 <see langword="DataView" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.Delete">
      <summary>刪除資料列。</summary>
    </member>
    <member name="M:System.Data.DataRowView.EndEdit">
      <summary>認可對基礎 <see cref="T:System.Data.DataRow" /> 的變更，並結束以 <see cref="M:System.Data.DataRowView.BeginEdit" /> 開始的編輯階段作業。  使用<see cref="M:System.Data.DataRowView.CancelEdit" />可放棄對<see cref="T:System.Data.DataRow" />所做的變更。</summary>
    </member>
    <member name="M:System.Data.DataRowView.Equals(System.Object)">
      <summary>取得值，指出目前的 <see cref="T:System.Data.DataRowView" /> 是否與指定的物件相同。</summary>
      <param name="other">要比較的 <see cref="T:System.Object" />。</param>
      <returns>如果 <paramref name="object" /> 是 <see cref="T:System.Data.DataRowView" />，且傳回與目前的 <see cref="T:System.Data.DataRowView" /> 相同的資料列，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.GetHashCode">
      <summary>傳回 <see cref="T:System.Data.DataRow" /> 物件的雜湊程式碼。</summary>
      <returns>如果這個執行個體的值為非零值 (Nonzero)，則為表示布林值 (Boolean) <see langword="true" /> 的 32 位元帶正負號的整數 (Signed Integer) 雜湊程式碼 1，否則為表示布林值 <see langword="false" /> 的整數零。</returns>
    </member>
    <member name="P:System.Data.DataRowView.IsEdit">
      <summary>指示資料列是否處於編輯模式。</summary>
      <returns>
        <see langword="true" />，表示資料列處於編輯模式；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataRowView.IsNew">
      <summary>指示 <see cref="T:System.Data.DataRowView" /> 是否為新的。</summary>
      <returns>
        <see langword="true" />，表示資料列是新的；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataRowView.Item(System.Int32)">
      <summary>取得或設定指定資料行中的值。</summary>
      <param name="ndx">資料行索引。</param>
      <returns>資料行的值。</returns>
      <exception cref="T:System.Data.DataException">
        <see cref="P:System.Data.DataRowView.DataView" /> 不允許編輯且 <see cref="T:System.Data.DataRowView" /> 不是新的。</exception>
      <exception cref="T:System.IndexOutOfRangeException">沒有對應至該索引值的資料行。</exception>
    </member>
    <member name="P:System.Data.DataRowView.Item(System.String)">
      <summary>取得或設定指定資料行中的值。</summary>
      <param name="property">包含指定資料行的字串。</param>
      <returns>資料行的值。</returns>
      <exception cref="T:System.ArgumentException">找不到具有指定名稱或關聯性的資料行。
-或-
<see cref="P:System.Data.DataRowView.DataView" /> 不允許編輯且 <see cref="T:System.Data.DataRowView" /> 不是新的。</exception>
      <exception cref="T:System.Data.DataException">設定值時不相符的 <paramref name="property" />。</exception>
    </member>
    <member name="E:System.Data.DataRowView.PropertyChanged">
      <summary>當 <see cref="T:System.Data.DataRowView" /> 屬性變更時所引發的事件。</summary>
    </member>
    <member name="P:System.Data.DataRowView.Row">
      <summary>取得正在檢視的 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>正在由 <see cref="T:System.Data.DataRow" /> 檢視的 <see cref="T:System.Data.DataRowView" />。</returns>
    </member>
    <member name="P:System.Data.DataRowView.RowVersion">
      <summary>取得 <see cref="T:System.Data.DataRow" /> 的目前版本描述。</summary>
      <returns>其中一個 <see cref="T:System.Data.DataRowVersion" /> 值。 <see cref="P:System.Data.DataRowView.RowVersion" /> 屬性可能的值為 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>傳回元件之這個執行個體的自訂屬性集合。</summary>
      <returns>包含此物件之屬性的 AttributeCollection。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>傳回這個元件執行個體的類別名稱。</summary>
      <returns>這個元件執行個體的類別名稱。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>傳回這個元件執行個體的名稱。</summary>
      <returns>元件的這個執行個體的名稱。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>傳回這個元件執行個體的類型轉換子。</summary>
      <returns>這個元件執行個體的型別轉換子。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>傳回這個元件執行個體的預設事件。</summary>
      <returns>這個元件執行個體的預設事件。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>傳回這個元件執行個體的屬性。</summary>
      <returns>這個元件執行個體的預設屬性。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>傳回元件的這個執行個體之指定類型編輯器。</summary>
      <param name="editorBaseType">表示此物件編輯器的 <see cref="T:System.Type" />。</param>
      <returns>為此物件之編輯器的指定類型 <see cref="T:System.Object" />，如果找不到編輯器，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>傳回這個元件執行個體的事件。</summary>
      <returns>這個元件執行個體的事件。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>傳回這個含指定屬性之元件執行個體的事件。</summary>
      <param name="attributes">屬性</param>
      <returns>這個元件執行個體的事件。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>傳回元件之這個執行個體的屬性。</summary>
      <returns>這個元件執行個體的屬性。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>傳回這個含指定屬性之元件執行個體的屬性。</summary>
      <param name="attributes">屬性。</param>
      <returns>這個元件執行個體的屬性。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>傳回物件，包含指定的屬性描述項所描述的屬性。</summary>
      <param name="pd">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，代表要尋找其擁有者的屬性。</param>
      <returns>
        <see cref="T:System.Object" />，代表指定之屬性的擁有者。</returns>
    </member>
    <member name="P:System.Data.DataRowView.System#ComponentModel#IDataErrorInfo#Error">
      <summary>取得說明物件驗證錯誤的訊息。</summary>
      <returns>物件的驗證錯誤。</returns>
    </member>
    <member name="P:System.Data.DataRowView.System#ComponentModel#IDataErrorInfo#Item(System.String)">
      <summary>使用指定的名稱取得屬性的錯誤訊息。</summary>
      <param name="colName">要取得其錯誤訊息的屬性名稱。</param>
      <returns>屬性的錯誤訊息。 預設為空字串 ("")。</returns>
    </member>
    <member name="T:System.Data.DataSet">
      <summary>代表資料的記憶體中快取。</summary>
    </member>
    <member name="M:System.Data.DataSet.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataSet" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化具有指定序列化資訊和內容之 <see cref="T:System.Data.DataSet" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需的資料。</param>
      <param name="context">指定的序列化資料流的來源和目的端。</param>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.DataSet" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件。</param>
      <param name="ConstructSchema">布林值。</param>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.String)">
      <summary>使用指定名稱，初始化 <see cref="T:System.Data.DataSet" /> 類別的新執行個體。</summary>
      <param name="dataSetName">
        <see cref="T:System.Data.DataSet" /> 的名稱。</param>
    </member>
    <member name="M:System.Data.DataSet.AcceptChanges">
      <summary>認可從載入這個 <see cref="T:System.Data.DataSet" /> 物件或前一次呼叫 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以來，對該物件做的所有變更。</summary>
    </member>
    <member name="M:System.Data.DataSet.BeginInit">
      <summary>開始對表單或另一個元件所使用的 <see cref="T:System.Data.DataSet" /> 進行初始化作業。 初始化發生於執行階段。</summary>
    </member>
    <member name="P:System.Data.DataSet.CaseSensitive">
      <summary>取得或設定值，指出在 <see cref="T:System.Data.DataTable" /> 物件中的字串比較是否為區分大小寫。</summary>
      <returns>
        <see langword="true" />，字串比較是否區分大小寫;否則，<see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.Clear">
      <summary>移除所有資料表中的資料列，以清除任何資料的 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="M:System.Data.DataSet.Clone">
      <summary>複製 <see cref="T:System.Data.DataSet" /> 的結構，包括所有 <see cref="T:System.Data.DataTable" /> 結構描述、關聯和條件約束。 不要複製任何資料。</summary>
      <returns>具有與目前的 <see cref="T:System.Data.DataSet" /> 相同結構描述之新 <see cref="T:System.Data.DataSet" />，但是沒有資料。</returns>
    </member>
    <member name="M:System.Data.DataSet.Copy">
      <summary>複製這個 <see cref="T:System.Data.DataSet" /> 的結構和資料。</summary>
      <returns>新的 <see cref="T:System.Data.DataSet" />，具有與這個 <see cref="T:System.Data.DataSet" /> 相同的結構 (資料表結構描述、關聯和條件約束) 和資料。

如果這些類別已形成子類別，則複本也會屬於相同的子類別。</returns>
    </member>
    <member name="M:System.Data.DataSet.CreateDataReader">
      <summary>傳回 <see cref="T:System.Data.DataTableReader" />，每個 <see cref="T:System.Data.DataTable" /> 有一個結果集，順序與資料表出現在 <see cref="P:System.Data.DataSet.Tables" /> 集合中的順序相同。</summary>
      <returns>
        <see cref="T:System.Data.DataTableReader" />，包含一個或多個結果集，對應於包含在來源 <see cref="T:System.Data.DataTable" /> 之中的 <see cref="T:System.Data.DataSet" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])">
      <summary>傳回 <see cref="T:System.Data.DataTableReader" />，每一個 <see cref="T:System.Data.DataTable" /> 有一個結果集。</summary>
      <param name="dataTables">DataTable 的陣列提供要在 <see cref="T:System.Data.DataTableReader" /> 中傳回的結果集順序。</param>
      <returns>
        <see cref="T:System.Data.DataTableReader" />，包含一個或多個結果集，對應於包含在來源 <see cref="T:System.Data.DataTable" /> 之中的 <see cref="T:System.Data.DataSet" /> 執行個體。 傳回的結果集的順序是 <paramref name="dataTables" /> 參數所指定的順序。</returns>
    </member>
    <member name="P:System.Data.DataSet.DataSetName">
      <summary>取得或設定目前 <see cref="T:System.Data.DataSet" /> 的名稱。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 的名稱。</returns>
    </member>
    <member name="P:System.Data.DataSet.DefaultViewManager">
      <summary>取得 <see cref="T:System.Data.DataSet" /> (它允許使用自訂的 <see cref="T:System.Data.DataViewManager" /> 進行篩選、搜尋和巡覽) 所包含的資料之自訂檢視。</summary>
      <returns>
        <see cref="T:System.Data.DataViewManager" /> 物件。</returns>
    </member>
    <member name="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>判斷 <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，在遠端還原序列化案例中，以 <see langword="DataSet" /> 的保護建構函式 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 叫用。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，在遠端還原序列化案例中，以 <see langword="DataSet" /> 的保護建構函式 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 叫用。</param>
      <returns>
        <see cref="T:System.Data.SchemaSerializationMode" /> 列舉，指出結構描述資訊是否已從承載中省略。</returns>
    </member>
    <member name="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)">
      <summary>判斷 <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 執行個體，是在 <see cref="T:System.Data.DataSet" /> 的還原序列化期間傳遞的。</param>
      <returns>
        <see cref="T:System.Data.SchemaSerializationMode" /> 列舉，指出結構描述資訊是否已從承載中省略。</returns>
    </member>
    <member name="M:System.Data.DataSet.EndInit">
      <summary>結束對表單或另一個元件所使用的 <see cref="T:System.Data.DataSet" /> 進行初始化作業。 初始化發生於執行階段。</summary>
    </member>
    <member name="P:System.Data.DataSet.EnforceConstraints">
      <summary>取得或設定值，指出在嘗試任何更新作業時，是否遵循條件約束 (Constraint) 規則。</summary>
      <returns>
        <see langword="true" /> 是否強制執行規則;否則，<see langword="false" />。 預設為 <see langword="true" />。</returns>
      <exception cref="T:System.Data.ConstraintException">一個或多個條件約束無法強制遵循。</exception>
    </member>
    <member name="P:System.Data.DataSet.ExtendedProperties">
      <summary>取得與 <see langword="DataSet" /> 相關聯的自訂使用者資訊集合。</summary>
      <returns>具有所有自訂使用者資訊的 <see cref="T:System.Data.PropertyCollection" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetChanges">
      <summary>取得 <see cref="T:System.Data.DataSet" /> (包含從載入它或前一次呼叫 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以來所做的所有變更) 的複本。</summary>
      <returns>這個 <see cref="T:System.Data.DataSet" /> 所產生變更的複本，可在其上執行動作，並且稍後使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 合併回來。 如果找不到已變更的資料列，則方法會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetChanges(System.Data.DataRowState)">
      <summary>取得 <see cref="T:System.Data.DataSet" /> (包含從前一次載入它或呼叫 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以來所做的所有變更) 的複本 (由 <see cref="T:System.Data.DataRowState" /> 篩選)。</summary>
      <param name="rowStates">其中一個 <see cref="T:System.Data.DataRowState" /> 值。</param>
      <returns>篩選過的 <see cref="T:System.Data.DataSet" /> 複本，可以在其上執行動作，然後在使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 時合併回來。 如果找不到所需的 <see cref="T:System.Data.DataRowState" /> 的資料列，則方法會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>取得資料集之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的複本。</summary>
      <param name="schemaSet">指定的結構描述集。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的複本。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以序列化 <see cref="T:System.Data.DataSet" /> 所需的資料，填入序列化資訊物件。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，保留與 <see cref="T:System.Data.DataSet" /> 關聯的序列化資料。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，含有與 <see cref="T:System.Data.DataSet" /> 關聯的序列資料流的來源和目的端。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.GetSchemaSerializable">
      <summary>傳回可序列化的 <see cref="T:System.Xml.Schema.XmlSchema" /> 執行個體。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>從二進位或 XML 資料流還原序列化資料表資料。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 執行個體。</param>
      <param name="context">資料流內容。</param>
    </member>
    <member name="M:System.Data.DataSet.GetXml">
      <summary>傳回儲存於 <see cref="T:System.Data.DataSet" /> 的資料之 XML 表示。</summary>
      <returns>字串，儲存於 <see cref="T:System.Data.DataSet" /> 的資料表示。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetXmlSchema">
      <summary>為儲存於 <see cref="T:System.Data.DataSet" /> 的資料之 XML 表示，傳回 XML 結構描述。</summary>
      <returns>字串，為儲存於 <see cref="T:System.Data.DataSet" /> 的資料之 XML 表示的 XML 結構描述。</returns>
    </member>
    <member name="M:System.Data.DataSet.HasChanges">
      <summary>取得值，表示 <see cref="T:System.Data.DataSet" /> 是否包含變更，包括加入、刪除或修改的資料列。</summary>
      <returns>若 <see cref="T:System.Data.DataSet" /> 包含變更，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.HasChanges(System.Data.DataRowState)">
      <summary>取得值，指出 <see cref="T:System.Data.DataSet" /> 是否包含變更，包括加入、刪除或修改的資料列 (由 <see cref="T:System.Data.DataRowState" /> 篩選)。</summary>
      <param name="rowStates">其中一個 <see cref="T:System.Data.DataRowState" /> 值。</param>
      <returns>若 <see cref="T:System.Data.DataSet" /> 包含變更，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.HasErrors">
      <summary>取得值，指出這個 <see cref="T:System.Data.DataTable" /> 內的 <see cref="T:System.Data.DataSet" /> 物件中是否有任何一個有錯誤。</summary>
      <returns>
        <see langword="true" /> 是否有任何資料表包含錯誤;否則，<see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])">
      <summary>從指定的 <see cref="T:System.IO.Stream" />，將 XML 結構描述套用至 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="stream">要從其中讀取結構描述的來源 <see langword="Stream" />。</param>
      <param name="nsArray">要從結構描述 (Schema) 推斷中排除之命名空間統一資源識別元 (URI) 字串的陣列。</param>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])">
      <summary>從指定的 <see cref="T:System.IO.TextReader" />，將 XML 結構描述套用至 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">要從其中讀取結構描述的來源 <see langword="TextReader" />。</param>
      <param name="nsArray">要從結構描述 (Schema) 推斷中排除之命名空間統一資源識別元 (URI) 字串的陣列。</param>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])">
      <summary>從指定的檔案，將 XML 結構描述套用至 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="fileName">要從中讀取結構描述的來源檔案名稱 (包含路徑)。</param>
      <param name="nsArray">要從結構描述 (Schema) 推斷中排除之命名空間統一資源識別元 (URI) 字串的陣列。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 並不是設定為 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])">
      <summary>從指定的 <see cref="T:System.Xml.XmlReader" />，將 XML 結構描述套用至 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">要從其中讀取結構描述的來源 <see langword="XMLReader" />。</param>
      <param name="nsArray">要從結構描述 (Schema) 推斷中排除之命名空間統一資源識別元 (URI) 字串的陣列。</param>
    </member>
    <member name="E:System.Data.DataSet.Initialized">
      <summary>發生於 <see cref="T:System.Data.DataSet" /> 初始化之後。</summary>
    </member>
    <member name="M:System.Data.DataSet.InitializeDerivedDataSet">
      <summary>從二進位或 XML 資料流還原序列化資料集的所有資料表資料。</summary>
    </member>
    <member name="M:System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>檢查 <see langword="DataSet" /> 之序列化表示的格式。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件。</param>
      <returns>如果指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 表示以二進位格式序列化的 <see langword="true" />，則為 <see langword="DataSet" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.IsInitialized">
      <summary>取得值，指出 <see cref="T:System.Data.DataSet" /> 是否已初始化。</summary>
      <returns>
        <see langword="true" /> 表示元件已完成初始化，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])">
      <summary>使用所提供的 <see cref="T:System.Data.DataSet" />，以資料來源的值，填入 <see cref="T:System.Data.IDataReader" />，使用 <see cref="T:System.Data.DataTable" /> 執行個體的陣列，以提供結構描述和命名空間資訊。</summary>
      <param name="reader">
        <see cref="T:System.Data.IDataReader" />，提供一個或多個結果集。</param>
      <param name="loadOption">來自 <see cref="T:System.Data.LoadOption" /> 列舉的值，表示已經在 <see cref="T:System.Data.DataTable" /> 之內 <see cref="T:System.Data.DataSet" /> 執行個體中的資料列如何與共用相同主索引鍵的傳入資料列結合。</param>
      <param name="tables">
        <see cref="T:System.Data.DataTable" /> 執行個體的陣列，<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> 方法從中擷取名稱和命名空間資訊。 這些資料表的每一個都必須為這個 <see cref="T:System.Data.DataTableCollection" /> 所包含 <see cref="T:System.Data.DataSet" /> 的成員。</param>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])">
      <summary>使用所提供的 <see cref="T:System.Data.DataSet" />，以資料來源的值，填入 <see cref="T:System.Data.IDataReader" />，使用 <see cref="T:System.Data.DataTable" /> 執行個體的陣列，以提供結構描述和命名空間資訊。</summary>
      <param name="reader">
        <see cref="T:System.Data.IDataReader" />，提供一個或多個結果集。</param>
      <param name="loadOption">來自 <see cref="T:System.Data.LoadOption" /> 列舉的值，表示已經在 <see cref="T:System.Data.DataTable" /> 之內 <see cref="T:System.Data.DataSet" /> 執行個體中的資料列如何與共用相同主索引鍵的傳入資料列結合。</param>
      <param name="errorHandler">載入資料時發生錯誤，要呼叫的 <see cref="T:System.Data.FillErrorEventHandler" /> 委派。</param>
      <param name="tables">
        <see cref="T:System.Data.DataTable" /> 執行個體的陣列，<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> 方法從中擷取名稱和命名空間資訊。</param>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])">
      <summary>使用所提供的 <see cref="T:System.Data.DataSet" />，以資料來源的值填入 <see cref="T:System.Data.IDataReader" />，使用字串的陣列來提供 <see langword="DataSet" /> 之內的資料表名稱。</summary>
      <param name="reader">
        <see cref="T:System.Data.IDataReader" />，提供一個或多個結果集。</param>
      <param name="loadOption">來自 <see cref="T:System.Data.LoadOption" /> 列舉的值，表示已經在 <see cref="T:System.Data.DataTable" /> 之內 <see langword="DataSet" /> 執行個體中的資料列如何與共用相同主索引鍵的傳入資料列結合。</param>
      <param name="tables">字串的陣列，<see langword="Load" /> 方法從中擷取資料表名稱資訊。</param>
    </member>
    <member name="P:System.Data.DataSet.Locale">
      <summary>取得或設定用來在資料表中比較字串的地區設定 (Locale) 資訊。</summary>
      <returns>
        <see cref="T:System.Globalization.CultureInfo" />，包含使用者電腦地區設定的資料。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataRow[])">
      <summary>將 <see cref="T:System.Data.DataRow" /> 物件的陣列合併到目前的 <see cref="T:System.Data.DataSet" /> 中。</summary>
      <param name="rows">
        <see langword="DataRow" /> 物件的陣列，將合併至 <see langword="DataSet" />。</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)">
      <summary>將 <see cref="T:System.Data.DataRow" /> 物件的陣列合併到目前的 <see cref="T:System.Data.DataSet" /> 中，根據給定參數保留或忽略 <see langword="DataSet" /> 中的變更，並處理不相容的結構描述。</summary>
      <param name="rows">
        <see cref="T:System.Data.DataRow" /> 物件的陣列，將合併至 <see langword="DataSet" />。</param>
      <param name="preserveChanges">若要保留 <see langword="DataSet" /> 中的變更，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <param name="missingSchemaAction">其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet)">
      <summary>將指定的 <see cref="T:System.Data.DataSet" /> 及其結構描述合併到目前的 <see langword="DataSet" /> 中。</summary>
      <param name="dataSet">
        <see langword="DataSet" />，其資料及結構描述將被合併。</param>
      <exception cref="T:System.Data.ConstraintException">一個或多個條件約束無法啟用。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)">
      <summary>將指定的 <see cref="T:System.Data.DataSet" /> 及其結構描述合併到目前的 <see langword="DataSet" /> 中，根據給定參數保留或忽略這個 <see langword="DataSet" /> 中的任何變更。</summary>
      <param name="dataSet">
        <see langword="DataSet" />，其資料及結構描述將被合併。</param>
      <param name="preserveChanges">若要保留目前 <see langword="DataSet" /> 中的變更，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>將指定的 <see cref="T:System.Data.DataSet" /> 及其結構描述與目前的 <see langword="DataSet" /> 合併，根據給定參數保留或忽略目前 <see langword="DataSet" /> 中的變更，並處理不相容的結構描述。</summary>
      <param name="dataSet">
        <see langword="DataSet" />，其資料及結構描述將被合併。</param>
      <param name="preserveChanges">若要保留目前 <see langword="DataSet" /> 中的變更，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <param name="missingSchemaAction">其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataTable)">
      <summary>將指定的 <see cref="T:System.Data.DataTable" /> 及其結構描述合併到目前的 <see cref="T:System.Data.DataSet" /> 中。</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" />，其資料及結構描述將被合併。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>將指定的 <see cref="T:System.Data.DataTable" /> 及其結構描述合併到目前的 <see langword="DataSet" />，根據給定引數保留或忽略 <see langword="DataSet" /> 中的變更，並處理不相容的結構描述。</summary>
      <param name="table">
        <see langword="DataTable" />，其資料及結構描述將被合併。</param>
      <param name="preserveChanges">其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。</param>
      <param name="missingSchemaAction">若要保留 <see langword="DataSet" /> 中的變更，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="E:System.Data.DataSet.MergeFailed">
      <summary>當目標和來源 <see cref="T:System.Data.DataRow" /> 有相同的主索引鍵值，且 <see cref="P:System.Data.DataSet.EnforceConstraints" /> 設定為 True 時發生。</summary>
    </member>
    <member name="P:System.Data.DataSet.Namespace">
      <summary>取得或設定 <see cref="T:System.Data.DataSet" /> 的命名空間。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 的命名空間。</returns>
      <exception cref="T:System.ArgumentException">命名空間已經有資料。</exception>
    </member>
    <member name="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>引發 <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> 事件。</summary>
      <param name="pcevent">
        <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)">
      <summary>發生於從 <see cref="T:System.Data.DataRelation" /> 移除 <see cref="T:System.Data.DataTable" /> 時。</summary>
      <param name="relation">正在移除的 <see cref="T:System.Data.DataRelation" />。</param>
    </member>
    <member name="M:System.Data.DataSet.OnRemoveTable(System.Data.DataTable)">
      <summary>發生於從 <see cref="T:System.Data.DataTable" /> 移除 <see cref="T:System.Data.DataSet" /> 時。</summary>
      <param name="table">正在移除的 <see cref="T:System.Data.DataTable" />。</param>
    </member>
    <member name="P:System.Data.DataSet.Prefix">
      <summary>取得或設定建立 <see cref="T:System.Data.DataSet" /> 命名空間別名的 XML 前置詞。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 命名空間的 XML 前置詞。</returns>
    </member>
    <member name="M:System.Data.DataSet.RaisePropertyChanging(System.String)">
      <summary>傳送一個指定的 <see cref="T:System.Data.DataSet" /> 屬性即將變更的告知。</summary>
      <param name="name">將要變更的屬性名稱。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.Stream)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" />，將 XML 結構描述和資料讀入 <see cref="T:System.IO.Stream" />。</summary>
      <param name="stream">衍生自 <see cref="T:System.IO.Stream" /> 的物件。</param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" />，用來讀取資料。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.IO.Stream" />，將 XML 結構描述和資料讀入 <see cref="T:System.Data.XmlReadMode" />。</summary>
      <param name="stream">要讀取的來源 <see cref="T:System.IO.Stream" />。</param>
      <param name="mode">其中一個 <see cref="T:System.Data.XmlReadMode" /> 值。</param>
      <returns>
        <see langword="XmlReadMode" />，用來讀取資料。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.TextReader)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" />，將 XML 結構描述和資料讀入 <see cref="T:System.IO.TextReader" />。</summary>
      <param name="reader">要從中讀取結構描述和資料的 <see langword="TextReader" />。</param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" />，用來讀取資料。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.IO.TextReader" />，將 XML 結構描述和資料讀入 <see cref="T:System.Data.XmlReadMode" />。</summary>
      <param name="reader">要讀取的來源 <see cref="T:System.IO.TextReader" />。</param>
      <param name="mode">其中一個 <see cref="T:System.Data.XmlReadMode" /> 值。</param>
      <returns>
        <see langword="XmlReadMode" />，用來讀取資料。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.String)">
      <summary>使用指定的檔案，將 XML 結構描述和資料讀入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="fileName">要讀取的檔案名稱 (包括路徑)。</param>
      <returns>
        <see langword="XmlReadMode" />，用來讀取資料。</returns>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 並不是設定為 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)">
      <summary>使用指定的檔案和 <see cref="T:System.Data.DataSet" />，將 XML 結構描述和資料讀入 <see cref="T:System.Data.XmlReadMode" />。</summary>
      <param name="fileName">要讀取的檔案名稱 (包括路徑)。</param>
      <param name="mode">其中一個 <see cref="T:System.Data.XmlReadMode" /> 值。</param>
      <returns>
        <see langword="XmlReadMode" />，用來讀取資料。</returns>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 並不是設定為 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" />，將 XML 結構描述和資料讀入 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="reader">要讀取的來源 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns>
        <see langword="XmlReadMode" />，用來讀取資料。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Xml.XmlReader" />，將 XML 結構描述和資料讀入 <see cref="T:System.Data.XmlReadMode" />。</summary>
      <param name="reader">要讀取的來源 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="mode">其中一個 <see cref="T:System.Data.XmlReadMode" /> 值。</param>
      <returns>
        <see langword="XmlReadMode" />，用來讀取資料。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)">
      <summary>從指定的 <see cref="T:System.IO.Stream" />，將 XML 結構描述讀入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="stream">要讀取的來源 <see cref="T:System.IO.Stream" />。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)">
      <summary>從指定的 <see cref="T:System.IO.TextReader" />，將 XML 結構描述讀入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">要讀取的來源 <see cref="T:System.IO.TextReader" />。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.String)">
      <summary>從指定的檔案，將 XML 結構描述讀入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="fileName">要讀取的來源檔案名稱 (包括路徑)。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 並不是設定為 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)">
      <summary>從指定的 <see cref="T:System.Xml.XmlReader" />，將 XML 結構描述讀入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">要讀取的來源 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)">
      <summary>忽略屬性並傳回空白資料集。</summary>
      <param name="reader">指定的 XML 讀取器。</param>
    </member>
    <member name="M:System.Data.DataSet.RejectChanges">
      <summary>復原從建立 <see cref="T:System.Data.DataSet" /> 物件或前一次呼叫 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以來，對該物件做的所有變更。</summary>
    </member>
    <member name="P:System.Data.DataSet.Relations">
      <summary>取得關聯的集合，這些關聯會連結資料表，並允許從父資料表巡覽至子資料表。</summary>
      <returns>包含 <see cref="T:System.Data.DataRelationCollection" /> 物件集合的 <see cref="T:System.Data.DataRelation" />。 如果沒有任何 <see cref="T:System.Data.DataRelation" /> 物件存在，則會傳回空的集合。</returns>
    </member>
    <member name="P:System.Data.DataSet.RemotingFormat">
      <summary>取得或設定遠端作業中使用之 <see cref="T:System.Data.SerializationFormat" /> 的 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>
        <see cref="T:System.Data.SerializationFormat" /> 物件。</returns>
    </member>
    <member name="M:System.Data.DataSet.Reset">
      <summary>清除所有資料表，並從 <see cref="T:System.Data.DataSet" /> 中移除所有關聯、外部條件約束和資料表。 子類別應該覆寫 <see cref="M:System.Data.DataSet.Reset" /> 以還原 <see cref="T:System.Data.DataSet" /> 到它的原始狀態。</summary>
    </member>
    <member name="P:System.Data.DataSet.SchemaSerializationMode">
      <summary>取得或設定 <see cref="T:System.Data.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>
        <see cref="T:System.Data.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ShouldSerializeRelations">
      <summary>取得值，表示是否應該保存 <see cref="P:System.Data.DataSet.Relations" /> 屬性。</summary>
      <returns>如果屬性值已經從其預設值變更，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ShouldSerializeTables">
      <summary>取得值，表示是否應該保存 <see cref="P:System.Data.DataSet.Tables" /> 屬性。</summary>
      <returns>如果屬性值已經從其預設值變更，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.Site">
      <summary>取得或設定 <see cref="T:System.ComponentModel.ISite" /> 的 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" /> 的 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.System#ComponentModel#IListSource#GetList">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IListSource.GetList" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IListSource.GetList" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="P:System.Data.DataSet.Tables">
      <summary>取得包含在 <see cref="T:System.Data.DataSet" /> 中的資料表的集合。</summary>
      <returns>
        <see cref="T:System.Data.DataTableCollection" />，這個 <see cref="T:System.Data.DataSet" /> 所包含的集合。 如果沒有任何 <see cref="T:System.Data.DataTable" /> 物件存在，則會傳回空的集合。</returns>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.Stream)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" />，寫入 <see cref="T:System.IO.Stream" /> 的目前資料。</summary>
      <param name="stream">用來寫入檔案的 <see cref="T:System.IO.Stream" /> 物件。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.IO.Stream" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。</summary>
      <param name="stream">用來寫入檔案的 <see cref="T:System.IO.Stream" /> 物件。</param>
      <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.TextWriter)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" />，寫入 <see cref="T:System.IO.TextWriter" /> 的目前資料。</summary>
      <param name="writer">用來寫入的 <see cref="T:System.IO.TextWriter" /> 物件。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.IO.TextWriter" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。</summary>
      <param name="writer">用來寫入文件的 <see cref="T:System.IO.TextWriter" /> 物件。</param>
      <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.String)">
      <summary>將 <see cref="T:System.Data.DataSet" /> 的目前資料寫入指定的檔案。</summary>
      <param name="fileName">要寫入的目的檔案名稱 (包括路徑)。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 並不是設定為 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料 (並選擇性寫入結構描述) 至指定的檔案。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。</summary>
      <param name="fileName">要寫入的目的檔案名稱 (包括路徑)。</param>
      <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 並不是設定為 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)">
      <summary>將 <see cref="T:System.Data.DataSet" /> 的目前資料寫入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要用來寫入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Xml.XmlWriter" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。</summary>
      <param name="writer">要用來寫入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)">
      <summary>將 <see cref="T:System.Data.DataSet" /> 結構做為 XML 結構描述寫入指定的 <see cref="T:System.IO.Stream" /> 物件。</summary>
      <param name="stream">用來寫入檔案的 <see cref="T:System.IO.Stream" /> 物件。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})">
      <summary>將 <see cref="T:System.Data.DataSet" /> 結構做為 XML 結構描述寫入指定的 <see cref="T:System.IO.Stream" /> 物件。</summary>
      <param name="stream">要寫入的目標 <see cref="T:System.IO.Stream" /> 物件。</param>
      <param name="multipleTargetConverter">用於將 <see cref="T:System.Type" /> 轉換成字串的委派。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)">
      <summary>將 <see cref="T:System.Data.DataSet" /> 結構做為 XML 結構描述寫入指定的 <see cref="T:System.IO.TextWriter" /> 物件。</summary>
      <param name="writer">用來寫入的 <see cref="T:System.IO.TextWriter" /> 物件。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})">
      <summary>將 <see cref="T:System.Data.DataSet" /> 結構當做 XML 結構描述寫入至指定的 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer">要寫入的目標 <see cref="T:System.IO.TextWriter" /> 物件。</param>
      <param name="multipleTargetConverter">用於將 <see cref="T:System.Type" /> 轉換成字串的委派。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.String)">
      <summary>將 <see cref="T:System.Data.DataSet" /> 結構做為 XML 結構描述寫入檔案。</summary>
      <param name="fileName">要寫入的目的檔案名稱 (包括路徑)。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 並不是設定為 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})">
      <summary>將 <see cref="T:System.Data.DataSet" /> 結構做為 XML 結構描述寫入檔案。</summary>
      <param name="fileName">要寫入的檔案名稱。</param>
      <param name="multipleTargetConverter">用於將 <see cref="T:System.Type" /> 轉換成字串的委派。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)">
      <summary>將 <see cref="T:System.Data.DataSet" /> 結構做為 XML 結構描述寫入 <see cref="T:System.Xml.XmlWriter" /> 物件。</summary>
      <param name="writer">要寫入的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})">
      <summary>將 <see cref="T:System.Data.DataSet" /> 結構當做 XML 結構描述寫入至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要寫入的目標 <see cref="T:System.Xml.XmlWriter" /> 物件。</param>
      <param name="multipleTargetConverter">用於將 <see cref="T:System.Type" /> 轉換成字串的委派。</param>
    </member>
    <member name="T:System.Data.DataSetDateTime">
      <summary>描述 <see cref="T:System.DateTime" /> 中 <see cref="T:System.Data.DataSet" /> 資料行的序列化格式。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Local">
      <summary>
        <see langword="DateTime" /> 一定都是以 Local 存放。 如果 <see cref="F:System.Data.DataSetDateTime.Utc" /> 或 <see cref="F:System.Data.DataSetDateTime.Unspecified" /> 是指定給這個模式中的資料行，它是先轉換成 Local。 這個模式中的序列化一定都是以 Local 執行。 在序列化過程中有位移 (Offset)。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Unspecified">
      <summary>
        <see langword="DateTime" /> 一定都是以 Unspecified 存放。 如果 <see cref="F:System.Data.DataSetDateTime.Local" /> 或 <see cref="F:System.Data.DataSetDateTime.Utc" /> 是指定給這個模式中的資料行，它是先轉換成 <see cref="F:System.Data.DataSetDateTime.Unspecified" />。 這個模式中的序列化不會產生位移。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.UnspecifiedLocal">
      <summary>
        <see langword="DateTime" /> 以 Unspecified 存放。 如果 <see cref="F:System.Data.DataSetDateTime.Local" /> 或 <see cref="F:System.Data.DataSetDateTime.Utc" /> 是指定給這個模式中的資料行，它是先轉換成 <see cref="F:System.Data.DataSetDateTime.Unspecified" />。 這個模式中的序列化會產生位移。 這是預設的行為，而且是回溯相容。 這個選項在儲存體中應該視為 Unspecified，但是在序列化過程中，套用類似於 <see cref="F:System.Data.DataSetDateTime.Local" /> 的位移。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Utc">
      <summary>
        <see langword="DateTime" /> 是以 Universal Coordinated Time (UTC) 時間存放。 如果 <see cref="F:System.Data.DataSetDateTime.Local" /> 或 <see cref="F:System.Data.DataSetDateTime.Unspecified" /> 是指定給這個模式中的資料行，它是先轉換成 <see langword="Utc" /> 格式。 這個模式中的序列化一定都是以 <see langword="Utc" /> 執行。 在序列化過程中沒有位移。</summary>
    </member>
    <member name="T:System.Data.DataSysDescriptionAttribute">
      <summary>使用描述來標記屬性、事件或擴充項 (Extender)。 視覺化設計工具在參考成員時可以顯示這個描述。</summary>
    </member>
    <member name="M:System.Data.DataSysDescriptionAttribute.#ctor(System.String)">
      <summary>使用指定的描述字串來初始化 <see cref="T:System.Data.DataSysDescriptionAttribute" /> 類別的新執行個體。</summary>
      <param name="description">描述字串。</param>
    </member>
    <member name="P:System.Data.DataSysDescriptionAttribute.Description">
      <summary>為描述取得文字。</summary>
      <returns>描述字串。</returns>
    </member>
    <member name="T:System.Data.DataTable">
      <summary>表示記憶體中資料的一個資料表。</summary>
    </member>
    <member name="M:System.Data.DataTable.#ctor">
      <summary>不使用引數來初始化 <see cref="T:System.Data.DataTable" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Data.DataTable" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需的資料。</param>
      <param name="context">指定的序列化資料流的來源和目的端。</param>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.String)">
      <summary>使用指定的資料表名稱，初始化 <see cref="T:System.Data.DataTable" /> 類別的新執行個體。</summary>
      <param name="tableName">要提供資料表的名稱。 如果 <paramref name="tableName" /> 是 <see langword="null" /> 或空字串，則會在加入至 <see cref="T:System.Data.DataTableCollection" /> 時提供預設名稱。</param>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.String,System.String)">
      <summary>使用指定的資料表名稱和命名空間，初始化 <see cref="T:System.Data.DataTable" /> 類別的新執行個體。</summary>
      <param name="tableName">要提供資料表的名稱。 如果 <paramref name="tableName" /> 是 <see langword="null" /> 或空字串，則會在加入至 <see cref="T:System.Data.DataTableCollection" /> 時提供預設名稱。</param>
      <param name="tableNamespace">儲存於 <see langword="DataTable" /> 中資料之 XML 表示的命名空間。</param>
    </member>
    <member name="M:System.Data.DataTable.AcceptChanges">
      <summary>認可自前一次呼叫 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以來對這個資料表所做的所有變更。</summary>
    </member>
    <member name="M:System.Data.DataTable.BeginInit">
      <summary>開始對表單或另一個元件所使用的 <see cref="T:System.Data.DataTable" /> 進行初始化作業。 初始化發生於執行階段。</summary>
    </member>
    <member name="M:System.Data.DataTable.BeginLoadData">
      <summary>載入資料時關閉告知、索引維護和條件約束。</summary>
    </member>
    <member name="P:System.Data.DataTable.CaseSensitive">
      <summary>指示字串比較在資料表中是否區分大小寫。</summary>
      <returns>如果比較區分大小寫，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值會設定為父 <see cref="T:System.Data.DataSet" /> 物件的 <see cref="P:System.Data.DataSet.CaseSensitive" /> 屬性，或者，如果 <see cref="T:System.Data.DataTable" /> 是獨自建立而無關 <see cref="T:System.Data.DataSet" /> 時，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.ChildRelations">
      <summary>為這個 <see cref="T:System.Data.DataTable" /> 取得子關聯的集合。</summary>
      <returns>
        <see cref="T:System.Data.DataRelationCollection" />，其中包含資料表的子關聯。 如果沒有任何 <see cref="T:System.Data.DataRelation" /> 物件存在，則會傳回空的集合。</returns>
    </member>
    <member name="M:System.Data.DataTable.Clear">
      <summary>清除所有資料的 <see cref="T:System.Data.DataTable" />。</summary>
    </member>
    <member name="M:System.Data.DataTable.Clone">
      <summary>複製 (Clone) <see cref="T:System.Data.DataTable" /> 的結構，包括所有 <see cref="T:System.Data.DataTable" /> 結構描述和條件約束。</summary>
      <returns>新的 <see cref="T:System.Data.DataTable" />，具有與目前 <see cref="T:System.Data.DataTable" /> 相同的結構描述。</returns>
    </member>
    <member name="E:System.Data.DataTable.ColumnChanged">
      <summary>發生在值已經為 <see cref="T:System.Data.DataColumn" /> 中指定的 <see cref="T:System.Data.DataRow" /> 變更之後。</summary>
    </member>
    <member name="E:System.Data.DataTable.ColumnChanging">
      <summary>發生在值正在為 <see cref="T:System.Data.DataColumn" /> 中指定的 <see cref="T:System.Data.DataRow" /> 變更之後。</summary>
    </member>
    <member name="P:System.Data.DataTable.Columns">
      <summary>取得屬於這個資料表的資料行集合。</summary>
      <returns>
        <see cref="T:System.Data.DataColumnCollection" />，其中包含資料表的 <see cref="T:System.Data.DataColumn" /> 物件集合。 如果沒有任何 <see cref="T:System.Data.DataColumn" /> 物件存在，則會傳回空的集合。</returns>
    </member>
    <member name="M:System.Data.DataTable.Compute(System.String,System.String)">
      <summary>計算在傳遞篩選準則的目前資料列上的指定運算式。</summary>
      <param name="expression">要計算的運算式。</param>
      <param name="filter">要限制在運算式中評估之資料列的篩選條件。</param>
      <returns>
        <see cref="T:System.Object" />，設定為計算的結果。 若運算式評估為 Null，傳回值會是 <see cref="F:System.DBNull.Value" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.Constraints">
      <summary>取得這個資料表所維護的條件約束 (Constraint) 集合。</summary>
      <returns>
        <see cref="T:System.Data.ConstraintCollection" />，其中包含資料表的 <see cref="T:System.Data.Constraint" /> 物件集合。 如果沒有任何 <see cref="T:System.Data.Constraint" /> 物件存在，則會傳回空的集合。</returns>
    </member>
    <member name="M:System.Data.DataTable.Copy">
      <summary>複製這個 <see cref="T:System.Data.DataTable" /> 的結構和資料。</summary>
      <returns>新的 <see cref="T:System.Data.DataTable" />，具有與這個 <see cref="T:System.Data.DataTable" /> 相同的結構 (資料表結構描述和條件約束) 和資料。
如果這些類別已形成子類別，則複本也會屬於相同的子類別。
<see cref="M:System.Data.DataTable.Copy" /> 會建立與原始 <see cref="T:System.Data.DataTable" /> 具有相同結構和資料的新 <see cref="T:System.Data.DataTable" />。 若要將結構複製到新的 <see cref="T:System.Data.DataTable" />，但是不複製資料，請使用 <see cref="M:System.Data.DataTable.Clone" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.CreateDataReader">
      <summary>傳回對應於這個 <see cref="T:System.Data.DataTableReader" /> 之中資料的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>
        <see cref="T:System.Data.DataTableReader" />，其中包含一個結果集，對應於來源 <see cref="T:System.Data.DataTable" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.DataTable.CreateInstance">
      <summary>建立 <see cref="T:System.Data.DataTable" /> 的新執行個體。</summary>
      <returns>新的運算式。</returns>
    </member>
    <member name="P:System.Data.DataTable.DataSet">
      <summary>取得這個資料表所屬的 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>這個資料表所屬的 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.DefaultView">
      <summary>取得可能含有已篩選檢視表或游標位置的資料表自訂檢視表。</summary>
      <returns>與 <see cref="T:System.Data.DataView" /> 關聯的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.DisplayExpression">
      <summary>取得或設定會傳回用來在使用者介面中表示這個資料表之值的運算式。 <see langword="DisplayExpression" /> 屬性可讓您將這個資料表的名稱顯示在使用者介面中。</summary>
      <returns>一個顯示字串。</returns>
    </member>
    <member name="M:System.Data.DataTable.EndInit">
      <summary>結束對表單或另一個元件所使用的 <see cref="T:System.Data.DataTable" /> 進行初始化作業。 初始化發生於執行階段。</summary>
    </member>
    <member name="M:System.Data.DataTable.EndLoadData">
      <summary>載入資料後開啟告知、索引維護和條件約束。</summary>
    </member>
    <member name="P:System.Data.DataTable.ExtendedProperties">
      <summary>取得自訂使用者資訊的集合。</summary>
      <returns>
        <see cref="T:System.Data.PropertyCollection" />，含有自訂使用者資訊。</returns>
    </member>
    <member name="F:System.Data.DataTable.fInitInProgress">
      <summary>檢查初始化是否仍在進行中。 初始化發生於執行階段。</summary>
    </member>
    <member name="M:System.Data.DataTable.GetChanges">
      <summary>取得 <see cref="T:System.Data.DataTable" /> (包含從載入它或前一次呼叫 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以來所做的所有變更) 的複本。</summary>
      <returns>這個 <see cref="T:System.Data.DataTable" /> 所產生變更的複本，如果沒有變更，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)">
      <summary>取得 <see cref="T:System.Data.DataTable" /> (包含從前一次載入它或呼叫 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以來所做的所有變更) 的複本 (由 <see cref="T:System.Data.DataRowState" /> 篩選)。</summary>
      <param name="rowStates">其中一個 <see cref="T:System.Data.DataRowState" /> 值。</param>
      <returns>篩選過的 <see cref="T:System.Data.DataTable" /> 複本，可以在其上執行動作，稍後會在 <see cref="T:System.Data.DataTable" /> 中使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 合併回來。 如果找不到所需的 <see cref="T:System.Data.DataRowState" /> 的資料列，則方法會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>這個方法會傳回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 執行個體，此執行個體包含描述 Web 服務之 <see cref="T:System.Data.DataTable" /> 的 Web 服務描述語言 (WSDL)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 執行個體。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetErrors">
      <summary>取得包含錯誤之 <see cref="T:System.Data.DataRow" /> 物件的陣列。</summary>
      <returns>具有錯誤之 <see cref="T:System.Data.DataRow" /> 物件的陣列。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以序列化 <see cref="T:System.Data.DataTable" /> 所需的資料，填入序列化資訊物件。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，其保留與 <see cref="T:System.Data.DataTable" /> 關聯的序列化資料。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件，其包含與 <see cref="T:System.Data.DataTable" /> 關聯之序列化資料流的來源和目的端。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 參數為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</exception>
    </member>
    <member name="M:System.Data.DataTable.GetRowType">
      <summary>取得資料列型別。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 的類型。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetSchema">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" />，描述物件的 XML 表示，該物件由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法產生，由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法取用。</returns>
    </member>
    <member name="P:System.Data.DataTable.HasErrors">
      <summary>取得值，指出資料表所屬 <see cref="T:System.Data.DataSet" /> 的任何資料表中的任何資料列是否存在錯誤。</summary>
      <returns>
        <see langword="true" />，表示存在錯誤；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
      <summary>將 <see cref="T:System.Data.DataRow" /> 複製至 <see cref="T:System.Data.DataTable" />，保留任何屬性設定，以及原始值和目前值。</summary>
      <param name="row">要匯入的 <see cref="T:System.Data.DataRow" />。</param>
    </member>
    <member name="E:System.Data.DataTable.Initialized">
      <summary>發生於 <see cref="T:System.Data.DataTable" /> 初始化之後。</summary>
    </member>
    <member name="P:System.Data.DataTable.IsInitialized">
      <summary>取得值，指出 <see cref="T:System.Data.DataTable" /> 是否已初始化。</summary>
      <returns>
        <see langword="true" /> 表示元件已完成初始化，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader)">
      <summary>使用所提供的 <see cref="T:System.Data.DataTable" />，用資料來源的值填滿 <see cref="T:System.Data.IDataReader" />。 如果 <see cref="T:System.Data.DataTable" /> 已經包含資料列，從資料來源傳入的資料會與現有的資料列合併。</summary>
      <param name="reader">
        <see cref="T:System.Data.IDataReader" />，提供結果集。</param>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
      <summary>使用所提供的 <see cref="T:System.Data.DataTable" />，用資料來源的值填滿 <see cref="T:System.Data.IDataReader" />。 如果 <see langword="DataTable" /> 已經包含資料列，從資料來源傳入的資料會根據 <paramref name="loadOption" /> 參數的值，與現有的資料列合併。</summary>
      <param name="reader">
        <see cref="T:System.Data.IDataReader" />，提供一個或多個結果集。</param>
      <param name="loadOption">來自 <see cref="T:System.Data.LoadOption" /> 列舉的值，指出已經在 <see cref="T:System.Data.DataTable" /> 中的資料列如何與共用相同主索引鍵的傳入資料列結合。</param>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
      <summary>使用所提供的 <see cref="T:System.Data.DataTable" />，以資料來源的值填滿 <see cref="T:System.Data.IDataReader" />，使用錯誤處理委派。</summary>
      <param name="reader">
        <see cref="T:System.Data.IDataReader" />，提供結果集。</param>
      <param name="loadOption">來自 <see cref="T:System.Data.LoadOption" /> 列舉的值，指出已經在 <see cref="T:System.Data.DataTable" /> 中的資料列如何與共用相同主索引鍵的傳入資料列結合。</param>
      <param name="errorHandler">載入資料時發生錯誤，要呼叫的 <see cref="T:System.Data.FillErrorEventHandler" /> 委派。</param>
    </member>
    <member name="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
      <summary>尋找並更新特定資料列。 如果找不到符合的資料列，則使用指定值來建立新的資料列。</summary>
      <param name="values">用來建立新資料列的值陣列。</param>
      <param name="fAcceptChanges">若要接受變更，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>新的 <see cref="T:System.Data.DataRow" />。</returns>
      <exception cref="T:System.ArgumentException">陣列大於資料表中的資料行數目。</exception>
      <exception cref="T:System.InvalidCastException">數值不符合其個別的資料行型別。</exception>
      <exception cref="T:System.Data.ConstraintException">加入資料列會使條件約束失效。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">嘗試將 Null 置於 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 為 False 的資料行中。</exception>
    </member>
    <member name="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
      <summary>尋找並更新特定資料列。 如果找不到符合的資料列，則使用指定值來建立新的資料列。</summary>
      <param name="values">用來建立新資料列的值陣列。</param>
      <param name="loadOption">用來判斷陣列值如何套用至現有資料列中對應的值。</param>
      <returns>新的 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.Locale">
      <summary>取得或設定用來在資料表中比較字串的地區設定 (Locale) 資訊。</summary>
      <returns>
        <see cref="T:System.Globalization.CultureInfo" />，包含使用者電腦地區設定的資料。 預設值為 <see cref="T:System.Data.DataSet" /> 所屬的 <see cref="T:System.Globalization.CultureInfo" /> 物件的 <see cref="P:System.Data.DataSet.Locale" /> (由 <see cref="T:System.Data.DataTable" /> 屬性傳回)，如果資料表不屬於 <see cref="T:System.Data.DataSet" />，則預設值是目前系統 <see cref="T:System.Globalization.CultureInfo" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable)">
      <summary>將指定的 <see cref="T:System.Data.DataTable" /> 與目前的 <see cref="T:System.Data.DataTable" /> 合併。</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" />，要與目前的 <see cref="T:System.Data.DataTable" /> 合併。</param>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
      <summary>合併指定的 <see cref="T:System.Data.DataTable" /> 與目前的 <see langword="DataTable" />，指出是否保留目前 <see langword="DataTable" /> 中的變更。</summary>
      <param name="table">
        <see langword="DataTable" />，要與目前的 <see langword="DataTable" /> 合併。</param>
      <param name="preserveChanges">若要保留目前 <see langword="true" /> 中的變更，則為 <see langword="DataTable" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>合併指定的 <see cref="T:System.Data.DataTable" /> 與目前的 <see langword="DataTable" />，指出是否保留變更，以及如何處理目前在 <see langword="DataTable" /> 中缺少的結構描述。</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" />，要與目前的 <see cref="T:System.Data.DataTable" /> 合併。</param>
      <param name="preserveChanges">若要保留目前 <see langword="true" /> 中的變更，則為 <see cref="T:System.Data.DataTable" />，否則為 <see langword="false" />。</param>
      <param name="missingSchemaAction">其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。</param>
    </member>
    <member name="P:System.Data.DataTable.MinimumCapacity">
      <summary>取得或設定這個資料表的初始開始大小。</summary>
      <returns>這個資料表的資料列中的初始開始大小。 預設值為50。</returns>
    </member>
    <member name="P:System.Data.DataTable.Namespace">
      <summary>為在 <see cref="T:System.Data.DataTable" /> 中所儲存資料的 XML 表示取得或設定命名空間。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 的命名空間。</returns>
    </member>
    <member name="M:System.Data.DataTable.NewRow">
      <summary>使用與資料表相同的結構描述來建立新的 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" />，具有與 <see cref="T:System.Data.DataTable" /> 相同的結構描述。</returns>
    </member>
    <member name="M:System.Data.DataTable.NewRowArray(System.Int32)">
      <summary>傳回 <see cref="T:System.Data.DataRow" /> 的陣列。</summary>
      <param name="size">描述陣列大小的 <see cref="T:System.Int32" /> 值。</param>
      <returns>新陣列。</returns>
    </member>
    <member name="M:System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
      <summary>從現有的資料列建立新的資料列。</summary>
      <param name="builder">
        <see cref="T:System.Data.DataRowBuilder" /> 物件。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> 衍生類別。</returns>
    </member>
    <member name="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)">
      <summary>引發 <see cref="E:System.Data.DataTable.ColumnChanged" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.Data.DataColumnChangeEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)">
      <summary>引發 <see cref="E:System.Data.DataTable.ColumnChanging" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.Data.DataColumnChangeEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>引發 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。</summary>
      <param name="pcevent">
        <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)">
      <summary>向 <see cref="T:System.Data.DataTable" /> 通知 <see cref="T:System.Data.DataColumn" /> 正在移除。</summary>
      <param name="column">正在移除的 <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
      <summary>引發 <see cref="E:System.Data.DataTable.RowChanged" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.Data.DataRowChangeEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
      <summary>引發 <see cref="E:System.Data.DataTable.RowChanging" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.Data.DataRowChangeEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
      <summary>引發 <see cref="E:System.Data.DataTable.RowDeleted" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.Data.DataRowChangeEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
      <summary>引發 <see cref="E:System.Data.DataTable.RowDeleting" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.Data.DataRowChangeEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)">
      <summary>引發 <see cref="E:System.Data.DataTable.TableCleared" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.Data.DataTableClearEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)">
      <summary>引發 <see cref="E:System.Data.DataTable.TableClearing" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.Data.DataTableClearEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)">
      <summary>引發 <see cref="E:System.Data.DataTable.TableNewRow" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.Data.DataTableNewRowEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="P:System.Data.DataTable.ParentRelations">
      <summary>為這個 <see cref="T:System.Data.DataTable" /> 取得父關聯的集合。</summary>
      <returns>
        <see cref="T:System.Data.DataRelationCollection" />，其中包含資料表的父關聯。 如果沒有任何 <see cref="T:System.Data.DataRelation" /> 物件存在，則會傳回空的集合。</returns>
    </member>
    <member name="P:System.Data.DataTable.Prefix">
      <summary>為在 <see cref="T:System.Data.DataTable" /> 中所儲存資料的 XML 表示取得或設定命名空間。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 的前置詞。</returns>
    </member>
    <member name="P:System.Data.DataTable.PrimaryKey">
      <summary>取得或設定資料行的陣列，這些資料行是做為資料表 (Data Table) 之主索引鍵。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 物件的陣列。</returns>
      <exception cref="T:System.Data.DataException">索引鍵為外部索引鍵。</exception>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 XML 結構描述和資料讀入 <see cref="T:System.IO.Stream" />。</summary>
      <param name="stream">衍生自 <see cref="T:System.IO.Stream" /> 的物件</param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" />，用來讀取資料。</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 XML 結構描述和資料讀入 <see cref="T:System.IO.TextReader" />。</summary>
      <param name="reader">
        <see cref="T:System.IO.TextReader" />，將用來讀取資料。</param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" />，用來讀取資料。</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.String)">
      <summary>將 XML 結構描述和資料從指定的檔案讀入 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="fileName">要從中讀取資料的檔案名稱。</param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" />，用來讀取資料。</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 XML 結構描述和資料讀入 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />，將用來讀取資料。</param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" />，用來讀取資料。</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
      <summary>使用指定的資料流，將 XML 結構描述讀入 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="stream">用來讀取結構描述的資料流。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 XML 結構描述讀入 <see cref="T:System.IO.TextReader" />。</summary>
      <param name="reader">
        <see cref="T:System.IO.TextReader" />，用來讀取結構描述資訊。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.String)">
      <summary>從指定的檔案，將 XML 結構描述讀入 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="fileName">要從中讀取結構描述資訊的檔案名稱。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 XML 結構描述讀入 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />，用來讀取結構描述資訊。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)">
      <summary>從 XML 資料流讀取。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 物件。</param>
    </member>
    <member name="M:System.Data.DataTable.RejectChanges">
      <summary>復原從資料表載入以來，或前一次呼叫 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以來，對該資料表所做的所有變更。</summary>
    </member>
    <member name="P:System.Data.DataTable.RemotingFormat">
      <summary>取得或設定序列化格式。</summary>
      <returns>指定 <see langword="Binary" /> 或 <see langword="Xml" /> 序列化的 <see cref="T:System.Data.SerializationFormat" /> 列舉。</returns>
    </member>
    <member name="M:System.Data.DataTable.Reset">
      <summary>重設 <see cref="T:System.Data.DataTable" /> 為它的原始狀態。 重設會移除資料表的所有資料、索引、關聯和資料行。 如果資料集包含 DataTable，則重設資料表之後，資料表仍將是資料集的一部分。</summary>
    </member>
    <member name="E:System.Data.DataTable.RowChanged">
      <summary>成功變更 <see cref="T:System.Data.DataRow" /> 後發生。</summary>
    </member>
    <member name="E:System.Data.DataTable.RowChanging">
      <summary>發生在 <see cref="T:System.Data.DataRow" /> 正在變更時。</summary>
    </member>
    <member name="E:System.Data.DataTable.RowDeleted">
      <summary>發生在資料表中的資料列已經刪除之後。</summary>
    </member>
    <member name="E:System.Data.DataTable.RowDeleting">
      <summary>發生在資料表中的資料列將要刪除之前。</summary>
    </member>
    <member name="P:System.Data.DataTable.Rows">
      <summary>取得屬於這個資料表的資料列集合。</summary>
      <returns>
        <see cref="T:System.Data.DataRowCollection" /> (包含 <see cref="T:System.Data.DataRow" /> 物件)，否則為 Null 值 (如果 <see cref="T:System.Data.DataRow" /> 物件不存在)。</returns>
    </member>
    <member name="M:System.Data.DataTable.Select">
      <summary>取得所有 <see cref="T:System.Data.DataRow" /> 物件的陣列。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 物件的陣列。</returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String)">
      <summary>取得所有符合篩選準則之 <see cref="T:System.Data.DataRow" /> 物件的陣列。</summary>
      <param name="filterExpression">用來篩選資料列的準則。 如需如何篩選資料列的範例，請參閱 DataView RowFilter Syntax [C#] (DataView RowFilter 語法 [C#])。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> 物件的陣列。</returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String,System.String)">
      <summary>取得按照指定排序順序符合篩選條件的所有 <see cref="T:System.Data.DataRow" /> 物件之陣列。</summary>
      <param name="filterExpression">用來篩選資料列的準則。 如需如何篩選資料列的範例，請參閱 DataView RowFilter Syntax [C#] (DataView RowFilter 語法 [C#])。</param>
      <param name="sort">指定資料行和排序方向的字串。</param>
      <returns>符合篩選條件運算式的 <see cref="T:System.Data.DataRow" /> 物件之陣列。</returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
      <summary>取得符合篩選條件 (按照排序順序，並符合指定狀態) 的所有 <see cref="T:System.Data.DataRow" /> 物件之陣列。</summary>
      <param name="filterExpression">用來篩選資料列的準則。 如需如何篩選資料列的範例，請參閱 DataView RowFilter Syntax [C#] (DataView RowFilter 語法 [C#])。</param>
      <param name="sort">指定資料行和排序方向的字串。</param>
      <param name="recordStates">其中一個 <see cref="T:System.Data.DataViewRowState" /> 值。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> 物件的陣列。</returns>
    </member>
    <member name="P:System.Data.DataTable.Site">
      <summary>取得或設定 <see cref="T:System.ComponentModel.ISite" /> 的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" /> 的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</summary>
      <returns>如果集合為 <see cref="T:System.Collections.IList" /> 物件的集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.System#ComponentModel#IListSource#GetList">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IListSource.GetList" />。</summary>
      <returns>
        <see cref="T:System.Collections.IList" />，從物件繫結至資料來源。</returns>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" />，描述物件的 XML 表示，該物件由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法產生，由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法取用。</returns>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
      <param name="reader">XmlReader。</param>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
      <param name="writer">XmlWriter。</param>
    </member>
    <member name="E:System.Data.DataTable.TableCleared">
      <summary>發生在清除 <see cref="T:System.Data.DataTable" /> 之後。</summary>
    </member>
    <member name="E:System.Data.DataTable.TableClearing">
      <summary>發生於清除 <see cref="T:System.Data.DataTable" /> 時。</summary>
    </member>
    <member name="P:System.Data.DataTable.TableName">
      <summary>取得或設定 <see cref="T:System.Data.DataTable" /> 的名稱。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 的名稱。</returns>
      <exception cref="T:System.ArgumentException">
        <see langword="null" /> 或空字串 ("") 會傳入，並且這個資料表屬於集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">資料表屬於已經具有相同名稱之資料表的集合 (比較是區分大小寫的)。</exception>
    </member>
    <member name="E:System.Data.DataTable.TableNewRow">
      <summary>發生在插入新的 <see cref="T:System.Data.DataRow" /> 時。</summary>
    </member>
    <member name="M:System.Data.DataTable.ToString">
      <summary>如果存在串連的字串，則取得 <see cref="P:System.Data.DataTable.TableName" /> 和 <see cref="P:System.Data.DataTable.DisplayExpression" />。</summary>
      <returns>字串，由 <see cref="P:System.Data.DataTable.TableName" /> 和 <see cref="P:System.Data.DataTable.DisplayExpression" /> 值組成。</returns>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" />，將 <see cref="T:System.Data.DataTable" /> 目前的內容寫入為 XML。</summary>
      <param name="stream">將資料寫入其中的資料流。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" />，將 <see cref="T:System.Data.DataTable" /> 目前的內容寫入為 XML。 若要儲存資料表及其所有子系的資料，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
      <param name="stream">將資料寫入其中的資料流。</param>
      <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及它所有子代的內容。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的資料。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料 (並選擇性寫入結構描述) 至指定的檔案。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。</summary>
      <param name="stream">將資料寫入其中的資料流。</param>
      <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料 (並選擇性寫入結構描述) 至指定的檔案。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。 若要儲存資料表及其所有子系的資料，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
      <param name="stream">將資料寫入其中的資料流。</param>
      <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
      <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及它所有子代的內容。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的資料。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" />，將 <see cref="T:System.Data.DataTable" /> 目前的內容寫入為 XML。</summary>
      <param name="writer">用來撰寫內容的 <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" />，將 <see cref="T:System.Data.DataTable" /> 目前的內容寫入為 XML。 若要儲存資料表及其所有子系的資料，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
      <param name="writer">用來撰寫內容的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及它所有子代的內容。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的資料。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" /> 和 <see cref="T:System.IO.TextWriter" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。</summary>
      <param name="writer">寫入文件所用的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" /> 和 <see cref="T:System.IO.TextWriter" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。 若要儲存資料表及其所有子系的資料，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
      <param name="writer">寫入文件所用的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
      <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及它所有子代的內容。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的資料。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String)">
      <summary>使用指定的檔案，將 <see cref="T:System.Data.DataTable" /> 目前的內容寫成 XML。</summary>
      <param name="fileName">要寫入 XML 資料的檔案。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
      <summary>使用指定的檔案，將 <see cref="T:System.Data.DataTable" /> 目前的內容寫成 XML。 若要儲存資料表及其所有子系的資料，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
      <param name="fileName">要寫入 XML 資料的檔案。</param>
      <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及它所有子代的內容。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的資料。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
      <summary>使用指定的檔案和 <see cref="T:System.Data.DataTable" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。</summary>
      <param name="fileName">資料將寫入其中的檔案名稱。</param>
      <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
      <summary>使用指定的檔案和 <see cref="T:System.Data.DataTable" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。 若要儲存資料表及其所有子系的資料，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
      <param name="fileName">資料將寫入其中的檔案名稱。</param>
      <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
      <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及它所有子代的內容。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的資料。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" />，將 <see cref="T:System.Data.DataTable" /> 目前的內容寫入為 XML。</summary>
      <param name="writer">要用來寫入內容的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" />，將 <see cref="T:System.Data.DataTable" /> 目前的內容寫入為 XML。</summary>
      <param name="writer">要用來寫入內容的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及它所有子代的內容。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的資料。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" /> 和 <see cref="T:System.Xml.XmlWriter" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。</summary>
      <param name="writer">寫入文件所用的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" /> 和 <see cref="T:System.Xml.XmlWriter" />，寫入 <see cref="T:System.Data.XmlWriteMode" /> 的目前資料，並選擇性寫入結構描述。 若要寫入結構描述，請設定 <paramref name="mode" /> 參數的值為 <see langword="WriteSchema" />。 若要儲存資料表及其所有子系的資料，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
      <param name="writer">寫入文件所用的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="mode">其中一個 <see cref="T:System.Data.XmlWriteMode" /> 值。</param>
      <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及它所有子代的內容。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的資料。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)">
      <summary>將 <see cref="T:System.Data.DataTable" /> 目前的資料結構撰寫成 XML 結構描述，寫入至指定的資料流。</summary>
      <param name="stream">XML 結構描述將寫入其中的資料流。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
      <summary>將 <see cref="T:System.Data.DataTable" /> 目前的資料結構撰寫成 XML 結構描述，寫入至指定的資料流。 若要儲存資料表及其所有子代的結構描述，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
      <param name="stream">XML 結構描述將寫入其中的資料流。</param>
      <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及其所有子代的結構描述。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的結構描述。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 <see cref="T:System.IO.TextWriter" /> 目前的資料結構撰寫成 XML 結構描述。</summary>
      <param name="writer">要用來寫入的 <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 <see cref="T:System.IO.TextWriter" /> 目前的資料結構撰寫成 XML 結構描述。 若要儲存資料表及其所有子代的結構描述，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
      <param name="writer">要用來寫入的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及其所有子代的結構描述。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的結構描述。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.String)">
      <summary>將 <see cref="T:System.Data.DataTable" /> 目前的資料結構撰寫成 XML 結構描述，寫入至指定的檔案。</summary>
      <param name="fileName">要使用的檔案名稱。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
      <summary>將 <see cref="T:System.Data.DataTable" /> 目前的資料結構撰寫成 XML 結構描述，寫入至指定的檔案。 若要儲存資料表及其所有子代的結構描述，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
      <param name="fileName">要使用的檔案名稱。</param>
      <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及其所有子代的結構描述。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的結構描述。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 <see cref="T:System.Xml.XmlWriter" /> 目前的資料結構撰寫成 XML 結構描述。</summary>
      <param name="writer">要使用的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" />，將 <see cref="T:System.Xml.XmlWriter" /> 目前的資料結構撰寫成 XML 結構描述。 若要儲存資料表及其所有子代的結構描述，請將 <paramref name="writeHierarchy" /> 參數設定為 <see langword="true" />。</summary>
      <param name="writer">寫入文件所用的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="writeHierarchy">如果為 <see langword="true" />，就會寫入目前資料表及其所有子代的結構描述。 如果為 <see langword="false" /> (預設值)，就只會寫入目前資料表的結構描述。</param>
    </member>
    <member name="T:System.Data.DataTableClearEventArgs">
      <summary>提供 <see cref="M:System.Data.DataTable.Clear" /> 方法的資料。</summary>
    </member>
    <member name="M:System.Data.DataTableClearEventArgs.#ctor(System.Data.DataTable)">
      <summary>初始化 <see cref="T:System.Data.DataTableClearEventArgs" /> 類別的新執行個體。</summary>
      <param name="dataTable">正在清除其資料列的 <see cref="T:System.Data.DataTable" />。</param>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.Table">
      <summary>取得正在清除其資料列的資料表。</summary>
      <returns>正在清除其資料列的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.TableName">
      <summary>取得正在清除其資料列的資料表名稱。</summary>
      <returns>表示資料表名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.TableNamespace">
      <summary>取得正在清除其資料列的資料表之命名空間。</summary>
      <returns>表示命名空間名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.DataTableClearEventHandler">
      <summary>表示處理 <see cref="M:System.Data.DataTable.Clear" /> 方法的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.Data.DataTableClearEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.Data.DataTableCollection">
      <summary>表示 <see cref="T:System.Data.DataSet" /> 的資料表集合。</summary>
    </member>
    <member name="M:System.Data.DataTableCollection.Add">
      <summary>使用預設名稱建立新的 <see cref="T:System.Data.DataTable" /> 物件，並將它加入至集合。</summary>
      <returns>新建立的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.Data.DataTable)">
      <summary>將指定的 <see langword="DataTable" /> 加入至集合。</summary>
      <param name="table">要加入的 <see langword="DataTable" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">資料表的指定值為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">資料表永遠屬於這個集合，或屬於另一個集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中的資料表具有相同的名稱 (名稱比較不區分大小寫)。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.String)">
      <summary>使用指定的名稱建立 <see cref="T:System.Data.DataTable" /> 物件，並將它加入至集合。</summary>
      <param name="name">要給建立的 <see cref="T:System.Data.DataTable" /> 的名稱。</param>
      <returns>新建立的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.Data.DuplicateNameException">集合中的資料表具有相同的名稱 (名稱比較不區分大小寫)。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.String,System.String)">
      <summary>使用指定的名稱建立 <see cref="T:System.Data.DataTable" /> 物件，並將它加入至集合。</summary>
      <param name="name">要給建立的 <see cref="T:System.Data.DataTable" /> 的名稱。</param>
      <param name="tableNamespace">要給所建立 <see cref="T:System.Data.DataTable" /> 的命名空間。</param>
      <returns>新建立的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.Data.DuplicateNameException">集合中的資料表具有相同的名稱 (名稱比較不區分大小寫)。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.AddRange(System.Data.DataTable[])">
      <summary>將指定的 <see cref="T:System.Data.DataTable" /> 陣列元素複製到集合的末端。</summary>
      <param name="tables">要加入至集合的 <see cref="T:System.Data.DataTable" /> 物件陣列。</param>
    </member>
    <member name="M:System.Data.DataTableCollection.CanRemove(System.Data.DataTable)">
      <summary>驗證是否可以從集合移除指定的 <see cref="T:System.Data.DataTable" /> 物件。</summary>
      <param name="table">集合中要執行檢查的 <see langword="DataTable" />。</param>
      <returns>如果可以將資料表移除，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Clear">
      <summary>清除所有 <see cref="T:System.Data.DataTable" /> 物件的集合。</summary>
    </member>
    <member name="E:System.Data.DataTableCollection.CollectionChanged">
      <summary>由於正在加入或移除 <see cref="T:System.Data.DataTableCollection" /> 物件而導致 <see cref="T:System.Data.DataTable" /> 變更時，就會發生此情況。</summary>
    </member>
    <member name="E:System.Data.DataTableCollection.CollectionChanging">
      <summary>由於正在加入或移除 <see cref="T:System.Data.DataTableCollection" /> 物件而導致 <see cref="T:System.Data.DataTable" /> 變更時，就會發生此一情況。</summary>
    </member>
    <member name="M:System.Data.DataTableCollection.Contains(System.String)">
      <summary>取得值，指出集合中是否含有具此指定名稱的 <see cref="T:System.Data.DataTable" /> 物件。</summary>
      <param name="name">要尋找的 <see cref="T:System.Data.DataTable" /> 名稱。</param>
      <returns>如果指定的資料表存在，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Contains(System.String,System.String)">
      <summary>取得指出具有所指定名稱和資料表命名空間的 <see cref="T:System.Data.DataTable" /> 物件是否存在於集合中的值。</summary>
      <param name="name">要尋找的 <see cref="T:System.Data.DataTable" /> 名稱。</param>
      <param name="tableNamespace">要查詢之 <see cref="T:System.Data.DataTable" /> 命名空間的名稱。</param>
      <returns>如果指定的資料表存在，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.CopyTo(System.Data.DataTable[],System.Int32)">
      <summary>複製目前 <see cref="T:System.Data.DataTableCollection" /> 的所有項目至一維 <see cref="T:System.Array" />，從指定的目的陣列索引開始。</summary>
      <param name="array">要複製目前 <see cref="T:System.Array" /> 物件項目的目的一維 <see cref="T:System.Data.DataTableCollection" />。</param>
      <param name="index">要開始複製的目的端 <see cref="T:System.Array" /> 索引。</param>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.Data.DataTable)">
      <summary>取得指定 <see cref="T:System.Data.DataTable" /> 物件的索引。</summary>
      <param name="table">要搜尋的 <see langword="DataTable" />。</param>
      <returns>資料表的以零起始之索引；如果在集合中找不到此資料表，則為 -1。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.String)">
      <summary>取得在具有指定名稱之 <see cref="T:System.Data.DataTable" /> 物件的集合中的索引。</summary>
      <param name="tableName">要搜尋之 <see langword="DataTable" /> 物件的名稱。</param>
      <returns>具有指定名稱之 <see langword="DataTable" /> 的以零為起始索引；如果集合中沒有資料表，則為 –1。

當有兩個以上的資料表具有相同名稱但是命名空間不同時，則傳回 -1。 如果資料表名稱無法完全與單一資料表相符 (即有任何名稱語意模糊)，呼叫就會失敗。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.String,System.String)">
      <summary>取得指定 <see cref="T:System.Data.DataTable" /> 物件集合中的索引。</summary>
      <param name="tableName">要搜尋之 <see cref="T:System.Data.DataTable" /> 物件的名稱。</param>
      <param name="tableNamespace">要查詢之 <see cref="T:System.Data.DataTable" /> 命名空間的名稱。</param>
      <returns>具有指定名稱之 <see cref="T:System.Data.DataTable" /> 的以零為起始索引；如果集合中沒有資料表，則為 –1。</returns>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.Int32)">
      <summary>取得在指定之索引處的 <see cref="T:System.Data.DataTable" /> 物件。</summary>
      <param name="index">要尋找之 <see cref="T:System.Data.DataTable" /> 的以零起始的索引。</param>
      <returns>具有指定索引的 <see cref="T:System.Data.DataTable" />。否則，如果 <see cref="T:System.Data.DataTable" /> 不存在，則 <see langword="null" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">索引值大於集合中項目的數目。</exception>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.String)">
      <summary>取得具有指定名稱的 <see cref="T:System.Data.DataTable" /> 物件。</summary>
      <param name="name">要尋找的 <see langword="DataTable" /> 名稱。</param>
      <returns>具有指定之名稱的 <see cref="T:System.Data.DataTable" />。但如果 <see cref="T:System.Data.DataTable" /> 不存在時，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.String,System.String)">
      <summary>取得指定命名空間中具有指定名稱的 <see cref="T:System.Data.DataTable" /> 物件。</summary>
      <param name="name">要尋找的 <see langword="DataTable" /> 名稱。</param>
      <param name="tableNamespace">要查詢之 <see cref="T:System.Data.DataTable" /> 命名空間的名稱。</param>
      <returns>具有指定之名稱的 <see cref="T:System.Data.DataTable" />。但如果 <see cref="T:System.Data.DataTable" /> 不存在時，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.Data.DataTable)">
      <summary>從集合中移除指定的 <see cref="T:System.Data.DataTable" /> 物件。</summary>
      <param name="table">要移除的 <see langword="DataTable" />。</param>
      <exception cref="T:System.ArgumentNullException">資料表的指定值為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">此資料表不屬於這個集合。
-或-
資料表是關聯性 (Relationship) 的一部分。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.String)">
      <summary>從集合中移除具有指定名稱的 <see cref="T:System.Data.DataTable" /> 物件。</summary>
      <param name="name">要移除的 <see cref="T:System.Data.DataTable" /> 物件名稱。</param>
      <exception cref="T:System.ArgumentException">集合沒有包含具有指定名稱的資料表。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.String,System.String)">
      <summary>從集合中移除具有指定名稱的 <see cref="T:System.Data.DataTable" /> 物件。</summary>
      <param name="name">要移除的 <see cref="T:System.Data.DataTable" /> 物件名稱。</param>
      <param name="tableNamespace">要查詢之 <see cref="T:System.Data.DataTable" /> 命名空間的名稱。</param>
      <exception cref="T:System.ArgumentException">集合沒有包含具有指定名稱的資料表。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.RemoveAt(System.Int32)">
      <summary>從集合移除指定之索引處的 <see cref="T:System.Data.DataTable" /> 物件。</summary>
      <param name="index">要移除的 <see langword="DataTable" /> 的索引。</param>
      <exception cref="T:System.ArgumentException">集合在指定索引處沒有資料表。</exception>
    </member>
    <member name="T:System.Data.DataTableExtensions">
      <summary>定義 <see cref="T:System.Data.DataTable" /> 類別的擴充方法。 <see cref="T:System.Data.DataTableExtensions" /> 為靜態類別。</summary>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)">
      <summary>建立並傳回已啟用 LINQ 的 <see cref="T:System.Data.DataView" /> 物件。</summary>
      <param name="table">來源 <see cref="T:System.Data.DataTable" />，已啟用 LINQ 的 <see cref="T:System.Data.DataView" /> 是從其中建立。</param>
      <returns>已啟用 LINQ 的 <see cref="T:System.Data.DataView" /> 物件。</returns>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})">
      <summary>建立並傳回已啟用 LINQ 的 <see cref="T:System.Data.DataView" /> 物件，表示 LINQ to DataSet 查詢。</summary>
      <param name="source">來源 LINQ to DataSet 查詢，已啟用 LINQ 的 <see cref="T:System.Data.DataView" /> 是從其中建立。</param>
      <typeparam name="T">來源序列中的物件類型，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <returns>已啟用 LINQ 的 <see cref="T:System.Data.DataView" /> 物件。</returns>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)">
      <summary>傳回 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件，其中泛型參數 <paramref name="T" /> 為 <see cref="T:System.Data.DataRow" />。 這個物件可以在 LINQ 運算式或方法查詢中使用。</summary>
      <param name="source">要成為可列舉的來源 <see cref="T:System.Data.DataTable" />。</param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件，其中泛型參數 <paramref name="T" /> 為 <see cref="T:System.Data.DataRow" />。</returns>
      <exception cref="T:System.ArgumentNullException">來源 <see cref="T:System.Data.DataTable" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>根據輸入 <see cref="T:System.Data.DataTable" /> 物件 (其中泛型參數 <paramref name="T" /> 為 <see cref="T:System.Data.DataRow" />) 傳回包含 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件複本的 <see cref="T:System.Data.DataRow" />。</summary>
      <param name="source">來源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
      <typeparam name="T">來源序列中的物件類型，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <returns>
        <see cref="T:System.Data.DataTable" />，包含當做 <see cref="T:System.Data.DataRow" /> 物件型別的輸入序列。</returns>
      <exception cref="T:System.ArgumentNullException">來源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列為 <see langword="null" />，而且無法建立新的資料表。</exception>
      <exception cref="T:System.InvalidOperationException">來源序列中的 <see cref="T:System.Data.DataRow" /> 具有 <see cref="F:System.Data.DataRowState.Deleted" /> 的狀態。
來源序列不含任何 <see cref="T:System.Data.DataRow" /> 物件。
來源序列中的 <see cref="T:System.Data.DataRow" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)">
      <summary>根據輸入 <see cref="T:System.Data.DataRow" /> 物件 (其中泛型參數 <paramref name="T" /> 為 <see cref="T:System.Data.DataTable" />)，將 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件複製到指定的 <see cref="T:System.Data.DataRow" />。</summary>
      <param name="source">來源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
      <param name="table">目的地 <see cref="T:System.Data.DataTable" />。</param>
      <param name="options">指定 <see cref="T:System.Data.LoadOption" /> 載入選項的 <see cref="T:System.Data.DataTable" /> 列舉型別。</param>
      <typeparam name="T">來源序列中的物件類型，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <exception cref="T:System.ArgumentException">已複製的 <see cref="T:System.Data.DataRow" /> 物件不適合目的 <see cref="T:System.Data.DataTable" /> 的結構描述。</exception>
      <exception cref="T:System.ArgumentNullException">來源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列為 <see langword="null" />，或者目的 <see cref="T:System.Data.DataTable" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">來源序列中的 <see cref="T:System.Data.DataRow" /> 具有 <see cref="F:System.Data.DataRowState.Deleted" /> 的狀態。
來源序列不含任何 <see cref="T:System.Data.DataRow" /> 物件。
來源序列中的 <see cref="T:System.Data.DataRow" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
      <summary>根據輸入 <see cref="T:System.Data.DataRow" /> 物件 (其中泛型參數 <paramref name="T" /> 為 <see cref="T:System.Data.DataTable" />)，將 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件複製到指定的 <see cref="T:System.Data.DataRow" />。</summary>
      <param name="source">來源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
      <param name="table">目的地 <see cref="T:System.Data.DataTable" />。</param>
      <param name="options">指定 <see cref="T:System.Data.LoadOption" /> 載入選項的 <see cref="T:System.Data.DataTable" /> 列舉型別。</param>
      <param name="errorHandler">
        <see cref="T:System.Data.FillErrorEventHandler" /> 委派，表示會處理錯誤的方法。</param>
      <typeparam name="T">來源序列中的物件類型，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <exception cref="T:System.ArgumentException">已複製的 <see cref="T:System.Data.DataRow" /> 物件不適合目的 <see cref="T:System.Data.DataTable" /> 的結構描述。</exception>
      <exception cref="T:System.ArgumentNullException">來源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列為 <see langword="null" />，或者目的 <see cref="T:System.Data.DataTable" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">來源序列中的 <see cref="T:System.Data.DataRow" /> 具有 <see cref="F:System.Data.DataRowState.Deleted" /> 的狀態。
-或-
來源序列不含任何 <see cref="T:System.Data.DataRow" /> 物件。
-或-
來源序列中的 <see cref="T:System.Data.DataRow" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Data.DataTableNewRowEventArgs">
      <summary>提供 <see cref="M:System.Data.DataTable.NewRow" /> 方法的資料。</summary>
    </member>
    <member name="M:System.Data.DataTableNewRowEventArgs.#ctor(System.Data.DataRow)">
      <summary>初始化 <see cref="T:System.Data.DataTableNewRowEventArgs" /> 的新執行個體。</summary>
      <param name="dataRow">正在加入的 <see cref="T:System.Data.DataRow" />。</param>
    </member>
    <member name="P:System.Data.DataTableNewRowEventArgs.Row">
      <summary>取得正在加入的資料列。</summary>
      <returns>正在加入的 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="T:System.Data.DataTableNewRowEventHandler">
      <summary>表示處理 <see cref="M:System.Data.DataTable.NewRow" /> 方法的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.Data.DataTableNewRowEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.Data.DataTableReader">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> 會以一或多個唯讀、順向結果集的形式，取得一或多個 <see cref="T:System.Data.DataTable" /> 物件的內容。</summary>
    </member>
    <member name="M:System.Data.DataTableReader.#ctor(System.Data.DataTable)">
      <summary>使用所提供之 <see cref="T:System.Data.DataTableReader" /> 的資料，初始化 <see cref="T:System.Data.DataTable" /> 類別的新執行個體。</summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" />，新的 <see cref="T:System.Data.DataTableReader" /> 從中取得其結果集。</param>
    </member>
    <member name="M:System.Data.DataTableReader.#ctor(System.Data.DataTable[])">
      <summary>使用 <see cref="T:System.Data.DataTableReader" /> 物件所提供的陣列，初始化 <see cref="T:System.Data.DataTable" /> 類別的新執行個體。</summary>
      <param name="dataTables">
        <see cref="T:System.Data.DataTable" /> 物件的陣列，該物件可以為新的 <see cref="T:System.Data.DataTableReader" /> 物件提供結果。</param>
    </member>
    <member name="M:System.Data.DataTableReader.Close">
      <summary>關閉目前的 <see cref="T:System.Data.DataTableReader" />。</summary>
    </member>
    <member name="P:System.Data.DataTableReader.Depth">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> 目前資料列的巢狀深度。</summary>
      <returns>目前資料列的巢狀深度，一定都是零。</returns>
    </member>
    <member name="P:System.Data.DataTableReader.FieldCount">
      <summary>傳回目前資料列中的資料行數目。</summary>
      <returns>當未位於有效結果集時，則為 0，否則為目前資料列中的資料行數目。</returns>
      <exception cref="T:System.InvalidOperationException">嘗試擷取已關閉之 <see cref="T:System.Data.DataTableReader" /> 中的欄位計數。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetBoolean(System.Int32)">
      <summary>取得指定的資料行值做為 <see cref="T:System.Boolean" />。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不包含 <see langword="Boolean" />。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetByte(System.Int32)">
      <summary>取得指定資料行的值做為位元組。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see langword="DataTableReader" /> 中讀取或存取資料行。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不包含位元組。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>從指定的資料行位移開始，將位元組的資料流讀入緩衝區，做為從指定的緩衝區位移開始的陣列。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <param name="dataIndex">要開始讀取作業之欄位中的索引。</param>
      <param name="buffer">要將位元組資料流讀取到其中的緩衝區。</param>
      <param name="bufferIndex">緩衝區中的索引，從該處開始放置資料。</param>
      <param name="length">複製入緩衝區的最大長度。</param>
      <returns>讀取的實際位元組數目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see langword="DataTableReader" /> 中讀取或存取資料行。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不包含位元組陣列。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetChar(System.Int32)">
      <summary>取得指定資料行的值做為字元。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>資料行的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see langword="DataTableReader" /> 中讀取或存取資料行。</exception>
      <exception cref="T:System.InvalidCastException">指定的欄位不包含字元。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>傳回指定資料行的值做為字元陣列。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <param name="dataIndex">要開始讀取作業之欄位中的索引。</param>
      <param name="buffer">要讀入字元資料流的目的緩衝區。</param>
      <param name="bufferIndex">緩衝區中的索引，從該處開始放置資料。</param>
      <param name="length">複製入緩衝區的最大長度。</param>
      <returns>讀取的實際字元數目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see langword="DataTableReader" /> 中讀取或存取資料行。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不包含字元陣列。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetDataTypeName(System.Int32)">
      <summary>取得字串，表示指定之資料行的資料型別。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>字串，表示資料行的資料型別。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetDateTime(System.Int32)">
      <summary>取得指定之資料行的值做為 <see cref="T:System.DateTime" /> 物件。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see langword="DataTableReader" /> 中讀取或存取資料行。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不包含 DateTime 值。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetDecimal(System.Int32)">
      <summary>取得指定的資料行值做為 <see cref="T:System.Decimal" />。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see langword="DataTableReader" /> 中讀取或存取資料行。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不包含 <see langword="Decimal" /> 值。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetDouble(System.Int32)">
      <summary>取得資料行的值做為雙精確度浮點數。</summary>
      <param name="ordinal">資料行以零為起始的序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see langword="DataTableReader" /> 中讀取或存取資料行。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不包含雙精確度浮點數。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetEnumerator">
      <summary>傳回可用來逐一查看項目集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 物件，表示項目集合。</returns>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetFieldType(System.Int32)">
      <summary>取得 <see cref="T:System.Type" />，即是物件的資料型別。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>
        <see cref="T:System.Type" />，此為物件的資料類型。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetFloat(System.Int32)">
      <summary>取得指定資料行的值做為單精確度浮點數。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>資料行的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不包含單精確度浮點數。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetGuid(System.Int32)">
      <summary>取得指定資料行的值做為全域唯一識別項 (GUID)。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不包含 GUID。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt16(System.Int32)">
      <summary>取得指定資料行的值做為 16 位元帶正負號的整數。</summary>
      <param name="ordinal">以零起始的資料行序數</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不包含 16 位元帶正負號的整數。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt32(System.Int32)">
      <summary>取得指定資料行的值作為 32 位元帶正負號的整數。</summary>
      <param name="ordinal">以零起始的資料行序數</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不包含 32 位元帶正負號的整數值。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt64(System.Int32)">
      <summary>取得指定資料行的值做為 64 位元帶正負號的整數 (Signed Integer)。</summary>
      <param name="ordinal">以零起始的資料行序數</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不包含 64 位元帶正負號的整數值。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetName(System.Int32)">
      <summary>取得指定的資料行值做為 <see cref="T:System.String" />。</summary>
      <param name="ordinal">以零起始的資料行序數</param>
      <returns>指定資料行的名稱。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetOrdinal(System.String)">
      <summary>提供資料行的名稱，取得資料行序數。</summary>
      <param name="name">資料行名稱。</param>
      <returns>以零為基底的資料行序數。</returns>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
      <exception cref="T:System.ArgumentException">指定的名稱不是有效的資料行名稱。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>以提供者專屬格式，取得指定之資料行的型別。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>
        <see cref="T:System.Type" />，此為物件的資料類型。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificValue(System.Int32)">
      <summary>以提供者專屬格式，取得指定之資料行的值。</summary>
      <param name="ordinal">已擷取其值之資料行的以零為起始的數目。</param>
      <returns>提供者專屬格式之指定的資料行值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificValues(System.Object[])">
      <summary>以 <see cref="T:System.Data.DataTableReader" /> 中所有資料行的提供者專屬型別資訊，填入所提供的陣列。</summary>
      <param name="values">物件陣列，要以 <see cref="T:System.Data.DataTableReader" /> 中資料行的型別資訊填入。</param>
      <returns>複製至陣列的資料行值數目。</returns>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetSchemaTable">
      <summary>傳回 <see cref="T:System.Data.DataTable" />，以描述 <see cref="T:System.Data.DataTableReader" /> 的資料行中繼資料。</summary>
      <returns>描述資料行中繼資料的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.DataTableReader" /> 已關閉。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetString(System.Int32)">
      <summary>取得指定的資料行值做為字串。</summary>
      <param name="ordinal">以零起始的資料行序數</param>
      <returns>指定的資料行值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
      <exception cref="T:System.InvalidCastException">指定的資料行不包含字串。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetValue(System.Int32)">
      <summary>取得使用原生格式的指定資料行值。</summary>
      <param name="ordinal">以零起始的資料行序數</param>
      <returns>指定的資料行值。 這個方法會傳回 null 資料行的 <see langword="DBNull" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetValues(System.Object[])">
      <summary>使用目前資料列的資料行值填入物件陣列。</summary>
      <param name="values">
        <see cref="T:System.Object" /> 的陣列，要從 <see cref="T:System.Data.DataTableReader" /> 複製資料行值至其中。</param>
      <returns>複製至陣列的資料行值數目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
    </member>
    <member name="P:System.Data.DataTableReader.HasRows">
      <summary>取得值，指出 <see cref="T:System.Data.DataTableReader" /> 是否包含一個或多個資料列。</summary>
      <returns>如果 <see cref="T:System.Data.DataTableReader" /> 包含一個或更多資料列，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">嘗試擷取有關已關閉之 <see cref="T:System.Data.DataTableReader" /> 的資訊。</exception>
    </member>
    <member name="P:System.Data.DataTableReader.IsClosed">
      <summary>取得值，指出 <see cref="T:System.Data.DataTableReader" /> 是否已關閉。</summary>
      <returns>如果 <see cref="T:System.Data.DataTableReader" /> 關閉，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.IsDBNull(System.Int32)">
      <summary>取得值，指出資料行是否含有不存在或遺漏的值。</summary>
      <param name="ordinal">以零起始的資料行序數</param>
      <returns>如果指定的資料行值等於 <see cref="T:System.DBNull" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
    </member>
    <member name="P:System.Data.DataTableReader.Item(System.Int32)">
      <summary>提供資料行序數，取得使用原生格式的指定資料行值。</summary>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <returns>使用原生格式的指定資料行值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 的範圍。</exception>
    </member>
    <member name="P:System.Data.DataTableReader.Item(System.String)">
      <summary>提供資料行名稱，取得使用原生格式的指定資料行值。</summary>
      <param name="name">資料行名稱。</param>
      <returns>使用原生格式的指定資料行值。</returns>
      <exception cref="T:System.ArgumentException">指定的名稱不是有效的資料行名稱。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">嘗試從已刪除的資料列擷取資料。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.NextResult">
      <summary>將 <see cref="T:System.Data.DataTableReader" /> 前移到下一個結果集 (如果有的話)。</summary>
      <returns>如果有其他的結果集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">嘗試在已關閉的 <see cref="T:System.Data.DataTableReader" /> 之內巡覽。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.Read">
      <summary>將 <see cref="T:System.Data.DataTableReader" /> 推進到下一筆記錄。</summary>
      <returns>如果有其他要讀取的資料列，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">嘗試在關閉的 <see cref="T:System.Data.DataTableReader" /> 中讀取或存取資料行。</exception>
    </member>
    <member name="P:System.Data.DataTableReader.RecordsAffected">
      <summary>取得透過執行 SQL 陳述式所插入、變更或刪除的資料列數目。</summary>
      <returns>
        <see cref="T:System.Data.DataTableReader" /> 不支援這個屬性，而且一定會傳回 0。</returns>
    </member>
    <member name="T:System.Data.DataView">
      <summary>代表用於排序、篩選、搜尋、編輯和巡覽的 <see cref="T:System.Data.DataTable" /> 可資料繫結的自訂檢視。 <see cref="T:System.Data.DataView" /> 不儲存資料，卻代表其對應之 <see cref="T:System.Data.DataTable" /> 的連線檢視。 <see cref="T:System.Data.DataView" /> 的資料變更會影響 <see cref="T:System.Data.DataTable" />。 <see cref="T:System.Data.DataTable" /> 的資料變更會影響所有與它建立關聯的 <see cref="T:System.Data.DataView" />。</summary>
    </member>
    <member name="M:System.Data.DataView.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataView" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.DataView.#ctor(System.Data.DataTable)">
      <summary>使用指定的 <see cref="T:System.Data.DataView" /> 初始化 <see cref="T:System.Data.DataTable" /> 類別的新執行個體。</summary>
      <param name="table">要加入至 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataTable" />。</param>
    </member>
    <member name="M:System.Data.DataView.#ctor(System.Data.DataTable,System.String,System.String,System.Data.DataViewRowState)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" />、<see cref="P:System.Data.DataView.RowFilter" />、<see cref="P:System.Data.DataView.Sort" /> 和 <see cref="T:System.Data.DataViewRowState" />，初始化 <see cref="T:System.Data.DataView" /> 類別的新執行個體。</summary>
      <param name="table">要加入至 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="RowFilter">要套用至 <see cref="T:System.Data.DataView" /> 的 <see cref="P:System.Data.DataView.RowFilter" />。</param>
      <param name="Sort">要套用至 <see cref="P:System.Data.DataView.Sort" /> 的 <see cref="T:System.Data.DataView" />。</param>
      <param name="RowState">要套用至 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataViewRowState" />。</param>
    </member>
    <member name="M:System.Data.DataView.AddNew">
      <summary>將新資料列加入 <see cref="T:System.Data.DataView" />。</summary>
      <returns>新的 <see cref="T:System.Data.DataRowView" /> 物件。</returns>
    </member>
    <member name="P:System.Data.DataView.AllowDelete">
      <summary>設定或取得值，這個值表示是否允許刪除。</summary>
      <returns>如果允許刪除，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataView.AllowEdit">
      <summary>取得或設定值，指出是否允許編輯。</summary>
      <returns>如果允許編輯，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataView.AllowNew">
      <summary>取得或設定值，指出是否可以使用 <see cref="M:System.Data.DataView.AddNew" /> 方法加入新的資料列。</summary>
      <returns>如果可以加入新的資料列，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataView.ApplyDefaultSort">
      <summary>取得或設定值，指出是否要使用預設排序。 預設排序是依 <see cref="P:System.Data.DataTable.PrimaryKey" /> 指定的所有主要金鑰遞增排序。</summary>
      <returns>如果使用預設排序，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataView.BeginInit">
      <summary>開始對表單或另一個元件所使用的 <see cref="T:System.Data.DataView" /> 進行初始化作業。 初始化會於執行階段時執行。</summary>
    </member>
    <member name="M:System.Data.DataView.Close">
      <summary>關閉 <see cref="T:System.Data.DataView" />。</summary>
    </member>
    <member name="M:System.Data.DataView.ColumnCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>成功變更 <see cref="T:System.Data.DataColumnCollection" /> 後發生。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.ListChangedEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.DataView.CopyTo(System.Array,System.Int32)">
      <summary>將項目複製到陣列。 僅適用於 Web Form 介面。</summary>
      <param name="array">複製的目的地陣列。</param>
      <param name="index">做為開頭的索引。</param>
    </member>
    <member name="P:System.Data.DataView.Count">
      <summary>取得套用 <see cref="P:System.Data.DataView.RowFilter" /> 和 <see cref="P:System.Data.DataView.RowStateFilter" /> 之後，<see cref="T:System.Data.DataView" /> 中的記錄數目。</summary>
      <returns>
        <see cref="T:System.Data.DataView" /> 中的記錄數目。</returns>
    </member>
    <member name="P:System.Data.DataView.DataViewManager">
      <summary>取得與這份檢視相關聯的 <see cref="T:System.Data.DataViewManager" />。</summary>
      <returns>建立此檢視的 <see langword="DataViewManager" />。 如果這是 <see cref="T:System.Data.DataTable" /> 的預設 <see cref="T:System.Data.DataView" />，則 <see langword="DataViewManager" /> 屬性會傳回 <see langword="DataSet" /> 的預設 <see langword="DataViewManager" />。 否則，如果 <see langword="DataView" /> 不是使用 <see langword="DataViewManager" /> 所建立，則這個屬性是 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.DataView.Delete(System.Int32)">
      <summary>刪除指定索引處的資料列。</summary>
      <param name="index">要刪除的資料列索引。</param>
    </member>
    <member name="M:System.Data.DataView.Dispose(System.Boolean)">
      <summary>處置 <see cref="T:System.Data.DataView" /> 物件所使用的資源 (除了記憶體之外)。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Data.DataView.EndInit">
      <summary>結束對表單或另一個元件所使用的 <see cref="T:System.Data.DataView" /> 進行初始化作業。 初始化會於執行階段時執行。</summary>
    </member>
    <member name="M:System.Data.DataView.Equals(System.Data.DataView)">
      <summary>判斷指定的 <see cref="T:System.Data.DataView" /> 執行個體是否視為相等。</summary>
      <param name="view">要比較的 <see cref="T:System.Data.DataView" />。</param>
      <returns>如果兩個 <see cref="T:System.Data.DataView" /> 執行個體相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataView.Find(System.Object)">
      <summary>依據指定的排序索引鍵值，找出 <see cref="T:System.Data.DataView" /> 中的資料列。</summary>
      <param name="key">要搜尋的物件。</param>
      <returns>
        <see cref="T:System.Data.DataView" /> 中的資料列索引，其包含指定的排序索引鍵值；如果排序索引鍵值不存在，則為 -1。</returns>
    </member>
    <member name="M:System.Data.DataView.Find(System.Object[])">
      <summary>依據指定的排序索引鍵值，找出 <see cref="T:System.Data.DataView" /> 中的資料列。</summary>
      <param name="key">值的陣列，類型為 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Data.DataView" /> 中第一個資料列的位置索引，其符合指定的排序索引鍵值；否則，如果沒有符合的排序索引鍵值，則為 -1。</returns>
    </member>
    <member name="M:System.Data.DataView.FindRows(System.Object)">
      <summary>傳回 <see cref="T:System.Data.DataRowView" /> 物件的陣列，其資料行符合指定的排序鍵值。</summary>
      <param name="key">要搜尋的資料行值，輸入為 <see cref="T:System.Object" />。</param>
      <returns>
        <see langword="DataRowView" /> 物件的陣列，其資料行符合指定的排序鍵值；或若資料列不含指定的排序鍵值，則為空的 <see langword="DataRowView" /> 陣列。</returns>
    </member>
    <member name="M:System.Data.DataView.FindRows(System.Object[])">
      <summary>傳回 <see cref="T:System.Data.DataRowView" /> 物件的陣列，其資料行符合指定的排序鍵值。</summary>
      <param name="key">要搜尋的資料行值陣列，輸入為 <see cref="T:System.Object" />。</param>
      <returns>
        <see langword="DataRowView" /> 物件的陣列，其資料行符合指定的排序鍵值；或若資料列不含指定的排序鍵值，則為空的 <see langword="DataRowView" /> 陣列。</returns>
    </member>
    <member name="M:System.Data.DataView.GetEnumerator">
      <summary>取得這個 <see cref="T:System.Data.DataView" /> 的列舉值。</summary>
      <returns>用於巡覽清單的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.DataView.IndexListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
      <summary>成功變更 <see cref="T:System.Data.DataView" /> 後發生。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.ListChangedEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="E:System.Data.DataView.Initialized">
      <summary>發生於 <see cref="T:System.Data.DataView" /> 的初始化完成時。</summary>
    </member>
    <member name="P:System.Data.DataView.IsInitialized">
      <summary>取得值，表示元件是否已初始化。</summary>
      <returns>
        <see langword="true" /> 表示元件已完成初始化，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataView.IsOpen">
      <summary>取得值，指出資料來源目前是否開放且在 <see cref="T:System.Data.DataTable" /> 上投影出資料檢視。</summary>
      <returns>如果來源開放，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataView.Item(System.Int32)">
      <summary>從指定的資料表取得一列資料。</summary>
      <param name="recordIndex">
        <see cref="T:System.Data.DataTable" /> 中之記錄的索引。</param>
      <returns>所需的資料列之 <see cref="T:System.Data.DataRowView" />。</returns>
    </member>
    <member name="E:System.Data.DataView.ListChanged">
      <summary>發生於清單受 <see cref="T:System.Data.DataView" /> 變更管理時。</summary>
    </member>
    <member name="M:System.Data.DataView.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>引發 <see cref="E:System.Data.DataView.ListChanged" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.ComponentModel.ListChangedEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.DataView.Open">
      <summary>開啟 <see cref="T:System.Data.DataView" />。</summary>
    </member>
    <member name="M:System.Data.DataView.Reset">
      <summary>已保留供內部使用。</summary>
    </member>
    <member name="P:System.Data.DataView.RowFilter">
      <summary>取得或設定用來篩選在 <see cref="T:System.Data.DataView" /> 中檢視之資料列的運算式。</summary>
      <returns>字串，指定資料列的篩選方式。</returns>
    </member>
    <member name="P:System.Data.DataView.RowStateFilter">
      <summary>取得或設定在 <see cref="T:System.Data.DataView" /> 使用的資料列狀態篩選。</summary>
      <returns>其中一個 <see cref="T:System.Data.DataViewRowState" /> 值。</returns>
    </member>
    <member name="P:System.Data.DataView.Sort">
      <summary>取得或設定排序資料行或資料行，並排序 <see cref="T:System.Data.DataView" /> 的次序。</summary>
      <returns>包含資料行名稱的字串，後面緊接著 "ASC" (表示遞增) 或 "DESC" (表示遞減)。 根據預設會遞增排序資料行。 可以用逗號分隔多個資料行。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#ICollection#IsSynchronized">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#ICollection#SyncRoot">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.Collections.ICollection.SyncRoot" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Add(System.Object)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Collections.IList.Add(System.Object)" />。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 值。</param>
      <returns>如需這個成員的說明，請參閱 <see cref="M:System.Collections.IList.Add(System.Object)" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Clear">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Collections.IList.Clear" />。</summary>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Contains(System.Object)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Collections.IList.Contains(System.Object)" />。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 值。</param>
      <returns>如需這個成員的說明，請參閱 <see cref="M:System.Collections.IList.Contains(System.Object)" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#IndexOf(System.Object)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 值。</param>
      <returns>如需這個成員的說明，請參閱 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。</summary>
      <param name="index">
        <see cref="T:System.Int32" /> 值。</param>
      <param name="value">要插入的 <see cref="T:System.Object" /> 值。</param>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#IsFixedSize">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Collections.IList.IsFixedSize" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.Collections.IList.IsFixedSize" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#IsReadOnly">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Collections.IList.IsReadOnly" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.Collections.IList.IsReadOnly" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#Item(System.Int32)">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Collections.IList.Item(System.Int32)" />。</summary>
      <param name="recordIndex">
        <see cref="T:System.Int32" /> 值。</param>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.Collections.IList.Item(System.Int32)" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Remove(System.Object)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Collections.IList.Remove(System.Object)" />。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 值。</param>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />。</summary>
      <param name="index">
        <see cref="T:System.Int32" /> 值。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#AddNew">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。</summary>
      <returns>加入此清單的項目。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowEdit">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowNew">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowRemove">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 物件。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件。</param>
      <param name="key">
        <see cref="T:System.Object" /> 值。</param>
      <returns>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#IsSorted">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#RemoveSort">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />。</summary>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SortDirection">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SortProperty">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingListView#ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" />。</summary>
      <param name="sorts">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 物件。</param>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#Filter">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingListView.Filter" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingListView.Filter" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingListView#RemoveFilter">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingListView.RemoveFilter" />。</summary>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SortDescriptions">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingListView.SortDescriptions" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingListView.SortDescriptions" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SupportsAdvancedSorting">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SupportsFiltering">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingListView.SupportsFiltering" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingListView.SupportsFiltering" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#ITypedList#GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])" />。</summary>
      <param name="listAccessors">尋找在集合中顯示為可繫結的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件陣列。 這可以是 <see langword="null" />。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#ITypedList#GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" />。</summary>
      <param name="listAccessors">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件的陣列。</param>
      <returns>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" />。</returns>
    </member>
    <member name="P:System.Data.DataView.Table">
      <summary>取得或設定來源 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>為這個檢視提供資料的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable">
      <summary>根據現有 <see cref="T:System.Data.DataView" /> 中的資料列，建立並傳回新的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>新的 <see cref="T:System.Data.DataTable" /> 執行個體，其中包含所要求的資料列和資料行。</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.Boolean,System.String[])">
      <summary>根據現有 <see cref="T:System.Data.DataView" /> 中的資料列，建立並傳回新的 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="distinct">如果為 <see langword="true" />，則傳回的 <see cref="T:System.Data.DataTable" /> 包含具有其所有資料行相異值的資料列。 預設值為 <see langword="false" />。</param>
      <param name="columnNames">包含資料行名稱清單的字串陣列，並且要包含在傳回的 <see cref="T:System.Data.DataTable" />。 <see cref="T:System.Data.DataTable" /> 包含指定資料行，其順序為在此陣列中出現的順序。</param>
      <returns>新的 <see cref="T:System.Data.DataTable" /> 執行個體，其中包含所要求的資料列和資料行。</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.String)">
      <summary>根據現有 <see cref="T:System.Data.DataView" /> 中的資料列，建立並傳回新的 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="tableName">傳回之 <see cref="T:System.Data.DataTable" /> 的名稱。</param>
      <returns>新的 <see cref="T:System.Data.DataTable" /> 執行個體，其中包含所要求的資料列和資料行。</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.String,System.Boolean,System.String[])">
      <summary>根據現有 <see cref="T:System.Data.DataView" /> 中的資料列，建立並傳回新的 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="tableName">傳回之 <see cref="T:System.Data.DataTable" /> 的名稱。</param>
      <param name="distinct">如果為 <see langword="true" />，則傳回的 <see cref="T:System.Data.DataTable" /> 包含具有其所有資料行相異值的資料列。 預設值為 <see langword="false" />。</param>
      <param name="columnNames">包含資料行名稱清單的字串陣列，並且要包含在傳回的 <see cref="T:System.Data.DataTable" />。 <see langword="DataTable" /> 包含指定資料行，其順序為在此陣列中出現的順序。</param>
      <returns>新的 <see cref="T:System.Data.DataTable" /> 執行個體，其中包含所要求的資料列和資料行。</returns>
    </member>
    <member name="M:System.Data.DataView.UpdateIndex">
      <summary>已保留供內部使用。</summary>
    </member>
    <member name="M:System.Data.DataView.UpdateIndex(System.Boolean)">
      <summary>已保留供內部使用。</summary>
      <param name="force">已保留供內部使用。</param>
    </member>
    <member name="T:System.Data.DataViewManager">
      <summary>
        <see cref="T:System.Data.DataSet" /> 中的每一個 <see cref="T:System.Data.DataTable" /> 都包含預設的 <see cref="T:System.Data.DataViewSettingCollection" />。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataViewManager" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.#ctor(System.Data.DataSet)">
      <summary>為指定的 <see cref="T:System.Data.DataSet" /> 初始化 <see cref="T:System.Data.DataViewManager" /> 類別的新執行個體。</summary>
      <param name="dataSet">要使用的 <see cref="T:System.Data.DataSet" /> 的名稱。</param>
    </member>
    <member name="M:System.Data.DataViewManager.CreateDataView(System.Data.DataTable)">
      <summary>為指定的 <see cref="T:System.Data.DataTable" /> 建立 <see cref="T:System.Data.DataView" />。</summary>
      <param name="table">要在 <see cref="T:System.Data.DataTable" /> 中使用的 <see cref="T:System.Data.DataView" /> 名稱。</param>
      <returns>
        <see cref="T:System.Data.DataView" /> 物件。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.DataSet">
      <summary>取得或設定與 <see cref="T:System.Data.DataSet" /> 一起使用的 <see cref="T:System.Data.DataViewManager" />。</summary>
      <returns>要使用的 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.DataViewSettingCollectionString">
      <summary>取得或設定用於程式碼保存的值。</summary>
      <returns>用於程式碼保存的值。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.DataViewSettings">
      <summary>為每個在 <see cref="T:System.Data.DataViewSettingCollection" /> 中的 <see cref="T:System.Data.DataTable" /> 取得 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>每個 <see langword="DataTable" /> 的 <see cref="T:System.Data.DataViewSettingCollection" />。</returns>
    </member>
    <member name="E:System.Data.DataViewManager.ListChanged">
      <summary>發生於在 <see cref="T:System.Data.DataView" /> 中加入或刪除資料列之後。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>引發 <see cref="E:System.Data.DataViewManager.ListChanged" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.ComponentModel.ListChangedEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.DataViewManager.RelationCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>在 <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 中加入或刪除 <see cref="T:System.Data.DataRelation" /> 時，引發 <see cref="T:System.Data.DataRelationCollection" /> 事件。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Collections.ICollection" /> 索引開始，將 <see cref="T:System.Array" /> 的項目複製到 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#Count">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Collections.ICollection.Count" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.Collections.ICollection.Count" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#IsSynchronized">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#SyncRoot">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Add(System.Object)">
      <summary>將項目加入至 <see cref="T:System.Collections.IList" />。</summary>
      <param name="value">要加入至 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns>插入新項目的位置。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Clear">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Collections.IList.Clear" />。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <see cref="T:System.Object" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 中指定項目的索引。</summary>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <returns>如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入位於指定索引的 <see cref="T:System.Collections.IList" />。</summary>
      <param name="index">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value">要插入 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#IsFixedSize">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Collections.IList.IsFixedSize" />。</summary>
      <returns>如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#IsReadOnly">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Collections.IList.IsReadOnly" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.Collections.IList.IsReadOnly" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <param name="index">要取得或設定之以零為起始的項目索引。</param>
      <returns>在指定索引上的項目。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IList" /> 移除特定物件之第一個符合的元素。</summary>
      <param name="value">要從 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.IList" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除在指定索引處的 <see cref="T:System.Collections.IList" /> 項目。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>將 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 加入用來搜尋的索引中。</summary>
      <param name="property">要加入至用來搜尋之索引的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#AddNew">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowEdit">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowNew">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowRemove">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>根據 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" /> 來排序清單。</summary>
      <param name="property">要做為排序依據的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">其中一個 <see cref="T:System.ComponentModel.ListSortDirection" /> 值。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>傳回具有指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的列索引。</summary>
      <param name="property">要在其上搜尋的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">要搜尋的 property 參數值。</param>
      <returns>具有指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的列索引。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#IsSorted">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>從用來搜尋的索引中移除 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="property">要從用來搜尋的索引中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#RemoveSort">
      <summary>移除任何使用 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 的套用排序。</summary>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SortDirection">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SortProperty">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</summary>
      <returns>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#ITypedList#GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>傳回代表繫結資料所用各項目屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <param name="listAccessors">尋找在集合中顯示為可繫結的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件陣列。 這可以是 <see langword="null" />。</param>
      <returns>代表繫結資料所用各項目屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#ITypedList#GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>傳回清單的名稱。</summary>
      <param name="listAccessors">傳回清單名稱之 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件的陣列。 這可以是 <see langword="null" />。</param>
      <returns>清單的名稱。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.TableCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>在 <see cref="E:System.Data.DataTableCollection.CollectionChanged" /> 中加入或刪除 <see cref="T:System.Data.DataTable" /> 時，引發 <see cref="T:System.Data.DataTableCollection" /> 事件。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.Data.DataViewRowState">
      <summary>描述 <see cref="T:System.Data.DataRow" /> 中的資料版本。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Added">
      <summary>新的資料列。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.CurrentRows">
      <summary>目前的資料列，這些資料列包含未變更的、新的和修改的資料列。 根據預設，<see cref="T:System.Data.DataViewRowState" /> 會設為 CurrentRows。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Deleted">
      <summary>刪除的資料列。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.ModifiedCurrent">
      <summary>已經修改之原始資料目前的版本 (請參閱 <see langword="ModifiedOriginal" />)。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.ModifiedOriginal">
      <summary>已修改之資料的原始版本 (雖然已經過修改，這些資料還是以 <see langword="ModifiedCurrent" /> 提供)。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.None">
      <summary>無。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.OriginalRows">
      <summary>原始資料列，這些資料列包含未變更和已刪除的資料列。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Unchanged">
      <summary>未變更的資料列。</summary>
    </member>
    <member name="T:System.Data.DataViewSetting">
      <summary>表示從 <see cref="P:System.Data.DataView.ApplyDefaultSort" /> 建立之 DataView 的 <see cref="P:System.Data.DataView.DataViewManager" />、<see cref="P:System.Data.DataView.RowFilter" />、<see cref="P:System.Data.DataView.RowStateFilter" />、<see cref="P:System.Data.DataView.Sort" />、<see cref="P:System.Data.DataView.Table" /> 和 <see cref="T:System.Data.DataViewManager" /> 等的預設值。</summary>
    </member>
    <member name="P:System.Data.DataViewSetting.ApplyDefaultSort">
      <summary>取得或設定數值，表示是否要使用預設排序。</summary>
      <returns>
        <see langword="true" />，表示使用預設排序；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.DataViewManager">
      <summary>取得含有這個 <see cref="T:System.Data.DataViewManager" /> 的 <see cref="T:System.Data.DataViewSetting" />。</summary>
      <returns>
        <see cref="T:System.Data.DataViewManager" /> 物件。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.RowFilter">
      <summary>取得或設定要在 <see cref="T:System.Data.DataView" /> 中套用的篩選條件。 如需使用 RowFilter 的程式碼範例，請參閱 <see cref="P:System.Data.DataView.RowFilter" />。</summary>
      <returns>字串，含有要套用的篩選條件。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.RowStateFilter">
      <summary>取得或設定數值，表示是否要在 <see cref="T:System.Data.DataView" /> 中顯示 Current、Deleted、Modified Current、ModifiedOriginal、New、Original、Unchanged 或無資料列。</summary>
      <returns>指示要顯示哪個資料列的值。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.Sort">
      <summary>取得或設定數值，表示要在 <see cref="T:System.Data.DataView" /> 中套用的排序。</summary>
      <returns>要在 <see cref="T:System.Data.DataView" /> 中套用的排序。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.Table">
      <summary>取得 <see cref="T:System.Data.DataTable" /> 屬性套用至的 <see cref="T:System.Data.DataViewSetting" />。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 物件。</returns>
    </member>
    <member name="T:System.Data.DataViewSettingCollection">
      <summary>含有在 <see cref="T:System.Data.DataViewSetting" /> 中每個 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataSet" /> 物件之唯讀集合。</summary>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.CopyTo(System.Array,System.Int32)">
      <summary>將集合物件複製到指定索引開頭的一維 <see cref="T:System.Array" /> 執行個體。</summary>
      <param name="ar">一維 <see cref="T:System.Array" />，是從集合複製之值的目的端。</param>
      <param name="index">要開始插入的陣列索引。</param>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.CopyTo(System.Data.DataViewSetting[],System.Int32)">
      <summary>將集合物件複製到指定索引開頭的一維 <see cref="T:System.Array" /> 執行個體。</summary>
      <param name="ar">一維 <see cref="T:System.Array" />，是從集合複製之值的目的端。</param>
      <param name="index">要開始插入的陣列索引。</param>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Count">
      <summary>取得 <see cref="T:System.Data.DataViewSetting" /> 中的 <see cref="T:System.Data.DataViewSettingCollection" /> 物件數目。</summary>
      <returns>集合中的 <see cref="T:System.Data.DataViewSetting" /> 物件數目。</returns>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.GetEnumerator">
      <summary>取得集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 物件。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.IsReadOnly">
      <summary>取得值，這個值表示 <see cref="T:System.Data.DataViewSettingCollection" /> 是否為唯讀。</summary>
      <returns>一律傳回<see langword="true" />以表示集合是唯讀的。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.IsSynchronized">
      <summary>取得值，指出 <see cref="T:System.Data.DataViewSettingCollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>除非由衍生類別 (Derived Class) 覆寫，否則這個屬性一定是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.Data.DataTable)">
      <summary>從集合中取得指定之 <see cref="T:System.Data.DataViewSetting" /> 的 <see cref="T:System.Data.DataTable" /> 物件。</summary>
      <param name="table">要尋找的 <see cref="T:System.Data.DataTable" />。</param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 物件的集合。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.Int32)">
      <summary>取得由其索引指定之 <see cref="T:System.Data.DataViewSetting" /> 的 <see cref="T:System.Data.DataTable" /> 物件。</summary>
      <param name="index">要尋找之 <see cref="T:System.Data.DataTable" /> 的以零起始的索引。</param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 物件的集合。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.String)">
      <summary>取得由其名稱指定之 <see cref="T:System.Data.DataViewSetting" /> 的 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="tableName">要尋找的 <see cref="T:System.Data.DataTable" /> 名稱。</param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 物件的集合。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Data.DataViewSettingCollection" /> 的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Data.DataViewSettingCollection" /> 的物件。</returns>
    </member>
    <member name="T:System.Data.DBConcurrencyException">
      <summary>受影響的資料列數目等於零時，由 <see cref="T:System.Data.Common.DataAdapter" /> 在插入、更新或刪除作業期間擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor">
      <summary>初始化 <see cref="T:System.Data.DBConcurrencyException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.DBConcurrencyException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況詳細資料的文字字串。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.DBConcurrencyException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況詳細資料的文字字串。</param>
      <param name="inner">內部例外狀況的參考。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])">
      <summary>初始化 <see cref="T:System.Data.DBConcurrencyException" /> 類別的新執行個體。</summary>
      <param name="message">解釋這個例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
      <param name="dataRows">包含更新失敗並且產生此例外狀況之 <see cref="T:System.Data.DataRow" /> 物件的陣列。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])">
      <summary>複製更新失敗並產生此例外狀況的 <see cref="T:System.Data.DataRow" /> 物件到指定的 <see cref="T:System.Data.DataRow" /> 陣列中。</summary>
      <param name="array">
        <see cref="T:System.Data.DataRow" /> 物件的一維陣列，用來包含複製的 <see cref="T:System.Data.DataRow" /> 物件。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)">
      <summary>複製更新失敗並產生此例外狀況的 <see cref="T:System.Data.DataRow" /> 物件到指定的 <see cref="T:System.Data.DataRow" /> 陣列中，從指定之目的陣列索引開始。</summary>
      <param name="array">
        <see cref="T:System.Data.DataRow" /> 物件的一維陣列，用來包含複製的 <see cref="T:System.Data.DataRow" /> 物件。</param>
      <param name="arrayIndex">要開始複製的目的陣列索引。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以序列化 <see cref="T:System.Data.DBConcurrencyException" /> 所需的資料填入指定的序列化資訊物件。</summary>
      <param name="si">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，保留與 <see cref="T:System.Data.DBConcurrencyException" /> 關聯的序列化資料。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，含有與 <see cref="T:System.Data.DBConcurrencyException" /> 關聯的序列資料流的來源和目的端。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 參數為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</exception>
    </member>
    <member name="P:System.Data.DBConcurrencyException.Row">
      <summary>取得或設定產生 <see cref="T:System.Data.DataRow" /> 之 <see cref="T:System.Data.DBConcurrencyException" /> 的值。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 的值。</returns>
    </member>
    <member name="P:System.Data.DBConcurrencyException.RowCount">
      <summary>取得資料列的數目，這些資料列的更新失敗，因而產生此例外狀況。</summary>
      <returns>包含資料列計數的整數，這些資料列的更新失敗。</returns>
    </member>
    <member name="T:System.Data.DbType">
      <summary>指定 .NET Framework 資料提供者 (Data Provider) 的欄位、屬性或 <see langword="Parameter" /> 物件的資料型別。</summary>
    </member>
    <member name="F:System.Data.DbType.AnsiString">
      <summary>非 Unicode 字元的可變長度資料流，範圍在 1 和 8,000 字元之間。</summary>
    </member>
    <member name="F:System.Data.DbType.AnsiStringFixedLength">
      <summary>非 Unicode 字元的固定長度資料流。</summary>
    </member>
    <member name="F:System.Data.DbType.Binary">
      <summary>二進位資料的可變長度資料流，範圍在 1 和 8,000 位元組之間。</summary>
    </member>
    <member name="F:System.Data.DbType.Boolean">
      <summary>表示 <see langword="true" /> 或 <see langword="false" /> 的布林值的簡單型別。</summary>
    </member>
    <member name="F:System.Data.DbType.Byte">
      <summary>值範圍在 0 到 255 之間的 8 位元不帶正負號整數 (Unsigned Integer)。</summary>
    </member>
    <member name="F:System.Data.DbType.Currency">
      <summary>貨幣值，範圍從 -2 63 (或 -922,337,203,685,477.5808) 到 2 63 -1 (或 +922,337,203,685,477.5807)，正確率為貨幣單位的千分之十。</summary>
    </member>
    <member name="F:System.Data.DbType.Date">
      <summary>代表日期值的型別。</summary>
    </member>
    <member name="F:System.Data.DbType.DateTime">
      <summary>表示日期和時間值的型別。</summary>
    </member>
    <member name="F:System.Data.DbType.DateTime2">
      <summary>日期和時間資料。 日期值範圍是從西元後 1 年 1 月 1 日到西元後 9999 年 12 月31 日。 時間值的範圍從 00:00:00 到 23:59:59.9999999，精確度為 100 奈秒。</summary>
    </member>
    <member name="F:System.Data.DbType.DateTimeOffset">
      <summary>具備時區感知功能的日期和時間資料。 日期值範圍是從西元後 1 年 1 月 1 日到西元後 9999 年 12 月31 日。 時間值的範圍從 00:00:00 到 23:59:59.9999999，精確度為 100 奈秒。 時區值範圍從 -14:00 到 +14:00。</summary>
    </member>
    <member name="F:System.Data.DbType.Decimal">
      <summary>簡單型別，表示具有 28-29 個有效位數、範圍從 1.0 x 10 -28 到大約 7.9 x 10 28 的數值。</summary>
    </member>
    <member name="F:System.Data.DbType.Double">
      <summary>浮點型別，表示具有 15-16 位數精確度、範圍從 5.0 x 10 -324 到大約 1.7 x 10 308 的數值。</summary>
    </member>
    <member name="F:System.Data.DbType.Guid">
      <summary>全域唯一識別項 (或 GUID)。</summary>
    </member>
    <member name="F:System.Data.DbType.Int16">
      <summary>表示帶正負號的 16 位元整數的整數型別，其值介於 -32768 和 32767 之間。</summary>
    </member>
    <member name="F:System.Data.DbType.Int32">
      <summary>表示帶正負號的 32 位元整數的整數型別，其值介於 -2147483648 和 2147483647 之間。</summary>
    </member>
    <member name="F:System.Data.DbType.Int64">
      <summary>表示帶正負號的 64 位元整數的整數型別，其值介於 -9223372036854775808 和 9223372036854775807 之間。</summary>
    </member>
    <member name="F:System.Data.DbType.Object">
      <summary>表示未明確由其他 <see langword="DbType" /> 值表示的任何參考或實值型別之一般型別。</summary>
    </member>
    <member name="F:System.Data.DbType.SByte">
      <summary>表示帶正負號的 8 位元整數的整數型別，其值介於 -128 和 127 之間。</summary>
    </member>
    <member name="F:System.Data.DbType.Single">
      <summary>浮點型別，表示具有 7 位數精確度、範圍從 1.5 x 10 -45 到大約 3.4 x 10 38 的數值。</summary>
    </member>
    <member name="F:System.Data.DbType.String">
      <summary>表示 Unicode 字元字串的型別。</summary>
    </member>
    <member name="F:System.Data.DbType.StringFixedLength">
      <summary>Unicode 字元的固定長度字串。</summary>
    </member>
    <member name="F:System.Data.DbType.Time">
      <summary>型別，表示 SQL Server <see langword="DateTime" /> 值。 如果您想要使用 SQL Server <see langword="time" /> 值，請使用 <see cref="F:System.Data.SqlDbType.Time" />。</summary>
    </member>
    <member name="F:System.Data.DbType.UInt16">
      <summary>表示不帶正負號的 16 位元整數的整數型別，其值介於 0 和 65535 之間。</summary>
    </member>
    <member name="F:System.Data.DbType.UInt32">
      <summary>表示不帶正負號的 32 位元整數的整數型別，其值介於 0 和 4294967295 之間。</summary>
    </member>
    <member name="F:System.Data.DbType.UInt64">
      <summary>表示不帶正負號的 64 位元整數的整數型別，其值介於 0 和 18446744073709551615 之間。</summary>
    </member>
    <member name="F:System.Data.DbType.VarNumeric">
      <summary>可變長度數值。</summary>
    </member>
    <member name="F:System.Data.DbType.Xml">
      <summary>XML 文件或片段的剖析表示。</summary>
    </member>
    <member name="T:System.Data.DeletedRowInaccessibleException">
      <summary>表示在已經刪除的 <see cref="T:System.Data.DataRow" /> 上嘗試動作時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor">
      <summary>初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資訊，初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需要的資料。</param>
      <param name="context">來源的描述和指定的序列化資料流的目的端。</param>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.String)">
      <summary>使用指定的字串，初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 類別的新執行個體。</summary>
      <param name="s">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.DuplicateNameException">
      <summary>表示在 <see cref="T:System.Data.DataSet" /> 相關物件中的加入作業期間遭遇重複的資料庫物件時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor">
      <summary>初始化 <see cref="T:System.Data.DuplicateNameException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資訊，初始化 <see cref="T:System.Data.DuplicateNameException" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需要的資料。</param>
      <param name="context">來源的描述和指定的序列化資料流的目的端。</param>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.String)">
      <summary>使用指定的字串，初始化 <see cref="T:System.Data.DuplicateNameException" /> 類別的新執行個體。</summary>
      <param name="s">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.String,System.Exception)">
      <summary>使用指定的字串和例外狀況，初始化 <see cref="T:System.Data.DuplicateNameException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.EnumerableRowCollection">
      <summary>表示從 LINQ to DataSet 查詢所傳回之 <see cref="T:System.Data.DataRow" /> 物件的集合。 這個 API 支援 .NET Framework 基礎結構，並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="M:System.Data.EnumerableRowCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回 <see cref="T:System.Data.DataRow" /> 物件集合的列舉值。 這個 API 支援 .NET Framework 基礎結構，並不適合直接從您的程式碼中使用。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用來周遊 <see cref="T:System.Data.DataRow" /> 物件的集合。</returns>
    </member>
    <member name="T:System.Data.EnumerableRowCollection`1">
      <summary>表示從查詢所傳回之 <see cref="T:System.Data.DataRow" /> 物件的集合。</summary>
      <typeparam name="TRow">來源序列中的物件類型，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
    </member>
    <member name="M:System.Data.EnumerableRowCollection`1.GetEnumerator">
      <summary>傳回所包含之資料列物件集合的列舉值。</summary>
      <returns>強型別的 <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用來周遊 <paramref name="TRow" /> 物件的集合。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回 <see cref="T:System.Data.DataRow" /> 物件集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用來周遊 <see cref="T:System.Data.DataRow" /> 物件的集合。</returns>
    </member>
    <member name="T:System.Data.EnumerableRowCollectionExtensions">
      <summary>包含資料列集合類別的擴充方法。</summary>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Cast``1(System.Data.EnumerableRowCollection)">
      <summary>將 <see cref="T:System.Data.EnumerableRowCollection" /> 的項目轉換為指定的型別。</summary>
      <param name="source">包含要轉換之項目的 <see cref="T:System.Data.EnumerableRowCollection" />。</param>
      <typeparam name="TResult">做為來源之項目要轉換的目標型別。</typeparam>
      <returns>
        <see cref="T:System.Data.EnumerableRowCollection" />，包含已轉換成指定之型別的每個來源序列項目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">無法將序列中的項目轉換為型別 <paramref name="TResult" />。</exception>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderBy``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>依據指定的索引鍵，按遞增順序排序 <see cref="T:System.Data.EnumerableRowCollection" /> 的資料列。</summary>
      <param name="source">
        <see cref="T:System.Data.EnumerableRowCollection" />，包含要排序的 <see cref="T:System.Data.DataRow" /> 項目。</param>
      <param name="keySelector">用來從項目擷取索引鍵的函式。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中資料列項目的型別，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回之索引鍵的型別。</typeparam>
      <returns>
        <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其項目排序依據是指定的索引鍵。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderBy``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>依據指定的索引鍵和比較子，按遞增順序排序 <see cref="T:System.Data.EnumerableRowCollection" /> 的資料列。</summary>
      <param name="source">
        <see cref="T:System.Data.EnumerableRowCollection" />，包含要排序的 <see cref="T:System.Data.DataRow" /> 項目。</param>
      <param name="keySelector">用來從項目擷取索引鍵的函式。</param>
      <param name="comparer">用來比較金鑰的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中資料列項目的型別，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回之索引鍵的型別。</typeparam>
      <returns>
        <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其項目是根據指定的索引鍵和比較子進行排序。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderByDescending``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>依據指定的索引鍵，按遞減順序排序 <see cref="T:System.Data.EnumerableRowCollection" /> 的資料列。</summary>
      <param name="source">
        <see cref="T:System.Data.EnumerableRowCollection" />，包含要排序的 <see cref="T:System.Data.DataRow" /> 項目。</param>
      <param name="keySelector">用來從項目擷取索引鍵的函式。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中資料列項目的型別，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回之索引鍵的型別。</typeparam>
      <returns>
        <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其項目排序依據是指定的索引鍵。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderByDescending``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>依據指定的索引鍵和比較子，按遞減順序排序 <see cref="T:System.Data.EnumerableRowCollection" /> 的資料列。</summary>
      <param name="source">
        <see cref="T:System.Data.EnumerableRowCollection" />，包含要排序的 <see cref="T:System.Data.DataRow" /> 項目。</param>
      <param name="keySelector">用來從項目擷取索引鍵的函式。</param>
      <param name="comparer">用來比較金鑰的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中資料列項目的型別，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回之索引鍵的型別。</typeparam>
      <returns>
        <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其項目是根據指定的索引鍵和比較子進行排序。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Select``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>將 <see cref="T:System.Data.EnumerableRowCollection`1" /> 的每一個項目規劃成一個新的表單。</summary>
      <param name="source">
        <see cref="T:System.Data.EnumerableRowCollection`1" />，包含要對其叫用轉換函式的 <see cref="T:System.Data.DataRow" /> 項目。</param>
      <param name="selector">要套用至每個項目的轉換函式。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中資料列項目的型別，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="S">
        <paramref name="TRow" /> 將轉換為那種型別。</typeparam>
      <returns>
        <see cref="T:System.Data.EnumerableRowCollection`1" />，其項目是對 <paramref name="source" /> 之各個項目叫用轉換函式所產生的結果。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenBy``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>依據指定的索引鍵，按遞增順序執行 <see cref="T:System.Data.EnumerableRowCollection" /> 中資料列的次要排序作業。</summary>
      <param name="source">
        <see cref="T:System.Data.EnumerableRowCollection" />，包含要排序的 <see cref="T:System.Data.DataRow" /> 項目。</param>
      <param name="keySelector">用來從項目擷取索引鍵的函式。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中資料列項目的型別，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回之索引鍵的型別。</typeparam>
      <returns>
        <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其項目排序依據是指定的索引鍵。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenBy``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>依據指定的索引鍵和比較子，按遞增順序執行 <see cref="T:System.Data.EnumerableRowCollection" /> 中資料列的次要排序作業。</summary>
      <param name="source">
        <see cref="T:System.Data.EnumerableRowCollection" />，包含要排序的 <see cref="T:System.Data.DataRow" /> 項目。</param>
      <param name="keySelector">用來從項目擷取索引鍵的函式。</param>
      <param name="comparer">用來比較金鑰的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中資料列項目的型別，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回之索引鍵的型別。</typeparam>
      <returns>
        <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其項目是根據指定的索引鍵和比較子進行排序。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenByDescending``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>依據指定的索引鍵，按遞減順序執行 <see cref="T:System.Data.EnumerableRowCollection" /> 中資料列的次要排序作業。</summary>
      <param name="source">
        <see cref="T:System.Data.EnumerableRowCollection" />，包含要排序的 <see cref="T:System.Data.DataRow" /> 項目。</param>
      <param name="keySelector">用來從項目擷取索引鍵的函式。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中資料列項目的型別，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回之索引鍵的型別。</typeparam>
      <returns>
        <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其項目排序依據是指定的索引鍵。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenByDescending``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>依據指定的索引鍵和比較子，按遞減順序執行 <see cref="T:System.Data.EnumerableRowCollection" /> 中資料列的次要排序作業。</summary>
      <param name="source">
        <see cref="T:System.Data.EnumerableRowCollection" />，包含要排序的 <see cref="T:System.Data.DataRow" /> 項目。</param>
      <param name="keySelector">用來從項目擷取索引鍵的函式。</param>
      <param name="comparer">用來比較金鑰的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中資料列項目的型別，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回之索引鍵的型別。</typeparam>
      <returns>
        <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其項目是根據指定的索引鍵和比較子進行排序。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Where``1(System.Data.EnumerableRowCollection{``0},System.Func{``0,System.Boolean})">
      <summary>根據指定的述詞來篩選資料列序列。</summary>
      <param name="source">
        <see cref="T:System.Data.EnumerableRowCollection" />，包含要篩選的 <see cref="T:System.Data.DataRow" /> 項目。</param>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中資料列項目的型別，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <returns>
        <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其中包含輸入序列中符合條件的資料列。</returns>
    </member>
    <member name="T:System.Data.EvaluateException">
      <summary>表示無法評估 <see cref="P:System.Data.DataColumn.Expression" /> 的 <see cref="T:System.Data.DataColumn" /> 屬性時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor">
      <summary>初始化 <see cref="T:System.Data.EvaluateException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Data.EvaluateException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需的資料。</param>
      <param name="context">特定序列化資料流的來源和目的端。</param>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.String)">
      <summary>使用指定的字串，初始化 <see cref="T:System.Data.EvaluateException" /> 類別的新執行個體。</summary>
      <param name="s">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Data.EvaluateException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.FillErrorEventArgs">
      <summary>提供 <see cref="E:System.Data.Common.DataAdapter.FillError" /> 的 <see cref="T:System.Data.Common.DbDataAdapter" /> 事件的資料。</summary>
    </member>
    <member name="M:System.Data.FillErrorEventArgs.#ctor(System.Data.DataTable,System.Object[])">
      <summary>初始化 <see cref="T:System.Data.FillErrorEventArgs" /> 類別的新執行個體。</summary>
      <param name="dataTable">正在更新的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="values">正在更新的資料列值。</param>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Continue">
      <summary>取得或設定數值，表示是否要忽略錯誤來繼續填入作業。</summary>
      <returns>如果填入作業應該繼續，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.DataTable">
      <summary>取得錯誤發生時正在更新的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>正在更新的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Errors">
      <summary>取得正在處理的錯誤。</summary>
      <returns>正在處理的錯誤。</returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Values">
      <summary>取得錯誤發生時正在更新的資料列值。</summary>
      <returns>正在更新的資料列值。</returns>
    </member>
    <member name="T:System.Data.FillErrorEventHandler">
      <summary>代表將處理 <see cref="E:System.Data.Common.DataAdapter.FillError" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">包含事件資料的 <see cref="T:System.Data.FillErrorEventArgs" />。</param>
    </member>
    <member name="T:System.Data.ForeignKeyConstraint">
      <summary>表示值或資料列刪除或更新時，在主索引鍵/外部索引鍵關聯性 (Relationship) 中的資料行集上強制執行的動作限制。</summary>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.Data.DataColumn,System.Data.DataColumn)">
      <summary>使用指定的父代和子系 <see cref="T:System.Data.ForeignKeyConstraint" /> 物件，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="parentColumn">條件約束中的父代 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="childColumn">條件約束中的子系 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">資料行的其中一個或者兩個都是 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">資料行具有不同的資料型別。
-或-
資料表不屬於相同的 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>使用父代和子系 <see cref="T:System.Data.ForeignKeyConstraint" /> 物件的指定陣列，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="parentColumns">條件約束中父代 <see cref="T:System.Data.DataColumn" /> 的陣列。</param>
      <param name="childColumns">條件約束中子系 <see cref="T:System.Data.DataColumn" /> 的陣列。</param>
      <exception cref="T:System.ArgumentNullException">資料行的其中一個或者兩個都是 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">資料行具有不同的資料型別。
-或-
資料表不屬於相同的 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>使用指定名稱以及父代和子系 <see cref="T:System.Data.ForeignKeyConstraint" /> 物件，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="constraintName">條件約束的名稱。</param>
      <param name="parentColumn">條件約束中的父代 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="childColumn">條件約束中的子系 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">資料行的其中一個或者兩個都是 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">資料行具有不同的資料型別。
-或-
資料表不屬於相同的 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>使用指定名稱以及父代和子系 <see cref="T:System.Data.ForeignKeyConstraint" /> 物件的陣列，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="constraintName">
        <see cref="T:System.Data.ForeignKeyConstraint" /> 的名稱。 如果是 <see langword="null" /> 或空字串，則在加入至條件約束集合時，會指定預設的名稱。</param>
      <param name="parentColumns">條件約束中父代 <see cref="T:System.Data.DataColumn" /> 的陣列。</param>
      <param name="childColumns">條件約束中子系 <see cref="T:System.Data.DataColumn" /> 的陣列。</param>
      <exception cref="T:System.ArgumentNullException">資料行的其中一個或者兩個都是 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">資料行具有不同的資料型別。
-或-
資料表不屬於相同的 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Data.AcceptRejectRule,System.Data.Rule,System.Data.Rule)">
      <summary>這個建構函式是在 Visual Studio 環境中，針對支援設計階段而提供。 接著必須透過 <see cref="T:System.Data.ForeignKeyConstraint" />，將使用此建構函式建立的 <see cref="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])" /> 物件加入至集合中。 具有指定名稱的資料表和資料行必須在呼叫方法時便存在，如果在呼叫這個建構函式之前便已經呼叫 <see cref="M:System.Data.DataTable.BeginInit" />，則具有指定名稱的資料表和資料行必須在呼叫 <see cref="M:System.Data.DataTable.EndInit" /> 時已存在。</summary>
      <param name="constraintName">條件約束的名稱。</param>
      <param name="parentTableName">父代 (Parent) <see cref="T:System.Data.DataTable" /> 的名稱，包含條件約束 (Constraint) 中的父代 <see cref="T:System.Data.DataColumn" /> 物件。</param>
      <param name="parentTableNamespace">
        <see cref="P:System.Data.DataTable.Namespace" /> 的名稱。</param>
      <param name="parentColumnNames">條件約束中的父代 <see cref="T:System.Data.DataColumn" /> 物件的名稱陣列。</param>
      <param name="childColumnNames">條件約束中的子系 <see cref="T:System.Data.DataColumn" /> 物件的名稱陣列。</param>
      <param name="acceptRejectRule">其中一個 <see cref="T:System.Data.AcceptRejectRule" /> 值。 可能的值包括 <see langword="None" />、<see langword="Cascade" /> 和 <see langword="Default" />。</param>
      <param name="deleteRule">其中一個 <see cref="T:System.Data.Rule" /> 值，要在資料列刪除時使用。 預設為 <see langword="Cascade" />。 可能的值包括：<see langword="None" />、<see langword="Cascade" />、<see langword="SetNull" />、<see langword="SetDefault" /> 和 <see langword="Default" />。</param>
      <param name="updateRule">其中一個 <see cref="T:System.Data.Rule" /> 值，要在資料列更新時使用。 預設為 <see langword="Cascade" />。 可能的值包括：<see langword="None" />、<see langword="Cascade" />、<see langword="SetNull" />、<see langword="SetDefault" /> 和 <see langword="Default" />。</param>
      <exception cref="T:System.ArgumentNullException">資料行的其中一個或者兩個都是 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">資料行具有不同的資料型別。
-或-
資料表不屬於相同的 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.String,System.String[],System.String[],System.Data.AcceptRejectRule,System.Data.Rule,System.Data.Rule)">
      <summary>這個建構函式是在 Visual Studio 環境中，針對支援設計階段而提供。 接著必須透過 <see cref="T:System.Data.ForeignKeyConstraint" />，將使用此建構函式建立的 <see cref="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])" /> 物件加入至集合中。 具有指定名稱的資料表和資料行必須在呼叫方法時便存在，如果在呼叫這個建構函式之前便已經呼叫 <see cref="M:System.Data.DataTable.BeginInit" />，則具有指定名稱的資料表和資料行必須在呼叫 <see cref="M:System.Data.DataTable.EndInit" /> 時已存在。</summary>
      <param name="constraintName">條件約束的名稱。</param>
      <param name="parentTableName">父代 (Parent) <see cref="T:System.Data.DataTable" /> 的名稱，包含條件約束 (Constraint) 中的父代 <see cref="T:System.Data.DataColumn" /> 物件。</param>
      <param name="parentColumnNames">條件約束中的父代 <see cref="T:System.Data.DataColumn" /> 物件的名稱陣列。</param>
      <param name="childColumnNames">條件約束中的子系 <see cref="T:System.Data.DataColumn" /> 物件的名稱陣列。</param>
      <param name="acceptRejectRule">其中一個 <see cref="T:System.Data.AcceptRejectRule" /> 值。 可能的值包括 <see langword="None" />、<see langword="Cascade" /> 和 <see langword="Default" />。</param>
      <param name="deleteRule">其中一個 <see cref="T:System.Data.Rule" /> 值，要在資料列刪除時使用。 預設為 <see langword="Cascade" />。 可能的值包括：<see langword="None" />、<see langword="Cascade" />、<see langword="SetNull" />、<see langword="SetDefault" /> 和 <see langword="Default" />。</param>
      <param name="updateRule">其中一個 <see cref="T:System.Data.Rule" /> 值，要在資料列更新時使用。 預設為 <see langword="Cascade" />。 可能的值包括：<see langword="None" />、<see langword="Cascade" />、<see langword="SetNull" />、<see langword="SetDefault" /> 和 <see langword="Default" />。</param>
      <exception cref="T:System.ArgumentNullException">資料行的其中一個或者兩個都是 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">資料行具有不同的資料型別。
-或-
資料表不屬於相同的 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.AcceptRejectRule">
      <summary>指示在叫用 <see cref="M:System.Data.DataTable.AcceptChanges" /> 時應該跨越這個條件約束來發生的動作。</summary>
      <returns>其中一個 <see cref="T:System.Data.AcceptRejectRule" /> 值。 可能的值包括 <see langword="None" /> 和 <see langword="Cascade" />。 預設為 <see langword="None" />。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.Columns">
      <summary>取得這個條件約束的子資料行。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 物件 (為條件約束的子資料行) 的陣列。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.DeleteRule">
      <summary>取得或設定資料列刪除時會跨越這個條件約束發生的動作。</summary>
      <returns>其中一個 <see cref="T:System.Data.Rule" /> 值。 預設為 <see langword="Cascade" />。</returns>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.Equals(System.Object)">
      <summary>取得值，指出目前的 <see cref="T:System.Data.ForeignKeyConstraint" /> 是否與指定的物件相同。</summary>
      <param name="key">這個 <see cref="T:System.Data.ForeignKeyConstraint" /> 所要比較的物件。 如果兩個 <see cref="T:System.Data.ForeignKeyConstraint" /> 約束相同的資料行，則這兩者相等。</param>
      <returns>如果物件相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.GetHashCode">
      <summary>取得 <see cref="T:System.Data.ForeignKeyConstraint" /> 物件的這個執行個體之雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.RelatedColumns">
      <summary>這個條件約束的父資料行。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 物件 (為條件約束的父資料行) 的陣列。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.RelatedTable">
      <summary>取得這個條件約束的父資料表。</summary>
      <returns>這個條件約束的父代 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.Table">
      <summary>取得這個條件約束的子資料表。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" />，即條件約束中的子資料表。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.UpdateRule">
      <summary>取得或設定資料列更新時會跨越這個條件約束發生的動作。</summary>
      <returns>其中一個 <see cref="T:System.Data.Rule" /> 值。 預設為 <see langword="Cascade" />。</returns>
    </member>
    <member name="T:System.Data.IColumnMapping">
      <summary>將資料來源資料行與 <see cref="T:System.Data.DataSet" /> 資料行相關聯，並且由 <see cref="T:System.Data.Common.DataColumnMapping" /> 類別實作，這個類別是由 .NET Framework 資料提供者所共同使用。</summary>
    </member>
    <member name="P:System.Data.IColumnMapping.DataSetColumn">
      <summary>取得或設定在要對應的 <see cref="T:System.Data.DataSet" /> 中的目的資料行名稱。</summary>
      <returns>在要對應的 <see cref="T:System.Data.DataSet" /> 中的目的資料行名稱。 名稱不區分大小寫。</returns>
    </member>
    <member name="P:System.Data.IColumnMapping.SourceColumn">
      <summary>取得或設定在資料來源中的來源資料行名稱。 名稱區分大小寫。</summary>
      <returns>在資料來源中的資料行的區分大小寫名稱。</returns>
    </member>
    <member name="T:System.Data.IColumnMappingCollection">
      <summary>包含 DataColumnMapping 物件的集合，並且是由 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 所實作，這是由 .NET Framework 資料提供者 (Data Provider) 所共同使用。</summary>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.Add(System.String,System.String)">
      <summary>使用來源資料行和 <see cref="T:System.Data.DataSet" /> 資料行名稱來將 ColumnMapping 物件加入至 ColumnMapping 集合。</summary>
      <param name="sourceColumnName">來源資料行的區分大小寫名稱。</param>
      <param name="dataSetColumnName">
        <see cref="T:System.Data.DataSet" /> 資料行的名稱。</param>
      <returns>加入至集合的 ColumnMapping 物件。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.Contains(System.String)">
      <summary>取得值，表示 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 是否包含具有指定來源資料行名稱的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</summary>
      <param name="sourceColumnName">來源資料行的區分大小寫名稱。</param>
      <returns>如果存在具有指定來源資料行名稱的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.GetByDataSetColumn(System.String)">
      <summary>取得具有指定 <see cref="T:System.Data.DataSet" /> 資料行名稱的 ColumnMapping 物件。</summary>
      <param name="dataSetColumnName">在集合中的 <see cref="T:System.Data.DataSet" /> 資料行名稱。</param>
      <returns>具有指定 <see langword="DataSet" /> 資料行名稱的 ColumnMapping 物件。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.IndexOf(System.String)">
      <summary>取得具有指定來源資料行名稱的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件位置。 名稱區分大小寫。</summary>
      <param name="sourceColumnName">來源資料行的區分大小寫名稱。</param>
      <returns>具有指定來源資料行名稱的 <see langword="DataColumnMapping" /> 物件之以零起始的位置。</returns>
    </member>
    <member name="P:System.Data.IColumnMappingCollection.Item(System.String)">
      <summary>取得或設定具有指定 <see langword="SourceColumn" /> 名稱的 <see cref="T:System.Data.IColumnMapping" /> 物件。</summary>
      <param name="index">要尋找的 <see langword="SourceColumn" /> 物件之 <see langword="IColumnMapping" /> 名稱。</param>
      <returns>具有指定 <see langword="IColumnMapping" /> 名稱的 <see langword="SourceColumn" /> 物件。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.RemoveAt(System.String)">
      <summary>從集合中移除具有指定 <see cref="T:System.Data.IColumnMapping" /> 名稱的 <see cref="P:System.Data.IColumnMapping.SourceColumn" /> 物件。</summary>
      <param name="sourceColumnName">區分大小寫的 <see langword="SourceColumn" /> 名稱。</param>
      <exception cref="T:System.IndexOutOfRangeException">不存在具有指定 <see langword="SourceColumn" /> 名稱的 <see cref="T:System.Data.Common.DataColumnMapping" /> 物件。</exception>
    </member>
    <member name="T:System.Data.IDataAdapter">
      <summary>允許物件實作 DataAdapter，並表示用來填滿和更新 <see cref="T:System.Data.DataSet" /> 並更新資料來源的方法集和對應動作相關屬性集。
<see cref="T:System.Data.IDbDataAdapter" /> 執行個體適用於本身為 (或類似於) 採用文字命令 (例如 Transact-SQL) 之關聯式資料庫的資料來源，而 <see cref="T:System.Data.IDataAdapter" /> 執行個體則可以使用任何類型的資料來源。</summary>
    </member>
    <member name="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)">
      <summary>使用 <see cref="T:System.Data.DataSet" /> 名稱，加入或更新 <see cref="T:System.Data.DataSet" /> 中的資料列，以符合那些在資料來源中的資料列，並建立命名為 "Table" 的 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="dataSet">要填入資料錄和結構描述 (如果必要的話) 的 <see cref="T:System.Data.DataSet" />。</param>
      <returns>成功加入至 <see cref="T:System.Data.DataSet" /> 或在其中重新整理的資料列數目。 這不包含被不傳回資料列之陳述式所影響的資料列。</returns>
    </member>
    <member name="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>新增一個名為 "Table" 的 <see cref="T:System.Data.DataTable" /> 至指定的 <see cref="T:System.Data.DataSet" />，並且設定符合指定的 <see cref="T:System.Data.SchemaType" /> 上之資料來源的結構描述。</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" />，以資料來源中的結構描述來填入其中。</param>
      <param name="schemaType">其中一個 <see cref="T:System.Data.SchemaType" /> 值。</param>
      <returns>
        <see cref="T:System.Data.DataTable" /> 物件的陣列，包含從資料來源傳回的結構描述資訊。</returns>
    </member>
    <member name="M:System.Data.IDataAdapter.GetFillParameters">
      <summary>取得在執行 SQL SELECT 陳述式時由使用者設定的參數。</summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 物件的陣列，含有由使用者設定的參數。</returns>
    </member>
    <member name="P:System.Data.IDataAdapter.MissingMappingAction">
      <summary>指示或指定未對應的來源資料表或資料行是否為了篩選或引發錯誤，而使用它們的來源名稱傳遞。</summary>
      <returns>其中一個 <see cref="T:System.Data.MissingMappingAction" /> 值。 預設為 <see langword="Passthrough" />。</returns>
      <exception cref="T:System.ArgumentException">設定的值不是其中一個 <see cref="T:System.Data.MissingMappingAction" /> 值。</exception>
    </member>
    <member name="P:System.Data.IDataAdapter.MissingSchemaAction">
      <summary>指示或指定遺漏的來源資料表、資料行和關聯性 (Relationship) 是否加入至資料集結構描述 (Schema)、已忽略，或造成要引發的錯誤。</summary>
      <returns>其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。 預設為 <see langword="Add" />。</returns>
      <exception cref="T:System.ArgumentException">設定的值不是其中一個 <see cref="T:System.Data.MissingSchemaAction" /> 值。</exception>
    </member>
    <member name="P:System.Data.IDataAdapter.TableMappings">
      <summary>指示來源資料表如何對應至資料集資料表。</summary>
      <returns>集合，提供傳回的資料錄和 <see cref="T:System.Data.DataSet" /> 之間的主要對應。 預設值為空集合。</returns>
    </member>
    <member name="M:System.Data.IDataAdapter.Update(System.Data.DataSet)">
      <summary>從命名為 "Table" 之 <see cref="T:System.Data.DataSet" /> 的指定 <see cref="T:System.Data.DataTable" /> 中，為每個插入、更新或刪除的資料列呼叫對應的 INSERT、UPDATE 或 DELETE 陳述式。</summary>
      <param name="dataSet">用來更新資料來源的 <see cref="T:System.Data.DataSet" />。</param>
      <returns>自 <see cref="T:System.Data.DataSet" /> 中成功更新的資料列數目。</returns>
      <exception cref="T:System.Data.DBConcurrencyException">嘗試執行 INSERT、UPDATE 或 DELETE 陳述式會造成沒有資料錄受影響。</exception>
    </member>
    <member name="T:System.Data.IDataParameter">
      <summary>代表 Command 物件的參數及 (選擇性) 其與 <see cref="T:System.Data.DataSet" /> 資料行的對應，而且是由存取資料來源的 .NET Framework 資料提供者所實作。</summary>
    </member>
    <member name="P:System.Data.IDataParameter.DbType">
      <summary>取得或設定參數的 <see cref="T:System.Data.DbType" />。</summary>
      <returns>其中一個 <see cref="T:System.Data.DbType" /> 值。 預設為 <see cref="F:System.Data.DbType.String" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性並未設定為有效的 <see cref="T:System.Data.DbType" />。</exception>
    </member>
    <member name="P:System.Data.IDataParameter.Direction">
      <summary>取得或設定值，表示參數是僅限輸入、僅限輸出、雙向或預存程序傳回值參數。</summary>
      <returns>其中一個 <see cref="T:System.Data.ParameterDirection" /> 值。 預設為 <see langword="Input" />。</returns>
      <exception cref="T:System.ArgumentException">屬性未設定為其中一個有效的 <see cref="T:System.Data.ParameterDirection" /> 值。</exception>
    </member>
    <member name="P:System.Data.IDataParameter.IsNullable">
      <summary>取得值，這個值指出參數是否接受 Null 值。</summary>
      <returns>如果接受 Null 值，則為 <see langword="true" />；否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.IDataParameter.ParameterName">
      <summary>取得或設定 <see cref="T:System.Data.IDataParameter" /> 的名稱。</summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 的名稱。 預設為空字串。</returns>
    </member>
    <member name="P:System.Data.IDataParameter.SourceColumn">
      <summary>取得或設定來源資料行的名稱，其對應至 <see cref="T:System.Data.DataSet" /> 並用於載入或傳回 <see cref="P:System.Data.IDataParameter.Value" />。</summary>
      <returns>對應至 <see cref="T:System.Data.DataSet" /> 的來源資料行名稱。 預設為空字串。</returns>
    </member>
    <member name="P:System.Data.IDataParameter.SourceVersion">
      <summary>取得或設定 <see cref="T:System.Data.DataRowVersion" />，以在載入 <see cref="P:System.Data.IDataParameter.Value" /> 時使用。</summary>
      <returns>其中一個 <see cref="T:System.Data.DataRowVersion" /> 值。 預設為 <see langword="Current" />。</returns>
      <exception cref="T:System.ArgumentException">屬性未設定為其中一個 <see cref="T:System.Data.DataRowVersion" /> 值。</exception>
    </member>
    <member name="P:System.Data.IDataParameter.Value">
      <summary>取得或設定參數的值。</summary>
      <returns>
        <see cref="T:System.Object" />，為參數的值。 預設值為 null。</returns>
    </member>
    <member name="T:System.Data.IDataParameterCollection">
      <summary>收集所有與 Command 物件相關的參數及其與 <see cref="T:System.Data.DataSet" /> 資料行的對應，而且是由存取資料來源的 .NET Framework 資料提供者所實作。</summary>
    </member>
    <member name="M:System.Data.IDataParameterCollection.Contains(System.String)">
      <summary>取得值，表示集合中的參數是否具有指定的名稱。</summary>
      <param name="parameterName">參數名稱。</param>
      <returns>如果集合包含該參數，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.IDataParameterCollection.IndexOf(System.String)">
      <summary>取得集合中 <see cref="T:System.Data.IDataParameter" /> 的位置。</summary>
      <param name="parameterName">參數名稱。</param>
      <returns>集合中 <see cref="T:System.Data.IDataParameter" /> 以零為起始的位置。</returns>
    </member>
    <member name="P:System.Data.IDataParameterCollection.Item(System.String)">
      <summary>在指定索引位置上取得或設定參數。</summary>
      <param name="parameterName">要擷取的參數名稱。</param>
      <returns>位於指定索引位置上的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Data.IDataParameterCollection.RemoveAt(System.String)">
      <summary>從集合中移除 <see cref="T:System.Data.IDataParameter" />。</summary>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="T:System.Data.IDataReader">
      <summary>提供一種方法來讀取一或多個順向的結果集資料流 (這些結果集是在資料來源上執行命令而獲得的)，而且是由存取關聯式資料庫的 .NET Framework 資料提供者所實作。</summary>
    </member>
    <member name="M:System.Data.IDataReader.Close">
      <summary>關閉 <see cref="T:System.Data.IDataReader" /> 物件。</summary>
    </member>
    <member name="P:System.Data.IDataReader.Depth">
      <summary>取得值，表示目前資料列的巢狀深度。</summary>
      <returns>巢狀層級。</returns>
    </member>
    <member name="M:System.Data.IDataReader.GetSchemaTable">
      <summary>傳回 <see cref="T:System.Data.DataTable" />，以描述 <see cref="T:System.Data.IDataReader" /> 的資料行中繼資料。</summary>
      <returns>描述資料行中繼資料的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.IDataReader" /> 已關閉。</exception>
    </member>
    <member name="P:System.Data.IDataReader.IsClosed">
      <summary>取得值，指出資料讀取器是否已關閉。</summary>
      <returns>如果資料讀取器已關閉，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.IDataReader.NextResult">
      <summary>在讀取批次 SQL 陳述式的結果時，會將資料讀取器向前移到下一個結果。</summary>
      <returns>如果有多個資料列，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.IDataReader.Read">
      <summary>將 <see cref="T:System.Data.IDataReader" /> 推進到下一筆記錄。</summary>
      <returns>如果有多個資料列，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.IDataReader.RecordsAffected">
      <summary>取得因執行 SQL 陳述式所變更、插入或刪除的資料列數目。</summary>
      <returns>已變更、插入或刪除的資料列數目；如果沒有任何資料列受到影響或陳述式失敗，則為 0；如果是 SELECT 陳述式，則為 -1。</returns>
    </member>
    <member name="T:System.Data.IDataRecord">
      <summary>針對 <see langword="DataReader" /> 提供存取每個資料列中資料行值的權限，而且是由存取關聯式資料庫的 .NET Framework 資料提供者所實作。</summary>
    </member>
    <member name="P:System.Data.IDataRecord.FieldCount">
      <summary>取得目前資料列中的資料行數目。</summary>
      <returns>若未置於有效的資料集中，則為 0；否則為目前記錄中的資料行數目。 預設值為 -1。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetBoolean(System.Int32)">
      <summary>取得指定之資料行的值做為布林值 (Boolean)。</summary>
      <param name="i">以零為基底的資料行序數。</param>
      <returns>資料行的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetByte(System.Int32)">
      <summary>取得指定資料行的 8 位元不帶正負號的整數值。</summary>
      <param name="i">以零為基底的資料行序數。</param>
      <returns>指定資料行的 8 位元不帶正負號的整數值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>從指定的緩衝區位移開始，將來自指定資料行位移的位元組資料流讀取到緩衝區以做為陣列。</summary>
      <param name="i">以零為基底的資料行序數。</param>
      <param name="fieldOffset">要開始讀取作業之欄位中的索引。</param>
      <param name="buffer">要將位元組資料流讀取到其中的緩衝區。</param>
      <param name="bufferoffset">要開始讀取作業的 <paramref name="buffer" /> 索引。</param>
      <param name="length">要讀取的位元組數。</param>
      <returns>讀取的實際位元組數目。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetChar(System.Int32)">
      <summary>取得指定資料行的字元值。</summary>
      <param name="i">以零為基底的資料行序數。</param>
      <returns>指定資料行的字元值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>從指定的緩衝區位移開始，將來自指定資料行位移的字元資料流讀取到緩衝區以做為陣列。</summary>
      <param name="i">以零為基底的資料行序數。</param>
      <param name="fieldoffset">要開始讀取作業之資料列中的索引。</param>
      <param name="buffer">要將位元組資料流讀取到其中的緩衝區。</param>
      <param name="bufferoffset">要開始讀取作業的 <paramref name="buffer" /> 索引。</param>
      <param name="length">要讀取的位元組數。</param>
      <returns>讀取的實際字元數目。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetData(System.Int32)">
      <summary>傳回指定之資料行序數的 <see cref="T:System.Data.IDataReader" />。</summary>
      <param name="i">要尋找的欄位索引。</param>
      <returns>指定之資料行序數的 <see cref="T:System.Data.IDataReader" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetDataTypeName(System.Int32)">
      <summary>取得指定欄位的資料類型資訊。</summary>
      <param name="i">要尋找的欄位索引。</param>
      <returns>指定欄位的資料類型資訊。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetDateTime(System.Int32)">
      <summary>取得指定欄位的日期和時間資料值。</summary>
      <param name="i">要尋找的欄位索引。</param>
      <returns>指定欄位的日期和時間資料值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetDecimal(System.Int32)">
      <summary>取得指定欄位的固定位置數值。</summary>
      <param name="i">要尋找的欄位索引。</param>
      <returns>指定欄位的固定位置數值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetDouble(System.Int32)">
      <summary>取得指定欄位的雙精確度浮點數。</summary>
      <param name="i">要尋找的欄位索引。</param>
      <returns>指定欄位的雙精確度浮點數。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetFieldType(System.Int32)">
      <summary>取得對應至 <see cref="T:System.Object" /> 類型的 <see cref="T:System.Type" /> 資訊，前者是從 <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" /> 所傳回。</summary>
      <param name="i">要尋找的欄位索引。</param>
      <returns>對應至 <see cref="T:System.Object" /> 類型的 <see cref="T:System.Type" /> 資訊，前者是從 <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" /> 所傳回。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetFloat(System.Int32)">
      <summary>取得指定欄位的單精確度浮點數。</summary>
      <param name="i">要尋找的欄位索引。</param>
      <returns>指定欄位的單精確度浮點數。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetGuid(System.Int32)">
      <summary>傳回指定欄位的 GUID 值。</summary>
      <param name="i">要尋找的欄位索引。</param>
      <returns>指定欄位的 GUID 值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt16(System.Int32)">
      <summary>取得指定欄位的 16 位元帶正負號的整數值。</summary>
      <param name="i">要尋找的欄位索引。</param>
      <returns>指定欄位的 16 位元帶正負號的整數值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt32(System.Int32)">
      <summary>取得指定欄位的 32 位元帶正負號的整數值。</summary>
      <param name="i">要尋找的欄位索引。</param>
      <returns>指定欄位的 32 位元帶正負號的整數值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt64(System.Int32)">
      <summary>取得指定欄位的 64 位元帶正負號的整數值。</summary>
      <param name="i">要尋找的欄位索引。</param>
      <returns>指定欄位的 64 位元帶正負號的整數值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetName(System.Int32)">
      <summary>取得要尋找的欄位名稱。</summary>
      <param name="i">要尋找的欄位索引。</param>
      <returns>欄位名稱，或者如果沒有傳回值，則為空字串 ("")。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetOrdinal(System.String)">
      <summary>傳回具名欄位的索引。</summary>
      <param name="name">要尋找的欄位名稱。</param>
      <returns>具名欄位的索引。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetString(System.Int32)">
      <summary>取得指定欄位的字串值。</summary>
      <param name="i">要尋找的欄位索引。</param>
      <returns>指定欄位的字串值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetValue(System.Int32)">
      <summary>傳回指定欄位的值。</summary>
      <param name="i">要尋找的欄位索引。</param>
      <returns>
        <see cref="T:System.Object" />，其中將包含所傳回的欄位值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetValues(System.Object[])">
      <summary>使用目前記錄的資料行值填入物件的陣列。</summary>
      <param name="values">要將屬性欄位複製到其中的 <see cref="T:System.Object" /> 陣列。</param>
      <returns>陣列中 <see cref="T:System.Object" /> 的執行個體數目。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.IsDBNull(System.Int32)">
      <summary>傳回指定的欄位是否設定為 Null。</summary>
      <param name="i">要尋找的欄位索引。</param>
      <returns>如果指定的欄位已設為 Null，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="P:System.Data.IDataRecord.Item(System.Int32)">
      <summary>取得位於指定索引位置的資料行。</summary>
      <param name="i">要取得的資料行中以零為起始的索引。</param>
      <returns>位於指定索引位置的資料行以做為 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳遞的索引超出 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的範圍。</exception>
    </member>
    <member name="P:System.Data.IDataRecord.Item(System.String)">
      <summary>取得具有指定名稱的資料行。</summary>
      <param name="name">要尋找的資料行名稱。</param>
      <returns>具有指定名稱的資料行，以做為 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">找不到具有指定名稱的資料行。</exception>
    </member>
    <member name="T:System.Data.IDbCommand">
      <summary>代表在連接至資料來源時執行的 SQL 陳述式，而且是由存取關聯式資料庫的 .NET Framework 資料提供者所實作。</summary>
    </member>
    <member name="M:System.Data.IDbCommand.Cancel">
      <summary>嘗試取消 <see cref="T:System.Data.IDbCommand" /> 的執行。</summary>
    </member>
    <member name="P:System.Data.IDbCommand.CommandText">
      <summary>取得或設定要對資料來源執行的文字命令。</summary>
      <returns>要執行的文字命令。 預設值為空字串 ("")。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.CommandTimeout">
      <summary>取得或設定結束執行命令的嘗試並產生錯誤之前的等待時間 (以秒為單位)。</summary>
      <returns>等待命令執行的時間 (以秒為單位)。 預設值為 30 秒。</returns>
      <exception cref="T:System.ArgumentException">指派的屬性值小於 0。</exception>
    </member>
    <member name="P:System.Data.IDbCommand.CommandType">
      <summary>指示或指定 <see cref="P:System.Data.IDbCommand.CommandText" /> 屬性應如何解譯。</summary>
      <returns>其中一個 <see cref="T:System.Data.CommandType" /> 值。 預設為 <see langword="Text" />。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.Connection">
      <summary>取得或設定 <see cref="T:System.Data.IDbCommand" /> 的這個執行個體所使用的 <see cref="T:System.Data.IDbConnection" />。</summary>
      <returns>與資料來源的連接。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.CreateParameter">
      <summary>建立 <see cref="T:System.Data.IDbDataParameter" /> 物件的新執行個體。</summary>
      <returns>
        <see langword="IDbDataParameter" /> 物件。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteNonQuery">
      <summary>針對 .NET Framework 資料提供者的 <see langword="Connection" /> 物件執行 SQL 陳述式，並傳回受影響的資料列數目。</summary>
      <returns>受影響的資料列數目。</returns>
      <exception cref="T:System.InvalidOperationException">連接不存在。
-或-
連接未開啟。</exception>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteReader">
      <summary>針對 <see cref="P:System.Data.IDbCommand.Connection" /> 執行 <see cref="P:System.Data.IDbCommand.CommandText" />，並建置 <see cref="T:System.Data.IDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 物件。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>針對 <see cref="P:System.Data.IDbCommand.Connection" /> 執行 <see cref="P:System.Data.IDbCommand.CommandText" />，並使用其中一個 <see cref="T:System.Data.CommandBehavior" /> 值來建置 <see cref="T:System.Data.IDataReader" />。</summary>
      <param name="behavior">其中一個 <see cref="T:System.Data.CommandBehavior" /> 值。</param>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 物件。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteScalar">
      <summary>執行查詢，並傳回查詢所傳回的結果集中第一個資料列的第一個資料行。 額外的資料行或資料列都會遭到忽略。</summary>
      <returns>結果集中第一個資料列的第一個資料行。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.Parameters">
      <summary>取得 <see cref="T:System.Data.IDataParameterCollection" />。</summary>
      <returns>SQL 陳述式或預存程序的參數。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.Prepare">
      <summary>在資料來源上建立命令已備妥 (或已編譯) 的版本。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> 未設定。
-或-
<see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> 不是 <see cref="M:System.Data.OleDb.OleDbConnection.Open" />。</exception>
    </member>
    <member name="P:System.Data.IDbCommand.Transaction">
      <summary>取得或設定 .NET Framework 資料提供者的 <see langword="Command" /> 物件會在其中執行的交易。</summary>
      <returns>.NET Framework 資料提供者執行的 <see langword="Command" /> 物件。 預設值為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.UpdatedRowSource">
      <summary>取得或設定由 <see cref="T:System.Data.DataRow" /> 的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 方法使用命令結果時，如何將其套用至 <see cref="T:System.Data.Common.DbDataAdapter" />。</summary>
      <returns>其中一個 <see cref="T:System.Data.UpdateRowSource" /> 值。 除非會自動產生命令，否則預設值為 <see langword="Both" />。 預設值為 <see langword="None" />。</returns>
      <exception cref="T:System.ArgumentException">輸入的值不是其中一個 <see cref="T:System.Data.UpdateRowSource" /> 值。</exception>
    </member>
    <member name="T:System.Data.IDbConnection">
      <summary>代表連至資料來源的開放連線，而且是由存取關聯式資料庫的 .NET Framework 資料提供者所實作。</summary>
    </member>
    <member name="M:System.Data.IDbConnection.BeginTransaction">
      <summary>開始資料庫異動。</summary>
      <returns>代表新異動的物件。</returns>
    </member>
    <member name="M:System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>使用指定的 <see cref="T:System.Data.IsolationLevel" /> 值來開始資料庫交易。</summary>
      <param name="il">其中一個 <see cref="T:System.Data.IsolationLevel" /> 值。</param>
      <returns>代表新異動的物件。</returns>
    </member>
    <member name="M:System.Data.IDbConnection.ChangeDatabase(System.String)">
      <summary>為開啟的 <see langword="Connection" /> 物件變更目前的資料庫。</summary>
      <param name="databaseName">用於代替目前資料庫的資料庫名稱。</param>
    </member>
    <member name="M:System.Data.IDbConnection.Close">
      <summary>關閉與資料庫的連接。</summary>
    </member>
    <member name="P:System.Data.IDbConnection.ConnectionString">
      <summary>取得或設定用來開啟資料庫的字串。</summary>
      <returns>包含連線設定的字串。</returns>
    </member>
    <member name="P:System.Data.IDbConnection.ConnectionTimeout">
      <summary>取得在終止嘗試並產生錯誤前嘗試建立連接的等待時間 (以秒為單位)。</summary>
      <returns>等待連接開啟的時間 (以秒為單位)。 預設值為 15 秒。</returns>
    </member>
    <member name="M:System.Data.IDbConnection.CreateCommand">
      <summary>建立並傳回與連線相關聯的 Command 物件。</summary>
      <returns>與連線相關聯的 Command 物件。</returns>
    </member>
    <member name="P:System.Data.IDbConnection.Database">
      <summary>取得目前資料庫或要在連接開啟之後使用的資料庫名稱。</summary>
      <returns>目前資料庫的名稱或連接開啟後要使用之資料庫的名稱。 預設值為空字串。</returns>
    </member>
    <member name="M:System.Data.IDbConnection.Open">
      <summary>使用提供者特定 Connection 物件的 <see langword="ConnectionString" /> 屬性所指定的設定來開啟資料庫連接。</summary>
    </member>
    <member name="P:System.Data.IDbConnection.State">
      <summary>取得連線目前的狀態。</summary>
      <returns>其中一個 <see cref="T:System.Data.ConnectionState" /> 值。</returns>
    </member>
    <member name="T:System.Data.IDbDataAdapter">
      <summary>表示與命令相關的屬性集，這些屬性是用來填入 <see cref="T:System.Data.DataSet" /> 並更新資料來源，並且由存取關聯式資料庫的 .NET Framework 資料提供者所實作。</summary>
    </member>
    <member name="P:System.Data.IDbDataAdapter.DeleteCommand">
      <summary>取得或設定 SQL 陳述式從資料集刪除資料錄。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />，在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 期間用來為資料集中所刪除的資料列刪除在資料來源中的資料錄。</returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.InsertCommand">
      <summary>取得或設定用來將新的資料錄插入至資料來源的 SQL 陳述式。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />，在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 期間用來為資料集中新的資料列插入在資料來源中的資料錄。</returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.SelectCommand">
      <summary>取得或設定用來在資料來源中選取資料錄的 SQL 陳述式。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />，在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 期間用來為資料集中的位置從資料來源選取資料錄。</returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.UpdateCommand">
      <summary>取得或設定用來在資料來源中更新資料錄的 SQL 陳述式。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />，在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 期間用來為資料集中所修改的資料列更新在資料來源中的資料錄。</returns>
    </member>
    <member name="T:System.Data.IDbDataParameter">
      <summary>Visual Basic.NET 資料設計工具用來代表 Command 物件的參數，以及選擇性地代表其與 <see cref="T:System.Data.DataSet" /> 資料行的對應。</summary>
    </member>
    <member name="P:System.Data.IDbDataParameter.Precision">
      <summary>表示數值參數的整數位數。</summary>
      <returns>用來表示資料提供者 Parameter 物件的 Value 屬性的最大位數。 預設值是 0，表示資料提供者會設定 Value 的整數位數。</returns>
    </member>
    <member name="P:System.Data.IDbDataParameter.Scale">
      <summary>表示數值參數的小數位數。</summary>
      <returns>
        <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 所解析的小數點位數。 預設值為 0。</returns>
    </member>
    <member name="P:System.Data.IDbDataParameter.Size">
      <summary>參數的大小。</summary>
      <returns>資料行中資料的最大大小 (以位元組為單位)。 預設值是由參數值推斷。</returns>
    </member>
    <member name="T:System.Data.IDbTransaction">
      <summary>代表要在資料來源上執行的交易，而且是由存取關聯式資料庫的 .NET Framework 資料提供者所實作。</summary>
    </member>
    <member name="M:System.Data.IDbTransaction.Commit">
      <summary>認可資料庫交易。</summary>
      <exception cref="T:System.Exception">嘗試認可交易時發生錯誤。</exception>
      <exception cref="T:System.InvalidOperationException">已認可或復原交易。
-或-
連線已中斷。</exception>
    </member>
    <member name="P:System.Data.IDbTransaction.Connection">
      <summary>指定要與交易產生關聯的連接物件。</summary>
      <returns>要與交易產生關聯的連接物件。</returns>
    </member>
    <member name="P:System.Data.IDbTransaction.IsolationLevel">
      <summary>指定適用於此交易的 <see cref="T:System.Data.IsolationLevel" />。</summary>
      <returns>適用於此交易的 <see cref="T:System.Data.IsolationLevel" />。 預設為 <see langword="ReadCommitted" />。</returns>
    </member>
    <member name="M:System.Data.IDbTransaction.Rollback">
      <summary>從暫止狀態復原交易。</summary>
      <exception cref="T:System.Exception">嘗試認可交易時發生錯誤。</exception>
      <exception cref="T:System.InvalidOperationException">已認可或復原交易。
-或-
連線已中斷。</exception>
    </member>
    <member name="T:System.Data.InRowChangingEventException">
      <summary>表示呼叫 <see cref="M:System.Data.DataRow.EndEdit" /> 事件內的 <see cref="E:System.Data.DataTable.RowChanging" /> 方法時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor">
      <summary>初始化 <see cref="T:System.Data.InRowChangingEventException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資訊，初始化 <see cref="T:System.Data.InRowChangingEventException" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需要的資料。</param>
      <param name="context">來源的描述和指定的序列化資料流的目的端。</param>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.String)">
      <summary>使用指定的字串，初始化 <see cref="T:System.Data.InRowChangingEventException" /> 類別的新執行個體。</summary>
      <param name="s">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Data.InRowChangingEventException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.InternalDataCollectionBase">
      <summary>提供建立集合的基底功能。</summary>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.#ctor">
      <summary>初始化 <see cref="T:System.Data.InternalDataCollectionBase" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.CopyTo(System.Array,System.Int32)">
      <summary>複製目前 <see cref="T:System.Data.InternalDataCollectionBase" /> 的所有項目至一維 <see cref="T:System.Array" />，開始於指定的 <see cref="T:System.Data.InternalDataCollectionBase" /> 索引。</summary>
      <param name="ar">要複製目前 <see cref="T:System.Array" /> 物件項目的目的一維 <see cref="T:System.Data.InternalDataCollectionBase" />。</param>
      <param name="index">要開始複製的目的端 <see cref="T:System.Array" /> 索引。</param>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.Count">
      <summary>取得集合中的項目總數。</summary>
      <returns>集合中的項目總數。</returns>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.GetEnumerator">
      <summary>取得集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.IsReadOnly">
      <summary>取得值，這個值表示 <see cref="T:System.Data.InternalDataCollectionBase" /> 是否為唯讀。</summary>
      <returns>如果集合是唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.IsSynchronized">
      <summary>取得值，表示 <see cref="T:System.Data.InternalDataCollectionBase" /> 是否同步處理。</summary>
      <returns>如果集合已同步處理，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.List">
      <summary>取得集合的項目做為清單。</summary>
      <returns>包含集合的 <see cref="T:System.Collections.ArrayList" />。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.SyncRoot">
      <summary>取得可以用來同步集合的物件。</summary>
      <returns>用來同步處理集合的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Data.InvalidConstraintException">
      <summary>表示錯誤嘗試建立或存取關聯時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor">
      <summary>初始化 <see cref="T:System.Data.InvalidConstraintException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資訊，初始化 <see cref="T:System.Data.InvalidConstraintException" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需要的資料。</param>
      <param name="context">來源的描述和指定的序列化資料流的目的端。</param>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.String)">
      <summary>使用指定的字串，初始化 <see cref="T:System.Data.InvalidConstraintException" /> 類別的新執行個體。</summary>
      <param name="s">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Data.InvalidConstraintException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.InvalidExpressionException">
      <summary>表示在嘗試將含有無效之 <see cref="T:System.Data.DataColumn" /> 的 <see cref="P:System.Data.DataColumn.Expression" /> 加入至 <see cref="T:System.Data.DataColumnCollection" /> 時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor">
      <summary>初始化 <see cref="T:System.Data.InvalidExpressionException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Data.InvalidExpressionException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需的資料。</param>
      <param name="context">指定的序列化資料流的來源和目的端。</param>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.String)">
      <summary>使用指定的字串，初始化 <see cref="T:System.Data.InvalidExpressionException" /> 類別的新執行個體。</summary>
      <param name="s">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Data.InvalidExpressionException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.IsolationLevel">
      <summary>指定連接的異動鎖定行為。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Chaos">
      <summary>無法覆寫來自隔離程度更深之交易的暫止變更。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.ReadCommitted">
      <summary>當正在讀取資料來避免 Dirty 讀取時，會使用共用鎖定，但是在異動結束之前，資料可以變更，這將會產生非重複讀取或虛設資料。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.ReadUncommitted">
      <summary>可以進行 Dirty 讀取，這表示未發出共用鎖定，並且沒有生效的獨佔鎖定。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.RepeatableRead">
      <summary>鎖定是加諸於查詢中使用的所有資料，以防止其他使用者更新資料。 防止非重複讀取，但是仍然可能造成虛設資料列。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Serializable">
      <summary>範圍鎖定會置於 <see cref="T:System.Data.DataSet" /> 上，以免其他使用者在異動完成前將資料列更新或插入至資料集中。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Snapshot">
      <summary>在其他應用程式正在修改相同資料時，儲存應用程式可以讀取的資料版本，藉此減少封鎖。 指出即使重新查詢，您也無法從某個異動看到在其他異動中所產生的變更。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Unspecified">
      <summary>使用與指定不同的隔離等級，但無法判斷該等級。</summary>
    </member>
    <member name="T:System.Data.ITableMapping">
      <summary>將來源資料表和 <see cref="T:System.Data.DataSet" /> 中的資料表相關聯，並且由 .NET Framework 資料提供者 (Data Provider) 共同使用的 <see cref="T:System.Data.Common.DataTableMapping" /> 類別來實作。</summary>
    </member>
    <member name="P:System.Data.ITableMapping.ColumnMappings">
      <summary>為 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 取得衍生的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>資料行對應的集合。</returns>
    </member>
    <member name="P:System.Data.ITableMapping.DataSetTable">
      <summary>取得或設定在 <see cref="T:System.Data.DataSet" /> 中資料表的不區分大小寫名稱。</summary>
      <returns>在 <see cref="T:System.Data.DataSet" /> 中資料表的不區分大小寫名稱。</returns>
    </member>
    <member name="P:System.Data.ITableMapping.SourceTable">
      <summary>取得或設定來源資料表的區分大小寫名稱。</summary>
      <returns>來源資料表的區分大小寫名稱。</returns>
    </member>
    <member name="T:System.Data.ITableMappingCollection">
      <summary>含有 TableMapping 物件的集合，並且是由 .NET Framework 資料提供者 (Data Provider) 共同使用的 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 所實作。</summary>
    </member>
    <member name="M:System.Data.ITableMappingCollection.Add(System.String,System.String)">
      <summary>加入資料表對應至集合。</summary>
      <param name="sourceTableName">來源資料表的區分大小寫名稱。</param>
      <param name="dataSetTableName">
        <see cref="T:System.Data.DataSet" /> 資料表的名稱。</param>
      <returns>新對應 <see cref="T:System.Data.ITableMapping" /> 物件的參考。</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.Contains(System.String)">
      <summary>取得值，表示集合是否包含具有指定來源資料表名稱的資料表對應。</summary>
      <param name="sourceTableName">來源資料表的區分大小寫名稱。</param>
      <returns>如果存在具有指定來源資料行名稱的資料表對應，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.GetByDataSetTable(System.String)">
      <summary>取得具有指定 <see cref="T:System.Data.DataSet" /> 資料表名稱的 TableMapping 物件。</summary>
      <param name="dataSetTableName">在集合中的 <see langword="DataSet" /> 資料表名稱。</param>
      <returns>具有指定 <see langword="DataSet" /> 資料表名稱的 TableMapping 物件。</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.IndexOf(System.String)">
      <summary>取得集合中 <see cref="T:System.Data.ITableMapping" /> 物件的位置。</summary>
      <param name="sourceTableName">來源資料表的區分大小寫名稱。</param>
      <returns>集合中 <see cref="T:System.Data.ITableMapping" /> 物件的以零起始位置。</returns>
    </member>
    <member name="P:System.Data.ITableMappingCollection.Item(System.String)">
      <summary>取得或設定具有指定 <see cref="T:System.Data.ITableMapping" /> 名稱之 <see cref="P:System.Data.ITableMapping.SourceTable" /> 的執行個體。</summary>
      <param name="index">
        <see cref="T:System.Data.ITableMapping" /> 的 <see langword="SourceTable" /> 名稱。</param>
      <returns>具有指定 <see langword="SourceTable" /> 名稱之 <see cref="T:System.Data.ITableMapping" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.RemoveAt(System.String)">
      <summary>從集合中移除具有指定 <see cref="T:System.Data.ITableMapping" /> 名稱的 <see cref="P:System.Data.ITableMapping.SourceTable" /> 物件。</summary>
      <param name="sourceTableName">
        <see langword="SourceTable" /> 的區分大小寫名稱。</param>
    </member>
    <member name="T:System.Data.KeyRestrictionBehavior">
      <summary>識別由 <see langword="KeyRestrictions" /> 屬性識別之連接字串 (Connection String) 參數 (允許或不允許) 的清單。</summary>
    </member>
    <member name="F:System.Data.KeyRestrictionBehavior.AllowOnly">
      <summary>預設值： 識別唯一允許的額外連接字串參數。</summary>
    </member>
    <member name="F:System.Data.KeyRestrictionBehavior.PreventUsage">
      <summary>識別不允許的額外連接字串參數。</summary>
    </member>
    <member name="T:System.Data.LoadOption">
      <summary>控制使用 <see cref="Overload:System.Data.DataTable.Load" /> 或 <see cref="Overload:System.Data.DataSet.Load" /> 方法時，從資料來源取得的資料值應如何套用到現有的資料列上。</summary>
    </member>
    <member name="F:System.Data.LoadOption.OverwriteChanges">
      <summary>把這個資料列的輸入資料值同時寫入每個資料行的目前資料值版本與原始資料值版本。</summary>
    </member>
    <member name="F:System.Data.LoadOption.PreserveChanges">
      <summary>把這個資料列的輸入資料值寫入每個資料行的原始資料值版本， 每個資料行中目前的資料值不變。  這是預設值。</summary>
    </member>
    <member name="F:System.Data.LoadOption.Upsert">
      <summary>把此資料列的輸入資料值寫入每個資料行的目前版本， 每個資料行的原始版本不變。</summary>
    </member>
    <member name="T:System.Data.MappingType">
      <summary>指定如何對應 <see cref="T:System.Data.DataColumn" />。</summary>
    </member>
    <member name="F:System.Data.MappingType.Attribute">
      <summary>資料行是對應至 XML 屬性 (Attribute)。</summary>
    </member>
    <member name="F:System.Data.MappingType.Element">
      <summary>資料行是對應至 XML 項目。</summary>
    </member>
    <member name="F:System.Data.MappingType.Hidden">
      <summary>資料行是對應至內部結構。</summary>
    </member>
    <member name="F:System.Data.MappingType.SimpleContent">
      <summary>資料行是對應至 <see cref="T:System.Xml.XmlText" /> 節點。</summary>
    </member>
    <member name="T:System.Data.MergeFailedEventArgs">
      <summary>發生於目標和來源 <see langword="DataRow" /> 具有相同主索引鍵值，並且 <see cref="P:System.Data.DataSet.EnforceConstraints" /> 屬性設定為 True 時。</summary>
    </member>
    <member name="M:System.Data.MergeFailedEventArgs.#ctor(System.Data.DataTable,System.String)">
      <summary>使用 <see cref="T:System.Data.MergeFailedEventArgs" /> 和合併衝突的描述，初始化 <see cref="T:System.Data.DataTable" /> 類別的新執行個體。</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 物件。</param>
      <param name="conflict">合併衝突的描述。</param>
    </member>
    <member name="P:System.Data.MergeFailedEventArgs.Conflict">
      <summary>傳回合併衝突的描述。</summary>
      <returns>合併衝突的描述。</returns>
    </member>
    <member name="P:System.Data.MergeFailedEventArgs.Table">
      <summary>傳回 <see cref="T:System.Data.DataTable" /> 物件。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 物件。</returns>
    </member>
    <member name="T:System.Data.MergeFailedEventHandler">
      <summary>代表將處理 <see cref="E:System.Data.DataSet.MergeFailed" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">事件的資料。</param>
    </member>
    <member name="T:System.Data.MissingMappingAction">
      <summary>判斷來源資料表或來源資料行中遺漏對應時會發生的動作。</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Error">
      <summary>如果缺少指定的資料行對應，則會產生 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Ignore">
      <summary>會略過不具有對應的資料行或資料表。 傳回 <see langword="null" />。</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Passthrough">
      <summary>使用原始名稱所建立並加入至 <see cref="T:System.Data.DataSet" /> 的來源資料行或來源資料表。</summary>
    </member>
    <member name="T:System.Data.MissingPrimaryKeyException">
      <summary>表示嘗試在不具有主索引鍵的資料表中存取資料列時會擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor">
      <summary>初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資訊，初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需要的資料。</param>
      <param name="context">指定序列化資料流的來源和目的端之描述。</param>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.String)">
      <summary>使用指定的字串，初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 類別的新執行個體。</summary>
      <param name="s">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.MissingSchemaAction">
      <summary>指定在將資料加入至 <see cref="T:System.Data.DataSet" /> 而且必要的 <see cref="T:System.Data.DataTable" /> 或 <see cref="T:System.Data.DataColumn" /> 遺失時所要採取的動作。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Add">
      <summary>加入必要的資料行來完成結構描述。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.AddWithKey">
      <summary>加入必要的資料行和主索引鍵資訊來完成結構描述。 如需主索引鍵資訊如何加入至 <see cref="T:System.Data.DataTable" /> 的詳細資訊，請參閱 <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />。若要利用 .NET Framework Data Provider for OLE DB 正常運作，<see langword="AddWithKey" /> 需要原生 OLE DB 提供者取得必要的主索引鍵資訊，方法是設定 DBPROP_UNIQUEROWS 屬性，然後檢查 IColumnsRowset 中的 DBCOLUMN_KEYCOLUMN 來判斷哪些資料行是主索引鍵資料行。 或者，使用者可能在每個 <see cref="T:System.Data.DataTable" /> 上明確設定主索引鍵條件約束。 這確保與現有資料錄相符的連入資料錄是更新，而不是附加。 使用 <see langword="AddWithKey" /> 時，.NET Framework Data Provider for SQL Server 會將 FOR BROWSE 子句附加到正要執行的陳述式。 使用者應注意潛在的副作用，例如使用 SET FMTONLY ON 陳述式的干擾。 如需詳細資訊，請參閱 SET FMTONLY (Transact-SQL)。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Error">
      <summary>如果缺少指定的資料行對應，則會產生 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Ignore">
      <summary>忽略額外的資料行。</summary>
    </member>
    <member name="T:System.Data.NoNullAllowedException">
      <summary>表示嘗試將 Null 值插入至 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 設定為 <see langword="false" /> 的資料行時會擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor">
      <summary>初始化 <see cref="T:System.Data.NoNullAllowedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資訊，初始化 <see cref="T:System.Data.NoNullAllowedException" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需要的資料。</param>
      <param name="context">來源的描述和指定的序列化資料流的目的端。</param>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.String)">
      <summary>使用指定的字串，初始化 <see cref="T:System.Data.NoNullAllowedException" /> 類別的新執行個體。</summary>
      <param name="s">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Data.NoNullAllowedException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.OrderedEnumerableRowCollection`1">
      <summary>代表從查詢傳回之已排序 <see cref="T:System.Data.DataRow" /> 物件的集合。</summary>
      <typeparam name="TRow">來源序列中的物件類型，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
    </member>
    <member name="T:System.Data.ParameterDirection">
      <summary>指定與 <see cref="T:System.Data.DataSet" /> 相關查詢中的參數型別。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.Input">
      <summary>這是輸入參數，</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.InputOutput">
      <summary>參數能夠輸入和輸出。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.Output">
      <summary>這是輸出參數。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.ReturnValue">
      <summary>此參數代表預存程序 (Stored Procedure)、內建函式或使用者定義函式等作業的傳回值。</summary>
    </member>
    <member name="T:System.Data.PropertyCollection">
      <summary>表示可以加入至 <see cref="T:System.Data.DataColumn" />、<see cref="T:System.Data.DataSet" /> 或 <see cref="T:System.Data.DataTable" /> 的屬性集合。</summary>
    </member>
    <member name="M:System.Data.PropertyCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.PropertyCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.PropertyCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Data.PropertyCollection" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需的資料。</param>
      <param name="context">指定的序列化資料流的來源和目的端。</param>
    </member>
    <member name="M:System.Data.PropertyCollection.Clone">
      <summary>建立 <see cref="T:System.Data.PropertyCollection" /> 物件的淺層複本 (Shallow Copy)。</summary>
      <returns>傳回 <see cref="T:System.Object" />，<see cref="T:System.Data.PropertyCollection" /> 物件的淺層複本。</returns>
    </member>
    <member name="T:System.Data.ReadOnlyException">
      <summary>表示嘗試變更唯讀資料行的值時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor">
      <summary>初始化 <see cref="T:System.Data.ReadOnlyException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資訊，初始化 <see cref="T:System.Data.ReadOnlyException" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需要的資料。</param>
      <param name="context">來源的描述和指定的序列化資料流的目的端。</param>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.String)">
      <summary>使用指定的字串，初始化 <see cref="T:System.Data.ReadOnlyException" /> 類別的新執行個體。</summary>
      <param name="s">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Data.ReadOnlyException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.RowNotInTableException">
      <summary>表示嘗試在不是位於 <see cref="T:System.Data.DataRow" /> 中的 <see cref="T:System.Data.DataTable" /> 上執行作業時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor">
      <summary>初始化 <see cref="T:System.Data.RowNotInTableException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資訊，初始化 <see cref="T:System.Data.RowNotInTableException" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需要的資料。</param>
      <param name="context">來源的描述和指定的序列化資料流的目的端。</param>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.String)">
      <summary>使用指定的字串，初始化 <see cref="T:System.Data.RowNotInTableException" /> 類別的新執行個體。</summary>
      <param name="s">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Data.RowNotInTableException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.Rule">
      <summary>指示當強制使用 <see cref="T:System.Data.ForeignKeyConstraint" /> 時發生的動作。</summary>
    </member>
    <member name="F:System.Data.Rule.Cascade">
      <summary>刪除或更新關聯資料列。 這是預設值。</summary>
    </member>
    <member name="F:System.Data.Rule.None">
      <summary>不會在相關的資料列上採取任何動作。</summary>
    </member>
    <member name="F:System.Data.Rule.SetDefault">
      <summary>將相關資料列中的值設定為 <see cref="P:System.Data.DataColumn.DefaultValue" /> 屬性中所包含的值。</summary>
    </member>
    <member name="F:System.Data.Rule.SetNull">
      <summary>將相關資料列中的值設定為 <see langword="DBNull" />。</summary>
    </member>
    <member name="T:System.Data.SchemaSerializationMode">
      <summary>指出型別 <see cref="T:System.Data.DataSet" /> 的結構描述序列化模式。</summary>
    </member>
    <member name="F:System.Data.SchemaSerializationMode.ExcludeSchema">
      <summary>略過 <see cref="T:System.Data.DataSet" /> 型別的結構描述序列化。</summary>
    </member>
    <member name="F:System.Data.SchemaSerializationMode.IncludeSchema">
      <summary>包括 <see cref="T:System.Data.DataSet" /> 型別的結構描述序列化。 預設值。</summary>
    </member>
    <member name="T:System.Data.SchemaType">
      <summary>指定如何在執行 <see cref="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> 作業時處理現有的結構描述 (Schema) 對應。</summary>
    </member>
    <member name="F:System.Data.SchemaType.Mapped">
      <summary>套用所有的現有資料表對應至內送的結構描述 (Schema)。 使用變形的結構描述來設定 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="F:System.Data.SchemaType.Source">
      <summary>忽略在 DataAdapter 上的任何資料表對應。 使用內送的結構描述來設定 <see cref="T:System.Data.DataSet" />，而不套用任何的變形。</summary>
    </member>
    <member name="T:System.Data.SerializationFormat">
      <summary>決定 <see cref="T:System.Data.DataSet" /> 的序列化格式。</summary>
    </member>
    <member name="F:System.Data.SerializationFormat.Binary">
      <summary>序列化為二進位內容。 僅可在 ADO.NET 2.0 中使用。</summary>
    </member>
    <member name="F:System.Data.SerializationFormat.Xml">
      <summary>序列化為 XML 內容。 預設值。</summary>
    </member>
    <member name="T:System.Data.SqlDbType">
      <summary>指定欄位的 SQL Server 特定的資料型別與屬性，以便在 <see cref="T:System.Data.SqlClient.SqlParameter" /> 中使用。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.BigInt">
      <summary>
        <see cref="T:System.Int64" />. 64 位元帶正負號的整數。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Binary">
      <summary>型別 <see cref="T:System.Array" /> 的 <see cref="T:System.Byte" />。 二進位資料的固定長度資料流，範圍在 1 和 8,000 位元組之間。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Bit">
      <summary>
        <see cref="T:System.Boolean" />. 不帶正負號的數值，這個值可以是 0、1 或 <see langword="null" />。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Char">
      <summary>
        <see cref="T:System.String" />. 非 Unicode 字元的固定長度資料流，範圍在 1 到 8,000 個字元之間。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Date">
      <summary>日期資料範圍是從西元 1 年 1 月 1 日到西元 9999 年 12 月 31 日。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTime">
      <summary>
        <see cref="T:System.DateTime" />. 日期和時間資料，值範圍從 1753 年 1 月 1 日到 9999 年 12 月 31 日，正確率為 3.33 毫秒。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTime2">
      <summary>日期和時間資料。 日期值範圍是從西元後 1 年 1 月 1 日到西元後 9999 年 12 月31 日。 時間值的範圍從 00:00:00 到 23:59:59.9999999，精確度為 100 奈秒。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTimeOffset">
      <summary>具備時區感知功能的日期和時間資料。 日期值範圍是從西元後 1 年 1 月 1 日到西元後 9999 年 12 月31 日。 時間值的範圍從 00:00:00 到 23:59:59.9999999，精確度為 100 奈秒。 時區值範圍從 -14:00 到 +14:00。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Decimal">
      <summary>
        <see cref="T:System.Decimal" />. 固定的有效位數及小數位數值，介於 -10 38 -1 和 10 38 -1 之間。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Float">
      <summary>
        <see cref="T:System.Double" />. 浮點數，範圍為 -1.79E +308 到 1.79E +308。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Image">
      <summary>型別 <see cref="T:System.Array" /> 的 <see cref="T:System.Byte" />。 二進位資料的可變長度資料流，範圍從 0 到 2 31 -1 (或 2,147,483,647) 個位元組。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Int">
      <summary>
        <see cref="T:System.Int32" />. 32 位元帶正負號的整數。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Money">
      <summary>
        <see cref="T:System.Decimal" />. 貨幣值，範圍從 -2 63 (或 -9,223,372,036,854,775,808) 到 2 63 -1 (或 +9,223,372,036,854,775,807)，正確率為貨幣單位的千分之十。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NChar">
      <summary>
        <see cref="T:System.String" />. Unicode 字元的固定長度資料流，範圍在 1 到 4,000 個字元之間。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NText">
      <summary>
        <see cref="T:System.String" />. Unicode 資料的可變長度資料流，具有 2 30 - 1 (或 1,073,741,823) 個字元的最大長度。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NVarChar">
      <summary>
        <see cref="T:System.String" />. Unicode 字元的可變長度資料流，範圍在 1 到 4,000 個字元之間。 如果字串大於 4,000 個字元，則隱含轉換會失敗。 當使用大於 4,000 個字元的字串時，明確設定物件。 當資料庫資料行是 <see langword="nvarchar(max)" /> 時，請使用 <see cref="F:System.Data.SqlDbType.NVarChar" />。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Real">
      <summary>
        <see cref="T:System.Single" />. 浮點數，範圍為 -3.40E +38 到 3.40E +38。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallDateTime">
      <summary>
        <see cref="T:System.DateTime" />. 日期和時間資料，值範圍從 1900 年 1 月 1 日到 2079 年 6 月 6 日，正確率為 1 分鐘。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallInt">
      <summary>
        <see cref="T:System.Int16" />. 16 位元帶正負號的整數。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallMoney">
      <summary>
        <see cref="T:System.Decimal" />. 貨幣值，範圍從 -214,748.3648 到 +214,748.3647，正確率為貨幣單位的千分之十。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Structured">
      <summary>特殊資料型別，可指定資料表值參數所包含的結構化資料。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Text">
      <summary>
        <see cref="T:System.String" />. 非 Unicode 資料的可變長度資料流，具有 2 31 - 1 (或 2,147,483,647) 個字元的最大長度。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Time">
      <summary>24 小時制的時間資料。 時間值的範圍從 00:00:00 到 23:59:59.9999999，精確度為 100 奈秒。 對應至 SQL Server <see langword="time" /> 值。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Timestamp">
      <summary>型別 <see cref="T:System.Array" /> 的 <see cref="T:System.Byte" />。 自動產生的二進位號碼，保證都是資料庫內唯一的號碼 <see langword="timestamp" /> 通常用來當做為版本戳記表格列的機制。 儲存區大小為 8 位元組。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.TinyInt">
      <summary>
        <see cref="T:System.Byte" />. 8 位元不帶正負號的整數。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Udt">
      <summary>SQL Server 使用者定義型別 (UDT)。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.UniqueIdentifier">
      <summary>
        <see cref="T:System.Guid" />. 全域唯一識別項 (或 GUID)。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.VarBinary">
      <summary>型別 <see cref="T:System.Array" /> 的 <see cref="T:System.Byte" />。 二進位資料的可變長度資料流，範圍在 1 和 8,000 位元組之間。 如果位元組陣列大於 8,000 個位元組，則隱含轉換會失敗。 在使用大於 8,000 個位元組的位元組陣列時，明確設定物件。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.VarChar">
      <summary>
        <see cref="T:System.String" />. 非 Unicode 字元的可變長度資料流，範圍在 1 和 8,000 字元之間。 當資料庫資料行是 <see langword="varchar(max)" /> 時，請使用 <see cref="F:System.Data.SqlDbType.VarChar" />。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Variant">
      <summary>
        <see cref="T:System.Object" />. 特殊的資料型別，可以包含數值、字串、二進位或日期資料，以及 Empty 和 Null 等 SQL Server 值 (如果未宣告其他型別，則會假定為這個型別)。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Xml">
      <summary>XML 值。 使用 <see cref="M:System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)" /> 方法或 <see cref="P:System.Data.SqlTypes.SqlXml.Value" /> 屬性取得 XML 做為字串，或呼叫 <see cref="T:System.Xml.XmlReader" /> 方法 <see cref="M:System.Data.SqlTypes.SqlXml.CreateReader" /> 取得 XML 做為字串。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.INullable">
      <summary>所有的 <see cref="N:System.Data.SqlTypes" /> 物件和結構都會實作 <see langword="INullable" /> 介面。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.INullable.IsNull">
      <summary>指出結構是否為 null。 這個屬性是唯讀的。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />
        <see langword="true" />如果這個物件的值為 null，則為。 否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlAlreadyFilledException">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 類別並非要做為獨立的元件使用，而是要做為其他類別衍生標準功能時所根據的類別。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況擲回時要顯示的字串。</param>
      <param name="e">內部例外狀況的參考。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBinary">
      <summary>表示要存放在資料庫或從資料庫中擷取之二進位資料的可變長度資料流。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.#ctor(System.Byte[])">
      <summary>將 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 屬性設定為提供之位元組陣列的內容，來初始化 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構的新執行個體。</summary>
      <param name="value">要存放或擷取的位元組陣列。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Add(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>將兩個指定的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 參數串連，以建立新的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBinary" />，其為 x 和 y 的串連值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Data.SqlTypes.SqlBinary)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件與提供的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要與這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構相比較的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件。</param>
      <returns>帶正負號的數字，指出這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件的值小於物件。  
  
  零 
  這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件和物件相同。  
  
  大於零 
  這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件大於物件。  
  
-或- 
物件是 Null 參考。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Object)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件與提供的物件相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要與這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構相比較的物件。</param>
      <returns>帶正負號的數字，指出這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件的值小於物件。  
  
  零 
  這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件和物件相同。  
  
  大於零 
  這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件大於物件。  
  
-或- 
物件是 Null 參考。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Concat(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>將兩個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構串連以建立新的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</param>
      <returns>
        <paramref name="x" /> 和 <paramref name="y" /> 參數的串連值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Equals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構，判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</param>
      <returns>如果兩個值相等，則為 <see langword="true" />， 否則為 <see langword="false" />。 如果任一執行個體是 null，則 <see langword="SqlBinary" /> 會是 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Equals(System.Object)">
      <summary>將提供的物件參數與 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 物件的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 屬性相比較。</summary>
      <param name="value">要比較的物件。</param>
      <returns>如果物件是 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的執行個體，並且兩者相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GetHashCode">
      <summary>傳回這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>傳回指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>
        <see langword="string" />，表示指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構，判斷第一個結構是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構，判斷第一個結構是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.IsNull">
      <summary>表示這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構是否為 Null。 這個屬性是唯讀的。</summary>
      <returns>如果是 <see langword="null" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Item(System.Int32)">
      <summary>從位於整數參數 <paramref name="index" /> 所指示之位置的 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 屬性中取得單一位元組。 如果 <paramref name="index" /> 指示超過位元組陣列末端的位置，則會引發 <see cref="T:System.Data.SqlTypes.SqlNullValueException" />。 這個屬性是唯讀的。</summary>
      <param name="index">要擷取的位元組位置。</param>
      <returns>位元組，位於整數參數所指示的位置。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">當 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 屬性包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> 時讀取屬性。
-或-
<paramref name="index" /> 參數指示超過位元組陣列長度的位置，如 <see cref="P:System.Data.SqlTypes.SqlBinary.Length" /> 屬性所指示。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Length">
      <summary>取得 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 屬性的長度，以位元組為單位。 這個屬性是唯讀的。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 屬性中二進位資料的長度。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">當 <see cref="P:System.Data.SqlTypes.SqlBinary.Length" /> 屬性包含 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 時，就會讀取 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> 屬性。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構，判斷第一個結構是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構，判斷第一個結構是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.NotEquals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構，判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBinary.Null">
      <summary>表示 <see cref="T:System.DBNull" />，可以指派至 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構的執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Addition(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>將兩個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 參數串連以建立新的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件。</param>
      <returns>
        <paramref name="x" /> 和 <paramref name="y" /> 參數的串連值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Equality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構，判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Byte[]">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構轉換成 <see cref="T:System.Byte" /> 陣列。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</param>
      <returns>
        <see cref="T:System.Byte" /> 陣列。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlBinary">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <returns>要轉換的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構，判斷第一個結構是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構，判斷第一個結構是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Implicit(System.Byte[])~System.Data.SqlTypes.SqlBinary">
      <summary>將位元組的陣列轉換成 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</summary>
      <param name="x">要轉換的位元組陣列。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構，表示轉換的位元組陣列。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Inequality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構，判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構，判斷第一個結構是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構，判斷第一個結構是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.ToSqlGuid">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的執行個體轉換成 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.ToString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 物件轉換成字串。</summary>
      <returns>字串，含有 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBinary" />。 如果 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 為 null，則字串將包含 "null"。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Value">
      <summary>取得 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構的值。 這個屬性是唯讀的。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構的值。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">當屬性包含 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 時，就會讀取 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> 屬性。</exception>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBoolean">
      <summary>表示要存放在資料庫或從資料庫擷取的 1 或 0 之整數值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Boolean)">
      <summary>使用提供的布林值，初始化 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的新執行個體。</summary>
      <param name="value">新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的值，不是 <see langword="true" /> 就是 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Int32)">
      <summary>使用指定的整數值，初始化 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的新執行個體。</summary>
      <param name="value">整數，其值會用於新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.And(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>計算兩個指定 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的位元 AND 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>邏輯的 AND 運算的結果。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.ByteValue">
      <summary>取得 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的值做為位元組。</summary>
      <returns>位元組，表示 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Data.SqlTypes.SqlBoolean)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 物件與提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 物件相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /><see cref="T:System.Data.SqlTypes.SqlBoolean" /> 物件，或 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</param>
      <returns>帶正負號的數字，指出執行個體與值的相對值。
  值 
  說明 
  負整數 
  這個執行個體小於 <paramref name="value" />。  
  
  零 
  這個執行個體等於 <paramref name="value" />。  
  
  正整數 
  這個執行個體大於 <paramref name="value" />。  
  
-或- 
 <paramref name="value" /> 為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Object)">
      <summary>比較這個 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構與指定的物件，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的物件，或 null 參考 (在 Visual Basic 為 <see langword="Nothing" />)。</param>
      <returns>帶正負號的數字，指出執行個體與值的相對值。
  值 
  說明 
  負整數 
  這個執行個體小於 <paramref name="value" />。  
  
  零 
  這個執行個體等於 <paramref name="value" />。  
  
  正整數 
  這個執行個體大於 <paramref name="value" />。  
  
-或- 
 <paramref name="value" /> 為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Equals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構，判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>若兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；若兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Equals(System.Object)">
      <summary>比較提供的物件參數與 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <param name="value">要比較的物件。</param>
      <returns>如果物件是 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的執行個體，而且比較結果是兩者相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.False">
      <summary>表示可以指派至 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 結構之執行個體的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 屬性 false 值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>傳回指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>
        <see langword="string" /> 值，表示指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的兩個執行個體，判斷第一個執行個體是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>若第一個執行個體大於第二個執行個體，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GreaterThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的兩個執行個體，判斷第一個執行個體是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>若第一個執行個體大於或等於第二個執行個體，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsFalse">
      <summary>指示目前的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 是否為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</summary>
      <returns>如果 <see langword="true" /> 為 <see langword="Value" />，則為 <see langword="False" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsNull">
      <summary>表示這個 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構是否為 Null。</summary>
      <returns>
        <see langword="true" />如果結構為 null，則為， <see langword="false" />否則為。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /></returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsTrue">
      <summary>取得值，這個值表示目前的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 是否為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。</summary>
      <returns>如果 <see langword="true" /> 為 <see langword="Value" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的兩個執行個體，判斷第一個執行個體是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>若第一個執行個體小於第二個執行個體，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.LessThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的兩個執行個體，判斷第一個執行個體是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>若第一個執行個體小於或等於第二個執行個體，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.NotEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的兩個執行個體是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>若兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；若兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.Null">
      <summary>表示 <see cref="T:System.DBNull" />，可以指派至 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的執行個體。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.One">
      <summary>表示可以指派至 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 結構之執行個體的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 屬性的一個值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.OnesComplement(System.Data.SqlTypes.SqlBoolean)">
      <summary>在提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構上執行一進位補數運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 一進位補數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_BitwiseAnd(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>計算兩個指定 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的位元 AND 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>邏輯的 AND 運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_BitwiseOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>計算其運算元的位元 OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>邏輯 OR 運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Equality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的兩個執行個體是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>若兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；若兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_ExclusiveOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>在提供的參數上執行位元 Exclusive-OR (XOR) 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>邏輯 XOR 作業的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Boolean">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 轉換成布林。</summary>
      <param name="x">要進行轉換的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>布林設定為 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlBoolean">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlByte" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</summary>
      <param name="x">轉換成 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構，其值等於 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlBoolean">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</summary>
      <param name="x">轉換成 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其值等於 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlBoolean">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</summary>
      <param name="x">轉換成 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構，其值等於 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlBoolean">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</summary>
      <param name="x">轉換成 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構，其值等於 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlBoolean">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</summary>
      <param name="x">轉換成 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構，其值等於 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlBoolean">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</summary>
      <param name="x">轉換成 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構，其值等於 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlBoolean">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</summary>
      <param name="x">轉換成 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其值等於 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlBoolean">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</summary>
      <param name="x">轉換成 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構，其值等於 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlBoolean">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</summary>
      <param name="x">轉換成 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其值等於 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_False(System.Data.SqlTypes.SqlBoolean)">
      <summary>False 運算子可以用來測試 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，判斷它是否為 False。</summary>
      <param name="x">要測試的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>若所提供的參數 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 是 <see langword="false" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構，判斷第一個結構是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 物件。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 物件。</param>
      <returns>若第一個執行個體大於第二個執行個體，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構，判斷第一個結構是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>若第一個執行個體大於或等於第二個執行個體，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Implicit(System.Boolean)~System.Data.SqlTypes.SqlBoolean">
      <summary>將提供的位元組值轉換成 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <param name="x">要被轉換成 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的位元組值。</param>
      <returns>包含 0 或 1 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Inequality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的兩個執行個體，判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>若兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；若兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的兩個執行個體，判斷第一個執行個體是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>若第一個執行個體小於第二個執行個體，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LessThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的兩個執行個體，判斷第一個執行個體是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>若第一個執行個體小於或等於第二個執行個體，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LogicalNot(System.Data.SqlTypes.SqlBoolean)">
      <summary>在 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 上執行 NOT 運算。</summary>
      <param name="x">其中將執行 NOT 運算的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>如果引數是 true，則為具有 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /><see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果引數是 Null，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />，否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_OnesComplement(System.Data.SqlTypes.SqlBoolean)">
      <summary>在提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構上執行一進位補數運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 一進位補數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_True(System.Data.SqlTypes.SqlBoolean)">
      <summary>True 運算子可以用來測試 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，判斷它是否為 True。</summary>
      <param name="x">要測試的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>若提供的參數 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 是 <see langword="true" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Or(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>在兩個指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構上執行位元 OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構，其 Value 是位元 OR 運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Parse(System.String)">
      <summary>將邏輯值之指定的 <see cref="T:System.String" /> 表示轉換成其 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 對等用法。</summary>
      <param name="s">要轉換的 <see cref="T:System.String" />。</param>
      <returns>含有剖析值的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlByte">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其值為 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的值等於 <see langword="true" />，則新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構的值為 1。 否則，新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構的值為 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlDecimal">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其值為 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的值等於 <see langword="true" />，則新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的值為 1。 否則，新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的值為 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlDouble">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構，其值為 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的值等於 <see langword="true" />，則新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構的值為 1。 否則，新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構的值為 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt16">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see langword="SqlInt16" /> 結構，其值為 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的值等於 <see langword="true" />，則新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構的值為 1。 否則，新 <see langword="SqlInt16" /> 結構的值為 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt32">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see langword="SqlInt32" /> 結構，其值為 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的值等於 <see langword="true" />，則新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構的值為 1。 否則，新 <see langword="SqlInt32" /> 結構的值為 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt64">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see langword="SqlInt64" /> 結構，其值為 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的值等於 <see langword="true" />，則新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構的值為 1。 否則，新 <see langword="SqlInt64" /> 結構的值為 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlMoney">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其值為 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的值等於 <see langword="true" />，則新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值為 1。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的值等於 <see langword="false" />，則新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值為 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的值不是 1 也不是 0，新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值就會是 <see cref="F:System.Data.SqlTypes.SqlMoney.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlSingle">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，其值為 1 或 0。
如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的值等於 true，新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構的值會是 1，否則，新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構的值就會是 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構，其值為 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的值等於 <see langword="true" />，則 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的值為 1。 否則，新 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的值為 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構轉換成字串。</summary>
      <returns>字串，含有 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的值。 如果該值是 null，則字串將包含 "null"。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.True">
      <summary>表示可以指派至 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 結構之執行個體的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 屬性 true 值。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.Value">
      <summary>取得 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的值。 這個屬性是唯讀的。</summary>
      <returns>如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 是 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">此屬性設定為 null。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Xor(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>在提供的參數上執行位元 Exclusive-OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>邏輯 XOR 作業的結果。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.Zero">
      <summary>表示零值，其可以指派至 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 結構之執行個體的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 屬性。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlByte">
      <summary>表示要存放在資料庫或從資料庫擷取的 8 位元不帶正負號的整數 (Unsigned Integer)，範圍介於 0 到 255 之間。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.#ctor(System.Byte)">
      <summary>使用指定的位元組值，初始化 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構的新執行個體。</summary>
      <param name="value">位元組值，要存放在新 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 屬性中。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Add(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>計算兩個指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構之總和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see langword="Value" /> 屬性包含加法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>計算其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 運算元的位元 AND 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>位元 AND 作業的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>執行其兩個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 運算元的位元 OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>位元 OR 作業的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.CompareTo(System.Data.SqlTypes.SqlByte)">
      <summary>將這個執行個體與提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 物件相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 物件。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.CompareTo(System.Object)">
      <summary>將這個執行個體與提供的 <see cref="T:System.Object" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Object" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Divide(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>用 <see cref="T:System.Data.SqlTypes.SqlByte" /> 第二個運算元除第一個運算元。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性包含除法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Equals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>如果兩個值相等，則為 <see langword="true" />， 否則為 <see langword="false" />。 如果任一執行個體是 null，則 <see langword="SqlByte" /> 會是 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Equals(System.Object)">
      <summary>將提供的 <see cref="T:System.Object" /> 參數與 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 物件的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 屬性相比較。</summary>
      <param name="value">要比較的 <see cref="T:System.Object" />。</param>
      <returns>如果物件是 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的執行個體，並且兩者相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>傳回指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>
        <see langword="string" /> 值，表示指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的兩個執行個體，判斷第一個執行個體是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，判斷第一個結構是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlByte.IsNull">
      <summary>取得布林值，這個值表示這個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構是否為 null。</summary>
      <returns>如果是 null 則為 <see langword="true" />。 否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的兩個執行個體，判斷第一個執行個體是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的兩個執行個體，判斷第一個執行個體是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.MaxValue">
      <summary>常數，表示 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的最大可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.MinValue">
      <summary>常數，表示 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的最小可能值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Mod(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>在將餘數的第一個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 運算元除以它的第二個運算元之後計算餘數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 包含餘數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>為兩個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 值進行除法運算，並傳回餘數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
      <returns>除法運算之後的餘數會在 <paramref name="x" /> 和 <paramref name="y" /> 上執行。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>計算兩個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 運算元的乘積。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性包含乘法運算的乘積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.NotEquals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的兩個執行個體，判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.Null">
      <summary>表示 <see cref="T:System.DBNull" />，可以指派至 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構的執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.OnesComplement(System.Data.SqlTypes.SqlByte)">
      <summary>一進位補數運算子在其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 運算元上執行位元一進位補數作業。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 參數之元件。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Addition(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>計算兩個指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構之總和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" />，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性包含兩個運算元的總和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>計算其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 運算元的位元 AND 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>位元 AND 作業的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>執行其兩個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 運算元的位元 OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>位元 OR 作業的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Division(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>用 <see cref="T:System.Data.SqlTypes.SqlByte" /> 第二個運算元除第一個運算元。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性包含除法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Equality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_ExclusiveOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>在提供的參數上執行位元 Exclusive-OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>位元 XOR 運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlByte">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">要轉換成 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的<see cref="T:System.Data.SqlTypes.SqlByte" /> 參數。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" />，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性等於指定之 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Byte">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構轉換成位元組。</summary>
      <param name="x">要轉換成位元組的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>位元組，其值等於 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlByte">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 轉換成 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlByte">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 轉換成 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlByte">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlByte">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 轉換成 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlByte">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 轉換成 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 參數的 <see langword="SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlByte">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see langword="SqlMoney" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlByte">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlByte">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 轉換成 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see langword="SqlString" /> 類別的執行個體。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性等於 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示的數值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的兩個執行個體，判斷第一個執行個體是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的兩個執行個體，判斷第一個執行個體是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see langword="SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Implicit(System.Byte)~System.Data.SqlTypes.SqlByte">
      <summary>將提供的位元組值轉換成 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">要被轉換成 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的位元組值。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性等於提供的參數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Inequality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的兩個執行個體，判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的兩個執行個體，判斷第一個執行個體是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的兩個執行個體，判斷第一個執行個體是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>在將餘數的第一個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 運算元除以它的第二個運算元之後計算餘數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 包含餘數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>計算兩個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 運算元的乘積。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性包含乘法運算的乘積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_OnesComplement(System.Data.SqlTypes.SqlByte)">
      <summary>一進位補數運算子在其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 運算元上執行位元一進位補數作業。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 屬性包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 參數之元件。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Subtraction(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>從第一個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 運算元減去第二個運算元。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>第一個運算元減去第二個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 運算元的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Parse(System.String)">
      <summary>將數字的 <see cref="T:System.String" /> 表示轉換成它的對等 8 位元不帶正負號的整數。</summary>
      <param name="s">要剖析的 <see langword="String" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，含有 <see langword="String" /> 參數表示的 8 位元數字。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Subtract(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>從第一個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 運算元減去第二個運算元。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>第一個運算元減去第二個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 運算元的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlBoolean">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 為非零，則為 <see langword="true" />，如果為零，則為 <see langword="false" />，否則為 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlDecimal">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>
        <see langword="SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等於這個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlDouble">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>
        <see langword="SqlDouble" /> 結構，具有與這個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 相同的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt16">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>
        <see langword="SqlInt16" /> 結構，具有與這個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 相同的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt32">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 轉換成 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>
        <see langword="SqlInt32" /> 結構，具有與這個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 相同的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt64">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>
        <see langword="SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等於這個 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlMoney">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>
        <see langword="SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等於這個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlSingle">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>
        <see langword="SqlSingle" /> 結構，擁有和這個 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 結構相同的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的執行個體轉換成 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>
        <see langword="SqlString" />，含有 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 之字串表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構轉換成 <see cref="T:System.String" />。</summary>
      <returns>字串，含有 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlByte" />。 如果 <see langword="Value" /> 為 null，則 <see langword="String" /> 將會是 null 字串。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlByte.Value">
      <summary>取得 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構的值。 這個屬性是唯讀的。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Xor(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>在提供的參數上執行位元 Exclusive-OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>XOR 運算的結果。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.Zero">
      <summary>表示零值，其可以指派至 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 結構之執行個體的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 屬性。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBytes">
      <summary>表示可變動的參考型別 (Reference Type)，用來包裝 <see cref="P:System.Data.SqlTypes.SqlBytes.Buffer" /> 或 <see cref="P:System.Data.SqlTypes.SqlBytes.Stream" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.Byte[])">
      <summary>根據指定的位元組陣列，初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 類別的新執行個體。</summary>
      <param name="buffer">不帶正負號的位元組陣列。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.Data.SqlTypes.SqlBinary)">
      <summary>根據指定的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 值來初始化 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 類別的新執行個體。</summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.IO.Stream)">
      <summary>根據指定的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 值來初始化 <see cref="T:System.IO.Stream" /> 類別的新執行個體。</summary>
      <param name="s">
        <see cref="T:System.IO.Stream" />。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Buffer">
      <summary>傳回內部緩衝區的參考。</summary>
      <returns>內部緩衝區的參考。 如果是在 Unmanaged 指標上建立的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 執行個體，則會傳回內部緩衝區的 Managed 複本。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>傳回指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>
        <see langword="string" />，表示指定之 <see langword="XmlSchemaSet" /> 的 XSD。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.IsNull">
      <summary>取得布林值，這個值表示這個 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 是否為 null。</summary>
      <returns>如果 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 是 null，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Item(System.Int64)">
      <summary>取得或設定位於指定索引處的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 執行個體。</summary>
      <param name="offset">
        <see cref="T:System.Int64" /> 值。</param>
      <returns>
        <see cref="T:System.Byte" /> 值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Length">
      <summary>取得 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 執行個體內含值的長度。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，表示 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 執行個體內含值的長度。
如果沒有緩衝區可供執行個體使用，或值為 null，則傳回 -1。
傳回資料流包裝執行個體的 <see cref="P:System.IO.Stream.Length" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.MaxLength">
      <summary>取得這個 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的內部緩衝區值的最大長度。</summary>
      <returns>long，表示內部緩衝區值的最大長度。 傳回 -1，代表資料流包裝的 <see cref="T:System.Data.SqlTypes.SqlBytes" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Null">
      <summary>取得此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的 Null 執行個體。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlBytes.IsNull" /> 其 <see langword="true" /> 屬性傳回的實例。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Data.SqlTypes.SqlBytes">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 結構。</summary>
      <param name="value">要轉換的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 結構。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBytes)~System.Data.SqlTypes.SqlBinary">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</summary>
      <param name="value">要轉換的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 結構。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.Read(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>將位元組從這個 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 執行個體複製到傳入緩衝區，並傳回複製位元組的數目。</summary>
      <param name="offset">
        <see cref="T:System.Int64" /> long 值，位移至包含在 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 執行個體中的值。</param>
      <param name="buffer">要複製的目標位元組陣列緩衝區。</param>
      <param name="offsetInBuffer">緩衝區中要開始進行資料複製的 <see cref="T:System.Int32" /> 整數位移。</param>
      <param name="count">
        <see cref="T:System.Int32" /> 整數，表示要複製的位元組數目。</param>
      <returns>
        <see cref="T:System.Int64" /> long 值，表示複製的位元組數目。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.SetLength(System.Int64)">
      <summary>設定這個 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 執行個體的長度。</summary>
      <param name="value">表示長度的 <see cref="T:System.Int64" /> long 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.SetNull">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 執行個體設定為 null。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Storage">
      <summary>傳回關於這個 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 執行個體儲存狀態的資訊。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.StorageState" /> 列舉型別。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Stream">
      <summary>取得或將這個 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的資料設定為資料流。</summary>
      <returns>包含 SqlBytes 資料的資料流。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>取得序列化資訊，以及重新執行個體化這個 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 執行個體所需的所有資料。</summary>
      <param name="info">要被填入 (Populate) 序列化資訊的物件。</param>
      <param name="context">序列化的目的端內容。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <returns>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="r">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.ToSqlBinary">
      <summary>從這個 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 執行個體建構並傳回 <see cref="T:System.Data.SqlTypes.SqlBytes" />。</summary>
      <returns>來自這個執行個體的 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Value">
      <summary>傳回這個 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 所保留值的 Managed 複本。</summary>
      <returns>這個 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的位元組陣列值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.Write(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>將位元組從傳入緩衝區複製到這個 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 執行個體。</summary>
      <param name="offset">
        <see cref="T:System.Int64" /> long 值，位移至包含在 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 執行個體中的值。</param>
      <param name="buffer">要複製的目標位元組陣列緩衝區。</param>
      <param name="offsetInBuffer">緩衝區中要開始進行資料複製的 <see cref="T:System.Int32" /> 整數位移。</param>
      <param name="count">
        <see cref="T:System.Int32" /> 整數，表示要複製的位元組數目。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlChars">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 是一種可變動的參考型別 (Reference Type)，它會包裝 <see cref="T:System.Char" /> 陣列或 <see cref="T:System.Data.SqlTypes.SqlString" /> 執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlChars" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor(System.Char[])">
      <summary>根據指定的字元陣列，初始化 <see cref="T:System.Data.SqlTypes.SqlChars" /> 類別的新執行個體。</summary>
      <param name="buffer">
        <see cref="T:System.Char" /> 陣列。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor(System.Data.SqlTypes.SqlString)">
      <summary>根據指定的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 值來初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 類別的新執行個體。</summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Buffer">
      <summary>傳回內部緩衝區的參考。</summary>
      <returns>內部緩衝區的參考。 如果是在 Unmanaged 指標上建立的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 執行個體，則會傳回內部緩衝區的 Managed 複本。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>傳回指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>
        <see langword="string" /> 值，表示指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.IsNull">
      <summary>取得布林值，這個值表示這個 <see cref="T:System.Data.SqlTypes.SqlChars" /> 是否為 null。</summary>
      <returns>如果 <see cref="T:System.Data.SqlTypes.SqlChars" /> 是 null，則為 <see langword="true" />。 否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Item(System.Int64)">
      <summary>取得或設定位於指定索引處的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 執行個體。</summary>
      <param name="offset">
        <see cref="T:System.Int64" /> 值。</param>
      <returns>
        <see cref="T:System.Char" /> 值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Length">
      <summary>取得 <see cref="T:System.Data.SqlTypes.SqlChars" /> 執行個體內含值的長度。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，表示 <see cref="T:System.Data.SqlTypes.SqlChars" /> 執行個體內含值的字元長度。
如果沒有緩衝區可供執行個體使用，或值為 null，則傳回 -1。
傳回資料流包裝執行個體的 <see cref="P:System.IO.Stream.Length" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.MaxLength">
      <summary>取得內部緩衝區可以保留的值的最大長度 (以雙位元組字元為單位)。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，表示內部緩衝區中值的最大長度 (以雙位元組字元為單位)。
傳回 -1，代表資料流包裝的 <see cref="T:System.Data.SqlTypes.SqlChars" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Null">
      <summary>傳回這個 <see cref="T:System.Data.SqlTypes.SqlChars" /> 的 null 執行個體。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlChars.IsNull" /> 其 <see langword="true" /> 屬性傳回的實例。 如需詳細資訊，請參閱處理 Null 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlChars)~System.Data.SqlTypes.SqlString">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlChars" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構。</summary>
      <param name="value">要轉換的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 結構。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlChars">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlChars" /> 結構。</summary>
      <param name="value">要轉換的 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 結構。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.Read(System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>將字元從這個 <see cref="T:System.Data.SqlTypes.SqlChars" /> 執行個體複製到傳入緩衝區，並傳回複製字元的數目。</summary>
      <param name="offset">
        <see cref="T:System.Int64" />
        <see langword="long" /> 值，會位移至包含在 <see cref="T:System.Data.SqlTypes.SqlChars" /> 執行個體中的值。</param>
      <param name="buffer">要複製的目標字元陣列緩衝區。</param>
      <param name="offsetInBuffer">緩衝區中要開始進行資料複製的 <see cref="T:System.Int32" /> 整數位移。</param>
      <param name="count">
        <see cref="T:System.Int32" /> 整數值，表示要複製的字元數目。</param>
      <returns>
        <see cref="T:System.Int64" />
        <see langword="long" /> 值，表示複製的位元組數目。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.SetLength(System.Int64)">
      <summary>設定這個 <see cref="T:System.Data.SqlTypes.SqlChars" /> 執行個體的長度。</summary>
      <param name="value">表示長度的 <see cref="T:System.Int64" /><see langword="long" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.SetNull">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlChars" /> 執行個體設定為 null。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Storage">
      <summary>傳回關於這個 <see cref="T:System.Data.SqlTypes.SqlChars" /> 執行個體儲存狀態的資訊。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.StorageState" /> 列舉型別。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>取得序列化資訊，以及重新執行個體化這個 <see cref="T:System.Data.SqlTypes.SqlChars" /> 執行個體所需的所有資料。</summary>
      <param name="info">要被填入 (Populate) 序列化資訊的物件。</param>
      <param name="context">序列化的目的端內容。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <returns>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="r">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.ToSqlString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlChars" /> 執行個體轉換成其對等的 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示。</summary>
      <returns>這個型別的 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Value">
      <summary>傳回這個 <see cref="T:System.Data.SqlTypes.SqlChars" /> 所保留值的 Managed 複本。</summary>
      <returns>這個 <see cref="T:System.Data.SqlTypes.SqlChars" /> 的字元陣列值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.Write(System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>將字元從傳入緩衝區複製到這個 <see cref="T:System.Data.SqlTypes.SqlChars" /> 執行個體。</summary>
      <param name="offset">
        <see langword="long" /> 值，位移至包含在 <see cref="T:System.Data.SqlTypes.SqlChars" /> 執行個體中的值。</param>
      <param name="buffer">要複製的目標字元陣列緩衝區。</param>
      <param name="offsetInBuffer">緩衝區中要開始進行資料複製的 <see cref="T:System.Int32" /> 整數位移。</param>
      <param name="count">
        <see cref="T:System.Int32" /> 整數，表示要複製的字元數目。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlCompareOptions">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的比較選項。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.BinarySort">
      <summary>指定排序應該根據字元數值，而非其字母順序值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.BinarySort2">
      <summary>執行二進位編碼排序。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreCase">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比較必須忽略大小寫。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreKanaType">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比較必須忽略假名類型。 假名類型意指日文平假名和片假名字元，表示日本語言中的語音。 平假名用於本土日文的語句和字詞，而片假名則用於自其他語言引進的字詞，例如「computer」或「Internet」。 平假名和片假名都可以用來表達語音。 如果選取這個值，就會將代表一個語音的平假名字元視為等於代表相同語音的片假名字元。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreNonSpace">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比較必須忽略非空格組成的字元，例如變音符號 (Diacritic)。 Unicode Standard 將組合的字元定義為與基底字元結合以產生新字元的字元。 非空格組合的字元在呈現時本身並不會使用字元空間。 如需非空格組合字元的詳細資訊，請參閱 https://www.unicode.org 的＜Unicode 標準＞。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreWidth">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比較必須忽略字元寬度。 例如，日文片假名字元可以書寫為全型或半型，而如果這個值被選取，片假名字元則書寫成全型並被視為相等於以半型書寫的相同字元。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.None">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比較的預設選項設定值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDateTime">
      <summary>表示要存放在資料庫或從資料庫擷取的日期與時間資料，值範圍從 1753 年 1 月 1 日至 9999 年 12 月 31 日，精確度為 3.33 毫秒。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構擁有的基礎資料結構與其對應的 .NET Framework 型別 <see cref="T:System.DateTime" /> 不同，後者可以表示介於 0001 年 1 月 1 日上午 12:00:00 到 9999 年 12 月 31 日下午 11:59:59 的任何時間，精確度可達 100 奈秒。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 實際儲存的則是與 1900 年 1 月 1 日上午 00:00:00 的相對差異。 因此將 "00:00:00 AM 1/1/1900" 轉換成整數的結果將傳回 0。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.DateTime)">
      <summary>使用指定的 <see cref="T:System.DateTime" /> 值，初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的新執行個體。</summary>
      <param name="value">
        <see langword="DateTime" /> 結構。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32)">
      <summary>使用提供的參數，初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的新執行個體。</summary>
      <param name="dayTicks">表示日期為刻度的整數值。</param>
      <param name="timeTicks">表示時間為刻度的整數值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>使用提供的參數來初始化年、月、日，初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的新執行個體。</summary>
      <param name="year">整數，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的年。</param>
      <param name="month">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的月。</param>
      <param name="day">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的日數。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用提供的參數初始化新結構的年、月、日、時、分和秒，以初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的新執行個體。</summary>
      <param name="year">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的年。</param>
      <param name="month">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的月。</param>
      <param name="day">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構之月份日期。</param>
      <param name="hour">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的時。</param>
      <param name="minute">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的分。</param>
      <param name="second">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的秒。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>使用提供的參數初始化新結構的年、月、日、時、分、秒和毫秒，以初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的新執行個體。</summary>
      <param name="year">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的年。</param>
      <param name="month">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的月。</param>
      <param name="day">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構之月份日期。</param>
      <param name="hour">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的時。</param>
      <param name="minute">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的分。</param>
      <param name="second">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的秒。</param>
      <param name="millisecond">雙精度浮點數 (Double) 值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的毫秒。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用提供的參數初始化新結構的年、月、日、時、分、秒和微秒，以初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的新執行個體。</summary>
      <param name="year">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的年。</param>
      <param name="month">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的月。</param>
      <param name="day">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的日。</param>
      <param name="hour">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的時。</param>
      <param name="minute">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的分。</param>
      <param name="second">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的秒。</param>
      <param name="bilisecond">整數值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的微秒 (毫秒的一千倍)。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Add(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 加入至指定的 <see langword="TimeSpan" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</param>
      <param name="t">
        <see langword="Timespan" /> 值。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Data.SqlTypes.SqlDateTime)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構與提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。  
  
  零 
  這個執行個體和 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 相同。  
  
  大於零 
  這個執行個體大於 <see cref="T:System.Data.SqlTypes.SqlDateTime" />  
  
-或- 
 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Object)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構與提供的 <see cref="T:System.Object" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Object" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (Visual Basic 中的 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.DayTicks">
      <summary>取得表示這個 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的日期的刻度數。</summary>
      <returns>刻度數，表示包含在這個 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 屬性中的日期。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">當 <see langword="Value" /> 結構的 <see cref="N:System.Data.SqlTypes" /> 屬性設定為 null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Equals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <returns>如果兩個值相等，則為 <see langword="true" />， 否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Equals(System.Object)">
      <summary>將提供的物件參數與 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 物件的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 屬性相比較。</summary>
      <param name="value">要比較的物件。</param>
      <returns>如果物件是 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的執行個體，並且兩者相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GetHashCode">
      <summary>取得這個執行個體的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>傳回指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>
        <see langword="string" /> 值，表示指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的兩個執行個體，判斷第一個執行個體是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的兩個執行個體，判斷第一個執行個體是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.IsNull">
      <summary>表示這個 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構是否為 Null。</summary>
      <returns>如果是 null 則為 <see langword="true" />。 否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的兩個執行個體，判斷第一個執行個體是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的兩個執行個體，判斷第一個執行個體是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.MaxValue">
      <summary>表示 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的最大有效日期值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.MinValue">
      <summary>表示 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的最小有效日期值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.NotEquals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 執行個體的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.Null">
      <summary>表示 <see cref="T:System.DBNull" />，可以指派至 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Addition(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>將提供的 <see cref="T:System.TimeSpan" /> 參數 (<paramref name="t" />) 指示的時期間加入至提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構中。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <param name="t">
        <see cref="T:System.TimeSpan" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。 如果任一引數為 <see cref="F:System.Data.SqlTypes.SqlDateTime.Null" />，則新的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 會是 <see cref="F:System.Data.SqlTypes.SqlDateTime.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Equality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <returns>如果兩個值相等，則為 <see langword="true" />， 否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.DateTime">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構轉換成 <see cref="T:System.DateTime" /> 結構。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <returns>
        <see cref="T:System.DateTime" /> 物件，其 <see cref="P:System.DateTime.Date" /> 和 <see cref="P:System.DateTime.TimeOfDay" /> 屬性包含與提供的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 結構之 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 屬性相同的日期與時間值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDateTime">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 等於 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數表示的日期與時間。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 為 Null，則新建立的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構之 <see langword="Value" /> 將會是 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的兩個執行個體，判斷第一個執行個體是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的兩個執行個體，判斷第一個執行個體是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Implicit(System.DateTime)~System.Data.SqlTypes.SqlDateTime">
      <summary>將 <see cref="T:System.DateTime" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</summary>
      <param name="value">
        <see langword="DateTime" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 等於提供的 <see cref="P:System.DateTime.Date" /> 結構之組合的 <see cref="P:System.DateTime.TimeOfDay" /> 和 <see cref="T:System.DateTime" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Inequality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 執行個體的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的兩個執行個體，判斷第一個執行個體是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的兩個執行個體，判斷第一個執行個體是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Subtraction(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>從提供的 <see cref="T:System.TimeSpan" /> 結構中減去提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構 (<paramref name="t" />)。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <param name="t">
        <see cref="T:System.TimeSpan" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構，表示減法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Parse(System.String)">
      <summary>將日期與時間之指定的 <see cref="T:System.String" /> 表示轉換成它的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 對等用法。</summary>
      <param name="s">要剖析的 <see langword="string" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構，等於指定的 <see langword="string" /> 表示的日期與時間。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerHour">
      <summary>常數的值相當於 1 小時的刻度數。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerMinute">
      <summary>常數的值相當於 1 分鐘的刻度數。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerSecond">
      <summary>常數的值相當於 1 秒鐘的刻度數。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Subtract(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>從這個 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 執行個體中減去指定的 <see langword="Timespan" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</param>
      <param name="t">
        <see langword="Timespan" /> 值。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.TimeTicks">
      <summary>取得表示這個 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的時間的刻度數。</summary>
      <returns>刻度數，表示這個 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的時間的刻度數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.ToSqlString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>
        <see langword="SqlString" /> 結構，其值為一個字串，表示包含在這個 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構中的日期和時間。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.ToString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構轉換成 <see cref="T:System.String" />。</summary>
      <returns>
        <see langword="String" />，表示這個 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 屬性。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.Value">
      <summary>取得 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的值。 這個屬性是唯讀的。</summary>
      <returns>這個 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構的值。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">當 <see langword="Value" /> 結構的 <see cref="N:System.Data.SqlTypes" /> 屬性設定為 null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDecimal">
      <summary>表示具有固定整數位數和小數位數的數值，介於 - 10^38 +1 和 10^38 - 1 之間。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用提供的參數，初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的新執行個體。</summary>
      <param name="bPrecision">可以用來表示新 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 結構之 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 屬性的最大位數。</param>
      <param name="bScale">
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性要對新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構解析的小數位數。</param>
      <param name="fPositive">布林值，指出新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構是否表示正數或負數。</param>
      <param name="data1">32 位元不帶正負號的整數 (Unsigned Integer)，將與 data2、data3 和 data4 組合以構成表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構值的 128 位元不帶正負號的整數。</param>
      <param name="data2">32 位元不帶正負號的整數，將與 data1、data3 和 data4 組合以構成表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構值的 128 位元不帶正負號的整數。</param>
      <param name="data3">32 位元不帶正負號的整數，將與 data1、data2 和 data4 組合以構成表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構值的 128 位元不帶正負號的整數。</param>
      <param name="data4">32 位元不帶正負號的整數，將與 data1、data2 和 data3 組合以構成表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構值的 128 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32[])">
      <summary>使用提供的參數，初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的新執行個體。</summary>
      <param name="bPrecision">可以用來表示新 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 結構之 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 屬性的最大位數。</param>
      <param name="bScale">
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性要對新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構解析的小數位數。</param>
      <param name="fPositive">布林值，指出新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構是否表示正數或負數。</param>
      <param name="bits">128 位元不帶正負號的整數，提供新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Decimal)">
      <summary>使用提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 值，初始化 <see cref="T:System.Decimal" /> 結構的新執行個體。</summary>
      <param name="value">要被存放為 <see cref="T:System.Decimal" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Double)">
      <summary>使用提供的雙精度浮點數 (Double) 參數，初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的新執行個體。</summary>
      <param name="dVal">雙精度浮點數，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int32)">
      <summary>使用提供的整數值，初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的新執行個體。</summary>
      <param name="value">提供的整數值，將被用來做為新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int64)">
      <summary>使用提供的長整數值，初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的新執行個體。</summary>
      <param name="value">提供的長整數值，將被用來做為新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Abs(System.Data.SqlTypes.SqlDecimal)">
      <summary>Abs 方法會取得 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數的絕對值。</summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性包含表示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數之絕對值的不帶正負號的數字。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Add(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>計算兩個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 運算子的總和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性包含總和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.AdjustScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Boolean)">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 運算元的小數點位數調整成數字參數所指定的數字位數。 根據 fRound 參數的值，這個值不是被四捨五入到適合的數字位數，就是被截斷。</summary>
      <param name="n">要調整的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="digits">在調整結構中的數字位數。</param>
      <param name="fRound">如果這個參數為 <see langword="true" />，則新 Value 將被四捨五入，如果為 <see langword="false" />，則該值將被截斷。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性包含調整過的位數。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.BinData">
      <summary>取得這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構值的二進位表示當作位元組的陣列。</summary>
      <returns>位元組的陣列，包含 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構值的二進位表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Ceiling(System.Data.SqlTypes.SqlDecimal)">
      <summary>傳回大於或等於指定之 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的最小整數。</summary>
      <param name="n">要計算最高限度值的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" />，表示大於或等於指定之 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的最小整數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Data.SqlTypes.SqlDecimal)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 執行個體與提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 物件相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Object)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 執行個體與提供的 <see cref="T:System.Object" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Object" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ConvertToPrecScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 運算元的值調整成指示的精確度和小數位數。</summary>
      <param name="n">要調整值的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="precision">新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的精確度。</param>
      <param name="scale">新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的小數點位數。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 Value 已經被調整成參數中所指示的精確度和小數位數。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Data">
      <summary>取得這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的二進位表示當做整數的陣列。</summary>
      <returns>整數的陣列，包含這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的二進位表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Divide(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>除法運算子計算將第一個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 運算子除以第二個的結果。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性包含除法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Equals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 運算元的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>如果兩個值相等，則為 <see langword="true" />， 否則為 <see langword="false" />。 如果任一執行個體為 null，<see langword="SqlDecimal" /> 的值也將是 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Equals(System.Object)">
      <summary>將提供的 <see cref="T:System.Object" /> 參數與 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 執行個體的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 屬性相比較。</summary>
      <param name="value">要比較的 <see cref="T:System.Object" />。</param>
      <returns>如果物件是 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的執行個體，並且兩者相等，則為 <see langword="true" />。 否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Floor(System.Data.SqlTypes.SqlDecimal)">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 數字四捨五入到下一個較低的整數。</summary>
      <param name="n">要計算最低限度值的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，包含這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的整數部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>傳回指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>
        <see langword="string" /> 值，表示指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的邏輯比對，以判斷第一個結構是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數的邏輯比對，以判斷第一個參數是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.IsNull">
      <summary>表示這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構是否為 Null。</summary>
      <returns>如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構為 null，則為 <see langword="true" />， 否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.IsPositive">
      <summary>指出這個 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 是否大於零。</summary>
      <returns>如果將 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 指定為 null，則為 <see langword="true" />。 否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的邏輯比對，以判斷第一個結構是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數的邏輯比對，以判斷第一個參數是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxPrecision">
      <summary>常數，表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Precision" /> 屬性的最大可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxScale">
      <summary>常數，表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Scale" /> 屬性的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxValue">
      <summary>常數，表示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MinValue">
      <summary>常數，表示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的最小值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>乘法運算子計算兩個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數的乘積。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性包含乘法運算的乘積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.NotEquals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數的邏輯比對，以判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.Null">
      <summary>表示 <see cref="T:System.DBNull" />，可以指派至 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 類別的執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Addition(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>計算兩個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 運算子的總和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性包含總和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Division(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>除法運算子計算將第一個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 運算子除以第二個的結果。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性包含除法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Equality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 運算元的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDecimal">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Decimal">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數轉換成 <see cref="T:System.Decimal" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>新的 <see langword="Decimal" /> 結構，其值等於 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlDecimal">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDecimal">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDecimal">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlString" /> 物件。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等於 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數表示的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Double)~System.Data.SqlTypes.SqlDecimal">
      <summary>將 <see cref="T:System.Double" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Double" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其值等於 <see cref="T:System.Double" /> 參數的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的邏輯比對，以判斷第一個結構是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數的邏輯比對，以判斷第一個參數是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDecimal">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDecimal">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDecimal">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDecimal">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構轉換成 SqlDecimal。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDecimal">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 運算元轉換成 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlDecimal">
      <summary>將 <see cref="T:System.Decimal" /> 值轉換成 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要被轉換的 <see cref="T:System.Decimal" /> 值。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性等於 <see langword="Decimal" /> 參數的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlDecimal">
      <summary>將提供的 <see cref="T:System.Int64" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Int64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性等於 <see cref="T:System.Int64" /> 參數的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Inequality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數的邏輯比對，以判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的邏輯比對，以判斷第一個結構是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數的邏輯比對，以判斷第一個參數是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>乘法運算子計算兩個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數的乘積。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性包含乘法運算的乘積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Subtraction(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>計算第一個運算元減去第二個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 運算元的結果。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 Value 屬性包含減法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_UnaryNegation(System.Data.SqlTypes.SqlDecimal)">
      <summary>一元減號運算子將 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 變成相反值。</summary>
      <param name="x">要變成相反值的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其值包含負運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Parse(System.String)">
      <summary>將數字的 <see cref="T:System.String" /> 表示轉換為其 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 對等用法。</summary>
      <param name="s">要剖析的 <see langword="String" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" />，等於指定 <see cref="T:System.String" /> 中所包含的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Power(System.Data.SqlTypes.SqlDecimal,System.Double)">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構值做為指定的指數乘冪。</summary>
      <param name="n">要做為乘冪數的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="exp">雙精度浮點數值，指出應該提高哪一個乘冪數。</param>
      <returns>包含結果的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Precision">
      <summary>取得用來表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性的最大位數。</summary>
      <returns>最大位數，用來表示這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的 <see langword="Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Round(System.Data.SqlTypes.SqlDecimal,System.Int32)">
      <summary>取得最接近指定之 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構值的數字 (具有指定的精確度)。</summary>
      <param name="n">要被四捨五入的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="position">在傳回值中的有效分數位數 (精確度) 的數目。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，包含四捨五入運算的結果。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Scale">
      <summary>取得解析 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 的小數位數數目。</summary>
      <returns>解析 <see langword="Value" /> 屬性的小數位數數目。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Sign(System.Data.SqlTypes.SqlDecimal)">
      <summary>取得值，指出 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性之符號。</summary>
      <param name="n">要評估其符號的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>數字，指出 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的符號。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Subtract(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>計算第一個運算元減去第二個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 運算元的結果。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 Value 屬性包含減法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToDouble">
      <summary>傳回雙精度浮點數，等於這個執行個體的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性內容。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性的十進位表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlBoolean">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 為非零，則為 <see langword="true" />，如果為零，則為 <see langword="false" />，否則為 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlByte">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see langword="Value" /> 等於這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的 <see langword="Value" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的值為 <see langword="true" />，則 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構的 <see langword="Value" /> 將會是 1。 否則，<see cref="T:System.Data.SqlTypes.SqlByte" /> 結構的 <see langword="Value" /> 會是 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlDouble">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構，具有與這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 之執行個體相同的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt16">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，具有與這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 之執行個體相同的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt32">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，具有與這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 之執行個體相同的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt64">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，具有與這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 之執行個體相同的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlMoney">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，具有與這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 之執行個體相同的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlSingle">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，具有與這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 之執行個體相同的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 結構，其值為字串，這個字串表示這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構中包含的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構轉換為 <see cref="T:System.String" />。</summary>
      <returns>新的 <see cref="T:System.String" /> 物件，包含 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 屬性之字串表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Truncate(System.Data.SqlTypes.SqlDecimal,System.Int32)">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構之值截斷到想要的位置。</summary>
      <param name="n">要被截斷的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <param name="position">將截斷數字的小數點位置。</param>
      <returns>提供 <paramref name="position" /> 參數的負值，以便將該值截斷至小數點左邊的對應位置。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Value">
      <summary>取得 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構的值。 這個屬性是唯讀的。</summary>
      <returns>介於 -79,228,162,514,264,337,593,543,950,335 到 79,228,162,514,162,514,264,337,593,543,950,335 之間的數字。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDouble">
      <summary>表示 -1.79E +308 到 1.79E +308 範圍內的浮點數 (儲存於資料庫或從資料庫擷取)。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.#ctor(System.Double)">
      <summary>使用提供的雙精確度浮點數 (Double) 參數設定新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 屬性，以初始化 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 結構的新執行個體。</summary>
      <param name="value">雙精確度浮點數 (Double)，其值將被用於新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>加法運算子計算兩個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 運算元的總和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>兩個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 運算元的總和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 執行個體與提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 執行個體與提供的 <see cref="T:System.Object" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Object" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (Visual Basic 中的 <see langword="Nothing" />)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>除法運算子用第二個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 運算元除第一個運算元。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構，包含除法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 執行個體的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>如果兩個值相等，則為 <see langword="true" />， 否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Equals(System.Object)">
      <summary>將提供的物件參數與 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 物件的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 屬性相比較。</summary>
      <param name="value">要比較的物件。</param>
      <returns>如果兩個值相等，則為 <see langword="true" />， 否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GetHashCode">
      <summary>傳回這個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>傳回指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>
        <see langword="string" /> 值，表示指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的兩個執行個體，判斷第一個執行個體是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的兩個執行個體，判斷第一個執行個體是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDouble.IsNull">
      <summary>傳回布林值，這個值表示這個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 執行個體是否為 null。</summary>
      <returns>如果 <see langword="true" /> 為 null，則為 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。 否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的兩個執行個體，判斷第一個執行個體是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的兩個執行個體，判斷第一個執行個體是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.MaxValue">
      <summary>常數，表示 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.MinValue">
      <summary>常數，表示 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的最小可能值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>乘法運算子計算兩個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 運算元的乘積。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>兩個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 運算元的乘積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的兩個執行個體，判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.Null">
      <summary>表示 <see cref="T:System.DBNull" />，可以指派至 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構的執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>加法運算子計算兩個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 運算元的總和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>兩個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 運算元的總和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>除法運算子用第二個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 運算元除第一個運算元。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構，包含除法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 執行個體的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>如果兩個值相等，則為 <see langword="true" />， 否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDouble">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構，根據 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 參數的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 屬性，其 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 不是 0 就是 1。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />，則 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構會是 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Double">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構轉換成雙精確度浮點數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>雙精確度浮點數，相當於指定的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構之值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDouble">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 物件。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等於 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示的數字值。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 為 <see cref="F:System.Data.SqlTypes.SqlString.Null" />，則 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構會是 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的兩個執行個體，判斷第一個執行個體是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的兩個執行個體，判斷第一個執行個體是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDouble">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlByte" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 為 <see cref="F:System.Data.SqlTypes.SqlByte.Null" />，則 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構會是 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlDouble">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 為 <see cref="F:System.Data.SqlTypes.SqlDecimal.Null" />，則 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構會是 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDouble">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 為 <see cref="F:System.Data.SqlTypes.SqlInt16.Null" />，則 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構會是 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDouble">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 為 <see cref="F:System.Data.SqlTypes.SqlInt32.Null" />，則 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構會是 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDouble">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 為 <see cref="F:System.Data.SqlTypes.SqlInt64.Null" />，則 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構會是 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDouble">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 為 <see cref="F:System.Data.SqlTypes.SqlMoney.Null" />，則 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構會是 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDouble">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 為 <see cref="F:System.Data.SqlTypes.SqlSingle.Null" />，則 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構會是 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Double)~System.Data.SqlTypes.SqlDouble">
      <summary>將提供的雙精確度浮點數值轉換成 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">要轉換的雙精確度浮點數值。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />，具有與指定的雙精確度浮點數參數相同的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的兩個執行個體，判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的兩個執行個體，判斷第一個執行個體是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的兩個執行個體，判斷第一個執行個體是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>乘法運算子計算兩個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 運算元的乘積。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>兩個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 運算元的乘積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>減法運算子從第一個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 運算元減去第二個運算元。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>減法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_UnaryNegation(System.Data.SqlTypes.SqlDouble)">
      <summary>傳回指定的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構的負值。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構，含有相反的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Parse(System.String)">
      <summary>將數字的 <see cref="T:System.String" /> 表示轉換成相等的雙精確度浮點數。</summary>
      <param name="s">要剖析的 <see langword="String" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />，包含 <see langword="String" /> 表示的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>減法運算子從第一個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 運算元減去第二個運算元。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>減法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <returns>.NET Framework 使用的 XML 結構描述。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlBoolean">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>
        <see langword="SqlBoolean" /> 結構，如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 為非零值，則它的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 將會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 為零，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />，如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構為 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlByte">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>
        <see langword="SqlByte" /> 結構，其 <see langword="Value" /> 等於這個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構的 <see langword="Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlDecimal">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see langword="SqlDecimal" /> 結構，其轉換值等於這個 <see langword="SqlDouble" /> 的進位值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt16">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see langword="Value" /> 等於 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構值的整數部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt32">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see langword="Value" /> 等於 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構值的整數部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt64">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see langword="Value" /> 等於 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構值的整數部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlMoney">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see langword="SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等於這個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlSingle">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see langword="SqlSingle" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等於這個 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>
        <see langword="SqlString" />，表示這個 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構轉換成字串。</summary>
      <returns>字串，表示這個 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDouble.Value">
      <summary>取得 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構的值。 這個屬性是唯讀的。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構的值。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.Zero">
      <summary>表示零值，其可以指派至 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 結構之執行個體的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 屬性。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlGuid">
      <summary>表示要存放在資料庫或從資料庫擷取的 GUID。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Byte[])">
      <summary>使用提供的位元組陣列參數，初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構的新執行個體。</summary>
      <param name="value">位元組陣列。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Guid)">
      <summary>使用指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 參數，初始化 <see cref="T:System.Guid" /> 結構的新執行個體。</summary>
      <param name="g">
        <see cref="T:System.Guid" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>使用指定的值，初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構的新執行個體。</summary>
      <param name="a">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的前 4 個位元組。</param>
      <param name="b">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下兩個位元組。</param>
      <param name="c">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下兩個位元組。</param>
      <param name="d">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一個位元組。</param>
      <param name="e">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一個位元組。</param>
      <param name="f">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一個位元組。</param>
      <param name="g">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一個位元組。</param>
      <param name="h">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一個位元組。</param>
      <param name="i">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一個位元組。</param>
      <param name="j">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一個位元組。</param>
      <param name="k">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一個位元組。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.String)">
      <summary>使用指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 參數，初始化 <see cref="T:System.String" /> 結構的新執行個體。</summary>
      <param name="s">
        <see cref="T:System.String" /> 物件。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Data.SqlTypes.SqlGuid)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構與提供的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 相比較，並傳回它們相對值的指示。 比較最後 6 個以上的位元組，並將最後 6 個位元組視為比較中的最大顯著性位元組。</summary>
      <param name="value">要比較的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件為 Null 參考 (<see langword="Nothing" />)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Object)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構與提供的物件相比較，並傳回它們相對值的指示。 比較最後 6 個以上的位元組，並將最後 6 個位元組視為比較中的最大顯著性位元組。</summary>
      <param name="value">要比較的 <see cref="T:System.Object" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件為 Null 參考 (<see langword="Nothing" />)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Equals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <returns>如果兩個值相等，則為 <see langword="true" />， 否則為 <see langword="false" />。 如果任一執行個體是 null，則 <see langword="SqlGuid" /> 會是 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Equals(System.Object)">
      <summary>將提供的物件參數與 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 物件的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 屬性相比較。</summary>
      <param name="value">要比較的物件。</param>
      <returns>如果物件是 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的執行個體，並且兩者相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GetHashCode">
      <summary>傳回這個 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>傳回指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>
        <see langword="string" /> 值，表示指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的兩個執行個體，判斷第一個執行個體是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的兩個執行個體，判斷第一個執行個體是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlGuid.IsNull">
      <summary>取得布林值，這個值表示這個 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構是否為 null。</summary>
      <returns>如果 <see langword="null" />，便傳回 <see langword="true" />。 否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的兩個執行個體，判斷第一個執行個體是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的兩個執行個體，判斷第一個執行個體是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.NotEquals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構的邏輯比對，判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlGuid.Null">
      <summary>表示 <see cref="T:System.DBNull" />，可以指派至 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構的執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Equality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Data.SqlTypes.SqlGuid">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <param name="x">
        <see langword="SqlBinary" /> 物件。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlGuid" />，其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Guid">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 參數轉換成 <see cref="T:System.Guid" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <returns>新的 <see cref="T:System.Guid" />，等於 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlGuid">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 物件。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlGuid" />，其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 等於 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數表示的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的兩個執行個體，判斷第一個執行個體是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的兩個執行個體，判斷第一個執行個體是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Implicit(System.Guid)~System.Data.SqlTypes.SqlGuid">
      <summary>將提供的 <see cref="T:System.Guid" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <param name="x">
        <see cref="T:System.Guid" />。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlGuid" />，其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 等於 <see cref="T:System.Guid" /> 參數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Inequality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構的邏輯比對，判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的兩個執行個體，判斷第一個執行個體是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的兩個執行個體，判斷第一個執行個體是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Parse(System.String)">
      <summary>將指定的 <see cref="T:System.String" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <param name="s">要剖析的 <see langword="String" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlGuid" />，等於指定 <see cref="T:System.String" /> 中所包含的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToByteArray">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構轉換成位元組陣列。</summary>
      <returns>位元組的陣列，表示這個 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToSqlBinary">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</summary>
      <returns>
        <see langword="SqlBinary" /> 結構，包含 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構中的位元組。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToSqlString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 結構，包含 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構的字串表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構轉換成 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.String" />，包含 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構的字串表示。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlGuid.Value">
      <summary>取得 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構的值。 這個屬性是唯讀的。</summary>
      <returns>
        <see cref="T:System.Guid" /> 結構。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt16">
      <summary>表示要在資料庫中儲存或擷取的 16 位元帶正負號的整數。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.#ctor(System.Int16)">
      <summary>使用提供的短整數 (Short Integer) 參數，初始化 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構的新執行個體。</summary>
      <param name="value">短整數。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Add(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>計算兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 運算元的總和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性包含兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 運算元的總和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>計算其 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 運算元的位元 AND 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性包含位元 AND 的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>執行其兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 運算元的位元 OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性包含位元 OR 的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Data.SqlTypes.SqlInt16)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 執行個體與提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Object)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 執行個體與提供的 <see cref="T:System.Object" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Object" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Divide(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>用第二個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 運算元除第一個運算元。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" />，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性包含除法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Equals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>如果兩個值相等，則為 <see langword="true" />， 否則為 <see langword="false" />。 如果任一執行個體是 null，則 <see langword="SqlInt16" /> 會是 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Equals(System.Object)">
      <summary>比較指定的物件與 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 物件的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 屬性。</summary>
      <param name="value">要比較的物件。</param>
      <returns>如果物件是 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的執行個體，並且兩者相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>傳回指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>
        <see cref="T:System.String" /> 值，表示指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的兩個執行個體，判斷第一個執行個體是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，判斷第一個結構是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt16.IsNull">
      <summary>表示這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構是否為 Null。</summary>
      <returns>如果是 null 則為 <see langword="true" />。 否則為 <see langword="false" />。 如需詳細資訊，請參閱處理 Null 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的兩個執行個體，判斷第一個執行個體是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，判斷第一個結構是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.MaxValue">
      <summary>常數，表示 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的最大可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.MinValue">
      <summary>常數，表示 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的最小可能值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Mod(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>在將餘數的第一個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 運算元除以它的第二個運算元之後計算餘數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含餘數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>為兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值進行除法運算，並傳回餘數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值。</param>
      <returns>除法運算之後的餘數會在 <paramref name="x" /> 和 <paramref name="y" /> 上執行。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>計算兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 參數的乘積。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含兩個參數的乘積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.NotEquals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構的邏輯比對，以判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.Null">
      <summary>表示 <see cref="T:System.DBNull" />，可以指派至 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構的執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.OnesComplement(System.Data.SqlTypes.SqlInt16)">
      <summary>~ 運算子在其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 運算元上執行位元一進位補數作業。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性包含指定的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構之補數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Addition(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>計算兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 運算元的總和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性包含兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 運算元的總和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>計算其 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 運算元的位元 AND 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性包含位元 AND 的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>執行其兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 運算元的位元 OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性包含位元 OR 的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Division(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>用第二個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 運算元除第一個運算元。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" />，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性包含除法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Equality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_ExclusiveOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>在提供的參數上執行位元 Exclusive-OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性包含位元 XOR 運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt16">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt16">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt16">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性等於 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 參數的整數部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Int16">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構轉換成短整數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>短整數，其值是 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 參數的 Value。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt16">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性等於提供的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlInt16">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt16">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt16">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性等於 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 參數的整數部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt16">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 物件轉換成 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 物件。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性等於 <see cref="T:System.Data.SqlTypes.SqlString" /> 物件參數表示的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的兩個執行個體，判斷第一個執行個體是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，判斷第一個結構是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt16">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Int16)~System.Data.SqlTypes.SqlInt16">
      <summary>將提供的短整數轉換成 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">短整數值。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，具有與指定之短整數相同的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Inequality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構的邏輯比對，以判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>比較 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的兩個執行個體，判斷第一個執行個體是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，判斷第一個結構是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>在將餘數的第一個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 運算元除以它的第二個運算元之後計算餘數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含餘數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>計算兩個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 參數的乘積。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含兩個參數的乘積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_OnesComplement(System.Data.SqlTypes.SqlInt16)">
      <summary>~ 運算子在其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 運算元上執行位元一進位補數作業。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性包含指定的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構之補數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Subtraction(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>從第一個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 參數減去第二個參數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性包含減法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_UnaryNegation(System.Data.SqlTypes.SqlInt16)">
      <summary>一元減號運算子將 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 運算元的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 變成相反值。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，含有相反的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Parse(System.String)">
      <summary>將數字的 <see cref="T:System.String" /> 表示轉換成它的對等 16 位元帶正負號的整數。</summary>
      <param name="s">要剖析的 <see langword="String" />。</param>
      <returns>16 位元帶正負號的整數，等於指定的 <see cref="T:System.String" /> 中所包含的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Subtract(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>從第一個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 參數減去第二個參數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 屬性包含減法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <returns>.NET Framework 使用的 XML 結構描述。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlBoolean">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 為非零，則為 <see langword="true" />，如果為零，則為 <see langword="false" />，否則為 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlByte">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 等於這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 小於 0 或大於 255，則會發生 <see cref="T:System.OverflowException" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlDecimal">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，其 <see langword="Value" /> 等於這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlDouble">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構，其 <see langword="Value" /> 等於這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlInt32">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see langword="Value" /> 等於這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlInt64">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see langword="Value" /> 等於這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlMoney">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see langword="Value" /> 等於這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlSingle">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，其 <see langword="Value" /> 等於這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" />，表示這個 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 之執行個體的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToString">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構轉換成 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.String" /> 物件，表示這個 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 之執行個體的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt16.Value">
      <summary>取得這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構之執行個體的值。 這個屬性是唯讀的。</summary>
      <returns>短整數，表示這個 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Xor(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>在提供的參數上執行位元 Exclusive-OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，包含 XOR 運算的結果。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.Zero">
      <summary>表示零值，其可以指派至 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 結構之執行個體的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 屬性。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt32">
      <summary>表示要在資料庫中儲存或擷取的 32 位元帶正負號的整數 (Signed Integer)。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.#ctor(System.Int32)">
      <summary>使用提供的整數值，初始化 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構的新執行個體。</summary>
      <param name="value">要轉換的整數。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Add(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>計算兩個指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構之總和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 屬性包含指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構之總和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>計算其 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 運算元的位元 AND 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，包含位元 AND 運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>計算指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構之位元 OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，包含位元 OR 運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Data.SqlTypes.SqlInt32)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 執行個體與提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Object)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 執行個體與提供的 <see cref="T:System.Object" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Object" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (Visual Basic 中的 <see langword="Nothing" />)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Divide(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>用第二個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數除第一個參數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" />，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 屬性包含除法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Equals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>如果兩個值相等，則為 <see langword="true" />， 否則為 <see langword="false" />。 如果任一執行個體是 null，則 <see langword="SqlInt32" /> 會是 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Equals(System.Object)">
      <summary>將提供的物件參數與 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 物件的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 屬性相比較。</summary>
      <param name="value">要比較的物件。</param>
      <returns>如果物件是 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的執行個體，並且兩者相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>傳回指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>
        <see langword="string" /> 值，表示指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數，判斷第一個參數是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數，判斷第一個參數是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.IsNull">
      <summary>表示這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構是否為 Null。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 是 null，則這個屬性為 <see langword="true" />。 否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數，判斷第一個參數是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數，判斷第一個參數是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.MaxValue">
      <summary>常數，表示 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的最大可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.MinValue">
      <summary>常數，表示 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的最小可能值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Mod(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>在將第一個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數除以第二個參數之後計算餘數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含餘數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>為兩個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值進行除法運算，並傳回餘數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值。</param>
      <returns>除法運算之後的餘數會在 <paramref name="x" /> 和 <paramref name="y" /> 上執行。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>計算兩個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數的乘積。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含兩個參數的乘積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.NotEquals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數的邏輯比對，以判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Null">
      <summary>表示 <see cref="T:System.DBNull" />，可以指派至 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 類別的執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.OnesComplement(System.Data.SqlTypes.SqlInt32)">
      <summary>在指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構上執行位元一進位補數運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，包含一進位補數運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Addition(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>計算兩個指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構之總和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 屬性包含指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構之總和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>計算其 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 運算元的位元 AND 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，包含位元 AND 運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>計算指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構之位元 OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，包含位元 OR 運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Division(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>用第二個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數除第一個參數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" />，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 屬性包含除法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Equality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_ExclusiveOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>在指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構上執行位元 Exclusive-OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，包含位元 XOR 運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt32">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 轉換成 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt32">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt32">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 轉換成 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 屬性等於 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 參數的整數部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Int32">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構轉換成整數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>轉換的整數值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlInt32">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 轉換成 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 參數的 <see langword="SqlInt64" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt32">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt32">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 轉換成 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 屬性等於 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 參數的整數部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt32">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 物件轉換成 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 物件。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 屬性等於 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數表示的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數，判斷第一個參數是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數，判斷第一個參數是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt32">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 屬性轉換成 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt32">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 轉換成 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Int32)~System.Data.SqlTypes.SqlInt32">
      <summary>將提供的整數轉換成 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">整數值。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 Value 屬性等於整數參數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Inequality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數的邏輯比對，以判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數，判斷第一個參數是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>比較兩個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數，判斷第一個參數是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>在將第一個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數除以第二個參數之後計算餘數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含餘數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>計算兩個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數的乘積。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含兩個參數的乘積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_OnesComplement(System.Data.SqlTypes.SqlInt32)">
      <summary>在指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構上執行位元一進位補數運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，包含一進位補數運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Subtraction(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>從第一個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數減去第二個參數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 屬性包含減法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_UnaryNegation(System.Data.SqlTypes.SqlInt32)">
      <summary>將 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 運算元的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 變成相反值。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，含有相反的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Parse(System.String)">
      <summary>將數字的 <see cref="T:System.String" /> 表示轉換成它的對等 32 位元帶正負號的整數。</summary>
      <param name="s">要剖析的 <see cref="T:System.String" />。</param>
      <returns>32 位元帶正負號的整數，等於指定的 <see cref="T:System.String" /> 中所包含的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Subtract(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>從第一個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數減去第二個參數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 屬性包含減法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlBoolean">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 為非零，則為 <see langword="true" />，如果為零，則為 <see langword="false" />，否則為 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlByte">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see langword="Value" /> 等於這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構的 <see langword="Value" />。 如果 <see langword="SqlInt32" /> 小於 0 或大於 255，則會發生 <see cref="T:System.OverflowException" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDecimal">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構，等於這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDouble">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構，等於這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt16">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構，等於這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt64">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，等於這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlMoney">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，等於這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlSingle">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，等於這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構，等於這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToString">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構轉換成 <see cref="T:System.String" />。</summary>
      <returns>新的 <see cref="T:System.String" /> 結構，等於這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.Value">
      <summary>取得這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構的值。 這個屬性是唯讀的。</summary>
      <returns>整數，表示這個 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構的值。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">屬性包含 <see cref="F:System.Data.SqlTypes.SqlInt32.Null" />。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Xor(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>在指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構上執行位元 Exclusive-OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構，包含位元 XOR 運算的結果。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Zero">
      <summary>表示零值，其可以指派至 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 結構之執行個體的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 屬性。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt64">
      <summary>表示要在資料庫中儲存或擷取的 64 位元帶正負號的整數。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.#ctor(System.Int64)">
      <summary>使用提供的長整數 (Long Integer)，初始化 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構的新執行個體。</summary>
      <param name="value">長整數。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Add(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>計算兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的總和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等於兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的總和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>計算其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 運算元的位元 AND 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，包含位元 AND 運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>執行其兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 運算元的位元 OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，包含位元 OR 運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Data.SqlTypes.SqlInt64)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 執行個體與提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (Visual Basic 中的 <see langword="Nothing" />)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Object)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 執行個體與提供的 <see cref="T:System.Object" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Object" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (Visual Basic 中的 <see langword="Nothing" />)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Divide(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>用第二個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數除第一個參數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 屬性包含除法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>如果兩個值相等，則為 <see langword="true" />， 否則為 <see langword="false" />。 如果任一執行個體是 null，則 <see langword="SqlInt64" /> 會是 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Object)">
      <summary>將提供的物件參數與 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 物件的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 屬性相比較。</summary>
      <param name="value">要比較的物件。</param>
      <returns>如果物件是 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的執行個體，並且兩者相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>傳回指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>
        <see langword="string" />，表示指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的邏輯比對，以判斷第一個參數是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的邏輯比對，以判斷第一個參數是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.IsNull">
      <summary>取得布林值，這個值表示這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構是否為 null。</summary>
      <returns>如果是 null 則為 <see langword="true" />。 否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的邏輯比對，判斷第一個參數是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的邏輯比對，判斷第一個參數是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MaxValue">
      <summary>常數，表示 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構的最大可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MinValue">
      <summary>常數，表示 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構的最小可能值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Mod(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>在將第一個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數除以第二個參數之後計算餘數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 屬性包含其餘部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>為兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值進行除法運算，並傳回餘數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。</param>
      <returns>除法運算之後的餘數會在 <paramref name="x" /> 和 <paramref name="y" /> 上執行。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>計算兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的乘積。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等於兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的乘積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.NotEquals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>對兩個 SqlInt64 參數進行邏輯比較以判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Null">
      <summary>表示 <see cref="T:System.DBNull" />，可以指派至 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構的執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>在其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 運算元上執行位元一進位補數作業。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等於 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的一進位補數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Addition(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>計算兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的總和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等於兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的總和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>計算其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 運算元的位元 AND 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，包含位元 AND 運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>執行其兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 運算元的位元 OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，包含位元 OR 運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Division(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>用第二個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數除第一個參數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 屬性包含除法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Equality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_ExclusiveOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>在提供的參數上執行位元 Exclusive-OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，包含位元 XOR 運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt64">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt64">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等於 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數的整數部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt64">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 屬性等於 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 參數的整數部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Int64">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數轉換成長整數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的長整數值，等於 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt64">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 屬性等於 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的整數部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt64">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 屬性包含 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 參數的整數部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt64">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlString" /> 物件。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" />，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等於 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數表示的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的邏輯比對，以判斷第一個參數是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的邏輯比對，以判斷第一個參數是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt64">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt64">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt64">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlInt64">
      <summary>將長整數參數轉換成 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">長整數值。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等於長整數參數的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Inequality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>對兩個 SqlInt64 參數進行邏輯比較以判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的邏輯比對，判斷第一個參數是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的邏輯比對，判斷第一個參數是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>在將第一個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數除以第二個參數之後計算餘數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 屬性包含其餘部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>計算兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的乘積。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等於兩個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的乘積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>在其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 運算元上執行位元一進位補數作業。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等於 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的一進位補數。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Subtraction(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>從第一個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數減去第二個參數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 屬性等於減法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_UnaryNegation(System.Data.SqlTypes.SqlInt64)">
      <summary>一元減號運算子將 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 運算元的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 變成相反值。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 參數的否定 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Parse(System.String)">
      <summary>將數字的 <see cref="T:System.String" /> 表示轉換成它的對等 64 位元帶正負號的整數。</summary>
      <param name="s">要剖析的 <see cref="T:System.String" />。</param>
      <returns>64 位元帶正負號的整數，等於指定的 <see cref="T:System.String" /> 中所包含的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Subtract(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>從第一個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數減去第二個參數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 屬性等於減法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlBoolean">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 為非零，則為 <see langword="true" />，如果為零，則為 <see langword="false" />，否則為 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlByte">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see langword="Value" /> 等於這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構的 <see langword="Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDecimal">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDouble">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt16">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt32">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlMoney">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlSingle">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" />，表示這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的執行個體轉換成 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.String" />，表示這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.Value">
      <summary>取得這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構的值。 這個屬性是唯讀的。</summary>
      <returns>短整數，表示這個 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Xor(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>在提供的參數上執行位元 Exclusive-OR 運算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構，包含位元 XOR 運算的結果。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Zero">
      <summary>表示零值，其可以指派至 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 結構之執行個體的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 屬性。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlMoney">
      <summary>表示要存放在資料庫或從資料庫擷取的貨幣值，範圍從 -2 63 (或 -922,337,203,685,477.5808) 到 2 63 -1 (或 +922,337,203,685,477.5807)，正確率為貨幣單位的萬分之一。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Decimal)">
      <summary>使用指定的 <see cref="T:System.Decimal" /> 值，初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 類別的新執行個體。</summary>
      <param name="value">要初始化的貨幣值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Double)">
      <summary>使用指定的雙精度浮點數 (Double) 值，初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 類別的新執行個體。</summary>
      <param name="value">要初始化的貨幣值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int32)">
      <summary>使用指定的整數值，初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 類別的新執行個體。</summary>
      <param name="value">要初始化的貨幣值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int64)">
      <summary>使用指定的長整數 (Long Integer) 值，初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 類別的新執行個體。</summary>
      <param name="value">要初始化的貨幣值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Add(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>計算兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的總和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的總和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Data.SqlTypes.SqlMoney)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 執行個體與提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Object)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 執行個體與提供的 <see cref="T:System.Object" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Object" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Divide(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>除法運算子用第二個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數除第一個參數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 屬性包含除法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>如果兩個值相等，則為 <see langword="true" />， 否則為 <see langword="false" />。 如果任一執行個體是 null，則 <see langword="SqlMoney" /> 會是 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Object)">
      <summary>將提供的物件參數與 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 物件的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 屬性相比較。</summary>
      <param name="value">要比較的物件。</param>
      <returns>若物件是 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的執行個體且兩者相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetHashCode">
      <summary>取得這個執行個體的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>傳回指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>
        <see langword="string" />，表示指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的邏輯比對，以判斷第一個參數是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的邏輯比對，以判斷第一個參數是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.IsNull">
      <summary>傳回布林值，這個值表示這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構是否為 null。</summary>
      <returns>如果是 null 則為 <see langword="true" />。 否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的邏輯比對，以判斷第一個參數是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的邏輯比對，以判斷第一個參數是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MaxValue">
      <summary>表示可以指派至 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 類別之執行個體的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 屬性的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MinValue">
      <summary>表示可以指派至 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 類別之執行個體的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 屬性的最小值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>乘法運算子計算兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的乘積。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含乘法運算的乘積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.NotEquals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的邏輯比對，以判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Null">
      <summary>表示 <see cref="T:System.DBNull" />，可以指派至 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 類別的執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Addition(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>計算兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的總和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的總和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Division(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>除法運算子用第二個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數除第一個參數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 屬性包含除法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Equality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlMoney">
      <summary>這個隱含運算子會將提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 參數轉換為 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlMoney">
      <summary>這個運算子會將提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlMoney">
      <summary>這個運算子會將提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Decimal">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構轉換成 <see cref="T:System.Decimal" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新的 <see cref="T:System.Decimal" /> 結構，其值等於 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlMoney">
      <summary>這個運算子會將提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlMoney">
      <summary>這個運算子會將 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlString" /> 物件。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 屬性等於 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數表示的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Double)~System.Data.SqlTypes.SqlMoney">
      <summary>這個隱含運算子會將提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 參數轉換為 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的邏輯比對，以判斷第一個參數是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的邏輯比對，以判斷第一個參數是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlMoney">
      <summary>這個隱含運算子會將提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 參數轉換為 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlMoney">
      <summary>這個隱含運算子會將提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 參數轉換為 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlMoney">
      <summary>這個隱含運算子會將提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數轉換為 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlMoney">
      <summary>這個隱含運算子會將提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數轉換為 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlMoney">
      <summary>將 <see cref="T:System.Decimal" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要被轉換的 <see cref="T:System.Decimal" /> 值。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等於 <see cref="T:System.Decimal" /> 參數的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlMoney">
      <summary>這個隱含運算子會將提供的 <see cref="T:System.Int64" /> 參數轉換為 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Int64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 屬性等於 <see cref="T:System.Int64" /> 參數的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Inequality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的邏輯比對，以判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的邏輯比對，以判斷第一個參數是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的邏輯比對，以判斷第一個參數是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>乘法運算子計算兩個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的乘積。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含乘法運算的乘積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Subtraction(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>減法運算子從第一個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數減去第二個參數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，包含減法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_UnaryNegation(System.Data.SqlTypes.SqlMoney)">
      <summary>一元減號運算子將 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 變成相反值。</summary>
      <param name="x">要變成相反值的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含負運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Parse(System.String)">
      <summary>將數字的 <see cref="T:System.String" /> 表示轉換為其 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 對等用法。</summary>
      <param name="s">要剖析的 <see langword="String" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" />，等於指定 <see cref="T:System.String" /> 中所包含的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Subtract(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>減法運算子從第一個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數減去第二個參數。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構，包含減法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDecimal">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 之執行個體的 Value 轉換為 <see cref="T:System.Decimal" /> 結構。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 結構，其值等於這個 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 屬性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDouble">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構轉換成 <see cref="T:System.Double" />。</summary>
      <returns>雙精度浮點數，具有等於這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt32">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構轉換成 <see cref="T:System.Int32" />。</summary>
      <returns>32 位元的整數，其值等於這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構的整數部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt64">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構的值轉換成 <see cref="T:System.Int64" />。</summary>
      <returns>64 位元的整數，其值等於這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構的整數部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlBoolean">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構的值為零，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構的值將會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlByte">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDecimal">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDouble">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt16">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt32">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt64">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlSingle">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 結構，其值是表示這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 之值的字串。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的執行個體轉換成字串。</summary>
      <returns>字串，其值是表示這個 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 之值的字串。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.Value">
      <summary>取得 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構的執行個體之貨幣值。 這個屬性是唯讀的。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構的執行個體之貨幣值。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">此屬性設定為 null。</exception>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Zero">
      <summary>表示可以指派至 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 類別之執行個體的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 屬性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNotFilledException">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 類別並非要做為獨立的元件使用，而是要做為其他類別衍生標準功能時所根據的類別。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況擲回時要顯示的字串。</param>
      <param name="e">內部例外狀況的參考。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNullValueException">
      <summary>當 <see langword="Value" /> 結構的 <see cref="N:System.Data.SqlTypes" /> 屬性設定為 null 時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="e">做為目前例外狀況發生原因的例外狀況。 如果 <c>innerException</c> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlSingle">
      <summary>表示 -3.40E +38 到 3.40E +38 範圍內的浮點數 (儲存於資料庫或從資料庫擷取)。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Double)">
      <summary>使用提供的雙精度浮點數 (Double) 參數，初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構的新執行個體。</summary>
      <param name="value">雙精度浮點數值，將用來做為新 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Single)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構的新執行個體。</summary>
      <param name="value">浮點數值，將用來做為新 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Add(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>計算兩個指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構之總和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，包含兩個指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構之總和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Data.SqlTypes.SqlSingle)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 執行個體與提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Object)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 執行個體與提供的 <see cref="T:System.Object" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Object" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Divide(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>將第一個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構除以第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>
        <see langword="SqlInt64" /> 結構，包含除法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 參數的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>如果兩個值相等，則為 <see langword="true" />， 否則為 <see langword="false" />。 如果任一執行個體是 null，則 <see langword="SqlSingle" /> 會是 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Object)">
      <summary>將提供的物件參數與 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 物件的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 屬性相比較。</summary>
      <param name="value">要比較的物件。</param>
      <returns>如果物件是 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的執行個體，並且兩者相等，則為 <see langword="true" />， 否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetHashCode">
      <summary>取得這個執行個體的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>傳回指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>
        <see langword="string" /> 值，表示指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 運算元的邏輯比對，判斷第一個運算元是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構的邏輯比對，判斷第一個結構是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.IsNull">
      <summary>表示這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構是否為 Null。</summary>
      <returns>如果是 null 則為 <see langword="true" />。 否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 參數的邏輯比對，以判斷第一個參數是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 參數的邏輯比對，以判斷第一個參數是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MaxValue">
      <summary>表示可以指派至 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 類別之執行個體的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 屬性的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MinValue">
      <summary>表示可以指派至 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 類別之執行個體的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 屬性的最小值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>計算兩個指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構之乘積。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，包含乘法運算的乘積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.NotEquals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 參數的邏輯比對，以判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Null">
      <summary>表示 <see cref="T:System.DBNull" />，可以指派至 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構的執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Addition(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>計算兩個指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構之總和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，包含兩個指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構之總和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Division(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>將第一個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構除以第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，包含除法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Equality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>執行兩個 SqlSingle 參數的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlSingle">
      <summary>這個隱含運算子會將提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 轉換成 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlSingle">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 參數。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Single">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構轉換成浮點數 (Float)。</summary>
      <param name="x">要被轉換成浮點數的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 值。</param>
      <returns>浮點數，包含 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlSingle">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlString" /> 物件。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等於 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數表示的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 運算元的邏輯比對，判斷第一個運算元是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構的邏輯比對，判斷第一個結構是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlSingle">
      <summary>這個隱含運算子會將 <see cref="T:System.Data.SqlTypes.SqlByte" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 屬性等於 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlSingle">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlSingle">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlSingle">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlSingle">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlSingle">
      <summary>將提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等於 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 參數的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Single)~System.Data.SqlTypes.SqlSingle">
      <summary>將指定的浮點數值轉換成 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要被轉換成 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的浮點數值。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，包含指定的浮點數的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Inequality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 參數的邏輯比對，以判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 參數的邏輯比對，以判斷第一個參數是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 參數的邏輯比對，以判斷第一個參數是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>計算兩個指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構之乘積。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，包含乘法運算的乘積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Subtraction(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>從第一個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構減去第二個結構。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，包含減法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_UnaryNegation(System.Data.SqlTypes.SqlSingle)">
      <summary>否定指定的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 結構的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，含有相反的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Parse(System.String)">
      <summary>將指定的 <see cref="T:System.String" /> 轉換成 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</summary>
      <param name="s">要剖析的 <see cref="T:System.String" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" />，等於指定 <see cref="T:System.String" /> 中所包含的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Subtract(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>從第一個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構減去第二個結構。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構，包含減法運算的結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlBoolean">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 為非零，則為 <see langword="true" />，如果為零，則為 <see langword="false" />，否則為 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlByte">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構，其 <see langword="Value" /> 等於這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構的 <see langword="Value" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構的值為 <see langword="true" />，則 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構的 <see langword="Value" /> 將會是 1。 否則，<see cref="T:System.Data.SqlTypes.SqlByte" /> 結構的 <see langword="Value" /> 會是 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDecimal">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see langword="SqlDecimal" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDouble">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see langword="SqlDouble" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt16">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see langword="SqlInt16" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt32">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt64">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlMoney">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" />，表示這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToString">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構轉換為 <see cref="T:System.String" />。</summary>
      <returns>
        <see langword="String" /> 物件，表示這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.Value">
      <summary>取得這個 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構的值。 這個屬性是唯讀的。</summary>
      <returns>介於 -3.40E+38 到 3.40E+38 之間的浮點數值。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Zero">
      <summary>表示可以指派至 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 類別之執行個體的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 屬性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlString">
      <summary>表示要儲存在資料庫或自資料庫擷取之字元的可變長度資料流。 <see cref="T:System.Data.SqlTypes.SqlString" /> 具有與其在 .NET Framework 中對應的 <see cref="T:System.String" /> 資料類型不同的基礎資料結構。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[])">
      <summary>使用指定的地區設定 ID、比較選項和資料，初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的新執行個體。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的地理上地區設定和語言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的比較選項。</param>
      <param name="data">要儲存的資料陣列。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 類別的新執行個體。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的地理上地區設定和語言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的比較選項。</param>
      <param name="data">要儲存的資料陣列。</param>
      <param name="fUnicode">如果編碼為 Unicode，則為 <see langword="true" />， 否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 類別的新執行個體。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的地理上地區設定和語言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的比較選項。</param>
      <param name="data">要儲存的資料陣列。</param>
      <param name="index">陣列中的開始索引。</param>
      <param name="count">從索引中要複製的字元數。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 類別的新執行個體。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的地理上地區設定和語言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的比較選項。</param>
      <param name="data">要儲存的資料陣列。</param>
      <param name="index">陣列中的開始索引。</param>
      <param name="count">從索引中要複製的字元數。</param>
      <param name="fUnicode">如果編碼為 Unicode，則為 <see langword="true" />， 否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String)">
      <summary>使用指定的字串，初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的新執行個體。</summary>
      <param name="data">要儲存的字串。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32)">
      <summary>使用指定的字串與地區設定 ID (Locale ID) 值，初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的新執行個體。</summary>
      <param name="data">要儲存的字串。</param>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的地理上地區設定和語言。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32,System.Data.SqlTypes.SqlCompareOptions)">
      <summary>用指定的字串、地區設定 ID 和比較選項值，初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的新執行個體。</summary>
      <param name="data">要儲存的字串。</param>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的地理上地區設定和語言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的比較選項。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Add(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>將兩個指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數串連，以建立新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" />，為 <paramref name="x" /> 和 <paramref name="y" /> 的串連值。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort">
      <summary>指定排序應該根據字元數值，而非其字母順序值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort2">
      <summary>指定排序應該根據字元的數值，而非其字母順序值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Clone">
      <summary>建立這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 物件的複本。</summary>
      <returns>新 <see cref="T:System.Data.SqlTypes.SqlString" /> 物件，其中所有屬性值都與原始值相同。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CompareInfo">
      <summary>取得 <see cref="T:System.Globalization.CompareInfo" /> 物件，其定義應該如何為這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構執行字串比較。</summary>
      <returns>
        <see langword="CompareInfo" /> 物件，定義這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的字串比較。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions)">
      <summary>取得指定 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 值的相等 <see cref="T:System.Globalization.CompareOptions" /> 列舉。</summary>
      <param name="compareOptions">
        <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 值，描述這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的比較選項。</param>
      <returns>
        <see langword="CompareOptions" /> 值，對應這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的 <see langword="SqlCompareOptions" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Data.SqlTypes.SqlString)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 執行個體與提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (Visual Basic 中的 <see langword="Nothing" />)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Object)">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 物件與提供的 <see cref="T:System.Object" /> 相比較，並傳回它們相對值的指示。</summary>
      <param name="value">要比較的 <see cref="T:System.Object" />。</param>
      <returns>帶正負號的數字，表示執行個體與物件的相對值。
  傳回值 
  條件 
  小於零 
  這個執行個體小於物件。  
  
  零 
  這個執行個體與物件相同。  
  
  大於零 
  這個執行個體大於物件。 
-或- 
物件是 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Concat(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>將兩個指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構串連在一起。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" />，包含剛串連的值，這個值表示兩個 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數的內容。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CultureInfo">
      <summary>取得 <see cref="T:System.Globalization.CultureInfo" /> 結構，其表示有關這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 物件的文化特性 (Culture) 資訊。</summary>
      <returns>
        <see cref="T:System.Globalization.CultureInfo" /> 結構，描述有關這個 SqlString 結構的文化特性資訊，包括文化特性的名稱、撰寫的系統和使用的曆法，也包括存取特定文化特性的物件，這些物件會為一般作業 (例如格式化日期及排序字串) 提供方法。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlString" /> 運算元的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>如果兩個值相等，則為 <see langword="true" />， 否則為 <see langword="false" />。 如果任一執行個體是 null，則 <see langword="SqlString" /> 會是 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Object)">
      <summary>將提供的物件參數與 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 物件的 <see cref="T:System.Data.SqlTypes.SqlString" /> 屬性相比較。</summary>
      <param name="value">要比較的物件。</param>
      <returns>若物件是 <see cref="T:System.Data.SqlTypes.SqlString" /> 的執行個體且兩者相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetHashCode">
      <summary>取得這個執行個體的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetNonUnicodeBytes">
      <summary>取得位元組的陣列，包含 ANSI 格式的 <see cref="T:System.Data.SqlTypes.SqlString" /> 內容。</summary>
      <returns>位元組陣列，包含 ANSI 格式的 <see cref="T:System.Data.SqlTypes.SqlString" /> 內容。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetUnicodeBytes">
      <summary>取得位元組的陣列，包含 Unicode 格式的 <see cref="T:System.Data.SqlTypes.SqlString" /> 內容。</summary>
      <returns>位元組陣列，包含 Unicode 格式的 <see cref="T:System.Data.SqlTypes.SqlString" /> 內容。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>傳回指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>
        <see langword="string" /> 值，表示指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlString" /> 運算元的邏輯比對，判斷第一個運算元是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlString" /> 運算元的邏輯比對，判斷第一個運算元是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreCase">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比較必須應該忽略大小寫。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreKanaType">
      <summary>指定字串比較必須忽略假名類型。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreNonSpace">
      <summary>指定字串比較必須忽略非空格組合的字元，例如變音符號 (Diacritic)。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreWidth">
      <summary>指定字串比較必須忽略字元寬度。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.IsNull">
      <summary>表示這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構是否為 Null。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 為 <see cref="F:System.Data.SqlTypes.SqlString.Null" />，則為 <see langword="true" />， 否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.LCID">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的地理地區設定和語言。</summary>
      <returns>存放在 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 屬性中字串的地區設定 ID。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlString" /> 運算元的邏輯比對，判斷第一個運算元是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlString" /> 運算元的邏輯比對，判斷第一個運算元是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.NotEquals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlString" /> 運算元的邏輯比對，以判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.Null">
      <summary>表示 <see cref="T:System.DBNull" />，可以指派至 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構的執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Addition(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>將兩個指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構串連在一起。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" />，包含剛串連的值，這個值表示兩個 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數的內容。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Equality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlString" /> 運算元的邏輯比對，以判斷它們是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlString">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" />，含有 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 參數的字串表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlString">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構轉換成 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 物件，含有 <see cref="T:System.Data.SqlTypes.SqlByte" /> 參數的字串表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.Data.SqlTypes.SqlString">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" />，含有 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 參數的字串表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlString">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要轉換的 <see langword="SqlDecimal" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" />，含有 <see langword="SqlDecimal" /> 參數的字串表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlString">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" />，含有 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 參數的字串表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlString">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" />，其值為指定 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlString">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 物件，含有 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 參數的字串表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlString">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要被轉換的 SqlInt32 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 物件，含有 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 參數的字串表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlString">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 物件，含有 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 參數的字串表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlString">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" />，含有 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 參數的字串表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlString">
      <summary>將指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 結構。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" />，含有 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 參數的字串表示。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlString)~System.String">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlString" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>
        <see langword="String" />，其內容與 <see cref="T:System.Data.SqlTypes.SqlString" /> 參數的 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 屬性相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlString" /> 運算元的邏輯比對，判斷第一個運算元是否大於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>如果第一個執行個體大於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlString" /> 運算元的邏輯比對，判斷第一個運算元是否大於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>如果第一個執行個體大於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Implicit(System.String)~System.Data.SqlTypes.SqlString">
      <summary>將 <see cref="T:System.String" /> 參數轉換成 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要轉換的 <see cref="T:System.String" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" />，包含指定 <see langword="String" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Inequality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlString" /> 運算元的邏輯比對，以判斷它們是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果兩個執行個體不相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，如果兩個執行個體相等，則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlString" /> 運算元的邏輯比對，判斷第一個運算元是否小於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>如果第一個執行個體小於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>執行兩個 <see cref="T:System.Data.SqlTypes.SqlString" /> 運算元的邏輯比對，判斷第一個運算元是否小於或等於第二個。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>如果第一個執行個體小於或等於第二個執行個體，則 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 為 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />， 否則為 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一執行個體是 null，則 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 會是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.SqlCompareOptions">
      <summary>一個或多個 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 列舉 (Enumeration) 值的組合表示應該將這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 與其他 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構相比較的方式。</summary>
      <returns>數值，指定應該如何將這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 與其他 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構相比較。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成員支援 .NET Framework 基礎結構，並不能直接使用於您的程式碼中。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlBoolean">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 為非零，則為 <see langword="true" />，如果為零，則為 <see langword="false" />，否則為 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlByte">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>新的 <see langword="SqlByte" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 等於這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構所表示的數字。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDateTime">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <returns>新的 <see langword="SqlDateTime" /> 結構，含有這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 所表示的日期值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDecimal">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />，包含這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDouble">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 的數值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlGuid">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 結構，其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 為這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構所表示的 <see langword="Guid" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt16">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 的數值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt32">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 的數值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt64">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 的數值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlMoney">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 的數值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlSingle">
      <summary>將這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構轉換為 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" />，等於這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 的數值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToString">
      <summary>將 <see cref="T:System.Data.SqlTypes.SqlString" /> 物件轉換成 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.String" />，具有與這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構相同的值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.Value">
      <summary>取得存放在這個 <see cref="T:System.Data.SqlTypes.SqlString" /> 結構中的字串。 這個屬性是唯讀的。</summary>
      <returns>已儲存的字串。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">字串的值是 <see cref="F:System.Data.SqlTypes.SqlString.Null" />。</exception>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTruncateException">
      <summary>將某一個值設定成會截斷該值的 <see cref="N:System.Data.SqlTypes" /> 結構時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 的參考，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="e">內部 <see cref="T:System.Exception" /> 的參考。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTypeException">
      <summary>
        <see cref="N:System.Data.SqlTypes" /> 的基底例外狀況 (Exception) 類別。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 類別的新執行個體。</summary>
      <param name="si">存放序列物件資料的物件。</param>
      <param name="sc">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="e">做為目前例外狀況發生原因的例外狀況。 如果 <c>innerException</c> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlXml">
      <summary>表示存放在伺服器或從伺服器擷取的 XML 資料。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor">
      <summary>建立新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 執行個體。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.IO.Stream)">
      <summary>建立新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 執行個體，從提供的 <see cref="T:System.IO.Stream" /> 衍生執行個體提供 XML 值。</summary>
      <param name="value">
        <see cref="T:System.IO.Stream" /> 衍生的執行個體 (例如 <see cref="T:System.IO.FileStream" />)，從其中載入 <see cref="T:System.Data.SqlTypes.SqlXml" /> 執行個體的 XML 內容。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.Xml.XmlReader)">
      <summary>建立新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 執行個體，並使它與提供的 <see cref="T:System.Xml.XmlReader" /> 內容產生關聯。</summary>
      <param name="value">
        <see cref="T:System.Xml.XmlReader" /> 衍生類別執行個體，用來當做新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 執行個體之值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.CreateReader">
      <summary>取得這個 <see cref="T:System.Data.SqlTypes.SqlXml" /> 之 XML 內容的值做為 <see cref="T:System.Xml.XmlReader" />。</summary>
      <returns>包含 XML 內容的 <see cref="T:System.Xml.XmlReader" /> 衍生執行個體。 實際型別會因伺服器在內部表示資訊的方式而異 (例如，傳回值可能是 <see cref="T:System.Xml.XmlTextReader" />)。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">嘗試在 <see cref="T:System.Data.SqlTypes.SqlXml" /> 的 null 執行個體上存取這個屬性。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>傳回指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>字串，表示指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.IsNull">
      <summary>指出這個執行個體是否表示 null 的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 值。</summary>
      <returns>如果 <see langword="true" /> 為 null，則為 <see langword="Value" />。 否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Null">
      <summary>表示 <see cref="T:System.Data.SqlTypes.SqlXml" /> 型別的 null 執行個體。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlXml" /> 型別的 null 執行個體。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" />，描述物件的 XML 表示，該物件由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法產生，由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法取用。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
      <param name="r">XmlReader。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
      <param name="writer">XmlWriter。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Value">
      <summary>取得這個 <see cref="T:System.Data.SqlTypes.SqlXml" /> 執行個體的 XML 內容字串表示。</summary>
      <returns>XML 內容的字串表示。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.StorageState">
      <summary>
        <see cref="T:System.Data.SqlTypes.StorageState" /> 列舉型別 (Enumeration) 並非要做為獨立的元件使用，而是要做為其他類別衍生標準功能的列舉型別。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.Buffer">
      <summary>緩衝區大小。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.Stream">
      <summary>資料流。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.UnmanagedBuffer">
      <summary>Unmanaged 緩衝區。</summary>
    </member>
    <member name="T:System.Data.StateChangeEventArgs">
      <summary>為 .NET Framework 資料提供者 (Data Provider) 的狀態變更事件提供資料。</summary>
    </member>
    <member name="M:System.Data.StateChangeEventArgs.#ctor(System.Data.ConnectionState,System.Data.ConnectionState)">
      <summary>在提供物件的原始狀態和目前狀態時，初始化 <see cref="T:System.Data.StateChangeEventArgs" /> 類別的新執行個體。</summary>
      <param name="originalState">其中一個 <see cref="T:System.Data.ConnectionState" /> 值。</param>
      <param name="currentState">其中一個 <see cref="T:System.Data.ConnectionState" /> 值。</param>
    </member>
    <member name="P:System.Data.StateChangeEventArgs.CurrentState">
      <summary>取得連線的新狀態。 當引發事件時，連接物件將會處於新的狀態中。</summary>
      <returns>其中一個 <see cref="T:System.Data.ConnectionState" /> 值。</returns>
    </member>
    <member name="P:System.Data.StateChangeEventArgs.OriginalState">
      <summary>取得連線的原始狀態。</summary>
      <returns>其中一個 <see cref="T:System.Data.ConnectionState" /> 值。</returns>
    </member>
    <member name="T:System.Data.StateChangeEventHandler">
      <summary>代表將處理 <see cref="E:System.Data.Common.DbConnection.StateChange" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">包含事件資料的 <see cref="T:System.Data.StateChangeEventArgs" />。</param>
    </member>
    <member name="T:System.Data.StatementCompletedEventArgs">
      <summary>提供 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件的其他資訊。</summary>
    </member>
    <member name="M:System.Data.StatementCompletedEventArgs.#ctor(System.Int32)">
      <summary>建立 <see cref="T:System.Data.StatementCompletedEventArgs" /> 類別的新執行個體。</summary>
      <param name="recordCount">指出導致發生 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件之陳述式所影響的列數。</param>
    </member>
    <member name="P:System.Data.StatementCompletedEventArgs.RecordCount">
      <summary>指出導致發生 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件之陳述式所影響的列數。</summary>
      <returns>受影響的資料列數目。</returns>
    </member>
    <member name="T:System.Data.StatementCompletedEventHandler">
      <summary>
        <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件之事件處理常式的委派型別。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">事件的資料。</param>
    </member>
    <member name="T:System.Data.StatementType">
      <summary>指定要由 <see cref="T:System.Data.OleDb.OleDbRowUpdatedEventArgs" />、<see cref="T:System.Data.OleDb.OleDbRowUpdatingEventArgs" />、<see cref="T:System.Data.SqlClient.SqlRowUpdatedEventArgs" /> 或 <see cref="T:System.Data.SqlClient.SqlRowUpdatingEventArgs" /> 類別使用的 SQL 查詢型別。</summary>
    </member>
    <member name="F:System.Data.StatementType.Batch">
      <summary>SQL 查詢為批次陳述式。</summary>
    </member>
    <member name="F:System.Data.StatementType.Delete">
      <summary>SQL 查詢為 DELETE 陳述式 (Statement)。</summary>
    </member>
    <member name="F:System.Data.StatementType.Insert">
      <summary>SQL 查詢為 INSERT 陳述式。</summary>
    </member>
    <member name="F:System.Data.StatementType.Select">
      <summary>SQL 查詢為 SELECT 陳述式。</summary>
    </member>
    <member name="F:System.Data.StatementType.Update">
      <summary>SQL 查詢為 UPDATE 陳述式。</summary>
    </member>
    <member name="T:System.Data.StrongTypingException">
      <summary>例外狀況，會在使用者存取 <see langword="DBNull" /> 值時由強型別 (Strongly Typed) <see cref="T:System.Data.DataSet" /> 擲回。</summary>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor">
      <summary>初始化 <see cref="T:System.Data.StrongTypingException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定序列化 (Serialization) 資訊和資料流 (Streaming) 內容，初始化 <see cref="T:System.Data.StrongTypingException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 結構。</param>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.String)">
      <summary>使用指定的字串，初始化 <see cref="T:System.Data.StrongTypingException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.String,System.Exception)">
      <summary>使用指定的字串和內部例外狀況，初始化 <see cref="T:System.Data.StrongTypingException" /> 類別的新執行個體。</summary>
      <param name="s">例外狀況擲回時要顯示的字串。</param>
      <param name="innerException">內部例外狀況的參考。</param>
    </member>
    <member name="T:System.Data.SyntaxErrorException">
      <summary>表示當 <see cref="P:System.Data.DataColumn.Expression" /> 的 <see cref="T:System.Data.DataColumn" /> 屬性含有語法錯誤時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SyntaxErrorException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Data.SyntaxErrorException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需的資料。</param>
      <param name="context">特定序列化資料流的來源和目的端。</param>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.String)">
      <summary>使用指定的字串，初始化 <see cref="T:System.Data.SyntaxErrorException" /> 類別的新執行個體。</summary>
      <param name="s">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Data.SyntaxErrorException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.TypedTableBase`1">
      <summary>這個類型在 Visual Studio 和 XSD.exe .NET Framework 工具產生 <see cref="T:System.Data.DataTable" /> 型物件時使用作為基底類別，不能直接從程式碼使用。</summary>
      <typeparam name="T">資料表所表示來源序列中物件的型別，通常為 <see cref="T:System.Data.DataRow" />。</typeparam>
    </member>
    <member name="M:System.Data.TypedTableBase`1.#ctor">
      <summary>初始化新的 <see cref="T:System.Data.TypedTableBase`1" />。 這個方法支援 Visual Studio 和 XSD.exe .NET Framework 工具產生的具型別 <see cref="T:System.Data.DataTable" /> 物件。 這個型別並不適合直接從您的程式碼使用。</summary>
    </member>
    <member name="M:System.Data.TypedTableBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化新的 <see cref="T:System.Data.TypedTableBase`1" />。 這個方法支援 Visual Studio 和 XSD.exe .NET Framework 工具產生的具型別 <see cref="T:System.Data.DataTable" /> 物件。 這個方法不能從程式碼直接使用。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含建構物件所需的資料。</param>
      <param name="context">所要還原序列化的物件串流內容。</param>
    </member>
    <member name="M:System.Data.TypedTableBase`1.Cast``1">
      <summary>將 <see cref="T:System.Data.TypedTableBase`1" /> 的項目轉換為指定的型別。 這個方法支援 Visual Studio 和 XSD.exe .NET Framework 工具產生的具型別 <see cref="T:System.Data.DataTable" /> 物件。 這個方法不能從程式碼直接使用。</summary>
      <typeparam name="TResult" />
      <returns>
        <see cref="T:System.Data.EnumerableRowCollection" />，包含已轉換成指定之型別的每個來源序列項目。</returns>
    </member>
    <member name="M:System.Data.TypedTableBase`1.GetEnumerator">
      <summary>傳回 <see cref="T:System.Data.DataRow" /> 型別的列舉程式。 這個方法支援 Visual Studio 和 XSD.exe .NET Framework 工具產生的具型別 <see cref="T:System.Data.DataTable" /> 物件。 這個方法不能從程式碼直接使用。</summary>
      <returns>實作 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 介面的物件。</returns>
    </member>
    <member name="M:System.Data.TypedTableBase`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回 <see cref="T:System.Data.DataRow" /> 型別的列舉程式。 這個方法支援 Visual Studio 和 XSD.exe .NET Framework 工具產生的具型別 <see cref="T:System.Data.DataTable" /> 物件。 這個方法不能從程式碼直接使用。</summary>
      <returns>實作 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 介面的物件。</returns>
    </member>
    <member name="T:System.Data.TypedTableBaseExtensions">
      <summary>包含 <see cref="T:System.Data.TypedTableBase`1" /> 類別的擴充方法。</summary>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.AsEnumerable``1(System.Data.TypedTableBase{``0})">
      <summary>列舉 <see cref="T:System.Data.TypedTableBase`1" /> 的資料列項目並傳回 <see cref="T:System.Data.EnumerableRowCollection`1" /> 物件，其中泛型參數 <paramref name="T" /> 為 <see cref="T:System.Data.DataRow" />。 這個物件可以在 LINQ 運算式或方法查詢中使用。</summary>
      <param name="source">要成為可列舉的來源 <see cref="T:System.Data.TypedTableBase`1" />。</param>
      <typeparam name="TRow">來源的項目所要轉換的目標型別。</typeparam>
      <returns>
        <see cref="T:System.Data.EnumerableRowCollection`1" /> 物件，其中泛型參數 <paramref name="T" /> 為 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.ElementAtOrDefault``1(System.Data.TypedTableBase{``0},System.Int32)">
      <summary>傳回位於序列中指定的資料列的項目；如果資料列超出範圍，則傳回預設值。</summary>
      <param name="source">要從中傳回項目的可列舉物件。</param>
      <param name="index">要擷取的項目之以零為起始索引。</param>
      <typeparam name="TRow">項目的型別或資料列。</typeparam>
      <returns>位於序列中之指定的資料列的項目。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>依據指定的索引鍵，按遞增順序排序 <see cref="T:System.Data.TypedTableBase`1" /> 的資料列。</summary>
      <param name="source">
        <see cref="T:System.Data.TypedTableBase`1" />，其中包含要排序的 <see cref="T:System.Data.DataRow" /> 項目。</param>
      <param name="keySelector">用來從項目擷取索引鍵的函式。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中資料列項目的型別，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回之索引鍵的型別。</typeparam>
      <returns>
        <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其項目排序依據是指定的索引鍵。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>依據指定的索引鍵和比較子，按遞增順序排序 <see cref="T:System.Data.TypedTableBase`1" /> 的資料列。</summary>
      <param name="source">
        <see cref="T:System.Data.TypedTableBase`1" />，其中包含要排序的 <see cref="T:System.Data.DataRow" /> 項目。</param>
      <param name="keySelector">用來從項目擷取索引鍵的函式。</param>
      <param name="comparer">用來比較金鑰的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中資料列項目的型別，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回之索引鍵的型別。</typeparam>
      <returns>
        <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其項目是根據指定的索引鍵和比較子進行排序。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>依據指定的索引鍵，按遞減順序排序 <see cref="T:System.Data.TypedTableBase`1" /> 的資料列。</summary>
      <param name="source">
        <see cref="T:System.Data.TypedTableBase`1" />，其中包含要排序的 <see cref="T:System.Data.DataRow" /> 項目。</param>
      <param name="keySelector">用來從項目擷取索引鍵的函式。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中資料列項目的型別，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回之索引鍵的型別。</typeparam>
      <returns>
        <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其項目排序依據是指定的索引鍵。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>依據指定的索引鍵和比較子，按遞減順序排序 <see cref="T:System.Data.TypedTableBase`1" /> 的資料列。</summary>
      <param name="source">
        <see cref="T:System.Data.TypedTableBase`1" />，其中包含要排序的 <see cref="T:System.Data.DataRow" /> 項目。</param>
      <param name="keySelector">用來從項目擷取索引鍵的函式。</param>
      <param name="comparer">用來比較金鑰的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中資料列項目的型別，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 所傳回之索引鍵的型別。</typeparam>
      <returns>
        <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其項目是根據指定的索引鍵和比較子進行排序。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.Select``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>將 <see cref="T:System.Data.TypedTableBase`1" /> 的各個項目投影成一個新的表單。</summary>
      <param name="source">
        <see cref="T:System.Data.TypedTableBase`1" />，包含要對其叫用轉換函式的 <see cref="T:System.Data.DataRow" /> 項目。</param>
      <param name="selector">要套用至各個項目的轉換函式。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中資料列項目的型別，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="S" />
      <returns>
        <see cref="T:System.Data.EnumerableRowCollection`1" />，其項目是對 <paramref name="source" /> 的各個項目叫用轉換函式的結果。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.Where``1(System.Data.TypedTableBase{``0},System.Func{``0,System.Boolean})">
      <summary>根據指定的述詞來篩選資料列序列。</summary>
      <param name="source">
        <see cref="T:System.Data.TypedTableBase`1" />，其中包含要篩選的 <see cref="T:System.Data.DataRow" /> 項目。</param>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中資料列項目的型別，通常是 <see cref="T:System.Data.DataRow" />。</typeparam>
      <returns>
        <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其中包含輸入序列中符合條件的資料列。</returns>
    </member>
    <member name="T:System.Data.UniqueConstraint">
      <summary>表示所有值都必須是唯一的資料行集限制。</summary>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn)">
      <summary>使用指定的 <see cref="T:System.Data.UniqueConstraint" /> 初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="column">要限制的 <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn,System.Boolean)">
      <summary>使用要限制的 <see cref="T:System.Data.UniqueConstraint" /> 和指定條件約束是否為主索引鍵的值，來初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="column">要限制的 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="isPrimaryKey">若要指示條件約束是主索引鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn[])">
      <summary>使用 <see cref="T:System.Data.UniqueConstraint" /> 物件的指定陣列，初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="columns">要限制的 <see cref="T:System.Data.DataColumn" /> 物件陣列。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn[],System.Boolean)">
      <summary>使用要限制的 <see cref="T:System.Data.UniqueConstraint" /> 物件陣列和指定條件約束是否為主索引鍵的值，來初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="columns">要限制的 <see cref="T:System.Data.DataColumn" /> 物件陣列。</param>
      <param name="isPrimaryKey">若要指示條件約束是主索引鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn)">
      <summary>使用指定名稱和 <see cref="T:System.Data.UniqueConstraint" /> 來初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="name">條件約束的名稱。</param>
      <param name="column">要限制的 <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn,System.Boolean)">
      <summary>使用指定名稱、要限制的 <see cref="T:System.Data.UniqueConstraint" /> 和指定條件約束是否為主索引鍵的值，來初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="name">條件約束的名稱。</param>
      <param name="column">要限制的 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="isPrimaryKey">若要指示條件約束是主索引鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn[])">
      <summary>使用指定名稱和 <see cref="T:System.Data.UniqueConstraint" /> 物件的陣列，來初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="name">條件約束的名稱。</param>
      <param name="columns">要限制的 <see cref="T:System.Data.DataColumn" /> 物件陣列。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn[],System.Boolean)">
      <summary>使用指定名稱、要限制的 <see cref="T:System.Data.UniqueConstraint" /> 物件陣列和指定條件約束是否為主索引鍵的值，來初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="name">條件約束的名稱。</param>
      <param name="columns">要限制的 <see cref="T:System.Data.DataColumn" /> 物件陣列。</param>
      <param name="isPrimaryKey">若要指示條件約束是主索引鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.String[],System.Boolean)">
      <summary>使用指定名稱、要限制的 <see cref="T:System.Data.UniqueConstraint" /> 物件陣列和指定條件約束是否為主索引鍵的值，來初始化 <see cref="T:System.Data.DataColumn" /> 類別的新執行個體。</summary>
      <param name="name">條件約束的名稱。</param>
      <param name="columnNames">要限制的 <see cref="T:System.Data.DataColumn" /> 物件陣列。</param>
      <param name="isPrimaryKey">若要指示條件約束是主索引鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.Data.UniqueConstraint.Columns">
      <summary>取得這個條件約束影響的資料行陣列。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 物件的陣列。</returns>
    </member>
    <member name="M:System.Data.UniqueConstraint.Equals(System.Object)">
      <summary>將這個條件約束和第二個條件約束相比較，以判斷兩者是否相同。</summary>
      <param name="key2">這個 <see cref="T:System.Data.UniqueConstraint" /> 所要比較的物件。</param>
      <returns>若兩個條件約束相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.UniqueConstraint.GetHashCode">
      <summary>取得 <see cref="T:System.Data.UniqueConstraint" /> 物件的這個執行個體之雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Data.UniqueConstraint.IsPrimaryKey">
      <summary>取得數值，指示條件約束是否在主索引鍵上。</summary>
      <returns>如果條件約束在主索引鍵上，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.UniqueConstraint.Table">
      <summary>取得這個條件約束所屬的資料表。</summary>
      <returns>條件約束所屬的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="T:System.Data.UpdateRowSource">
      <summary>指定如何將查詢命令結果套用到正在更新的資料列。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.Both">
      <summary>輸出參數和第一個傳回的資料列都對應至 <see cref="T:System.Data.DataSet" /> 中已變更的資料列。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.FirstReturnedRecord">
      <summary>第一個傳回的資料列中的資料是對應至 <see cref="T:System.Data.DataSet" /> 中已經變更的資料列。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.None">
      <summary>系統會忽略任何傳回的參數或資料列。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.OutputParameters">
      <summary>輸出參數是對應至 <see cref="T:System.Data.DataSet" /> 中已經變更的資料列。</summary>
    </member>
    <member name="T:System.Data.UpdateStatus">
      <summary>指定 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 期間要採取關於目前和其餘資料列的動作。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.Continue">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" /> 將繼續處理資料列。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.ErrorsOccurred">
      <summary>事件處理常式會報告應該將更新視為錯誤。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.SkipAllRemainingRows">
      <summary>不更新目前的資料列和所有其餘的資料列。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.SkipCurrentRow">
      <summary>將不更新目前的資料列。</summary>
    </member>
    <member name="T:System.Data.VersionNotFoundException">
      <summary>表示在嘗試傳回已經刪除的 <see cref="T:System.Data.DataRow" /> 版本時所傳回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.Data.VersionNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資訊，初始化 <see cref="T:System.Data.VersionNotFoundException" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需要的資料。</param>
      <param name="context">來源的描述和指定的序列化資料流的目的端。</param>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.String)">
      <summary>使用指定的字串，初始化 <see cref="T:System.Data.VersionNotFoundException" /> 類別的新執行個體。</summary>
      <param name="s">例外狀況擲回時要顯示的字串。</param>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Data.VersionNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.XmlReadMode">
      <summary>指定如何將 XML 資料和關聯式結構描述讀入 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.Auto">
      <summary>預設的讀取模式。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.DiffGram">
      <summary>讀取 DiffGram，同時將來自 DiffGram 的變更套用至 <see cref="T:System.Data.DataSet" />。 其語意與 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 作業的語意相同。 如同 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 作業一樣，會保留 <see cref="P:System.Data.DataRow.RowState" /> 值。 若要取得含有 DiffGram 的 <see cref="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" /> 輸入，您應該只使用來自 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" /> 且為 DiffGram 形式的輸出。
目標 <see cref="T:System.Data.DataSet" /> 必須與 <see cref="T:System.Data.DataSet" /> 呼叫 DiffGram 所在 <see cref="Overload:System.Data.DataSet.WriteXml" /> 具有相同的結構描述。 否則，DiffGram 合併作業會失敗並擲回例外狀況。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.Fragment">
      <summary>讀取 XML 片段，例如針對 SQL Server 的執行個體執行 FOR XML 查詢時所產生的片段。 當 <see cref="T:System.Data.XmlReadMode" /> 設定為 <see langword="Fragment" /> 時，系統會將預設命名空間讀取為內嵌結構描述。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.IgnoreSchema">
      <summary>忽略任何內嵌結構描述，並將資料讀入現有的 <see cref="T:System.Data.DataSet" /> 結構描述中。 如果沒有任何資料符合現有的結構描述，則會捨棄該資料 (包括為 <see cref="T:System.Data.DataSet" /> 定義之不同命名空間的資料)。 如果資料是 DiffGram，則 <see langword="IgnoreSchema" /> 具有與 <see langword="DiffGram" /> 相同的功能。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.InferSchema">
      <summary>忽略任何內嵌結構描述、從資料推斷結構描述，並載入資料。 如果 <see cref="T:System.Data.DataSet" /> 已經含有結構描述，則會新增新的資料表或將資料行新增至現有資料表，以擴充目前的結構描述。 如果推斷的資料表已經存在，但是具有不同的命名空間，或者如果任何的推斷資料行與現有資料行衝突，則會擲回例外狀況。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.InferTypedSchema">
      <summary>忽略任何內嵌結構描述，從資料推斷出強型別結構描述，並載入資料。 如果無法從資料推斷類型，就會將其解譯為字串資料。 如果 <see cref="T:System.Data.DataSet" /> 已經含有結構描述，則會新增新的資料表或將資料行新增至現有資料表，以擴充目前的結構描述。 如果推斷的資料表已經存在，但是具有不同的命名空間，或者如果任何的推斷資料行與現有資料行衝突，則會擲回例外狀況。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.ReadSchema">
      <summary>讀取任何內嵌結構描述，並載入資料。 如果 <see cref="T:System.Data.DataSet" /> 已經含有結構描述，則可能會將新的資料表新增至結構描述，但如果內嵌結構描述中的任何資料表已經存在於 <see cref="T:System.Data.DataSet" /> 中，則會擲回例外狀況。</summary>
    </member>
    <member name="T:System.Data.XmlWriteMode">
      <summary>指定如何從 <see cref="T:System.Data.DataSet" /> 寫入 XML 資料和關聯式結構描述 (Schema)。</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.DiffGram">
      <summary>將整個 <see cref="T:System.Data.DataSet" /> 寫入為 DiffGram (包括原始值和目前值)。 若要產生僅含有已變更值的 DiffGram，請呼叫 <see cref="M:System.Data.DataSet.GetChanges" />，然後在傳回的 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" /> 上呼叫做為 DiffGram 的 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.IgnoreSchema">
      <summary>將 <see cref="T:System.Data.DataSet" /> 的目前內容寫入為 XML 資料，不包括 XSD 結構描述。 如果沒有資料載入至 <see cref="T:System.Data.DataSet" />，則不會寫入任何內容。</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.WriteSchema">
      <summary>將 <see cref="T:System.Data.DataSet" /> 的目前內容寫入為XML 資料，該資料具有做為內嵌 XSD 結構描述的關聯式結構。 如果 <see cref="T:System.Data.DataSet" /> 只有不具有資料的結構描述，則只會寫入內嵌結構描述。 如果 <see cref="T:System.Data.DataSet" /> 不具有目前的結構描述，則不會寫入任何內容。</summary>
    </member>
    <member name="T:System.Xml.XmlDataDocument">
      <summary>允許透過關聯式 <see cref="T:System.Data.DataSet" /> 存放、擷取及管理結構化資料。</summary>
    </member>
    <member name="M:System.Xml.XmlDataDocument.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlDataDocument" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDataDocument" /> 初始化 <see cref="T:System.Data.DataSet" /> 類別的新執行個體。</summary>
      <param name="dataset">要載入 <see langword="DataSet" /> 中的 <see langword="XmlDataDocument" />。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CloneNode(System.Boolean)">
      <summary>建立目前節點的複本。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。</param>
      <returns>複製的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)">
      <summary>建立具有指定之 <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的項目。</summary>
      <param name="prefix">新項目的前置詞。 如果 String.Empty 或 <see langword="null" />，則沒有前置字元。</param>
      <param name="localName">新項目的本機名稱。</param>
      <param name="namespaceURI">取得新項目的命名空間統一資源識別元 (URI)。 如果 String.Empty 或 <see langword="null" />，則沒有命名空間 URI。</param>
      <returns>新的 <see cref="T:System.Xml.XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateEntityReference(System.String)">
      <summary>建立具有指定名稱的 <see cref="T:System.Xml.XmlEntityReference" />。</summary>
      <param name="name">實體參考的名稱。</param>
      <returns>具有指定名稱的 <see cref="T:System.Xml.XmlEntityReference" />。</returns>
      <exception cref="T:System.NotSupportedException">呼叫這個方法。</exception>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary>建立巡覽這份文件的新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件。 <see langword="XPathNavigator" /> 定位在 <paramref name="node" /> 參數中指定的節點上。</summary>
      <param name="node">您希望巡覽器一開始定位所在的 <see cref="T:System.Xml.XmlNode" />。</param>
      <returns>用來巡覽文件的 <see langword="XPathNavigator" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDataDocument.DataSet">
      <summary>取得提供 <see langword="XmlDataDocument" /> 中之資料的關聯式表示的 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>
        <see langword="DataSet" />，可以利用關聯式模型以用於存取 <see langword="XmlDataDocument" /> 中的資料。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementById(System.String)">
      <summary>取得具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />。 <see cref="T:System.Xml.XmlDataDocument" /> 類別不支援這個方法。 呼叫這個方法會擲回例外狀況。</summary>
      <param name="elemId">要比對的屬性 ID。</param>
      <returns>具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />。</returns>
      <exception cref="T:System.NotSupportedException">呼叫這個方法。</exception>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)">
      <summary>擷取與指定的 <see cref="T:System.Xml.XmlElement" /> 關聯的 <see cref="T:System.Data.DataRow" />。</summary>
      <param name="r">您要擷取其相關 <see langword="DataRow" /> 的 <see langword="XmlElement" />。</param>
      <returns>
        <see langword="XmlElement" />，含指定的 <see langword="DataRow" /> 的表示。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementsByTagName(System.String)">
      <summary>傳回 <see cref="T:System.Xml.XmlNodeList" />，其中包含符合指定 <see cref="P:System.Xml.XmlDocument.Name" /> 之所有子代 (Descendant) 項目的清單。</summary>
      <param name="name">要相符的限定名稱。 它會與符合節點的 <see cref="P:System.Xml.XmlDocument.Name" /> 屬性比對。 特殊值 "*" 與所有標記相符。</param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有符合節點的清單。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)">
      <summary>擷取與指定的 <see cref="T:System.Data.DataRow" /> 關聯的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <param name="e">您要擷取其相關 <see langword="XmlElement" /> 的 <see langword="DataRow" />。</param>
      <returns>包含 <see langword="DataRow" /> 表示的 <see langword="XmlElement" />，如果沒有與 <see langword="null" /> 關聯的 <see langword="DataRow" />，則為 <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.IO.Stream)">
      <summary>從指定的資料流載入 <see langword="XmlDataDocument" />。</summary>
      <param name="inStream">包含要載入之 XML 文件的資料流。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.IO.TextReader)">
      <summary>從指定的 <see cref="T:System.IO.TextReader" /> 載入 <see langword="XmlDataDocument" />。</summary>
      <param name="txtReader">用於將 XML 資料送入文件中的 <see langword="TextReader" />。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.String)">
      <summary>使用指定的 URL 載入 <see langword="XmlDataDocument" />。</summary>
      <param name="filename">包含要載入之 XML 文件的檔案的 URL。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)">
      <summary>從指定的 <see cref="T:System.Xml.XmlReader" /> 載入 <see langword="XmlDataDocument" />。</summary>
      <param name="reader">
        <see langword="XmlReader" />，包含要載入的 XML 文件。</param>
      <exception cref="T:System.NotSupportedException">載入的 XML 包含實體參考，並且讀取器不能解析實體。</exception>
    </member>
  </members>
</doc>
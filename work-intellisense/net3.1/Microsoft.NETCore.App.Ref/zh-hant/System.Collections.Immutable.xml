<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable collection of key/value pairs.  &#xA;&#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示索引鍵/值組的不可變集合。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">字典中之索引鍵的類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">字典中之值的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the dictionary.">將具有指定之索引鍵和值的項目加入至字典。</summary>
      <param name="key" vsli:raw="The key of the element to add.">要加入的項目的索引鍵。</param>
      <param name="value" vsli:raw="The value of the element to add.">要加入的項目的值。</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">新的不可變字典，其中包含其他索引鍵/值組。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">字典中已經存在指定的索引鍵，但有不同的值。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the dictionary.">將指定的索引鍵/值組加入至字典中。</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">要加入的索引鍵/值組。</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">新的不可變字典，其中包含其他索引鍵/值組。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">字典中已經存在指定的其中一個索引鍵，但有不同的值。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">擷取空字典，其具有與字典執行個體相同的順序和索引鍵/值比較規則。</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">具有對等順序和索引鍵/值比較規則的空字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains the specified key/value pair.">判斷此不可變的字典是否包含指定的索引鍵/值組。</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">要尋找的索引鍵/值組。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在字典中找到指定的索引鍵/值組，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">從不可變的字典中移除具有指定之索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的項目索引鍵。</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">移除指定之項目的新不可變字典，如果在字典中找不到指定的索引鍵，則為此執行個體。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">將具有指定之索引鍵的項目從不可變的字典移除。</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">要移除之項目的索引鍵。</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">已移除指定之索引鍵的新不可變字典，如果在字典中找不到指定的索引鍵，則為此執行個體。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">設定不可變字典中指定的索引鍵和值，可能會覆寫索引鍵的現有值。</summary>
      <param name="key" vsli:raw="The key of the entry to add.">要加入的項目索引鍵。</param>
      <param name="value" vsli:raw="The key value to set.">要設定的索引鍵值。</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">新的不可變字典，其中包含指定的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">設定不可變字典中指定的索引鍵/值組，可能會覆寫索引鍵的現有值。</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">要在字典中設定的索引鍵/值組。 如果任何索引鍵已經存在字典中，則此方法將會覆寫其先前的值</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">新的不可變字典，其中包含指定的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">判斷此字典是否包含指定的索引鍵。</summary>
      <param name="equalKey" vsli:raw="The key to search for.">要搜尋的索引鍵。</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">如果找到，則為位於字典中相符的索引鍵；如果找不到相符項目，則為 <c>equalkey</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到 <see langword="true" /> 的相符項，則為 <paramref name="equalKey" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary vsli:raw="Represents a list of elements that cannot be modified.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">代表無法修改之項目的清單。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">清單中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary vsli:raw="Makes a copy of the list, and adds the specified object to the end of the copied list.">複製清單，並將指定的物件加入至複製的清單結尾。</summary>
      <param name="value" vsli:raw="The object to add to the list.">要加入至清單的物件。</param>
      <returns vsli:raw="A new list with the object added.">新增物件的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Makes a copy of the list and adds the specified objects to the end of the copied list.">複製清單，並將指定的物件加入至複製的清單結尾。</summary>
      <param name="items" vsli:raw="The objects to add to the list.">要加入至清單的物件。</param>
      <returns vsli:raw="A new list with the elements added.">新增項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary vsli:raw="Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.">建立已移除所有項目，但具有與此清單相同排序及順序語意的清單。</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">空的清單，這個清單的排序及順序語意與這個執行個體相同。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">在 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中從指定索引開始且包含指定個數項目的範圍內，搜尋指定的物件第一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;. This value can be null for reference types.">要在 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中尋找的物件。 這個參考類型的值可以是 Null。</param>
      <param name="index" vsli:raw="The zero-based starting indexes of the search. 0 (zero) is valid in an empty list.">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">區段中要搜尋的項目數目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;item&quot; /&gt;.">要用來尋找 <paramref name="item" /> 的相等比較子。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements if found; otherwise -1.">在 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中從 <paramref name="index" /> 開始且包含 <paramref name="count" /> 個項目的範圍內，第一次出現 <paramref name="item" /> 之以零為起始的索引，如未找到，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">將指定的項目插入至不可變清單中的指定索引處。</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the value.">要插入值之以零起始的索引處。</param>
      <param name="element" vsli:raw="The object to insert.">要插入的物件。</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">新的不可變清單，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">將指定的項目插入至不可變清單中的指定索引處。</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">應插入新項目處的以零為起始的索引。</param>
      <param name="items" vsli:raw="The elements to insert.">要插入的項目。</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">新的不可變清單，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">在 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中包含指定個數項目且結尾位於指定索引的範圍內，搜尋指定的物件最後一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要在清單中尋找的物件 參考類型的值可以是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">區段中要搜尋的項目數目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to match &lt;paramref name=&quot;item&quot; /&gt;.">要符合 <paramref name="item" /> 的相等比較子。</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">傳回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of a specified object from this immutable list.">從這個不可變清單中移除第一個出現的指定物件。</summary>
      <param name="value" vsli:raw="The object to remove from the list.">要從清單中移除的物件。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;value&quot; /&gt;.">要用來尋找 <paramref name="value" /> 的相等比較子。</param>
      <returns vsli:raw="A new list with the specified object removed.">已移除指定物件的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">移除符合指定的述詞所定義之條件的所有項目。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">定義要移除項目之條件的委派。</param>
      <returns vsli:raw="A new immutable list with the elements removed.">已移除項目的新不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">移除不可變清單之指定索引處的項目。</summary>
      <param name="index" vsli:raw="The index of the element to remove.">要移除的項目索引。</param>
      <returns vsli:raw="A new list with the element removed.">已移除項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified object from the list.">從清單中移除指定的物件。</summary>
      <param name="items" vsli:raw="The objects to remove from the list.">要從清單中移除的物件。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to determine if &lt;paramref name=&quot;items&quot; /&gt; match any objects in the list.">用來判斷 <paramref name="items" /> 是否符合清單中任何物件的相等比較子。</param>
      <returns vsli:raw="A new immutable list with the specified objects removed, if &lt;paramref name=&quot;items&quot; /&gt; matched objects in the list.">如果 <paramref name="items" /> 符合清單中的物件，則為已移除指定之物件的新不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements from the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;.">從 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 移除的項目範圍。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range of elements to remove.">要移除之項目範圍內之以零為起始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements to remove.">要移除的項目數目。</param>
      <returns vsli:raw="A new immutable list with the elements removed.">已移除項目的新不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns a new list with the first matching element in the list replaced with the specified element.">傳回新的清單，且其清單中第一個相符的項目已取代為指定的項目。</summary>
      <param name="oldValue" vsli:raw="The element to be replaced.">要遭到取代的項目。</param>
      <param name="newValue" vsli:raw="The element to replace the first occurrence of &lt;paramref name=&quot;oldValue&quot; /&gt; with.">要用來取代第一個出現 <paramref name="oldValue" /> 的項目</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use for matching &lt;paramref name=&quot;oldValue&quot; /&gt;.">要用來符合 <paramref name="oldValue" /> 的相等比較子。</param>
      <returns vsli:raw="A new list that contains &lt;paramref name=&quot;newValue&quot; /&gt;, even if &lt;paramref name=&quot;oldvalue&quot; /&gt; is the same as &lt;paramref name=&quot;newValue&quot; /&gt;.">新的清單，其中包含 <paramref name="newValue" /> (即使 <paramref name="oldvalue" /> 與 <paramref name="newValue" /> 相同，也是如此)。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">清單中沒有 <paramref name="oldValue" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">使用指定的項目取代清單中指定位置的項目。</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">清單中要取代之元素的位置。</param>
      <param name="value" vsli:raw="The element to replace the old element with.">用來取代舊項目的項目。</param>
      <returns vsli:raw="A new list that contains the new element, even if the element at the specified location is the same as the new element.">新的清單，其中包含新的項目 (即使指定位置的項目與新的項目相同，也是如此)。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary vsli:raw="Represents an immutable first-in, first-out collection of objects.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示物件的不可變先進先出集合。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">佇列中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary vsli:raw="Returns a new queue with all the elements removed.">傳回已移除所有項目的新佇列。</summary>
      <returns vsli:raw="An empty immutable queue.">空的不可變佇列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the first element in the immutable queue, and returns the new queue.">移除不可變佇列中的第一個項目，並傳回新的佇列。</summary>
      <returns vsli:raw="The new immutable queue with the first element removed. This value is never &lt;see langword=&quot;null&quot; /&gt;.">已移除第一個項目的新不可變佇列。 這個值絕不會是 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">此佇列是空的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">將項目加入到不可變佇列結尾，並傳回新的佇列。</summary>
      <param name="value" vsli:raw="The element to add.">要加入的項目。</param>
      <returns vsli:raw="The new immutable queue with the specified element added.">已加入指定之項目的新不可變佇列。</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.">取得值，這個值表示此不可變佇列是否空白。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此佇列為空白，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">傳回不可變佇列開頭的項目，但不要移除。</summary>
      <returns vsli:raw="The element at the beginning of the queue.">佇列開頭的元素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">此佇列是空的。</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary vsli:raw="Represents a set of elements that can only be modified by creating a new instance of the set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">代表一組項目，您只能透過為該資料集建立新的執行個體來進行修改。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="The type of element stored in the set.">儲存於資料集中的項目類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">將指定的項目加入至這個不可變的資料集中。</summary>
      <param name="value" vsli:raw="The element to add.">要加入的項目。</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">含有已加入項目的新資料集，如果項目已經存在於資料集中，則為這個資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">擷取空的不可變資料集，這個資料集的排序及順序語意與這個執行個體相同。</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">空的資料集，這個資料集的排序及順序語意與這個執行個體相同。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable set contains a specified element.">判斷這個不可變的資料集是否包含指定的項目。</summary>
      <param name="value" vsli:raw="The element to locate in the set.">要在資料集中尋找的項目。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果資料集包含指定的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">從目前的不可變資料集中，移除指定之集合內的項目。</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">要從此資料集移除的項目集合。</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">含有已移除項目的新資料集，如果資料集中沒有任何項目，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that exist in this set and the specified set.">建立不可變的資料集，其中只包含存在於這個資料集和指定資料集中的項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableSet`1&quot; /&gt;.">要與目前 <see cref="T:System.Collections.Immutable.IImmutableSet`1" /> 比較的集合。</param>
      <returns vsli:raw="A new immutable set that contains elements that exist in both sets.">新的不可變資料集，其中包含同時存在於這兩個資料集中的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) subset of the specified collection.">判斷目前的不可變資料集是否為指定集合的完全 (嚴格) 子集合。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前資料集為指定之集合的適當子集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) superset of the specified collection.">判斷目前的不可變資料集是否為指定集合的完全 (嚴格) 超集合。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的資料集為指定之集合的適當超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a subset of a specified collection.">判斷目前的不可變資料集是否為指定集合的子集合。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的資料集為指定之集合的子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a superset of a specified collection.">判斷目前的不可變資料集是否為指定集合的超集合。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的資料集為指定之集合的超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set overlaps with the specified collection.">判斷目前的不可變資料集是否與指定的集合重疊。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的資料集和指定的集合至少共用一個通用項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">從這個不可變的資料集中移除指定的項目。</summary>
      <param name="value" vsli:raw="The element to remove.">要移除的項目。</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">已移除之指定項目的新資料集，如果資料集中找不到該項目，則為目前的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set and the specified collection contain the same elements.">判斷目前的不可變資料集和指定的集合是否包含相同項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果資料集相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">建立不可變的資料集，其中僅包含在目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">新的資料集，其中僅包含在目前資料集或指定之集合 (但非兩者) 中出現的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Determines whether the set contains a specified value.">判斷資料集是否包含指定值。</summary>
      <param name="equalValue" vsli:raw="The value to search for.">要搜尋的值。</param>
      <param name="actualValue" vsli:raw="The matching value from the set, if found, or &lt;c&gt;equalvalue&lt;/c&gt; if there are no matches.">如果找到，則為來自集合的相符值；如果沒有相符項目，則為 <c>equalvalue</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching value was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到相符值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">建立新的不可變資料集，其中包含在目前資料集或指定之集合中出現的所有項目。</summary>
      <param name="other" vsli:raw="The collection to add elements from.">要加入項目的來源集合。</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">已加入項目的新不可變資料集，如果所有項目均已存在於資料集中，則為原始的資料集。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary vsli:raw="Represents an immutable last-in-first-out (LIFO) collection.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示不可變的後進先出 (LIFO) 集合。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the stack.">堆疊中的項目類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">從不可變的堆疊移除所有的物件。</summary>
      <returns vsli:raw="An empty immutable stack.">空的不可變堆疊。</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable stack is empty.">取得值，此值表示這個不可變堆疊是否為空的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this stack is empty; otherwise,&lt;see langword=&quot;false&quot; /&gt;.">如果這個堆疊是空的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary vsli:raw="Returns the element at the top of the immutable stack without removing it.">傳回不可變堆疊頂端的項目，但不要移除它。</summary>
      <returns vsli:raw="The element at the top of the stack.">堆疊頂端的項目。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">堆疊是空的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">移除不可變堆疊頂端的項目，並傳回新的堆疊。</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">新的堆疊；永遠不會 <see langword="null" /></returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">堆疊是空的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">在不可變堆疊頂端插入項目，並傳回新的堆疊。</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">要推送至堆疊的項目。</param>
      <returns vsli:raw="The new stack.">新的堆疊。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary vsli:raw="Provides methods for creating an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">提供建立不可變陣列的方法；也就是說，一旦建立之後，便無法變更。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary vsli:raw="Searches the sorted immutable array for a specified element using the default comparer and returns the zero-based index of the element, if it's found.">使用預設的比較子搜尋指定項目已排序的不可變陣列，並在找到時，傳回該項目以零為起始的索引。</summary>
      <param name="array" vsli:raw="The sorted array to search.">要搜尋的已排序陣列。</param>
      <param name="value" vsli:raw="The object to search for.">要搜尋的物件。</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">陣列中儲存之項目的型別。</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">如果有找到項目，則為陣列中項目之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="value" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.Generic.ICollection`1.Count" /> 的位元補數。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> 不實作 <see cref="T:System.IComparable" />，或搜尋遇到不實作 <see cref="T:System.IComparable" /> 的項目。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">搜尋指定項目已排序的不可變陣列，並在找到時，傳回該項目以零為起始的索引。</summary>
      <param name="array" vsli:raw="The sorted array to search.">要搜尋的已排序陣列。</param>
      <param name="value" vsli:raw="The object to search for.">要搜尋的物件。</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or null to use the default comparer.">比較項目時要使用的比較子實作，或 null 表示使用預設比較子。</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">陣列中儲存之項目的型別。</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">如果有找到項目，則為陣列中項目之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="value" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.Generic.ICollection`1.Count" /> 的位元補數。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> 為 Null 且 <paramref name="value" /> 不實作 <see cref="T:System.IComparable" />，或搜尋遇到不實作 <see cref="T:System.IComparable" /> 的項目。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">搜尋指定項目已排序的不可變陣列，並在找到時，傳回該項目以零為起始的索引。</summary>
      <param name="array" vsli:raw="The sorted array to search.">要搜尋的已排序陣列。</param>
      <param name="index" vsli:raw="The starting index of the range to search.">要搜尋範圍的起始索引。</param>
      <param name="length" vsli:raw="The length of the range to search.">搜尋範圍的長度。</param>
      <param name="value" vsli:raw="The object to search for.">要搜尋的物件。</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">陣列中儲存之項目的型別。</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">如果有找到項目，則為陣列中項目之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="value" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.Generic.ICollection`1.Count" /> 的位元補數。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> 不實作 <see cref="T:System.IComparable" />，或搜尋遇到不實作 <see cref="T:System.IComparable" /> 的項目。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="array" /> 中的有效範圍。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。
-或-
<paramref name="length" /> 小於零。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element.">搜尋指定項目已排序的不可變陣列，並傳回該項目以零為起始的索引。</summary>
      <param name="array" vsli:raw="The sorted array to search.">要搜尋的已排序陣列。</param>
      <param name="index" vsli:raw="The starting index of the range to search.">要搜尋範圍的起始索引。</param>
      <param name="length" vsli:raw="The length of the range to search.">搜尋範圍的長度。</param>
      <param name="value" vsli:raw="The object to search for.">要搜尋的物件。</param>
      <param name="comparer" vsli:raw="The comparer to use when comparing elements for equality or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">比較項目是否相等時要使用的比較子，或 <see langword="null" /> 表示使用預設比較子。</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">陣列中儲存之項目的型別。</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">如果有找到項目，則為陣列中項目之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="value" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.Generic.ICollection`1.Count" /> 的位元補數。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> 為 Null 且 <paramref name="value" /> 不實作 <see cref="T:System.IComparable" />，或搜尋遇到不實作 <see cref="T:System.IComparable" /> 的項目。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not compatible with the elements of &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="array" /> 中的有效範圍。
-或-
<paramref name="comparer" /> 是 <see langword="null" />，且 <paramref name="value" /> 的類型與 <paramref name="array" /> 項目不相容。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。
-或-
<paramref name="length" /> 小於零。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary vsli:raw="Creates an empty immutable array.">建立空的不可變陣列。</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">陣列中儲存之項目的型別。</typeparam>
      <returns vsli:raw="An empty immutable array.">空的不可變陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified object.">建立不可變的陣列，其中包含指定的物件。</summary>
      <param name="item" vsli:raw="The object to store in the array.">要在陣列中儲存的物件。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">陣列中儲存之項目的型別。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified object.">不可變陣列，其中包含指定的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">建立不可變的陣列，其中包含指定的物件。</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">儲存在陣列中的第一個物件。</param>
      <param name="item2" vsli:raw="The second object to store in the array.">儲存在陣列中的第二個物件。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">陣列中儲存之項目的型別。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">不可變的陣列，其中包含指定的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">建立不可變的陣列，其中包含指定的物件。</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">儲存在陣列中的第一個物件。</param>
      <param name="item2" vsli:raw="The second object to store in the array.">儲存在陣列中的第二個物件。</param>
      <param name="item3" vsli:raw="The third object to store in the array.">儲存在陣列中的第三個物件。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">陣列中儲存之項目的型別。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">不可變的陣列，其中包含指定的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">建立不可變的陣列，其中包含指定的物件。</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">儲存在陣列中的第一個物件。</param>
      <param name="item2" vsli:raw="The second object to store in the array.">儲存在陣列中的第二個物件。</param>
      <param name="item3" vsli:raw="The third object to store in the array.">儲存在陣列中的第三個物件。</param>
      <param name="item4" vsli:raw="The fourth object to store in the array.">儲存在陣列中的第四個物件。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">陣列中儲存之項目的型別。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">不可變的陣列，其中包含指定的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary vsli:raw="Creates an immutable array from the specified array of objects.">從指定的物件陣列建立不可變的陣列。</summary>
      <param name="items" vsli:raw="The array of objects to populate the array with.">要填入陣列所使用之物件的陣列。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">陣列中儲存之項目的型別。</typeparam>
      <returns vsli:raw="An immutable array that contains the array of items.">不可變的陣列，其中包含項目的陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with specified objects from another array.">使用指定的物件，從另一個陣列建立不可變的陣列。</summary>
      <param name="items" vsli:raw="The source array of objects.">物件的來源陣列。</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">要從 <paramref name="items" /> 複製之第一個項目的索引。</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">要包含在此不可變陣列中之 <paramref name="items" /> 的項目數。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">陣列中儲存之項目的型別。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">不可變的陣列，其中包含來源陣列中指定的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with the specified objects from another immutable array.">使用指定的物件，從某個不可變的陣列建立另一個不可變的陣列。</summary>
      <param name="items" vsli:raw="The source array of objects.">物件的來源陣列。</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">要從 <paramref name="items" /> 複製之第一個項目的索引。</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">要包含在此不可變陣列中之 <paramref name="items" /> 的項目數。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">陣列中儲存之項目的型別。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">不可變的陣列，其中包含來源陣列中指定的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">建立可以轉換成 <see cref="T:System.Collections.Immutable.ImmutableArray" /> 的可變陣列，但不配置新的記憶體。</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">產生器中儲存之項目的型別。</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">可以有效率地轉換成不可變陣列之指定型別的可變陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">建立可以轉換成 <see cref="T:System.Collections.Immutable.ImmutableArray" /> 的可變陣列，但不配置新的記憶體。</summary>
      <param name="initialCapacity" vsli:raw="The initial capacity of the builder.">產生器的初始容量。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">產生器中儲存之項目的型別。</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">可以有效率地轉換成不可變陣列之指定型別的可變陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; populated with the specified items.">建立使用指定之項目填入的新 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />。</summary>
      <param name="items" vsli:raw="The elements to add to the array.">要加入至陣列的項目。</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">陣列中儲存之項目的型別。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified items.">不可變的陣列，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 結構的新執行個體。</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">要初始化結果陣列所使用的來源陣列。</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">要套用至來源陣列中每個項目的函式。</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 結構的新執行個體。</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">要初始化結果陣列所使用的來源陣列。</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">要包含在所產生陣列中的來源陣列第一個項目的索引。</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">要包含在產生之陣列中之來源陣列中的項目數目。</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">產生的陣列會包含要套用至來源陣列中每個項目的函式。</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 結構的新執行個體。</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">要初始化結果陣列所使用的來源陣列。</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">要套用至來源陣列中每個項目的函式。</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">要傳遞給選取器對應函式的引數。</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to pass to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 結構的新執行個體。</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">要初始化結果陣列所使用的來源陣列。</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">要包含在所產生陣列中的來源陣列第一個項目的索引。</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">要包含在產生之陣列中之來源陣列中的項目數目。</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">產生的陣列會包含要套用至來源陣列中每個項目的函式。</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">要傳遞給選取器對應函式的引數。</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to be passed to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to be stored in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates an immutable array from the specified collection.">從指定的集合建立不可變的陣列。</summary>
      <param name="items" vsli:raw="The collection of objects to copy to the immutable array.">要複製至不可變陣列之物件的集合。</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="items" /> 中所包含之項目的型別。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified collection of objects.">不可變的陣列，其中包含指定的物件集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Creates an immutable array from the current contents of the builder's array.">從產生器陣列目前內容建立不可變的陣列。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable array from.">產生器，用於建立不可變的陣列。</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in the immutable array.">不可變數組中包含的元素類型。</typeparam>
      <returns vsli:raw="An immutable array that contains the current contents of the builder's array.">不可變的陣列，其中包含產生器陣列的目前內容。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary vsli:raw="Represents an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">代表不可變的陣列，意即在建立該陣列之後，就無法加以變更。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">陣列所儲存的項目類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">傳回已在結尾處加入指定項目的原始陣列複本。</summary>
      <param name="item" vsli:raw="The item to be added to the end of the array.">要加入陣列結尾處的項目。</param>
      <returns vsli:raw="A new array with the specified item added to the end.">已在結尾處加入指定項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">傳回已在陣列結尾處加入指定項目的原始陣列複本。</summary>
      <param name="items" vsli:raw="The elements to add to the array.">要加入至陣列的項目。</param>
      <returns vsli:raw="A new array with the elements added.">已加入項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">傳回已在陣列結尾處加入指定項目的原始陣列複本。</summary>
      <param name="items" vsli:raw="The elements to add to the array.">要加入至陣列的項目。</param>
      <returns vsli:raw="A new array with the elements added.">已加入項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary vsli:raw="Returns a new immutable array that contains the elements of this array cast to a different type.">傳回新的不可變陣列，其中包含這個陣列中轉換為不同類型的項目。</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return.">要傳回的陣列項目類型。</typeparam>
      <returns vsli:raw="An immutable array that contains the elements of this array, cast to a different type. If the cast fails, returns an array whose &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">不可變的陣列，其中包含這個陣列中轉換為不同類型的項目。 如果轉換失敗，就會傳回其 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 屬性傳回 <see langword="true" /> 的陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary vsli:raw="Creates a new read-only memory region over this immutable array.">在此不可變陣列上建立新的唯讀記憶體區域。</summary>
      <returns vsli:raw="The read-only memory representation of this immutable array.">此不可變陣列的唯讀記憶體表示。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary vsli:raw="Creates a new read-only span over this immutable array.">在此不可變陣列上建立新的唯讀範圍。</summary>
      <returns vsli:raw="The read-only span representation of this immutable array.">此不可變陣列的唯讀範圍表示。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary vsli:raw="A writable array accessor that can be converted into an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; instance without allocating extra memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">可寫入的陣列存取子，其可轉換為 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 執行個體而不需配置額外的記憶體。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the array.">將指定的項目加入至陣列。</summary>
      <param name="item" vsli:raw="The object to add to the array.">要加入至陣列的物件。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary vsli:raw="Adds the specified items to the end of the array.">將指定的項目加入至陣列尾端。</summary>
      <param name="items" vsli:raw="The items to add to the array.">要加入至陣列的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">將指定的項目加入至陣列尾端。</summary>
      <param name="items" vsli:raw="The items to add to the array.">要加入至陣列的項目。</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">要加入的來源陣列項目數目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">將指定的項目加入至陣列尾端。</summary>
      <param name="items" vsli:raw="The items to add to the array.">要加入至陣列的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">將指定的項目加入至陣列尾端。</summary>
      <param name="items" vsli:raw="The items to add to the array.">要加入至陣列的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">將指定的項目加入至陣列尾端。</summary>
      <param name="items" vsli:raw="The items to add to the array.">要加入至陣列的項目。</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">要加入的來源陣列項目數目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary vsli:raw="Adds the specified items to the end of the array.">將指定的項目加入至陣列尾端。</summary>
      <param name="items" vsli:raw="The items to add to the array.">要加入至陣列的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">將衍生自目前陣列中之類型的指定項目加入至陣列尾端。</summary>
      <param name="items" vsli:raw="The items to add to end of the array.">要加入至陣列尾端的項目。</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">衍生自項目類型的類型已存在於陣列中。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">將衍生自目前陣列中之類型的指定項目加入至陣列尾端。</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">要加入至陣列尾端的項目。</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">衍生自項目類型的類型已存在於陣列中。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">將衍生自目前陣列中之類型的指定項目加入至陣列尾端。</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">要加入至陣列尾端的項目。</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">衍生自項目類型的類型已存在於陣列中。</typeparam>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary vsli:raw="Gets or sets the length of the internal array. When set, the internal array is reallocated to the given capacity if it is not already the specified length.">取得或設定間隔陣列的長度。 如果設定的內部陣列不是所指定長度，則它會重新配置為指定的容量。</summary>
      <returns vsli:raw="The length of the internal array.">內部陣列的長度。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the array.">從陣列中移除所有項目。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the array contains a specific value.">判斷陣列是否包含特定值。</summary>
      <param name="item" vsli:raw="The object to locate in the array.">要在陣列中尋找的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the current contents to the specified array.">將目前的內容複製至指定的陣列。</summary>
      <param name="array" vsli:raw="The array to copy to.">要複製到其中的陣列。</param>
      <param name="index" vsli:raw="The index to start the copy operation.">開始複製作業的索引。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary vsli:raw="Gets or sets the number of items in the array.">取得或設定陣列中的項目數目。</summary>
      <returns vsli:raw="The number of items in the array.">陣列中的項目數目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary vsli:raw="Gets an object that can be used to iterate through the collection.">取得可用於逐一查看集合的物件。</summary>
      <returns vsli:raw="An object that can be used to iterate through the collection.">可用於逐一查看集合的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Determines the index of a specific item in the array.">判斷陣列中特定項目的索引。</summary>
      <param name="item" vsli:raw="The item to locate in the array.">要在陣列中尋找的項目。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">如果在清單中找到，則為 <paramref name="item" /> 的索引；否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">判斷指定項目的索引。</summary>
      <param name="item" vsli:raw="The item to locate in the array.">要在陣列中尋找的項目。</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">搜尋的開始位置。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">如果在清單中找到，則為 <paramref name="item" /> 的索引；否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">判斷指定項目的索引。</summary>
      <param name="item" vsli:raw="The item to locate in the array.">要在陣列中尋找的項目。</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">搜尋的開始位置。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜尋的項目數目。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">如果在清單中找到，則為 <paramref name="item" /> 的索引；否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the index for the specified item.">判斷指定項目的索引。</summary>
      <param name="item" vsli:raw="The item to locate in the array.">要在陣列中尋找的項目。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">要開始搜尋的索引。</param>
      <param name="count" vsli:raw="The starting position of the search.">搜尋的開始位置。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">使用於搜尋中的相等比較子</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">如果在清單中找到，則為 <paramref name="item" /> 的索引；否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the array at the specified index.">將項目插入陣列中指定的索引位置。</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">要插入項目之以零起始的索引位置。</param>
      <param name="item" vsli:raw="The object to insert into the array.">要插入陣列中的物件。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the item at the specified index.">取得或設定在指定索引位置的項目。</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">要取得或設定的項目索引。</param>
      <returns vsli:raw="The item at the specified index.">在指定之索引處的項目。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The specified index is not in the array.">指定的索引不在陣列內。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified index.">取得位於指定索引元素的唯讀參考。</summary>
      <param name="index" vsli:raw="The item index.">項目索引。</param>
      <returns vsli:raw="The read-only reference to the element at the specified index.">位於指定索引元素的唯讀參考。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is greater or equal to the array count.">
        <paramref name="index" /> 大於或等於陣列計數。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">判斷此陣列中指定項目最後出現的以 0 起始索引。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜尋的項目。</param>
      <returns vsli:raw="The 0-based index where the item was found; or -1 if it could not be found.">找到項目的以 0 起始索引位置；若無法找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">判斷此陣列中指定項目最後出現的以 0 起始索引。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜尋的項目。</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">搜尋的開始位置。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">找到項目之陣列中以零為起始的索引，如果找不到項目，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">判斷此陣列中指定項目最後出現的以 0 起始索引。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜尋的項目。</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">搜尋的開始位置。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜尋的項目數目。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">找到項目之陣列中以零為起始的索引，如果找不到項目，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">判斷此陣列中指定項目最後出現的以 0 起始索引。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜尋的項目。</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">搜尋的開始位置。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜尋的項目數目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">搜尋中所使用的相等比較子。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">找到項目之陣列中以零為起始的索引，如果找不到項目，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary vsli:raw="Extracts the internal array as an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; and replaces it              with a zero length array.">擷取內部陣列當成 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />，並以零長度陣列取代它。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="When &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Count&quot; /&gt; doesn't              equal &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity&quot; /&gt;.">當 <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> 不等於 <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" /> 時。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the specified element.">將指定的項目移除。</summary>
      <param name="element" vsli:raw="The item to remove.">要移除的項目。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;element&quot; /&gt; was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到並移除 <paramref name="element" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index from the array.">從陣列中移除指定索引位置的項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除之項目的以零為起始的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of elements in the collection.">反轉整個集合中項目的順序。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary vsli:raw="Sorts the contents of the array.">為陣列的內容排序。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">為陣列的內容排序。</summary>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">用來排序的比較子。 如果比較子是 <see langword="null" />，將使用陣列中項目類型的預設比較子。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire array using the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">使用指定的 <see cref="T:System.Comparison`1" /> 來排序整個陣列中項目。</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">比較項目時所要使用的 <see cref="T:System.Comparison`1" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">為陣列的內容排序。</summary>
      <param name="index" vsli:raw="The starting index for the sort.">排序的起始索引。</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">排序中包含的項目數。</param>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">用來排序的比較子。 如果比較子是 <see langword="null" />，將使用陣列中項目類型的預設比較子。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">取得值，這個值表示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">傳回可逐一查看陣列的列舉程式。</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">逐一查看陣列的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">傳回可逐一查看陣列的列舉程式。</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">逐一查看陣列的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary vsli:raw="Creates a new array with the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">建立含有此 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> 目前內容的新陣列。</summary>
      <returns vsli:raw="A new array with the contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">含有此 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> 內容的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary vsli:raw="Returns an immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">傳回包含此 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> 目前內容的不可變陣列。</summary>
      <returns vsli:raw="An immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">包含此 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> 目前內容的不可變陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct by casting the underlying array to an array of type &lt;typeparamref name=&quot;TOther&quot; /&gt;.">將基礎陣列轉換成 <typeparamref name="TOther" /> 型別的陣列，以將 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 結構的新執行個體初始化。</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return." />
      <exception cref="T:System.InvalidCastException" vsli:raw="The cast is illegal.">如果轉換不合法會擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct based on the contents of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.">根據現有執行個體的內容初始化新的 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 結構執行個體，允許 Covariant 靜態轉換成有效率地重複使用現有陣列。成</summary>
      <param name="items" vsli:raw="The array to initialize the array with. No copy is made.">要初始化陣列所使用的陣列。 不會進行複製。</param>
      <typeparam name="TDerived" vsli:raw="The type of array element to return." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">傳回已移除所有項目的陣列。</summary>
      <returns vsli:raw="An array with all of the elements removed.">已移除所有項目的陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary vsli:raw="Determines whether the specified item exists in the array.">判斷指定的項目是否存在於陣列中。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜尋的項目。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified item was found in the array; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果在陣列中找到指定的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the contents of this array to the specified array.">將這個陣列的內容複製到指定的陣列。</summary>
      <param name="destination" vsli:raw="The array to copy to.">要複製到其中的陣列。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the contents of this array to the specified array starting at the specified destination index.">從指定之目的索引開始，將這個陣列的內容複製到指定的陣列。</summary>
      <param name="destination" vsli:raw="The array to copy to.">要複製到其中的陣列。</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">
        <paramref name="array" /> 中開始複製處的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the specified items in this array to the specified array at the specified starting index.">從指定的開始索引開始，將這個陣列中的指定項目複製到指定的陣列。</summary>
      <param name="sourceIndex" vsli:raw="The index of this array where copying begins.">這個陣列的索引，此為開始複製的位置。</param>
      <param name="destination" vsli:raw="The array to copy to.">要複製到其中的陣列。</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">
        <paramref name="array" /> 中開始複製處的索引。</param>
      <param name="length" vsli:raw="The number of elements to copy from this array.">要複製到這個陣列的項目數。</param>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary vsli:raw="Gets an empty immutable array.">取得空的不可變陣列。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary vsli:raw="An array enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">陣列列舉程式。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary vsli:raw="Gets the current item.">取得目前的項目。</summary>
      <returns vsli:raw="The current item.">目前的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances to the next value in the array.">往前移至陣列中的下一個值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if another item exists in the array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果陣列中存在另一個項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Indicates whether specified array is equal to this array.">表示指定的物件是否等於這個陣列。</summary>
      <param name="other" vsli:raw="An object to compare with this object.">要與此物件進行比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; is equal to this array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="other" /> 等於這個陣列，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary vsli:raw="Determines if this array is equal to the specified object.">判斷這個陣列是否等於指定的物件。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this array.">要和這個陣列進行比較的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this array is equal to &lt;paramref name=&quot;obj&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個陣列等於 <paramref name="obj" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the contents of the array.">傳回可逐一查看陣列內容的列舉程式。</summary>
      <returns vsli:raw="An enumerator.">列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary vsli:raw="Returns a hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.">這個執行個體的雜湊碼，適用於雜湊演算法和資料結構 (例如雜湊資料表)。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item.">在陣列中搜尋指定的項目。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜尋的項目。</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">如果找到，則為項目以零為起始的索引位置，如未找到，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">在陣列中搜尋指定的項目。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜尋的項目。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">要開始搜尋的索引。</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">如果找到，則為項目以零為起始的索引位置，如未找到，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">在陣列中搜尋指定的項目。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜尋的項目。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">要開始搜尋的索引。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">搜尋中所使用的相等比較子。</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">如果找到，則為項目以零為起始的索引位置，如未找到，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">在陣列中搜尋指定的項目。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜尋的項目。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">要開始搜尋的索引。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜尋的項目數目。</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">如果找到，則為項目以零為起始的索引位置，如未找到，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">在陣列中搜尋指定的項目。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜尋的項目。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">要開始搜尋的索引。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜尋的項目數目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">搜尋中所使用的相等比較子。</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">如果找到，則為項目以零為起始的索引位置，如未找到，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">傳回已在指定位置插入指定值的新陣列。</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">陣列中以零為起始的索引，此為應加入新項目的位置。</param>
      <param name="item" vsli:raw="The item to insert at the start of the array.">要插入陣列開始處的項目。</param>
      <returns vsli:raw="A new array with the item inserted at the specified index.">新陣列，其中包含已插入指定索引處的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">在指定的索引處插入指定的值。</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">要插入值的索引。</param>
      <param name="items" vsli:raw="The elements to insert.">要插入的項目。</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">新的不可變陣列，其中包含已插入指定索引處的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">在指定的索引處插入指定的值。</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">要插入值的索引。</param>
      <param name="items" vsli:raw="The elements to insert.">要插入的項目。</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">新的不可變陣列，其中包含已插入指定索引處的項目。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary vsli:raw="Gets a value indicating whether this array was declared but not initialized.">取得值，指出這個陣列已宣告但未初始化。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 是 <see langword="null" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty or is not initialized.">取得值，指出這個 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 是否為空的，或者尚未初始化。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.Collections.Immutable.ImmutableArray`1.Empty&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 是 <see langword="null" /> 或 <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" />，<see langword="true" />;否則，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty.">取得值，指出這個 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 是否為空的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是空的，則為 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index in the immutable array.">取得不可變陣列中指定索引處的項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">要取得之項目的以零為起始的索引。</param>
      <returns vsli:raw="The element at the specified index in the immutable array.">不可變陣列中指定索引處的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">取得唯讀清單中在指定 <paramref name="index" /> 處元素的唯讀參考。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get a reference to.">要取得參考之以零為起始的元素索引。</param>
      <returns vsli:raw="A read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">唯讀清單中在指定 <paramref name="index" /> 處元素的唯讀參考。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">從陣列結尾開始，在陣列中搜尋指定的項目。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜尋的項目。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">找到項目之陣列中以零為起始的索引，如果找不到項目，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">從陣列結尾開始，在陣列中搜尋指定的項目。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜尋的項目。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">要開始搜尋的索引。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">找到項目之陣列中以零為起始的索引，如果找不到項目，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">從陣列結尾開始，在陣列中搜尋指定的項目。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜尋的項目。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">要開始搜尋的索引。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜尋的項目數目。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">找到項目之陣列中以零為起始的索引，如果找不到項目，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">從陣列結尾開始，在陣列中搜尋指定的項目。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜尋的項目。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">要開始搜尋的索引。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜尋的項目數目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">搜尋中所使用的相等比較子。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">找到項目之陣列中以零為起始的索引，如果找不到項目，則為 -1。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary vsli:raw="Gets the number of elements in the array.">取得陣列中的項目數。</summary>
      <returns vsli:raw="The number of elements in the array.">陣列中的項目數。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary vsli:raw="Filters the elements of this array to those assignable to the specified type.">篩選這個陣列的項目，以取得可指派為指定類型的項目。</summary>
      <typeparam name="TResult" vsli:raw="The type to filter the elements of the sequence on.">用來做為序列項目之篩選依據的類型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; that contains elements from the input sequence of type of &lt;paramref name=&quot;TResult&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerable" />，其中包含輸入序列中 <paramref name="TResult" /> 類型的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">傳回值，這個值指出兩個陣列是否相等。</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">位於運算子左邊的陣列。</param>
      <param name="right" vsli:raw="The array to the right of the operator.">位於運算子右邊的陣列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果陣列相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">傳回值，這個值指出兩個陣列是否相等。</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">位於運算子左邊的陣列。</param>
      <param name="right" vsli:raw="The array to the right of the operator.">位於運算子右邊的陣列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果陣列相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates whether two arrays are not equal.">傳回值，這個值指出兩個陣列是否不相等。</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">位於運算子左邊的陣列。</param>
      <param name="right" vsli:raw="The array to the right of the operator.">位於運算子右邊的陣列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果陣列不相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Checks for inequality between two array.">檢查兩個陣列間的不相等。</summary>
      <param name="left" vsli:raw="The object to the left of the operator.">位於運算子左邊的物件。</param>
      <param name="right" vsli:raw="The object to the right of the operator.">位於運算子右邊的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果兩個陣列不相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array. If no match is found, the current array is returned.">傳回已從陣列中移除第一個出現之指定項目的陣列。 如果找不到相符項目，則會傳回目前的陣列。</summary>
      <param name="item" vsli:raw="The item to remove.">要移除的項目。</param>
      <returns vsli:raw="A new array with the item removed.">已移除項目的新佇列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array.  &#xA;  &#xA; If no match is found, the current array is returned.">傳回已從陣列中移除第一個出現之指定項目的陣列。
如果找不到相符項目，則會傳回目前的陣列。</summary>
      <param name="item" vsli:raw="The item to remove.">要移除的項目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">搜尋中所使用的相等比較子。</param>
      <returns vsli:raw="A new array with the specified item removed.">已移除指定項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">從陣列中移除符合指定條件的所有項目。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">定義要移除項目之條件的委派。</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">已移除符合指定條件之項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">傳回已移除指定位置處之項目的陣列。</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">要從傳回的陣列中移除之項目以零為起始的索引。</param>
      <returns vsli:raw="A new array with the item at the specified index removed.">已移除指定索引處之項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified items from this array.">從這個陣列中移除指定的項目。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">如果在這個清單中找到相符項目時要移除的項目。</param>
      <returns vsli:raw="A new array with the elements removed.">已移除項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">從這個陣列中移除指定的項目。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">如果在這個清單中找到相符項目時要移除的項目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">搜尋中所使用的相等比較子。</param>
      <returns vsli:raw="A new array with the elements removed.">已移除項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Removes the specified values from this list.">從這個清單中移除指定的值。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">如果在這個清單中找到相符項目時要移除的項目。</param>
      <returns vsli:raw="A new list with the elements removed.">已移除項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this list.">從這個清單中移除指定的項目。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">如果在這個清單中找到相符項目時要移除的項目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">搜尋中所使用的相等比較子。</param>
      <returns vsli:raw="A new array with the elements removed.">已移除項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">傳回已移除指定位置處之項目的陣列。</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">要從陣列中移除之開始項目以零為起始的索引。</param>
      <param name="length" vsli:raw="The number of elements to remove from the array.">要從陣列中移除的項目數。</param>
      <returns vsli:raw="The new array with the specified elements removed.">已移除指定項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">尋找陣列中第一個等於指定值的項目，並使用指定的新值來取代該值。</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">要在陣列中尋找並取代的值。</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">用來取代 <c>oldvalue</c> 的值。</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">即使新值和舊值一樣，也會包含 <paramref name="newValue" /> 的新陣列。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">陣列中找不到 <paramref name="oldValue" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">尋找陣列中第一個等於指定值的項目，並使用指定的新值來取代該值。</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">要在陣列中尋找並取代的值。</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">用來取代 <c>oldvalue</c> 的值。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">用來比較值的相等比較子。</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">即使新值和舊值一樣，也會包含 <paramref name="newValue" /> 的新陣列。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">陣列中找不到 <paramref name="oldValue" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">以指定的項目取代位於指定索引上的項目。</summary>
      <param name="index" vsli:raw="The index of the item to replace.">要取代的項目索引。</param>
      <param name="item" vsli:raw="The item to add to the list.">要加入清單的項目。</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">新陣列，會在指定索引處包含 <paramref name="item" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary vsli:raw="Sorts the elements in the immutable array using the default comparer.">使用預設的比較子，來排序不可變陣列中的項目。</summary>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">新的不可變陣列，在這個陣列中會以排序的順序來包含項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the immutable array using the specified comparer.">使用指定的比較子，來排序不可變陣列中的項目。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">比較項目時所使用的實作，或 <see langword="null" /> 表示使用預設比較子</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">新的不可變陣列，在這個陣列中會以排序的順序來包含項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; using             the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">使用指定的 <see cref="T:System.Comparison`1" /> 來排序整個 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 中的項目。</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">比較項目時所要使用的 <see cref="T:System.Comparison`1" />。</param>
      <returns vsli:raw="The sorted list.">已排序的清單。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the specified elements in the immutable array using the specified comparer.">使用指定的比較子，來排序不可變陣列中指定的項目。</summary>
      <param name="index" vsli:raw="The index of the first element to sort.">要排序的第一個項目索引。</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">排序中包含的項目數。</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">比較項目時所使用的實作，或 <see langword="null" /> 表示使用預設比較子</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">新的不可變陣列，在這個陣列中會以排序的順序來包含項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item" vsli:raw="The item to add to the end of the array.">要加入陣列結尾處的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">取得集合的陣列數目。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">如果 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 屬性傳回 true 則擲回。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">取得值，這個值指出這個執行個體是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個實例是唯讀的，則 <see langword="true" />;否則，<see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item" vsli:raw="The object to remove from the array.">要從陣列中移除的物件。</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">傳回可逐一查看陣列的列舉程式。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">可用來逐一查看陣列的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index" vsli:raw="The index of the location to insert the item.">要插入項目的位置索引。</param>
      <param name="item" vsli:raw="The item to insert.">要插入的項目。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index in the read-only list.">取得或設定唯讀清單中指定索引處的項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">要取得之項目的以零為起始的索引。</param>
      <returns vsli:raw="The element at the specified index in the read-only list.">唯讀清單中指定索引處的項目。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">一律從 setter 擲回。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">如果 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 屬性傳回 true 則擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index" vsli:raw="The index.">索引。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">取得集合的陣列數目。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">如果 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 屬性傳回 true 則擲回。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index.">取得位在指定索引處的元素。</summary>
      <param name="index" vsli:raw="The index.">索引。</param>
      <returns vsli:raw="The element.">元素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">如果 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 屬性傳回 true 則擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies this array to another array starting at the specified index.">從指定的索引處開始，將這個陣列複製到其他陣列。</summary>
      <param name="array" vsli:raw="The array to copy this array to.">要複製這個陣列的目標陣列。</param>
      <param name="index" vsli:raw="The index in the destination array to start the copy operation.">目的陣列中開始複製作業的索引。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the size of the array.">取得陣列的大小。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">如果 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 屬性傳回 true 則擲回。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface. Always returns &lt;see langword=&quot;true&quot; /&gt; since since immutable collections are thread-safe.">請參閱 <see cref="T:System.Collections.ICollection" /> 介面。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the sync root.">取得同步處理根項目。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable array.">傳回可逐一查看不可變陣列的列舉程式。</summary>
      <returns vsli:raw="An enumerator that iterates through the immutable array.">可逐一查看不可變陣列的列舉程式。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 屬性會傳回 <see langword="true" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value" vsli:raw="The value to add to the array.">要加入陣列的值。</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">所有情況都會擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">所有情況都會擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value" vsli:raw="The value to check for.">要檢查的值。</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Gets the value at the specified index.">取得指定索引處的值。</summary>
      <param name="value" vsli:raw="The value to return the index of.">要傳回索引的值。</param>
      <returns vsli:raw="The value of the element at the specified index.">位於指定索引處的項目值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index" vsli:raw="Index that indicates where to insert the item.">索引，表示插入項目的位置。</param>
      <param name="value" vsli:raw="The value to insert.">要插入的值。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">所有情況都會擲回。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether this instance is fixed size.">取得值，指出此執行個體是否有固定的大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個實例是固定大小，則 <see langword="true" />;否則，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">取得值，這個值指出這個執行個體是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個實例是唯讀的，則 <see langword="true" />;否則，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">取得或設定在指定索引處的 <see cref="T:System.Object" />。</summary>
      <param name="index" vsli:raw="The index.">索引。</param>
      <returns vsli:raw="The object at the specified index.">位於指定索引處的物件。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">一律從 setter 擲回。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">如果 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 屬性傳回 true 則擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value" vsli:raw="The value to remove from the array.">要從陣列中移除的值。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">所有情況都會擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index" vsli:raw="The index of the item to remove.">要移除之項目的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">所有情況都會擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">傳回已在結尾處加入指定項目的原始陣列複本。</summary>
      <param name="value" vsli:raw="The value to add to the end of the array.">要加入陣列結尾處的值。</param>
      <returns vsli:raw="A new array with the specified item added to the end.">已在結尾處加入指定項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">傳回已在陣列結尾處加入指定項目的原始陣列複本。</summary>
      <param name="items" vsli:raw="The elements to add to the end of the array.">要加入陣列結尾處的項目。</param>
      <returns vsli:raw="A new array with the elements added to the end.">已在結尾處加入項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">傳回已移除所有項目的陣列。</summary>
      <returns vsli:raw="An array with all the elements removed.">已移除所有項目的陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">傳回已在指定位置插入指定值的新陣列。</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">陣列中以零為起始的索引，此為應加入新項目的位置。</param>
      <param name="element" vsli:raw="The item to insert at the start of the array.">要插入陣列開始處的項目。</param>
      <returns vsli:raw="A new array with the specified value inserted.">已插入之指定值的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">在指定的索引處插入指定的值。</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">要插入值的索引。</param>
      <param name="items" vsli:raw="The elements to insert.">要插入的項目。</param>
      <returns vsli:raw="A new array with the specified values inserted.">已插入指定值的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array; if no match is found, the current array is returned.">傳回已從陣列中移除第一個出現之指定項目的陣列，如果找不到相符項目，則會傳回目前的陣列。</summary>
      <param name="value" vsli:raw="The value to remove from the array.">要從陣列中移除的值。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">搜尋中所使用的相等比較子。</param>
      <returns vsli:raw="A new array with the value removed.">已移除值的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">從陣列中移除符合指定條件的所有項目。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">定義要移除項目之條件的委派。</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">已移除符合指定條件之項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">傳回已移除指定位置處之項目的陣列。</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">要從傳回的陣列中移除之項目以零為起始的索引。</param>
      <returns vsli:raw="A new array with the specified item removed.">已移除指定項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">從這個陣列中移除指定的項目。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">如果在這個清單中找到相符項目時要移除的項目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">搜尋中所使用的相等比較子。</param>
      <returns vsli:raw="A new array with the elements removed.">已移除項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">傳回已移除指定位置處之項目的陣列。</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">要從陣列中移除之開始項目以零為起始的索引。</param>
      <param name="count" vsli:raw="The number of elements to remove from the array.">要從陣列中移除的項目數。</param>
      <returns vsli:raw="The new array with the specified elements removed.">已移除指定項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">尋找陣列中第一個等於指定值的項目，並使用指定的新值來取代該值。</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">要在陣列中尋找並取代的值。</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">用來取代 <c>oldvalue</c> 的值。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">用來比較值的相等比較子。</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">即使新值和舊值一樣，也會包含 <paramref name="newValue" /> 的新陣列。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">陣列中找不到 <paramref name="oldValue" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">以指定的項目取代位於指定索引上的項目。</summary>
      <param name="index" vsli:raw="The index of the item to replace.">要取代的項目索引。</param>
      <param name="value" vsli:raw="The value to add to the list.">要加入清單的值。</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">新陣列，會在指定索引處包含 <paramref name="item" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary vsli:raw="Determines whether the current collection element precedes, occurs in the same position as, or follows another element in the sort order.">判斷目前的集合項目在排序次序中位於另一個項目之前、相同位置或之後。</summary>
      <param name="other" vsli:raw="The element to compare with the current instance.">要與目前執行個體比較的項目。</param>
      <param name="comparer" vsli:raw="The object used to compare members of the current array with the corresponding members of other array.">此物件可用來比較目前的陣列成員與另一個陣列的對應成員。</param>
      <returns vsli:raw="An integer that indicates whether the current element precedes, is in the same position or follows the other element.">整數，指出目前的項目是位於另一個項目之前、相同位置或之後。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The arrays are not the same length.">陣列長度不相同。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary vsli:raw="Determines whether this array is structurally equal to the specified array.">判斷這個陣列在結構上是否等於指定的陣列。</summary>
      <param name="other" vsli:raw="The array to compare with the current instance.">要與目前執行個體比較的陣列。</param>
      <param name="comparer" vsli:raw="An object that determines whether the current instance and other are structurally equal.">物件，判斷目前的執行個體與其他執行個體在結構上是否相等。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are structurally equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這兩個陣列在結構上相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary vsli:raw="Returns a hash code for the current instance.">傳回目前執行個體的雜湊碼。</summary>
      <param name="comparer" vsli:raw="An object that computes the hash code of the current object.">物件，會計算目前物件的雜湊碼。</param>
      <returns vsli:raw="The hash code for the current instance.">目前執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary vsli:raw="Creates a mutable array that has the same contents as this array and can be efficiently mutated across multiple operations using standard mutable interfaces.">建立可變動的陣列，其具有與此陣列相同的內容，而且能夠使用標準變動介面，有效率地跨多個作業進行變動。</summary>
      <returns vsli:raw="The new builder with the same contents as this array.">新的產生器，含有與這個陣列相同的內容。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">提供一組 <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" /> 類別執行個體的初始化方法。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Determines whether the specified immutable dictionary contains the specified key/value pair.">判斷指定的不可變字典是否包含指定的索引鍵/值組。</summary>
      <param name="map" vsli:raw="The immutable dictionary to search.">要搜尋的不可變字典。</param>
      <param name="key" vsli:raw="The key to locate in the immutable dictionary.">要在不可變字典中尋找的索引鍵。</param>
      <param name="value" vsli:raw="The value to locate on the specified key, if the key is found.">如果找到索引鍵，則為要在指定索引鍵上尋找的值。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the immutable dictionary.">不可變字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the immutable dictionary.">不可變字典中的值類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this map contains the specified key/value pair; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個對應包含指定的索引鍵/值組，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable dictionary.">建立空的不可變字典。</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典所儲存的值類型。</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">空白不可變字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key comparer.">建立空的不可變字典，該字典會使用指定的索引鍵比較子。</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">用於判斷字典中索引鍵等式的實作。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典所儲存的值類型。</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">空白不可變字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key and value comparers.">建立空的不可變字典，該字典會使用指定的索引鍵和值比較子。</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">用於判斷字典中索引鍵等式的實作。</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">用於判斷字典中的值是否相等的實作。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典所儲存的值類型。</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">空白不可變字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable dictionary builder.">建立新的不可變字典產生器。</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典所儲存的值類型。</typeparam>
      <returns vsli:raw="The new builder.">新的產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">建立新的不可變字典產生器。</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">索引鍵比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典所儲存的值類型。</typeparam>
      <returns vsli:raw="The new builder.">新的產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">建立新的不可變字典產生器。</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">索引鍵比較子。</param>
      <param name="valueComparer" vsli:raw="The value comparer.">值比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典所儲存的值類型。</typeparam>
      <returns vsli:raw="The new builder.">新的產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items.">建立新的不可變字典，其中包含指定的項目。</summary>
      <param name="items" vsli:raw="The items used to populate the dictionary before it's immutable.">在字典成為不可變之前，用來填入該字典的項目。</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">字典中之索引鍵的類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">字典中之值的類型。</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items.">新的不可變字典，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">建立新的不可變字典，其中包含指定的項目，並使用指定的索引鍵比較子。</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">用於比較索引鍵是否相等的比較子實作。</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">在字典成為不可變之前，新增至字典的項目。</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">字典中之索引鍵的類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">字典中之值的類型。</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">新的不可變字典，其中包含指定的項目，並使用指定的比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">建立新的不可變字典，其中包含指定的項目，並使用指定的索引鍵比較子。</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">用於比較索引鍵是否相等的比較子實作。</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">用於比較值是否相等的比較子實作。</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">在字典成為不可變之前，新增至字典的項目。</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">字典中之索引鍵的類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">字典中之值的類型。</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">新的不可變字典，其中包含指定的項目，並使用指定的比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">如果字典中存在相符的索引鍵，就會取得指定索引鍵的值。</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">要從中擷取值的字典。</param>
      <param name="key" vsli:raw="The key to search for.">要搜尋的索引鍵。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">索引鍵的類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">值的類型。</typeparam>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">索引鍵的值；如果找不到相符的索引鍵，則為 <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">如果字典中存在相符的索引鍵，就會取得指定索引鍵的值。</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">要從中擷取值的字典。</param>
      <param name="key" vsli:raw="The key to search for.">要搜尋的索引鍵。</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">如果字典中找不到相符的索引鍵時所傳回的預設值。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">索引鍵的類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">值的類型。</typeparam>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">索引鍵的值，或者，如果找不到相符的索引鍵，則為 <paramref name="defaultValue" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Constructs an immutable dictionary from an existing collection of elements, applying a transformation function to the source keys.">從現有的項目集合建構不可變的字典，將轉換函式套用至來源索引鍵。</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">用來產生不可變字典的來源集合。</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">用來轉換不可變字典之索引鍵的函式。</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">來源集合中的項目類型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">所產生的不可變字典中的索引鍵類型。</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">不可變的字典，其中包含來自 <paramref name="source" /> 的項目，以及藉由套用 <paramref name="keySelector" /> 來轉換的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Constructs an immutable dictionary based on some transformation of a sequence.">根據序列的某些轉換來建構不可變的字典。</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">用來產生不可變字典的來源集合。</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">用來轉換不可變字典之索引鍵的函式。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">字典使用的索引鍵比較子。</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">來源集合中的項目類型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">所產生的不可變字典中的索引鍵類型。</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">不可變的字典，其中包含來自 <paramref name="source" /> 的項目，以及藉由套用 <paramref name="keySelector" /> 來轉換的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents.">列舉索引鍵/值組的序列，並產生其內容的不可變字典。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">要列舉的索引鍵/值組的序列。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值類型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">不可變的字典，其中包含指定序列中的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">列舉索引鍵/值組的序列，並使用指定的索引鍵比較子產生不可變的排序字典作為內容。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">要列舉的索引鍵/值組的序列。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">建立不可變字典時使用的索引鍵比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值類型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">不可變的字典，其中包含指定序列中的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key and value comparers.">列舉索引鍵/值組的序列，並使用指定的索引鍵與值比較子產生其內容的不可變字典。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">要列舉的索引鍵/值組的序列。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">建立不可變字典時使用的索引鍵比較子。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">不可變字典所使用的值比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值類型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">不可變的字典，其中包含指定序列中的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable dictionary from the current contents of the builder's dictionary.">從產生器字典目前內容建立不可變的字典。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable dictionary from.">產生器，用於建立不可變的字典。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值類型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the current contents in the builder's dictionary.">不可變的字典，其中包含產生器字典的目前內容。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents.">列舉及轉換序列，並產生其內容的不可變字典。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">列舉以產生字典的序列。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">從每個序列項目產生字典的索引鍵的函式。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">從每個序列項目產生字典的值的函式。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中的項目類型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">所產生字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">所產生字典中的值類型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">不可變的字典，其中包含指定序列的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key comparer.">列舉及轉換序列，並使用指定的索引鍵比較子產生其內容的不可變字典。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">列舉以產生字典的序列。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">從每個序列項目產生字典的索引鍵的函式。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">從每個序列項目產生字典的值的函式。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">字典使用的索引鍵比較子。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中的項目類型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">所產生字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">所產生字典中的值類型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">不可變的字典，其中包含指定序列的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key and value comparers.">列舉及轉換序列，並使用指定的索引鍵與值比較子產生其內容的不可變字典。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">列舉以產生字典的序列。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">從每個序列項目產生字典的索引鍵的函式。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">從每個序列項目產生字典的值的函式。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">字典使用的索引鍵比較子。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">字典使用的值比較子。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中的項目類型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">所產生字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">所產生字典中的值類型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">不可變的字典，其中包含指定序列的項目。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable, unordered collection of keys and values.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示不可變、未排序之索引鍵和值的集合。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable dictionary.">將具有指定索引鍵和值的項目加入不可變字典。</summary>
      <param name="key" vsli:raw="The key of the element to add.">要加入的項目的索引鍵。</param>
      <param name="value" vsli:raw="The value of the element to add.">要加入的項目的值。</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">新的不可變字典，其中包含其他索引鍵/值組。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">字典中已經存在指定的索引鍵，但有不同的值。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the immutable dictionary.">將指定的機碼值組加入不可變字典。</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">要加入的索引鍵/值組。</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">新的不可變字典，其中包含其他索引鍵/值組。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">字典中已經存在指定的其中一個索引鍵，但有不同的值。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary vsli:raw="Represents a hash map that mutates with little or no memory allocations and that can produce or build on immutable hash map instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">代表有少量或沒有記憶體配置變動的雜湊對應，此雜湊對應可以非常有效率的方式產生或建置於不可變的雜湊對應執行個體上。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable dictionary.">將具有指定索引鍵和值的項目加入不可變的字典。</summary>
      <param name="key" vsli:raw="The key of the element to add.">要加入的項目的索引鍵。</param>
      <param name="value" vsli:raw="The value of the element to add.">要加入的項目的值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the dictionary.">字典中存在具有相同索引鍵的項目。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">字典是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable dictionary.">將指定的項目加入不可變的字典。</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">要加入字典的物件。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">字典是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to this collection.">將一連串的值加入這個集合。</summary>
      <param name="items" vsli:raw="The items to add to this collection.">要加入這個集合的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable dictionary.">從不可變的字典中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">字典是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains a specific value.">判斷不可變的字典是否包含特定值。</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">要在字典中尋找的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在字典中找到 <see langword="true" /> 則為 <paramref name="item" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified key.">判斷不可變的字典是否包含具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">要在字典中尋找的索引鍵。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified value.">判斷不可變的字典是否包含具有指定值的項目。</summary>
      <param name="value" vsli:raw="The value to locate in the immutable dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要在不可變字典中尋找的值。 參考類型的值可以是 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典中包含具有指定值的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable dictionary.">取得不可變字典中所包含的項目數。</summary>
      <returns vsli:raw="The number of elements contained in the immutable dictionary.">不可變字典中所包含的項目數。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">傳回逐一查看不可變字典的列舉程式。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">如果字典中存在相符的索引鍵，就會取得指定索引鍵的值。</summary>
      <param name="key" vsli:raw="The key to search for.">要搜尋的索引鍵。</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">索引鍵的值；如果找不到相符的索引鍵，則為 <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">如果字典中存在相符的索引鍵，就會取得指定索引鍵的值。</summary>
      <param name="key" vsli:raw="The key to search for.">要搜尋的索引鍵。</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">如果字典中找不到相符的索引鍵時所傳回的預設值。</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">索引鍵的值，或者，如果找不到相符的索引鍵，則為 <paramref name="defaultValue" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the element with the specified key.">取得或設定具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The element to get or set.">要取得或設定的項目。</param>
      <returns vsli:raw="The element that has the specified key.">具有指定索引鍵的項目。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is being retrieved, and &lt;paramref name=&quot;key&quot; /&gt; is not found.">正在擷取屬性，且找不到 <paramref name="key" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The property is being set, and the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">正在設定屬性，且 <see cref="T:System.Collections.Generic.IDictionary`2" /> 為唯讀。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">取得或設定索引鍵比較子。</summary>
      <returns vsli:raw="The key comparer.">索引鍵比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a collection that contains the keys of the immutable dictionary.">取得集合，其中包含不可變字典的索引鍵。</summary>
      <returns vsli:raw="A collection that contains the keys of the object that implements the immutable dictionary.">集合，其中包含實作不可變字典之物件的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">從不可變的字典中移除具有指定之索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的項目索引鍵。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the dictionary.">如果成功移除項目，則為 <see langword="true" />，否則為 <see langword="false" />。  如果在字典中找不到 <see langword="false" />，這個方法也會傳回 <paramref name="key" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">字典是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable dictionary.">從不可變字典中移除第一個出現的特定物件。</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">要從字典中移除的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns false if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">如果已成功從字典中移除 <see langword="true" />，則為 <paramref name="item" />，否則為 <see langword="false" />。 如果在字典中找不到 <paramref name="item" />，這個方法也會傳回 false。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">字典是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable dictionary.">從不可變的字典中，移除索引鍵與可在指定順序中找到之索引鍵相符的任何項目。</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">要從字典中移除的項目索引鍵。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, starting at the specified array index.">從指定的陣列索引處開始，將字典的項目複製到 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 類型的陣列。</summary>
      <param name="array" vsli:raw="The one-dimensional array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 類型的一維陣列，這是從字典複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">取得值，這個值會指出 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (具備安全執行緒)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">將具有所提供之索引鍵和值的項目加入字典物件。</summary>
      <param name="key" vsli:raw="The key of the element to add.">要加入的項目的索引鍵。</param>
      <param name="value" vsli:raw="The value of the element to add.">要加入的項目的值。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">判斷字典物件是否包含具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key to locate.">要尋找的索引鍵。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">傳回字典的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">字典的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">取得值，這個值會指出 <see cref="T:System.Collections.IDictionary" /> 物件的大小是否固定。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Collections.IDictionary" /> 物件具有固定的大小，則 <see langword="true" />;否則，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">取得值，這個值表示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">取得或設定具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key.">索引鍵。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的索引鍵。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含執行 <see cref="T:System.Collections.Generic.IDictionary`2" />之物件的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">從字典中移除具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的項目索引鍵。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含執行 <see cref="T:System.Collections.Generic.IDictionary`2" />之物件中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">可用於逐一查看集合的列舉程式物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable dictionary based on the contents of this instance.">根據這個執行個體的內容來建立不可變的字典。</summary>
      <returns vsli:raw="An immutable dictionary.">不可變的字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">判斷此字典是否包含指定的索引鍵。</summary>
      <param name="equalKey" vsli:raw="The key to search for.">要搜尋的索引鍵。</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">如果找到，則為位於字典中相符的索引鍵；如果找不到相符項目，則為 <c>equalkey</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到 <see langword="true" /> 的相符項，則為 <paramref name="equalKey" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Returns the value associated with the specified key.">傳回與指定索引鍵相關聯的值。</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">將擷取其值的索引鍵。</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, returns the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">當這個方法傳回時，如果找到索引鍵，則會包含與指定索引鍵相關聯的值，否則為 <paramref name="value" /> 參數類型的預設值。 這個參數會以未初始化的狀態傳遞。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果實作不可變字典的物件包含具有指定索引鍵的項目，則為  <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">取得或設定值比較子。</summary>
      <returns vsli:raw="The value comparer.">值比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable dictionary.">取得集合，其中包含不可變字典的值。</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">集合，其中包含實作字典的物件值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">擷取空白不可變字典，其具有與此字典執行個體相同的順序和機碼值比較規則。</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">具有對等順序和索引鍵/值比較規則的空字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable dictionary contains the specified key/value pair.">判斷此不可變字典是否包含指定的機碼值組。</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">要尋找的索引鍵/值組。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在字典中找到指定的索引鍵/值組，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified key.">判斷不可變字典是否包含具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key to locate.">要尋找的索引鍵。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果不可變字典包含具有指定索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified value.">判斷不可變字典是否包含具有指定值的項目。</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要尋找的值。 參考類型的值可以是 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典中包含具有指定值的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable dictionary.">取得不可變字典中機碼值組的數目。</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">字典中機碼值組的數目。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable dictionary.">取得空白的固定字典。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable dictionary without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">列舉不可變字典內容且不配置記憶體。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">取得位於目前列舉值位置的項目。</summary>
      <returns vsli:raw="The element in the dictionary at the current position of the enumerator.">位於目前列舉程式位置之字典中的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator&quot; /&gt; class.">將 <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" /> 類別的目前執行個體所使用的資源釋出。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable dictionary.">將列舉程式前移至不可變字典中的下一個元素。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the dictionary.">如果列舉程式成功前移至下一個元素，則為 <see langword="true" />；如果列舉程式超過字典的結尾，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">建立列舉值之後，字典已修改。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the dictionary.">設定列舉程式至它的初始位置，這是在字典中第一個元素之前。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">建立列舉值之後，字典已修改。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">取得目前的元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">傳回逐一查看不可變字典的列舉程式。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">可用來逐一查看字典的列舉程式。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable dictionary is empty.">取得值，這個值表示此不可變字典的執行個體是否為空白。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個執行個體是空的，則為 <see langword="true" />；否則即為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">取得與指定索引鍵相關聯的 <paramref name="TValue" />。</summary>
      <param name="key" vsli:raw="The type of the key.">索引鍵的類型。</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">與指定之索引鍵關聯的值。 如果找不到結果，此作業會擲回例外狀況。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable dictionary.">取得不可變字典的索引鍵比較子。</summary>
      <returns vsli:raw="The key comparer.">索引鍵比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable dictionary.">取得不可變字典中的索引鍵。</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">不可變字典中的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">從不可變的字典中移除具有指定之索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的項目索引鍵。</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">移除指定之項目的新不可變字典，如果在字典中找不到指定的索引鍵，則為此執行個體。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">將具有指定之索引鍵的項目從不可變的字典移除。</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">要移除之項目的索引鍵。</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">已移除指定之索引鍵的新不可變字典，如果在字典中找不到指定的索引鍵，則為此執行個體。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">設定不可變字典中指定的索引鍵和值，可能會覆寫索引鍵的現有值。</summary>
      <param name="key" vsli:raw="The key of the entry to add.">要加入的項目索引鍵。</param>
      <param name="value" vsli:raw="The key value to set.">要設定的索引鍵值。</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">新的不可變字典，其中包含指定的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">設定不可變字典中指定的索引鍵/值組，可能會覆寫索引鍵的現有值。</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">要在字典中設定的索引鍵/值組。 如果任何索引鍵已經存在字典中，則此方法將會覆寫其先前的值</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">新的不可變字典，其中包含指定的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The type of the key." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">從特定的陣列索引開始，將字典的項目複製到陣列。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">從字典複製項目之目的地的一維陣列。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">取得可用以同步存取 <see cref="T:System.Collections.ICollection" />的物件。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the immutable dictionary object.">將具有提供之索引鍵和值的項目加入不可變字典物件。</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">做為要加入項目之索引鍵的物件。</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">做為要加入項目之值的物件。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">清除此執行個體。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">字典物件是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">判斷不可變字典物件是否包含具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">要在字典物件中尋找的索引鍵。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">傳回不可變字典物件的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">字典物件的列舉程式物件。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">取得值，指出 <see cref="T:System.Collections.IDictionary" /> 物件是否具有固定的大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Collections.IDictionary" /> 物件有固定大小，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">取得或設定具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key.">索引鍵。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的索引鍵。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">從不可變字典物件中移除具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的項目索引鍵。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">可用於逐一查看集合的列舉程式物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added to the dictionary." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of the entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="The key-value pairs to set on the map. Any keys that conflict with existing keys will replace the previous values." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">建立與此字典 (能夠使用標準變動介面，有效率地跨多個作業進行變動) 內容相同的不可變字典。</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">與此字典 (能夠使用標準變動介面，有效率地跨多個作業進行變動) 內容相同的集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">判斷此字典是否包含指定的索引鍵。</summary>
      <param name="equalKey" vsli:raw="The key to search for.">要搜尋的索引鍵。</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">如果找到，則為位於字典中相符的索引鍵；如果找不到相符項目，則為 <c>equalkey</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到 <paramref name="equalKey" /> 的相符項，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">取得與指定索引鍵關聯的值。</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">將擷取其值的索引鍵。</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">如果找到索引鍵，則這個方法傳回時會包含與指定索引鍵相關聯的值，否則會包含 <paramref name="value" /> 參數類型的預設值。 這個參數會以未初始化的狀態傳遞。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果實作字典的物件包含具有指定索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">取得用來判斷值是否相等的值比較子。</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">用來判斷值是否相等的值比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable dictionary.">取得不可變字典中的值。</summary>
      <returns vsli:raw="The values in the immutable dictionary.">不可變字典中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key comparer.">取得不可變字典的執行個體，該執行個體會使用指定的索引鍵比較子。</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">要使用的索引鍵比較子。</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">不可變字典的執行個體，該執行個體會使用指定的比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key and value comparers.">取得不可變字典的執行個體，該執行個體會使用指定的索引鍵和值比較子。</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">要使用的索引鍵比較子。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">要使用的值比較子。</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">不可變字典的執行個體，該執行個體會使用指定的比較子。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">提供一組 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> 類別執行個體的初始化方法。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary vsli:raw="Creates an empty immutable hash set.">建立空白不可變雜湊集。</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable hash set.">要在不可變雜湊集中儲存之項目的類型。</typeparam>
      <returns vsli:raw="An empty immutable hash set.">空白不可變雜湊集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item.">建立新的不可變雜湊集，其中包含指定的項目。</summary>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">要預先填入雜湊集的項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">不可變雜湊集中之項目的類型。</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">包含指定項目的新的不可變雜湊集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified array of items.">建立新的不可變雜湊集，其中包含指定的項目陣列。</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">其中包含要填入雜湊集之項目的陣列。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">不可變雜湊集中之項目的類型。</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">新的不可變雜湊集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable hash set that uses the specified equality comparer.">建立空白不可變雜湊集，其使用指定之相等比較子</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">比較集合中物件相等所使用的物件。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">不可變雜湊集中之項目的類型。</typeparam>
      <returns vsli:raw="An empty immutable hash set.">空白不可變雜湊集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item and uses the specified equality comparer for the set type.">建立新的不可變雜湊集，其中包含指定項目，且針對集合類型使用指定的相等比較子。</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">比較集合中物件相等所使用的物件。</param>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">要預先填入雜湊集的項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">不可變雜湊集中之項目的類型。</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">包含指定項目的新的不可變雜湊集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the items in the specified collection and uses the specified equality comparer for the set type.">建立新的不可變雜湊集，其中包含指定集合中的項目，且針對集合類型使用指定的相等比較子。</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">比較集合中物件相等所使用的物件。</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">其中包含要填入雜湊集之項目的陣列。</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable hash set.">不可變雜湊集中儲存之項目的類型。</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">新的不可變雜湊集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable hash set builder.">建立新的不可變雜湊集產生器。</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">由集合所儲存的項目類型。</typeparam>
      <returns vsli:raw="The immutable hash set builder.">不可變雜湊集產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable hash set builder.">建立新的不可變雜湊集產生器。</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">比較集合中物件相等所使用的物件。</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">由集合所儲存的項目類型。</typeparam>
      <returns vsli:raw="The new immutable hash set builder.">新的不可變雜湊集產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set prefilled with the specified items.">建立新的不可變雜湊集，其中已預先填入指定項目。</summary>
      <param name="items" vsli:raw="The items to add to the hash set.">要加入至雜湊集的項目。</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">由集合所儲存的項目類型。</typeparam>
      <returns vsli:raw="The new immutable hash set that contains the specified items.">新的不可變雜湊集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified items and uses the specified equality comparer for the set type.">建立新的不可變雜湊集，其中包含指定項目，且針對集合類型使用指定的相等比較子。</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">比較集合中物件相等所使用的物件。</param>
      <param name="items" vsli:raw="The items add to the collection before immutability is applied.">在套用不變性之前加入集合的項目。</param>
      <typeparam name="T" vsli:raw="The type of items stored in the collection.">集合中儲存之項目的類型。</typeparam>
      <returns vsli:raw="The new immutable hash set.">新的不可變雜湊集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable hash set of its contents.">列舉序列，並產生其內容之不可變雜湊集。</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">要列舉的序列。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中的項目類型。</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence.">不可變雜湊集，其中包含指定序列中的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable hash set of its contents, and uses the specified equality comparer for the set type.">列舉序列、產生其內容之不可變雜湊集，且針對集合類型使用指定的相等比較子。</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">要列舉的序列。</param>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">比較集合中物件相等所使用的物件。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中的項目類型。</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence and uses the specified equality comparer.">不可變雜湊集，其中包含指定序列中的項目，且使用指定的相等比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable hash set from the current contents of the builder's set.">從產生器集合目前內容建立不可變的雜湊集。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable hash set from.">產生器，用於建立不可變的雜湊集。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the hash set.">雜湊集中元素的類型。</typeparam>
      <returns vsli:raw="An immutable hash set that contains the current contents in the builder's set.">不可變的雜湊集，其中包含產生器集合中的目前內容。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary vsli:raw="Represents an immutable, unordered hash set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">代表不可變、未排序的雜湊集。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the hash set.">雜湊集中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to the hash set.">將指定的項目加入至雜湊集。</summary>
      <param name="item" vsli:raw="The element to add to the set.">要加入至集合的項目。</param>
      <returns vsli:raw="A hash set that contains the added value and any values previously held by the  &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; object.">包含新增的值及 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> 物件先前保留之任何值的雜湊集。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary vsli:raw="Represents a hash set that mutates with little or no memory allocations and that can produce or build on immutable hash set instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">代表有少數或沒有記憶體配置變動的雜湊集，此雜湊集可以非常有效率的方式產生或建置於不可變的雜湊集執行個體上。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable hash set.">將指定的項目加入至不可變的雜湊集。</summary>
      <param name="item" vsli:raw="The item to add.">要新增的項目。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item did not already belong to the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果項目還未屬於集合，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable hash set.">從不可變的雜湊集中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The hash set is read-only.">雜湊集是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable hash set contains a specific value.">判斷不可變的雜湊集是否包含特定值。</summary>
      <param name="item" vsli:raw="The object to locate in the hash set.">要在雜湊集中尋找的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the hash set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在雜湊集中找到 <paramref name="item" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable hash set.">取得不可變雜湊集中所包含之項目的數目。</summary>
      <returns vsli:raw="The number of elements contained in the immutable hash set.">不可變雜湊集中所包含之項目的數目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current hash set.">從目前的雜湊集中，移除指定之集合內的所有項目。</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">要從資料集移除的項目集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable hash set.">傳回可逐一查看不可變雜湊集的列舉值。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">可用來逐一查看資料集的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">修改目前的資料集，使其僅包含同時也在指定之集合中出現的項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">判斷目前的資料集是否為指定之集合的適當 (嚴格) 子集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前資料集是 <paramref name="other" /> 的正確子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">判斷目前的資料集是否為指定之集合的適當 (嚴格) 超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前資料集是 <paramref name="other" /> 的正確超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">判斷目前的資料集是否為指定之集合的超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前資料集是 <paramref name="other" /> 的子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">判斷目前的資料集是否為指定之集合的超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前資料集是 <paramref name="other" /> 的超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">取得或設定索引鍵比較子。</summary>
      <returns vsli:raw="The key comparer.">索引鍵比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">判斷目前的資料集是否與指定的集合重疊。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的資料集和 <paramref name="other" /> 至少共用一個通用項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable hash set.">從不可變的雜湊集中移除第一個出現的特定物件。</summary>
      <param name="item" vsli:raw="The object to remove from the set.">要從資料集移除的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original set.">如果 <paramref name="item" /> 已成功從資料集中移除，則為 <see langword="true" />，否則為 <see langword="false" />。 如果在原始資料集中找不到 <paramref name="item" />，則這個方法也會傳回 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">判斷目前的資料集和指定的集合是否包含相同項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的資料集等於 <paramref name="other" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">修改目前的資料集，使其僅包含目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the hash set.">將項目加入至雜湊集中。</summary>
      <param name="item" vsli:raw="The object to add to the set.">要加入至資料集的物件。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the hash set to an array, starting at a particular array index.">從特定的陣列索引開始，將雜湊集的項目複製到陣列中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the hash set. The array must have zero-based indexing.">一維陣列，這是從雜湊集複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable hash set based on the contents of this instance.">根據這個執行個體的內容，建立不可變的雜湊集。</summary>
      <returns vsli:raw="An immutable set.">不可變的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">修改目前的資料集，使其包含目前資料集和指定之集合中出現的所有項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable hash set that has the same sorting and ordering semantics as this instance.">擷取空白不可變雜湊集，這個雜湊集的排序及順序語意與這個執行個體相同。</summary>
      <returns vsli:raw="An empty hash set that has the same sorting and ordering semantics as this instance.">空白雜湊集，這個雜湊集的排序及順序語意與這個執行個體相同。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable hash set contains the specified element.">判斷此不可變雜湊集是否包含指定的項目。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable hash set.">要在不可變雜湊集中尋找的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在 <see langword="true" /> 中找到 <paramref name="item" />，則為 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable hash set.">取得不可變雜湊集中的項目數目。</summary>
      <returns vsli:raw="The number of elements in the hash set.">雜湊集中的項目數目。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary vsli:raw="Gets an immutable hash set for this type that uses the default &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">取得此類型的不可變雜湊集，此不可變雜湊集使用預設的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable hash set without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">列舉不可變雜湊集的內容而不配置任何記憶體。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">取得位於目前列舉值位置的項目。</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">位於目前列舉程式位置的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator&quot; /&gt; class.">將 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" /> 類別的目前執行個體所使用的資源釋出。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable hash set.">將列舉程式前移至不可變雜湊集的下一個項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the hash set.">如果列舉程式成功前移至下一個項目，則為 <see langword="true" />；如果列舉程式超過雜湊集的結尾，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">建立列舉值之後，雜湊集已修改。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the hash set.">將列舉程式設定至它的初始位置，就在雜湊集中的第一個項目之前。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">建立列舉值之後，雜湊集已修改。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">取得目前的元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable hash set.">從目前的不可變雜湊集，移除指定集合中的項目。</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">要從此資料集移除的項目集合。</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">含有已移除項目的新資料集，如果資料集中沒有任何項目，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains elements that exist in both this set and the specified set.">建立不可變雜湊集，其中包含存在於這個資料集和指定之資料集中的項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">新的不可變資料集，其中包含同時存在於這兩個資料集中的任何項目。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the current immutable hash set is empty.">取得值，這個值指出目前的不可變雜湊集是否為空白。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個執行個體是空的，則為 <see langword="true" />；否則即為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) subset of a specified collection.">判斷目前的不可變雜湊集是否為指定之集合的適當 (嚴格) 子集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前資料集為指定之集合的適當子集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) superset of a specified collection.">判斷目前的不可變雜湊集是否為指定之集合的適當 (嚴格) 超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的資料集為指定之集合的適當超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a subset of a specified collection.">判斷目前的不可變雜湊集是否為指定之集合的子集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的資料集為指定之集合的子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a superset of a specified collection.">判斷目前的不可變雜湊集是否為指定之集合的超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的資料集為指定之集合的超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary vsli:raw="Gets the object that is used to obtain hash codes for the keys and to check the equality of values in the immutable hash set.">取得物件，此物件用來取得索引鍵的雜湊程式碼，並檢查不可變雜湊集中的值是否相等。</summary>
      <returns vsli:raw="The comparer used to obtain hash codes for the keys and check equality.">用來取得索引鍵的雜湊程式碼，並檢查是否相等的比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set overlaps with the specified collection.">判斷目前的不可變雜湊集是否與指定的集合重疊。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的資料集和指定的集合至少共用一個通用項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable hash set.">從這個不可變雜湊集中移除指定的項目。</summary>
      <param name="item" vsli:raw="The element to remove.">要移除的項目。</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">已移除之指定項目的新資料集，如果資料集中找不到該項目，則為目前的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set and the specified collection contain the same elements.">判斷目前的不可變雜湊集和指定的集合是否包含相同項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果資料集相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains only elements that are present either in the current set or in the specified collection, but not both.">建立不可變雜湊集，其中僅包含在目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">新的資料集，其中僅包含在目前資料集或指定之集合 (但非兩者) 中出現的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the set.">將項目加入至資料集。</summary>
      <param name="item" vsli:raw="The object to add to the set.">要加入至資料集的物件。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from this set.">將所有項目從這個資料集移除。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">從特定的索引開始，將資料集的項目複製到陣列中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">一維陣列，這是從資料集複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">請參閱 <see cref="T:System.Collections.Generic.ICollection`1" /> 介面。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">從資料集中移除第一個出現的特定物件。</summary>
      <param name="item" vsli:raw="The object to remove from the set.">要從資料集移除的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功移除項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator that iterates through the collection.">逐一查看集合的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value that indicates whether the element was successfully added.">將項目加入至目前的資料集，並傳回指出是否成功加入項目的值。</summary>
      <param name="item" vsli:raw="The element to add to the collection.">要新增至集合中的項目。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">如果項目加入至資料集，則為 <see langword="true" />，如果項目已經在資料集中，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">從目前的資料集中，移除指定之集合內的所有項目。</summary>
      <param name="other" vsli:raw="The collection of items to remove.">要移除之項目的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">修改目前的資料集，使其僅包含同時也在指定之集合中出現的項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current collection.">要與目前的集合比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">修改目前的資料集，使其僅包含目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or in the specified collection.">修改目前的資料集，使其包含目前資料集或指定之集合中出現的所有項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">從特定的索引開始，將資料集的項目複製到陣列中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">一維陣列，這是從資料集複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">請參閱 <see cref="T:System.Collections.ICollection" /> 介面。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">請參閱 <see cref="T:System.Collections.ICollection" />。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a set.">傳回逐一查看資料集的列舉程式。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">可用來逐一查看資料集的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">將指定的項目加入至這個不可變的資料集中。</summary>
      <param name="item" vsli:raw="The element to add.">要加入的項目。</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">含有已加入項目的新資料集，如果項目已經存在於資料集中，則為這個資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty set that has the same sorting and ordering semantics as this instance.">擷取空白資料集，這個資料集的排序及順序語意與這個執行個體相同。</summary>
      <returns vsli:raw="An empty set that has the same sorting or ordering semantics as this instance.">空白資料集，這個資料集的排序或順序語意與這個執行個體相同。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current set.">從目前的資料集中，移除指定之集合內的項目。</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">要從此資料集移除的項目集合。</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">含有已移除項目的新資料集，如果資料集中沒有任何項目，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">建立不可變的資料集，其中包含存在於這個資料集和指定之資料集中的項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">新的不可變資料集，其中包含同時存在於這兩個資料集中的任何項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">從這個不可變的資料集中移除指定的項目。</summary>
      <param name="item" vsli:raw="The element to remove.">要移除的項目。</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">已移除之指定項目的新資料集，如果資料集中找不到該項目，則為目前的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">建立不可變的資料集，其中僅包含在目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">新的資料集，其中僅包含在目前資料集或指定之集合 (但非兩者) 中出現的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">建立新的不可變資料集，其中包含在目前資料集或指定之集合中出現的所有項目。</summary>
      <param name="other" vsli:raw="The collection to add elements from.">要加入項目的來源集合。</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">已加入項目的新不可變資料集，如果所有項目均已存在於資料集中，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary vsli:raw="Creates an immutable hash set that has the same contents as this set and can be efficiently mutated across multiple operations by using standard mutable interfaces.">建立與此資料集 (能夠使用標準變動介面，有效率地跨多個作業進行變動) 內容相同的不可變雜湊集。</summary>
      <returns vsli:raw="A set with the same contents as this set that can be efficiently mutated across multiple operations by using standard mutable interfaces.">與此資料集 (能夠使用標準變動介面，有效率地跨多個作業進行變動) 內容相同的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">搜尋指定值的資料集，並傳回所找到的相等值 (如果有的話)。</summary>
      <param name="equalValue" vsli:raw="The value to search for.">要搜尋的值。</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">搜尋找到的資料集中的值，如果搜尋找不到相符項目，則為原始的值。</param>
      <returns vsli:raw="A value indicating whether the search was successful.">指出搜尋是否成功的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable hash set that contains all elements that are present in either the current set or in the specified collection.">建立新的不可變雜湊集，其中包含在目前資料集或指定之集合中出現的所有項目。</summary>
      <param name="other" vsli:raw="The collection to add elements from.">要加入項目的來源集合。</param>
      <returns vsli:raw="A new immutable hash set with the items added; or the original set if all the items were already in the set.">已加入項目的新不可變雜湊集，如果所有項目均已存在於資料集中，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable hash set that uses the specified equality comparer for its search methods.">取得不可變雜湊集的執行個體，此不可變雜湊集為其搜尋方法使用指定的相等比較子。</summary>
      <param name="equalityComparer" vsli:raw="The equality comparer to use.">要使用的相等比較子。</param>
      <returns vsli:raw="An instance of this immutable hash set that uses the given comparer.">此不可變雜湊集的執行個體，會使用指定的比較子。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary vsli:raw="Contains interlocked exchange mechanisms for immutable collections.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">包含不可變集合之連鎖交換機制。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">在新增值或更新現有項目之後，從字典取得該值。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">如果字典中沒有指定的變數或欄位，該變數或欄位會自動更新。</param>
      <param name="key" vsli:raw="The key for the value to add or update.">要加入或更新之值的索引鍵。</param>
      <param name="addValue" vsli:raw="The value to use if no previous value exists.">當沒有先前的值存在時所使用的值。</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">此函式會接收索引鍵和先前的值，並傳回要用來更新字典的新值。</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">字典所儲存的數值型別。</typeparam>
      <returns vsli:raw="The added or updated value.">已加入或已更新的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">在新增值或更新現有項目之後，從字典取得該值。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">如果字典中沒有指定的變數或欄位，該變數或欄位會自動更新。</param>
      <param name="key" vsli:raw="The key for the value to add or update.">要加入或更新之值的索引鍵。</param>
      <param name="addValueFactory" vsli:raw="The function that receives the key and returns a new value to add to the dictionary when no value previously exists.">此函式會接收索引鍵，當先前沒有值存在時，此函式會傳回新值以加入字典。</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">此函式會接收索引鍵和先前的值，並傳回要用來更新字典的新值。</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">字典所儲存的數值型別。</typeparam>
      <returns vsli:raw="The added or updated value.">已加入或已更新的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary vsli:raw="Atomically enqueues an element to the end of a queue.">自動將元素加入佇列的結尾。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">要自動更新的變數或欄位。</param>
      <param name="value" vsli:raw="The value to enqueue.">要加入佇列的值。</param>
      <typeparam name="T" vsli:raw="The type of items contained in the collection.">集合中所包含之項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">從該字典取得指定索引鍵的值，或若找不到該索引鍵，則將新值加入字典。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified key is not in the dictionary.">如果字典中沒有指定的索引鍵，該變數或欄位會自動更新。</param>
      <param name="key" vsli:raw="The key for the value to get or add.">要取得或加入之值的索引鍵。</param>
      <param name="value" vsli:raw="The value to add to the dictionary the key is not found.">如果找不到索引鍵，會將該值加入字典。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">集合中所包含之索引鍵的類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">集合中所包含之值的類型。</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">指定之索引鍵的值或 <paramref name="valueFactory" /> (如果找不到索引鍵)。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">從該字典取得指定索引鍵的值，或若找不到該索引鍵，則將新值加入字典。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">如果字典中沒有指定的變數或欄位，該變數或欄位會自動更新。</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">要擷取或新增之值的索引鍵。</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found. This delegate will not be invoked more than once.">如果找不到索引鍵，則會執行該函式以取得要插入字典的值。 不會叫用此委派一次以上。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">集合中所包含之索引鍵的類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">集合中所包含之值的類型。</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">指定之索引鍵的值或 <paramref name="valueFactory" /> (如果找不到索引鍵)。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">從該字典取得指定索引鍵的值，或若找不到該索引鍵，則將新值加入字典。</summary>
      <param name="location" vsli:raw="The variable or field to update if the specified is not in the dictionary.">如果字典中沒有指定的變數或欄位，該變數或欄位會更新。</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">要擷取或新增之值的索引鍵。</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found.">如果找不到索引鍵，則會執行該函式以取得要插入字典的值。</param>
      <param name="factoryArgument" vsli:raw="The argument to pass to the value factory.">要傳遞給值 Factory 的引數。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">集合中所包含之索引鍵的類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">集合中所包含之值的類型。</typeparam>
      <typeparam name="TArg" vsli:raw="The type of the argument supplied to the value factory.">提供給值 factory 的引數類型。</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">指定之索引鍵的值或 <paramref name="valueFactory" /> (如果找不到索引鍵)。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.">比較兩個不可變陣列是否相等；如果相等，則取代其中一陣列。</summary>
      <param name="location" vsli:raw="The destination, whose value is compared with &lt;paramref name=&quot;comparand&quot; /&gt; and possibly replaced.">目的端，其值會與 <paramref name="comparand" /> 進行比較且可能會被取代。</param>
      <param name="value" vsli:raw="The value that replaces the destination value if the comparison results in equality.">當比較的結果相等時，會取代目的端值的值。</param>
      <param name="comparand" vsli:raw="The value that is compared to the value at &lt;paramref name=&quot;location&quot; /&gt;.">與 <paramref name="location" /> 的值比較的值。</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">陣列所儲存的項目類型。</typeparam>
      <returns vsli:raw="The original value in &lt;paramref name=&quot;location&quot; /&gt;.">
        <paramref name="location" /> 中的原始值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array and returns a reference to the original array, as an atomic operation.">將陣列設為指定的陣列，並傳回原始陣列的參考，做為不可部份完成的作業。</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">要設定為特定值的陣列。</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set.">
        <paramref name="location" /> 參數要設定的值。</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">陣列所儲存的項目類型。</typeparam>
      <returns vsli:raw="The original value of &lt;paramref name=&quot;location&quot; /&gt;.">
        <paramref name="location" /> 的原始值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array if the array has not been initialized.">如果陣列尚未初始化，則將陣列設為指定的陣列。</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">要設定為特定值的陣列。</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set, if it's not initialized.">將 <paramref name="location" /> 參數設為該值 (如果參數尚未初始化)。</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">陣列所儲存的項目類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array was assigned the specified value;  otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果陣列已經指派指定的值則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary vsli:raw="Pushes a new element onto the stack.">將新的元素推入堆疊。</summary>
      <param name="location" vsli:raw="The stack to update.">要更新的堆疊。</param>
      <param name="value" vsli:raw="The value to push on the stack.">要推入堆疊的值。</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">堆疊中的項目類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Adds the specified key and value to the dictionary if the key is not in the dictionary.">如果字典中沒有指定的索引鍵，會將指定的索引鍵和值加入字典。</summary>
      <param name="location" vsli:raw="The dictionary to update with the specified key and value.">要以指定的索引鍵和值更新的字典。</param>
      <param name="key" vsli:raw="The key to add, if is not already defined in the dictionary.">要加入的索引鍵 (如果字典中尚未定義)。</param>
      <param name="value" vsli:raw="The value to add.">要新增的值。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">集合中所包含之索引鍵的類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">集合中所包含之值的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is not in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典中沒有該索引鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary vsli:raw="Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.">自動移除或傳回佇列開頭的指定元素 (如果佇列不是空的)。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">要自動更新的變數或欄位。</param>
      <param name="value" vsli:raw="Set to the value from the head of the queue, if the queue not empty.">從佇列的開頭設定為該值 (如果佇列不是空的)。</param>
      <typeparam name="T" vsli:raw="The type of items in the queue.">佇列中項目的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the queue is not empty and the head element is removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果佇列不是空的，且已經移除開頭的元素則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary vsli:raw="Removes an element from the top of the stack, if there is an element to remove.">從堆疊的最上方移除元素 (如果有元素可移除)。</summary>
      <param name="location" vsli:raw="The stack to update.">要更新的堆疊。</param>
      <param name="value" vsli:raw="Receives the value removed from the stack, if the stack is not empty.">接收從堆疊移除的值 (如果堆疊不是空的)。</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">堆疊中的項目類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element is removed from the stack; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果元素已經從堆疊移除則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary vsli:raw="Removes the element with the specified key, if the key exists.">將有指定索引鍵的元素移除 (如果索引鍵存在)。</summary>
      <param name="location" vsli:raw="The dictionary to update.">要更新的字典。</param>
      <param name="key" vsli:raw="The key to remove.">要移除的索引鍵。</param>
      <param name="value" vsli:raw="Receives the value of the removed item, if the dictionary is not empty.">接收移除之項目的值 (如果字典不是空的)。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">集合中所包含之索引鍵的類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">集合中所包含之值的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已找到並移除索引鍵則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary vsli:raw="Sets the specified key to the specified value if the specified key already is set to a specific value.">如果指定的索引鍵已設定為指定的值，則將指定的索引鍵設定為指定的值。</summary>
      <param name="location" vsli:raw="The dictionary to update.">要更新的字典。</param>
      <param name="key" vsli:raw="The key to update.">要更新的索引鍵。</param>
      <param name="newValue" vsli:raw="The new value to set.">要設定的新值。</param>
      <param name="comparisonValue" vsli:raw="The current value for &lt;paramref name=&quot;key&quot; /&gt; in order for the update to succeed.">
        <paramref name="key" /> 目前的值，以便讓更新成功。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">集合中所包含之索引鍵的類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">集合中所包含之值的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; and &lt;paramref name=&quot;comparisonValue&quot; /&gt; are present in the dictionary and comparison was updated to &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典中有 <see langword="true" /> 和 <paramref name="key" /> 且比較更新至則 <paramref name="comparisonValue" /> 則為 <paramref name="newValue" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">透過指定的轉換函式，以開放式鎖定的交易語意就地改變值。             為贏得開放式鎖定競爭，轉換沒有重試次數限制。</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">待變更的變數或欄位，可能會有多個執行緒存取。</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">會改變此值的函式。 此函式應該沒有副作用，因為與其他執行緒發生競爭情況時，它可以多次執行。</param>
      <typeparam name="T" vsli:raw="The type of data.">資料的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">若套用 <see langword="true" /> 函式的結果之後，位置的值變更時為 <paramref name="transformer" />；若因為上次叫用 <see langword="false" /> 傳回現有的值，所以位置的值保持不變時則為 <paramref name="transformer" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">透過指定的轉換函式，以開放式鎖定的交易語意就地改變值。             為贏得開放式鎖定競爭，轉換沒有重試次數限制。</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">待變更的變數或欄位，可能會有多個執行緒存取。</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">會改變此值的函式。 此函式應該沒有副作用，因為與其他執行緒發生競爭情況時，它可以多次執行。</param>
      <param name="transformerArgument" vsli:raw="The argument to pass to &lt;paramref name=&quot;transformer&quot; /&gt;.">要傳遞至 <paramref name="transformer" /> 的引數。</param>
      <typeparam name="T" vsli:raw="The type of data.">資料的類型。</typeparam>
      <typeparam name="TArg" vsli:raw="The type of argument passed to the &lt;paramref name=&quot;transformer&quot; /&gt;.">傳遞至 <paramref name="transformer" />的引數類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">若套用 <see langword="true" /> 函式的結果之後，位置的值變更時為 <paramref name="transformer" />；若因為上次叫用 <see langword="false" /> 傳回現有的值，所以位置的值保持不變時則為 <paramref name="transformer" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">提供一組 <see cref="T:System.Collections.Immutable.ImmutableList`1" /> 類別執行個體的初始化方法。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary vsli:raw="Creates an empty immutable list.">建立空的不可變清單。</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the .">儲存於其中的項目類型。</typeparam>
      <returns vsli:raw="An empty immutable list.">空的固定清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable list that contains the specified item.">建立新的不可變清單，其中包含指定的項目。</summary>
      <param name="item" vsli:raw="The item to prepopulate the list with.">要預先填入清單的項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the .">其中的項目類型。</typeparam>
      <returns vsli:raw="A new  that contains the specified item.">包含指定項目的新項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable list that contains the specified array of items.">建立新的不可變清單，其中包含指定的項目陣列。</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the list with.">陣列，其中包含要預先填入清單的項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the .">其中的項目類型。</typeparam>
      <returns vsli:raw="A new immutable list that contains the specified items.">新的不可變清單，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable list builder.">建立新的不可變清單產生器。</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">由集合所儲存的項目類型。</typeparam>
      <returns vsli:raw="The immutable collection builder.">不可變的集合產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable list that contains the specified items.">建立新的不可變清單，其中包含指定的項目。</summary>
      <param name="items" vsli:raw="The items to add to the list.">要加入清單的項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the .">其中的項目類型。</typeparam>
      <returns vsli:raw="An immutable list that contains the specified items.">包含指定項目的不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">搜尋指定的物件，並傳回清單中第一個出現項目以零為起始的索引。</summary>
      <param name="list" vsli:raw="The list to search.">要搜尋的清單。</param>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">要在清單中尋找的物件 參考類型的值可以是 Null。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">清單中的項目類型。</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that extends from index to the last element, if found; otherwise, -1.">在清單中從索引到最後一個項目的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">搜尋指定的物件，並傳回清單中第一個出現項目以零為起始的索引。</summary>
      <param name="list" vsli:raw="The list to search.">要搜尋的清單。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">要在不可變清單中尋找的物件。 參考類型的值可以是 Null。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">搜尋中所使用的相等比較子。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">清單中的項目類型。</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from index to the last element, if found; otherwise, -1.">在固定清單中從索引到最後一個項目的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">搜尋指定的物件，並傳回不可變的清單中，從指定索引開始到最後一個項目的項目範圍內，第一個出現項目以零為起始的索引。</summary>
      <param name="list" vsli:raw="The list to search.">要搜尋的清單。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">要在不可變清單中尋找的物件。 參考類型的值可以是 Null。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">清單中的項目類型。</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">在固定清單中從索引到最後一個項目的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">搜尋指定的物件，並傳回不可變的清單中，從指定索引開始到最後一個項目的項目範圍內，第一個出現項目以零為起始的索引。</summary>
      <param name="list" vsli:raw="The list to search.">要搜尋的清單。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">要在不可變清單中尋找的物件。 參考類型的值可以是 Null。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">區段中要搜尋的項目數目。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">清單中的項目類型。</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">在固定清單中從索引到最後一個項目的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">搜尋指定的物件，並傳回整個不可變的清單中最後一個出現項目以零為起始的索引。</summary>
      <param name="list" vsli:raw="The list to search.">要搜尋的清單。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">要在不可變清單中尋找的物件。 參考類型的值可以是 Null。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">清單中的項目類型。</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">整個固定清單中最後一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">搜尋指定的物件，並傳回整個不可變的清單中最後一個出現項目以零為起始的索引。</summary>
      <param name="list" vsli:raw="The list to search.">要搜尋的清單。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">要在不可變清單中尋找的物件。 參考類型的值可以是 Null。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">搜尋中所使用的相等比較子。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">清單中的項目類型。</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">整個固定清單中最後一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">搜尋指定的物件，並傳回不可變的清單中，從第一個項目開始到指定索引的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="list" vsli:raw="The list to search.">要搜尋的清單。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">要在不可變清單中尋找的物件。 參考類型的值可以是 Null。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">向後搜尋之以零為起始的起始索引。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">清單中的項目類型。</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">固定清單中從第一個項目到索引的項目範圍內，最後一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">搜尋指定的物件，並傳回不可變的清單中，從第一個項目開始到指定索引的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="list" vsli:raw="The list to search.">要搜尋的清單。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">要在不可變清單中尋找的物件。 參考類型的值可以是 Null。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">向後搜尋之以零為起始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">區段中要搜尋的項目數目。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">清單中的項目類型。</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">固定清單中從第一個項目到索引的項目範圍內，最後一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Removes the specified value from this list.">從這個清單中移除指定的值。</summary>
      <param name="list" vsli:raw="The list to search.">要搜尋的清單。</param>
      <param name="value" vsli:raw="The value to remove.">要移除的值。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">清單中的項目類型。</typeparam>
      <returns vsli:raw="A new immutable list with the element removed, or this list if the element is not in this list.">已移除項目的新不可變清單，或者，如果項目不存在於這個清單中，則為這個清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Removes the specified values from this list.">從這個清單中移除指定的值。</summary>
      <param name="list" vsli:raw="The list to search.">要搜尋的清單。</param>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">如果在這個清單中找到相符項目時要移除的項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">清單中的項目類型。</typeparam>
      <returns vsli:raw="A new immutable list with the elements removed.">已移除項目的新不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary vsli:raw="Replaces the first equal element in the list with the specified element.">使用指定的項目，來取代清單中第一個相等的項目。</summary>
      <param name="list" vsli:raw="The list to search.">要搜尋的清單。</param>
      <param name="oldValue" vsli:raw="The element to replace.">要取代的項目。</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">用來取代舊項目的項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">清單中的項目類型。</typeparam>
      <returns vsli:raw="The new list -- even if the value being replaced is equal to the new value for that position.">新清單，即使要取代的值與該位置的新值相等也一樣。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">會在清單中沒有舊值時擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable list of its contents.">列舉序列，並產生其內容的不可變清單。</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">要列舉的序列。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中的項目類型。</typeparam>
      <returns vsli:raw="An immutable list that contains the items in the specified sequence.">不可變的清單，其中包含指定序列中的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary vsli:raw="Creates an immutable list from the current contents of the builder's collection.">從產生器集合目前內容建立不可變的清單。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable list from.">用於建立不可變清單的產生器。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the list.">清單中元素的類型。</typeparam>
      <returns vsli:raw="An immutable list that contains the current contents in the builder's collection.">不可變的清單，其中包含產生器集合的目前內容。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary vsli:raw="Represents an immutable list, which is a strongly typed list of objects that can be accessed by index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示一個可以依照索引存取強式型別物件的不可變清單。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">清單中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary vsli:raw="Adds the specified object to the end of the immutable list.">將指定的物件加入不可變清單的尾端。</summary>
      <param name="value" vsli:raw="The object to add.">要加入的物件。</param>
      <returns vsli:raw="A new immutable list with the object added.">已新增物件的不可變新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the elements of the specified collection to the end of the immutable list.">將指定集合的元素加入至不可變清單的尾端。</summary>
      <param name="items" vsli:raw="The collection whose elements will be added to the end of the list.">元素將加入至清單尾端的集合。</param>
      <returns vsli:raw="A new immutable list with the elements added.">已新增項目的不可變新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element.">使用預設的比較子並傳回元素以零為起始的索引，來搜尋整個已排序的清單的某個元素。</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">如果有找到，則為已排序的清單中元素之以零為起始的索引，否則便為負數，此負數為大於元素的下一個元素索引之位元補數，或者，如果沒有更大的元素，則為 <see cref="P:System.Collections.ICollection.Count" /> 的位元補數。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer cannot find a comparer implementation of the for type T.">預設比較子找不到類型 T 的比較子實作。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire sorted list for an element using the specified comparer and returns the zero-based index of the element.">使用指定的比較子並傳回元素以零為起始的索引，來搜尋整個已排序的清單中的某個元素。</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">要尋找的物件。 參考類型的值可以是 Null。</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements or null to use the default comparer.">比較元素時要使用的比較子實作，或 null 表示使用預設比較子。</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">如果有找到，則為已排序的清單中元素之以零為起始的索引，否則便為負數，此負數為大於元素的下一個元素索引之位元補數，或者，如果沒有更大的元素，則為 <see cref="P:System.Collections.ICollection.Count" /> 的位元補數。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="comparer is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">比較子是 <see langword="null" />，而且預設比較子找不到類型 T 的比較子實作。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches a range of elements in the sorted list for an element using the specified comparer and returns the zero-based index of the element.">使用指定的比較子在已排序之清單內搜尋某範圍的元素，並傳回該元素以零為起始的索引。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">要搜尋範圍內之以零為起始的起始索引。</param>
      <param name="count" vsli:raw="The length of the range to search.">搜尋範圍的長度。</param>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">要尋找的物件。 參考類型的值可以是 Null。</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">比較元素時要使用的比較子實作，或 <see langword="null" /> 表示使用預設比較子。</param>
      <returns vsli:raw="The zero-based index of item in the sorted list, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;paramref name=&quot;count&quot; /&gt;.">如果有找到，則為已排序的清單中元素之以零為起始的索引，否則便為負數，此負數為大於元素的下一個元素索引之位元補數，或者，如果沒有更大的元素，則為 <paramref name="count" /> 的位元補數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="index is less than 0 or &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">索引小於 0 或 <paramref name="count" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="index and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the list.">索引和 <paramref name="count" /> 不代表清單中的有效範圍。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">
        <paramref name="comparer" /> 是 <see langword="null" />，而且預設比較子找不到類型 T 的比較子實作。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary vsli:raw="Represents a list that mutates with little or no memory allocations and that can produce or build on immutable list instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">代表有少量或沒有記憶體配置變動的清單，這個清單可以非常有效率的方式產生或建置於不可變的清單執行個體上。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an item to the immutable list.">將項目加入不可變的清單中。</summary>
      <param name="item" vsli:raw="The item to add to the list.">要加入清單的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a series of elements to the end of this list.">將一連串項目加入至這個清單的結尾。</summary>
      <param name="items" vsli:raw="The elements to add to the end of the list.">要加入清單結尾的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the default comparer and returns the zero-based index of the element.">使用預設的比較子來搜尋項目的整個 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />，並傳回項目以零為起始的索引。</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">要尋找的物件。 參考類型的值可以是 Null。</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">如果找到項目，則為 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中項目以零為起始的索引，否則為負數，此負數是大於 <paramref name="item" /> 之下一個項目索引的位元補數。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面實作或類型 T 的 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">使用指定的比較子並傳回項目以零為起始的索引，來搜尋項目的整個 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />。</summary>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">要尋找的物件。 這個參考類型的值可以是 Null。</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">比較項目時要使用的實作，或適用於預設比較子的 <see langword="null" />。</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">如果找到項目，則為 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中項目以零為起始的索引，否則為負數，此負數是大於 <paramref name="item" /> 之下一個項目索引的位元補數。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> 為 <see langword="null" />，且預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面實作或類型 T 的 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the specified range of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">使用指定的比較子來搜尋項目之指定範圍的 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />，並傳回項目以零為起始的索引。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">要搜尋範圍內之以零為起始的起始索引。</param>
      <param name="count" vsli:raw="The length of the range to search.">搜尋範圍的長度。</param>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">要尋找的物件。 這個參考類型的值可以是 Null。</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">比較項目時要使用的實作，或適用於預設比較子的 <see langword="null" />。</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">如果找到項目，則為 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中項目以零為起始的索引，否則為負數，此負數是大於 <paramref name="item" /> 之下一個項目索引的位元補數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> 小於 0。
-或-
<paramref name="count" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> 和 <paramref name="count" /> 不代表 <see cref="T:System.Collections.Generic.List`1" /> 中的有效範圍。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> 為 <see langword="null" />，且預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面實作或類型 T 的 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable list.">從不可變的清單中移除所有項目。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">判斷不可變的清單是否包含特定值。</summary>
      <param name="item" vsli:raw="The object to locate in the list.">要在清單中尋找的物件</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在清單中找到項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Creates a new immutable list from the list represented by this builder by using the converter function.">使用轉換器函式，從這個產生器所代表的清單中建立新的不可變清單。</summary>
      <param name="converter" vsli:raw="The converter function.">轉換器函式。</param>
      <typeparam name="TOutput" vsli:raw="The type of the output of the delegate converter function.">委派轉換器函式的輸出類型。</typeparam>
      <returns vsli:raw="A new immutable list from the list represented by this builder.">新的不可變清單，來自這個產生器所代表的清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">從目標陣列的開頭開始，將整個不可變的清單複製到相容的一維陣列。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">一維陣列，該陣列是從不可變清單複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">從目標陣列的指定索引處開始，將整個不可變的清單複製到相容的一維陣列。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">一維陣列，該陣列是從不可變清單複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">陣列中以零起始的索引，即複製的起始處。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">從目標陣列的指定索引處開始，將整個不可變的清單複製到相容的一維陣列。</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">來源的不可變清單中以零為起始的索引，其為複製開始處。</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">一維陣列，該陣列是從不可變清單複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
      <param name="count" vsli:raw="The number of elements to copy.">要複製的項目數目。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable list.">取得這個不可變清單中的項目數。</summary>
      <returns vsli:raw="The number of elements in this list.">這個清單中的項目數。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">判斷不可變的清單是否包含符合指定述詞所定義之條件的項目。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果不可變的清單包含一或多個符合指定述詞所定義之條件的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內第一個出現的項目。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">第一個符合指定之述詞所定義的條件之項目 (如有找到)，否則為類型 <paramref name="T" /> 的預設值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">擷取符合指定之述詞所定義的條件之所有項目。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="An immutable list containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">如果找到，則為不可變的清單，其中包含符合指定述詞所定義之條件的所有項目，否則為空的不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，從指定索引開始且包含指定項目數的項目範圍內，第一個出現項目以零為起始的索引。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">搜尋之以零為起始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">區段中要搜尋的項目數目。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">第一次出現符合 <paramref name="match" /> 所定義之條件的項目以零為起始的索引 (如有找到)；否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，從指定索引開始到最後一個項目的項目範圍內，第一個出現項目以零為起始的索引。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">搜尋之以零為起始的起始索引。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">第一次出現符合 <paramref name="match" /> 所定義之條件的項目以零為起始的索引 (如有找到)；否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內第一個出現項目之以零為起始的索引。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">第一次出現符合 <paramref name="match" /> 所定義之條件的項目以零為起始的索引 (如有找到)；否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內最後一個出現的項目。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">如果找到，則為符合指定述詞所定義之條件的最後一個項目，否則為類型 <paramref name="T" /> 的預設值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，包含指定項目數且結束於指定索引的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">向後搜尋之以零為起始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">區段中要搜尋的項目數目。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">符合 <paramref name="match" /> 所定義條件的元素，最後一次出現項目之以零為起始的索引 (若有找到)，否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，從第一個項目開始到指定索引的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">向後搜尋之以零為起始的起始索引。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">符合 <paramref name="match" /> 所定義條件的元素，最後一次出現項目之以零為起始的索引 (若有找到)，否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內最後一個出現項目以零為起始的索引。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">符合 <paramref name="match" /> 所定義條件的元素，最後一次出現項目之以零為起始的索引 (若有找到)，否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the list.">在清單的每一個項目上執行指定動作。</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the list.">要在清單的每一個項目上執行的委派。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">可用來逐一查看清單的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">為來源不可變清單中的項目範圍建立淺層複本。</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">以零為起始的索引，此為範圍起始處。</param>
      <param name="count" vsli:raw="The number of elements in the range.">範圍中的項目數。</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">來源不可變清單中項目範圍的淺層複本。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list.">搜尋指定的物件，並傳回不可變清單中的項目範圍內第一個出現項目以零為起始的索引。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list, if found; otherwise, -1.">固定清單中的項目範圍內，第一次出現 <paramref name="item" /> 之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">搜尋指定的物件，並傳回不可變的清單中，從指定索引開始到最後一個項目的項目範圍內，第一個出現項目以零為起始的索引。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from &lt;paramref name=&quot;index&quot; /&gt; to the last element, if found; otherwise, -1.">在固定清單中從 <paramref name="index" /> 到最後一個項目的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">搜尋指定的物件，並傳回不可變的清單中，從指定索引開始且包含指定項目數的項目範圍內，第一個出現項目以零為起始的索引。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">區段中要搜尋的項目數目。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1.">在固定清單中從 <paramref name="index" /> 處開始且包含 <paramref name="count" /> 個項目的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; that starts at the specified index and contains the specified number of elements.">在 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中從指定索引開始且包含指定個數項目的範圍內，搜尋指定的物件第一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜尋的項目數目。</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">要用來比較項目是否相等的值比較子。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">在固定清單中從 <paramref name="index" /> 處開始且包含 <paramref name="count" /> 個項目的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item to the immutable list at the specified index.">將項目插入不可變清單的指定索引處。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">應在 <paramref name="item" /> 插入以零為起始的索引。</param>
      <param name="item" vsli:raw="The object to insert into the immutable list.">要插入不可變清單的物件。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">將集合的項目插入不可變清單的指定索引處。</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">應插入新項目處的以零為起始的索引。</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted into the immutable list. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are null, if type &lt;c&gt;T&lt;/c&gt; is a reference type.">應將其項目插入不可變清單的集合。 集合本身不能是 <see langword="null" />，但若類型 <c>T</c> 是參考類型，則可包含 Null 的項目。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value for a given index in the list.">取得或設定清單中指定索引的值。</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">要取得或設定的項目索引。</param>
      <returns vsli:raw="The value at the specified index.">位於指定索引處的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the value for a given &lt;paramref name=&quot;index&quot; /&gt; into the list.">取得清單中指定 <paramref name="index" /> 值的唯讀參考。</summary>
      <param name="index" vsli:raw="The index of the desired element.">所需項目的索引。</param>
      <returns vsli:raw="A read-only reference to the value at the specified &lt;paramref name=&quot;index&quot; /&gt;.">位於所指定 <paramref name="index" /> 值的唯讀參考。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">搜尋指定的物件，並傳回整個不可變的清單中最後一個出現項目以零為起始的索引。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire immutable list, if found; otherwise, -1.">整個固定清單中最後一次出現 <paramref name="item" /> 之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">搜尋指定的物件，並傳回不可變的清單中，從第一個項目開始到指定索引的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">向後搜尋之以零為起始的起始索引。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that extends from the first element to &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">在固定清單中從第一個項目到 <paramref name="item" /> 的項目範圍內，最後一次出現 <paramref name="index" /> 之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">搜尋指定的物件，並傳回不可變的清單中，包含指定項目數且結尾位於指定索引處的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">向後搜尋之以零為起始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">區段中要搜尋的項目數目。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that contains &lt;paramref name=&quot;count&quot; /&gt; number of elements and ends at &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">在固定清單中包含 <paramref name="item" /> 個項目且結束於 <paramref name="count" /> 的項目範圍內，最後一次出現 <paramref name="index" /> 之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">搜尋指定的物件，並傳回不可變的清單中，包含指定項目數且結尾位於指定索引處的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜尋的項目數目。</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">要用來比較項目是否相等的值比較子。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">在固定清單中從 <paramref name="index" /> 處開始且包含 <paramref name="count" /> 個項目的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">從不可變的清單中移除第一個出現的特定物件。</summary>
      <param name="item" vsli:raw="The object to remove from the list.">要從清單中移除的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item is not found in the list.">如果已從清單中成功移除項目，則為 <see langword="true" />，否則為 <see langword="false" />。 如果在清單中找不到項目，則這個方法也會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">移除符合指定的述詞所定義之條件的所有項目。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">定義要移除項目之條件的委派。</param>
      <returns vsli:raw="The number of elements removed from the immutable list.">已從不可變的清單中移除的項目數。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">移除位於不可變清單之指定索引處的項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove from the list.">要從清單中移除之項目以零起始的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">反轉整個不可變清單中項目的順序。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">反轉不可變清單之指定範圍中項目的順序。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">要反向範圍內之以零為起始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">要反向範圍中的項目數。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the default comparer.">使用預設的比較子，來排序整個不可變清單中的項目。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparer.">使用指定的比較子，來排序整個不可變清單中的項目。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">比較項目時所使用的實作，或 <see langword="null" /> 表示使用預設的比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />)。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparison object.">使用指定的比較物件，來排序整個不可變清單中的項目。</summary>
      <param name="comparison" vsli:raw="The object to use when comparing elements.">比較項目時所使用的物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in a range of elements in the immutable list  by using the specified comparer.">使用指定的比較子，來排序不可變清單之項目範圍內的項目。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">要排序範圍內之以零為起始的起始索引。</param>
      <param name="count" vsli:raw="The length of the range to sort.">要排序的範圍長度。</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">比較項目時所使用的實作，或 <see langword="null" /> 表示使用預設的比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">取得值，這個值表示此執行個體是否為唯讀。</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">一定是 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the list to an array, starting at a particular array index.">從特定的陣列索引開始，將清單的項目複製到陣列中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the list. The array must have zero-based indexing.">一維陣列，這是從清單複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">取得值，這個值會指出 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (具備安全執行緒)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the list.">將項目加入清單。</summary>
      <param name="value" vsli:raw="The object to add to the list.">要加入至清單的物件。</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">插入新項目的位置，或是 -1，表示此項目沒有插入集合中。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the list.">從清單中移除所有項目。</summary>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the list contains a specific value.">判斷清單是否包含特定值。</summary>
      <param name="value" vsli:raw="The object to locate in the list.">要在清單中尋找的物件</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在清單中找到 <see langword="true" />，則為 <see cref="T:System.Object" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the list.">判斷清單中特定項目的索引。</summary>
      <param name="value" vsli:raw="The object to locate in the list.">要在清單中尋找的物件</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the list at the specified index.">將項目插入清單的指定索引處。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value" vsli:raw="The object to insert into the list.">要插入清單的物件。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">取得值，這個值表示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">取得或設定在指定索引處的 <see cref="T:System.Object" />。</summary>
      <param name="index" vsli:raw="The index.">索引。</param>
      <returns vsli:raw="The object at the specified index.">位於指定索引處的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the list.">從清單中移除第一個出現的特定物件。</summary>
      <param name="value" vsli:raw="The object to remove from the list.">要從清單中移除的物件。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable list based on the contents of this instance.">根據這個執行個體的內容來建立不可變的清單。</summary>
      <returns vsli:raw="An immutable list.">不可變的清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">判斷不可變清單中的每一個項目是否符合指定述詞所定義的條件。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">定義檢查項目所根據之條件的委派。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">如果不可變清單中的每一個項目都符合指定述詞所定義的條件，則為 <see langword="true" />，否則為 <see langword="false" />。 如果清單中沒有元素，則傳回值為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable list.">從不可變清單中移除所有元素。</summary>
      <returns vsli:raw="An empty list that retains the same sort or unordered semantics that this instance has.">空白清單保留此實體擁有的相同排序或未排序的語意。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable list contains the specified value.">判斷此不可變的清單是否包含指定的值。</summary>
      <param name="value" vsli:raw="The value to locate.">要尋找的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果包含指定的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Converts the elements in the current immutable list to another type, and returns a list containing the converted elements.">將目前不可變清單中的元素轉換為另一種型別，並傳回包含已轉換元素的清單。</summary>
      <param name="converter" vsli:raw="A delegate that converts each element from one type to another type.">可將某一型別的每個元素轉換成另一個型別的委派。</param>
      <typeparam name="TOutput" vsli:raw="The type of the elements of the target array.">目標陣列項目的類型。</typeparam>
      <returns vsli:raw="A list of the target type containing the converted elements from the current &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt;.">目標類型的清單，包含從目前 <see cref="T:System.Collections.Immutable.ImmutableList`1" /> 中已轉換的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">從目標陣列的開頭開始，將整個不可變的清單複製到相容的一維陣列。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">一維陣列，該陣列是從不可變清單複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">從目標陣列的指定索引處開始，將整個不可變的清單複製到相容的一維陣列。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">一維陣列，該陣列是從不可變清單複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a range of elements from the immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">從目標陣列的指定索引處開始，從不可變清單中複製某範圍的元素到相容的一維陣列。</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">來源的不可變清單中以零為起始的索引，其為複製開始處。</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">一維陣列，該陣列是從不可變清單複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">陣列中以零起始的索引，即複製的起始處。</param>
      <param name="count" vsli:raw="The number of elements to copy.">要複製的項目數目。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the list.">取得清單中所包含元素的數目。</summary>
      <returns vsli:raw="The number of elements in the list.">清單中項目的數目。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary vsli:raw="Gets an empty immutable list.">取得含有預設排序比較子的空集合。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">列舉二進位樹狀目錄的內容。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">取得位於目前列舉值位置的項目。</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">位於目前列舉程式位置的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Enumerator&quot; /&gt; class.">將 <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" /> 類別的目前執行個體所使用的資源釋出。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances enumeration to the next element of the immutable list.">將列舉往前推至不可變清單的下一個項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the list.">如果列舉程式已成功前移至下一個項目，則為 <see langword="true" />；如果列舉程式超過清單的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable list.">將列舉程式設定為它的初始位置，這是在不可變清單中的第一個項目之前。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">目前的元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">判斷不可變的清單是否包含符合指定述詞所定義之條件的項目。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果不可變的清單包含一或多個符合指定述詞所定義之條件的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內第一個出現的項目。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">第一個符合指定之述詞所定義的條件之項目 (如有找到)，否則為類型 <paramref name="T" /> 的預設值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">擷取符合指定之述詞所定義的條件之所有項目。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="An immutable list that contains all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">不可變的清單其中包含符合指定述詞所定義之條件的所有元素 (如有找到)，否則為空的不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，從指定索引開始且包含指定項目數的項目範圍內，第一個出現項目以零為起始的索引。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">搜尋之以零為起始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">區段中要搜尋的項目數目。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">第一次出現符合比對所定義之條件的元素以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，從指定索引開始到最後一個項目的項目範圍內，第一個出現項目以零為起始的索引。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">搜尋之以零為起始的起始索引。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">第一次出現符合比對所定義之條件的元素以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內第一個出現項目之以零為起始的索引。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, -1.">第一次出現符合比對所定義之條件的元素以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內最後一個出現的項目。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">最後一個符合指定之述詞所定義的條件之項目 (如有找到)，否則為類型 <paramref name="T" /> 的預設值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，包含指定項目數且結束於指定索引的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">向後搜尋之以零為起始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">區段中要搜尋的項目數目。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">符合 <paramref name="match" /> 所定義之條件且最後一次出現之元素的以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，從第一個項目開始到指定索引的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">向後搜尋之以零為起始的起始索引。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">符合 <paramref name="match" /> 所定義之條件且最後一次出現之元素的以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內最後一個出現項目以零為起始的索引。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">符合 <paramref name="match" /> 所定義之條件且最後一次出現之元素的以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the immutable list.">在不可變清單的每一個元素上執行指定動作。</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the immutable list.">要在不可變清單的每一個元素上執行的委派。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">傳回可逐一查看不可變清單的列舉程式。</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the immutable list.">可用於逐一查看不可變清單的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">為來源不可變清單中的項目範圍建立淺層複本。</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">以零為起始的索引，此為範圍起始處。</param>
      <param name="count" vsli:raw="The number of elements in the range.">範圍中的項目數。</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">來源不可變清單中項目範圍的淺層複本。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the entire immutable list.">搜尋指定的物件，並傳回整個不可變清單中第一個出現物件之以零為起始的索引。</summary>
      <param name="value" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;value&quot; /&gt; within the entire immutable list, if found; otherwise, ?1.">整個不可變清單中第一個出現 <paramref name="value" /> 之以零為起始的索引 (如有找到)，否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the list that starts at the specified index and contains the specified number of elements.">在清單中從指定索引開始且包含指定元素數目的範圍內，搜尋指定的物件第一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
      <param name="item" vsli:raw="The object to locate in the list The value can be null for reference types.">在清單中要尋找的物件，參考型別的值可以是 null。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">區段中要搜尋的項目數目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">搜尋中所使用的相等比較子。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that starts at index and contains count number of elements, if found; otherwise, -1.">在清單中從索引處開始且包含項目數計數的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified object into the immutable list at the specified index.">將指定的物件插入至不可變清單的指定索引處。</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the object.">要插入物件之以零起始的索引處。</param>
      <param name="item" vsli:raw="The object to insert.">要插入的物件。</param>
      <returns vsli:raw="The new immutable list after the object is inserted.">插入物件後新的不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">將集合的項目插入不可變清單的指定索引處。</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the elements.">要插入元素之以零起始的索引處。</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted.">應插入元素的集合。</param>
      <returns vsli:raw="The new immutable list after the elements are inserted.">插入元素後新的不可變清單。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this list is empty.">取得值，這個值指出清單是否為空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果該清單為空則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index of the list.">取得清單中指定索引處的元素。</summary>
      <param name="index" vsli:raw="The index of the element to retrieve.">要擷取之項目的索引。</param>
      <returns vsli:raw="The element at the specified index.">在指定索引上的項目。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="In a get operation, &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">在 get 作業中，<paramref name="index" /> 是負數或不小於 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">取得位於指定 <paramref name="index" /> 集合項目的唯讀參考。</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">傳回集合中的項目零起始索引。</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">位於指定位置項目的唯讀參考。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">
        <paramref name="index" /> 是負數或不小於 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the list that contains the specified number of elements and ends at the specified index.">在清單中包含指定個數元素且結尾位於指定索引的元素範圍內，搜尋指定的物件最後一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">要在清單中尋找的物件 參考類型的值可以是 Null。</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">向後搜尋之以零為起始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">區段中要搜尋的項目數目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">搜尋中所使用的相等比較子。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the list that contains count number of elements and ends at index, if found; otherwise, -1.">在清單中包含項目數計數且結束於索引處的項目範圍內，最後一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from this immutable list.">從這個不可變清單中移除指定物件的第一個符合元素。</summary>
      <param name="value" vsli:raw="The object to remove.">要移除的物件。</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">新的清單已移除物件，或是指定的物件已不存在於此清單則為此清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of the object that matches the specified value from this immutable list.">從這個不可變清單中移除第一個符合指定值的物件。</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">從清單移除之元素的值。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">搜尋中所使用的相等比較子。</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">新的清單已移除物件，或是指定的物件已不存在於此清單則為此清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">移除符合指定的述詞所定義之條件的所有項目。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">定義要移除項目之條件的委派。</param>
      <returns vsli:raw="The new list with the elements removed.">已移除元素的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index.">移除指定索引中的項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">移除項目之以零為起始的索引。</param>
      <returns vsli:raw="A new list with the element removed.">已移除項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list.">從這個不可變清單移除一個範圍的元素。</summary>
      <param name="items" vsli:raw="The collection whose elements should be removed if matches are found in this list.">若在這個清單中找到符合的元素，應被移除元素的集合。</param>
      <returns vsli:raw="A new list with the elements removed.">已移除項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified values from this list.">從這個清單中移除指定的值。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">如果在這個清單中找到相符項目時要移除的項目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">搜尋中所使用的相等比較子。</param>
      <returns vsli:raw="A new list with the elements removed.">已移除項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements, starting from the specified index and containing the specified number of elements, from this immutable list.">從不可變清單中移除某範圍的元素，從指定的索引開始，並且包含指定數目的元素。</summary>
      <param name="index" vsli:raw="The starting index to begin removal.">開始移除的起始索引。</param>
      <param name="count" vsli:raw="The number of elements to remove.">要移除的項目數目。</param>
      <returns vsli:raw="A new list with the elements removed.">已移除項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">在不可變清單中以新元素取代指定元素。</summary>
      <param name="oldValue" vsli:raw="The element to replace.">要取代的項目。</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">要取代 <paramref name="oldValue" /> 的元素。</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element.">含已取代之元素的新清單，即使該元素等於舊的元素。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the immutable list.">不可變的清單中沒有 <paramref name="oldValue" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">在不可變清單中以新元素取代指定元素。</summary>
      <param name="oldValue" vsli:raw="The element to replace in the list.">在清單中要取代的元素。</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">要取代 <paramref name="oldValue" /> 的元素。</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to check for equality.">用來檢查相等的比較子。</param>
      <returns vsli:raw="A new list with the object replaced, or this list if the specified object is not in this list.">新的清單含有已取代的物件，或是這個清單沒有指定的物件則為此清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">反轉整個不可變清單中項目的順序。</summary>
      <returns vsli:raw="The reversed list.">反向排列的清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">反轉不可變清單之指定範圍中項目的順序。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">要反向範圍內之以零為起始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">要反向範圍中的項目數。</param>
      <returns vsli:raw="The reversed list.">反向排列的清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element at a given position in the immutable list with the specified element.">以指定元素取代不可變清單中指定位置的元素。</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">清單中要取代之元素的位置。</param>
      <param name="value" vsli:raw="The element to replace the old element with.">用來取代舊項目的項目。</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element at that position.">含已取代之元素的新清單，即使該元素等於位置上舊的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the default comparer.">使用預設的比較子來排序整個不可變清單中的元素。</summary>
      <returns vsli:raw="The sorted list.">已排序的清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">使用指定的比較子來排序整個不可變清單中的元素。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">比較元素時要使用的實作，或 <see langword="null" /> 表示使用預設比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />)。</param>
      <returns vsli:raw="The sorted list.">已排序的清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">使用指定的比較子來排序整個不可變清單中的元素。</summary>
      <param name="comparison" vsli:raw="The delegate to use when comparing elements.">比較元素時所要使用的委派。</param>
      <returns vsli:raw="The sorted list.">已排序的清單。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts a range of elements in the immutable list using the specified comparer.">使用指定的比較子來排序不可變清單某範圍內的元素。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">要排序範圍內之以零為起始的起始索引。</param>
      <param name="count" vsli:raw="The length of the range to sort.">要排序的範圍長度。</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">比較項目時所使用的實作，或 <see langword="null" /> 表示使用預設的比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />)。</param>
      <returns vsli:raw="The sorted list.">已排序的清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable list.">將指定的項目加入至不可變的清單。</summary>
      <param name="item" vsli:raw="The item to add.">要新增的項目。</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">從不可變的清單中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">從不可變的清單中移除第一個出現的特定物件。</summary>
      <param name="item" vsli:raw="The object to remove.">要移除的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original list.">如果 <see langword="true" /> 從清單中成功移除，則為 <paramref name="item" />；否則為 <see langword="false" />。 若 <see langword="false" /> 沒有在原本的清單中找到，則這個方法也會回傳 <paramref name="item" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">傳回可逐一查看不可變清單的列舉程式。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">可用來逐一查看清單的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an object in the immutable list at the specified index.">將物件插入至不可變清單的指定索引處。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">應在 <paramref name="item" /> 插入以零為起始的索引。</param>
      <param name="item" vsli:raw="The object to insert.">要插入的物件。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value at the specified index.">取得或設定指定之索引處的值。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">當 <paramref name="index" /> 是負數或不小於 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> 時，從 getter 擲回。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">一律從 setter 擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the value at the specified index.">移除在指定索引處的值。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified array index.">從指定的陣列索引處開始，將整個不可變的清單複製到相容的一維陣列。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from immutable list.">從不可變清單複製元素的目的地一維陣列。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="This type is immutable, so it is always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">請參閱 <see cref="T:System.Collections.ICollection" /> 介面。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">請參閱 <see cref="T:System.Collections.ICollection" />。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">傳回可逐一查看不可變清單的列舉程式。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">可用來逐一查看清單的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the immutable list.">將項目加入不可變的清單中。</summary>
      <param name="value" vsli:raw="The object to add to the list.">要加入至清單的物件。</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the list.">新元素的插入的位置，或是 -1 表示此元素沒有插入清單中。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">一律擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">從不可變的清單中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">一律擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">判斷不可變的清單是否包含特定值。</summary>
      <param name="value" vsli:raw="The object to locate in the list.">要在清單中尋找的物件</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在清單中找到此物件則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the immutable list.">判斷不可變清單中特定項目的索引。</summary>
      <param name="value" vsli:raw="The object to locate in the list.">要在清單中尋找的物件</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the immutable list at the specified index.">將項目插入至不可變清單的指定索引處。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value" vsli:raw="The object to insert into the list.">要插入清單的物件。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">一律擲回。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">取得或設定在指定索引處的 <see cref="T:System.Object" />。</summary>
      <param name="index" vsli:raw="The index.">索引。</param>
      <returns vsli:raw="The value at the specified index.">位於指定索引處的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">當 <paramref name="index" /> 是負數或不小於 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> 時，從 getter 擲回。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">一律從 setter 擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">從不可變的清單中移除第一個出現的特定物件。</summary>
      <param name="value" vsli:raw="The object to remove from the list.">要從清單中移除的物件。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">一律擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">移除位於不可變清單之指定索引處的項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">一律擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable list.">將指定的值加入至這個不可變清單。</summary>
      <param name="value" vsli:raw="The value to add.">要加入的值。</param>
      <returns vsli:raw="A new list with the element added.">已新增項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified values to this immutable list.">將指定的值加入至這個不可變清單。</summary>
      <param name="items" vsli:raw="The values to add.">要加入的值。</param>
      <returns vsli:raw="A new list with the elements added.">新增項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Retrieves an empty list that has the same sorting and ordering semantics as this instance.">擷取空的清單，這個清單的排序及順序語意與這個執行個體相同。</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">空的清單，這個清單的排序及順序語意與這個執行個體相同。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">將指定的項目插入至不可變清單中的指定索引處。</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">要插入值的索引。</param>
      <param name="item" vsli:raw="The element to insert.">要插入的元素。</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">新的不可變清單，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">將指定的項目插入至不可變清單中的指定索引處。</summary>
      <param name="index" vsli:raw="The index at which to insert the elements.">要插入元素的索引處。</param>
      <param name="items" vsli:raw="The elements to insert.">要插入的項目。</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">新的不可變清單，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the element with the specified value from the list.">從清單中移除具有特定值的元素。</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">從清單移除之元素的值。</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to compare elements for equality.">用來比較元素相等的比較子。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; with the specified element removed.">已移除指定項目的新 <see cref="T:System.Collections.Immutable.ImmutableList`1" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">移除符合指定的述詞所定義之條件的所有項目。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">定義要移除項目之條件的委派。</param>
      <returns vsli:raw="A new immutable list with the elements removed.">已移除項目的新不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">移除不可變清單之指定索引處的項目。</summary>
      <param name="index" vsli:raw="The index of the element to remove.">要移除的項目索引。</param>
      <returns vsli:raw="A new list with the element removed.">已移除項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list that match the items specified.">從這個符合項目指定的不可變清單移除一個範圍的元素。</summary>
      <param name="items" vsli:raw="The range of items to remove from the list, if found.">從清單中要移除項目的範圍 (如有找到)。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare elements.">用來比較元素的相等比較子。</param>
      <returns vsli:raw="An immutable list with the items removed.">已移除項目的不可變清單。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; or &lt;paramref name=&quot;equalityComparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="items" /> 或 <paramref name="equalityComparer" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the specified number of elements at the specified location from this list.">從這個清單中的指定位置移除指定數目的元素。</summary>
      <param name="index" vsli:raw="The starting index of the range of elements to remove.">要移除之元素範圍的起始索引。</param>
      <param name="count" vsli:raw="The number of elements to remove.">要移除的項目數目。</param>
      <returns vsli:raw="A new list with the elements removed.">已移除項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces an element in the list with the specified element.">使用指定的元素取代清單中的元素。</summary>
      <param name="oldValue" vsli:raw="The element to replace.">要取代的項目。</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">用來取代舊項目的項目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">搜尋中所使用的相等比較子。</param>
      <returns vsli:raw="The new list.">新的清單。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">會在清單中沒有舊值時擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">使用指定的項目取代清單中指定位置的項目。</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">清單中要取代之元素的位置。</param>
      <param name="value" vsli:raw="The element to replace the old element with.">用來取代舊項目的項目。</param>
      <returns vsli:raw="The new list.">新的清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary vsli:raw="Creates a list that has the same contents as this list and can be efficiently mutated across multiple operations using standard mutable interfaces.">建立與此清單 (能夠使用標準變動介面，有效率地跨多個作業進行變動) 內容相同之清單。</summary>
      <returns vsli:raw="The created list with the same contents as this list.">已建立的清單含有與此清單相同的內容。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">判斷不可變清單中的每一個項目是否符合指定述詞所定義的條件。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">定義檢查項目所根據之條件的委派。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">如果不可變清單中的每一個項目都符合指定述詞所定義的條件，則為 <see langword="true" />，否則為 <see langword="false" />。 如果清單中沒有元素，則傳回值為 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableQueue`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">提供一組 <see cref="T:System.Collections.Immutable.ImmutableQueue`1" /> 類別執行個體的初始化方法。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary vsli:raw="Creates an empty immutable queue.">建立空的不可變佇列。</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable queue.">要儲存於不可變佇列中的項目類型。</typeparam>
      <returns vsli:raw="An empty immutable queue.">空的不可變佇列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable queue that contains the specified item.">建立新的不可變佇列，其中包含指定的項目。</summary>
      <param name="item" vsli:raw="The item to prepopulate the queue with.">要預先填入佇列的項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">不可變佇列中的項目類型。</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified item.">新的不可變佇列，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable queue that contains the specified array of items.">建立新的不可變佇列，其中包含指定的項目陣列。</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the queue with.">陣列，其中包含要預先填入佇列的項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">不可變佇列中的項目類型。</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified items.">新的不可變佇列，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable queue that contains the specified items.">建立新的不可變佇列，其中包含指定的項目。</summary>
      <param name="items" vsli:raw="The items to add to the queue before immutability is applied.">在套用不變性之前加入佇列的項目。</param>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">佇列中項目的類型。</typeparam>
      <returns vsli:raw="An immutable queue that contains the specified items.">不可變的佇列，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">移除不可變佇列開頭的項目，並傳回新的佇列。</summary>
      <param name="queue" vsli:raw="The queue to remove the item from.">要從中移除項目的佇列。</param>
      <param name="value" vsli:raw="When this method returns, contains the item from the beginning of the queue.">當這個方法傳回時，會包含來自佇列開頭的項目。</param>
      <typeparam name="T" vsli:raw="The type of elements in the immutable queue.">不可變佇列中的項目類型。</typeparam>
      <returns vsli:raw="The new queue with the item removed.">已移除項目的新佇列。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">堆疊是空的。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary vsli:raw="Represents an immutable queue.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">代表不可變的佇列。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">佇列中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable queue.">從不可變的佇列移除所有的物件。</summary>
      <returns vsli:raw="The empty immutable queue.">空的不可變佇列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">移除不可變佇列開頭的項目，並傳回新的佇列。</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">新的不可變佇列；永遠不會 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">此佇列是空的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">移除不可變佇列開頭的項目，並傳回新的佇列。</summary>
      <param name="value" vsli:raw="When this method returns, contains the element from the beginning of the queue.">此方法傳回時，包含來自佇列開頭的項目。</param>
      <returns vsli:raw="The new immutable queue with the beginning element removed.">已移除開頭項目的新不可變佇列。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">此佇列是空的。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary vsli:raw="Gets an empty immutable queue.">取得空的不可變佇列。</summary>
      <returns vsli:raw="An empty immutable queue.">空的不可變佇列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">將項目加入到不可變佇列結尾，並傳回新的佇列。</summary>
      <param name="value" vsli:raw="The element to add.">要加入的項目。</param>
      <returns vsli:raw="The new immutable queue.">新的不可變佇列。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable queue without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">列舉不可變佇列的內容而不需配置任何記憶體。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">取得位於目前列舉值位置的項目。</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">位於目前列舉程式位置的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable queue.">將列舉程式往前推至不可變佇列的下一個項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the queue.">如果列舉程式已成功前移至下一個項目，則為 <see langword="true" />；如果列舉程式超過佇列的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable queue.">傳回可逐一查看不可變佇列的列舉值。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the queue.">可用來逐一查看佇列的列舉值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">取得值，這個值表示此不可變佇列是否空白。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此佇列為空白，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">傳回不可變佇列開頭的項目，但不要移除。</summary>
      <returns vsli:raw="The element at the beginning of the queue.">佇列開頭的元素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">此佇列是空的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element at the front of the queue.">取得位於佇列前端項目的唯讀參考。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">此佇列是空的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> 物件，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable queue.">從不可變的佇列移除所有項目。</summary>
      <returns vsli:raw="The empty immutable queue.">空的不可變佇列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">移除不可變佇列開頭的項目，並傳回新的佇列。</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">新的不可變佇列；永遠不會 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">將項目加入到不可變佇列結尾，並傳回新的佇列。</summary>
      <param name="value" vsli:raw="The element to add.">要加入的項目。</param>
      <returns vsli:raw="The new immutable queue.">新的不可變佇列。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">提供一組 <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" /> 類別執行個體的初始化方法。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable sorted dictionary.">建立空白、不可變的排序字典。</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典所儲存的值類型。</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">空白、不可變的排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key comparer.">建立空白、不可變的排序字典，該字典會使用指定的索引鍵比較子。</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">用於判斷字典中索引鍵等式的實作。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典所儲存的值類型。</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">空白、不可變的排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key and value comparers.">建立空白、不可變的排序字典，該字典會使用指定的索引鍵與值比較子。</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">用於判斷字典中索引鍵等式的實作。</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">用於判斷字典中的值是否相等的實作。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典所儲存的值類型。</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">空白、不可變的排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">建立新的、不可變的排序字典產生器。</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典所儲存的值類型。</typeparam>
      <returns vsli:raw="The immutable collection builder.">不可變的集合產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">建立新的、不可變的排序字典產生器。</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">索引鍵比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典所儲存的值類型。</typeparam>
      <returns vsli:raw="The immutable collection builder.">不可變的集合產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">建立新的、不可變的排序字典產生器。</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">索引鍵比較子。</param>
      <param name="valueComparer" vsli:raw="The value comparer.">值比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典所儲存的值類型。</typeparam>
      <returns vsli:raw="The immutable collection builder.">不可變的集合產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key comparer.">使用指定的索引鍵比較子，從指定的項目範圍，建立新的、不可變的排序字典。</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to evaluate keys for equality and sorting.">評估等式與排序索引鍵所使用的比較子實作。</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary.">要新增至排序字典的項目。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">字典中儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">字典中儲存的值類型。</typeparam>
      <returns vsli:raw="The new immutable sorted dictionary that contains the specified items and uses the specified key comparer.">新的、不可變的排序字典，其中包含指定的項目，並使用指定的索引鍵比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key and value comparers.">使用指定的索引鍵與值比較子，從指定的項目範圍，建立新的、不可變的排序字典。</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality and sorting.">比較等式與排序索引鍵所使用的比較子實作。</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">比較等式與排序值所使用的比較子實作。</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">在字典成為不可變之前，新增至排序字典的項目。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">字典中儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">字典中儲存的值類型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items and uses the specified comparers.">不可變的排序字典，其中包含指定的項目，並使用指定的比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates an immutable sorted dictionary that contains the specified items and uses the default comparer.">建立不可變的排序字典，其中包含指定的項目，並使用預設的比較子。</summary>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">在字典成為不可變之前，新增至排序字典的項目。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">字典中儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">字典中儲存的值類型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items.">不可變的排序字典，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents.">列舉索引鍵/值組的序列，並產生不可變的排序字典作為內容。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">要列舉的索引鍵/值組的序列。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值類型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">不可變的排序字典，其中包含指定序列的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">列舉索引鍵/值組的序列，並使用指定的索引鍵比較子產生不可變的排序字典作為內容。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">要列舉的索引鍵/值組的序列。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">建立不可變字典時使用的索引鍵比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值類型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">不可變的排序字典，其中包含指定序列的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">列舉索引鍵/值組的序列，並使用指定的索引鍵與值比較子產生不可變的排序字典作為內容。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">要列舉的索引鍵/值組的序列。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">建立不可變字典時使用的索引鍵比較子。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">不可變字典所使用的值比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值類型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">不可變的排序字典，其中包含指定序列的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable sorted dictionary from the current contents of the builder's dictionary.">從產生器字典目前內容建立不可變的已排序字典。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted dictionary from.">產生器，用於建立不可變的已排序字典。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值類型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the current contents in the builder's dictionary.">不可變的已排序字典，其中包含產生器字典的目前內容。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents.">列舉及轉換序列，並產生不可變的排序字典作為內容。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">列舉以產生字典的序列。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">從每個序列項目產生字典的索引鍵的函式。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">從每個序列項目產生字典的值的函式。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中的項目類型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">所產生字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">所產生字典中的值類型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">不可變的排序字典，其中包含指定序列的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key comparer.">列舉及轉換序列，並使用指定的索引鍵比較子產生不可變的排序字典作為內容。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">列舉以產生字典的序列。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">從每個序列項目產生字典的索引鍵的函式。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">從每個序列項目產生字典的值的函式。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">字典使用的索引鍵比較子。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中的項目類型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">所產生字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">所產生字典中的值類型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">不可變的字典，其中包含指定序列的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">列舉及轉換序列，並使用指定的索引鍵與值比較子產生不可變的排序字典作為內容。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">列舉以產生字典的序列。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">從每個序列項目產生字典的索引鍵的函式。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">從每個序列項目產生字典的值的函式。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">字典使用的索引鍵比較子。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">字典使用的值比較子。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中的項目類型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">所產生字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">所產生字典中的值類型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">不可變的排序字典，其中包含指定序列的項目。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary vsli:raw="Represents an immutable sorted dictionary.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">代表不可變排序字典。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="TKey" vsli:raw="The type of the key contained in the dictionary.">字典中包含之索引鍵的類型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value contained in the dictionary.">字典中包含之值的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable sorted dictionary.">將具有指定索引鍵和值的元素加入不可變排序字典。</summary>
      <param name="key" vsli:raw="The key of the entry to add.">要加入的項目索引鍵。</param>
      <param name="value" vsli:raw="The value of entry to add.">要加入的項目值。</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the additional key/value pair.">新的不可變排序字典，其中包含其他機碼值組。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">字典中已經存在指定的索引鍵，但有不同的值。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specific key/value pairs to the immutable sorted dictionary.">將指定的機碼值組加入不可變排序字典。</summary>
      <param name="items" vsli:raw="The key/value pairs to add.">要加入的索引鍵/值組。</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">新的不可變字典，其中包含其他索引鍵/值組。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">字典中已經存在指定的其中一個索引鍵，但有不同的值。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary vsli:raw="Represents a sorted dictionary that mutates with little or no memory allocations and that can produce or build on immutable sorted dictionary instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">代表隨著少數記憶體配置或無記憶體配置而變動的排序字典，此排序字典可以非常有效率地產生或建置於不可變排序字典執行個體上。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable sorted dictionary.">將具有指定索引鍵和值的項目加入至不可變排序字典。</summary>
      <param name="key" vsli:raw="The key of the element to add.">要加入的項目的索引鍵。</param>
      <param name="value" vsli:raw="The value of the element to add.">要加入的項目的值。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable sorted dictionary.">將指定的項目加入至不可變排序字典。</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">要加入字典的物件。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to the immutable sorted dictionary.">將值序列加入至不可變排序字典。</summary>
      <param name="items" vsli:raw="The items to add to the dictionary.">要加入至字典的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable sorted dictionary.">從不可變排序字典中移除所有項目。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains a specific value.">判斷不可變排序字典是否包含特定值。</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">要在字典中尋找的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在字典中找到 <see langword="true" /> 則為 <paramref name="item" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified key.">判斷不可變排序字典是否包含具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">要在字典中尋找的索引鍵。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">判斷不可變排序字典是否包含具有指定值的項目。</summary>
      <param name="value" vsli:raw="The value to locate in the dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要在字典中尋找的值。 參考類型的值可以是 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable sorted dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果不可變排序字典中包含具有指定值的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable sorted dictionary.">取得這個不可變排序字典中的項目數目。</summary>
      <returns vsli:raw="The number of elements in this dictionary.">取得此字典中的項目數目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">傳回逐一查看不可變排序字典內容的列舉程式。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">可用來逐一查看字典的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">如果字典中存在相符的索引鍵，就會取得指定索引鍵的值；否則為預設值。</summary>
      <param name="key" vsli:raw="The key to search for.">要搜尋的索引鍵。</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">索引鍵的值；如果找不到相符的索引鍵，則為 <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">如果字典中存在相符的索引鍵，就會取得指定索引鍵的值；否則為預設值。</summary>
      <param name="key" vsli:raw="The key to search for.">要搜尋的索引鍵。</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">如果字典中找不到相符的索引鍵時所傳回的預設值。</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">索引鍵的值，或者，如果找不到相符的索引鍵，則為 <paramref name="defaultValue" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the value for a specified key in the immutable sorted dictionary.">取得或設定不可變排序字典中指定索引鍵的值。</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">要擷取其值的索引鍵。</param>
      <returns vsli:raw="The value associated with the given key.">與指定索引鍵相關聯的值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">取得或設定索引鍵比較子。</summary>
      <returns vsli:raw="The key comparer.">索引鍵比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a strongly typed, read-only collection of elements.">取得項目的強型別、唯讀集合。</summary>
      <returns vsli:raw="A strongly typed, read-only collection of elements.">項目的強型別、唯讀集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable sorted dictionary.">將具有指定索引鍵的項目從不可變排序字典中移除。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的項目索引鍵。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original dictionary.">如果成功移除項目，則為 <see langword="true" />，否則為 <see langword="false" />。 如果在原始的字典中找不到 <see langword="false" />，則這個方法也會傳回 <paramref name="key" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable sorted dictionary.">從不可變排序字典中移除第一個出現的特定物件。</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">要從字典中移除的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">如果已成功從字典中移除 <see langword="true" />，則為 <paramref name="item" />，否則為 <see langword="false" />。 如果在字典中找不到 <see langword="false" />，則這個方法也會傳回 <paramref name="item" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable sorted dictionary.">從不可變排序字典中，移除任何索引鍵與可在指定順序中找到之索引鍵相符的項目。</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">要從字典中移除的項目索引鍵。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">從特定的陣列索引開始，將字典的項目複製到陣列。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">從字典複製項目之目的地的一維陣列。 陣列必須有以零為起始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">取得值，這個值會指出 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (具備安全執行緒)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">將具有所提供之索引鍵和值的項目加入字典物件。</summary>
      <param name="key" vsli:raw="The key of the element to add.">要加入的項目的索引鍵。</param>
      <param name="value" vsli:raw="The value of the element to add.">要加入的項目的值。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">判斷字典物件是否包含具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key to locate.">要尋找的索引鍵。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">傳回字典的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">字典的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">取得值，這個值會指出 <see cref="T:System.Collections.IDictionary" /> 物件的大小是否固定。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Collections.IDictionary" /> 物件具有固定的大小，則 <see langword="true" />;否則，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">取得值，這個值表示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">取得或設定具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key.">索引鍵。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的索引鍵。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含執行 <see cref="T:System.Collections.Generic.IDictionary`2" />之物件的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">從字典中移除具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的項目索引鍵。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含執行 <see cref="T:System.Collections.Generic.IDictionary`2" />之物件中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">可用於逐一查看集合的列舉程式物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted dictionary based on the contents of this instance.">根據這個執行個體的內容，建立不可變排序字典。</summary>
      <returns vsli:raw="An immutable sorted dictionary.">不可變排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">判斷此字典是否包含指定的索引鍵。</summary>
      <param name="equalKey" vsli:raw="The key to search for.">要搜尋的索引鍵。</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">如果找到，則為位於字典中相符的索引鍵；如果找不到相符項目，則為 <c>equalkey</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到 <see langword="true" /> 的相符項，則為 <paramref name="equalKey" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">取得與指定索引鍵關聯的值。</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">將擷取其值的索引鍵。</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">如果找到索引鍵，則這個方法傳回時會包含與指定索引鍵相關聯的值，否則會包含 <paramref name="value" /> 參數類型的預設值。 這個參數會以未初始化的狀態傳遞。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果實作字典的物件包含具有指定索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">取得或設定值比較子。</summary>
      <returns vsli:raw="The value comparer.">值比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">傳回與所提供 <paramref name="key" />建立關聯值的唯讀參考。</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">
        <paramref name="key" /> 不存在。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable sorted dictionary.">取得集合，其中包含不可變排序字典的值。</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">集合，其中包含實作字典的物件值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable sorted dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">擷取空白不可變排序字典，其具有與字典執行個體相同的順序和機碼值組比較規則。</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">具有對等順序和索引鍵/值比較規則的空字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable sorted dictionary contains the specified key/value pair.">判斷此不可變排序字典是否包含指定的機碼值組。</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">要尋找的索引鍵/值組。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在字典中找到指定的索引鍵/值組，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether this immutable sorted map contains the specified key.">判斷此不可變排序對應是否包含指定的索引鍵。</summary>
      <param name="key" vsli:raw="The key to locate.">要尋找的索引鍵。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果不可變字典包含指定之索引鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">判斷不可變排序字典是否包含具有指定值的項目。</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要尋找的值。 參考類型的值可以是 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典中包含具有指定值的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable sorted dictionary.">取得不可變排序字典中機碼值組的數目。</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">字典中機碼值組的數目。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable sorted dictionary.">取得空白不可變排序字典。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">列舉二進位樹狀目錄的內容。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">取得位於目前列舉值位置的項目。</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">位於目前列舉程式位置的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator&quot; /&gt; class.">將 <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" /> 類別的目前執行個體所使用的資源釋出。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted dictionary.">將列舉程式往前推至不可變排序字典的下一個項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted dictionary.">如果列舉程式已成功前移至下一個項目，則為 <see langword="true" />；如果列舉程式超過排序字典的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted dictionary.">將列舉程式設定為它的初始位置，這是在不可變排序字典中的第一個項目之前。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">目前的元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">傳回逐一查看不可變排序字典內容的列舉程式。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">可用來逐一查看字典的列舉程式。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable sorted dictionary is empty.">取得值，這個值表示此不可變排序字典之執行個體是否為空白。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個執行個體是空的，則為 <see langword="true" />；否則即為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">取得與指定索引鍵相關聯的 <paramref name="TValue" />。</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">要擷取其值的索引鍵。</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">與指定之索引鍵關聯的值。 如果找不到結果，此作業會擲回例外狀況。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable sorted dictionary.">取得不可變排序字典之索引鍵比較子。</summary>
      <returns vsli:raw="The key comparer for the dictionary.">字典的索引鍵比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable sorted dictionary.">取得不可變排序字典中的索引鍵。</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">不可變字典中的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified value from the immutable sorted dictionary.">將具有指定值的元素從不可變排序字典移除。</summary>
      <param name="value" vsli:raw="The value of the element to remove.">要移除的元素值。</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified value cannot be found in the dictionary.">已移除指定元素之新的不可變字典；或者如果字典中找不到指定的值，則為此執行個體。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable sorted dictionary.">將具有指定索引鍵的元素從不可變排序字典移除。</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">要移除之項目的索引鍵。</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">已移除指定之索引鍵的新不可變字典，如果在字典中找不到指定的索引鍵，則為此執行個體。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable sorted dictionary, possibly overwriting an existing value for the given key.">設定不可變排序字典中指定的索引鍵和值，可能會覆寫指定索引鍵的現有值。</summary>
      <param name="key" vsli:raw="The key of the entry to add.">要加入的項目索引鍵。</param>
      <param name="value" vsli:raw="The key value to set.">要設定的索引鍵值。</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the specified key/value pair.">新的不可變排序字典，其中包含指定的機碼值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable sorted dictionary, possibly overwriting existing values for the keys.">設定不可變排序字典中指定的機碼值組，可能會覆寫索引鍵的現有值。</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">要在字典中設定的索引鍵/值組。 如果任何索引鍵已經存在字典中，則此方法將會覆寫其先前的值</param>
      <returns vsli:raw="An immutable dictionary that contains the specified key/value pairs.">不可變字典，其中包含指定的機碼值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The object to use as the key of the element to access." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">從特定的陣列索引開始，將字典的項目複製到陣列。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">從字典複製項目之目的地的一維陣列。 陣列必須有以零為起始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果對 <see cref="T:System.Collections.ICollection" /> 的存取已同步（安全線程），則 <see langword="true" />;否則，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">將具有所提供之索引鍵和值的項目加入字典物件。</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">做為要加入項目之索引鍵的物件。</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">做為要加入項目之值的物件。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">清除此執行個體。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">字典物件是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">判斷不可變字典物件是否包含具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">要在字典物件中尋找的索引鍵。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">傳回不可變字典物件的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">字典物件的列舉程式物件。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">取得值，指出 <see cref="T:System.Collections.IDictionary" /> 物件是否具有固定的大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Collections.IDictionary" /> 物件具有固定的大小，則 <see langword="true" />;否則，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">取得或設定具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key of the element to be accessed.">索引鍵。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的索引鍵。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含執行 <see cref="T:System.Collections.Generic.IDictionary`2" />之物件的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">從不可變字典物件中移除具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的項目索引鍵。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含執行 <see cref="T:System.Collections.Generic.IDictionary`2" />之物件中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">可用於逐一查看集合的列舉程式物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be updated." />
      <param name="value" vsli:raw="Value of entry to be updated." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="A set of key-value pairs to set on the map." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable sorted dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">建立與此字典 (能夠使用標準變動介面，有效率地跨多個作業進行變動) 內容相同之不可變排序字典。</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary.">與此字典具有相同內容的集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">判斷此字典是否包含指定的索引鍵。</summary>
      <param name="equalKey" vsli:raw="The key to search for.">要搜尋的索引鍵。</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">如果找到，則為位於字典中相符的索引鍵；如果找不到相符項目，則為 <c>equalkey</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到 <see langword="true" /> 的相符項，則為 <paramref name="equalKey" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">取得與指定索引鍵關聯的值。</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">將擷取其值的索引鍵。</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">如果找到索引鍵，則這個方法傳回時會包含與指定索引鍵相關聯的值，否則會包含 <paramref name="value" /> 參數類型的預設值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有指定索引鍵的元素，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">取得用來判斷值是否相等的值比較子。</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">用來判斷值是否相等的值比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">傳回與所提供 <paramref name="key" />建立關聯值的唯讀參考。</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">
        <paramref name="key" /> 不存在。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable sorted dictionary.">取得不可變排序字典中的值。</summary>
      <returns vsli:raw="The values in the dictionary.">字典中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key comparer.">取得不可變排序字典之執行個體，該執行個體會使用指定的索引鍵比較子。</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">要使用的索引鍵比較子。</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">不可變字典的執行個體，該執行個體會使用指定的比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key and value comparers.">取得不可變排序字典之執行個體，該執行個體會使用指定的索引鍵和值比較子。</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">要使用的索引鍵比較子。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">要使用的值比較子。</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">不可變字典的執行個體，該執行個體會使用指定的比較子。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">提供一組 <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" /> 類別執行個體的初始化方法。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary vsli:raw="Creates an empty immutable sorted set.">建立空的不可變排序資料集。</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable set.">要儲存於不可變資料集中的項目類型。</typeparam>
      <returns vsli:raw="An empty immutable sorted set.">空的不可變的已排序資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item.">建立新的不可變排序資料集，其中包含指定的項目。</summary>
      <param name="item" vsli:raw="The item to prepopulate the set with.">要預先填入資料集的項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">不可變資料集中的項目類型。</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">建立新的不可變資料集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items.">建立新的不可變排序資料集，其中包含指定的項目陣列。</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">陣列，其中包含要預先填入資料集的項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">不可變資料集中的項目類型。</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">新的不可變資料集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted set that uses the specified comparer.">建立空的不可變排序資料集，該資料集會使用指定的比較子。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">比較資料集中的項目時所使用的實作。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">不可變資料集中的項目類型。</typeparam>
      <returns vsli:raw="An empty immutable set.">空的不可變資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item and uses the specified comparer.">建立新的不可變排序資料集，其中包含指定的項目且使用指定的比較子。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">比較資料集中的項目時所使用的實作。</param>
      <param name="item" vsli:raw="The item to prepopulate the set with.">要預先填入資料集的項目。</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable set.">儲存於不可變資料集中的項目類型。</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">建立新的不可變資料集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items and uses the specified comparer.">建立新的不可變排序資料集，其中包含指定的項目陣列且使用指定的比較子。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">比較資料集中的項目時所使用的實作。</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">陣列，其中包含要預先填入資料集的項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">不可變資料集中的項目類型。</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">新的不可變資料集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">傳回集合，這個集合可用來建置不可變的排序資料集。</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">由集合所儲存的項目類型。</typeparam>
      <returns vsli:raw="The immutable collection builder.">不可變的集合產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">傳回集合，這個集合可用來建置不可變的排序資料集。</summary>
      <param name="comparer" vsli:raw="The comparer used to compare items in the set for equality.">用來比較資料集中的項目是否相等的比較子。</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">由集合所儲存的項目類型。</typeparam>
      <returns vsli:raw="The immutable collection.">不可變的集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">建立新的不可變集合，其中包含指定的項目。</summary>
      <param name="comparer" vsli:raw="The comparer to use to compare elements in this set.">用來比較這個資料集中項目的比較子。</param>
      <param name="items" vsli:raw="The items to add to the set before it's immutable.">在資料集成為不可變之前新增至該資料集的項目。</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">由集合所儲存的項目類型。</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">新的不可變資料集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">建立新的不可變集合，其中包含指定的項目。</summary>
      <param name="items" vsli:raw="The items to add to the set with before it's immutable.">在資料集成為不可變之前新增至該資料集的項目。</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">由集合所儲存的項目類型。</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">新的不可變資料集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable sorted set of its contents.">列舉序列，並產生其內容的不可變排序資料集。</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">要列舉的序列。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中的項目類型。</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">不可變的排序資料集，其中包含指定序列中的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable sorted set of its contents, and uses the specified comparer.">列舉序列、產生其內容的不可變排序資料集，並使用指定的比較子。</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">要列舉的序列。</param>
      <param name="comparer" vsli:raw="The comparer to use for initializing and adding members to the sorted set.">比較子，可用來初始化成員並將其加入排序資料集。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中的項目類型。</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">不可變的排序資料集，其中包含指定序列中的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable sorted set from the current contents of the builder's set.">從產生器集合目前內容建立不可變的已排序資料集。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted set from.">產生器，用於建立不可變的已排序資料集。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the immutable sorted set.">不可變的已排序資料集中元素的類型。</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the current contents in the builder's set.">不可變的已排序資料集，其中包含產生器集合中的目前內容。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary vsli:raw="Represents an immutable sorted set implementation.&#xA;&#xA;NuGet package: System.Collections.Immutable (about immutable collections and how to install)">代表不可變的已排序資料集實作。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the set.">資料集中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable sorted set.">將指定的值加入至這個不可變的已排序資料集。</summary>
      <param name="value" vsli:raw="The value to add.">要加入的值。</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in this set.">含有已加入項目的新資料集，如果項目已經存在於此資料集中，則為這個資料集。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary vsli:raw="Represents a sorted set that enables changes with little or no memory allocations, and efficiently manipulates or builds immutable sorted sets.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">代表排序的資料集，能夠進行少量或沒有記憶體配置的變更，有效率地操作或建立不可變的排序資料集。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">將項目加入目前的資料集，並傳回表示是否已成功加入項目的值。</summary>
      <param name="item" vsli:raw="The element to add to the set.">要加入至集合的項目。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">如果已將項目加入資料集，則為 <see langword="true" />，如果項目已經在資料集中，則為 <see langword="false" /></returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary vsli:raw="Removes all elements from this set.">從這個資料集中移除所有項目。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the set contains the specified object.">判斷資料集是否包含指定的物件。</summary>
      <param name="item" vsli:raw="The object to locate in the set.">要在資料集中尋找的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在資料集中找到 <see langword="true" />，則為 <paramref name="item" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">取得不可變的已排序資料集中的項目數。</summary>
      <returns vsli:raw="The number of elements in this set.">這個資料集中的項目數。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified set of items from the current set.">從目前資料集中移除指定的項目資料集。</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">要從資料集移除的項目集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the set.">傳回可逐一查看資料集的列舉程式。</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the set.">可用來逐一查看資料集的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">修改目前的資料集，使其僅包含同時也在指定之集合中出現的項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">判斷目前的資料集是否為指定之集合的適當 (嚴格) 子集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前資料集是 <see langword="true" /> 的正確子集，則為 <paramref name="other" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">判斷目前的資料集是否為指定之集合的適當 (嚴格) 超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前資料集是 <see langword="true" /> 的正確超集，則為 <paramref name="other" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">判斷目前的資料集是否為指定之集合的超集。</summary>
      <param name="other" vsli:raw="The collection is compare to the current set.">集合會與目前的資料集進行比較。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前資料集是 <see langword="true" /> 的子集，則為 <paramref name="other" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">判斷目前的資料集是否為指定之集合的超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前資料集是 <see langword="true" /> 的超集，則為 <paramref name="other" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the set at the given index.">取得位於指定索引的集合項目。</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">傳回集合中的項目零起始索引。</param>
      <returns vsli:raw="The element at the given position.">位於指定位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">取得位於指定 <paramref name="index" /> 集合項目的唯讀參考。</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">傳回集合中的項目零起始索引。</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">位於指定位置項目的唯讀參考。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the object that is used to determine equality for the values in the immutable sorted set.">取得或設定物件，這個物件可用來判斷不可變排序資料集中的值是否相等。</summary>
      <returns vsli:raw="The comparer that is used to determine equality for the values in the set.">用來判斷資料集中的值是否相等的比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">取得不可變的已排序資料集中的最大值，如比較子所定義。</summary>
      <returns vsli:raw="The maximum value in the set.">資料集中的最大值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">取得不可變的已排序資料集中的最小值，如比較子所定義。</summary>
      <returns vsli:raw="The minimum value in the set.">資料集中的最小值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">判斷目前的資料集是否與指定的集合重疊。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的資料集和 <see langword="true" /> 至少共用一個通用項目，則為 <paramref name="other" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from the set.">從資料集中移除第一個出現的指定物件。</summary>
      <param name="item" vsli:raw="The object to remove from the set.">要從資料集移除的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was removed from the set; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the set.">如果已從資料集中移除 <see langword="true" />，則為 <paramref name="item" />，如果在資料集中找不到 <see langword="false" />，則為 <paramref name="item" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary vsli:raw="Returns an enumerator that iterates over the immutable sorted set in reverse order.">傳回以反向順序逐一查看不可變排序資料集的列舉程式。</summary>
      <returns vsli:raw="An enumerator that iterates over the set in reverse order.">以反向順序逐一查看資料集的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">判斷目前的資料集和指定的集合是否包含相同項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的資料集等於 <see langword="true" />，則為 <paramref name="other" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">修改目前的資料集，使其僅包含目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">將項目加入目前的資料集，並傳回表示是否已成功加入項目的值。</summary>
      <param name="item" vsli:raw="The element to add to the set.">要加入至集合的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">從特定的陣列索引開始，將集合的項目複製到陣列。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">從集合複製項目之目的地的一維陣列。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">取得值，這個值表示此執行個體是否為唯讀。</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">一定是 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">可用來逐一查看集合的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">從特定的陣列索引開始，將資料集的項目複製到陣列中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">一維陣列，這是從資料集複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe).">取得值，指出 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果對 <see cref="T:System.Collections.ICollection" /> 的存取已同步（安全線程），則 <see langword="true" />;否則，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">可用來逐一查看集合的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted set based on the contents of this instance.">根據這個執行個體的內容來建立不可變的排序資料集。</summary>
      <returns vsli:raw="An immutable set.">不可變的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">修改目前的資料集，使其包含目前資料集和指定之集合中出現的所有項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current state.">要與目前資料集比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable sorted set.">從不可變的已排序資料集中移除所有項目。</summary>
      <returns vsli:raw="An empty set with the elements removed.">已移除項目的空資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable sorted set contains the specified value.">判斷此不可變的已排序資料集是否包含指定的值。</summary>
      <param name="value" vsli:raw="The value to check for.">要檢查的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果資料集包含指定的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">取得不可變的已排序資料集中的項目數。</summary>
      <returns vsli:raw="The number of elements in the immutable sorted set.">不可變的已排序資料集中的項目數。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary vsli:raw="Gets an empty immutable sorted set.">取得空的不可變已排序的資料集。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">列舉二進位樹狀目錄的內容。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">取得位於目前列舉值位置的項目。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">位於目前列舉程式位置的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">將 <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" /> 類別的目前執行個體所使用的資源釋出。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">將列舉程式往前推至不可變排序資料集的下一個項目。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted set.">如果列舉程式已成功前移至下一個項目，則為 <see langword="true" />；如果列舉程式超過排序資料集的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">將列舉程式設定為它的初始位置，這是在不可變排序資料集中的第一個項目之前。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">目前的元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a specified set of items from this immutable sorted set.">從這個不可變的已排序資料集中移除指定的項目資料集。</summary>
      <param name="other" vsli:raw="The items to remove from this set.">要從此資料集中移除的項目。</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">含有已移除項目的新資料集，如果資料集中沒有任何項目，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted set.">傳回可逐一查看不可變的已排序資料集的列舉值。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">可用來逐一查看資料集的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary vsli:raw="Gets the position within this immutable sorted set that the specified value appears in.">取得指定的值所出現之不可變的已排序資料集內的位置。</summary>
      <param name="item" vsli:raw="The value whose position is being sought.">要搜尋其位置的值。</param>
      <returns vsli:raw="The index of the specified &lt;paramref name=&quot;item&quot; /&gt; in the sorted set, if &lt;paramref name=&quot;item&quot; /&gt; is found. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1.">如果找到 <paramref name="item" />，則為已排序資料集中指定之 <paramref name="item" /> 的索引。 如果找不到 <paramref name="item" /> 且小於此資料集中的一或多個項目，此方法會傳回負數，也就是大於值的第一個項目之索引的位元補數。 如果找不到 <paramref name="item" />，且大於資料集中的任何項目，此方法會傳回負數，也就是最後一個項目的索引加 1 的位元補數。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist both in this set and in the specified set.">建立不可變的已排序資料集，其中包含存在於這個資料集和指定之資料集中的項目。</summary>
      <param name="other" vsli:raw="The set to intersect with this one.">要與這個資料集交集的資料集。</param>
      <returns vsli:raw="A new immutable sorted set that contains any elements that exist in both sets.">新的不可變的已排序資料集，其中包含同時存在於這兩個資料集中的任何項目。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable sorted set is empty.">取得值，這個值表示此不可變的已排序資料集是否為空的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this set is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此資料集為空的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection.">判斷目前的不可變的已排序資料集是否為指定之集合的適當 (嚴格) 子集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前資料集是 <paramref name="other" /> 的正確子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper superset of a specified collection.">判斷目前的不可變的已排序資料集是否為指定之集合的適當超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前資料集是 <paramref name="other" /> 的正確超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a subset of a specified collection.">判斷目前的不可變的已排序資料集是否為指定之集合的子集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前資料集是 <paramref name="other" /> 的子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a superset of a specified collection.">判斷目前的不可變的已排序資料集是否為指定之集合的超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前資料集是 <paramref name="other" /> 的超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the immutable sorted set at the given index.">取得指定索引處不可變的已排序資料集的項目。</summary>
      <param name="index" vsli:raw="The index of the element to retrieve from the sorted set.">要從已排序的資料集擷取之項目的索引。</param>
      <returns vsli:raw="The element at the given index.">位於指定索引的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference of the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">取得位於指定 <paramref name="index" /> 集合項目的唯讀參考。</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">傳回集合中的項目零起始索引。</param>
      <returns vsli:raw="A read-only reference of the element at the given position.">位於指定位置項目的唯讀參考。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary vsli:raw="Gets the comparer used to sort keys in the immutable sorted set.">取得用來排序不可變的已排序資料集中索引鍵的比較子。</summary>
      <returns vsli:raw="The comparer used to sort keys.">用來排序索引鍵的比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">取得不可變的已排序資料集中的最大值，如比較子所定義。</summary>
      <returns vsli:raw="The maximum value in the set.">資料集中的最大值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">取得不可變的已排序資料集中的最小值，如比較子所定義。</summary>
      <returns vsli:raw="The minimum value in the set.">資料集中的最小值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and a specified collection share common elements.">判斷目前的不可變的已排序資料集與指定的集合是否共用通用項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的資料集和 <paramref name="other" /> 至少共用一個通用項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified value from this immutable sorted set.">將指定的值從這個不可變的已排序資料集移除。</summary>
      <param name="value" vsli:raw="The element to remove.">要移除的項目。</param>
      <returns vsli:raw="A new immutable sorted set with the element removed, or this set if the element was not found in the set.">已移除項目的新的不可變的已排序資料集，如果在資料集中找不到項目，則為此資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that iterates over this immutable sorted set in reverse order.">傳回以反向順序逐一查看此不可變的已排序資料集的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      <returns vsli:raw="An enumerator that iterates over the immutable sorted set in reverse order.">以反向順序逐一查看不可變的已排序資料集的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and the specified collection contain the same elements.">判斷目前的不可變的已排序資料集和指定的集合是否包含相同項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果資料集相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both.">建立不可變的已排序資料集，其中包含存在於這個資料集或指定之序列 (但非兩者) 中的項目。</summary>
      <param name="other" vsli:raw="The other sequence of items.">項目的其他序列。</param>
      <returns vsli:raw="The new immutable sorted set.">新的不可變的已排序資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to the collection.">將指定的值加入集合。</summary>
      <param name="item" vsli:raw="The value to add.">要加入的值。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all the items from the collection.">從集合中移除所有項目。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">從特定的陣列索引開始，將集合的項目複製到陣列。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">從集合複製項目之目的地的一維陣列。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Returns true, since immutable collections are always read-only. See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">請參閱 <see cref="T:System.Collections.Generic.ICollection`1" /> 介面。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">從集合中移除第一個出現的特定物件。</summary>
      <param name="item" vsli:raw="The object to remove from the collection.">要從集合中移除的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已順利從集合中移除 <paramref name="item" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the set at the specified index.">在集合中的指定索引處插入項目。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">應在 <paramref name="item" /> 插入以零為起始的索引。</param>
      <param name="item" vsli:raw="The object to insert into the set.">要插入資料集的物件。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; interface.">請參閱 <see cref="T:System.Collections.Generic.IList`1" /> 介面。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">移除指定之索引處的項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除之項目的以零為起始的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate if the element was successfully added.">將項目加入至目前資料集，並傳回表示是否成功加入項目的值。</summary>
      <param name="item" vsli:raw="The element to add to the set.">要加入至集合的項目。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">如果項目加入至資料集，則為 <see langword="true" />，如果項目已經在資料集中，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">從目前的資料集中，移除指定之集合內的所有項目。</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">要從資料集移除的項目集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">修改目前的資料集，使其僅包含同時也在指定之集合中出現的項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">修改目前的資料集，使其僅包含目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or the specified collection.">修改目前的資料集，使其包含目前資料集或指定之集合中出現的所有項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">從特定的陣列索引開始，將資料集的項目複製到陣列中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">一維陣列，這是從資料集複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Returns true, since immutable collections are always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">請參閱 <see cref="T:System.Collections.ICollection" /> 介面。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">請參閱 <see cref="T:System.Collections.ICollection" />。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">可用於逐一查看集合的列舉程式物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the set.">將項目加入至資料集。</summary>
      <param name="value" vsli:raw="The object to add to the set.">要加入至資料集的物件。</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">插入新項目的位置，或是 -1，表示此項目沒有插入集合中。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">此集合是唯讀的，或具有固定大小。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the set.">將所有項目從資料集移除。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">所有情況都會擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the set contains a specific value.">判斷資料集是否包含特定的值。</summary>
      <param name="value" vsli:raw="The object to locate in the set.">要在資料集中尋找的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在資料集中找到物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the set.">判斷資料集中特定項目的索引。</summary>
      <param name="value" vsli:raw="The object to locate in the set.">要在資料集中尋找的物件。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the set at the specified index.">將項目插入資料集的指定索引處。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value" vsli:raw="The object to insert into the set.">要插入資料集的物件。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">此集合是唯讀的，或具有固定大小。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">取得值，這個值表示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">取得或設定在指定索引處的 <see cref="T:System.Object" />。</summary>
      <param name="index" vsli:raw="The index.">索引。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">從資料集中移除第一個出現的特定物件。</summary>
      <param name="value" vsli:raw="The object to remove from the set.">要從資料集移除的物件。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">此集合是唯讀的，或具有固定大小。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the set.">移除位於資料集指定之索引處的項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">此集合是唯讀的，或具有固定大小。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">將指定的項目加入至這個不可變的資料集中。</summary>
      <param name="value" vsli:raw="The element to add.">要加入的項目。</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">含有已加入項目的新資料集，如果項目已經存在於資料集中，則為這個資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">擷取空的不可變資料集，這個資料集的排序及順序語意與這個執行個體相同。</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">空的資料集，這個資料集的排序及順序語意與這個執行個體相同。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">從目前的不可變資料集中，移除指定之集合內的項目。</summary>
      <param name="other" vsli:raw="The items to remove from this set.">要從此資料集中移除的項目。</param>
      <returns vsli:raw="The new set with the items removed; or the original set if none of the items were in the set.">已移除項目的新資料集，如果資料集中沒有任何項目，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">建立不可變的資料集，其中包含存在於這個資料集和指定之資料集中的項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">新的不可變資料集，其中包含同時存在於這兩個資料集中的任何項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">從這個不可變的資料集中移除指定的項目。</summary>
      <param name="value" vsli:raw="The element to remove.">要移除的項目。</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">已移除之指定項目的新資料集，如果資料集中找不到該項目，則為目前的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">建立不可變的資料集，其中僅包含在目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要與目前資料組比較的集合。</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">新的資料集，其中僅包含在目前資料集或指定之集合 (但非兩者) 中出現的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">建立新的不可變資料集，其中包含在目前資料集或指定之集合中出現的所有項目。</summary>
      <param name="other" vsli:raw="The collection to add elements from.">要加入項目的來源集合。</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">已加入項目的新不可變資料集，如果所有項目均已存在於資料集中，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary vsli:raw="Creates a collection that has the same contents as this immutable sorted set that can be efficiently manipulated by using standard mutable interfaces.">建立與這個不可變的已排序資料集具有相同內容的集合，可使用標準的可變介面有效率地操作這個集合。</summary>
      <returns vsli:raw="The sorted set builder.">已排序的資料集產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">搜尋指定值的資料集，並傳回所找到的相等值 (如果有的話)。</summary>
      <param name="equalValue" vsli:raw="The value to search for.">要搜尋的值。</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">搜尋找到的資料集中的值，如果搜尋找不到相符項目，則為原始的值。</param>
      <returns vsli:raw="A value indicating whether the search was successful.">指出搜尋是否成功的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a given set of items to this immutable sorted set.">將項目的指定資料集加入至這個不可變的已排序資料集。</summary>
      <param name="other" vsli:raw="The items to add.">要加入的項目。</param>
      <returns vsli:raw="The new set with the items added; or the original set if all the items were already in the set.">已加入項目的新資料集，如果所有項目均已存在於資料集中，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Returns the immutable sorted set that has the specified key comparer.">傳回具有指定之索引鍵比較子的不可變的已排序資料集。</summary>
      <param name="comparer" vsli:raw="The comparer to check for.">要檢查的比較子。</param>
      <returns vsli:raw="The immutable sorted set that has the specified key comparer.">具有指定之索引鍵比較子的不可變的已排序資料集。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableStack`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">提供一組 <see cref="T:System.Collections.Immutable.ImmutableStack`1" /> 類別執行個體的初始化方法。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary vsli:raw="Creates an empty immutable stack.">建立空的不可變堆疊。</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable stack.">要儲存於不可變堆疊中的項目類型。</typeparam>
      <returns vsli:raw="An empty immutable stack.">空的不可變堆疊。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable stack that contains the specified item.">建立新的不可變堆疊，其中包含指定的項目。</summary>
      <param name="item" vsli:raw="The item to prepopulate the stack with.">要預先填入堆疊的項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">不可變堆疊中的項目類型。</typeparam>
      <returns vsli:raw="A new immutable collection that contains the specified item.">新的不可變集合，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable stack that contains the specified array of items.">建立新的不可變堆疊，其中包含指定的項目陣列。</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the stack with.">陣列，其中包含要預先填入堆疊的項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">不可變堆疊中的項目類型。</typeparam>
      <returns vsli:raw="A new immutable stack that contains the specified items.">新的不可變堆疊，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable stack that contains the specified items.">建立新的不可變堆疊，其中包含指定的項目。</summary>
      <param name="items" vsli:raw="The items to add to the stack before it's immutable.">在堆疊成為不可變之前新增至該堆疊的項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">堆疊中的項目類型。</typeparam>
      <returns vsli:raw="An immutable stack that contains the specified items.">不可變的堆疊，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary vsli:raw="Removes the specified item from an immutable stack.">從不可變的堆疊中移除指定的項目。</summary>
      <param name="stack" vsli:raw="The stack to modify.">要修改的堆疊。</param>
      <param name="value" vsli:raw="The item to remove from the stack.">要從堆疊中移除的項目。</param>
      <typeparam name="T" vsli:raw="The type of items contained in the stack.">堆疊中包含的項目類型。</typeparam>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">堆疊；永遠不會 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">堆疊是空的。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary vsli:raw="Represents an immutable stack.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示不可變的堆疊。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="The type of element on the stack.">堆疊上的項目型別。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">從不可變的堆疊移除所有的物件。</summary>
      <returns vsli:raw="An empty immutable stack.">空的不可變堆疊。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary vsli:raw="Gets an empty immutable stack.">取得空的不可變堆疊。</summary>
      <returns vsli:raw="An empty immutable stack.">空的不可變堆疊。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable stack without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">列舉不可變堆疊的內容而不需配置任何記憶體。
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">取得位於目前列舉值位置的項目。</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">位於目前列舉程式位置的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable stack.">將列舉程式往前推至不可變堆疊的下一個項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the stack.">如果列舉程式已成功前移至下一個項目，則為 <see langword="true" />；如果列舉程式超過堆疊的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable stack.">傳回可逐一查看不可變堆疊的列舉值。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the stack.">可用來逐一查看堆疊的列舉值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable stack is empty.">取得值，這個值表示此不可變堆疊的執行個體是否為空的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個執行個體是空的，則為 <see langword="true" />；否則即為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary vsli:raw="Returns the object at the top of the stack without removing it.">傳回堆疊頂端的物件而不需移除它。</summary>
      <returns vsli:raw="The object at the top of the stack.">堆疊頂端的物件。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">堆疊是空的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element on the top of the stack.">取得堆疊頂端項目的唯讀參考。</summary>
      <returns vsli:raw="A read-only reference to the element on the top of the stack.">堆疊頂端項目的唯讀參考。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">當堆疊為空時擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the stack after the removal.">移除不可變堆疊頂端的項目，並在移除之後，傳回堆疊。</summary>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">堆疊；永遠不會 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">堆疊是空的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary vsli:raw="Removes the specified element from the immutable stack and returns the stack after the removal.">從不可變的堆疊中移除指定的項目，並在移除之後，傳回堆疊。</summary>
      <param name="value" vsli:raw="The value to remove from the stack.">要從堆疊移除的值。</param>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">堆疊；永遠不會 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the immutable stack and returns the new stack.">在不可變堆疊頂端插入物件，並傳回新的堆疊。</summary>
      <param name="value" vsli:raw="The object to push onto the stack.">要推送至堆疊的物件。</param>
      <returns vsli:raw="The new stack.">新的堆疊。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> 物件，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable stack.">從不可變的堆疊中移除所有項目。</summary>
      <returns vsli:raw="The empty immutable stack.">空的不可變堆疊。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">移除不可變堆疊頂端的項目，並傳回新的堆疊。</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">新的堆疊；永遠不會 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">在不可變堆疊頂端插入項目，並傳回新的堆疊。</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">要推送至堆疊的項目。</param>
      <returns vsli:raw="The new stack.">新的堆疊。</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary vsli:raw="LINQ extension method overrides that offer greater efficiency for &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; than the standard LINQ methods  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">LINQ 擴充方法覆寫能針對 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 提供比標準 LINQ 方法更高的效率
NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">以累加的方式套用函式到序列的元素。</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">要套用函式的集合。</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">要在每個元素上以累加方式叫用的函式。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The final value after the cumulative function has been applied to all elements.">累加函式套用到所有元素後的最終值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">以累加的方式套用函式到序列的元素。</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">要套用函式的集合。</param>
      <param name="seed" vsli:raw="The initial accumulator value.">初始累積值。</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">要在每個元素上以累加方式叫用的函式。</param>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">累積值的型別。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The final accumulator value.">最終累積值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">以累加的方式套用函式到序列的元素。</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">要套用函式的集合。</param>
      <param name="seed" vsli:raw="The initial accumulator value.">初始累積值。</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">要在每個元素上以累加方式叫用的函式。</param>
      <param name="resultSelector" vsli:raw="A function to transform the final accumulator value into the result type." />
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">累積值的型別。</typeparam>
      <typeparam name="TResult" vsli:raw="The type of result returned by the result selector.">結果選取器傳回之結果的類型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The final accumulator value.">最終累積值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether all elements in this array match a given condition.">取得值，該值指示此陣列中的所有元素是否符合指定條件。</summary>
      <param name="immutableArray" vsli:raw="The array to check for matches.">要檢查相符項目的陣列。</param>
      <param name="predicate" vsli:raw="The predicate.">述詞。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element of the source sequence passes the test in the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果來源序列中的所有元素均通過所指定述詞中的測試，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements.">取得值，該值指示此陣列中是否包含任何元素。</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">要檢查元素的陣列。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array contains an elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果陣列包含元素則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements that match a specified condition.">取得值，該值指示此陣列中是否包含任何符合指定條件的元素。</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">要檢查元素的陣列。</param>
      <param name="predicate" vsli:raw="The delegate that defines the condition to match to an element.">定義符合某元素條件的委派。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element matches the specified condition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果元素符合指定條件則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns a value indicating whether this collection contains any elements.">傳回值，該值指示此集合是否包含任何元素。</summary>
      <param name="builder" vsli:raw="The builder to check for matches.">要檢查相符項目的產生器。</param>
      <typeparam name="T" vsli:raw="The type of elements in the array.">陣列中項目的型別。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array builder contains any elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果陣列產生器包含任何元素則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in the array.">傳回位於陣列中指定索引處的元素。</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">要在其中尋找元素的陣列。</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">要擷取之元素的索引。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The item at the specified index.">在指定之索引處的項目。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence or a default value if the index is out of range.">傳回位於序列中指定索引處的元素；如果索引超出範圍，則傳回預設值。</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">要在其中尋找元素的陣列。</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">要擷取之元素的索引。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The item at the specified index, or the default value if the index is not found.">位於指定索引處的項目，如果找不到索引則為預設值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element in an array.">傳回陣列中第一個元素。</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">要從其中取得項目的陣列。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The first item in the array.">陣列中的第一個項目。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">如果陣列是空的。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element in a sequence that satisfies a specified condition.">傳回序列中符合指定條件的第一個元素。</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">要從其中取得項目的陣列。</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The first item in the list if it meets the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">清單中的第一個元素 (如果符合 <paramref name="predicate" /> 指定的條件)。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">如果陣列是空的。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection.">傳回集合中的第一個元素。</summary>
      <param name="builder" vsli:raw="The builder to retrieve an item from.">要從其中擷取項目的產生器。</param>
      <typeparam name="T" vsli:raw="The type of items in the array.">陣列中項目的類型。</typeparam>
      <returns vsli:raw="The first item in the list.">清單中的第一個項目。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">如果陣列是空的。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element of a sequence, or a default value if the sequence contains no elements.">傳回序列的第一個元素；如果序列中沒有包含任何元素，則傳回預設值。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">要從其中擷取項目的陣列。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">如果有找到則為清單中的第一個項目，否則為項目類型的預設值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.">傳回序列中符合條件的第一個元素；如果找不到這類元素，則傳回預設值。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">要自其中擷取元素的陣列。</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">如果有找到則為清單中的第一個項目，否則為項目類型的預設值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection, or the default value if the collection is empty.">傳回集合中第一個元素，如果集合是空的則傳回預設值。</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">要從其中擷取元素的產生器。</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">產生器中項目的類型。</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">如果有找到則為清單中的第一個項目，否則為項目類型的預設值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of the array.">傳回陣列的最後一個元素。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">要從其中擷取項目的陣列。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the array.">陣列所包含之元素的類型。</typeparam>
      <returns vsli:raw="The last element in the array.">陣列中的最後一個元素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">如果集合是空的，則擲回。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a specified condition.">傳回序列中符合指定之條件的最後一個元素。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">要自其中擷取元素的陣列。</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to retrieve.">定義要擷取元素之條件的委派。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The last element of the array that satisfies the &lt;paramref name=&quot;predicate&quot; /&gt; condition.">陣列中符合 <paramref name="predicate" /> 條件的最後一個元素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">如果集合是空的，則擲回。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection.">傳回集合中的最後一個元素。</summary>
      <param name="builder" vsli:raw="The builder to retrieve elements from.">要自其中擷取元素的產生器。</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">產生器中項目的類型。</typeparam>
      <returns vsli:raw="The last element in the builder.">產生器中的最後一個元素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">如果集合是空的，則擲回。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of a sequence, or a default value if the sequence contains no elements.">傳回序列的最後一個元素；如果序列中沒有包含任何元素，則傳回預設值。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">要從其中擷取項目的陣列。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">序列的最後一個元素；如果序列中沒有包含任何元素，則傳回預設值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.">傳回序列中符合條件的最後一個元素；如果找不到這類元素，則傳回預設值。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve an element from.">要自其中擷取元素的陣列。</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">定義要搜尋項目之條件的委派。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">序列的最後一個元素；如果序列中沒有包含任何元素，則傳回預設值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection, or the default value if the collection is empty.">傳回集合中最後一個元素，如果集合是空的則傳回預設值。</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">要從其中擷取元素的產生器。</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">產生器中項目的類型。</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">序列的最後一個元素；如果序列中沒有包含任何元素，則傳回預設值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Projects each element of a sequence into a new form.">將序列的每個元素規劃成一個新的表單。</summary>
      <param name="immutableArray" vsli:raw="The immutable array to select items from.">要從其中選取項目的不可變陣列。</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">要套用至每個項目的轉換函式。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result element.">結果元素的類型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the transform function on each element of source.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是對每個來源元素叫用轉換函式所產生的結果。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;,             flattens the resulting sequences into one sequence, and invokes a result             selector function on each element therein.">將序列的每個項目投影為 <see cref="T:System.Collections.Generic.IEnumerable`1" />、將產生的序列簡化成單一序列，並對其中的每個項目叫用結果選取器函式。</summary>
      <param name="immutableArray" vsli:raw="The immutable array.">不可變的陣列。</param>
      <param name="collectionSelector" vsli:raw="A transform function to apply to each element of the input sequence.">要套用到輸入序列中各個項目的轉換函式。</param>
      <param name="resultSelector" vsli:raw="A transform function to apply to each element of the intermediate sequence.">要套用到中繼序列中各個項目的轉換函式。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;immutableArray&quot; /&gt;.">
        <paramref name="immutableArray" /> 項目的類型。</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">
        <paramref name="collectionSelector" /> 所收集之中繼項目的型別。</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">產生的序列之項目型別。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result             of invoking the one-to-many transform function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each             element of &lt;paramref name=&quot;immutableArray&quot; /&gt; and then mapping each of those sequence elements and their             corresponding source element to a result element.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其項目是執行下列動作後所產生的結果：對 <paramref name="immutableArray" /> 的各個項目叫用一對多轉換函式 <paramref name="collectionSelector" />，然後將每個序列項目及其對應的來源項目對應到結果項目。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">根據相等比較子，判斷兩個序列是否相等。</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">要用於比較的陣列。</param>
      <param name="items" vsli:raw="The items to use for comparison.">要用於比較的項目。</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">用來檢查相等的比較子。</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">比較陣列中元素的類型。</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示序列相等，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">根據相等比較子，判斷兩個序列是否相等。</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">要用於比較的陣列。</param>
      <param name="items" vsli:raw="The items to use for comparison.">要用於比較的項目。</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">用來檢查相等的比較子。</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">比較陣列中元素的類型。</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示序列相等，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">根據相等比較子，判斷兩個序列是否相等。</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">要用於比較的陣列。</param>
      <param name="items" vsli:raw="The items to use for comparison.">要用於比較的項目。</param>
      <param name="predicate" vsli:raw="The comparer to use to check for equality.">用來檢查相等的比較子。</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">比較陣列中元素的類型。</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示序列相等，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.">傳回序列的唯一一個元素，如果序列中不是正好一個元素，則擲回例外狀況。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve the element from.">要從其中移除元素的陣列。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The element in the sequence.">序列中的元素</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.">傳回序列中符合指定之條件的唯一一個元素，如果有一個以上這類元素，則擲回例外狀況。</summary>
      <param name="immutableArray" vsli:raw="The immutable array to return a single element from." />
      <param name="predicate" vsli:raw="The function to test whether an element should be returned." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">傳回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of the array, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.">傳回陣列的唯一一個元素，如果序列是空白，則為預設值，如果序列中有一個以上的元素，這個方法就會擲回例外狀況。</summary>
      <param name="immutableArray" vsli:raw="The array.">陣列。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The element in the array, or the default value if the array is empty.">陣列中的元素，如果陣列是空的則為預設值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains more than one element.">
        <paramref name="source" /> 包含多個元素。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.">傳回序列中符合指定之條件的唯一一個元素，如果沒有這類元素，則為預設值，如果有一個以上的元素符合條件，這個方法就會擲回例外狀況。</summary>
      <param name="immutableArray" vsli:raw="The array to get the element from.">要從其中取得元素的陣列。</param>
      <param name="predicate" vsli:raw="The condition the element must satisfy.">元素必須滿足的條件。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The element if it satisfies the specified condition; otherwise the default element.">符合指定之條件的元素，否則為預設值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">超過一個項目符合 <paramref name="predicate" /> 中的條件。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Copies the contents of this array to a mutable array.">將此陣列的內容複製到可變動的陣列。</summary>
      <param name="immutableArray" vsli:raw="The immutable array to copy into a mutable one." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The newly instantiated array.">新的已具現化陣列。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">根據此陣列的內容建立字典。</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">要用來建立字典的陣列。</param>
      <param name="keySelector" vsli:raw="The key selector.">索引鍵選取器。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">索引鍵的類型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">新的已初始化字典。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">根據此陣列的內容建立字典。</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">要用來建立字典的陣列。</param>
      <param name="keySelector" vsli:raw="The key selector.">索引鍵選取器。</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">要初始化字典的比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">索引鍵的類型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">新的已初始化字典。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">根據此陣列的內容建立字典。</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">要用來建立字典的陣列。</param>
      <param name="keySelector" vsli:raw="The key selector.">索引鍵選取器。</param>
      <param name="elementSelector" vsli:raw="The element selector.">元素選取器。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">索引鍵的類型。</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">項目的類型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">新的已初始化字典。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">根據此陣列的內容建立字典。</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">要用來建立字典的陣列。</param>
      <param name="keySelector" vsli:raw="The key selector.">索引鍵選取器。</param>
      <param name="elementSelector" vsli:raw="The element selector.">元素選取器。</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">要初始化字典的比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">索引鍵的類型。</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">項目的類型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">新的已初始化字典。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Filters a sequence of values based on a predicate.">根據述詞來篩選值序列。</summary>
      <param name="immutableArray" vsli:raw="The array to filter.">要篩選的陣列。</param>
      <param name="predicate" vsli:raw="The condition to use for filtering the array content.">要用來篩選陣列內容的條件。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合所包含之元素的類型。</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements that meet the condition.">傳回 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含符合條件的元素。</returns>
    </member>
  </members>
</doc>
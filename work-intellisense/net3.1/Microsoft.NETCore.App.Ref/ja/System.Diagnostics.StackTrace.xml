<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Diagnostics.StackTrace</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.StackFrame">
      <summary>現在のスレッドのコール スタック上での関数呼び出しを表す、<see cref="T:System.Diagnostics.StackFrame" /> に関する情報を提供します。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.StackFrame" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Diagnostics.StackFrame" /> クラスの新しいインスタンスを初期化し、オプションでソース情報をキャプチャします。</summary>
      <param name="fNeedFileInfo">スタック フレームのファイル名、行番号、および列番号をキャプチャする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary>現在のスタック フレーム上のフレームに対応する <see cref="T:System.Diagnostics.StackFrame" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="skipFrames">スキップするスタック上のフレーム数。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary>現在のスタック フレーム上のフレームに対応する <see cref="T:System.Diagnostics.StackFrame" /> クラスの新しいインスタンスを初期化し、オプションでソース情報をキャプチャします。</summary>
      <param name="skipFrames">スキップするスタック上のフレーム数。</param>
      <param name="fNeedFileInfo">スタック フレームのファイル名、行番号、および列番号をキャプチャする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary>指定されたファイル名および行番号だけを含む <see cref="T:System.Diagnostics.StackFrame" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">ファイル名。</param>
      <param name="lineNumber">指定したファイルの行番号。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary>指定されたファイル名、行番号、および列番号だけを含む <see cref="T:System.Diagnostics.StackFrame" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">ファイル名。</param>
      <param name="lineNumber">指定したファイルの行番号。</param>
      <param name="colNumber">指定したファイルの列番号。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary>実行しているコードを格納しているファイルの列番号を取得します。 通常、この情報は実行可能ファイルのデバッグ シンボルから抽出されます。</summary>
      <returns>ファイルの列番号。ファイルの列番号を特定できない場合は 0 (ゼロ)。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary>実行しているコードを格納しているファイルの行番号を取得します。 通常、この情報は実行可能ファイルのデバッグ シンボルから抽出されます。</summary>
      <returns>ファイルの行番号。ファイルの行番号を特定できない場合は 0 (ゼロ)。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary>実行中のコードを格納しているファイル名を取得します。 通常、この情報は実行可能ファイルのデバッグ シンボルから抽出されます。</summary>
      <returns>ファイル名。ファイル名を特定できない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary>実行中のメソッドの MSIL (Microsoft Intermediate Language) コードの先頭からのオフセットを取得します。 このオフセットは Just-In-Time (JIT) コンパイラがデバッグするコードを生成しているかどうかに依存する近似値になることがあります。 このデバッグ情報の生成は、<see cref="T:System.Diagnostics.DebuggableAttribute" /> により制御されます。</summary>
      <returns>実行中のメソッドのための MSIL コードの先頭からのオフセット。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary>フレームを実行しているメソッドを取得します。</summary>
      <returns>フレームを実行しているメソッド。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary>実行中のメソッドのネイティブ JIT コンパイル コードの先頭からのオフセットを取得します。 このデバッグ情報の生成は、<see cref="T:System.Diagnostics.DebuggableAttribute" /> クラスにより制御されます。</summary>
      <returns>実行中のメソッドの JIT コンパイル コードの先頭からのオフセット。</returns>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary>ネイティブまたは MSIL (Microsoft Intermediate Language) オフセットが不明の場合に、<see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> メソッドまたは <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> メソッドから返される値を定義します。 このフィールドは定数です。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary>スタック トレースの読み取り可能な形式を構築します。</summary>
      <returns>スタック トレースの読み取り可能な形式。</returns>
    </member>
    <member name="T:System.Diagnostics.StackFrameExtensions">
      <summary>現在のスレッドのコール スタック上での関数呼び出しを表す、<see cref="T:System.Diagnostics.StackFrame" /> クラスの拡張メソッドを提供します。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)">
      <summary>このスタック フレームが実行しているネイティブ イメージのベース アドレスへのポインターを返します。</summary>
      <param name="stackFrame">スタック フレーム。</param>
      <returns>ネイティブ イメージのベース アドレスへのポインター、または .NET Framework を対象としている場合は <see cref="F:System.IntPtr.Zero" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)">
      <summary>実行されているメソッドのネイティブ コードの先頭へのインターフェイス ポインターを取得します。</summary>
      <param name="stackFrame">スタック フレーム。</param>
      <returns>実行されているメソッドのネイティブ コードの先頭へのインターフェイス ポインター、または .NET Framework を対象としている場合は <see cref="F:System.IntPtr.Zero" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)">
      <summary>実行中のメソッドのための IL コードの先頭からのオフセットを使用できるどうかを示します。</summary>
      <param name="stackFrame">スタック フレーム。</param>
      <returns>オフセットを使用できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)">
      <summary>指定したフレームを実行しているメソッドに関する情報があるかどうかを示します。</summary>
      <param name="stackFrame">スタック フレーム。</param>
      <returns>現在のフレームを実行しているメソッドに関する情報がある場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)">
      <summary>指定したスタック フレームでネイティブ イメージが使用可能かどうかを示します。</summary>
      <param name="stackFrame">スタック フレーム。</param>
      <returns>このスタック フレームのネイティブ イメージが使用できる場合は <see langword="true" />、それ以外は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)">
      <summary>指定したスタック フレームが実行されているコードを格納しているファイルを使用できるかどうかを示します。</summary>
      <param name="stackFrame">スタック フレーム。</param>
      <returns>指定したスタック フレームが実行されているコードがある場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary>スタック トレースを表します。スタック トレースは、順番に並べられた 1 つまたは複数のスタック フレームのコレクションです。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを呼び出し元のフレームから初期化します。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを呼び出し元のフレームから初期化し、オプションでソース情報をキャプチャします。</summary>
      <param name="fNeedFileInfo">ファイル名、行番号、および列番号をキャプチャする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary>単一フレームを格納している <see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="frame">
        <see cref="T:System.Diagnostics.StackTrace" /> オブジェクトに格納するフレーム。</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary>指定した例外オブジェクトを使用して、<see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="e">スタック トレースを構築する基となる例外オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary>指定した例外オブジェクトを使用して <see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを初期化し、オプションでソース情報をキャプチャします。</summary>
      <param name="exception">スタック トレースを構築する基となる例外オブジェクト。</param>
      <param name="needFileInfo">ファイル名、行番号、および列番号をキャプチャする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary>指定した例外オブジェクトを使用して <see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを初期化し、指定した数のフレームをスキップします。</summary>
      <param name="e">スタック トレースを構築する基となる例外オブジェクト。</param>
      <param name="skipFrames">トレースを開始するスタックまでのフレーム数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="skipFrames" /> パラメーターが負の値です。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary>指定した例外オブジェクトを使用して、<see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを初期化し、指定したフレーム数をスキップしたり、必要に応じてソース情報を取得したりできます。</summary>
      <param name="e">スタック トレースを構築する基となる例外オブジェクト。</param>
      <param name="skipFrames">トレースを開始するスタックまでのフレーム数。</param>
      <param name="fNeedFileInfo">ファイル名、行番号、および列番号をキャプチャする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="skipFrames" /> パラメーターが負の値です。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary>呼び出し元のフレームから <see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを初期化し、指定した数のフレームをスキップします。</summary>
      <param name="skipFrames">トレースを開始するスタックまでのフレーム数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="skipFrames" /> パラメーターが負の値です。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary>呼び出し元のフレームから <see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを初期化し、指定した数のフレームをスキップしたり、必要に応じてソース情報を取得したりできます。</summary>
      <param name="skipFrames">トレースを開始するスタックまでのフレーム数。</param>
      <param name="fNeedFileInfo">ファイル名、行番号、および列番号をキャプチャする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="skipFrames" /> パラメーターが負の値です。</exception>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary>スタック トレース内のフレーム数を取得します。</summary>
      <returns>スタック トレースのフレーム数。</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary>指定したスタック フレームを取得します。</summary>
      <param name="index">要求されるスタック フレームのインデックス。</param>
      <returns>指定したスタック フレーム。</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary>現在のスタック トレース内のすべてのスタック フレームのコピーを返します。</summary>
      <returns>スタック トレース内の関数呼び出しを表す型 <see cref="T:System.Diagnostics.StackFrame" /> の配列。</returns>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary>スタック トレースから省略する既定のメソッド数を定義します。 このフィールドは定数です。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary>スタック トレースの読み取り可能な形式を構築します。</summary>
      <returns>スタック トレースの読み取り可能な形式。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder">
      <summary>マネージド コードのシンボル バインダーを表します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader(System.Int32,System.String,System.String)">
      <summary>現在のファイルのシンボル リーダーのインターフェイスを取得します。</summary>
      <param name="importer">メタデータ インポート インターフェイス。</param>
      <param name="filename">リーダー インターフェイスが必要なファイルの名前。</param>
      <param name="searchPath">シンボル ファイルの検索に使用する検索パス。</param>
      <returns>デバッグ シンボルを読み取る <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> インターフェイス。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder1">
      <summary>マネージド コードのシンボル バインダーを表します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder1.GetReader(System.IntPtr,System.String,System.String)">
      <summary>現在のファイルのシンボル リーダーのインターフェイスを取得します。</summary>
      <param name="importer">メタデータ インポート インターフェイスを参照する <see cref="T:System.IntPtr" />。</param>
      <param name="filename">リーダー インターフェイスが必要なファイルの名前。</param>
      <param name="searchPath">シンボル ファイルを見つける場合に使用する検索パス。</param>
      <returns>デバッグ シンボルを読み取る <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> インターフェイス。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocument">
      <summary>シンボル ストアによって参照されるドキュメントを表します。</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.CheckSumAlgorithmId">
      <summary>チェックサム アルゴリズム識別子を取得します。</summary>
      <returns>チェックサム アルゴリズムを識別する GUID。 チェックサムが存在しない場合、この値はすべて 0 になります。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.DocumentType">
      <summary>現在のドキュメントの種類を取得します。</summary>
      <returns>現在のドキュメントの種類。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.FindClosestLine(System.Int32)">
      <summary>現在のドキュメント内でシーケンス ポイントかどうかが明らかではない行を指定した場合は、シーケンス ポイントである行のうち最も近い行が返されます。</summary>
      <param name="line">ドキュメント内で指定された行。</param>
      <returns>指定した行に最も近いシーケンス ポイントである行。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetCheckSum">
      <summary>チェックサムを取得します。</summary>
      <returns>チェックサム。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetSourceRange(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>指定した範囲の埋め込みドキュメント ソースを取得します。</summary>
      <param name="startLine">現在のドキュメントの開始行。</param>
      <param name="startColumn">現在のドキュメントの開始列。</param>
      <param name="endLine">現在のドキュメント内の最終行。</param>
      <param name="endColumn">現在のドキュメントの最終列。</param>
      <returns>指定した範囲のドキュメント ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.HasEmbeddedSource">
      <summary>現在のドキュメントがシンボル ストアに格納されているかどうかをチェックします。</summary>
      <returns>現在のドキュメントがシンボル ストアに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.Language">
      <summary>現在のドキュメントの言語を取得します。</summary>
      <returns>現在のドキュメントの言語。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.LanguageVendor">
      <summary>現在のドキュメントの言語販売元を取得します。</summary>
      <returns>現在のドキュメントの言語販売元。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.SourceLength">
      <summary>埋め込まれたソースの長さをバイト数で取得します。</summary>
      <returns>現在のドキュメントのソース長。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.URL">
      <summary>現在のドキュメントの URL を取得します。</summary>
      <returns>現在のドキュメントの URL。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary>シンボル ストアによって参照されるドキュメントを表します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary>チェックサム情報を設定します。</summary>
      <param name="algorithmId">アルゴリズム ID を表す GUID。</param>
      <param name="checkSum">チェックサム。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary>ドキュメントの生ソースをシンボル ストアに格納します。</summary>
      <param name="source">符号なしバイトで表したドキュメント ソース。</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolMethod">
      <summary>シンボル ストア内のメソッドを表します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace">
      <summary>現在のメソッドの定義先となる名前空間を取得します。</summary>
      <returns>現在のメソッドの定義先となる名前空間。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>指定された位置に対応するメソッド内の MSIL (Microsoft Intermediate Language) オフセットを取得します。</summary>
      <param name="document">オフセットの要求対象となるドキュメント。</param>
      <param name="line">オフセットに対応するドキュメント行。</param>
      <param name="column">オフセットに対応するドキュメント列。</param>
      <returns>指定されたドキュメント内のオフセット。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters">
      <summary>現在のメソッドのパラメーターを取得します。</summary>
      <returns>現在のメソッドのパラメーターの配列。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>指定した位置がこのメソッド内に含まれる場合、MSIL (Microsoft Intermediate Language) の範囲に対応する先頭オフセットと末尾オフセットのペアの配列を取得します。</summary>
      <param name="document">オフセットの要求対象となるドキュメント。</param>
      <param name="line">範囲に対応するドキュメント行。</param>
      <param name="column">範囲に対応するドキュメント列。</param>
      <returns>先頭オフセットと末尾オフセットのペアの配列。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)">
      <summary>メソッド内のオフセットが指定された場合は、(そのオフセットに対する) 最も外側の構文スコープを返します。</summary>
      <param name="offset">構文のスコープのメソッド内のバイト オフセット。</param>
      <returns>メソッド内で指定したバイト オフセットの構文スコープのうち、最も外側のスコープ。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary>現在のメソッドのシーケンス ポイントを取得します。</summary>
      <param name="offsets">メソッドの開始位置からシーケンス ポイントまでの、バイトオフセット配列。</param>
      <param name="documents">シーケンス ポイントが存在するドキュメントの配列。</param>
      <param name="lines">シーケンス ポイントが存在するドキュメントの行の配列。</param>
      <param name="columns">シーケンス ポイントが存在するドキュメントの列の配列。</param>
      <param name="endLines">シーケンス ポイントの末尾位置を示す、ドキュメント内の行の配列。</param>
      <param name="endColumns">シーケンス ポイントの末尾位置を示す、ドキュメント内の列の配列。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])">
      <summary>現在のメソッドのソースの先頭位置と末尾位置を取得します。</summary>
      <param name="docs">先頭ソース ドキュメントと末尾ソース ドキュメント。</param>
      <param name="lines">対応するソース ドキュメントの開始行と最終行。</param>
      <param name="columns">対応するソース ドキュメントの開始列と最終列。</param>
      <returns>位置が定義されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.RootScope">
      <summary>現在のメソッドの構文のルート スコープを取得します。 このスコープはメソッド全体を囲みます。</summary>
      <returns>メソッド全体を囲む構文のルート スコープ。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount">
      <summary>メソッド内のシーケンス ポイントの数を取得します。</summary>
      <returns>メソッド内のシーケンス ポイントの数。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.Token">
      <summary>現在のメソッドのメタデータが格納されている <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> を取得します。</summary>
      <returns>現在のメソッドのメタデータ トークン。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolNamespace">
      <summary>シンボル ストア内の名前空間を表します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetNamespaces">
      <summary>現在の名前空間の子メンバーを取得します。</summary>
      <returns>現在の名前空間の子メンバー。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetVariables">
      <summary>現在の名前空間のグローバル スコープで定義されたすべての変数を取得します。</summary>
      <returns>現在の名前空間のグローバル スコープで定義された変数。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolNamespace.Name">
      <summary>現在の名前空間を取得します。</summary>
      <returns>現在の名前空間。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolReader">
      <summary>マネージド コードのシンボル リーダーを表します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>言語、販売元、および種類で指定したドキュメントを取得します。</summary>
      <param name="url">ドキュメントを識別する URL。</param>
      <param name="language">ドキュメントの言語。 このドキュメントは <see cref="F:System.Guid.Empty" /> として指定できます。</param>
      <param name="languageVendor">ドキュメントの言語の販売元の ID。 このドキュメントは <see cref="F:System.Guid.Empty" /> として指定できます。</param>
      <param name="documentType">ドキュメントの種類。 このドキュメントは <see cref="F:System.Guid.Empty" /> として指定できます。</param>
      <returns>指定されたドキュメント。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocuments">
      <summary>シンボル ストアに定義されたすべてのドキュメントの配列を取得します。</summary>
      <returns>シンボル ストアに定義されたすべてのドキュメントの配列。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetGlobalVariables">
      <summary>モジュール内のグローバル変数をすべて取得します。</summary>
      <returns>モジュール内のすべての変数の配列。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>メソッドの識別子が指定されると、シンボル リーダー メソッド オブジェクトを取得します。</summary>
      <param name="method">メソッドのメタデータ トークン。</param>
      <returns>指定したメソッド識別子のシンボル リーダー メソッド オブジェクト。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)">
      <summary>メソッドの識別子と、そのエディット コンティニュ バージョンが指定されると、シンボル リーダー メソッド オブジェクトを取得します。</summary>
      <param name="method">メソッドのメタデータ トークン。</param>
      <param name="version">メソッドのエディット コンティニュ バージョン。</param>
      <returns>指定したメソッド識別子のシンボル リーダー メソッド オブジェクト。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>ドキュメント内で指定した位置が格納されているシンボル リーダー メソッド オブジェクトを取得します。</summary>
      <param name="document">メソッドが存在するドキュメント。</param>
      <param name="line">ドキュメント内の行の位置。 行は 1 から番号が付けられます。</param>
      <param name="column">ドキュメント内の列の位置。 列は 1 から番号が付けられます。</param>
      <returns>ドキュメント内で指定した位置のリーダー メソッド オブジェクト。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetNamespaces">
      <summary>現在のシンボル ストア内のグローバル スコープに定義された名前空間を取得します。</summary>
      <returns>現在のシンボル ストア内のグローバル スコープに定義された名前空間。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)">
      <summary>属性名が指定されると、属性値を取得します。</summary>
      <param name="parent">属性の要求対象となるオブジェクトのメタデータ トークン。</param>
      <param name="name">属性名。</param>
      <returns>属性の値。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>親が指定されると、ローカル変数以外の変数を取得します。</summary>
      <param name="parent">変数の要求対象となる型のメタデータ トークン。</param>
      <returns>親の変数の配列。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolReader.UserEntryPoint">
      <summary>モジュールのためのユーザー エントリ ポイントとして指定されたメソッドのために、メタデータ トークンがある場合はこれを取得します。</summary>
      <returns>モジュールのためのユーザー エントリ ポイントであるメソッド用のメタデータ トークン。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolScope">
      <summary>
        <see cref="T:System.Diagnostics.SymbolStore.ISymbolMethod" /> 内の構文のスコープを表し、該当するスコープの先頭オフセットおよび末尾オフセットと、そのスコープの子スコープと親スコープへのアクセスを実現します。</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.EndOffset">
      <summary>現在の構文のスコープの終了オフセットを取得します。</summary>
      <returns>現在の構文のスコープの末尾オフセット。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetChildren">
      <summary>現在の構文のスコープの子構文スコープを取得します。</summary>
      <returns>現在の構文のスコープの子構文スコープ。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetLocals">
      <summary>現在の構文のスコープのローカル変数を取得します。</summary>
      <returns>現在の構文のスコープのローカル変数。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces">
      <summary>現在のスコープ内で使用される名前空間を取得します。</summary>
      <returns>現在のスコープ内で使用される名前空間。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Method">
      <summary>現在の構文のスコープが格納されているメソッドを取得します。</summary>
      <returns>現在の構文のスコープが格納されているメソッド。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Parent">
      <summary>現在のスコープの親構文スコープを取得します。</summary>
      <returns>現在のスコープの親構文スコープ。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.StartOffset">
      <summary>現在の構文のスコープの開始オフセットを取得します。</summary>
      <returns>現在の構文のスコープの先頭オフセット。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolVariable">
      <summary>シンボル ストア内の変数を表します。</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField1">
      <summary>変数の最初のアドレスを取得します。</summary>
      <returns>変数の最初のアドレス。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField2">
      <summary>変数の 2 番目のアドレスを取得します。</summary>
      <returns>変数の 2 番目のアドレス。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField3">
      <summary>変数の 3 番目のアドレスを取得します。</summary>
      <returns>変数の 3 番目のアドレス。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressKind">
      <summary>アドレスの型を記述する <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> 値を取得します。</summary>
      <returns>アドレスの型。 <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Attributes">
      <summary>変数の属性を取得します。</summary>
      <returns>変数の属性。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.EndOffset">
      <summary>変数の終了オフセットをその変数のスコープ内から取得します。</summary>
      <returns>変数の終了オフセット。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolVariable.GetSignature">
      <summary>変数シグネチャを取得します。</summary>
      <returns>非透過 BLOB としての変数シグネチャ。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Name">
      <summary>変数の名前を取得します。</summary>
      <returns>変数の名前。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.StartOffset">
      <summary>変数の開始オフセットをその変数のスコープ内から取得します。</summary>
      <returns>変数の開始オフセット。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolWriter">
      <summary>マネージド コードのシンボル ライターを表します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
      <summary>
        <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> を閉じ、シンボルをシンボル ストアにコミットします。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
      <summary>現在のメソッドを閉じます。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace">
      <summary>最後に使用した名前空間を閉じます。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
      <summary>現在の構文のスコープを閉じます。</summary>
      <param name="endOffset">スコープ内の最後の命令以降のポイント。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>ソース ドキュメントを定義します。</summary>
      <param name="url">ドキュメントを識別する URL。</param>
      <param name="language">ドキュメントの言語。 このパラメーターは、<see cref="F:System.Guid.Empty" /> に設定できます。</param>
      <param name="languageVendor">ドキュメントの言語の販売元の ID。 このパラメーターは、<see cref="F:System.Guid.Empty" /> に設定できます。</param>
      <param name="documentType">ドキュメントの種類。 このパラメーターは、<see cref="F:System.Guid.Empty" /> に設定できます。</param>
      <returns>ドキュメントを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>型フィールドまたはグローバル フィールドにフィールドを定義します。</summary>
      <param name="parent">メタデータ型またはメソッド トークン。</param>
      <param name="name">フィールド名。</param>
      <param name="attributes">フィールド属性のビットごとの組み合わせ。</param>
      <param name="signature">フィールド シグネチャ。</param>
      <param name="addrKind">
        <paramref name="addr1" /> および <paramref name="addr2" /> のアドレス型。</param>
      <param name="addr1">フィールド指定の最初のアドレス。</param>
      <param name="addr2">フィールド指定の 2 番目のアドレス。</param>
      <param name="addr3">フィールド指定の 3 番目のアドレス。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>グローバル変数を 1 つ定義します。</summary>
      <param name="name">グローバル変数名。</param>
      <param name="attributes">グローバル変数属性のビットごとの組み合わせ。</param>
      <param name="signature">グローバル変数シグネチャ。</param>
      <param name="addrKind">
        <paramref name="addr1" />、<paramref name="addr2" />、および <paramref name="addr3" /> のアドレス型。</param>
      <param name="addr1">グローバル変数指定の最初のアドレス。</param>
      <param name="addr2">グローバル変数指定の 2 番目のアドレス。</param>
      <param name="addr3">グローバル変数指定の 3 番目のアドレス。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>現在の構文のスコープの変数を 1 つ定義します。</summary>
      <param name="name">ローカル変数名。</param>
      <param name="attributes">ローカル変数属性のビットごとの組み合わせ。</param>
      <param name="signature">ローカル変数シグネチャ。</param>
      <param name="addrKind">
        <paramref name="addr1" />、<paramref name="addr2" />、および <paramref name="addr3" /> のアドレス型。</param>
      <param name="addr1">ローカル変数指定の最初のアドレス。</param>
      <param name="addr2">ローカル変数指定の 2 番目のアドレス。</param>
      <param name="addr3">ローカル変数指定の 3 番目のアドレス。</param>
      <param name="startOffset">変数の先頭オフセット。 このパラメーターが 0 の場合、パラメーターは無視され、変数はスコープ全体で定義されます。 パラメーターが 0 以外の場合、変数は現在のスコープのオフセット内となります。</param>
      <param name="endOffset">変数の末尾オフセット。 このパラメーターが 0 の場合、パラメーターは無視され、変数はスコープ全体で定義されます。 パラメーターが 0 以外の場合、変数は現在のスコープのオフセット内となります。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>現在のメソッドのパラメーターを 1 つ定義します。 各パラメーターの型は、メソッドのシグネチャ内におけるその位置から取得されます。</summary>
      <param name="name">パラメーターの名前。</param>
      <param name="attributes">パラメーター属性のビットごとの組み合わせ。</param>
      <param name="sequence">パラメーター シグネチャ。</param>
      <param name="addrKind">
        <paramref name="addr1" />、<paramref name="addr2" />、および <paramref name="addr3" /> のアドレス型。</param>
      <param name="addr1">パラメーター指定の最初のアドレス。</param>
      <param name="addr2">パラメーター指定の 2 番目のアドレス。</param>
      <param name="addr3">パラメーター指定の 3 番目のアドレス。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary>現在のメソッド内のシーケンス ポイントのグループを定義します。</summary>
      <param name="document">シーケンス ポイントを定義するドキュメント。</param>
      <param name="offsets">メソッドの先頭から計測したシーケンス ポイントのオフセット。</param>
      <param name="lines">シーケンス ポイントのドキュメント行。</param>
      <param name="columns">シーケンス ポイントのドキュメント位置。</param>
      <param name="endLines">シーケンス ポイントに対するドキュメント内の末尾行。</param>
      <param name="endColumns">シーケンス ポイントに対するドキュメント内の末尾位置。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
      <summary>ライターに関連付けるメタデータ エミッタ インターフェイスを設定します。</summary>
      <param name="emitter">メタデータ エミッタ インターフェイス。</param>
      <param name="filename">デバッグ シンボルが書き込まれるファイル名。 ライターによって、ファイル名が必要なものと必要でないものがあります。 ファイル名を使用しないライターに対してファイル名を指定した場合、このパラメーターは無視されます。</param>
      <param name="fFullBuild">
        <see langword="true" /> はこれがフル リビルドであることを示し、<see langword="false" /> はこれがインクリメンタル コンパイルであることを示します。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>シンボル情報を配置する対象のメソッドを開きます。</summary>
      <param name="method">開くメソッドのメタデータ トークン。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
      <summary>新しい名前空間を開きます。</summary>
      <param name="name">新しい名前空間の名前。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
      <summary>現在のメソッドの構文の新しいスコープを開きます。</summary>
      <param name="startOffset">メソッドの先頭から構文のスコープの最初の命令までのオフセット (バイト単位)。</param>
      <returns>スコープの先頭オフセットおよび末尾オフセットを後で定義するために、<see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" /> で使用できる非透過スコープ識別子。 この場合、<see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /> と <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" /> に渡したオフセットは無視されます。 スコープ識別子は現在のメソッド内に限り有効です。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
      <summary>ソース ファイル内にメソッドの実際の先頭と末尾を指定します。 メソッドのエクステントを、そのメソッド内に存在するシーケンス ポイントに関係なく指定するには <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" /> を使用します。</summary>
      <param name="startDoc">開始位置を含むドキュメント。</param>
      <param name="startLine">先頭行番号。</param>
      <param name="startColumn">先頭列。</param>
      <param name="endDoc">終了位置を含むドキュメント。</param>
      <param name="endLine">末尾行番号。</param>
      <param name="endColumn">末尾列番号。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
      <summary>指定した構文のスコープのオフセット範囲を定義します。</summary>
      <param name="scopeID">構文のスコープの識別子。</param>
      <param name="startOffset">構文のスコープの先頭のバイト オフセット。</param>
      <param name="endOffset">構文のスコープの末尾のバイト オフセット。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
      <summary>属性名と属性値が指定されると、属性を定義します。</summary>
      <param name="parent">属性を定義するメタデータ トークン。</param>
      <param name="name">属性名。</param>
      <param name="data">属性値。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
      <summary>マネージド <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> がシンボルを出力するときに使用する、基になる <see langword="ISymUnmanagedWriter" /> (対応するアンマネージド インターフェイス) を設定します。</summary>
      <param name="underlyingWriter">基になるライターを表すコードのポインター。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>ユーザー定義のメソッドを、現在のモジュールのエントリ ポイントとして識別します。</summary>
      <param name="entryMethod">ユーザー エントリ ポイントであるメソッドのメタデータ トークン。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
      <summary>指定した完全修飾名前空間名を、開かれている構文スコープ内で使用することを指定します。</summary>
      <param name="fullName">名前空間の完全修飾名。</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymAddressKind">
      <summary>ローカル変数、パラメーター、およびフィールドのアドレス型を <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /> インターフェイスの <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" />、<see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" />、および <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> の各メソッドに指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.BitField">
      <summary>ビット フィールド。 <paramref name="addr1" /> パラメーターはフィールドが開始する位置、<paramref name="addr2" /> パラメーターはフィールド長を示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.ILOffset">
      <summary>MSIL (Microsoft Intermediate Language) オフセット。 <paramref name="addr1" /> パラメーターは MSIL ローカル変数またはパラメーター インデックスを示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeOffset">
      <summary>ネイティブ オフセット。 <paramref name="addr1" /> パラメーターは、親の先頭からのオフセットを示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegister">
      <summary>ネイティブ レジスタ アドレス。 <paramref name="addr1" /> パラメーターは変数が格納されるレジスタを示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRegister">
      <summary>レジスタの相対アドレス。 <paramref name="addr1" /> パラメーターは下位レジスタを、<paramref name="addr2" /> パラメーターは上位レジスタを示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRelative">
      <summary>レジスタの相対アドレス。 <paramref name="addr1" /> パラメーターはレジスタを、<paramref name="addr2" /> パラメーターはオフセットを示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterStack">
      <summary>レジスタの相対アドレス。 <paramref name="addr1" /> パラメーターは下位レジスタを、<paramref name="addr2" /> パラメーターはスタック レジスタを、<paramref name="addr3" /> パラメーターはスタック ポインターから値の上位へのオフセットを示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRVA">
      <summary>ネイティブ RVA (Relative Virtual Address)。 <paramref name="addr1" /> パラメーターはモジュール内の RVA を示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeSectionOffset">
      <summary>ネイティブ セクション オフセット。 <paramref name="addr1" /> パラメーターはセクションを、<paramref name="addr2" /> パラメーターはオフセットを示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeStackRegister">
      <summary>レジスタの相対アドレス。 <paramref name="addr1" /> パラメーターはスタック レジスタを、<paramref name="addr2" /> パラメーターはスタック ポインターから値の下位へのオフセットを、<paramref name="addr3" /> パラメーターは上位レジスタを示します。</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymbolToken">
      <summary>
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 構造体は、シンボル情報を表すトークンのオブジェクト表現です。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)">
      <summary>値が指定されると、<see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="val">トークンで使用される値。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>
        <paramref name="obj" /> がこのインスタンスと等しいかどうかを判断します。</summary>
      <param name="obj">確認対象の <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />。</param>
      <returns>
        <see langword="true" /> がこのインスタンスと等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)">
      <summary>
        <paramref name="obj" /> が <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> のインスタンスで、このインスタンスと等しいかどうかを判断します。</summary>
      <param name="obj">確認する対象のオブジェクト。</param>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> のインスタンスで、このインスタンスと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetHashCode">
      <summary>現在のトークンのハッシュ コードを生成します。</summary>
      <returns>現在のトークンのハッシュ コード。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetToken">
      <summary>現在のトークンの値を取得します。</summary>
      <returns>現在のトークンの値。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> の 2 つのオブジェクトが等しいかどうかを示す値を返します。</summary>
      <param name="a">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 構造体。</param>
      <param name="b">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 構造体。</param>
      <returns>
        <see langword="true" /> と <paramref name="a" /> が等しい場合は <paramref name="b" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> の 2 つのオブジェクトが等しくないかどうかを示す値を返します。</summary>
      <param name="a">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 構造体。</param>
      <param name="b">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 構造体。</param>
      <returns>
        <paramref name="a" /> と <paramref name="b" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymDocumentType">
      <summary>シンボル ストアで使用するドキュメントの種類のパブリック GUID を格納します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymDocumentType.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.SymbolStore.SymDocumentType" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymDocumentType.Text">
      <summary>シンボル ストアで使用するドキュメントの種類の GUID を指定します。</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageType">
      <summary>シンボル ストアで使用する言語タイプのパブリック GUID を格納します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageType.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.SymbolStore.SymLanguageType" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Basic">
      <summary>シンボル ストアで使用する Basic 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.C">
      <summary>シンボル ストアで使用する C 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Cobol">
      <summary>シンボル ストアで使用する Cobol 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CPlusPlus">
      <summary>シンボル ストアで使用する C++ 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CSharp">
      <summary>シンボル ストアで使用する C# 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.ILAssembly">
      <summary>シンボル ストアで使用する ILAssembly 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Java">
      <summary>シンボル ストアで使用する Java 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.JScript">
      <summary>シンボル ストアで使用する JScript 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.MCPlusPlus">
      <summary>シンボル ストアで使用する C++ 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Pascal">
      <summary>シンボル ストアで使用する Pascal 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.SMC">
      <summary>シンボル ストアで使用する SMC 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageVendor">
      <summary>シンボル ストアで使用する言語販売元のパブリック GUID を格納します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageVendor.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.SymbolStore.SymLanguageVendor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageVendor.Microsoft">
      <summary>Microsoft 言語販売元の GUID を指定します。</summary>
    </member>
  </members>
</doc>
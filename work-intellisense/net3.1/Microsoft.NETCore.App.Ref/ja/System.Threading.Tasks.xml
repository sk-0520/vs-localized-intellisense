<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks</name>
  </assembly>
  <members>
    <member name="T:System.OperationCanceledException">
      <summary>この例外は、スレッドによって実行されていた操作が取り消されたときにそのスレッドでスローされます。</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor">
      <summary>システム提供のエラー メッセージを使用して、<see cref="T:System.OperationCanceledException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.OperationCanceledException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.OperationCanceledException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明する <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.OperationCanceledException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>指定したエラー メッセージ、この例外の原因である内部例外への参照、およびキャンセル トークンを使用して、<see cref="T:System.OperationCanceledException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
      <param name="token">取り消された操作に関連付けられているキャンセル トークン。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Threading.CancellationToken)">
      <summary>指定したエラー メッセージとキャンセル トークンを使用して、<see cref="T:System.OperationCanceledException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="token">取り消された操作に関連付けられているキャンセル トークン。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Threading.CancellationToken)">
      <summary>キャンセル トークンを使用して、<see cref="T:System.OperationCanceledException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="token">取り消された操作に関連付けられているキャンセル トークン。</param>
    </member>
    <member name="P:System.OperationCanceledException.CancellationToken">
      <summary>取り消された操作に関連付けられているトークンを取得します。</summary>
      <returns>取り消された操作に関連付けられているトークンまたは既定のトークン。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder">
      <summary>非同期反復子のビルダーを表します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>指定された awaiter が完了したときに次の操作に進むようにステート マシンをスケジュールします。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">ステート マシン。</param>
      <typeparam name="TAwaiter">awaiter の型。</typeparam>
      <typeparam name="TStateMachine">ステート マシンの型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>指定された awaiter が完了したときに次の操作に進むようにステート マシンをスケジュールします。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">ステート マシン。</param>
      <typeparam name="TAwaiter">awaiter の型。</typeparam>
      <typeparam name="TStateMachine">ステート マシンの型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Complete">
      <summary>正常に完了したかどうかにかかわらず、イテレーションを完了中としてマークします。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Create">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder" /> 構造体のインスタンスを作成します。</summary>
      <returns>初期化されたインスタンス。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.MoveNext``1(``0@)">
      <summary>
        <see cref="T:System.Threading.ExecutionContext" /> の保護中に、ステート マシンで <see cref="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext" /> を呼び出します。</summary>
      <param name="stateMachine">参照により渡されたステート マシン インスタンス。</param>
      <typeparam name="TStateMachine">ステート マシンの型。</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder">
      <summary>タスクを返す非同期メソッドのビルダーを表します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>指定された awaiter が完了したときに次の操作に進むようにステート マシンをスケジュールします。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">ステート マシン。</param>
      <typeparam name="TAwaiter">awaiter の型。</typeparam>
      <typeparam name="TStateMachine">ステート マシンの型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>指定された awaiter が完了したときに次の操作に進むようにステート マシンをスケジュールします。 このメソッドは、部分的に信頼されているコードから呼び出すことができます。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">ステート マシン。</param>
      <typeparam name="TAwaiter">awaiter の型。</typeparam>
      <typeparam name="TStateMachine">ステート マシンの型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Create">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder" /> クラスのインスタンスを作成します。</summary>
      <returns>ビルダーの新しいインスタンス。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)">
      <summary>タスクを失敗としてマークし、指定された例外をタスクにバインドします。</summary>
      <param name="exception">タスクにバインドする例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">タスクは既に完了しています。

または -

ビルダーが初期化されていません。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult">
      <summary>タスクを正常な完了としてマークします。</summary>
      <exception cref="T:System.InvalidOperationException">タスクは既に完了しています。

または -

ビルダーが初期化されていません。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>指定したステート マシンにビルダーを関連付けます。</summary>
      <param name="stateMachine">ビルダーに関連付けるステート マシン インスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">ステート マシンは、前に設定されました。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start``1(``0@)">
      <summary>ステート マシンが関連付けられているビルダーの実行を開始します。</summary>
      <param name="stateMachine">参照により渡されたステート マシン インスタンス。</param>
      <typeparam name="TStateMachine">ステート マシンの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Task">
      <summary>このビルダーのタスクを取得します。</summary>
      <returns>このビルダーのタスク。</returns>
      <exception cref="T:System.InvalidOperationException">ビルダーが初期化されていません。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1">
      <summary>タスクを返す非同期メソッドのビルダーを表し、結果のパラメーターを指定します。</summary>
      <typeparam name="TResult">タスクを完了するために使用する結果。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
      <summary>指定された awaiter が完了したときに次の操作に進むようにステート マシンをスケジュールします。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">ステート マシン。</param>
      <typeparam name="TAwaiter">awaiter の型。</typeparam>
      <typeparam name="TStateMachine">ステート マシンの型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>指定された awaiter が完了したときに次の操作に進むようにステート マシンをスケジュールします。 このメソッドは、部分的に信頼されているコードから呼び出すことができます。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">ステート マシン。</param>
      <typeparam name="TAwaiter">awaiter の型。</typeparam>
      <typeparam name="TStateMachine">ステート マシンの型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1" /> クラスのインスタンスを作成します。</summary>
      <returns>ビルダーの新しいインスタンス。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
      <summary>タスクを失敗としてマークし、指定された例外をタスクにバインドします。</summary>
      <param name="exception">タスクにバインドする例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">タスクは既に完了しています。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)">
      <summary>タスクを正常な完了としてマークします。</summary>
      <param name="result">タスクを完了するために使用する結果。</param>
      <exception cref="T:System.InvalidOperationException">タスクは既に完了しています。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>指定したステート マシンにビルダーを関連付けます。</summary>
      <param name="stateMachine">ビルダーに関連付けるステート マシン インスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">ステート マシンは、前に設定されました。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)">
      <summary>ステート マシンが関連付けられているビルダーの実行を開始します。</summary>
      <param name="stateMachine">参照により渡されたステート マシン インスタンス。</param>
      <typeparam name="TStateMachine">ステート マシンの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task">
      <summary>このビルダーのタスクを取得します。</summary>
      <returns>このビルダーのタスク。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
      <summary>値を返さない非同期メソッドのビルダーを表します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>指定された awaiter が完了したときに次の操作に進むようにステート マシンをスケジュールします。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">ステート マシン。</param>
      <typeparam name="TAwaiter">awaiter の型。</typeparam>
      <typeparam name="TStateMachine">ステート マシンの型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>指定された awaiter が完了したときに次の操作に進むようにステート マシンをスケジュールします。 このメソッドは、部分的に信頼されているコードから呼び出すことができます。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">ステート マシン。</param>
      <typeparam name="TAwaiter">awaiter の型。</typeparam>
      <typeparam name="TStateMachine">ステート マシンの型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder" /> クラスのインスタンスを作成します。</summary>
      <returns>ビルダーの新しいインスタンス。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
      <summary>メソッド ビルダーに例外をバインドします。</summary>
      <param name="exception">バインドする例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">ビルダーが初期化されていません。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
      <summary>メソッド ビルダーを正常に完了済みとしてマークします。</summary>
      <exception cref="T:System.InvalidOperationException">ビルダーが初期化されていません。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>指定したステート マシンにビルダーを関連付けます。</summary>
      <param name="stateMachine">ビルダーに関連付けるステート マシン インスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">ステート マシンは、前に設定されました。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
      <summary>ステート マシンが関連付けられているビルダーの実行を開始します。</summary>
      <param name="stateMachine">参照により渡されたステート マシン インスタンス。</param>
      <typeparam name="TStateMachine">ステート マシンの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable">
      <summary>
        <see cref="T:System.IAsyncDisposable" /> での待機方法の公正に利用できる型を提供します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredAsyncDisposable.DisposeAsync">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable" /> によって使用されているアンマネージ リソースを非同期に解放します。</summary>
      <returns>非同期の破棄操作を表すタスク。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1">
      <summary>取り消し可能なイテレーションと待機の構成を可能にする待機可能非同期の列挙可能を提供します。</summary>
      <typeparam name="T">列挙する値の型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)">
      <summary>非同期イテレーションから返されるタスク上での待機方法を構成します。</summary>
      <param name="continueOnCapturedContext">キャプチャして現在のコンテキストにマーシャリングするには、<see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>構成された列挙可能。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator">
      <summary>取り消し可能なイテレーションと待機の構成を可能にする待機可能非同期列挙子を提供します。</summary>
      <typeparam name="T">列挙する値の型。</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.Current">
      <summary>列挙子の現在位置にあるコレクション内の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.DisposeAsync">
      <summary>アンマネージ リソースの非同期の解放およびリセットに関連付けられているアプリケーション定義のタスクを実行します。</summary>
      <returns>非同期の破棄操作を表すタスク。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.MoveNextAsync">
      <summary>列挙子をコレクションの次の要素に非同期に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />、列挙子がコレクションの末尾を越えた場合は <see langword="false" /> の結果で完了する <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>取り消し可能なイテレーションと構成済みの待機を可能にするコレクションを介して、非同期に反復する列挙体を返します。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1" /> クラスの列挙子。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)">
      <summary>反復処理するときに、<see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> に渡す <see cref="T:System.Threading.CancellationToken" /> を設定します。</summary>
      <param name="cancellationToken">使用する取り消しトークン。</param>
      <returns>構成された列挙可能。</returns>
    </member>
    <member name="T:System.Threading.CancellationTokenSource">
      <summary>取り消す必要があることを <see cref="T:System.Threading.CancellationToken" /> に通知します。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor">
      <summary>
        <see cref="T:System.Threading.CancellationTokenSource" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
      <summary>指定した遅延 (ミリ秒単位) が経過した後にキャンセルされる <see cref="T:System.Threading.CancellationTokenSource" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="millisecondsDelay">この <see cref="T:System.Threading.CancellationTokenSource" /> を取り消すまで待機する時間間隔 (ミリ秒単位)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" /> が -1 未満です。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
      <summary>指定した時間間隔の後にキャンセルされる <see cref="T:System.Threading.CancellationTokenSource" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="delay">この <see cref="T:System.Threading.CancellationTokenSource" /> を取り消すまで待機する時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" />.<see cref="P:System.TimeSpan.TotalMilliseconds" /> が -1 未満か、または <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel">
      <summary>キャンセル要求を伝えます。</summary>
      <exception cref="T:System.ObjectDisposedException">この <see cref="T:System.Threading.CancellationTokenSource" /> は破棄されています。</exception>
      <exception cref="T:System.AggregateException">関連付けられた<see cref="T:System.Threading.CancellationToken" /> に登録されたコールバックがスローしたすべての例外を含む集計例外。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
      <summary>キャンセル要求を伝え、例外が発生した場合に残りのコールバックとキャンセル可能な操作を続けるかどうかを指定します。</summary>
      <param name="throwOnFirstException">例外を直ちに伝達する場合は <see langword="true" /> 。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ObjectDisposedException">この <see cref="T:System.Threading.CancellationTokenSource" /> は破棄されています。</exception>
      <exception cref="T:System.AggregateException">関連付けられた<see cref="T:System.Threading.CancellationToken" /> に登録されたコールバックがスローしたすべての例外を含む集計例外。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
      <summary>指定したミリ秒数の経過後に、この <see cref="T:System.Threading.CancellationTokenSource" /> のキャンセル操作を設定します。</summary>
      <param name="millisecondsDelay">この <see cref="T:System.Threading.CancellationTokenSource" /> を取り消す前に待機する時間。</param>
      <exception cref="T:System.ObjectDisposedException">この <see cref="T:System.Threading.CancellationTokenSource" /> が破棄されているきにスローされる例外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" /> が -1 より小さいときにスローされる例外。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
      <summary>指定した時間間隔の経過後に、この <see cref="T:System.Threading.CancellationTokenSource" /> のキャンセル操作を設定します。</summary>
      <param name="delay">この <see cref="T:System.Threading.CancellationTokenSource" /> を取り消す前に待機する時間。</param>
      <exception cref="T:System.ObjectDisposedException">この <see cref="T:System.Threading.CancellationTokenSource" /> が破棄されているきにスローされる例外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" /> が -1 より小さいか、Int32.MaxValue より大きい場合にスローされる例外。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>いずれかのソース トークンが取り消された状態であるときに、取り消された状態になる <see cref="T:System.Threading.CancellationTokenSource" /> を作成します。</summary>
      <param name="token1">観察する最初のキャンセル トークン。</param>
      <param name="token2">観察する 2 番目のキャンセル トークン。</param>
      <returns>ソース トークンにリンクされている <see cref="T:System.Threading.CancellationTokenSource" />。</returns>
      <exception cref="T:System.ObjectDisposedException">ソース トークンのいずれかに関連付けられている <see cref="T:System.Threading.CancellationTokenSource" /> は破棄されました。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
      <summary>指定された配列のいずれかのソース トークンが取り消された状態であるときに、取り消された状態になる <see cref="T:System.Threading.CancellationTokenSource" /> を作成します。</summary>
      <param name="tokens">観察するためのキャンセル トークン インスタンスを含む配列。</param>
      <returns>ソース トークンにリンクされている <see cref="T:System.Threading.CancellationTokenSource" />。</returns>
      <exception cref="T:System.ObjectDisposedException">ソース トークンのいずれかに関連付けられている <see cref="T:System.Threading.CancellationTokenSource" /> は破棄されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokens" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tokens" /> が空です。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose">
      <summary>
        <see cref="T:System.Threading.CancellationTokenSource" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Threading.CancellationTokenSource" /> クラスによって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
      <summary>この <see cref="T:System.Threading.CancellationTokenSource" /> に対して取り消しが要求されているかどうかを取得します。</summary>
      <returns>この <see langword="true" /> に対して取り消しが要求されている場合は <see cref="T:System.Threading.CancellationTokenSource" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.Token">
      <summary>この <see cref="T:System.Threading.CancellationToken" /> に関連付けられている <see cref="T:System.Threading.CancellationTokenSource" /> を取得します。</summary>
      <returns>この <see cref="T:System.Threading.CancellationToken" /> に関連付けられている <see cref="T:System.Threading.CancellationTokenSource" />。</returns>
      <exception cref="T:System.ObjectDisposedException">トークンのソースは破棄されました。</exception>
    </member>
    <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair">
      <summary>同時実行タスクは同時に実行し、排他的なタスク同時に実行しないように、タスクの実行を調整するタスク スケジューラを提供します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor">
      <summary>
        <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>指定したスケジューラをターゲットとする <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="taskScheduler">このペアを実行するターゲット スケジューラ。</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
      <summary>最大コンカレンシー レベルを使用して、指定したスケジューラを対象とする <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="taskScheduler">このペアを実行するターゲット スケジューラ。</param>
      <param name="maxConcurrencyLevel">同時実行するタスクの最大数。</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)">
      <summary>まとめて処理される可能性のあるスケジュールされたタスクの最大コンカレンシー レベルおよび最大数を使用して、指定したスケジューラを対象とする <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="taskScheduler">このペアを実行するターゲット スケジューラ。</param>
      <param name="maxConcurrencyLevel">同時実行するタスクの最大数。</param>
      <param name="maxItemsPerTask">ペアにより使用される、基となるスケジュールされたタスクごとに、処理されるタスクの最大数。</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete">
      <summary>これ以上タスクを受け入れないことをスケジューラ ペアに通知します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion">
      <summary>スケジューラが処理を完了すると完了する <see cref="T:System.Threading.Tasks.Task" /> を取得します。</summary>
      <returns>スケジューラが処理を終了したときに完了する非同期操作。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler">
      <summary>このペアの他のタスクと同時に実行できるタスクをこのペアにスケジュールするために使用できる <see cref="T:System.Threading.Tasks.TaskScheduler" /> を取得します。</summary>
      <returns>タスクを同時にスケジュールするために使用できるオブジェクト。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler">
      <summary>このペアの他のタスクとは排他的に実行する必要があるタスクをこのペアにスケジュールするために使用できる <see cref="T:System.Threading.Tasks.TaskScheduler" /> を取得します。</summary>
      <returns>他のタスクと同時に実行されないタスクをスケジュールするために使用できるオブジェクト。</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskAsyncEnumerableExtensions">
      <summary>非同期の列挙可能および破棄可能なタスク関連の動作を構成するために、静的メソッドのセットを提供します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait(System.IAsyncDisposable,System.Boolean)">
      <summary>非同期の破棄可能から返されるタスク上での待機がどのように実行されるかを構成します。</summary>
      <param name="source">非同期の破棄可能なソース。</param>
      <param name="continueOnCapturedContext">キャプチャして現在のコンテキストにマーシャリングするには、<see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>構成された非同期の破棄可能。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean)">
      <summary>非同期イテレーションから返されるタスク上での待機がどのように実行されるかを構成します。</summary>
      <param name="source">反復処理する列挙可能なソース。</param>
      <param name="continueOnCapturedContext">キャプチャして現在のコンテキストにマーシャリングするには、<see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <typeparam name="T">反復処理するオブジェクトの型。</typeparam>
      <returns>構成された列挙可能。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
      <summary>反復処理するときに、<see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> に渡す <see cref="T:System.Threading.CancellationToken" /> を設定します。</summary>
      <param name="source">反復処理する列挙可能なソース。</param>
      <param name="cancellationToken">使用する取り消しトークン。</param>
      <typeparam name="T">反復処理するオブジェクトの型。</typeparam>
      <returns>構成された列挙可能。</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCanceledException">
      <summary>タスクの取り消しを通知するために使用される例外を表します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor">
      <summary>エラーを説明するシステム提供のメッセージを使用して、<see cref="T:System.Threading.Tasks.TaskCanceledException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Threading.Tasks.TaskCanceledException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String)">
      <summary>エラーを説明する指定したメッセージを使用して、<see cref="T:System.Threading.Tasks.TaskCanceledException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Threading.Tasks.TaskCanceledException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>指定したエラー メッセージ、この例外の原因である内部例外への参照、取り消しをトリガーした <see cref="T:System.Threading.CancellationToken" /> を使用して、<see cref="T:System.Threading.Tasks.TaskCanceledException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因となった例外。</param>
      <param name="token">取り消しをトリガーする取り消しトークン。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Threading.Tasks.Task)">
      <summary>取り消された <see cref="T:System.Threading.Tasks.TaskCanceledException" /> への参照を使用して、<see cref="T:System.Threading.Tasks.Task" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="task">取り消されたタスク。</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskCanceledException.Task">
      <summary>この例外に関連付けられているタスクを取得します。</summary>
      <returns>この例外に関連付けられている <see cref="T:System.Threading.Tasks.Task" /> への参照。</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCompletionSource`1">
      <summary>デリゲートに関連付けられていない <see cref="T:System.Threading.Tasks.Task`1" /> のプロデューサー側を表し、<see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> プロパティを通じてコンシューマー側へのアクセスを提供します。</summary>
      <typeparam name="TResult">この <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />に関連付けられている結果値の型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
      <summary>
        <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> を作成します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
      <summary>指定された状態を使用して、<see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> を作成します。</summary>
      <param name="state">基になる <see cref="T:System.Threading.Tasks.Task`1" /> の AsyncState として使用する状態。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>指定された状態とオプションを使用して、<see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> を作成します。</summary>
      <param name="state">基になる <see cref="T:System.Threading.Tasks.Task`1" /> の AsyncState として使用する状態。</param>
      <param name="creationOptions">基になる <see cref="T:System.Threading.Tasks.Task`1" /> の作成時に使用するオプション。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> は、<see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> で使用には無効なオプションを表します。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
      <summary>指定されたオプションを使用して、<see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> を作成します。</summary>
      <param name="creationOptions">基になる <see cref="T:System.Threading.Tasks.Task`1" /> の作成時に使用するオプション。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> は、<see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> で使用には無効なオプションを表します。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
      <summary>基になる <see cref="T:System.Threading.Tasks.Task`1" /> を <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 状態へ遷移させます。</summary>
      <exception cref="T:System.InvalidOperationException">基になる <see cref="T:System.Threading.Tasks.Task`1" /> は既に 3 つの最終的な状態、<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />、<see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> のいずれかにあります。または、基になる <see cref="T:System.Threading.Tasks.Task`1" /> が既に破棄されています。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> が破棄されました。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>基になる <see cref="T:System.Threading.Tasks.Task`1" /> を <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態へ移行し、例外オブジェクトのコレクションをそれにバインドします。</summary>
      <param name="exceptions">この <see cref="T:System.Threading.Tasks.Task`1" /> に関連付ける例外のコレクション。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> が破棄されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> 引数が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exceptions" /> には 1 つまたは複数の null 要素があります。</exception>
      <exception cref="T:System.InvalidOperationException">基になる <see cref="T:System.Threading.Tasks.Task`1" /> が既に次の 3 つの最終状態のいずれかです: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />、または <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
      <summary>基になる <see cref="T:System.Threading.Tasks.Task`1" /> を <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態に移行させ、それを指定の例外にバインドします。</summary>
      <param name="exception">この <see cref="T:System.Threading.Tasks.Task`1" /> に関連付ける例外。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> が破棄されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 引数が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">基になる <see cref="T:System.Threading.Tasks.Task`1" /> が既に次の 3 つの最終状態のいずれかです: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />、または <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
      <summary>基になる <see cref="T:System.Threading.Tasks.Task`1" /> を <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> 状態へ遷移させます。</summary>
      <param name="result">この <see cref="T:System.Threading.Tasks.Task`1" /> に関連付ける結果値。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> が破棄されました。</exception>
      <exception cref="T:System.InvalidOperationException">基になる <see cref="T:System.Threading.Tasks.Task`1" /> が既に次の 3 つの最終状態のいずれかです: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />、または <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
      <summary>この <see cref="T:System.Threading.Tasks.Task`1" /> によって作成される <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> を取得します。</summary>
      <returns>この <see cref="T:System.Threading.Tasks.Task`1" /> によって作成される <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> を返します。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
      <summary>基になる <see cref="T:System.Threading.Tasks.Task`1" /> の <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 状態への遷移を試みます。</summary>
      <returns>操作が正常に終了した場合は <see langword="true" />、操作が失敗した場合またはオブジェクトが既に破棄されている場合は false。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> が破棄されました。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
      <summary>基になる <see cref="T:System.Threading.Tasks.Task`1" /> の <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 状態への遷移を試みるとともに、キャンセル トークンをキャンセルされたタスクに格納できるようにします。</summary>
      <param name="cancellationToken">キャンセル トークン。</param>
      <returns>操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>基になる <see cref="T:System.Threading.Tasks.Task`1" /> の <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態への移行を試み、例外オブジェクトのコレクションをそれにバインドします。</summary>
      <param name="exceptions">この <see cref="T:System.Threading.Tasks.Task`1" /> に関連付ける例外のコレクション。</param>
      <returns>操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> が破棄されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> 引数が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exceptions" /> には 1 つまたは複数の null 要素があります。

または -
<paramref name="exceptions" /> コレクションが空です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
      <summary>基になる <see cref="T:System.Threading.Tasks.Task`1" /> の <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態への移行を試み、それを指定の例外にバインドします。</summary>
      <param name="exception">この <see cref="T:System.Threading.Tasks.Task`1" /> に関連付ける例外。</param>
      <returns>操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> が破棄されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 引数が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
      <summary>基になる <see cref="T:System.Threading.Tasks.Task`1" /> の <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> 状態への遷移を試みます。</summary>
      <param name="result">この <see cref="T:System.Threading.Tasks.Task`1" /> に関連付ける結果値。</param>
      <returns>操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> が破棄されました。</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>特定の種類の <see cref="T:System.Threading.Tasks.Task" /> インスタンスを操作する静的 (Visual Basic の場合は共有) メソッドのセットを提供します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>
        <see cref="T:System.Threading.Tasks.Task" /> の非同期操作を表すプロキシ <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" /> を作成します。</summary>
      <param name="task">ラップを解除する <see langword="Task&lt;Task&gt;" /> (C#) または <see langword="Task (Of Task)" /> (Visual Basic)。</param>
      <returns>指定された <see langword="System.Threading.Tasks.Task(Of Task)" /> の非同期操作を表すタスク。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 引数が null の場合にスローされる例外。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>
        <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) または <see langword="Task (Of Task(Of T))" /> (Visual Basic) の非同期操作を表すプロキシ <see cref="T:System.Threading.Tasks.Task" /> を作成します。</summary>
      <param name="task">ラップを解除する <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) または <see langword="Task (Of Task(Of T))" /> (Visual Basic)。</param>
      <typeparam name="TResult">タスクの結果の型。</typeparam>
      <returns>指定された <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) または <see langword="Task (Of Task(Of T))" /> (Visual Basic) の非同期操作を表す <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 引数が null の場合にスローされる例外。</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskSchedulerException">
      <summary>
        <see cref="T:System.Threading.Tasks.TaskScheduler" /> による無効な操作があったことを通知するために使用される例外を表します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor">
      <summary>エラーを説明するシステム提供のメッセージを使用して、<see cref="T:System.Threading.Tasks.TaskSchedulerException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Exception)">
      <summary>既定のエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.Threading.Tasks.TaskSchedulerException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="innerException">現在の例外の原因となった例外。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Threading.Tasks.TaskSchedulerException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String)">
      <summary>エラーを説明する指定したメッセージを使用して、<see cref="T:System.Threading.Tasks.TaskSchedulerException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Threading.Tasks.TaskSchedulerException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks.Dataflow</name>
  </assembly>
  <members>
    <member name="T:System.Threading.Tasks.Dataflow.ActionBlock`1">
      <summary>すべての受信データ要素の <see cref="T:System.Action`1" /> の指定されたデリゲートを呼び出すデータ フローのブロックを提供します。</summary>
      <typeparam name="TInput">この <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> が動作するデータの型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})">
      <summary>指定したアクションを使用して、<see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">受信した各データ要素で呼び出す操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>指定したアクションと構成オプションを使用して、<see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">受信した各データ要素で呼び出す操作。</param>
      <param name="dataflowBlockOptions">この <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> の構成に使用するオプション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> は <see langword="null" />です。

または -
<paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
      <summary>指定したアクションを使用して、<see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">受信した各データ要素で呼び出す操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>指定したアクションと構成オプションを使用して、<see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">受信した各データ要素で呼び出す操作。</param>
      <param name="dataflowBlockOptions">この <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> の構成に使用するオプション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> は <see langword="null" />です。

または -
<paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Complete">
      <summary>これ以上メッセージを受け付けまたは生成せず、延期メッセージを使用しないことをデータ フロー ブロックに通知します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.Completion">
      <summary>データ フロー ブロックの非同期操作と完了を表す <see cref="T:System.Threading.Tasks.Task" /> オブジェクトを取得します。</summary>
      <returns>完了したタスク。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount">
      <summary>このブロックで処理するために待機している入力項目の数を取得します。</summary>
      <returns>このブロックで処理するために待機している入力項目の数。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)">
      <summary>ターゲット データ フロー ブロックに項目をポストします。</summary>
      <param name="item">ターゲットに提供される項目。</param>
      <returns>項目がデータフロー ブロックにポストされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>データフロー ブロックが違反状態で完了します。</summary>
      <param name="exception">このエラーの原因となった例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>メッセージをデータ フローのブロックに提供し、メッセージを使用するか、または延期する機会を与えます。</summary>
      <param name="messageHeader">提供されるメッセージのヘッダー。</param>
      <param name="messageValue">提供されるメッセージの値。</param>
      <param name="source">メッセージを伝えているデータフローのブロック。 <see langword="null" /> でもかまいません。</param>
      <param name="consumeToAccept">メッセージを使用するために、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> を返す前に <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> の呼び出し中に <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> を同期的に呼び出すようにターゲットに指示する場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>提供されたメッセージのステータス。  メッセージがターゲットによって受け入れられた場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> が返されます。メッセージはターゲットに所有されるようになったので、ソースは提供されたメッセージを使用しないようにする必要があります。 メッセージがターゲットによって延期された場合、ターゲットが後でメッセージの使用または予約を試みる可能性があることを示す通知として <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> が返されます。その間、ソースはそのメッセージを引き続き所有し、他のブロックに提供する可能性があります。
ターゲットがメッセージを遅延するはずだったのに、ソースが <see langword="null" /> だった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> が返されます。
ターゲットがメッセージを受け入れようとしたが、ソースが別のターゲットにメッセージを配信したか、単純に破棄したため、受け入れることができなかった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> が返されます。
ターゲットがメッセージを受け入れなかった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> が返されます。 ターゲットがメッセージを受け入れず、今後、このソースからの別のメッセージを受け入れない場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> が返されます。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が無効です。
または、<paramref name="consumeToAccept" /> は、<paramref name="source" /> の値が null 以外である場合にのみ <see langword="true" /> にすることができます。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.ToString">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchBlock`1">
      <summary>入力を配列にバッチ処理するデータ フロー ブロックを提供します。</summary>
      <typeparam name="T">バッチに入力されたデータの種類を指定します。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32)">
      <summary>指定バッチ サイズを使用して <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> の新しいインスタンスを初期化します。</summary>
      <param name="batchSize">バッチにグループ化する項目の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" /> は正の数である必要があります。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>指定したバッチ サイズ、拒否オプション、およびブロック オプションを使用して、新しい <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> を初期化します。</summary>
      <param name="batchSize">バッチにグループ化する項目の数。</param>
      <param name="dataflowBlockOptions">この <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> の構成に使用するオプション。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" /> は正の数である必要があります。

または -
<paramref name="batchSize" /> は既定値以外の値が設定されている場合 <see cref="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity" /> オプションの値よりも小さい必要があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> によって生成されたバッチのサイズを取得します。</summary>
      <returns>バッチ サイズ。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.Complete">
      <summary>これ以上メッセージを受け付けまたは生成せず、延期メッセージを使用しないことを <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> に通知します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.Completion">
      <summary>データ フロー ブロックの非同期操作と完了を表す <see cref="T:System.Threading.Tasks.Task" /> を取得します。</summary>
      <returns>タスク。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>指定した <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> をリンクします。</summary>
      <param name="target">このソースの接続先の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">リンクを構成する <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> インスタンス。</param>
      <returns>Dispose の呼び出し時にソースをターゲットからリンク解除する IDisposable。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が null (Visual Basic の Nothing) または <paramref name="linkOptions" /> が null (Visual Basic の Nothing) です。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.OutputCount">
      <summary>このブロックから取得できる出力項目の数を取得します。</summary>
      <returns>出力項目の数。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> を <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で完了するようにします。</summary>
      <param name="exception">このエラーの原因となった <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Boolean@)">
      <summary>前にこの <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって提供された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を受け入れて使用するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">使用中のメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">メッセージを使用している <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed">メッセージが正常に使用された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
      <returns>使用されたメッセージの値。 これは以前に予約されて <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> に <paramref name="messageHeader" /> として渡されたものとは異なる、<see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> のインスタンスに相当する場合があります。 使用する側の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> は、<see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> を介して messageValue として渡される値の代わりに、戻り値を使用する必要があります。
要求されたメッセージを使用できない場合、戻り値は <see langword="null" /> になります。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって前に予約された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を解放するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">解放する予約済みメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">以前に予約したメッセージを解放する <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" /> がメッセージを予約しませんでした。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって前に提供された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を予約するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">予約するメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">メッセージを予約している <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <returns>メッセージが正常に予約された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>メッセージを <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に提供し、メッセージを使用または延期する機会をターゲットに与えます。</summary>
      <param name="messageHeader">提供されるメッセージのヘッダーを表す <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> インスタンス。</param>
      <param name="messageValue">提供されるメッセージの値。</param>
      <param name="source">メッセージを提供している <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 null でもかまいません。</param>
      <param name="consumeToAccept">メッセージを使用するために、<see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> を返す前に <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> の呼び出し中に <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> を同期的に呼び出すようにターゲットに指示する場合は、<see langword="true" /> に設定します。</param>
      <returns>提供されたメッセージのステータス。 メッセージがターゲットによって受け入れられた場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> が返されます。メッセージはターゲットに所有されるようになったので、ソースは提供されたメッセージを使用しないようにする必要があります。 メッセージがターゲットによって延期された場合、ターゲットが後でメッセージの使用または予約を試みる可能性があることを示す通知として <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> が返されます。その間、ソースはそのメッセージを引き続き所有し、他のブロックに提供する可能性があります。
ターゲットがメッセージを遅延するはずだったのに、<paramref name="source" /> が <see langword="null" /> だった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> が代わりに返されます。
ターゲットがメッセージを受け入れようとしたが、ソースが別のターゲットにメッセージを配信したか、単純に破棄したため、受け入れることができなかった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> が返されます。
ターゲットがメッセージを受け入れなかった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> が返されます。 ターゲットがメッセージを受け入れず、今後、このソースからの別のメッセージを受け入れない場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> が返されます。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。
または、<paramref name="consumeToAccept" /> は、<paramref name="source" /> の値が null 以外である場合にのみ true にすることができます。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.ToString">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TriggerBatch">
      <summary>現在キューにあるか、または延期された項目の数が <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> より小さい場合でも、<see cref="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize" /> をトリガーしてバッチ処理操作を開始します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceive(System.Predicate{`0[]},`0[]@)">
      <summary>使用可能な出力項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="filter">受信するために値で正常に渡す必要がある述語。  <paramref name="filter" /> は <see langword="null" /> である可能性があります。その場合、すべての項目が渡されます。</param>
      <param name="item">ソースから受信された項目。</param>
      <returns>項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0[]}@)">
      <summary>使用可能なすべての項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="items">ソースから受信された項目。</param>
      <returns>1 つ以上の項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2">
      <summary>1 つ以上のターゲットに適用された、型が異なる可能性のある指定された数の入力をバッチ処理するデータフロー ブロックを提供します。</summary>
      <typeparam name="T1">ブロックの最初のターゲットが受け取るデータの種類を指定します。</typeparam>
      <typeparam name="T2">ブロックの 2 番目のターゲットが受け取るデータの種類を指定します。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32)">
      <summary>指定した構成を使用して、<see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> の新しいインスタンスを初期化します。</summary>
      <param name="batchSize">バッチにグループ化する項目の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" /> は正の数である必要があります。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>指定した構成を使用して、<see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> の新しいインスタンスを初期化します。</summary>
      <param name="batchSize">バッチにグループ化する項目の数。</param>
      <param name="dataflowBlockOptions">この <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> の構成に使用するオプション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" /> が 1 未満です。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.BatchSize">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> によって生成されたバッチのサイズを取得します。</summary>
      <returns>バッチ サイズ。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Complete">
      <summary>これ以上メッセージを受け付けまたは生成せず、延期メッセージを使用しないことを <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> に通知します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Completion">
      <summary>データ フロー ブロックの非同期操作と完了を表す <see cref="T:System.Threading.Tasks.Task" /> を取得します。</summary>
      <returns>タスク。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>指定した <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> をリンクします。</summary>
      <param name="target">このソースの接続先の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">リンクを構成する <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> インスタンス。</param>
      <returns>Dispose の呼び出し時にソースをターゲットからリンク解除する IDisposable。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が null (Visual Basic の Nothing) または <paramref name="linkOptions" /> が null (Visual Basic の Nothing) です。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.OutputCount">
      <summary>このブロックから取得できる出力項目の数を取得します。</summary>
      <returns>出力項目の数。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> を <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で完了するようにします。</summary>
      <param name="exception">このエラーの原因となった <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Boolean@)">
      <param name="messageHeader" />
      <param name="target" />
      <param name="messageConsumed" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target1">
      <summary>最初の型のメッセージを提供するために使用できるターゲットを取得します。</summary>
      <returns>ターゲット。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target2">
      <summary>2 番目の型のメッセージを提供するために使用できるターゲットを取得します。</summary>
      <returns>ターゲット。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.ToString">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}@)">
      <summary>使用可能な出力項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="filter">受信するために値で正常に渡す必要がある述語。  <paramref name="filter" /> は <see langword="null" /> である可能性があります。その場合、すべての項目が渡されます。</param>
      <param name="item">ソースから受信された項目。</param>
      <returns>項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}}@)">
      <summary>使用可能なすべての項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="items">ソースから受信された項目。</param>
      <returns>1 つ以上の項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3">
      <summary>1 つ以上のターゲットに適用された、型が異なる可能性のある指定された数の入力をバッチ処理するデータ フロー ブロックを提供します。</summary>
      <typeparam name="T1">ブロックの最初のターゲットが受け取るデータの種類を指定します。</typeparam>
      <typeparam name="T2">ブロックの 2 番目のターゲットが受け取るデータの種類を指定します。</typeparam>
      <typeparam name="T3">ブロックの 3 番目のターゲットが受け取るデータの種類を指定します。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32)">
      <summary>指定した構成を使用して、<see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> の新しいインスタンスを初期化します。</summary>
      <param name="batchSize">バッチにグループ化する項目の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" /> は正の数である必要があります。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>指定した構成を使用して、<see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> の新しいインスタンスを初期化します。</summary>
      <param name="batchSize">バッチにグループ化する項目の数。</param>
      <param name="dataflowBlockOptions">この <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> の構成に使用するオプション。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" /> は正の数である必要があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.BatchSize">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> によって生成されたバッチのサイズを取得します。</summary>
      <returns>バッチ サイズ。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Complete">
      <summary>これ以上メッセージを受け付けまたは生成せず、延期メッセージを使用しないことを <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> に通知します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Completion">
      <summary>データ フロー ブロックの非同期操作と完了を表す <see cref="T:System.Threading.Tasks.Task" /> を取得します。</summary>
      <returns>タスク。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>指定した <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> をリンクします。</summary>
      <param name="target">このソースの接続先の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">1 つのメッセージを正常に伝達した後にソースとターゲットのリンクを解除する必要がある場合は <see langword="true" />。1 つのメッセージを正常に伝達した後も接続を維持する場合は <see langword="false" />。</param>
      <returns>Dispose の呼び出し時にソースをターゲットからリンク解除する IDisposable。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が null (Visual Basic の Nothing) または <paramref name="linkOptions" /> が null (Visual Basic の Nothing) です。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.OutputCount">
      <summary>このブロックから取得できる出力項目の数を取得します。</summary>
      <returns>出力項目の数。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> を <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で完了するようにします。</summary>
      <param name="exception">このエラーの原因となった <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Boolean@)">
      <param name="messageHeader" />
      <param name="target" />
      <param name="messageConsumed" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target1">
      <summary>最初の型のメッセージを提供するために使用できるターゲットを取得します。</summary>
      <returns>ターゲット。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target2">
      <summary>2 番目の型のメッセージを提供するために使用できるターゲットを取得します。</summary>
      <returns>ターゲット。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target3">
      <summary>3 番目の型のメッセージを提供するために使用できるターゲットを取得します。</summary>
      <returns>ターゲット。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.ToString">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}@)">
      <summary>使用可能な出力項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="filter">受信するために値で正常に渡す必要がある述語。  <paramref name="filter" /> は <see langword="null" /> である可能性があります。その場合、すべての項目が渡されます。</param>
      <param name="item">ソースから受信された項目。</param>
      <returns>項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}}@)">
      <summary>使用可能なすべての項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="items">ソースから受信された項目。</param>
      <returns>1 つ以上の項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
      <summary>一度に最大で 1 個の要素を格納し、各メッセージを受信した次のメッセージで上書きするバッファーを提供します。</summary>
      <typeparam name="T">このデータフロー ブロックによりバッファリングされるデータの種類を指定します。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0})">
      <summary>指定した複製関数を使用して、<see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> インスタンスを初期化します。</summary>
      <param name="cloningFunction">他のブロックに提供された場合、データを複製するために使用する関数。</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>指定した複製関数と <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> を使用して、<see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> インスタンスを初期化します。</summary>
      <param name="cloningFunction">他のブロックに提供された場合、データを複製するために使用する関数。</param>
      <param name="dataflowBlockOptions">この <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> の構成に使用するオプション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Complete">
      <summary>これ以上メッセージを受け付けまたは生成せず、延期メッセージを使用しないことを <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> に通知します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
      <summary>データ フロー ブロックの非同期操作と完了を表す <see cref="T:System.Threading.Tasks.Task" /> を取得します。</summary>
      <returns>タスク。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>指定した <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> をリンクします。</summary>
      <param name="target">このソースの接続先の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">リンクを構成する <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> インスタンス。</param>
      <returns>Dispose の呼び出し時にソースをターゲットからリンク解除する IDisposable。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が null (Visual Basic の Nothing) または <paramref name="linkOptions" /> が null (Visual Basic の Nothing) です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> を <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で完了するようにします。</summary>
      <param name="exception">このエラーの原因となった <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>使用可能なすべての項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="items">ソースから受信された項目。</param>
      <returns>1 つ以上の項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>前にこの <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって提供された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を受け入れて使用するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">使用中のメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">メッセージを使用している <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed">メッセージが正常に使用された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
      <returns>使用されたメッセージの値。 これは以前に予約されて <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> に <paramref name="messageHeader" /> として渡されたものとは異なる、<see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> のインスタンスに相当する場合があります。 使用する側の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> は、<see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> によって <paramref name="messageValue" /> として渡される値の代わりに、戻り値を使用する必要があります。
要求されたメッセージを使用できない場合、戻り値は <see langword="null" /> になります。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって前に予約された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を解放するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">解放する予約済みメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">以前に予約したメッセージを解放する <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" /> がメッセージを予約しませんでした。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって前に提供された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を予約するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">予約するメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">メッセージを予約している <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <returns>メッセージが正常に予約された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>メッセージを <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に提供し、メッセージを使用または延期する機会をターゲットに与えます。</summary>
      <param name="messageHeader">提供されるメッセージのヘッダーを表す <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> インスタンス。</param>
      <param name="messageValue">提供されるメッセージの値。</param>
      <param name="source">メッセージを提供している <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 null でもかまいません。</param>
      <param name="consumeToAccept">メッセージを使用するために、<see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> を返す前に <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> の呼び出し中に <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> を同期的に呼び出すようにターゲットに指示する場合は、<see langword="true" /> に設定します。</param>
      <returns>提供されたメッセージのステータス。 メッセージがターゲットによって受け入れられた場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> が返されます。メッセージはターゲットに所有されるようになったので、ソースは提供されたメッセージを使用しないようにする必要があります。 メッセージがターゲットによって延期された場合、ターゲットが後でメッセージの使用または予約を試みる可能性があることを示す通知として <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> が返されます。その間、ソースはそのメッセージを引き続き所有し、他のブロックに提供する可能性があります。
ターゲットがメッセージを遅延するはずだったのに、<paramref name="source" /> が <see langword="null" /> だった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> が代わりに返されます。
ターゲットがメッセージを受け入れようとしたが、ソースが別のターゲットにメッセージを配信したか、単純に破棄したため、受け入れることができなかった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> が返されます。
ターゲットがメッセージを受け入れなかった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> が返されます。 ターゲットがメッセージを受け入れず、今後、このソースからの別のメッセージを受け入れない場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> が返されます。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。
または、<paramref name="consumeToAccept" /> は、<paramref name="source" /> の値が null 以外である場合にのみ true にすることができます。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>使用可能な出力項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="filter">受信するために値で正常に渡す必要がある述語。  <paramref name="filter" /> は <see langword="null" /> である可能性があります。その場合、すべての項目が渡されます。</param>
      <param name="item">ソースから受信された項目。</param>
      <returns>項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BufferBlock`1">
      <summary>データフローのデータを格納するバッファーを提供します。</summary>
      <typeparam name="T">このデータフロー ブロックによりバッファリングされるデータの種類を指定します。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor">
      <summary>新しい <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" /> を初期化します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>指定した <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> で新しい <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" /> を初期化します。</summary>
      <param name="dataflowBlockOptions">この <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" /> の構成に使用するオプション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.Complete">
      <summary>これ以上メッセージを受け付けまたは生成せず、延期メッセージを使用しないことを <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> に通知します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Completion">
      <summary>データ フロー ブロックの非同期操作と完了を表す <see cref="T:System.Threading.Tasks.Task" /> を取得します。</summary>
      <returns>タスク。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Count">
      <summary>バッファーに現在格納されている項目の数を取得します。</summary>
      <returns>項目の数。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>指定した <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> をリンクします。</summary>
      <param name="target">このソースの接続先の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">リンクを構成する <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> インスタンス。</param>
      <returns>Dispose の呼び出し時にソースをターゲットからリンク解除する IDisposable。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が null (Visual Basic の Nothing) または <paramref name="linkOptions" /> が null (Visual Basic の Nothing) です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> を <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で完了するようにします。</summary>
      <param name="exception">このエラーの原因となった <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>前にこの <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって提供された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を受け入れて使用するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">使用中のメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">メッセージを使用している <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed">メッセージが正常に使用された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
      <returns>使用されたメッセージの値。 これは以前に予約されて <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> に <paramref name="messageHeader" /> として渡されたものとは異なる、<see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> のインスタンスに相当する場合があります。 使用する側の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> は、<see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> によって <paramref name="messageValue" /> として渡される値の代わりに、戻り値を使用する必要があります。
要求されたメッセージを使用できない場合、戻り値は <see langword="null" /> になります。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって前に予約された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を解放するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">解放する予約済みメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">以前に予約したメッセージを解放する <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" /> がメッセージを予約しませんでした。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって前に提供された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を予約するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">予約するメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">メッセージを予約している <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <returns>メッセージが正常に予約された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>メッセージを <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に提供し、メッセージを使用または延期する機会をターゲットに与えます。</summary>
      <param name="messageHeader">提供されるメッセージのヘッダーを表す <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> インスタンス。</param>
      <param name="messageValue">提供されるメッセージの値。</param>
      <param name="source">メッセージを提供している <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 <see langword="null" /> でもかまいません。</param>
      <param name="consumeToAccept">メッセージを使用するために、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> を返す前に <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> の呼び出し中に <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> を同期的に呼び出すようにターゲットに指示する場合は、true に設定します。</param>
      <returns>提供されたメッセージのステータス。 メッセージがターゲットによって受け入れられた場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> が返されます。メッセージはターゲットに所有されるようになったので、ソースは提供されたメッセージを使用しないようにする必要があります。 メッセージがターゲットによって延期された場合、ターゲットが後でメッセージの使用または予約を試みる可能性があることを示す通知として <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> が返されます。その間、ソースはそのメッセージを引き続き所有し、他のブロックに提供する可能性があります。
ターゲットがメッセージを遅延するはずだったのに、<paramref name="source" /> が <see langword="null" /> だった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> が代わりに返されます。
ターゲットがメッセージを受け入れようとしたが、ソースが別のターゲットにメッセージを配信したか、単純に破棄したため、受け入れることができなかった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> が返されます。
ターゲットがメッセージを受け入れなかった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> が返されます。 ターゲットがメッセージを受け入れず、今後、このソースからの別のメッセージを受け入れない場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> が返されます。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。
または、<paramref name="consumeToAccept" /> は、<paramref name="source" /> の値が null 以外である場合にのみ true にすることができます。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.ToString">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>使用可能な出力項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="filter">受信するために値で正常に渡す必要がある述語。 <paramref name="filter" /> は <see langword="null" /> である可能性があります。その場合、すべての項目が渡されます。</param>
      <param name="item">ソースから受信された項目。</param>
      <returns>項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>使用可能なすべての項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="items">ソースから受信された項目。</param>
      <returns>1 つ以上の項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlock">
      <summary>データフロー ブロックを操作する静的 (Visual Basic の場合は共有) メソッドのセットを提供します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>
        <see cref="T:System.IObservable`1" /> の新しい <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 抽象化を作成します。</summary>
      <param name="source">ラップするソース。</param>
      <typeparam name="TOutput">ソースに格納されるデータの種類を指定します。</typeparam>
      <returns>オブザーバーがソースにサブスクライブされるのを可能にする <see cref="T:System.IObservable`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> の新しい <see cref="T:System.IObserver`1" /> 抽象化を作成します。</summary>
      <param name="target">ラップするターゲット。</param>
      <typeparam name="TInput">ターゲット ブロックが受け取る入力の種類を指定します。</typeparam>
      <returns>ターゲット ブロックをラップするオブザーバー。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})">
      <summary>2 つのデータ フロー ソースを監視し、データが最初に使用できるようになったソースに対して、指定したハンドラーを呼び出します。</summary>
      <param name="source1">1 番目のソース。</param>
      <param name="action1">最初のソースからのデータで実行するハンドラー。</param>
      <param name="source2">2 番目のソース。</param>
      <param name="action2">2 番目のソースからのデータで実行するハンドラー。</param>
      <typeparam name="T1">最初のソースに格納されるデータの種類を指定します。</typeparam>
      <typeparam name="T2">2 番目のソースに格納されるデータの種類を指定します。</typeparam>
      <returns>非同期の選択項目を表す <see cref="T:System.Threading.Tasks.Task`1" />。 両方のソースが選択の完了前に完了すると、結果のタスクは取り消されます。 いずれかのソースに使用できるデータがあり、それを選択内容に正常に反映した場合、ハンドラーの完了時に結果のタスクが完了します。ハンドラーが例外をスローした場合、タスクは <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で終了し、未処理の例外が含まれます。 それ以外の場合、タスクは最初または 2 つ目のソースを表すためにそれぞれ <see cref="P:System.Threading.Tasks.Task`1.Result" /> が 0 または 1 に設定された状態で終了します。
このメソッドは、2 つのデータ ソースのいずれかからのみ要素を使用します。両方のデータ ソースから要素を使用することはありません。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> が <see langword="null" /> です。

または -
<paramref name="action1" /> が <see langword="null" /> です。

または -
<paramref name="source2" /> が <see langword="null" /> です。

または -
<paramref name="action2" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>2 つのデータ フロー ソースを監視し、データが最初に使用できるようになったソースに対して、指定したハンドラーを呼び出します。</summary>
      <param name="source1">1 番目のソース。</param>
      <param name="action1">最初のソースからのデータで実行するハンドラー。</param>
      <param name="source2">2 番目のソース。</param>
      <param name="action2">2 番目のソースからのデータで実行するハンドラー。</param>
      <param name="dataflowBlockOptions">この選択の構成に使用するオプション。</param>
      <typeparam name="T1">最初のソースに格納されるデータの種類を指定します。</typeparam>
      <typeparam name="T2">2 番目のソースに格納されるデータの種類を指定します。</typeparam>
      <returns>非同期の選択項目を表す <see cref="T:System.Threading.Tasks.Task`1" />。 両方のソースが選択の完了前に完了するか、<paramref name="dataflowBlockOptions" /> の一部として提供された <see cref="T:System.Threading.CancellationToken" /> が選択の完了前に取り消される場合、結果のタスクは取り消されます。 いずれかのソースに使用できるデータがあり、それを選択内容に正常に反映した場合、ハンドラーの完了時に結果のタスクが完了します。ハンドラーが例外をスローした場合、タスクは <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で終了し、未処理の例外が含まれます。 それ以外の場合、タスクは最初または 2 つ目のソースを表すためにそれぞれ <see cref="P:System.Threading.Tasks.Task`1.Result" /> が 0 または 1 に設定された状態で終了します。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> が <see langword="null" /> です。

または -
<paramref name="action1" /> が <see langword="null" /> です。

または -
<paramref name="source2" /> が <see langword="null" /> です。

または -
<paramref name="action2" /> が <see langword="null" /> です。

または -
<paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})">
      <summary>3 つのデータ フロー ソースを監視し、データが最初に使用できるようになったソースに対して、指定したハンドラーを呼び出します。</summary>
      <param name="source1">1 番目のソース。</param>
      <param name="action1">最初のソースからのデータで実行するハンドラー。</param>
      <param name="source2">2 番目のソース。</param>
      <param name="action2">2 番目のソースからのデータで実行するハンドラー。</param>
      <param name="source3">3 番目のソース。</param>
      <param name="action3">3 番目のソースのデータで実行するハンドラー。</param>
      <typeparam name="T1">最初のソースに格納されるデータの種類を指定します。</typeparam>
      <typeparam name="T2">2 番目のソースに格納されるデータの種類を指定します。</typeparam>
      <typeparam name="T3">3 番目のソースに格納されるデータの種類を指定します。</typeparam>
      <returns>非同期の選択項目を表す <see cref="T:System.Threading.Tasks.Task`1" />。 すべてのソースが選択の完了前に完了すると、結果のタスクは取り消されます。 いずれかのソースに使用できるデータがあり、それを選択内容に正常に反映した場合、ハンドラーの完了時に結果のタスクが完了します。ハンドラーが例外をスローした場合、タスクは <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で終了し、未処理の例外が含まれます。 それ以外の場合、タスクは <see cref="P:System.Threading.Tasks.Task`1.Result" /> がソースの 0 から始まるインデックスに設定された状態で終了します。
このメソッドは、1 つのデータ ソースからのみ要素を使用します。複数のデータ ソースから要素を使用することはありません。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> が <see langword="null" /> です。

または -
<paramref name="action1" /> が <see langword="null" /> です。

または -
<paramref name="source2" /> が <see langword="null" /> です。

または -
<paramref name="action2" /> が <see langword="null" /> です。

または -
<paramref name="source3" /> が <see langword="null" /> です。

または -
<paramref name="action3" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>3 つのデータ フロー ソースを監視し、データが最初に使用できるようになったソースに対して、指定したハンドラーを呼び出します。</summary>
      <param name="source1">1 番目のソース。</param>
      <param name="action1">最初のソースからのデータで実行するハンドラー。</param>
      <param name="source2">2 番目のソース。</param>
      <param name="action2">2 番目のソースからのデータで実行するハンドラー。</param>
      <param name="source3">3 番目のソース。</param>
      <param name="action3">3 番目のソースのデータで実行するハンドラー。</param>
      <param name="dataflowBlockOptions">この選択の構成に使用するオプション。</param>
      <typeparam name="T1">最初のソースに格納されるデータの種類を指定します。</typeparam>
      <typeparam name="T2">2 番目のソースに格納されるデータの種類を指定します。</typeparam>
      <typeparam name="T3">3 番目のソースに格納されるデータの種類を指定します。</typeparam>
      <returns>非同期の選択項目を表す <see cref="T:System.Threading.Tasks.Task`1" />。 すべてのソースが選択の完了前に完了するか、<paramref name="dataflowBlockOptions" /> の一部として提供された <see cref="T:System.Threading.CancellationToken" /> が選択の完了前に取り消される場合、結果のタスクは取り消されます。 いずれかのソースに使用できるデータがあり、それを選択内容に正常に反映した場合、ハンドラーの完了時に結果のタスクが完了します。ハンドラーが例外をスローした場合、タスクは <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で終了し、未処理の例外が含まれます。 それ以外の場合、タスクは <see cref="P:System.Threading.Tasks.Task`1.Result" /> がソースの 0 から始まるインデックスに設定された状態で終了します。
このメソッドは、1 つのデータ ソースからのみ要素を使用します。複数のデータ ソースから要素を使用することはありません。 要素が受信された後で取り消しが要求された場合、取り消し要求は無視され、関連するハンドラーの実行が許可されます。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> が <see langword="null" /> です。

または -
<paramref name="action1" /> が <see langword="null" /> です。

または -
<paramref name="source2" /> が <see langword="null" /> です。

または -
<paramref name="action2" /> が <see langword="null" /> です。

または -
<paramref name="source3" /> が <see langword="null" /> です。

または -
<paramref name="action3" /> が <see langword="null" /> です。

または -
<paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})">
      <summary>ターゲットとソースを単一の伝達子にカプセル化します。</summary>
      <param name="target">カプセル化するターゲット。</param>
      <param name="source">カプセル化するソース。</param>
      <typeparam name="TInput">ターゲットが予期する入力のタイプを指定します。</typeparam>
      <typeparam name="TOutput">ソースで作成される出力のタイプを指定します。</typeparam>
      <returns>カプセル化されたターゲットとソース。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary>指定した <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> をリンクします。</summary>
      <param name="source">リンク元のソース。</param>
      <param name="target">ソースの接続先の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <typeparam name="TOutput">ソースに格納されるデータの種類を指定します。</typeparam>
      <returns>
        <see langword="Dispose" /> の呼び出し時にソースをターゲットからリンク解除する <see cref="T:System.IDisposable" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が <see langword="null" /> です。

または -
<paramref name="target" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})">
      <summary>指定したフィルターを使用して、指定した <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> をリンクします。</summary>
      <param name="source">リンク元のソース。</param>
      <param name="target">ソースの接続先の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="predicate">メッセージをソースからターゲットに伝達するために渡す必要のあるフィルター。</param>
      <typeparam name="TOutput">ソースに格納されるデータの種類を指定します。</typeparam>
      <returns>
        <see langword="Dispose" /> の呼び出し時にソースをターゲットからリンク解除する <see cref="T:System.IDisposable" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が <see langword="null" /> です。

または -
<paramref name="target" /> が <see langword="null" /> です。

または -
<paramref name="predicate" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})">
      <summary>指定したフィルターを使用して、指定した <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> をリンクします。</summary>
      <param name="source">リンク元のソース。</param>
      <param name="target">ソースの接続先の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">データ フロー ブロック間のリンクを構成する方法を指定する列挙値の 1 つ。</param>
      <param name="predicate">メッセージをソースからターゲットに伝達するために渡す必要のあるフィルター。</param>
      <typeparam name="TOutput">ソースに格納されるデータの種類を指定します。</typeparam>
      <returns>
        <see langword="Dispose" /> の呼び出し時にソースをターゲットからリンク解除する <see cref="T:System.IDisposable" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> は null (Visual Basic では Nothing) です。

または -
<paramref name="target" /> は null (Visual Basic では Nothing) です。

または -
<paramref name="linkOptions" /> は null (Visual Basic では Nothing) です。

または -
<paramref name="predicate" /> は null (Visual Basic では Nothing) です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1">
      <summary>提供されるすべてのメッセージを同期的に受け入れてドロップするターゲット ブロックを取得します。</summary>
      <typeparam name="TInput">このブロックが受け入れるメッセージの型。</typeparam>
      <returns>提供されたメッセージをすべて受け入れた後破棄する <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>使用できる出力のソースを非同期的に監視する <see cref="T:System.Threading.Tasks.Task`1" /> を提供します。</summary>
      <param name="source">監視するソース。</param>
      <typeparam name="TOutput">ソースに格納されるデータの種類を指定します。</typeparam>
      <returns>詳細の出力の有無といつ使用できるかを通知する <see cref="T:System.Threading.Tasks.Task`1" />。 タスクの完了時に、<see cref="P:System.Threading.Tasks.Task`1.Result" /> が <see langword="true" /> の場合は、ソース内のより多くの出力を利用できます (ソースの他のコンシューマーもデータを取得することがあります)。
<see langword="false" /> が返される場合、出力が使用可能になる前にソースが完了するため、出力は今後も使用できなくなります。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>使用できる出力のソースを非同期的に監視する <see cref="T:System.Threading.Tasks.Task`1" /> を提供します。</summary>
      <param name="source">監視するソース。</param>
      <param name="cancellationToken">非同期操作をキャンセルするキャンセル トークン。</param>
      <typeparam name="TOutput">ソースに格納されるデータの種類を指定します。</typeparam>
      <returns>詳細の出力の有無といつ使用できるかを通知する <see cref="T:System.Threading.Tasks.Task`1" />。 タスクの完了時に、<see cref="P:System.Threading.Tasks.Task`1.Result" /> が <see langword="true" /> の場合は、ソース内のより多くの出力を利用できます (ソースの他のコンシューマーもデータを取得することがあります)。 <see langword="false" /> が返される場合、出力が使用可能になる前にソースが完了するため、出力は今後も使用できなくなります。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に項目をポストします。</summary>
      <param name="target">対象となるブロック。</param>
      <param name="item">ターゲットに提供される項目。</param>
      <typeparam name="TInput">ターゲット ブロックが受け取るデータの種類を指定します。</typeparam>
      <returns>項目がターゲット ブロックによって受け入れられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>指定されたソースから値を同期的に受信します。</summary>
      <param name="source">値を受信する元のソース。</param>
      <typeparam name="TOutput">ソースに含まれるデータの型。</typeparam>
      <returns>受け取った値。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">ソースから項目を受信できませんでした。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>同期的に指定したソースから値を受け取り、操作をキャンセルするトークンを提供します。</summary>
      <param name="source">値を受信する元のソース。</param>
      <param name="cancellationToken">受信操作を取り消すために使用するトークン。</param>
      <typeparam name="TOutput">ソースに含まれるデータの型。</typeparam>
      <returns>受け取った値。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">ソースから項目を受信できませんでした。</exception>
      <exception cref="T:System.OperationCanceledException">操作は、ソースから項目を受け取る前に取り消されました。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary>同期的に指定したソースから値を受信し、オプションのタイムアウト期間を確認します。</summary>
      <param name="source">値を受信する元のソース。</param>
      <param name="timeout">同期操作が完了するまで待機する最大時間間隔 (ミリ秒単位)。-1 ミリ秒を設定すると無制限に待機します。</param>
      <typeparam name="TOutput">ソースに含まれるデータの型。</typeparam>
      <returns>受け取った値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> は -1 ミリ秒以外の負数です。-1 は無制限のタイムアウト期間を表します。

または -
<paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">ソースから項目を受信できませんでした。</exception>
      <exception cref="T:System.TimeoutException">項目をソースから受け取る前に、指定されたタイムアウトの時間になりました。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary>同期的に操作をキャンセルするトークンを提供し、オプションのタイムアウト間隔を確認する指定したソースから値を受け取ります。</summary>
      <param name="source">値を受信する元のソース。</param>
      <param name="timeout">同期操作が完了するまで待機する最大時間間隔 (ミリ秒単位)。-1 ミリ秒を設定すると無制限に待機します。</param>
      <param name="cancellationToken">受信操作を取り消すために使用するトークン。</param>
      <typeparam name="TOutput">ソースに含まれるデータの型。</typeparam>
      <returns>受け取った値。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> は -1 ミリ秒以外の負数です。-1 は無制限のタイムアウト期間を表します。

または -
<paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</exception>
      <exception cref="T:System.InvalidOperationException">ソースから項目を受信できませんでした。</exception>
      <exception cref="T:System.TimeoutException">項目をソースから受け取る前に、指定されたタイムアウトの時間になりました。</exception>
      <exception cref="T:System.OperationCanceledException">操作は、ソースから項目を受け取る前に取り消されました。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>指定されたソースから値を非同期的に受信します。</summary>
      <param name="source">値を受信する元のソース。</param>
      <typeparam name="TOutput">ソースに含まれるデータの型。</typeparam>
      <returns>非同期の受信操作を表すタスク。 項目値をソースから正常に受け取った場合、返されたタスクが完了し、<see cref="P:System.Threading.Tasks.Task`1.Result" /> が受け取った値を返します。 ソースが空で完了しているために項目の値が取得できない場合には、返されたタスクで <see cref="T:System.InvalidOperationException" /> 例外がスローされます。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>非同期に指定したソースから値を受け取り、操作をキャンセルするトークンを提供します。</summary>
      <param name="source">値を受信する元のソース。</param>
      <param name="cancellationToken">受信操作を取り消すために使用するトークン。</param>
      <typeparam name="TOutput">ソースに格納されるデータの種類を指定します。</typeparam>
      <returns>非同期の受信操作を表すタスク。 値をソースから正常に受け取った場合、返されたタスクが完了し、<see cref="P:System.Threading.Tasks.Task`1.Result" /> が値を返します。 キャンセルが要求されたため値を取得できない場合には、返されたタスクはキャンセルされます。 ソースが空で完了しているために値が取得できない場合には、返されたタスクの <see cref="T:System.InvalidOperationException" /> 例外がスローされます。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary>非同期に指定したソースから値を受信し、オプションのタイムアウト期間を確認します。</summary>
      <param name="source">値を受信する元のソース。</param>
      <param name="timeout">同期操作が完了するまで待機する最大時間間隔 (ミリ秒単位)。-1 ミリ秒を設定すると無制限に待機します。</param>
      <typeparam name="TOutput">ソースに含まれるデータの型。</typeparam>
      <returns>非同期の受信操作を表すタスク。 値をソースから正常に受け取った場合、返されたタスクが完了し、<see cref="P:System.Threading.Tasks.Task`1.Result" /> が値を返します。 タイムアウトの時間が経過したため値を取得できない場合には、返されたタスクはキャンセルされます。 ソースが空で完了しているために値が取得できない場合には、返されたタスクの <see cref="T:System.InvalidOperationException" /> 例外がスローされます。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> は -1 ミリ秒以外の負数です。-1 は無制限のタイムアウト期間を表します。

または -
<paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary>非同期に操作をキャンセルするトークンを提供し、オプションのタイムアウト間隔を確認する指定したソースから値を受け取ります。</summary>
      <param name="source">値を受信する元のソース。</param>
      <param name="timeout">同期操作が完了するまで待機する最大時間間隔 (ミリ秒単位)。-1 ミリ秒を設定すると無制限に待機します。</param>
      <param name="cancellationToken">受信操作を取り消すために使用できるトークン。</param>
      <typeparam name="TOutput">ソースに含まれるデータの型。</typeparam>
      <returns>非同期の受信操作を表すタスク。 値をソースから正常に受け取った場合、返されたタスクが完了し、<see cref="P:System.Threading.Tasks.Task`1.Result" /> が値を返します。 タイムアウトの時間が経過するか、キャンセルが要求されたため値を取得できない場合には、返されたタスクはキャンセルされます。 ソースが空で完了しているために値が取得できない場合には、返されたタスクの <see cref="T:System.InvalidOperationException" /> 例外がスローされます。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> は -1 ミリ秒以外の負数です。-1 は無制限のタイムアウト期間を表します。

または -
<paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary>ターゲット メッセージ ブロックにメッセージを非同期的に提供し、遅延を可能にします。</summary>
      <param name="target">データをポストするターゲット。</param>
      <param name="item">ターゲットに提供される項目。</param>
      <typeparam name="TInput">ターゲットにポストするデータ型を指定します。</typeparam>
      <returns>非同期送信を表す <see cref="T:System.Threading.Tasks.Task`1" />。 ターゲットが <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" /> の呼び出し中に提供された要素を受け入れて使用する場合、呼び出しから戻ったときに、結果の <see cref="T:System.Threading.Tasks.Task`1" /> が完了し、その <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは <see langword="true" /> を返します。 ターゲットが呼び出し中に提供された要素を拒否する場合、呼び出しから戻ったときに、結果の <see cref="T:System.Threading.Tasks.Task`1" /> が完了し、その <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは <see langword="false" /> を返します。 提供された要素をターゲットが延期する場合、要素はターゲットが要素を使用または解放するまでバッファリングされます。要素が使用または解放された時点でタスクは完了し、<see cref="P:System.Threading.Tasks.Task`1.Result" /> はメッセージが使用されたかどうかを示します。 ターゲットがメッセージを使用または解放しようとしない場合、返されたタスクは完了しません。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)">
      <summary>ターゲット メッセージ ブロックにメッセージを非同期的に提供し、遅延を可能にします。</summary>
      <param name="target">データをポストするターゲット。</param>
      <param name="item">ターゲットに提供される項目。</param>
      <param name="cancellationToken">送信操作のキャンセルを要求するキャンセル トークン。</param>
      <typeparam name="TInput">ターゲットにポストするデータ型を指定します。</typeparam>
      <returns>非同期送信を表す <see cref="T:System.Threading.Tasks.Task`1" />。  ターゲットが SendAsync の呼び出し中に提供された要素を受け入れて使用する場合、呼び出しから戻ったときに、結果の <see cref="T:System.Threading.Tasks.Task`1" /> が完了し、その <c>Result</c> プロパティは true を返します。  ターゲットが呼び出し中に提供された要素を拒否する場合、呼び出しから戻ったときに、結果の <see cref="T:System.Threading.Tasks.Task`1" /> が完了し、その <c>Result</c> プロパティは false を返します。 提供された要素をターゲットが延期する場合、要素はターゲットが要素を使用または解放するまでバッファリングされます。要素が使用または解放された時点でタスクは完了し、<c>Result</c> はメッセージが使用されたかどうかを示します。 ターゲットがメッセージを使用または解放しようとしない場合、返されたタスクは完了しません。
送信されたデータをターゲットが正常に使用し終わる前に取り消しが要求された場合、返されるタスクは取り消された状態で完了し、データはターゲットで使用できなくなります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> は null (Visual Basic では Nothing) です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> から使用可能な出力項目を同期的に受信します。</summary>
      <param name="source">受信元のソース。</param>
      <param name="item">ソースから受信された項目。</param>
      <typeparam name="TOutput">ソースに格納されるデータの種類を指定します。</typeparam>
      <returns>項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions">
      <summary>データ フロー ブロックで実行される処理を構成するために使用するオプションを提供します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor">
      <summary>新しい <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> を初期化します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity">
      <summary>ブロックによってバッファリングできるメッセージ数の最大値を取得または設定します。</summary>
      <returns>最大メッセージ数。 既定値は -1 で、メッセージの数が無制限であることを示します。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.CancellationToken">
      <summary>キャンセル要求を監視するための <see cref="T:System.Threading.CancellationToken" /> を取得または設定します。</summary>
      <returns>トークン。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.EnsureOrdered">
      <summary>順次処理をブロックのメッセージの処理に強制するかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see langword="true" />順次処理を適用する場合は、それ以外<see langword="false" />の場合は。 既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.MaxMessagesPerTask">
      <summary>タスクごとに処理できるメッセージの最大数を取得または設定します。</summary>
      <returns>最大メッセージ数。 既定値は -1 で、メッセージの数が無制限であることを示します。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat">
      <summary>ブロックで名前がクエリされるときに使用する書式指定文字列を取得または設定します。</summary>
      <returns>ブロックで名前がクエリされるときに使用する書式指定文字列。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.TaskScheduler">
      <summary>タスクをスケジュールするために使用 <see cref="T:System.Threading.Tasks.TaskScheduler" /> を取得または設定します。</summary>
      <returns>タスク スケジューラ。</returns>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.Unbounded">
      <summary>上限を提示する <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> メンバーに無制限の数量を指定するために使用される定数。 このフィールドは定数です。</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions">
      <summary>データ フロー ブロック間のリンクを構成するために使用されるオプションを提供します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.#ctor">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> を初期化します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.Append">
      <summary>リンクをソースのリンク リストの後と前のどちらに追加するかを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Boolean" />を返します。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.MaxMessages">
      <summary>リンク全体で消費できるメッセージ数の最大値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Int32" />を返します。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.PropagateCompletion">
      <summary>リンクされたターゲットが完了およびエラーの通知を自動的に反映するかあるかどうかを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Boolean" />を返します。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader">
      <summary>データ フロー ブロック間で受け渡しするデータ属性のコンテナーを提供します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.#ctor(System.Int64)">
      <summary>指定した属性を使用して新しい <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を初期化します。</summary>
      <param name="id">メッセージの ID。 発生元のソース ブロック内で一意である必要があります。 これは、グローバルに一意である必要はありません。</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Object)">
      <summary>ボックス化された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> インスタンスの ID が等しいことを確認します。</summary>
      <param name="obj">ボックス化された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> インスタンス。</param>
      <returns>インスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>2 つの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> インスタンスの ID が等しいことをボックス化せずに確認します。</summary>
      <param name="other">別の <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> インスタンス。</param>
      <returns>インスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.GetHashCode">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> インスタンスのハッシュ コードを生成します。</summary>
      <returns>ハッシュ コード。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Id">
      <summary>ソース内のメッセージの ID を取得します。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />インスタンスに格納されている ID。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.IsValid">
      <summary>メッセージの有効性を取得します。</summary>
      <returns>メッセージの ID が 0 でない場合は <see langword="true" />。 メッセージの ID が 0 の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Equality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>2 つの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> インスタンスの ID が等しいことを確認します。</summary>
      <param name="left">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> のインスタンス。</param>
      <param name="right">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> のインスタンス。</param>
      <returns>インスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Inequality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>2 つの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> インスタンスの ID が等しくないことを確認します。</summary>
      <param name="left">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> のインスタンス。</param>
      <param name="right">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> のインスタンス。</param>
      <returns>インスタンスが等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageStatus">
      <summary>データフロー ブロック間で渡されるとき、<see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> の状態を表します。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> がメッセージを受け入れたことを示します。 ターゲットがメッセージを受け取ったら、そのメッセージがターゲットの完全所有となります。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> がメッセージを拒否したことを示します。 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> は引き続きそのメッセージを所有しています。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> がメッセージを拒否したことを示します。 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> は引き続きそのメッセージを所有しています。
また、<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> は、ソースから送信される以降のメッセージをすべて拒否します。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> が <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> からのメッセージの受け入れを試みましたが、メッセージが使用できなかったことを示します。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed">
      <summary>後で使用する可能性があるため、<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> がメッセージの受け入れを延期したことを示します。
<see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> は引き続きそのメッセージを所有しています。</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions">
      <summary>ユーザー指定デリゲートの呼び出しにより各メッセージを処理する、データフロー ブロックで実行される処理の構成に使用するオプションを提供します。 これらは <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> および <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> のようなデータ フローのブロックです。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.#ctor">
      <summary>新しい <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> を初期化します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism">
      <summary>ブロックによって同時に処理できるメッセージ数の最大値を取得します。</summary>
      <returns>最大メッセージ数。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.SingleProducerConstrained">
      <summary>データフロー ブロックを使用しているコードで、同時に使用できるプロデューサーが 1 つに制限されているかどうかを取得します。</summary>
      <returns>
        <see cref="T:System.Boolean" /> を返します。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions">
      <summary>複数のメッセージを一つにグループ化するデータフロー ブロックで実行される処理の構成に使用するオプションを提供します。 これらは <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> および <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> のようなデータ フローのブロックです。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.#ctor">
      <summary>新しい <see cref="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions" /> を初期化します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.Greedy">
      <summary>提供されたメッセージを最長一致で処理するかどうかを決定するために使用する Boolean 値を取得または設定します。</summary>
      <returns>提供されたメッセージを最長一致で処理する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.MaxNumberOfGroups">
      <summary>ブロックによって生成する必要があるグループの最大数を取得または設定します。</summary>
      <returns>最大グループ数。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IDataflowBlock">
      <summary>データ フロー ブロックを表します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete">
      <summary>これ以上メッセージを受け付けまたは生成せず、延期メッセージを使用しないことを <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> に通知します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion">
      <summary>データ フロー ブロックの非同期操作と完了を表す <see cref="T:System.Threading.Tasks.Task" /> を取得します。</summary>
      <returns>タスク。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> を <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で完了するようにします。</summary>
      <param name="exception">このエラーの原因となった <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2">
      <summary>データのターゲットとデータのソースの両方であるデータフローのブロックを表します。</summary>
      <typeparam name="TInput">によって<see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" />受け入れられるデータの種類を指定します。</typeparam>
      <typeparam name="TOutput">によって<see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" />提供されるデータの種類を指定します。</typeparam>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1">
      <summary>リンクせずにメッセージの受信をサポートするデータ フロー ブロックを表します。</summary>
      <typeparam name="TOutput">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> によって提供されるデータの種類を指定します。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>使用可能な出力項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="filter">受信するために値で正常に渡す必要がある述語。  <paramref name="filter" /> は <see langword="null" /> である可能性があります。その場合、すべての項目が渡されます。</param>
      <param name="item">ソースから受信された項目。</param>
      <returns>項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>使用可能なすべての項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="items">ソースから受信された項目。</param>
      <returns>1 つ以上の項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ISourceBlock`1">
      <summary>データのソースであるデータフロー ブロックを表します。</summary>
      <typeparam name="TOutput">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />によって提供されるデータの種類を指定します。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>前にこの <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって提供された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を受け入れて使用するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">使用中のメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">メッセージを使用している <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed">メッセージが正常に使用された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
      <returns>使用されたメッセージの値。 これは以前に予約されて <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> に <paramref name="messageHeader" /> として渡されたものとは異なる、<see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> のインスタンスに相当する場合があります。 使用する側の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> は、<see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> によって <paramref name="messageValue" /> として渡される値の代わりに、戻り値を使用する必要があります。
要求されたメッセージを使用できない場合、戻り値は null になります。</returns>
      <exception cref="T:System.ArgumentException">messageHeader が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">ターゲットが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>指定した <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> をリンクします。</summary>
      <param name="target">このソースの接続先の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">リンクを構成する <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> インスタンス。</param>
      <returns>Dispose の呼び出し時にソースをターゲットからリンク解除する IDisposable。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が null (Visual Basic の Nothing) または <paramref name="linkOptions" /> が null (Visual Basic の Nothing) です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって前に予約された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を解放するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">解放する予約済みメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">以前に予約したメッセージを解放する <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" /> がメッセージを予約しませんでした。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって前に提供された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を予約するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">予約するメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">メッセージを予約している <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <returns>メッセージが正常に予約された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ITargetBlock`1">
      <summary>データのターゲットであるデータ フロー ブロックを表します。</summary>
      <typeparam name="TInput">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって許容されるデータの種類を指定します。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>メッセージを <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に提供し、メッセージを使用または延期する機会をターゲットに与えます。</summary>
      <param name="messageHeader">提供されるメッセージのヘッダーを表す <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> インスタンス。</param>
      <param name="messageValue">提供されるメッセージの値。</param>
      <param name="source">メッセージを提供している <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 null でもかまいません。</param>
      <param name="consumeToAccept">メッセージを使用するために、<see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> を返す前に <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> の呼び出し中に <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> を同期的に呼び出すようにターゲットに指示する場合は、<see langword="true" /> に設定します。</param>
      <returns>提供されたメッセージのステータス。 メッセージがターゲットによって受け入れられた場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> が返されます。メッセージはターゲットに所有されるようになったので、ソースは提供されたメッセージを使用しないようにする必要があります。 メッセージがターゲットによって延期された場合、ターゲットが後でメッセージの使用または予約を試みる可能性があることを示す通知として <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> が返されます。その間、ソースはそのメッセージを引き続き所有し、他のブロックに提供する可能性があります。
ターゲットがメッセージを遅延するはずだったのに、ソースが <see langword="null" /> だった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> が代わりに返されます。
ターゲットがメッセージを受け入れようとしたが、ソースが別のターゲットにメッセージを配信したか、単純に破棄したため、受け入れることができなかった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> が返されます。
ターゲットがメッセージを受け入れなかった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> が返されます。 ターゲットがメッセージを受け入れず、今後、このソースからの別のメッセージを受け入れない場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> が返されます。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。
または、<paramref name="consumeToAccept" /> は、<paramref name="source" /> の値が null 以外である場合にのみ true にすることができます。</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`2">
      <summary>型が異なる可能性のある複数のデータフロー ソースとの間で結合するデータフロー ブロックを提供します。このデータフロー ブロックは、型ごとに 1 つの項目が到着するのを待機してから、型ごとに 1 つの項目から成るタプルとしてまとめて解放されます。</summary>
      <typeparam name="T1">ブロックの最初のターゲットが受け取るデータの種類を指定します。</typeparam>
      <typeparam name="T2">ブロックの 2 番目のターゲットが受け取るデータの種類を指定します。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor">
      <summary>新しい <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> を初期化します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>新しい <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> を初期化します。</summary>
      <param name="dataflowBlockOptions">この <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> の構成に使用するオプション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.Complete">
      <summary>これ以上メッセージを受け付けまたは生成せず、延期メッセージを使用しないことを <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> に通知します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Completion">
      <summary>データ フロー ブロックの非同期操作と完了を表す <see cref="T:System.Threading.Tasks.Task" /> を取得します。</summary>
      <returns>タスク。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>指定した <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> をリンクします。</summary>
      <param name="target">指定した <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> をリンクします。</param>
      <param name="linkOptions">リンクを構成する <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> インスタンス。</param>
      <returns>Dispose の呼び出し時にソースをターゲットからリンク解除する IDisposable。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が null (Visual Basic の Nothing) または <paramref name="linkOptions" /> が null (Visual Basic の Nothing) です。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.OutputCount">
      <summary>このブロックから取得できる出力項目の数を取得します。</summary>
      <returns>出力項目の数。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> を <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で完了するようにします。</summary>
      <param name="exception">このエラーの原因となった <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Boolean@)">
      <param name="messageHeader" />
      <param name="target" />
      <param name="messageConsumed" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target1">
      <summary>最初の型のメッセージを提供するために使用できるターゲットを取得します。</summary>
      <returns>ターゲット。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target2">
      <summary>2 番目の型のメッセージを提供するために使用できるターゲットを取得します。</summary>
      <returns>ターゲット。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.ToString">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceive(System.Predicate{System.Tuple{`0,`1}},System.Tuple{`0,`1}@)">
      <summary>使用可能な出力項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="filter">受信するために値で正常に渡す必要がある述語。  <paramref name="filter" /> は <see langword="null" /> である可能性があります。その場合、すべての項目が渡されます。</param>
      <param name="item">ソースから受信された項目。</param>
      <returns>項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1}}@)">
      <summary>使用可能なすべての項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="items">ソースから受信された項目。</param>
      <returns>1 つ以上の項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`3">
      <summary>型が異なる可能性のある複数のデータフロー ソースとの間で結合するデータフロー ブロックを提供します。このデータフロー ブロックは、型ごとに 1 つの項目が到着するのを待機してから、型ごとに 1 つの項目を含むタプルとしてまとめて解放されます。</summary>
      <typeparam name="T1">ブロックの最初のターゲットが受け取るデータの種類を指定します。</typeparam>
      <typeparam name="T2">ブロックの 2 番目のターゲットが受け取るデータの種類を指定します。</typeparam>
      <typeparam name="T3">ブロックの 3 番目のターゲットが受け取るデータの種類を指定します。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor">
      <summary>新しい <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" /> を初期化します。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>新しい <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" /> を初期化します。</summary>
      <param name="dataflowBlockOptions">この <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> の構成に使用するオプション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.Complete">
      <summary>これ以上メッセージを受け付けまたは生成せず、延期メッセージを使用しないことを <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> に通知します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Completion">
      <summary>データ フロー ブロックの非同期操作と完了を表す <see cref="T:System.Threading.Tasks.Task" /> を取得します。</summary>
      <returns>タスク。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>指定されたターゲット ブロックにソース ブロックをリンクします。</summary>
      <param name="target">このソースの接続先のターゲット ブロック。</param>
      <param name="linkOptions">リンクを構成するオブジェクト。</param>
      <returns>その <see cref="M:System.IDisposable.Dispose" /> メソッドが呼び出されたとき、ターゲットとソースのリンクを解除する、破棄可能なオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。

または -
<paramref name="linkOptions" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.OutputCount">
      <summary>このブロックから取得できる出力項目の数を取得します。</summary>
      <returns>出力項目の数。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> を <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で完了するようにします。</summary>
      <param name="exception">このエラーの原因となった <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Boolean@)">
      <param name="messageHeader" />
      <param name="target" />
      <param name="messageConsumed" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target1">
      <summary>最初の型のメッセージを提供するために使用できるターゲットを取得します。</summary>
      <returns>ターゲット。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target2">
      <summary>2 番目の型のメッセージを提供するために使用できるターゲットを取得します。</summary>
      <returns>ターゲット。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target3">
      <summary>3 番目の型のメッセージを提供するために使用できるターゲットを取得します。</summary>
      <returns>ターゲット。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.ToString">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceive(System.Predicate{System.Tuple{`0,`1,`2}},System.Tuple{`0,`1,`2}@)">
      <summary>使用可能な出力項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="filter">受信するために値で正常に渡す必要がある述語。  <paramref name="filter" /> は <see langword="null" /> である可能性があります。その場合、すべての項目が渡されます。</param>
      <param name="item">ソースから受信された項目。</param>
      <returns>項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1,`2}}@)">
      <summary>使用可能なすべての項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="items">ソースから受信された項目。</param>
      <returns>1 つ以上の項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformBlock`2">
      <summary>すべての受信データ要素の <see cref="T:System.Func`2" /> の指定されたデリゲートを呼び出すデータ フローのブロックを提供します。</summary>
      <typeparam name="TInput">この <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> によって受け取られ、操作されるデータの種類を指定します。</typeparam>
      <typeparam name="TOutput">この <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />によって出力されるデータの種類を指定します。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1})">
      <summary>指定した <see cref="T:System.Func`2" /> で新しい <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> を初期化します。</summary>
      <param name="transform">受信した各データ要素で呼び出す関数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>指定した <see cref="T:System.Func`2" /> と <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> を使用して新しい <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> を初期化します。</summary>
      <param name="transform">受信した各データ要素で呼び出す関数。</param>
      <param name="dataflowBlockOptions">この <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> の構成に使用するオプション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> が <see langword="null" /> です。

または -
<paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
      <summary>指定した <see cref="T:System.Func`2" /> で新しい <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> を初期化します。</summary>
      <param name="transform">受信した各データ要素で呼び出す関数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>指定した <see cref="T:System.Func`2" /> と <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> を使用して新しい <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> を初期化します。</summary>
      <param name="transform">受信した各データ要素で呼び出す関数。</param>
      <param name="dataflowBlockOptions">この <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> の構成に使用するオプション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> が <see langword="null" /> です。

または -
<paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.Complete">
      <summary>これ以上メッセージを受け付けまたは生成せず、延期メッセージを使用しないことを <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> に通知します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.Completion">
      <summary>データ フロー ブロックの非同期操作と完了を表す <see cref="T:System.Threading.Tasks.Task" /> を取得します。</summary>
      <returns>タスク。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.InputCount">
      <summary>このブロックで処理するために待機している入力項目の数を取得します。</summary>
      <returns>入力項目の数。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>指定した <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> をリンクします。</summary>
      <param name="target">このソースの接続先の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">リンクを構成する <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> インスタンス。</param>
      <returns>Dispose の呼び出し時にソースをターゲットからリンク解除する IDisposable。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が null (Visual Basic の Nothing) または <paramref name="linkOptions" /> が null (Visual Basic の Nothing) です。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.OutputCount">
      <summary>このブロックから取得できる出力項目の数を取得します。</summary>
      <returns>出力項目の数。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> を <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で完了するようにします。</summary>
      <param name="exception">このエラーの原因となった <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary>前にこの <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって提供された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を受け入れて使用するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">使用中のメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">メッセージを使用している <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed">メッセージが正常に使用された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
      <returns>使用されたメッセージの値。 これは以前に予約されて <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> に <paramref name="messageHeader" /> として渡されたものとは異なる、<see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> のインスタンスに相当する場合があります。 使用する側の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> は、<see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> によって <paramref name="messageValue" /> として渡される値の代わりに、戻り値を使用する必要があります。
要求されたメッセージを使用できない場合、戻り値は <see langword="null" /> になります。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって前に予約された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を解放するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">解放する予約済みメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">以前に予約したメッセージを解放する <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" /> がメッセージを予約しませんでした。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって前に提供された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を予約するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">予約するメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">メッセージを予約している <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <returns>メッセージが正常に予約された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>メッセージを <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に提供し、メッセージを使用または延期する機会をターゲットに与えます。</summary>
      <param name="messageHeader">提供されるメッセージのヘッダーを表す <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> インスタンス。</param>
      <param name="messageValue">提供されるメッセージの値。</param>
      <param name="source">メッセージを提供している <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 <see langword="null" /> でもかまいません。</param>
      <param name="consumeToAccept">ターゲットがメッセージを使用するために、<see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> を返す前に <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> の呼び出し中に <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> を同期的に呼び出す必要がある場合は <see langword="true" />。</param>
      <returns>提供されたメッセージのステータス。 メッセージがターゲットによって受け入れられた場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> が返されます。メッセージはターゲットに所有されるようになったので、ソースは提供されたメッセージを使用しないようにする必要があります。 メッセージがターゲットによって延期された場合、ターゲットが後でメッセージの使用または予約を試みる可能性があることを示す通知として <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> が返されます。その間、ソースはそのメッセージを引き続き所有し、他のブロックに提供する可能性があります。
ターゲットが遅延するはずだったのに、ソースが <see langword="null" /> だった場合は、代わりに <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> が返されます。
ターゲットがメッセージを受け入れようとしたが、ソースが別のターゲットにメッセージを配信したか、単純に破棄したため、受け入れることができなかった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> が返されます。
ターゲットがメッセージを受け入れなかった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> が返されます。 ターゲットがメッセージを受け入れず、今後、このソースからの別のメッセージを受け入れない場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> が返されます。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。
または、<paramref name="consumeToAccept" /> は、<paramref name="source" /> の値が null 以外である場合にのみ true にすることができます。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.ToString">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary>使用可能な出力項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="filter">受信するために値で正常に渡す必要がある述語。  <paramref name="filter" /> は <see langword="null" /> である可能性があります。その場合、すべての項目が渡されます。</param>
      <param name="item">ソースから受信された項目。</param>
      <returns>項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary>使用可能なすべての項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="items">ソースから受信された項目。</param>
      <returns>1 つ以上の項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2">
      <summary>すべての受信データ要素の <see cref="T:System.Func`2" /> の指定されたデリゲートを呼び出すデータ フローのブロックを提供します。</summary>
      <typeparam name="TInput">この <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> によって受け取られ、操作されるデータの種類を指定します。</typeparam>
      <typeparam name="TOutput">この <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> によって出力されるデータの種類を指定します。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}})">
      <summary>指定の関数で新しい <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> を初期化します。</summary>
      <param name="transform">受信した各データ要素で呼び出す関数。 返された <see cref="T:System.Collections.Generic.IEnumerable`1" /> のすべてのデータがこの <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> から出力として使用できるようになります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>指定した関数と <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> を使用して、新しい <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> を初期化します。</summary>
      <param name="transform">受信した各データ要素で呼び出す関数。 <see cref="T:System.Collections.Generic.IEnumerable`1" /> に返されたすべてのデータがこの <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> から出力として使用できるようになります。</param>
      <param name="dataflowBlockOptions">この <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> の構成に使用するオプション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> が <see langword="null" /> です。

または -
<paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})">
      <summary>指定の関数で新しい <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> を初期化します。</summary>
      <param name="transform">受信した各データ要素で呼び出す関数。 <see cref="T:System.Collections.Generic.IEnumerable`1" /> に非同期的に返されたすべてのデータがこの <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> から出力として使用できるようになります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>指定した関数と <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> を使用して、新しい <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> を初期化します。</summary>
      <param name="transform">受信した各データ要素で呼び出す関数。 <see cref="T:System.Collections.Generic.IEnumerable`1" /> に非同期的に返されたすべてのデータがこの <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> から出力として使用できるようになります。</param>
      <param name="dataflowBlockOptions">この <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> の構成に使用するオプション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> が <see langword="null" /> です。

または -
<paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Complete">
      <summary>これ以上メッセージを受け付けまたは生成せず、延期メッセージを使用しないことを <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> に通知します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Completion">
      <summary>データ フロー ブロックの非同期操作と完了を表す <see cref="T:System.Threading.Tasks.Task" /> を取得します。</summary>
      <returns>タスク。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.InputCount">
      <summary>このブロックで処理するために待機している入力項目の数を取得します。</summary>
      <returns>入力項目の数。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>指定した <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> をリンクします。</summary>
      <param name="target">このソースの接続先の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">リンクを構成する <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> インスタンス。</param>
      <returns>Dispose の呼び出し時にソースをターゲットからリンク解除する IDisposable。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が null (Visual Basic の Nothing) または <paramref name="linkOptions" /> が null (Visual Basic の Nothing) です。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.OutputCount">
      <summary>このブロックから取得できる出力項目の数を取得します。</summary>
      <returns>出力項目の数。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> を <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で完了するようにします。</summary>
      <param name="exception">このエラーの原因となった <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary>前にこの <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって提供された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を受け入れて使用するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">使用中のメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">メッセージを使用している <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed">メッセージが正常に使用された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
      <returns>使用されたメッセージの値。 これは以前に予約されて <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> に <paramref name="messageHeader" /> として渡されたものとは異なる、<see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> のインスタンスに相当する場合があります。 使用する側の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> は、OfferMessage の <see cref="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> によって <paramref name="messageValue" /> として渡される値の代わりに、戻り値を使用する必要があります。
要求されたメッセージを使用できない場合、戻り値は <see langword="null" /> になります。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって前に予約された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を解放するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">解放する予約済みメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">以前に予約したメッセージを解放する <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" /> がメッセージを予約しませんでした。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって前に提供された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を予約するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">予約するメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">メッセージを予約している <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <returns>メッセージが正常に予約された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>メッセージを <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に提供し、メッセージを使用または延期する機会をターゲットに与えます。</summary>
      <param name="messageHeader">提供されるメッセージのヘッダーを表す <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> インスタンス。</param>
      <param name="messageValue">提供されるメッセージの値。</param>
      <param name="source">メッセージを提供している <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 <see langword="null" /> でもかまいません。</param>
      <param name="consumeToAccept">ターゲットがメッセージを使用するために、<see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> を返す前に <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> の呼び出し中に <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> を同期的に呼び出す必要がある場合は <see langword="true" />。</param>
      <returns>提供されたメッセージのステータス。 メッセージがターゲットによって受け入れられた場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> が返されます。メッセージはターゲットに所有されるようになったので、ソースは提供されたメッセージを使用しないようにする必要があります。 メッセージがターゲットによって延期された場合、ターゲットが後でメッセージの使用または予約を試みる可能性があることを示す通知として <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> が返されます。その間、ソースはそのメッセージを引き続き所有し、他のブロックに提供する可能性があります。
ターゲットが遅延するはずだったのに、ソースが <see langword="null" /> だった場合は、代わりに <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> が返されます。
ターゲットがメッセージを受け入れようとしたが、ソースが別のターゲットにメッセージを配信したか、単純に破棄したため、受け入れることができなかった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> が返されます。
ターゲットがメッセージを受け入れなかった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> が返されます。 ターゲットがメッセージを受け入れず、今後、このソースからの別のメッセージを受け入れない場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> が返されます。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。

または -
<paramref name="consumeToAccept" /> は、<paramref name="source" /> の値が null 以外である場合にのみ true にすることができます。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ToString">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary>使用可能な出力項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="filter">受信するために値で正常に渡す必要がある述語。  <paramref name="filter" /> は <see langword="null" /> である可能性があります。その場合、すべての項目が渡されます。</param>
      <param name="item">ソースから受信された項目。</param>
      <returns>項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary>使用可能なすべての項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="items">ソースから受信された項目。</param>
      <returns>1 つ以上の項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1">
      <summary>データ フロー ブロックのネットワークで、最大で 1 個の要素を受け取り格納するバッファーを提供します。</summary>
      <typeparam name="T">このデータフロー ブロックによりバッファリングされるデータの種類を指定します。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0})">
      <summary>新しい <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" /> を初期化します。</summary>
      <param name="cloningFunction">他のブロックに提供された場合、データを複製するために使用する関数。</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>指定した <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> で新しい <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" /> を初期化します。</summary>
      <param name="cloningFunction">他のブロックに提供された場合、データを複製するために使用する関数。</param>
      <param name="dataflowBlockOptions">この <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" /> の構成に使用するオプション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Complete">
      <summary>これ以上メッセージを受け付けまたは生成せず、延期メッセージを使用しないことを <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> に通知します。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Completion">
      <summary>データ フロー ブロックの非同期操作と完了を表す <see cref="T:System.Threading.Tasks.Task" /> を取得します。</summary>
      <returns>タスク。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>指定した <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> をリンクします。</summary>
      <param name="target">このソースの接続先の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">リンクを構成する <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> インスタンス。</param>
      <returns>Dispose の呼び出し時にソースをターゲットからリンク解除する IDisposable。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が null (Visual Basic の Nothing) または <paramref name="linkOptions" /> が null (Visual Basic の Nothing) です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> を <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で完了するようにします。</summary>
      <param name="exception">このエラーの原因となった <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>使用可能なすべての項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="items">ソースから受信された項目。</param>
      <returns>1 つ以上の項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>前にこの <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって提供された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を受け入れて使用するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">使用中のメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">メッセージを使用している <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed">メッセージが正常に使用された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
      <returns>使用されたメッセージの値。 これは以前に予約されて <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> に <paramref name="messageHeader" /> として渡されたものとは異なる、<see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> のインスタンスに相当する場合があります。 使用する側の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> は、<see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> によって <paramref name="messageValue" /> として渡される値の代わりに、戻り値を使用する必要があります。
要求されたメッセージを使用できない場合、戻り値は <see langword="null" /> になります。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって前に予約された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を解放するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">解放する予約済みメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">以前に予約したメッセージを解放する <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" /> がメッセージを予約しませんでした。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> によって前に提供された <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> を予約するために、リンクされた <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> によって呼び出されます。</summary>
      <param name="messageHeader">予約するメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">メッセージを予約している <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <returns>メッセージが正常に予約された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>メッセージを <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に提供し、メッセージを使用または延期する機会をターゲットに与えます。</summary>
      <param name="messageHeader">提供されるメッセージのヘッダーを表す <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> インスタンス。</param>
      <param name="messageValue">提供されるメッセージの値。</param>
      <param name="source">メッセージを提供している <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 <see langword="null" /> でもかまいません。</param>
      <param name="consumeToAccept">メッセージを使用するために、<see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> を返す前に <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> の呼び出し中に <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> を同期的に呼び出すようにターゲットに指示する場合は、<see langword="true" /> に設定します。</param>
      <returns>提供されたメッセージのステータス。 メッセージがターゲットによって受け入れられた場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> が返されます。メッセージはターゲットに所有されるようになったので、ソースは提供されたメッセージを使用しないようにする必要があります。 メッセージがターゲットによって延期された場合、ターゲットが後でメッセージの使用または予約を試みる可能性があることを示す通知として <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> が返されます。その間、ソースはそのメッセージを引き続き所有し、他のブロックに提供する可能性があります。
ターゲットがメッセージを遅延するはずだったのに、<paramref name="source" /> が <see langword="null" /> だった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> が代わりに返されます。
ターゲットがメッセージを受け入れようとしたが、ソースが別のターゲットにメッセージを配信したか、単純に破棄したため、受け入れることができなかった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> が返されます。
ターゲットがメッセージを受け入れなかった場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> が返されます。 ターゲットがメッセージを受け入れず、今後、このソースからの別のメッセージを受け入れない場合は、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> が返されます。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> が有効ではありません。
または、<paramref name="consumeToAccept" /> は、<paramref name="source" /> の値が null 以外である場合にのみ true にすることができます。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.ToString">
      <summary>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列を返します。</summary>
      <returns>この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>使用可能な出力項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</summary>
      <param name="filter">受信するために値で正常に渡す必要がある述語。  <paramref name="filter" /> は <see langword="null" /> である可能性があります。その場合、すべての項目が渡されます。</param>
      <param name="item">ソースから受信された項目。</param>
      <returns>項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
  </members>
</doc>
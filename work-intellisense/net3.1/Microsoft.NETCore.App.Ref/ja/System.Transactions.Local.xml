<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Transactions.Local</name>
  </assembly>
  <members>
    <member name="T:System.Transactions.CommittableTransaction">
      <summary>コミットできるトランザクションを示します。</summary>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor">
      <summary>
        <see cref="T:System.Transactions.CommittableTransaction" /> クラスの新しいインスタンスを初期化します。</summary>
      <exception cref="T:System.PlatformNotSupportedException">Windows 98、Windows 98 Second Edition、または Windows Millennium Edition でトランザクションを作成しようとしました。</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
      <summary>指定した <paramref name="timeout" /> 値を使用して、<see cref="T:System.Transactions.CommittableTransaction" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="timeout">トランザクションが中止されるまでに存在できる最大時間。</param>
      <exception cref="T:System.PlatformNotSupportedException">Windows 98、Windows 98 Second Edition、または Windows Millennium Edition でトランザクションを作成しようとしました。</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
      <summary>指定したトランザクション オプションを使用して、<see cref="T:System.Transactions.CommittableTransaction" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="options">新しいトランザクションで使用するトランザクション オプションを示す <see cref="T:System.Transactions.TransactionOptions" /> 構造体。</param>
      <exception cref="T:System.PlatformNotSupportedException">Windows 98、Windows 98 Second Edition、または Windows Millennium Edition でトランザクションを作成しようとしました。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> が無効です。</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
      <summary>非同期的にトランザクションをコミットする試みを開始します。</summary>
      <param name="asyncCallback">トランザクションの完了時に呼び出される <see cref="T:System.AsyncCallback" /> デリゲート。 このパラメーターは <see langword="null" /> になる可能性があります。この場合、アプリケーションにはトランザクションの完了が通知されません。 代わりに、アプリケーションは <see cref="T:System.IAsyncResult" /> インターフェイスを使用してトランザクションが完了したかどうかをチェックし、その結果に応じて待機するか、または <see cref="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" /> を呼び出して完了するまで待機する必要があります。</param>
      <param name="asyncState">非同期のコミットに関連付けられた、任意のステータス情報を格納している可能性のあるオブジェクト。 このオブジェクトはコールバックに渡されます。<see cref="N:System.Transactions" /> では解釈されません。 null 参照は許可されています。</param>
      <returns>呼び出し元が非同期操作のステータスのチェックや操作完了までの待機に使用できる <see cref="T:System.IAsyncResult" /> インターフェイス。</returns>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.Commit">
      <summary>トランザクションをコミットしようとします。</summary>
      <exception cref="T:System.Transactions.TransactionInDoubtException">トランザクションで <see cref="M:System.Transactions.CommittableTransaction.Commit" /> が呼び出され、トランザクションが <see cref="F:System.Transactions.TransactionStatus.InDoubt" /> の状態になります。</exception>
      <exception cref="T:System.Transactions.TransactionAbortedException">
        <see cref="M:System.Transactions.CommittableTransaction.Commit" /> が呼び出され、トランザクションが初めてロールバックされます。</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
      <summary>非同期的にトランザクションをコミットする試みを終了します。</summary>
      <param name="asyncResult">非同期のコミットに関連付けられた <see cref="T:System.IAsyncResult" /> オブジェクト。</param>
      <exception cref="T:System.Transactions.TransactionAbortedException">
        <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> が呼び出され、トランザクションが初めてロールバックされます。</exception>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState">
      <summary>
        <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> メソッド呼び出しの最後のパラメーターに指定されたオブジェクトを取得します。</summary>
      <returns>
        <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> メソッド呼び出しの最後のパラメーターに指定されたオブジェクト。</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle">
      <summary>非同期操作が完了するまで待機するために使用する <see cref="T:System.Threading.WaitHandle" /> を取得します。</summary>
      <returns>非同期操作が完了するまで待機するために使用する <see cref="T:System.Threading.WaitHandle" />。</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
      <summary>非同期のコミット操作が同期的に完了したかどうかを示す値を取得します。</summary>
      <returns>非同期のコミット操作が同期的に完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このプロパティは、操作が同期的に完了した場合でも、常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted">
      <summary>非同期のコミット操作が完了したかどうかを示す値を取得します。</summary>
      <returns>操作が終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Transactions.DependentCloneOption">
      <summary>作成する依存トランザクションの種類を制御します。</summary>
    </member>
    <member name="F:System.Transactions.DependentCloneOption.BlockCommitUntilComplete">
      <summary>依存トランザクションは、親トランザクションがタイムアウトするか、<see cref="M:System.Transactions.DependentTransaction.Complete" /> が呼び出されるまで、トランザクションのコミット プロセスをブロックします。 この場合、トランザクションで追加作業を行ったり、新しい参加リストを作成したりできます。</summary>
    </member>
    <member name="F:System.Transactions.DependentCloneOption.RollbackIfNotComplete">
      <summary>親トランザクションで <see cref="M:System.Transactions.DependentTransaction.Complete" /> が呼び出される前に Commit が呼び出されると、依存トランザクションは自動的にトランザクションを中止します。</summary>
    </member>
    <member name="T:System.Transactions.DependentTransaction">
      <summary>トランザクションの作業に関してアプリケーションが停止するまで、トランザクションをコミットできないようにする、トランザクションの複製を記述します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Transactions.DependentTransaction.Complete">
      <summary>依存トランザクションの完了を試みます。</summary>
      <exception cref="T:System.Transactions.TransactionException">このメソッドが呼び出された後の、トランザクションへの追加作業の試み。 これらには、<see cref="Overload:System.Transactions.Transaction.EnlistVolatile" />、<see cref="Overload:System.Transactions.Transaction.EnlistDurable" />、<see cref="M:System.Transactions.Transaction.Clone" />、<see cref="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)" />、またはトランザクション上の任意のシリアル化操作などの、メソッドの呼び出しが含まれます。</exception>
    </member>
    <member name="T:System.Transactions.Enlistment">
      <summary>トランザクションの最終フェーズにおいて、トランザクションに参加している参加要素とトランザクション マネージャーの間の通信を容易にします。</summary>
    </member>
    <member name="M:System.Transactions.Enlistment.Done">
      <summary>トランザクション参加要素が作業を完了したことを示します。</summary>
    </member>
    <member name="T:System.Transactions.EnlistmentOptions">
      <summary>準備フェーズにおいて、オブジェクトをトランザクションに参加させるかどうかを判断します。</summary>
    </member>
    <member name="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired">
      <summary>コミット プロセスの初期フェーズにおいて、オブジェクトが参加する必要があります。</summary>
    </member>
    <member name="F:System.Transactions.EnlistmentOptions.None">
      <summary>コミット プロセスの初期フェーズにおいて、オブジェクトが参加する必要はありません。</summary>
    </member>
    <member name="T:System.Transactions.EnterpriseServicesInteropOption">
      <summary>分散トランザクションが COM+ トランザクションとどのようにやり取りするかを指定します。</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.Automatic">
      <summary>既存の COM+ コンテキストを検索し、存在する場合は、その COM+ コンテキストと同期させます。</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.Full">
      <summary>
        <see cref="N:System.EnterpriseServices" /> コンテキスト (<see cref="P:System.EnterpriseServices.ContextUtil.Transaction" /> クラスの静的メソッド <see cref="T:System.EnterpriseServices.ContextUtil" /> を呼び出すことによって取得できます) と <see cref="N:System.Transactions" /> アンビエント トランザクション (<see cref="P:System.Transactions.Transaction.Current" /> クラスの静的メソッド <see cref="T:System.Transactions.Transaction" /> を呼び出すことによって取得できます) は常に同期されます。 この結果、新しい <see cref="N:System.EnterpriseServices" /> コンテキストを作成しなければならない場合があるため、パフォーマンスが低下します。</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.None">
      <summary>
        <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" /> と <see cref="P:System.Transactions.Transaction.Current" /> は同期されていません。</summary>
    </member>
    <member name="T:System.Transactions.HostCurrentTransactionCallback">
      <summary>ホスト環境が <see cref="P:System.Transactions.Transaction.Current" /> の独自の既定概念を提供するための機構を用意します。</summary>
      <returns>
        <see cref="T:System.Transactions.Transaction" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Transactions.IDtcTransaction">
      <summary>DTC トランザクションを説明します。</summary>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.Abort(System.IntPtr,System.Int32,System.Int32)">
      <summary>トランザクションを中止します。</summary>
      <param name="reason">トランザクションが中止される理由を示すオプションの <see cref="T:System.EnterpriseServices.BOID" />。 このパラメーターに <see langword="null" /> を指定して、中止の理由が示されないようにすることもできます。</param>
      <param name="retaining">この値は <see langword="false" /> にする必要があります。</param>
      <param name="async">
        <paramref name="async" /> が <see langword="true" /> の場合、非同期中止が実行されるため、呼び出し元は <see langword="ITransactionOutcomeEvents" /> を使用してトランザクションの結果を確認する必要があります。</param>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.Commit(System.Int32,System.Int32,System.Int32)">
      <summary>トランザクションをコミットします。</summary>
      <param name="retaining">この値は <see langword="false" /> にする必要があります。</param>
      <param name="commitType">OLE DB 列挙値 <see langword="XACTTC" /> から取得した値。</param>
      <param name="reserved">必ずゼロを指定します。</param>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.GetTransactionInfo(System.IntPtr)">
      <summary>トランザクションに関する情報を取得します。</summary>
      <param name="transactionInformation">トランザクションについての情報を受け取る、呼び出し元によって割り当てられた <see cref="T:System.EnterpriseServices.XACTTRANSINFO" /> 構造体のポインター。 この値は <see langword="null" /> にしないでください。</param>
    </member>
    <member name="T:System.Transactions.IEnlistmentNotification">
      <summary>リソース マネージャーが参加の登録時にトランザクション マネージャーに対して 2 フェーズ コミット通知コールバックを提供するために実装する必要があるインターフェイスについて説明します。</summary>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)">
      <summary>トランザクションのコミット中であることを参加オブジェクトに通知します。</summary>
      <param name="enlistment">トランザクション マネージャーに対して応答を送信するために使用する <see cref="T:System.Transactions.Enlistment" /> オブジェクト。</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)">
      <summary>トランザクションのステータスが未決定であることを参加オブジェクトに通知します。</summary>
      <param name="enlistment">トランザクション マネージャーに対して応答を送信するために使用する <see cref="T:System.Transactions.Enlistment" /> オブジェクト。</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)">
      <summary>トランザクションのコミットの準備中であることを参加オブジェクトに通知します。</summary>
      <param name="preparingEnlistment">トランザクション マネージャーに応答を送信するために使用する <see cref="T:System.Transactions.PreparingEnlistment" /> オブジェクト。</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)">
      <summary>トランザクションのロールバック (中止) 中であることを参加オブジェクトに通知します。</summary>
      <param name="enlistment">トランザクション マネージャーに応答を送信するために使用する <see cref="T:System.Transactions.Enlistment" /> オブジェクト。</param>
    </member>
    <member name="T:System.Transactions.IPromotableSinglePhaseNotification">
      <summary>リソース マネージャー内部の非分散トランザクションのコミット デリゲートとして機能するオブジェクトを示します。</summary>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.Initialize">
      <summary>トランザクション参加要素に、参加が正常に完了したことを通知します。</summary>
      <exception cref="T:System.Transactions.TransactionException">トランザクションの参加またはシリアル化を行おうとしました。</exception>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.Rollback(System.Transactions.SinglePhaseEnlistment)">
      <summary>トランザクションのロールバック中であることを参加オブジェクトに通知します。</summary>
      <param name="singlePhaseEnlistment">トランザクション マネージャーに応答を送信するために使用する <see cref="T:System.Transactions.SinglePhaseEnlistment" /> オブジェクト。</param>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary>トランザクションがコミット中であることを参加オブジェクトに通知します。</summary>
      <param name="singlePhaseEnlistment">トランザクション マネージャーに応答を送信するために使用する <see cref="T:System.Transactions.SinglePhaseEnlistment" /> インターフェイス。</param>
    </member>
    <member name="T:System.Transactions.ISimpleTransactionSuperior">
      <summary>ルート トランザクションではないが、MSDTC で管理するためにエスカレートできるトランザクションを表します。</summary>
    </member>
    <member name="M:System.Transactions.ISimpleTransactionSuperior.Rollback">
      <summary>トランザクションのロールバック中であることを参加オブジェクトに通知します。</summary>
    </member>
    <member name="T:System.Transactions.ISinglePhaseNotification">
      <summary>トランザクションに参加するための単一フェーズ コミットの最適化をサポートしているリソース オブジェクトについて説明します。</summary>
    </member>
    <member name="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary>単一フェーズ コミットの最適化に対応したリソース マネージャーにおけるコールバックの実装を表します。</summary>
      <param name="singlePhaseEnlistment">トランザクション マネージャーに応答を送信するために使用する <see cref="T:System.Transactions.SinglePhaseEnlistment" />。</param>
    </member>
    <member name="T:System.Transactions.IsolationLevel">
      <summary>トランザクションの分離レベルを指定します。</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Chaos">
      <summary>これより分離性の高いトランザクションからの保留中の変更に対しては上書きできません。</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.ReadCommitted">
      <summary>揮発性データをトランザクション中に読み取ることはできませんが、変更することはできます。</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.ReadUncommitted">
      <summary>揮発性データをトランザクション中に読み取ったり、変更したりできます。</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.RepeatableRead">
      <summary>揮発性データをトランザクション中に読み取ることはできますが、変更することはできません。 トランザクション中に新しいデータを追加できます。</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Serializable">
      <summary>揮発性データを読み取ることはできますが、変更することはできません。また、トランザクション中に新しいデータを追加することはできません。</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Snapshot">
      <summary>揮発性データを読み取ることができます。 トランザクションがデータを変更する前に、データを最初に読み取った後に別のトランザクションがそれを変更していないかどうかを検査します。 データが更新されている場合は、エラーが発生します。 これにより、トランザクションは、データの前回コミットされた値に到達できます。
<see langword="Snapshot" /> 分離レベルを使用して作成したトランザクションを昇格させようとすると、エラー メッセージ「IsolationLevel スナップショットのあるトランザクションは上位変換できません」と共に <see cref="T:System.InvalidOperationException" /> がスローされます。</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Unspecified">
      <summary>指定した分離レベルとは異なる分離レベルが使用されていますが、レベルを確認できません。 この値が設定されている場合は、例外がスローされます。</summary>
    </member>
    <member name="T:System.Transactions.ITransactionPromoter">
      <summary>必要に応じて、MSDTC で管理するためにエスカレートできる、既存のトランザクションの処理を代行させるトランザクションを記述します。</summary>
    </member>
    <member name="M:System.Transactions.ITransactionPromoter.Promote">
      <summary>参加しているオブジェクトに対して、処理を代行させるトランザクションの発生が要求されたことを通知します。</summary>
      <returns>分散トランザクションをマーシャリングするトランスミッタ/レシーバー反映トークン。 詳細については、「<see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />」を参照してください。</returns>
    </member>
    <member name="T:System.Transactions.PreparingEnlistment">
      <summary>トランザクションの準備フェーズにおいて、参加するトランザクションの参加要素とトランザクション マネージャーの間の通信を容易にします。</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.ForceRollback">
      <summary>トランザクションをロールバックする必要があることを示します。</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.ForceRollback(System.Exception)">
      <summary>トランザクションをロールバックする必要があることを示します。</summary>
      <param name="e">ロールバックを発生させる理由の説明。</param>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.Prepared">
      <summary>トランザクションをコミットできることを示します。</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.RecoveryInformation">
      <summary>参加リストの修復情報を取得します。</summary>
      <returns>参加リストの修復情報。</returns>
      <exception cref="T:System.InvalidOperationException">修復情報を生成しない揮発性の参加リストで修復情報を取得しようとしました。</exception>
    </member>
    <member name="T:System.Transactions.SinglePhaseEnlistment">
      <summary>
        <see cref="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)" /> 通知を受け取ったときに、単一フェーズ コミットに参加している参加要素とトランザクション マネージャーの間の通信を容易にする一連のコールバックを提供します。</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Aborted">
      <summary>トランザクションをロールバックする必要があることをトランザクション マネージャーに示すために使用されるコールバックを表します。</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Aborted(System.Exception)">
      <summary>トランザクションをロールバックする必要があることをトランザクション マネージャーに示すために使用されるコールバックを表し、説明を提供します。</summary>
      <param name="e">ロールバックを実行する理由の説明。</param>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Committed">
      <summary>単一フェーズ コミットが正常に実行されたことをトランザクション マネージャーに示すために使用されるコールバックを表します。</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.InDoubt">
      <summary>トランザクションの状態が未決定であるということをトランザクション マネージャーに示すために使用されるコールバックを表します。</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.InDoubt(System.Exception)">
      <summary>トランザクションの状態が未決定であるということをトランザクション マネージャーに示すために使用されるコールバックを表し、説明を提供します。</summary>
      <param name="e">トランザクションが未決定である理由の説明。</param>
    </member>
    <member name="T:System.Transactions.SubordinateTransaction">
      <summary>処理を代行させることのできる非ルート トランザクションを表します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Transactions.SubordinateTransaction.#ctor(System.Transactions.IsolationLevel,System.Transactions.ISimpleTransactionSuperior)">
      <summary>
        <see cref="T:System.Transactions.SubordinateTransaction" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="isoLevel">トランザクションの分離レベル。</param>
      <param name="superior">
        <see cref="T:System.Transactions.ISimpleTransactionSuperior" />。</param>
    </member>
    <member name="T:System.Transactions.Transaction">
      <summary>トランザクションを表します。</summary>
    </member>
    <member name="M:System.Transactions.Transaction.Clone">
      <summary>トランザクションの複製を作成します。</summary>
      <returns>現在のトランザクション オブジェクトのコピーである <see cref="T:System.Transactions.Transaction" />。</returns>
    </member>
    <member name="P:System.Transactions.Transaction.Current">
      <summary>アンビエント トランザクションを取得または設定します。</summary>
      <returns>現在のトランザクションを説明する <see cref="T:System.Transactions.Transaction" />。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)">
      <summary>トランザクションの依存する複製を作成します。</summary>
      <param name="cloneOption">作成する依存トランザクションの種類を制御する <see cref="T:System.Transactions.DependentCloneOption" />。</param>
      <returns>依存する複製を表す <see cref="T:System.Transactions.DependentTransaction" />。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Dispose">
      <summary>オブジェクトによって保持されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
      <summary>2 フェーズ コミットをサポートし、トランザクションに参加する永続的リソース マネージャーを参加させます。</summary>
      <param name="resourceManagerIdentifier">リソース マネージャーのエラーの保持または再起動を必要とするリソース マネージャーの一意の識別子。</param>
      <param name="enlistmentNotification">2 フェーズ コミットの通知を受け取るために <see cref="T:System.Transactions.IEnlistmentNotification" /> インターフェイスを実装するオブジェクト。</param>
      <param name="enlistmentOptions">リソース マネージャーが、準備フェーズ中に追加の処理を実行する場合 <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />。</param>
      <returns>参加リストについて記述している <see cref="T:System.Transactions.Enlistment" />オブジェクト。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>単一フェーズ コミットの最適化をサポートし、トランザクションに参加する永続的リソース マネージャーを参加させます。</summary>
      <param name="resourceManagerIdentifier">リソース マネージャーのエラーの保持または再起動を必要とするリソース マネージャーの一意の識別子。</param>
      <param name="singlePhaseNotification">
        <see cref="T:System.Transactions.ISinglePhaseNotification" /> インターフェイスを実装し、単一フェーズ コミットと 2 フェーズ コミットの通知を受け取ることができる必要のあるオブジェクト。</param>
      <param name="enlistmentOptions">リソース マネージャーが、準備フェーズ中に追加の処理を実行する場合 <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />。</param>
      <returns>参加リストについて記述している <see cref="T:System.Transactions.Enlistment" />オブジェクト。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)">
      <summary>昇格可能な単一フェーズの参加リスト (PSPE) を使用して、内部トランザクションを持つリソース マネージャーを参加させます。</summary>
      <param name="promotableSinglePhaseNotification">参加者によって実装された <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> インターフェイス。</param>
      <returns>参加リストを記述する <see cref="T:System.Transactions.SinglePhaseEnlistment" /> インターフェイスの実装。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)">
      <summary>昇格可能な単一フェーズの参加リスト (PSPE) を使用して、内部トランザクションを持つリソース マネージャーを参加させます。</summary>
      <param name="promotableSinglePhaseNotification">参加者によって実装された <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> インターフェイス。</param>
      <param name="promoterType">分散トランザクション プロセッサの種類。</param>
      <returns>参加リストを記述する <see cref="T:System.Transactions.SinglePhaseEnlistment" /> インターフェイスの実装。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
      <summary>トランザクションに参加する 2 フェーズ コミットをサポートしている揮発性リソース マネージャーを参加させます。</summary>
      <param name="enlistmentNotification">2 フェーズ コミット通知を受信する <see cref="T:System.Transactions.IEnlistmentNotification" /> インターフェイスを実装するオブジェクト。</param>
      <param name="enlistmentOptions">リソース マネージャーが、準備フェーズ中に追加の処理を実行する場合 <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />。</param>
      <returns>参加リストについて記述している <see cref="T:System.Transactions.Enlistment" />オブジェクト。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>単一フェーズ コミットの最適化をサポートし、トランザクションに参加する揮発性リソース マネージャーを参加させます。</summary>
      <param name="singlePhaseNotification">
        <see cref="T:System.Transactions.ISinglePhaseNotification" /> インターフェイスを実装し、単一フェーズ コミットと 2 フェーズ コミットの通知を受け取ることができる必要のあるオブジェクト。</param>
      <param name="enlistmentOptions">リソース マネージャーが、準備フェーズ中に追加の処理を実行する場合 <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />。</param>
      <returns>参加リストについて記述している <see cref="T:System.Transactions.Enlistment" />オブジェクト。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Equals(System.Object)">
      <summary>このトランザクションと指定したオブジェクトが等しいかどうかを判断します。</summary>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <returns>
        <paramref name="obj" /> とこのトランザクションが同一である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.GetPromotedToken">
      <summary>トランザクションを昇格するときに、<c>Promote</c> メソッドで返される <c>byte[]</c> を取得します。</summary>
      <returns>トランザクションを昇格するときに、<c>Promote</c> メソッドで返される <c>byte[]</c>。</returns>
    </member>
    <member name="P:System.Transactions.Transaction.IsolationLevel">
      <summary>トランザクションの分離レベルを取得します。</summary>
      <returns>トランザクションの分離レベルを示す <see cref="T:System.Transactions.IsolationLevel" /> 値のいずれか。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)">
      <summary>指定した 2 つの <see cref="T:System.Transactions.Transaction" /> インスタンスが等価であるかどうかをテストします。</summary>
      <param name="x">等値演算子の左側に表示される <see cref="T:System.Transactions.Transaction" /> インスタンス。</param>
      <param name="y">等値演算子の右側に表示される <see cref="T:System.Transactions.Transaction" /> インスタンス。</param>
      <returns>
        <see langword="true" /> と <paramref name="x" /> が等しい場合は <paramref name="y" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)">
      <summary>2 つの <see cref="T:System.Transactions.Transaction" /> インスタンスが等しくないかどうかを示す値を返します。</summary>
      <param name="x">非等値演算子の左側に表示される <see cref="T:System.Transactions.Transaction" /> インスタンス。</param>
      <param name="y">非等値演算子の右側に表示される <see cref="T:System.Transactions.Transaction" /> インスタンス。</param>
      <returns>
        <paramref name="x" /> と <paramref name="y" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>2 フェーズ コミットをサポートし、トランザクションに参加する永続的リソース マネージャーを昇格および参加させます。</summary>
      <param name="resourceManagerIdentifier">リソース マネージャーのエラーの保持または再起動を必要とするリソース マネージャーの一意の識別子。</param>
      <param name="promotableNotification">リソース マネージャー内部の非分散トランザクションのコミット デリゲートとして機能するオブジェクト。</param>
      <param name="enlistmentNotification">2 フェーズ コミットの通知を受け取るために <see cref="T:System.Transactions.IEnlistmentNotification" /> インターフェイスを実装するオブジェクト。</param>
      <param name="enlistmentOptions">リソース マネージャーが、準備フェーズ中に追加の処理を実行する場合 <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />。</param>
    </member>
    <member name="P:System.Transactions.Transaction.PromoterType">
      <summary>トランザクションを昇格するときに、Promote メソッドで返される <c>byte[]</c> の形式を一意に識別します。</summary>
      <returns>トランザクションが昇格されるときに、Promote メソッドによって返される<c>byte []</c>の形式を一意に識別する guid。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Rollback">
      <summary>トランザクションをロールバック (中止) します。</summary>
    </member>
    <member name="M:System.Transactions.Transaction.Rollback(System.Exception)">
      <summary>トランザクションをロールバック (中止) します。</summary>
      <param name="e">ロールバックが発生した理由の説明。</param>
    </member>
    <member name="M:System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)">
      <summary>MSDTC でないプロモーターによって生成される分散トランザクションの識別子を設定します。</summary>
      <param name="promotableNotification">参加者によって実装された <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> インターフェイス。</param>
      <param name="distributedTransactionIdentifier">分散トランザクション マネージャーによって使用されるトランザクションの識別子です。</param>
    </member>
    <member name="M:System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>このトランザクションのシリアル化に必要なデータを含む <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を取得します。</summary>
      <param name="serializationInfo">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">このシリアル化のシリアル化先 (<see cref="T:System.Runtime.Serialization.StreamingContext" /> を参照)。</param>
    </member>
    <member name="E:System.Transactions.Transaction.TransactionCompleted">
      <summary>トランザクションが完了したことを示します。</summary>
      <exception cref="T:System.ObjectDisposedException">破棄されたトランザクションでこのイベントをサブスクライブしようとしました。</exception>
    </member>
    <member name="P:System.Transactions.Transaction.TransactionInformation">
      <summary>トランザクションの追加情報を取得します。</summary>
      <returns>トランザクションの追加情報を格納する <see cref="T:System.Transactions.TransactionInformation" />。</returns>
    </member>
    <member name="T:System.Transactions.TransactionAbortedException">
      <summary>既にロールバックされているトランザクションを操作しようとした場合や、トランザクションをコミットしようとしたときにトランザクションが中止された場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor">
      <summary>
        <see cref="T:System.Transactions.TransactionAbortedException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定したシリアル化情報とストリームのコンテキスト情報を使用して、<see cref="T:System.Transactions.TransactionAbortedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">失敗したシリアル化を示す <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">失敗したシリアル化コンテキストを示す <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.Transactions.TransactionAbortedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外が発生した理由を説明するメッセージを格納している <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.String,System.Exception)">
      <summary>指定したメッセージと内部例外を使用して、<see cref="T:System.Transactions.TransactionAbortedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外が発生した理由を説明するメッセージを格納している <see cref="T:System.String" />。</param>
      <param name="innerException">現在の例外を発生させた例外インスタンスを取得します。 詳細については、<see cref="P:System.Exception.InnerException" /> プロパティを参照してください。</param>
    </member>
    <member name="T:System.Transactions.TransactionCompletedEventHandler">
      <summary>
        <see cref="E:System.Transactions.Transaction.TransactionCompleted" /> クラスの <see cref="T:System.Transactions.Transaction" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.Transactions.TransactionEventArgs" />。</param>
    </member>
    <member name="T:System.Transactions.TransactionEventArgs">
      <summary>トランザクション イベントである <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" /> と <see cref="E:System.Transactions.Transaction.TransactionCompleted" /> に関するデータを提供します。</summary>
    </member>
    <member name="M:System.Transactions.TransactionEventArgs.#ctor">
      <summary>
        <see cref="T:System.Transactions.TransactionEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Transactions.TransactionEventArgs.Transaction">
      <summary>イベントのステータスが提供されるトランザクションを取得します。</summary>
      <returns>イベントのステータスが提供される <see cref="T:System.Transactions.Transaction" />。</returns>
    </member>
    <member name="T:System.Transactions.TransactionException">
      <summary>新しい作業を受け入れないトランザクションで作業を試行したときにスローされる例外。</summary>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor">
      <summary>
        <see cref="T:System.Transactions.TransactionException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定したシリアル化情報とストリームのコンテキスト情報を使用して、<see cref="T:System.Transactions.TransactionException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">失敗したシリアル化を示す <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">失敗したシリアル化コンテキストを示す <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.Transactions.TransactionException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外が発生した理由を説明するメッセージを格納している <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.String,System.Exception)">
      <summary>指定したメッセージと内部例外を使用して、<see cref="T:System.Transactions.TransactionException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外が発生した理由を説明するメッセージを格納している <see cref="T:System.String" />。</param>
      <param name="innerException">現在の例外を発生させた例外インスタンスを取得します。 詳細については、<see cref="P:System.Exception.InnerException" /> プロパティを参照してください。</param>
    </member>
    <member name="T:System.Transactions.TransactionInDoubtException">
      <summary>未決定のトランザクションを操作しようとした場合や、トランザクションをコミットしようとしたときにトランザクションが InDoubt になった場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor">
      <summary>
        <see cref="T:System.Transactions.TransactionInDoubtException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定したシリアル化情報とストリームのコンテキスト情報を使用して、<see cref="T:System.Transactions.TransactionInDoubtException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">失敗したシリアル化を示す <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">失敗したシリアル化コンテキストを示す <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.Transactions.TransactionInDoubtException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外が発生した理由を説明するメッセージを格納している <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.String,System.Exception)">
      <summary>指定したメッセージと内部例外を使用して、<see cref="T:System.Transactions.TransactionInDoubtException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外が発生した理由を説明するメッセージを格納している <see cref="T:System.String" />。</param>
      <param name="innerException">現在の例外を発生させた例外インスタンスを取得します。 詳細については、<see cref="P:System.Exception.InnerException" /> プロパティを参照してください。</param>
    </member>
    <member name="T:System.Transactions.TransactionInformation">
      <summary>トランザクションに関する追加情報を提供します。</summary>
    </member>
    <member name="P:System.Transactions.TransactionInformation.CreationTime">
      <summary>トランザクションの作成時刻を取得します。</summary>
      <returns>トランザクションの作成時刻を格納している <see cref="T:System.DateTime" />。</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.DistributedIdentifier">
      <summary>エスカレートされたトランザクションの一意の識別子を取得します。</summary>
      <returns>エスカレートされたトランザクションの一意の識別子を格納している <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.LocalIdentifier">
      <summary>トランザクションの一意の識別子を取得します。</summary>
      <returns>トランザクションの一意の識別子。</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.Status">
      <summary>トランザクションのステータスを取得します。</summary>
      <returns>トランザクションのステータスを格納している <see cref="T:System.Transactions.TransactionStatus" />。</returns>
    </member>
    <member name="T:System.Transactions.TransactionInterop">
      <summary>MSDTC、COM+、または <see cref="N:System.EnterpriseServices" /> とやり取りするために以前記述されたコンポーネントと <see cref="N:System.Transactions" /> との対話を容易にします。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)">
      <summary>
        <see cref="T:System.Transactions.Transaction" /> を表す <see cref="T:System.Transactions.IDtcTransaction" /> インスタンスを取得します。</summary>
      <param name="transaction">マーシャリングされる <see cref="T:System.Transactions.Transaction" /> インスタンス。</param>
      <returns>
        <see cref="T:System.Transactions.Transaction" /> を表す <see cref="T:System.Transactions.IDtcTransaction" /> インスタンス。  <see cref="T:System.Transactions.IDtcTransaction" /> インスタンスは、MSDTC によって使用されるアンマネージド形式の ITransaction および <see cref="N:System.EnterpriseServices" /> によって使用されるマネージド形式の <see cref="T:System.EnterpriseServices.ITransaction" /> と互換性があります。</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])">
      <summary>トランザクション オブジェクトをエクスポート トランザクション クッキーに変換します。</summary>
      <param name="transaction">マーシャリングされる <see cref="T:System.Transactions.Transaction" /> オブジェクト。</param>
      <param name="whereabouts">目的のトランザクション マネージャーの位置を示すアドレス。 このアドレスを使用することにより、2 つのトランザクション マネージャー間での相互通信が可能になり、これによってシステム間でのトランザクションの伝達が可能になります。</param>
      <returns>指定した <see cref="T:System.Transactions.Transaction" /> オブジェクトを表すエクスポート トランザクション クッキー。</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)">
      <summary>指定した <see cref="T:System.Transactions.IDtcTransaction" /> から <see cref="T:System.Transactions.Transaction" /> を生成します。</summary>
      <param name="transactionNative">マーシャリングされる <see cref="T:System.Transactions.IDtcTransaction" /> オブジェクト。</param>
      <returns>指定した <see cref="T:System.Transactions.IDtcTransaction" /> を表す <see cref="T:System.Transactions.Transaction" /> インスタンス。</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])">
      <summary>指定したエクスポート クッキーから <see cref="T:System.Transactions.Transaction" /> を生成します。</summary>
      <param name="cookie">トランザクション オブジェクトのマーシャリングされた形式。</param>
      <returns>指定したエクスポート クッキーから生成される <see cref="T:System.Transactions.Transaction" />。</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])">
      <summary>指定したトランスミッター伝達トークンから <see cref="T:System.Transactions.Transaction" /> インスタンスを生成します。</summary>
      <param name="propagationToken">トランザクションを表す伝達トークン。</param>
      <returns>指定されたトランスミッター伝達トークンから生成される <see cref="T:System.Transactions.Transaction" />。</returns>
      <exception cref="T:System.Transactions.TransactionManagerCommunicationException">トランザクション マネージャーに接続できなかったため、トランザクションの逆シリアル化に失敗しました。 原因として、ネットワーク ファイアウォールまたはセキュリティ設定が考えられます。</exception>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)">
      <summary>指定した <see cref="T:System.Transactions.Transaction" /> に伝達トークンを生成します。</summary>
      <param name="transaction">伝達トークンにマーシャリングされるトランザクション。</param>
      <returns>このメソッドは、<see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" /> メソッドと連携して、トランスミッターまたはレシーバーによる伝達機能を提供します。この伝達方法では、後者のメソッドを呼び出してトランザクションのマーシャリングを解除する際に、リモート コンピューターの方からトランザクションを "プル" します。
各種の伝達モデルの詳細については、<see cref="T:System.Transactions.TransactionInterop" /> クラスを参照してください。</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetWhereabouts">
      <summary>
        <see cref="N:System.Transactions" /> が使用する分散トランザクション マネージャーの位置情報を取得します。</summary>
      <returns>
        <see cref="N:System.Transactions" /> が使用する分散トランザクション マネージャーの位置情報。</returns>
    </member>
    <member name="F:System.Transactions.TransactionInterop.PromoterTypeDtc">
      <summary>分散トランザクション プロセッサの種類。</summary>
    </member>
    <member name="T:System.Transactions.TransactionManager">
      <summary>トランザクション管理に使用するメソッドを格納します。 このクラスは継承できません。</summary>
    </member>
    <member name="P:System.Transactions.TransactionManager.DefaultTimeout">
      <summary>新しいトランザクションの既定のタイムアウト間隔を取得します。</summary>
      <returns>新しいトランザクションのタイムアウト間隔を指定する <see cref="T:System.TimeSpan" /> 値。</returns>
    </member>
    <member name="E:System.Transactions.TransactionManager.DistributedTransactionStarted">
      <summary>分散トランザクションが開始されたことを示します。</summary>
    </member>
    <member name="P:System.Transactions.TransactionManager.HostCurrentCallback">
      <summary>カスタム トランザクション ファクトリを取得また設定します。</summary>
      <returns>カスタム トランザクション ファクトリを格納している <see cref="T:System.Transactions.HostCurrentTransactionCallback" />。</returns>
    </member>
    <member name="P:System.Transactions.TransactionManager.MaximumTimeout">
      <summary>新しいトランザクションの既定の最大タイムアウト間隔を取得します。</summary>
      <returns>新しいトランザクションの作成時に許可される最大タイムアウト間隔を指定する <see cref="T:System.TimeSpan" />値。</returns>
    </member>
    <member name="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)">
      <summary>障害から回復したリソース マネージャーがすべての未解決のトランザクションへの再参加を終えたことを、トランザクション マネージャーに通知します。</summary>
      <param name="resourceManagerIdentifier">回復したリソースを一意に識別する <see cref="T:System.Guid" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceManagerIdentifier" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)">
      <summary>トランザクションに永続的な参加要素を再参加させます。</summary>
      <param name="resourceManagerIdentifier">リソース マネージャーを一意に識別する <see cref="T:System.Guid" />。</param>
      <param name="recoveryInformation">回復情報の追加情報を格納します。</param>
      <param name="enlistmentNotification">
        <see cref="T:System.Transactions.IEnlistmentNotification" /> を実装して通知を受け取るリソース オブジェクト。</param>
      <returns>参加リストを示す <see cref="T:System.Transactions.Enlistment" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="recoveryInformation" /> が無効です。

または -
<paramref name="recoveryInformation" /> 内のトランザクション マネージャー情報が、構成済みのトランザクション マネージャーと一致しません。

または -
<paramref name="RecoveryInformation" /> が <see cref="N:System.Transactions" /> によって認識されません。</exception>
      <exception cref="T:System.InvalidOperationException">指定した <paramref name="resourceManagerIdentifier" /> に対して、<see cref="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)" /> が既に呼び出されています。 再参加が拒否されました。</exception>
      <exception cref="T:System.Transactions.TransactionException">
        <paramref name="resourceManagerIdentifier" /> が、<paramref name="recoveryInformation" /> 内で指定した回復情報の内容と一致しません。</exception>
    </member>
    <member name="T:System.Transactions.TransactionManagerCommunicationException">
      <summary>この例外は、リソース マネージャーがトランザクション マネージャーと通信できない場合にスローされます。</summary>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor">
      <summary>
        <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定したシリアル化情報とストリームのコンテキスト情報を使用して、<see cref="T:System.Transactions.TransactionManagerCommunicationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">失敗したシリアル化を示す <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">失敗したシリアル化コンテキストを示す <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.Transactions.TransactionManagerCommunicationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外が発生した理由を説明するメッセージを格納している <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.String,System.Exception)">
      <summary>指定したメッセージと内部例外を使用して、<see cref="T:System.Transactions.TransactionManagerCommunicationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外が発生した理由を説明するメッセージを格納している <see cref="T:System.String" />。</param>
      <param name="innerException">現在の例外を発生させた例外インスタンスを取得します。 詳細については、<see cref="P:System.Exception.InnerException" /> プロパティを参照してください。</param>
    </member>
    <member name="T:System.Transactions.TransactionOptions">
      <summary>トランザクション動作を指定する追加情報を格納します。</summary>
    </member>
    <member name="M:System.Transactions.TransactionOptions.Equals(System.Object)">
      <summary>この <see cref="T:System.Transactions.TransactionOptions" /> インスタンスと指定したオブジェクトが等しいかどうかを判断します。</summary>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <returns>
        <paramref name="obj" /> とこの <see cref="T:System.Transactions.TransactionOptions" /> インスタンスが同一である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.Transactions.TransactionOptions.IsolationLevel">
      <summary>トランザクションの分離レベルを取得または設定します。</summary>
      <returns>トランザクションの分離レベルを指定する <see cref="T:System.Transactions.IsolationLevel" /> 列挙体。</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.op_Equality(System.Transactions.TransactionOptions,System.Transactions.TransactionOptions)">
      <summary>指定した 2 つの <see cref="T:System.Transactions.TransactionOptions" /> インスタンスが等価であるかどうかをテストします。</summary>
      <param name="x">等値演算子の左側に表示される <see cref="T:System.Transactions.TransactionOptions" /> インスタンス。</param>
      <param name="y">等値演算子の右側に表示される <see cref="T:System.Transactions.TransactionOptions" /> インスタンス。</param>
      <returns>
        <see langword="true" /> と <paramref name="x" /> が等しい場合は <paramref name="y" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.op_Inequality(System.Transactions.TransactionOptions,System.Transactions.TransactionOptions)">
      <summary>2 つの <see cref="T:System.Transactions.TransactionOptions" /> インスタンスが等しくないかどうかを示す値を返します。</summary>
      <param name="x">等値演算子の左側に表示される <see cref="T:System.Transactions.TransactionOptions" /> インスタンス。</param>
      <param name="y">等値演算子の右側に表示される <see cref="T:System.Transactions.TransactionOptions" /> インスタンス。</param>
      <returns>
        <paramref name="x" /> と <paramref name="y" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Transactions.TransactionOptions.Timeout">
      <summary>このトランザクションのタイムアウト期限を取得または設定します。</summary>
      <returns>トランザクションのタイムアウト期間を指定する <see cref="T:System.TimeSpan" /> 値。</returns>
    </member>
    <member name="T:System.Transactions.TransactionPromotionException">
      <summary>上位変換が失敗した場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor">
      <summary>
        <see cref="T:System.Transactions.TransactionPromotionException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定したシリアル化情報とストリームのコンテキスト情報を使用して、<see cref="T:System.Transactions.TransactionPromotionException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">失敗したシリアル化を示す <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">失敗したシリアル化コンテキストを示す <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.Transactions.TransactionPromotionException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外が発生した理由を説明するメッセージを格納している <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.String,System.Exception)">
      <summary>指定したメッセージと内部例外を使用して、<see cref="T:System.Transactions.TransactionPromotionException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外が発生した理由を説明するメッセージを格納している <see cref="T:System.String" />。</param>
      <param name="innerException">現在の例外を発生させた例外インスタンスを取得します。 詳細については、<see cref="P:System.Exception.InnerException" /> プロパティを参照してください。</param>
    </member>
    <member name="T:System.Transactions.TransactionScope">
      <summary>コード ブロックをトランザクションにします。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor">
      <summary>
        <see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)">
      <summary>
        <see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを初期化し、指定したトランザクションをアンビエント トランザクションとして設定します。これによって、スコープ内で実行されるトランザクション作業でこのトランザクションが使用されます。</summary>
      <param name="transactionToUse">スコープ内で実行されるトランザクション作業でこのトランザクションが使用されるように、アンビエント トランザクションとして設定するトランザクション。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)">
      <summary>タイムアウト値を指定して <see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを初期化し、指定したトランザクションをアンビエント トランザクションとして設定します。これによって、スコープ内で実行されるトランザクション作業でこのトランザクションが使用されます。</summary>
      <param name="transactionToUse">スコープ内で実行されるトランザクション作業でこのトランザクションが使用されるように、アンビエント トランザクションとして設定するトランザクション。</param>
      <param name="scopeTimeout">トランザクション スコープがタイムアウトしてトランザクションが中止されるまでの <see cref="T:System.TimeSpan" />。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)">
      <summary>タイムアウト値と COM+ 相互運用性要件を指定して <see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを初期化し、指定したトランザクションをアンビエント トランザクションとして設定します。これによって、スコープ内で実行されるトランザクション作業でこのトランザクションが使用されます。</summary>
      <param name="transactionToUse">スコープ内で実行されるトランザクション作業でこのトランザクションが使用されるように、アンビエント トランザクションとして設定するトランザクション。</param>
      <param name="scopeTimeout">トランザクション スコープがタイムアウトしてトランザクションが中止されるまでの <see cref="T:System.TimeSpan" />。</param>
      <param name="interopOption">関連付けられているトランザクションが COM+ トランザクションとやり取りする方法を示す <see cref="T:System.Transactions.EnterpriseServicesInteropOption" /> 列挙体のインスタンス。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]
タイムアウト値を指定して <see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを初期化し、指定したトランザクションをアンビエント トランザクションとして設定します。これによって、スコープ内で実行されるトランザクション作業でこのトランザクションが使用されます。</summary>
      <param name="transactionToUse">スコープ内で実行されるトランザクション作業でこのトランザクションが使用されるように、アンビエント トランザクションとして設定するトランザクション。</param>
      <param name="scopeTimeout">トランザクション スコープがタイムアウトしてトランザクションが中止されるまでの <see cref="T:System.TimeSpan" />。</param>
      <param name="asyncFlowOption">タスク、async と、await .NET プログラミングを使用するときに、トランザクションのスコープに関連付けられたアンビエント トランザクションがスレッドの継続でフローするかどうかを表す <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 列挙体のインスタンス。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]
<see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを初期化し、指定したトランザクションをアンビエント トランザクションとして設定します。これによって、スコープ内で実行されるトランザクション作業でこのトランザクションが使用されます。</summary>
      <param name="transactionToUse">スコープ内で実行されるトランザクション作業でこのトランザクションが使用されるように、アンビエント トランザクションとして設定するトランザクション。</param>
      <param name="asyncFlowOption">タスク、async と、await .NET プログラミングを使用するときに、トランザクションのスコープに関連付けられたアンビエント トランザクションがスレッドの継続でフローするかどうかを表す <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 列挙体のインスタンス。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>
        <see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを、非同期フロー オプションを使用して初期化します。</summary>
      <param name="asyncFlowOption">タスク、async と、await .NET プログラミングを使用するときに、トランザクションのスコープに関連付けられたアンビエント トランザクションがスレッドの継続でフローするかどうかを表す <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 列挙体のインスタンス。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)">
      <summary>要件を指定して、<see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scopeOption">このトランザクション スコープに関連付けられているトランザクション要件を示す <see cref="T:System.Transactions.TransactionScopeOption" /> 列挙体のインスタンス。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)">
      <summary>タイムアウト値と要件を指定して、<see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scopeOption">このトランザクション スコープに関連付けられているトランザクション要件を示す <see cref="T:System.Transactions.TransactionScopeOption" /> 列挙体のインスタンス。</param>
      <param name="scopeTimeout">トランザクション スコープがタイムアウトしてトランザクションが中止されるまでの <see cref="T:System.TimeSpan" />。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>タイムアウト値と要件、非同期フロー オプションを指定して、<see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scopeOption">このトランザクション スコープに関連付けられているトランザクション要件を示す <see cref="T:System.Transactions.TransactionScopeOption" /> 列挙体のインスタンス。</param>
      <param name="scopeTimeout">トランザクション スコープがタイムアウトしてトランザクションが中止されるまでの <see cref="T:System.TimeSpan" />。</param>
      <param name="asyncFlowOption">タスク、async と、await .NET プログラミングを使用するときに、トランザクションのスコープに関連付けられたアンビエント トランザクションがスレッドの継続でフローするかどうかを表す <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 列挙体のインスタンス。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
      <summary>要件を指定して、<see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scopeOption">このトランザクション スコープに関連付けられているトランザクション要件を示す <see cref="T:System.Transactions.TransactionScopeOption" /> 列挙体のインスタンス。</param>
      <param name="transactionOptions">新しいトランザクションが作成された場合に使用するトランザクション オプションを示す <see cref="T:System.Transactions.TransactionOptions" /> 構造体。 既存のトランザクションを使用する場合は、このパラメーターのタイムアウト値がトランザクション スコープに適用されます。 スコープを破棄する前にその時間が経過してしまうと、トランザクションは中止されます。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)">
      <summary>スコープ、COM+ 相互運用性要件、およびトランザクション オプションを指定して、<see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scopeOption">このトランザクション スコープに関連付けられているトランザクション要件を示す <see cref="T:System.Transactions.TransactionScopeOption" /> 列挙体のインスタンス。</param>
      <param name="transactionOptions">新しいトランザクションが作成された場合に使用するトランザクション オプションを示す <see cref="T:System.Transactions.TransactionOptions" /> 構造体。 既存のトランザクションを使用する場合は、このパラメーターのタイムアウト値がトランザクション スコープに適用されます。 スコープを破棄する前にその時間が経過してしまうと、トランザクションは中止されます。</param>
      <param name="interopOption">関連付けられているトランザクションが COM+ トランザクションとやり取りする方法を示す <see cref="T:System.Transactions.EnterpriseServicesInteropOption" /> 列挙体のインスタンス。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]
タイムアウト値と要件、非同期フロー オプションを指定して、<see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scopeOption">このトランザクション スコープに関連付けられているトランザクション要件を示す <see cref="T:System.Transactions.TransactionScopeOption" /> 列挙体のインスタンス。</param>
      <param name="transactionOptions">新しいトランザクションが作成された場合に使用するトランザクション オプションを示す <see cref="T:System.Transactions.TransactionOptions" /> 構造体。 既存のトランザクションを使用する場合は、このパラメーターのタイムアウト値がトランザクション スコープに適用されます。 スコープを破棄する前にその時間が経過してしまうと、トランザクションは中止されます。</param>
      <param name="asyncFlowOption">タスク、async と、await .NET プログラミングを使用するときに、トランザクションのスコープに関連付けられたアンビエント トランザクションがスレッドの継続でフローするかどうかを表す <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 列挙体のインスタンス。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>タイムアウト値と要件、非同期フロー オプションを指定して、<see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scopeOption">このトランザクション スコープに関連付けられているトランザクション要件を示す <see cref="T:System.Transactions.TransactionScopeOption" /> 列挙体のインスタンス。</param>
      <param name="asyncFlowOption">タスク、async と、await .NET プログラミングを使用するときに、トランザクションのスコープに関連付けられたアンビエント トランザクションがスレッドの継続でフローするかどうかを表す <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 列挙体のインスタンス。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.Complete">
      <summary>スコープ内のすべての操作が正常に完了したことを示します。</summary>
      <exception cref="T:System.InvalidOperationException">このメソッドは、既に一度呼び出されています。</exception>
    </member>
    <member name="M:System.Transactions.TransactionScope.Dispose">
      <summary>トランザクション スコープを終了します。</summary>
    </member>
    <member name="T:System.Transactions.TransactionScopeAsyncFlowOption">
      <summary>スレッドの継続の間で <see cref="T:System.Transactions.TransactionScope" /> に対するトランザクション フローが有効になっているかを指定します。</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeAsyncFlowOption.Enabled">
      <summary>スレッドの継続の間でのトランザクション フローが有効になっているかを指定します。</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeAsyncFlowOption.Suppress">
      <summary>スレッドの継続の間でのトランザクション フローが止まっているかを指定します。 これは、<see cref="Overload:System.Transactions.TransactionScope.#ctor" /> コンストラクターで <see langword="TransactionScopeAsyncFlowOption" /> が指定されていないときの既定の設定です。</summary>
    </member>
    <member name="T:System.Transactions.TransactionScopeOption">
      <summary>トランザクション スコープを作成するための追加オプションを提供します。</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.Required">
      <summary>スコープには、トランザクションが必要です。 アンビエント トランザクションが既に存在する場合は、アンビエント トランザクションを使用します。 トランザクションが存在しない場合は、スコープに入る前に新しいトランザクションが作成されます。 これが既定値です。</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.RequiresNew">
      <summary>スコープに対して、常に新しいトランザクションが作成されます。</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.Suppress">
      <summary>スコープの作成中は、アンビエント トランザクションのコンテキストは抑制されます。 スコープ内のすべての操作は、アンビエント トランザクションのコンテキストを使用せずに行われます。</summary>
    </member>
    <member name="T:System.Transactions.TransactionStartedEventHandler">
      <summary>
        <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" /> クラスの <see cref="T:System.Transactions.TransactionManager" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">トランザクションを保持する <see cref="T:System.Transactions.TransactionEventArgs" />。ここからトランザクション情報を取得できます。</param>
    </member>
    <member name="T:System.Transactions.TransactionStatus">
      <summary>分散トランザクションの現在のステータスを記述します。</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Aborted">
      <summary>トランザクションがロールバックされました。</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Active">
      <summary>一部の参加要素に対してさらにポーリングを行う必要があるため、トランザクションのステータスは不明です。</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Committed">
      <summary>トランザクションはコミット済みです。</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.InDoubt">
      <summary>トランザクションのステータスが不明です。</summary>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Common</name>
  </assembly>
  <members>
    <member name="T:System.Data.AcceptRejectRule">
      <summary>
        <see cref="T:System.Data.ForeignKeyConstraint" /> が設定されている <see cref="T:System.Data.DataTable" /> で <see cref="M:System.Data.DataSet.AcceptChanges" /> メソッドまたは <see cref="M:System.Data.DataTable.RejectChanges" /> メソッドを呼び出した場合に実行されるアクションを決定します。</summary>
    </member>
    <member name="F:System.Data.AcceptRejectRule.Cascade">
      <summary>リレーションシップ全体に連鎖変更が行われます。</summary>
    </member>
    <member name="F:System.Data.AcceptRejectRule.None">
      <summary>アクションは実行されません (既定値)。</summary>
    </member>
    <member name="T:System.Data.CommandBehavior">
      <summary>クエリの結果とそれがデータベースに与える影響を記述します。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.CloseConnection">
      <summary>コマンドが実行された場合、関連付けられている <see langword="DataReader" /> オブジェクトが閉じられたときに、関連付けられている <see langword="Connection" /> オブジェクトが閉じられます。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.Default">
      <summary>クエリで複数の結果セットが返される場合があります。 クエリを実行すると、データベースの状態に影響を与えることがあります。 <see langword="Default" /> は <see cref="T:System.Data.CommandBehavior" /> フラグを設定しないので、<see langword="ExecuteReader(CommandBehavior.Default)" /> の呼び出しは、機能的には <see langword="ExecuteReader()" /> の呼び出しと同じです。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.KeyInfo">
      <summary>クエリでは列と主キーの情報が返されます。 プロバイダーによって、既存の主キーおよびタイムスタンプ列の結果セットに列が追加されます。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SchemaOnly">
      <summary>クエリでは列情報のみが返されます。 <see cref="F:System.Data.CommandBehavior.SchemaOnly" /> を使用している場合、SQL Server 用 .NET Framework データ プロバイダーは実行するステートメントの前に SET FMTONLY ON を指定します。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SequentialAccess">
      <summary>
        <see langword="DataReader" /> が大きなバイナリ値が格納されている列を含む行を処理できるようにします。 <see langword="SequentialAccess" /> を使用すると、<see langword="DataReader" /> は行全体を読み込むのではなく、ストリームとしてデータを読み込むことができます。 その後、<see langword="GetBytes" /> メソッドまたは <see langword="GetChars" /> メソッドを使用して、読み込み動作を開始するバイト位置、返すデータの制限付きバッファー サイズを指定できます。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SingleResult">
      <summary>クエリでは単一の結果セットが返されます。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SingleRow">
      <summary>クエリは、最初の結果セットの単一行を返すと想定されます。 クエリを実行すると、データベースの状態に影響を与えることがあります。 一部の .NET Framework データ プロバイダーではこの情報を使用してコマンドのパフォーマンスを最適化することもできますが、この情報の使用は必須ではありません。 <see cref="T:System.Data.OleDb.OleDbCommand" /> オブジェクトの <see cref="M:System.Data.OleDb.OleDbCommand.ExecuteReader" /> メソッドで <see cref="F:System.Data.CommandBehavior.SingleRow" /> を指定すると、OLE DB <see langword="IRow" /> インターフェイスが使用できる場合、OLE DB 用 .NET Framework データ プロバイダーはこのインターフェイスを使用してバインドを実行します。 それ以外の場合は、<see langword="IRowset" /> インターフェイスを使用します。 SQL ステートメントが単一行のみを返すことが予期される場合、<see cref="F:System.Data.CommandBehavior.SingleRow" /> を指定すると、アプリケーションのパフォーマンスも向上します。 複数の結果セットを返すことが予期されるクエリを実行する場合は、<see langword="SingleRow" /> を指定できます。  その場合、複数の結果セットの SQL クエリと単一行の両方が指定されていると、返される結果には最初の結果セットの 1 行目のみが含まれます。 クエリの他の結果セットは返されません。</summary>
    </member>
    <member name="T:System.Data.CommandType">
      <summary>コマンド文字列の解釈方法を指定します。</summary>
    </member>
    <member name="F:System.Data.CommandType.StoredProcedure">
      <summary>ストアド プロシージャの名前。</summary>
    </member>
    <member name="F:System.Data.CommandType.TableDirect">
      <summary>テーブルの名前。</summary>
    </member>
    <member name="F:System.Data.CommandType.Text">
      <summary>SQL テキスト コマンド。 (既定値。)</summary>
    </member>
    <member name="T:System.Data.Common.CatalogLocation">
      <summary>テキスト コマンド内の修飾されたテーブル名内のカタログ名の位置を示します。</summary>
    </member>
    <member name="F:System.Data.Common.CatalogLocation.End">
      <summary>テキスト コマンド内の完全修飾テーブル名でスキーマ部分の後に配置されるカタログ名の位置を示します。 <c>End</c> と <c>Start</c> は相互に排他的です。</summary>
    </member>
    <member name="F:System.Data.Common.CatalogLocation.Start">
      <summary>テキスト コマンド内の完全修飾テーブル名でスキーマ部分の前に配置されるカタログ名の位置を示します。 <c>Start</c> と <c>End</c> は相互に排他的です。</summary>
    </member>
    <member name="T:System.Data.Common.DataAdapter">
      <summary>
        <see cref="T:System.Data.DataSet" /> へのデータの格納およびデータ ソースの更新に使用される、一連の SQL コマンドおよびデータベース接続を表します。</summary>
    </member>
    <member name="M:System.Data.Common.DataAdapter.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)">
      <summary>既存の同じ型のオブジェクトから、<see cref="T:System.Data.Common.DataAdapter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="from">新しい <see cref="T:System.Data.Common.DataAdapter" /> の作成に使用する <see cref="T:System.Data.Common.DataAdapter" /> オブジェクト。</param>
    </member>
    <member name="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill">
      <summary>Fill 操作中に <see cref="T:System.Data.DataTable" /> に <see cref="T:System.Data.DataRow" /> が追加された後で、その行に対して <see cref="M:System.Data.DataRow.AcceptChanges" /> を呼び出すかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="M:System.Data.DataRow.AcceptChanges" /> に対して <see cref="T:System.Data.DataRow" /> を呼び出す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.AcceptChangesDuringUpdate">
      <summary>
        <see cref="M:System.Data.DataRow.AcceptChanges" /> で <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" /> が呼び出されるかどうかを取得または設定します。</summary>
      <returns>
        <see cref="M:System.Data.DataRow.AcceptChanges" /> で <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" /> が呼び出される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.CloneInternals">
      <summary>この <see cref="T:System.Data.Common.DataAdapter" /> のインスタンスのコピーを作成します。</summary>
      <returns>クローンされた <see cref="T:System.Data.Common.DataAdapter" /> のインスタンス。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.ContinueUpdateOnError">
      <summary>行の更新中にエラーが発生したときに、例外を生成するかどうかを指定する値を取得または設定します。</summary>
      <returns>例外を生成せずに更新を続ける場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.CreateTableMappings">
      <summary>新しい <see cref="T:System.Data.Common.DataTableMappingCollection" /> を作成します。</summary>
      <returns>新しいテーブル マップ コレクション。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)">
      <summary>データ ソース内の行と一致するように、<see cref="T:System.Data.DataSet" /> の行を追加または更新します。</summary>
      <param name="dataSet">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 名および <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の指定した範囲の行を追加または更新します。</summary>
      <param name="dataSet">レコードの格納先の <see cref="T:System.Data.DataSet" />。</param>
      <param name="srcTable">ソース テーブルの名前を示す文字列。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> のインスタンス。</param>
      <param name="startRecord">開始レコードの 0 から始まるインデックス。</param>
      <param name="maxRecords">最大レコード数を示す整数。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)">
      <summary>
        <see cref="T:System.Data.DataTable" /> 名と指定した <see cref="T:System.Data.DataTable" /> を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.IDataReader" /> 内の行を追加または更新します。</summary>
      <param name="dataTable">レコードの格納先の <see cref="T:System.Data.DataTable" />。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> のインスタンス。</param>
      <returns>
        <see cref="T:System.Data.DataTable" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> オブジェクトのコレクション内の指定した範囲の行を追加または更新します。</summary>
      <param name="dataTables">レコードの格納先の <see cref="T:System.Data.DataTable" /> オブジェクトのコレクション。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> のインスタンス。</param>
      <param name="startRecord">開始レコードの 0 から始まるインデックス。</param>
      <param name="maxRecords">最大レコード数を示す整数。</param>
      <returns>
        <see cref="T:System.Data.DataTable" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
    </member>
    <member name="E:System.Data.Common.DataAdapter.FillError">
      <summary>格納操作中にエラーが発生したときに返されます。</summary>
    </member>
    <member name="P:System.Data.Common.DataAdapter.FillLoadOption">
      <summary>アダプターが <see cref="T:System.Data.LoadOption" /> から <see cref="T:System.Data.DataTable" /> にデータを読み込む方法を決定する <see cref="T:System.Data.Common.DbDataReader" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.LoadOption" /> 値。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> に <see cref="T:System.Data.DataSet" /> を追加し、指定した <see cref="T:System.Data.SchemaType" /> に基づいて、データ ソース内のスキーマと一致するようにスキーマを設定します。</summary>
      <param name="dataSet">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つ。</param>
      <returns>データ ソースから返されたスキーマ情報が格納された <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)">
      <summary>
        <see cref="T:System.Data.DataTable" /> を指定した <see cref="T:System.Data.DataSet" /> に追加します。</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataTable" /> からデータが格納される <see cref="T:System.Data.IDataReader" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つ。</param>
      <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> にデータを格納するときにデータ ソースとして使用する <see cref="T:System.Data.DataTable" />。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> に追加された <see cref="T:System.Data.DataTable" /> オブジェクトのコレクションへの参照。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)">
      <summary>
        <see cref="T:System.Data.DataTable" /> を指定した <see cref="T:System.Data.DataSet" /> に追加します。</summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> からデータが格納される <see cref="T:System.Data.IDataReader" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 値のいずれか。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> にデータを格納するときにデータ ソースとして使用する <see cref="T:System.Data.DataTable" />。</param>
      <returns>データ ソースから返されたスキーマ情報が格納された <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.GetFillParameters">
      <summary>SQL SELECT ステートメントの実行時にユーザーが設定したパラメーターを取得します。</summary>
      <returns>ユーザーが設定したパラメーターが格納された <see cref="T:System.Data.IDataParameter" /> オブジェクトの配列。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.HasTableMappings">
      <summary>
        <see cref="T:System.Data.Common.DataTableMappingCollection" /> が作成されているかどうかを示します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DataTableMappingCollection" /> が作成されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.MissingMappingAction">
      <summary>一致するテーブルまたは列が受信データに含まれていない場合に実行するアクションを決定します。</summary>
      <returns>
        <see cref="T:System.Data.MissingMappingAction" /> 値のいずれか 1 つ。 既定値は、<see langword="Passthrough" /> です。</returns>
      <exception cref="T:System.ArgumentException">設定された値が <see cref="T:System.Data.MissingMappingAction" /> 値の 1 つではありません。</exception>
    </member>
    <member name="P:System.Data.Common.DataAdapter.MissingSchemaAction">
      <summary>既存の <see cref="T:System.Data.DataSet" /> スキーマが受信データと一致しないときに実行するアクションを決定します。</summary>
      <returns>
        <see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか 1 つ。 既定値は、<see langword="Add" /> です。</returns>
      <exception cref="T:System.ArgumentException">設定された値が <see cref="T:System.Data.MissingSchemaAction" /> 値の 1 つではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)">
      <summary>
        <see langword="Fill" /> 中にエラーが発生したときに呼び出されます。</summary>
      <param name="value">
        <see cref="T:System.Data.FillErrorEventArgs" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ResetFillLoadOption">
      <summary>
        <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> を既定の状態にリセットし、<see cref="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)" /> で <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> を受け入れるようにします。</summary>
    </member>
    <member name="P:System.Data.Common.DataAdapter.ReturnProviderSpecificTypes">
      <summary>
        <see langword="Fill" /> メソッドがプロバイダー固有の値、または共通の CLS 準拠の値のどちらを返すかを取得または設定します。</summary>
      <returns>
        <see langword="true" /> メソッドがプロバイダー固有の値を返す場合は <see langword="Fill" />。共通の CLS 準拠の値を返す場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill">
      <summary>
        <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> プロパティを永続化する必要があるかどうかを判断します。</summary>
      <returns>
        <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> プロパティが永続化される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption">
      <summary>
        <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> プロパティを永続化する必要があるかどうかを判断します。</summary>
      <returns>
        <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> プロパティが永続化される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeTableMappings">
      <summary>1 つ以上の <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトが存在し、それらを永続化する必要があるかどうかを確認します。</summary>
      <returns>1 つ以上の <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトが存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings">
      <summary>ソース テーブルをデータセット テーブルに割り当てる方法を示します。</summary>
      <returns>返されたレコードと <see cref="T:System.Data.DataSet" /> との間のマスター マップを提供するコレクション。 既定値は空のコレクションです。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.TableMappings">
      <summary>ソース テーブルと <see cref="T:System.Data.DataTable" /> との間のマスター マップを提供するコレクションを取得します。</summary>
      <returns>返されたレコードと <see cref="T:System.Data.DataSet" /> との間のマスター マップを提供するコレクション。 既定値は空のコレクションです。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)">
      <summary>指定された <see cref="T:System.Data.DataSet" /> 内の "Table" という名前の <see cref="T:System.Data.DataTable" /> に含まれる挿入行、更新行、または削除行に対して、INSERT、UPDATE、または DELETE ステートメントを個別に呼び出します。</summary>
      <param name="dataSet">データ ソースの更新に使用した <see cref="T:System.Data.DataSet" />。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</returns>
      <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
    </member>
    <member name="T:System.Data.Common.DataColumnMapping">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" /> から継承されるオブジェクトの汎用的な列マップを格納します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMapping" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.#ctor(System.String,System.String)">
      <summary>指定されたソース列名およびマップ先の <see cref="T:System.Data.Common.DataColumnMapping" /> 列名を使用して、<see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sourceColumn">データ ソースでの列名、大文字と小文字が区別されます。</param>
      <param name="dataSetColumn">マップ先の <see cref="T:System.Data.DataSet" /> での列名。大文字と小文字は区別されません。</param>
    </member>
    <member name="P:System.Data.Common.DataColumnMapping.DataSetColumn">
      <summary>割り当て先の <see cref="T:System.Data.DataSet" /> 内の列の名前を取得または設定します。</summary>
      <returns>割り当て先の <see cref="T:System.Data.DataSet" /> 内の列の名前。 名前の大文字と小文字は区別されません。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)">
      <summary>
        <see cref="T:System.Data.DataColumn" /> プロパティと <see cref="T:System.Data.DataTable" /> プロパティを使用して、指定された <see cref="T:System.Data.MissingSchemaAction" /> から <see cref="P:System.Data.Common.DataColumnMapping.DataSetColumn" /> を取得します。</summary>
      <param name="dataTable">列の取得元の <see cref="T:System.Data.DataTable" />。</param>
      <param name="dataType">データ列の <see cref="T:System.Type" />。</param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか 1 つ。</param>
      <returns>Data.Column</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.String,System.String,System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)">
      <summary>
        <see cref="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)" /> オブジェクトをインスタンス化せずに呼び出すことができる、静的なバージョンの <see cref="T:System.Data.Common.DataColumnMapping" />。</summary>
      <param name="sourceColumn">データ ソースでの列名、大文字と小文字が区別されます。</param>
      <param name="dataSetColumn">マップ先の <see cref="T:System.Data.DataSet" /> での列名。大文字と小文字は区別されません。</param>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> のインスタンス。</param>
      <param name="dataType">割り当てられる列のデータ型。</param>
      <param name="schemaAction">既存の <see cref="T:System.Data.DataSet" /> スキーマが受信データと一致しないときに実行するアクションを決定します。</param>
      <returns>
        <see cref="T:System.Data.DataColumn" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMapping.SourceColumn">
      <summary>割り当て元のデータ ソース内の列の名前を取得または設定します。 名前の大文字と小文字は区別されます。</summary>
      <returns>データ ソース内の列の名前。大文字と小文字が区別されます。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.System#ICloneable#Clone">
      <summary>現在のインスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のオブジェクトのコピー。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.ToString">
      <summary>現在の <see cref="P:System.Data.Common.DataColumnMapping.SourceColumn" /> 名を文字列に変換します。</summary>
      <returns>現在の <see cref="P:System.Data.Common.DataColumnMapping.SourceColumn" /> 名を示す文字列。</returns>
    </member>
    <member name="T:System.Data.Common.DataColumnMappingCollection">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトのコレクションを含んでいます。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.#ctor">
      <summary>空の <see cref="T:System.Data.Common.DataColumnMappingCollection" /> を作成します。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Add(System.Object)">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value">コレクションに追加する <see langword="DataColumnMapping" /> オブジェクト。</param>
      <returns>コレクションに追加された <see langword="DataColumnMapping" /> オブジェクトのインデックス。</returns>
      <exception cref="T:System.InvalidCastException">渡されたオブジェクトは <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトではありませんでした。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Add(System.String,System.String)">
      <summary>ソース列名と <see cref="T:System.Data.Common.DataColumnMapping" /> 列名を指定すると、<see cref="T:System.Data.DataSet" /> オブジェクトをコレクションに追加します。</summary>
      <param name="sourceColumn">割り当て先のソース列の名前。大文字と小文字が区別されます。</param>
      <param name="dataSetColumn">割り当て先の <see cref="T:System.Data.DataSet" /> 列の名前。大文字と小文字は区別されません。</param>
      <returns>コレクションに追加された <see langword="DataColumnMapping" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.AddRange(System.Array)">
      <summary>指定した <see cref="T:System.Array" /> の要素をコレクションの末尾にコピーします。</summary>
      <param name="values">コレクションに追加する <see cref="T:System.Array" />。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.AddRange(System.Data.Common.DataColumnMapping[])">
      <summary>指定した <see cref="T:System.Data.Common.DataColumnMapping" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="values">コレクションに追加する <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Clear">
      <summary>コレクションからすべての <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトを削除します。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Contains(System.Object)">
      <summary>指定した <see cref="T:System.Data.Common.DataColumnMapping" /> が含まれる <see cref="T:System.Object" /> オブジェクトがコレクション内に存在するかどうかを示す値を取得します。</summary>
      <param name="value">
        <see cref="T:System.Object" /> である <see cref="T:System.Data.Common.DataColumnMapping" />。</param>
      <returns>指定した <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトがコレクション内に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidCastException">渡されたオブジェクトは <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトではありませんでした。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Contains(System.String)">
      <summary>指定したソース列名が含まれる <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトがコレクション内に存在するかどうかを示す値を取得します。</summary>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトのソース列名。大文字と小文字が区別されます。</param>
      <returns>指定したソース列名が含まれる <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトがコレクション内に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.CopyTo(System.Array,System.Int32)">
      <summary>指定した配列に <see cref="T:System.Data.Common.DataColumnMappingCollection" /> の要素をコピーします。</summary>
      <param name="array">
        <see cref="T:System.Array" /> 要素のコピー先の <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</param>
      <param name="index">配列の開始インデックス。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.CopyTo(System.Data.Common.DataColumnMapping[],System.Int32)">
      <summary>指定した <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 配列に <see cref="T:System.Data.Common.DataColumnMapping" /> の要素をコピーします。</summary>
      <param name="array">
        <see cref="T:System.Data.Common.DataColumnMapping" /> の要素のコピー先の <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 配列。</param>
      <param name="index">コピーを開始する <paramref name="array" /> の、0 から始まるインデックス。</param>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Count">
      <summary>コレクション内の <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクト数を取得します。</summary>
      <returns>コレクション内の項目数。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetByDataSetColumn(System.String)">
      <summary>指定した <see cref="T:System.Data.Common.DataColumnMapping" /> 列名が含まれる <see cref="T:System.Data.DataSet" /> オブジェクトを取得します。</summary>
      <param name="value">検索する <see cref="T:System.Data.DataSet" /> 列名。大文字と小文字は区別されません。</param>
      <returns>指定した <see cref="T:System.Data.Common.DataColumnMapping" /> 列名が含まれる <see cref="T:System.Data.DataSet" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetColumnMappingBySchemaAction(System.Data.Common.DataColumnMappingCollection,System.String,System.Data.MissingMappingAction)">
      <summary>指定した <see cref="T:System.Data.Common.DataColumnMapping" />、ソース列名、および <see cref="T:System.Data.Common.DataColumnMappingCollection" /> を使用して、<see cref="T:System.Data.MissingMappingAction" /> を取得します。</summary>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</param>
      <param name="sourceColumn">検索するソース列名。大文字と小文字が区別されます。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 値のいずれか 1 つ。</param>
      <returns>
        <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> パラメーターが <see langword="Error" /> に設定され、マップが指定されませんでした。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetDataColumn(System.Data.Common.DataColumnMappingCollection,System.String,System.Type,System.Data.DataTable,System.Data.MissingMappingAction,System.Data.MissingSchemaAction)">
      <summary>
        <see cref="T:System.Data.DataColumn" /> オブジェクトをインスタンス化せずに <see cref="T:System.Data.Common.DataColumnMappingCollection" /> オブジェクトを返す静的メソッド。</summary>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</param>
      <param name="sourceColumn">データ ソースでの列名、大文字と小文字が区別されます。</param>
      <param name="dataType">割り当てられる列のデータ型。</param>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> のインスタンス。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 値のいずれか 1 つ。</param>
      <param name="schemaAction">既存の <see cref="T:System.Data.DataSet" /> スキーマが受信データと一致しないときに実行するアクションを決定します。</param>
      <returns>
        <see cref="T:System.Data.DataColumn" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetEnumerator">
      <summary>コレクションを反復処理できる列挙子を取得します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOf(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> (<see cref="T:System.Data.Common.DataColumnMapping" />) のコレクション内での位置を取得します。</summary>
      <param name="value">検索する <see cref="T:System.Object" /> (<see cref="T:System.Data.Common.DataColumnMapping" />)。</param>
      <returns>指定した <see cref="T:System.Object" /> (<see cref="T:System.Data.Common.DataColumnMapping" />) の、コレクション内での 0 から始まる位置。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOf(System.String)">
      <summary>指定したソース列名が含まれる <see cref="T:System.Data.Common.DataColumnMapping" /> の位置を取得します。</summary>
      <param name="sourceColumn">ソース列の名前。大文字と小文字は区別されます。</param>
      <returns>指定したソース列名 (大文字と小文字が区別されます) が含まれる <see cref="T:System.Data.Common.DataColumnMapping" /> の、0 から始まる位置。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOfDataSetColumn(System.String)">
      <summary>指定した <see cref="T:System.Data.Common.DataColumnMapping" /> 列名が含まれる <see cref="T:System.Data.DataSet" /> の位置を取得します。</summary>
      <param name="dataSetColumn">検索するデータ セット列名。大文字と小文字は区別されません。</param>
      <returns>指定した <see langword="DataSet" /> 列名が含まれる <see cref="T:System.Data.Common.DataColumnMapping" /> の、0 から始まる位置。<see langword="DataColumnMapping" /> オブジェクトがコレクション内に存在しない場合は -1。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Insert(System.Int32,System.Data.Common.DataColumnMapping)">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトを <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 内の指定されたインデックス位置に挿入します。</summary>
      <param name="index">挿入する <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトの 0 から始まるインデックス。</param>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Insert(System.Int32,System.Object)">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトを <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 内の指定されたインデックス位置に挿入します。</summary>
      <param name="index">挿入する <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトの 0 から始まるインデックス。</param>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクト。</param>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Item(System.Int32)">
      <summary>指定したインデックスの位置にある <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトを取得または設定します。</summary>
      <param name="index">検索する <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトの、0 から始まるインデックス番号。</param>
      <returns>指定したインデックス位置にある <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Item(System.String)">
      <summary>指定したソース列名が含まれる <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトを取得または設定します。</summary>
      <param name="sourceColumn">ソース列の名前。大文字と小文字は区別されます。</param>
      <returns>指定したソース列名が含まれる <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Remove(System.Data.Common.DataColumnMapping)">
      <summary>指定された <see cref="T:System.Data.Common.DataColumnMapping" /> をコレクションから削除します。</summary>
      <param name="value">削除する <see cref="T:System.Data.Common.DataColumnMapping" />。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Remove(System.Object)">
      <summary>
        <see cref="T:System.Object" /> である <see cref="T:System.Data.Common.DataColumnMapping" /> をコレクションから削除します。</summary>
      <param name="value">削除する <see cref="T:System.Object" /> (<see cref="T:System.Data.Common.DataColumnMapping" />)。</param>
      <exception cref="T:System.InvalidCastException">指定したオブジェクトは <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトではありませんでした。</exception>
      <exception cref="T:System.ArgumentException">指定したオブジェクトはコレクション内に存在しません。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.RemoveAt(System.Int32)">
      <summary>指定したインデックス番号の <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトをコレクションから削除します。</summary>
      <param name="index">削除する <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトの 0 から始まるインデックス。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定したインデックス番号の <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトがありません。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.RemoveAt(System.String)">
      <summary>指定したソース列名が含まれる <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトをコレクションから削除します。</summary>
      <param name="sourceColumn">ソース列名。大文字と小文字が区別されます。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定したソース列名が含まれる <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトがありません。</exception>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IList" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <returns>指定したインデックス位置にある要素。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#Add(System.String,System.String)">
      <summary>ソース列名と <see cref="T:System.Data.Common.DataColumnMapping" /> 列名を使用して、<see cref="T:System.Data.Common.DataColumnMappingCollection" /> オブジェクトを <see cref="T:System.Data.DataSet" /> に追加します。</summary>
      <param name="sourceColumnName">ソース列の名前。大文字と小文字は区別されます。</param>
      <param name="dataSetColumnName">
        <see cref="T:System.Data.DataSet" /> 列の名前。</param>
      <returns>コレクションに追加された ColumnMapping オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#GetByDataSetColumn(System.String)">
      <summary>指定された <see cref="T:System.Data.Common.DataColumnMapping" /> 列名を持つ <see cref="T:System.Data.DataSet" /> オブジェクトを取得します。</summary>
      <param name="dataSetColumnName">検索する <see cref="T:System.Data.DataSet" /> 列名。大文字と小文字は区別されません。</param>
      <returns>指定された <see cref="T:System.Data.Common.DataColumnMapping" /> 列名を持つ <see cref="T:System.Data.DataSet" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#Item(System.String)">
      <summary>指定した <see langword="SourceColumn" /> 名で <see cref="T:System.Data.IColumnMapping" /> オブジェクトを取得または設定します。</summary>
      <param name="index">要素のインデックス。</param>
      <returns>指定した <see langword="IColumnMapping" /> 名を持つ <see langword="SourceColumn" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Data.Common.DataTableMapping">
      <summary>ソース テーブルと <see cref="T:System.Data.DataTable" /> との間に割り当てられた関係の記述を格納します。 このクラスは、<see cref="T:System.Data.Common.DataAdapter" /> にデータを格納するときに、<see cref="T:System.Data.DataSet" /> によって使用されます。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor(System.String,System.String)">
      <summary>ソース テーブル名および <see cref="T:System.Data.Common.DataTableMapping" /> 名が指定された場合に、<see cref="T:System.Data.DataTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sourceTable">データ ソース内のソース テーブル名。大文字と小文字が区別されます。</param>
      <param name="dataSetTable">割り当て先の <see cref="T:System.Data.DataSet" /> 内のテーブル名。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor(System.String,System.String,System.Data.Common.DataColumnMapping[])">
      <summary>ソース テーブル名、<see cref="T:System.Data.Common.DataTableMapping" /> 名、および <see cref="T:System.Data.DataTable" /> オブジェクトの配列が指定された場合に、<see cref="T:System.Data.Common.DataColumnMapping" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sourceTable">データ ソース内のソース テーブル名。大文字と小文字が区別されます。</param>
      <param name="dataSetTable">割り当て先の <see cref="T:System.Data.DataSet" /> 内のテーブル名。</param>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトの配列。</param>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.ColumnMappings">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMappingCollection" /> の <see cref="T:System.Data.DataTable" /> を取得します。</summary>
      <returns>データ列マップ コレクション。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.DataSetTable">
      <summary>
        <see cref="T:System.Data.DataSet" /> 内のテーブル名を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 内のテーブル名。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetColumnMappingBySchemaAction(System.String,System.Data.MissingMappingAction)">
      <summary>指定した <see cref="T:System.Data.DataColumn" /> 値および <see cref="T:System.Data.DataTable" /> 名を使用して、指定した <see cref="T:System.Data.MissingMappingAction" /> から <see cref="T:System.Data.DataColumn" /> を取得します。</summary>
      <param name="sourceColumn">
        <see cref="T:System.Data.DataColumn" /> の名前。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 値のいずれか 1 つ。</param>
      <returns>Data.Column</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> パラメーターが <see langword="Error" /> に設定され、マップが指定されませんでした。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetDataColumn(System.String,System.Type,System.Data.DataTable,System.Data.MissingMappingAction,System.Data.MissingSchemaAction)">
      <summary>指定した列名の <see cref="T:System.Data.DataColumn" /> オブジェクトを返します。</summary>
      <param name="sourceColumn">
        <see cref="T:System.Data.DataColumn" /> の名前。</param>
      <param name="dataType">
        <paramref name="sourceColumn" /> のデータ型。</param>
      <param name="dataTable">割り当て先の <see cref="T:System.Data.DataSet" /> 内のテーブル名。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 値のいずれか 1 つ。</param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか 1 つ。</param>
      <returns>
        <see cref="T:System.Data.DataColumn" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetDataTableBySchemaAction(System.Data.DataSet,System.Data.MissingSchemaAction)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> 値を使用して、指定した <see cref="T:System.Data.DataSet" /> の現在の <see cref="T:System.Data.MissingSchemaAction" /> を取得します。</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> の取得元の <see cref="T:System.Data.DataTable" />。</param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか 1 つ。</param>
      <returns>データ テーブル。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.SourceTable">
      <summary>データ ソース内のソース テーブル名 (大文字と小文字が区別されます) を取得または設定します。</summary>
      <returns>データ ソース内のソース テーブル名。大文字と小文字が区別されます。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.System#Data#ITableMapping#ColumnMappings">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMappingCollection" /> の派生 <see cref="T:System.Data.DataTable" /> を取得します。</summary>
      <returns>データ列マップ コレクション。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.System#ICloneable#Clone">
      <summary>現在のインスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピーである新しいオブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.ToString">
      <summary>現在の <see cref="P:System.Data.Common.DataTableMapping.SourceTable" /> 名を文字列に変換します。</summary>
      <returns>現在の <see cref="P:System.Data.Common.DataTableMapping.SourceTable" /> 名を示す文字列。</returns>
    </member>
    <member name="T:System.Data.Common.DataTableMappingCollection">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトのコレクション。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DataTableMappingCollection" /> クラスの新しいインスタンスを初期化します。 この新しいインスタンスは空です。つまり、<see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトはまだ含まれていません。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Add(System.Object)">
      <summary>テーブル マップである <see cref="T:System.Object" /> をコレクションに追加します。</summary>
      <param name="value">コレクションに追加する <see langword="DataTableMapping" /> オブジェクト。</param>
      <returns>コレクションに追加された <see langword="DataTableMapping" /> オブジェクトのインデックス。</returns>
      <exception cref="T:System.InvalidCastException">渡されたオブジェクトは <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトではありませんでした。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Add(System.String,System.String)">
      <summary>指定したソース テーブル名および <see cref="T:System.Data.Common.DataTableMapping" /> テーブル名を使用して、<see cref="T:System.Data.DataSet" /> オブジェクトをコレクションに追加します。</summary>
      <param name="sourceTable">割り当て元のソース テーブル名。大文字と小文字が区別されます。</param>
      <param name="dataSetTable">割り当て先の <see cref="T:System.Data.DataSet" /> テーブル名。大文字と小文字は区別されません。</param>
      <returns>コレクションに追加された <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.AddRange(System.Array)">
      <summary>指定した <see cref="T:System.Array" /> の要素をコレクションの末尾にコピーします。</summary>
      <param name="values">コレクションに追加する値の <see cref="T:System.Array" />。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.AddRange(System.Data.Common.DataTableMapping[])">
      <summary>指定した <see cref="T:System.Data.Common.DataTableMapping" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="values">コレクションに追加する <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Clear">
      <summary>コレクションからすべての <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトを削除します。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Contains(System.Object)">
      <summary>指定した <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトがコレクション内に存在するかどうかを示す値を取得します。</summary>
      <param name="value">
        <see cref="T:System.Object" /> である <see cref="T:System.Data.Common.DataTableMapping" />。</param>
      <returns>このコレクションに指定した <see cref="T:System.Data.Common.DataTableMapping" /> が存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Contains(System.String)">
      <summary>指定したソース テーブル名が含まれる <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトがコレクション内に存在するかどうかを示す値を取得します。</summary>
      <param name="value">
        <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトが格納されているソース テーブル名。大文字と小文字が区別されます。</param>
      <returns>このソース テーブル名が含まれる <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトがコレクション内に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.CopyTo(System.Array,System.Int32)">
      <summary>指定した配列に <see cref="T:System.Data.Common.DataTableMappingCollection" /> の要素をコピーします。</summary>
      <param name="array">
        <see cref="T:System.Array" /> の要素のコピー先の <see cref="T:System.Data.Common.DataTableMappingCollection" />。</param>
      <param name="index">配列の開始インデックス。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.CopyTo(System.Data.Common.DataTableMapping[],System.Int32)">
      <summary>指定した配列に <see cref="T:System.Data.Common.DataTableMapping" /> の要素をコピーします。</summary>
      <param name="array">
        <see cref="T:System.Data.Common.DataTableMapping" /> の要素のコピー先の <see cref="T:System.Data.Common.DataTableMappingCollection" />。</param>
      <param name="index">配列の開始インデックス。</param>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Count">
      <summary>コレクション内の <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト数を取得します。</summary>
      <returns>コレクションに含まれる <see langword="DataTableMapping" /> オブジェクトの数。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetByDataSetTable(System.String)">
      <summary>指定した <see cref="T:System.Data.Common.DataTableMapping" /> テーブル名が含まれる <see cref="T:System.Data.DataSet" /> オブジェクトを取得します。</summary>
      <param name="dataSetTable">検索する <see cref="T:System.Data.DataSet" /> テーブル名。大文字と小文字は区別されません。</param>
      <returns>指定した <see cref="T:System.Data.Common.DataTableMapping" /> テーブル名が含まれる <see cref="T:System.Data.DataSet" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetEnumerator">
      <summary>コレクションを反復処理できる列挙子を取得します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetTableMappingBySchemaAction(System.Data.Common.DataTableMappingCollection,System.String,System.String,System.Data.MissingMappingAction)">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMapping" /> を使用して、指定したソース テーブル名および <see cref="T:System.Data.DataSet" /> テーブル名が含まれる <see cref="T:System.Data.MissingMappingAction" /> オブジェクトを取得します。</summary>
      <param name="tableMappings">検索する <see cref="T:System.Data.Common.DataTableMappingCollection" /> コレクション。</param>
      <param name="sourceTable">割り当てられたソース テーブル名。大文字と小文字が区別されます。</param>
      <param name="dataSetTable">割り当てられた <see cref="T:System.Data.DataSet" /> テーブル名。大文字と小文字は区別されません。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 値のいずれか 1 つ。</param>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> パラメーターが <see langword="Error" /> に設定され、マップが指定されませんでした。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOf(System.Object)">
      <summary>指定した <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトのコレクション内での位置を取得します。</summary>
      <param name="value">検索する <see cref="T:System.Object" /> (<see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト)。</param>
      <returns>指定した <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトの、コレクション内での 0 から始まる位置。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOf(System.String)">
      <summary>指定したソース テーブル名が含まれる <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトの位置を取得します。</summary>
      <param name="sourceTable">ソース テーブルの、大文字と小文字が区別される名前。</param>
      <returns>指定したソース テーブル名が含まれる <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトの、0 から始まる位置。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOfDataSetTable(System.String)">
      <summary>指定した <see cref="T:System.Data.Common.DataTableMapping" /> テーブル名が含まれる <see cref="T:System.Data.DataSet" /> オブジェクトの位置を取得します。</summary>
      <param name="dataSetTable">検索する <see langword="DataSet" /> テーブル名。大文字と小文字は区別されません。</param>
      <returns>指定した <see cref="T:System.Data.Common.DataTableMapping" /> テーブル名が含まれる <see cref="T:System.Data.DataSet" /> の、0 から始まる位置。<see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトがコレクション内に存在しない場合は -1。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Insert(System.Int32,System.Data.Common.DataTableMapping)">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトを <see cref="T:System.Data.Common.DataTableMappingCollection" /> 内の指定されたインデックス位置に挿入します。</summary>
      <param name="index">挿入する <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトの 0 から始まるインデックス。</param>
      <param name="value">挿入する <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Insert(System.Int32,System.Object)">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトを <see cref="T:System.Data.Common.DataTableMappingCollection" /> 内の指定されたインデックス位置に挿入します。</summary>
      <param name="index">挿入する <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトの 0 から始まるインデックス。</param>
      <param name="value">挿入する <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト。</param>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Item(System.Int32)">
      <summary>指定したインデックスの位置にある <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトを取得または設定します。</summary>
      <param name="index">検索する <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトの、0 から始まるインデックス番号。</param>
      <returns>指定したインデックス位置にある <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Item(System.String)">
      <summary>指定したソース テーブル名が含まれる <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトを取得または設定します。</summary>
      <param name="sourceTable">ソース テーブルの、大文字と小文字が区別される名前。</param>
      <returns>指定したソース テーブル名が含まれる <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Remove(System.Data.Common.DataTableMapping)">
      <summary>指定した <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value">削除する <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Remove(System.Object)">
      <summary>指定した <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value">削除する <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト。</param>
      <exception cref="T:System.InvalidCastException">指定したオブジェクトは <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトではありませんでした。</exception>
      <exception cref="T:System.ArgumentException">指定したオブジェクトはコレクション内に存在しません。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.RemoveAt(System.Int32)">
      <summary>指定したインデックス番号の <see cref="T:System.Data.Common.DataTableMapping" /> をコレクションから削除します。</summary>
      <param name="index">削除する <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトの 0 から始まるインデックス。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定したインデックス番号の <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトは存在しません。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.RemoveAt(System.String)">
      <summary>指定したソース テーブル名が含まれる <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトをコレクションから削除します。</summary>
      <param name="sourceTable">検索するソース テーブル名。大文字と小文字が区別されます。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定したソース テーブル名が含まれる <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトは存在しません。</exception>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IList" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>コレクション内の指定したインデックス位置の項目を取得または設定します。</summary>
      <param name="index">取得または設定する項目の、0 から始まるインデックス。</param>
      <returns>指定したインデックス位置にある要素。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#Add(System.String,System.String)">
      <summary>コレクションにテーブル マップを追加します。</summary>
      <param name="sourceTableName">ソース テーブルの、大文字と小文字が区別される名前。</param>
      <param name="dataSetTableName">
        <see cref="T:System.Data.DataSet" /> テーブルの名前。</param>
      <returns>新しく割り当てられた <see cref="T:System.Data.ITableMapping" /> オブジェクトへの参照。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#GetByDataSetTable(System.String)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> テーブル名を持つ TableMapping オブジェクトを取得します。</summary>
      <param name="dataSetTableName">コレクション内の <see langword="DataSet" /> テーブルの名前。</param>
      <returns>指定した <see langword="DataSet" /> テーブル名を持つ TableMapping オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#Item(System.String)">
      <summary>指定した <see cref="T:System.Data.ITableMapping" /> 名で <see cref="P:System.Data.ITableMapping.SourceTable" /> のインスタンスを取得または設定します。</summary>
      <param name="index">
        <see cref="T:System.Data.ITableMapping" /> の <see langword="SourceTable" /> 名。</param>
      <returns>指定した <see langword="SourceTable" /> 名の <see cref="T:System.Data.ITableMapping" /> のインスタンス。</returns>
    </member>
    <member name="T:System.Data.Common.DbColumn">
      <summary>データ ソース内の列を表します。</summary>
    </member>
    <member name="M:System.Data.Common.DbColumn.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbColumn" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Common.DbColumn.AllowDBNull">
      <summary>
        <see langword="DBNull" /> 値がこの列で許容されるかどうかを示す null 許容のブール値を取得します。または値が設定されていない場合は <see langword="null" /> を返します。 <see langword="true" /> または <see langword="false" /> のいずれかを設定して、<see langword="DBNull" /> 値がこの列で許容されるかどうかを示します。または派生クラスでオーバーライドされる場合は <see langword="null" /> (Visual Basic の場合 <see langword="Nothing" />) を設定できます。</summary>
      <returns>
        <see langword="DBNull" /> 値がこの列で許可されている場合、<see langword="true" /> を返します。それ以外の場合は <see langword="false" /> です。 値が設定されていない場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) が返されます。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseCatalogName">
      <summary>データ ソースに関連付けられているカタログ名を取得します。それ以外で、値が設定されていない場合は <see langword="null" /> です。 カタログ名、または派生クラスでオーバーライドされる場合は <see langword="null" /> のいずれかに設定できます。</summary>
      <returns>データ ソースに関連付けられているカタログ名です。それ以外で、値が設定されていない場合は null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseColumnName">
      <summary>ベースの列名を取得します。それ以外で、値が設定されていない場合は <see langword="null" /> です。 列名、または派生クラスでオーバーライドされる場合は <see langword="null" /> のいずれかに設定できます。</summary>
      <returns>ベースの列名、それ以外で値が設定されていない場合は null 参照 (Visual Basic の場合 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseSchemaName">
      <summary>データ ソースに関連付けられているスキーマ名を取得します。値が設定されていない場合は <see langword="null" /> です。 スキーマ名か、派生クラスでオーバーライドされる場合は <see langword="null" /> に設定できます。</summary>
      <returns>データ ソースに関連付けられているスキーマ名です。値が設定されていない場合は null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseServerName">
      <summary>列に関連付けられているサーバー名を取得します。それ以外で、値が設定されていない場合は <see langword="null" /> です。 サーバー名、または派生クラスでオーバーライドされる場合は <see langword="null" />、のいずれかに設定できます。</summary>
      <returns>列に関連付けられているサーバー名です。それ以外で、値が設定されていない場合は null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseTableName">
      <summary>スキーマ内のテーブル名を取得します。値が設定されていない場合は <see langword="null" /> です。 テーブル名か、派生クラスでオーバーライドされる場合は <see langword="null" /> に設定できます。</summary>
      <returns>スキーマ内のテーブル名です。値が設定されていない場合は null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.ColumnName">
      <summary>列の名前を取得します。 派生クラスでオーバーライドされる場合は、列名に設定できます。</summary>
      <returns>列の名前。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.ColumnOrdinal">
      <summary>データソース行での列の位置 (序数) を取得します。値が設定されていない場合は <see langword="null" /> です。 列の位置を指定する <see langword="int32" /> 値、または派生クラスでオーバーライドされる場合 <see langword="null" /> のいずれかに設定できます。</summary>
      <returns>列序数の <see langword="int32" /> 値、値が設定されていない場合は null 参照 (Visual Basic の場合 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.ColumnSize">
      <summary>列のサイズを取得します。値が設定されていない場合は <see langword="null" /> です。 列のサイズを指定する <see langword="int32" /> 値か、派生クラスでオーバーライドされる場合は <see langword="null" /> に設定できます。</summary>
      <returns>列サイズの<see langword="Nothing" /> 値。値が設定されていない場合は、null 参照 <see langword="int32" />  (Visual Basic)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.DataType">
      <summary>列に格納されているデータの型を取得します。 派生クラスでオーバーライドされる場合に列内のデータ型を表す <see cref="T:System.Type" /> オブジェクトに設定できます。</summary>
      <returns>列に含まれるデータ型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.DataTypeName">
      <summary>データ型の名前を取得します。値が設定されていない場合は <see langword="null" /> です。 データ型の名前、または派生クラスでオーバーライドされる場合は <see langword="null" />、のいずれかに設定できます。</summary>
      <returns>データ型の名前、あるいは値が設定されていない場合は null 参照 (Visual Basic の場合 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsAliased">
      <summary>この列に別名が設定されているかどうかを示す null 許容のブール値を取得するか、値が設定されていない場合は <see langword="null" /> を返します。 <see langword="true" />、この列に別名が設定されているかどうかを示す <see langword="false" />、または派生クラスでオーバーライドされる場合 <see langword="null" /> (Visual Basic の場合 <see langword="Nothing" />)、のいずれかに設定できます。</summary>
      <returns>この列に別名が設定されている場合 <see langword="true" /> を返します。それ以外の場合、<see langword="false" /> です。 値が設定されていない場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) が返されます。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsAutoIncrement">
      <summary>この列の値が自動的にインクリメントされるかどうかを示す null 許容のブール値を取得するか、値が設定されていない場合は <see langword="null" /> を返します。 <see langword="true" />、この列の値が自動的にインクリメントされるかどうかを示す <see langword="false" />、または派生クラスでオーバーライドされる場合 <see langword="null" /> (Visual Basic の場合 <see langword="Nothing" />)、のいずれかに設定できます。</summary>
      <returns>この列の値が自動的にインクリメントされる場合に <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> です。 値が設定されていない場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) が返されます。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsExpression">
      <summary>この列が式であるかどうかを示す null 許容のブール値を取得するか、値が設定されていない場合は <see langword="null" /> を返します。 <see langword="true" />、この列が式であるかどうかを示す <see langword="false" />、または派生クラスでオーバーライドされる場合 <see langword="null" /> (Visual Basic の場合 <see langword="Nothing" />)、のいずれかに設定できます。</summary>
      <returns>この列が式である場合 <see langword="true" /> を返します。それ以外の場合、<see langword="false" /> です。 値が設定されていない場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) が返されます。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsHidden">
      <summary>この列が非表示であるかどうかを示す null 許容のブール値を取得するか、値が設定されていない場合は <see langword="null" /> を返します。 <see langword="true" /> または <see langword="false" /> のいずれかを設定して、この列が非表示かどうかを示します。または、派生クラスでオーバーライドされる場合は <see langword="null" /> (Visual Basic の場合 <see langword="Nothing" />) を設定できます。</summary>
      <returns>この列が非表示である場合 <see langword="true" /> を返します。それ以外の場合、<see langword="false" /> です。 値が設定されていない場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) が返されます。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsIdentity">
      <summary>この列が ID であるかどうかを示す null 許容のブール値を取得するか、値が設定されていない場合は <see langword="null" /> を返します。 <see langword="true" />、この列が ID であるかどうかを示す <see langword="false" />、または派生クラスでオーバーライドされる場合は <see langword="null" /> (Visual Basic の場合は <see langword="Nothing" />) のいずれかに設定できます。</summary>
      <returns>この列が ID の場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> です。 値が設定されていない場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) が返されます。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsKey">
      <summary>この列がキーであるかどうかを示す null 許容のブール値を取得するか、値が設定されていない場合は <see langword="null" /> を返します。 <see langword="true" />、この列がキーであるかどうかを示す <see langword="false" />、または派生クラスでオーバーライドされる場合は <see langword="null" /> (Visual Basic の場合は <see langword="Nothing" />) に設定できます。</summary>
      <returns>この列がキーの場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> です。 値が設定されていない場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) が返されます。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsLong">
      <summary>この列が長いデータを含むかどうかを示す null 許容のブール値を取得するか、値が設定されていない場合は <see langword="null" /> を返します。 <see langword="true" />、この列が長いデータを含むかどうかを示す <see langword="false" />、または派生クラスでオーバーライドされる場合 <see langword="null" /> (Visual Basic の場合 <see langword="Nothing" />)、のいずれかに設定できます。</summary>
      <returns>この列が長いデータを含む場合に <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> です。 値が設定されていない場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) が返されます。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsReadOnly">
      <summary>この列が読み取り専用であるかどうかを示す null 許容のブール値を取得するか、値が設定されていない場合は <see langword="null" /> を返します。 <see langword="true" /> または <see langword="false" /> のいずれかを設定して、この列が読み取り専用であるかどうかを示します。または、派生クラスでオーバーライドされる場合は <see langword="null" /> (Visual Basic の場合 <see langword="Nothing" />) を設定できます。</summary>
      <returns>この列が読み取り専用の場合は <see langword="true" /> を返し、それ以外の場合は <see langword="false" /> を返します。 値が設定されていない場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) が返されます。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsUnique">
      <summary>一意の制約がこの列に適用されるかどうかを示す null 許容のブール値を取得します。または、値が設定されていない場合は <see langword="null" /> を返します。 <see langword="true" /> または <see langword="false" /> のいずれかを設定して、一意の制約がこの列に適用されるかどうかを示します。または、派生クラスでオーバーライドされる場合は <see langword="null" /> (Visual Basic の場合 <see langword="Nothing" />) を設定できます。</summary>
      <returns>この列に一意の制約が適用される場合、<see langword="true" /> を返します。それ以外の場合 <see langword="false" /> です。 値が設定されていない場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) が返されます。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.Item(System.String)">
      <summary>列プロパティの名前に基づいてオブジェクトを取得します。</summary>
      <param name="property">列のプロパティ名。</param>
      <returns>列のプロパティ名に基づくオブジェクト。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.NumericPrecision">
      <summary>列のデータの数値有効桁数を取得します。あるいは値が設定されていない場合は <see langword="null" />。 列のデータの数値有効桁数を指定する <see langword="int32" /> 値か、派生クラスでオーバーライドされる場合は <see langword="null" /> に設定できます。</summary>
      <returns>データが数値の場合は、列データの有効桁数を示す<see langword="Nothing" /> 値。それ以外の場合は、値が設定されていない場合は null 参照 (Visual Basic)。 <see langword="int32" /></returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.NumericScale">
      <summary>
        <see langword="null" /> または列のデータの小数点以下桁数を返す、null 許容の <see langword="int32" /> 値を取得します。 <see langword="null" /> か、派生クラスでオーバーライドされる場合に列のデータの小数点以下桁数を指定する <see langword="int32" /> 値に設定できます。</summary>
      <returns>値が設定されていない場合、null 参照 (Visual Basic の場合は <see langword="Nothing" />)、あるいはデータが数値の場合、列のデータの有効桁数を指定する <see langword="int32" /> 値。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.UdtAssemblyQualifiedName">
      <summary>列のデータの型を表す <see cref="T:System.Type" /> オブジェクトのアセンブリ修飾名を取得します。それ以外で、値が設定されていない場合は、<see langword="null" /> です。 アセンブリ修飾名、または派生クラスでオーバーライドされる場合は <see langword="null" />、のいずれかに設定できます。</summary>
      <returns>列のデータの型を表す <see cref="T:System.Type" /> オブジェクトのアセンブリ修飾名です。それ以外で、値が設定されていない場合は、null 参照 (Visual Basic の場合 <see langword="Nothing" />) です。</returns>
    </member>
    <member name="T:System.Data.Common.DbCommand">
      <summary>データ ソースに対して実行する SQL ステートメントまたはストアド プロシージャを表します。 コマンドを表すデータベース固有のクラスの基本クラスを提供します。 <see cref="Overload:System.Data.Common.DbCommand.ExecuteNonQueryAsync" /></summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbCommand" /> オブジェクトのインスタンスを構築します。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.Cancel">
      <summary>派生クラス内でオーバーライドされた場合、<see cref="T:System.Data.Common.DbCommand" /> の実行のキャンセルを試行します。</summary>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandText">
      <summary>派生クラス内でオーバーライドされた場合、データ ソースに対して実行するテキスト コマンドを取得または設定します。</summary>
      <returns>実行するテキスト コマンド。 既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandTimeout">
      <summary>派生クラス内でオーバーライドされた場合、コマンド実行の試行を終了してエラーを生成するまでの待機時間 (秒単位) を取得または設定します。</summary>
      <returns>コマンドの実行を待機する時間 (秒単位)。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandType">
      <summary>派生クラス内でオーバーライドされた場合、<see cref="P:System.Data.Common.DbCommand.CommandText" /> プロパティがどのように解釈されるかを取得または設定します。</summary>
      <returns>コマンド文字列の解釈方法を指定する列挙値の1つ。 既定値は、<see langword="Text" /> です。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.Connection">
      <summary>この <see cref="T:System.Data.Common.DbConnection" /> で使用される <see cref="T:System.Data.Common.DbCommand" /> を取得または設定します。</summary>
      <returns>データ ソースへの接続。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.CreateDbParameter">
      <summary>派生クラス内でオーバーライドされた場合、<see cref="T:System.Data.Common.DbParameter" /> オブジェクトの新しいインスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.CreateParameter">
      <summary>
        <see cref="T:System.Data.Common.DbParameter" /> オブジェクトの新しいインスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbConnection">
      <summary>派生クラス内でオーバーライドされた場合、この <see cref="T:System.Data.Common.DbCommand" /> によって使用される <see cref="T:System.Data.Common.DbConnection" /> を取得または設定します。</summary>
      <returns>データ ソースへの接続。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbParameterCollection">
      <summary>派生クラス内でオーバーライドされた場合、<see cref="T:System.Data.Common.DbParameter" /> オブジェクトのコレクションを取得します。</summary>
      <returns>SQL ステートメントまたはストアド プロシージャのパラメーター。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbTransaction">
      <summary>派生クラス内でオーバーライドされた場合、この <see cref="T:System.Data.Common.DbCommand" /> オブジェクトが実行される <see cref="P:System.Data.Common.DbCommand.DbTransaction" /> を取得または設定します。</summary>
      <returns>.NET データプロバイダーのコマンドオブジェクトが実行されるトランザクション。 既定値は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DesignTimeVisible">
      <summary>派生クラス内でオーバーライドされた場合、カスタマイズしたインターフェイス コントロールにコマンド オブジェクトを表示する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>コマンド オブジェクトをコントロールに表示する必要がある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.DisposeAsync">
      <summary>コマンド オブジェクトを非同期に破棄します。</summary>
      <returns>非同期操作を表す <see cref="T:System.Threading.Tasks.ValueTask" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
      <summary>派生クラス内でオーバーライドされた場合、接続に対してコマンド テキストを実行します。</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> のインスタンス。</param>
      <returns>操作を表すタスク。</returns>
      <exception cref="T:System.Data.Common.DbException">コマンド テキストの実行中にエラーが発生しました。</exception>
      <exception cref="T:System.ArgumentException">正しくない <see cref="T:System.Data.CommandBehavior" /> 値。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>プロバイダーは、<see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> のオーバーロードに既定以外の実装を提供するには、このメソッドを実装する必要があります。
既定の実装は <see cref="M:System.Data.Common.DbCommand.ExecuteReader" /> 同期メソッドを呼び出し、完了したタスクを返します。呼び出し元のスレッドはブロックされます。 既定の実装は、既に取り消されたキャンセル トークンを渡した場合、取り消されたタスクを返します。 ExecuteReader によってスローされる例外は、返されたタスクの Exception プロパティを介して通信されます。
このメソッドは、早期に操作をキャンセルすることを要求するために使用できるキャンセル トークンを受け取ります。 実装は、この要求を無視する場合があります。</summary>
      <param name="behavior">ステートメントの実行とデータ取得に関するオプション。</param>
      <param name="cancellationToken">非同期操作を取り消すトークン。</param>
      <returns>非同期操作を表すタスク。</returns>
      <exception cref="T:System.Data.Common.DbException">コマンド テキストの実行中にエラーが発生しました。</exception>
      <exception cref="T:System.ArgumentException">正しくない <see cref="T:System.Data.CommandBehavior" /> 値。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQuery">
      <summary>派生クラス内でオーバーライドされた場合、接続オブジェクトに対して SQL ステートメントを実行します。</summary>
      <returns>影響を受けた行の数。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync">
      <summary>接続オブジェクトに対して SQL ステートメントを実行する <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> の非同期バージョン。
CancellationToken.None を使用して、<see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" /> を呼び出します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <exception cref="T:System.Data.Common.DbException">コマンド テキストの実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>これは <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> の非同期バージョンです。 プロバイダーは、適切な実装でオーバーライドする必要があります。 オプションで、キャンセル トークンを無視できます。
既定の実装は <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> 同期メソッドを呼び出し、完了したタスクを返します。呼び出し元のスレッドはブロックされます。 既定の実装は、既に取り消されたキャンセル トークンを渡した場合、取り消されたタスクを返します。  <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> によってスローされる例外は、返されたタスクの Exception プロパティを介して通信されます。
返されたタスクが完了するまで <see langword="DbCommand" /> オブジェクトの他のメソッドとプロパティを呼び出さないでください。</summary>
      <param name="cancellationToken">非同期操作を取り消すトークン。</param>
      <returns>非同期操作を表すタスク。</returns>
      <exception cref="T:System.Data.Common.DbException">コマンド テキストの実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReader">
      <summary>
        <see cref="P:System.Data.Common.DbCommand.CommandText" /> に対して <see cref="P:System.Data.Common.DbCommand.Connection" /> を実行し、<see cref="T:System.Data.Common.DbDataReader" /> を返します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>
        <see cref="P:System.Data.Common.DbCommand.CommandText" /> に対して <see cref="P:System.Data.Common.DbCommand.Connection" /> を実行し、<see cref="T:System.Data.Common.DbDataReader" /> 値の 1 つを使用して <see cref="T:System.Data.CommandBehavior" /> を返します。</summary>
      <param name="behavior">コマンドの動作を指定する列挙値の 1 つ。</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync">
      <summary>
        <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> に対して <see cref="P:System.Data.Common.DbCommand.CommandText" /> を実行し、<see cref="P:System.Data.Common.DbCommand.Connection" /> を返す <see cref="T:System.Data.Common.DbDataReader" /> の非同期バージョン。
CancellationToken.None を使用して、<see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" /> を呼び出します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <exception cref="T:System.Data.Common.DbException">コマンド テキストの実行中にエラーが発生しました。</exception>
      <exception cref="T:System.ArgumentException">正しくない <see cref="T:System.Data.CommandBehavior" /> 値。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>
        <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> に対して <see cref="P:System.Data.Common.DbCommand.CommandText" /> を実行し、<see cref="P:System.Data.Common.DbCommand.Connection" /> を返す <see cref="T:System.Data.Common.DbDataReader" /> の非同期バージョン。
<see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" /> を呼び出します。</summary>
      <param name="behavior">コマンドの動作を指定した列挙値の 1 つ。</param>
      <returns>非同期操作を表すタスク。</returns>
      <exception cref="T:System.Data.Common.DbException">コマンド テキストの実行中にエラーが発生しました。</exception>
      <exception cref="T:System.ArgumentException">正しくない <see cref="T:System.Data.CommandBehavior" /> 値。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" /> を呼び出します。</summary>
      <param name="behavior">コマンドの動作を指定する列挙値の 1 つ。</param>
      <param name="cancellationToken">非同期操作を取り消すトークン。</param>
      <returns>非同期操作を表すタスク。</returns>
      <exception cref="T:System.Data.Common.DbException">コマンド テキストの実行中にエラーが発生しました。</exception>
      <exception cref="T:System.ArgumentException">正しくない <see cref="T:System.Data.CommandBehavior" /> 値。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> に対して <see cref="P:System.Data.Common.DbCommand.CommandText" /> を実行し、<see cref="P:System.Data.Common.DbCommand.Connection" /> を返す <see cref="T:System.Data.Common.DbDataReader" /> の非同期バージョン。 このメソッドは操作を取り消す通知を配信します。
<see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" /> を呼び出します。</summary>
      <param name="cancellationToken">非同期操作を取り消すトークン。</param>
      <returns>非同期操作を表すタスク。</returns>
      <exception cref="T:System.Data.Common.DbException">コマンド テキストの実行中にエラーが発生しました。</exception>
      <exception cref="T:System.ArgumentException">正しくない <see cref="T:System.Data.CommandBehavior" /> 値。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalar">
      <summary>派生クラス内でオーバーライドされた場合、クエリを実行し、そのクエリが返す結果セットの最初の行にある最初の列を返します。 他のすべての列および行は無視されます。</summary>
      <returns>結果セット内の最初の行の最初の列。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalarAsync">
      <summary>クエリを実行し、クエリで返された結果セットの最初の行の最初の列を返す <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> の非同期バージョン。 他のすべての列および行は無視されます。
CancellationToken.None を使用して、<see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" /> を呼び出します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <exception cref="T:System.Data.Common.DbException">コマンド テキストの実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)">
      <summary>これは <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> の非同期バージョンです。 プロバイダーは、適切な実装でオーバーライドする必要があります。 オプションで、キャンセル トークンを無視できます。
既定の実装は <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> 同期メソッドを呼び出し、完了したタスクを返します。呼び出し元のスレッドはブロックされます。 既定の実装は、既に取り消されたキャンセル トークンを渡した場合、取り消されたタスクを返します。 ExecuteScalar によってスローされる例外は、返されたタスクの Exception プロパティを介して通信されます。
返されたタスクが完了するまで <see langword="DbCommand" /> オブジェクトの他のメソッドとプロパティを呼び出さないでください。</summary>
      <param name="cancellationToken">非同期操作を取り消すトークン。</param>
      <returns>非同期操作を表すタスク。</returns>
      <exception cref="T:System.Data.Common.DbException">コマンド テキストの実行中にエラーが発生しました。</exception>
    </member>
    <member name="P:System.Data.Common.DbCommand.Parameters">
      <summary>
        <see cref="T:System.Data.Common.DbParameter" /> オブジェクトのコレクションを取得します。 パラメーターの詳細については、「パラメーターおよびパラメーター データ型の構成」を参照してください。</summary>
      <returns>SQL ステートメントまたはストアド プロシージャのパラメーター。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.Prepare">
      <summary>派生クラス内でオーバーライドされた場合、準備済み (またはコンパイル済み) バージョンのコマンドをデータ ソース上に作成します。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.PrepareAsync(System.Threading.CancellationToken)">
      <summary>準備済み (またはコンパイル済み) バージョンのコマンドをデータ ソース上に非同期に作成します。</summary>
      <param name="cancellationToken">非同期操作を取り消すオプションのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期操作を表す <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Connection">
      <summary>この <see cref="T:System.Data.IDbCommand" /> のインスタンスで使用する <see cref="T:System.Data.IDbConnection" /> を取得または設定します。</summary>
      <returns>データ ソースへの接続。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#CreateParameter">
      <summary>
        <see cref="T:System.Data.IDbDataParameter" /> オブジェクトの新しいインスタンスを作成します。</summary>
      <returns>
        <see langword="IDbDataParameter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader">
      <summary>
        <see cref="P:System.Data.IDbCommand.Connection" /> に対して <see cref="P:System.Data.IDbCommand.CommandText" /> を実行し、<see cref="T:System.Data.IDataReader" /> をビルドします。</summary>
      <returns>
        <see cref="T:System.Data.IDataReader" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
      <summary>
        <see cref="P:System.Data.IDbCommand.Connection" /> に対して <see cref="P:System.Data.IDbCommand.CommandText" /> を実行し、<see cref="T:System.Data.CommandBehavior" /> の値のいずれかを使用して <see cref="T:System.Data.IDataReader" /> をビルドします。</summary>
      <param name="behavior">コマンドの動作を指定する列挙値の 1 つ。</param>
      <returns>
        <see cref="T:System.Data.IDataReader" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Parameters">
      <summary>
        <see cref="T:System.Data.IDataParameterCollection" /> を取得します。</summary>
      <returns>SQL ステートメントまたはストアド プロシージャのパラメーター。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Transaction">
      <summary>この <see cref="T:System.Data.Common.DbCommand" /> オブジェクトが実行される <see cref="P:System.Data.Common.DbCommand.DbTransaction" /> を取得または設定します。</summary>
      <returns>.NET Framework データ プロバイダーの <see langword="Command" /> オブジェクトが実行されるトランザクション。 既定値は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.Transaction">
      <summary>この <see cref="T:System.Data.Common.DbCommand" /> オブジェクトが実行される <see cref="T:System.Data.Common.DbTransaction" /> を取得または設定します。</summary>
      <returns>.NET Framework データ プロバイダーの <see langword="Command" /> オブジェクトが実行されるトランザクション。 既定値は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.UpdatedRowSource">
      <summary>派生クラス内でオーバーライドされた場合、コマンドの結果が、<see cref="T:System.Data.Common.DbDataAdapter" /> の Update メソッドにより使用された場合に <see cref="T:System.Data.DataRow" /> に適用される方法を取得または設定します。</summary>
      <returns>コマンドの結果がどのように適用されるかを示す列挙値の1つ。 コマンドが自動的に生成される場合を除き、既定値は <see langword="Both" /> です。 自動的に生成される場合、既定値は <see langword="None" /> です。</returns>
    </member>
    <member name="T:System.Data.Common.DbCommandBuilder">
      <summary>データベースに関連付けられた <see cref="T:System.Data.DataSet" /> への変更を調整するための単一テーブル コマンドを自動的に生成します。 これは抽象クラスであり、継承以外はできません。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> クラスから継承するクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> クラスのプロバイダーの実装が、追加パラメーターのプロパティを処理できるようにします。</summary>
      <param name="parameter">追加の変更を適用する対象の <see cref="T:System.Data.Common.DbParameter" />。</param>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> で提供されるスキーマ テーブルの <see cref="M:System.Data.Common.DbDataReader.GetSchemaTable" />。</param>
      <param name="statementType">生成されるコマンドの種類である INSERT、UPDATE、または DELETE。</param>
      <param name="whereClause">パラメーターが UPDATE または DELETE の WHERE 句の一部である場合は <see langword="true" />。INSERT または UPDATE の値の一部である場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.CatalogLocation">
      <summary>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> クラスのインスタンスの <see cref="T:System.Data.Common.CatalogLocation" /> を設定または取得します。</summary>
      <returns>
        <see cref="T:System.Data.Common.CatalogLocation" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.CatalogSeparator">
      <summary>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> クラスのインスタンスのカタログの区切り記号として使用する文字列を設定または取得します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> クラスのインスタンスで使用するカタログの区切り記号を示す文字列。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.ConflictOption">
      <summary>
        <see cref="T:System.Data.ConflictOption" /> で使用する <see cref="T:System.Data.Common.DbCommandBuilder" /> を指定します。</summary>
      <returns>この <see cref="T:System.Data.ConflictOption" /> の動作を説明する <see cref="T:System.Data.Common.DbCommandBuilder" /> 値の 1 つを返します。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.DataAdapter">
      <summary>Transact-SQL ステートメントを自動生成する対象の <see cref="T:System.Data.Common.DbDataAdapter" /> オブジェクトを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataAdapter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand">
      <summary>データ ソースで削除処理を実行するための、自動生成された <see cref="T:System.Data.Common.DbCommand" /> オブジェクトを取得します。</summary>
      <returns>削除を実行するための自動生成された <see cref="T:System.Data.Common.DbCommand" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
      <summary>オプションでパラメーター名に列を使用し、データ ソースで削除処理を実行するための、自動生成された <see cref="T:System.Data.Common.DbCommand" /> オブジェクトを取得します。</summary>
      <param name="useColumnsForParameterNames">可能であれば、列名に一致するパラメーター名を生成する場合は <see langword="true" />。 <see langword="false" /> の場合、<c>@p1</c>、<c>@p2</c> のように生成します。</param>
      <returns>削除を実行するための自動生成された <see cref="T:System.Data.Common.DbCommand" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetInsertCommand">
      <summary>データ ソースで挿入処理を実行するための、自動生成された <see cref="T:System.Data.Common.DbCommand" /> オブジェクトを取得します。</summary>
      <returns>挿入を実行するための自動生成された <see cref="T:System.Data.Common.DbCommand" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
      <summary>オプションでパラメーター名に列を使用し、データ ソースで挿入処理を実行するための、自動生成された <see cref="T:System.Data.Common.DbCommand" /> オブジェクトを取得します。</summary>
      <param name="useColumnsForParameterNames">可能であれば、列名に一致するパラメーター名を生成する場合は <see langword="true" />。 <see langword="false" /> の場合、<c>@p1</c>、<c>@p2</c> のように生成します。</param>
      <returns>挿入を実行するための自動生成された <see cref="T:System.Data.Common.DbCommand" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)">
      <summary>指定したパラメーターの名前を、<c>@p#</c> の形式で返します。 カスタムのコマンド ビルダーを作成する場合に使用します。</summary>
      <param name="parameterOrdinal">パラメーターの名前の一部として含まれる数。</param>
      <returns>パラメーター名の一部として追加された、指定した数を含むパラメーターの名前。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.String)">
      <summary>部分的なパラメーター名を指定して、完全なパラメーター名を返します。</summary>
      <param name="parameterName">パラメーターの部分的な名前。</param>
      <returns>要求された部分的なパラメーター名に対応する完全なパラメーター名。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)">
      <summary>関連付けられた SQL ステートメントのパラメーターのプレースホルダーを返します。</summary>
      <param name="parameterOrdinal">パラメーターの名前の一部として含まれる数。</param>
      <returns>追加された、指定した数を含むパラメーターの名前。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)">
      <summary>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> に対するスキーマ テーブルを返します。</summary>
      <param name="sourceCommand">対応するスキーマ テーブルを取得する対象の <see cref="T:System.Data.Common.DbCommand" />。</param>
      <returns>特定の <see cref="T:System.Data.DataTable" /> に対するスキーマを表す <see cref="T:System.Data.Common.DbCommand" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand">
      <summary>データ ソースで更新処理を実行するための、自動生成された <see cref="T:System.Data.Common.DbCommand" /> オブジェクトを取得します。</summary>
      <returns>更新を実行するための自動生成された <see cref="T:System.Data.Common.DbCommand" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
      <summary>オプションでパラメーター名に列を使用し、データ ソースで更新処理を実行するための、自動生成された <see cref="T:System.Data.Common.DbCommand" /> オブジェクトを取得します。</summary>
      <param name="useColumnsForParameterNames">可能であれば、列名に一致するパラメーター名を生成する場合は <see langword="true" />。 <see langword="false" /> の場合、<c>@p1</c>、<c>@p2</c> のように生成します。</param>
      <returns>更新を実行するための自動生成された <see cref="T:System.Data.Common.DbCommand" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)">
      <summary>
        <see cref="P:System.Data.Common.DbCommand.CommandTimeout" /> の <see cref="P:System.Data.Common.DbCommand.Transaction" />、<see cref="P:System.Data.Common.DbCommand.CommandType" />、<see cref="T:System.Data.UpdateRowSource" />、および <see cref="T:System.Data.Common.DbCommand" /> の各プロパティをリセットします。</summary>
      <param name="command">対応する挿入、更新、または削除コマンドのコマンド ビルダーが使用する <see cref="T:System.Data.Common.DbCommand" />。</param>
      <returns>挿入、更新、または削除の各操作で使用する <see cref="T:System.Data.Common.DbCommand" /> インスタンス。 null 値を渡すことで、<see cref="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)" /> メソッドは、<see cref="T:System.Data.Common.DbCommand" /> に関連付けられている SELECT コマンドに基づいて <see cref="T:System.Data.Common.DbCommandBuilder" /> オブジェクトを作成できます。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)">
      <summary>大文字と小文字を正しく区別したカタログ内の、引用符で囲まれていない ID が指定されると、その ID を引用符で囲まれた正しい形式で返します。ID 内に埋め込まれている引用符はすべて適切にエスケープされます。</summary>
      <param name="unquotedIdentifier">引用符で囲まれていない元の ID。</param>
      <returns>引用符で囲まれたバージョンの ID。 ID 内に埋め込まれている引用符は適切にエスケープされます。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.QuotePrefix">
      <summary>名前に空白や予約済みトークンなどの文字を含むデータベース オブジェクト (テーブル、列など) を指定するための開始文字を取得または設定します。</summary>
      <returns>使用する開始文字。 既定値は空の文字列です。</returns>
      <exception cref="T:System.InvalidOperationException">このプロパティは、挿入、更新、または削除コマンドの生成後には変更できません。</exception>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.QuoteSuffix">
      <summary>名前に空白や予約済みトークンなどの文字を含むデータベース オブジェクト (テーブル、列など) を指定するための終了文字を取得または設定します。</summary>
      <returns>使用する終了文字。 既定値は空の文字列です。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.RefreshSchema">
      <summary>この <see cref="T:System.Data.Common.DbCommandBuilder" /> に関連付けられているコマンドを削除します。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)">
      <summary>
        <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> イベントのイベント ハンドラーを追加します。</summary>
      <param name="rowUpdatingEvent">イベントの情報が格納されている <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> インスタンス。</param>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.SchemaSeparator">
      <summary>スキーマ識別子と他の識別子との間の区切り記号として使用される文字列を取得または設定します。</summary>
      <returns>スキーマ区切り記号として使用される文字列。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.SetAllValues">
      <summary>UPDATE ステートメントにすべての列値が含まれるのか、変更になった列値だけが含まれるのかを示します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> で生成される UPDATE ステートメントがすべての列を含む場合は <see langword="true" />。変更になった列だけを含む場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
      <summary>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> を登録して、<see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> の <see cref="T:System.Data.Common.DbDataAdapter" /> イベントを処理します。</summary>
      <param name="adapter">更新に使用する <see cref="T:System.Data.Common.DbDataAdapter" />。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)">
      <summary>引用符で囲まれた ID が指定されると、その ID を引用符で囲まれない正しい形式で返します。ID 内に埋め込まれている引用符はすべて適切にエスケープ解除されます。</summary>
      <param name="quotedIdentifier">埋め込まれている引用符が削除される ID。</param>
      <returns>引用符で囲まれない ID。埋め込まれていた引用符は適切にエスケープ解除されます。</returns>
    </member>
    <member name="T:System.Data.Common.DbConnection">
      <summary>データベース接続のコア動作を定義し、データベース専用の接続の基底クラスを提供します。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbConnection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)">
      <summary>派生クラスでオーバーライドされた場合、データベース トランザクションを開始します。</summary>
      <param name="isolationLevel">使用するトランザクションの分離レベルを示す列挙値の 1 つ。</param>
      <returns>新しいトランザクションを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginDbTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
      <summary>データベース トランザクションを非同期に開始します。</summary>
      <param name="isolationLevel">使用するトランザクションの分離レベルを示す列挙値の 1 つ。</param>
      <param name="cancellationToken">非同期操作を取り消すトークン。</param>
      <returns>
        <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが新しいトランザクションを表すオブジェクトであるタスク。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransaction">
      <summary>データベース トランザクションを開始します。</summary>
      <returns>新しいトランザクションを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>分離レベルを指定して、データベース トランザクションを開始します。</summary>
      <param name="isolationLevel">使用するトランザクションの分離レベルを示す列挙値の 1 つ。</param>
      <returns>新しいトランザクションを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
      <summary>データベース トランザクションを非同期に開始します。</summary>
      <param name="isolationLevel">使用するトランザクションの分離レベルを示す列挙値の 1 つ。</param>
      <param name="cancellationToken">非同期操作を取り消すオプションのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>
        <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが新しいトランザクションを表すオブジェクトであるタスク。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransactionAsync(System.Threading.CancellationToken)">
      <summary>データベース トランザクションを非同期に開始します。</summary>
      <param name="cancellationToken">非同期操作を取り消すオプションのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>
        <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが新しいトランザクションを表すオブジェクトであるタスク。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.ChangeDatabase(System.String)">
      <summary>派生クラスでオーバーライドされた場合、開いている接続の現在のデータベースを変更します。</summary>
      <param name="databaseName">使用する接続のデータベースの名前。</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.ChangeDatabaseAsync(System.String,System.Threading.CancellationToken)">
      <summary>開いている接続の現在のデータベースを非同期に変更します。</summary>
      <param name="databaseName">使用する接続のデータベースの名前。</param>
      <param name="cancellationToken">非同期操作を取り消すオプションのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期操作を表すタスク。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.Close">
      <summary>派生クラスでオーバーライドされた場合、データベースへの接続を閉じます。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.CloseAsync">
      <summary>データベースへの接続を非同期に閉じます。</summary>
      <returns>非同期操作を表す <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ConnectionString">
      <summary>派生クラスでオーバーライドされた場合、接続を開くために使用される文字列を取得または設定します。</summary>
      <returns>初期接続を確立するために使用する接続文字列。 接続文字列の正確な内容は、この接続の特定のデータ ソースに応じて異なります。 既定値は空の文字列です。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ConnectionTimeout">
      <summary>試行を終了してエラーを生成するまでの、接続の確立時に待機する時間 (秒単位) を取得します。</summary>
      <returns>接続が開くのを待機する時間 (秒単位)。 既定値は、使用している特定の接続の種類により決まります。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.CreateCommand">
      <summary>現在の接続に関連付けられている <see cref="T:System.Data.Common.DbCommand" /> オブジェクトを作成し、返します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.CreateDbCommand">
      <summary>派生クラスでオーバーライドされた場合、現在の接続に関連付けられている <see cref="T:System.Data.Common.DbCommand" /> オブジェクトを作成して返します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.Database">
      <summary>派生クラスでオーバーライドされた場合、接続が開いてから現在のデータベースの名前を取得するか、接続が開く前に接続文字列に指定されたデータベース名を取得します。</summary>
      <returns>現在のデータベース、または接続が開いてから使用するデータベースの名前。 既定値は空の文字列です。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.DataSource">
      <summary>派生クラスでオーバーライドされた場合、接続するデータベース サーバーの名前を取得します。</summary>
      <returns>接続するデータベース サーバーの名前。 既定値は空の文字列です。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.DbProviderFactory">
      <summary>この <see cref="T:System.Data.Common.DbProviderFactory" /> の <see cref="T:System.Data.Common.DbConnection" /> を取得します。</summary>
      <returns>プロバイダーのデータ ソース クラスの実装のインスタンスを作成するためのメソッドのセット。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.DisposeAsync">
      <summary>接続オブジェクトを非同期に破棄します。</summary>
      <returns>非同期操作を表す <see cref="T:System.Threading.Tasks.ValueTask" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>指定したトランザクションに参加します。</summary>
      <param name="transaction">登録先の既存の <see cref="T:System.Transactions.Transaction" /> への参照。</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema">
      <summary>この <see cref="T:System.Data.Common.DbConnection" /> のデータ ソースのスキーマ情報を返します。</summary>
      <returns>スキーマ情報を格納する <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema(System.String)">
      <summary>スキーマ名として指定した文字列を使用して、この <see cref="T:System.Data.Common.DbConnection" /> のデータ ソースのスキーマ情報を返します。</summary>
      <param name="collectionName">返すスキーマの名前を指定します。</param>
      <returns>スキーマ情報を格納する <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionName" /> は null として指定されます。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema(System.String,System.String[])">
      <summary>スキーマ名に指定した文字列と制限値に指定した文字列配列を使用して、この <see cref="T:System.Data.Common.DbConnection" /> のデータ ソースのスキーマ情報を返します。</summary>
      <param name="collectionName">返すスキーマの名前を指定します。</param>
      <param name="restrictionValues">要求したスキーマの制限値のセットを指定します。</param>
      <returns>スキーマ情報を格納する <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionName" /> は null として指定されます。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.Common.DbConnection.StateChange" /> イベントを発生させます。</summary>
      <param name="stateChange">イベント データを格納している <see cref="T:System.Data.StateChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.Open">
      <summary>派生クラスでオーバーライドされた場合、<see cref="P:System.Data.Common.DbConnection.ConnectionString" /> で指定された設定を使用してデータベース接続を開きます。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.OpenAsync">
      <summary>
        <see cref="M:System.Data.Common.DbConnection.Open" /> で指定した設定を使用してデータベース接続を開く <see cref="P:System.Data.Common.DbConnection.ConnectionString" /> の非同期バージョン。 このメソッドは、CancellationToken.None で仮想メソッド <see cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)" /> を呼び出します。</summary>
      <returns>非同期操作を表すタスク。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>これは <see cref="M:System.Data.Common.DbConnection.Open" /> の非同期バージョンです。 プロバイダーは、適切な実装でオーバーライドする必要があります。 オプションで、キャンセル トークン優先できます。
既定の実装は同期 <see cref="M:System.Data.Common.DbConnection.Open" /> コールを呼び出し、完了したタスクを返します。 既定の実装は、既に取り消された cancellationToken を渡した場合、取り消されたタスクを返します。 Open によってスローされる例外は、返されたタスクの Exception プロパティを介して通信されます。
返されたタスクが完了するまで <see langword="DbConnection" /> オブジェクトの他のメソッドとプロパティを呼び出さないでください。</summary>
      <param name="cancellationToken">取り消し命令。</param>
      <returns>非同期操作を表すタスク。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ServerVersion">
      <summary>派生クラスでオーバーライドされた場合、オブジェクトが接続しているサーバーのバージョンを表す文字列を取得します。</summary>
      <returns>データベースのバージョン。 返される文字列の形式は、使用している特定の接続の種類に応じて決まります。</returns>
      <exception cref="T:System.InvalidOperationException">返されるタスクが完了しておらず、<see cref="Overload:System.Data.Common.DbConnection.OpenAsync" /> への呼び出しの後に接続が開かれていないときに、<see cref="P:System.Data.Common.DbConnection.ServerVersion" /> が呼び出されました。</exception>
    </member>
    <member name="P:System.Data.Common.DbConnection.State">
      <summary>接続の状態を説明する文字列を取得します。</summary>
      <returns>接続の状態。 返される文字列の形式は、使用している特定の接続の種類に応じて決まります。</returns>
    </member>
    <member name="E:System.Data.Common.DbConnection.StateChange">
      <summary>イベントの状態が変更したときに発生します。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction">
      <summary>データベース トランザクションを開始します。</summary>
      <returns>新しいトランザクションを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)">
      <summary>分離レベルを指定して、データベース トランザクションを開始します。</summary>
      <param name="isolationLevel">使用するトランザクションの分離レベルを示す列挙値の 1 つ。</param>
      <returns>新しいトランザクションを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand">
      <summary>現在の接続に関連付けられた <see cref="T:System.Data.Common.DbCommand" /> オブジェクトを作成し、返します。</summary>
      <returns>接続に関連付けられている <see cref="T:System.Data.Common.DbCommand" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Data.Common.DbConnectionStringBuilder">
      <summary>厳密に型指定された接続文字列ビルダーのための基底クラスを提供します。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> クラスの新しいインスタンスを初期化します。必要に応じて、値を引用符で囲むことについての ODBC の規則が使用されます。</summary>
      <param name="useOdbcRules">フィールドの区切りに <see langword="true" /> を使用する場合、{}。引用符を使用する場合、<see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)">
      <summary>指定したキーおよび値を持つエントリを <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> に追加します。</summary>
      <param name="keyword">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> に追加するキー。</param>
      <param name="value">指定したキーの値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> が null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> は読み取り専用です。

または -
<see cref="T:System.Data.Common.DbConnectionStringBuilder" /> は固定サイズです。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)">
      <summary>既存の <see cref="T:System.Text.StringBuilder" /> オブジェクトにキーと値を追加する、効率的かつ安全な方法を提供します。</summary>
      <param name="builder">キー/値ペアを追加する対象の <see cref="T:System.Text.StringBuilder" />。</param>
      <param name="keyword">追加されるキー。</param>
      <param name="value">指定されたキーの値。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
      <summary>既存の <see cref="T:System.Text.StringBuilder" /> オブジェクトにキーと値を追加する、効率的かつ安全な方法を提供します。</summary>
      <param name="builder">キー/値ペアを追加する対象の <see cref="T:System.Text.StringBuilder" />。</param>
      <param name="keyword">追加されるキー。</param>
      <param name="value">指定されたキーの値。</param>
      <param name="useOdbcRules">フィールドの区切りに <see langword="true" /> を使用する場合、{}。引用符を使用する場合、<see langword="false" />。</param>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.BrowsableConnectionString">
      <summary>
        <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> プロパティを Visual Studio デザイナーに表示するかどうかを示す値を取得または設定します。</summary>
      <returns>接続文字列がデザイナー内に表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Clear">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> インスタンスの内容を消去します。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> は読み取り専用です。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ClearPropertyDescriptors">
      <summary>関連する <see cref="T:System.ComponentModel.PropertyDescriptor" /> 上の <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> オブジェクトのコレクションをクリアします。</summary>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> に関連付けられた接続文字列を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 内に含まれるキーと値のペアから作成された、現在の接続文字列。 既定値は空の文字列です。</returns>
      <exception cref="T:System.ArgumentException">無効な接続文字列引数が指定されています。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> に特定のキーが格納されているかどうかを判断します。</summary>
      <param name="keyword">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 内で検索されるキー。</param>
      <returns>指定したキーを持つエントリが <see langword="true" /> に格納されている場合は <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> が null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</exception>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Count">
      <summary>
        <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> プロパティ内に含まれる現在のキー数を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> インスタンスで保守されている接続文字列内に含まれるキーの数。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)">
      <summary>この <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> オブジェクトの接続情報を、提供されたオブジェクトの接続情報を比較します。</summary>
      <param name="connectionStringBuilder">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> オブジェクトと比較される <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</param>
      <returns>
        <see langword="true" /> オブジェクトの両方の接続情報により同等の接続文字列が生じる場合は <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.GetProperties(System.Collections.Hashtable)">
      <summary>指定された <see cref="T:System.Collections.Hashtable" /> に、この <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> のすべてのプロパティに関する情報を格納します。</summary>
      <param name="propertyDescriptors">この <see cref="T:System.Collections.Hashtable" /> に関する情報が格納される <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</param>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.IsFixedSize">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.IsReadOnly">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用の場合は <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Item(System.String)">
      <summary>指定されたキーに関連付けられている値を取得または設定します。</summary>
      <param name="keyword">取得または設定する項目のキー。</param>
      <returns>指定されたキーに関連付けられている値。 指定したキーが見つからない場合、そのキーを取得しようとした場合はnull 参照が返され (Visual Basic では <see langword="Nothing" />)、そのキーを設定しようとした場合は、指定したキーを使用して新しい要素が作成されます。
null キー (Visual Basic では <see langword="Nothing" />) を渡すと、<see cref="T:System.ArgumentNullException" /> がスローされます。 null 値を割り当てると、キー/値ペアが削除されます。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> が null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</exception>
      <exception cref="T:System.NotSupportedException">このプロパティが設定されていますが、<see cref="T:System.Data.Common.DbConnectionStringBuilder" /> が読み取り専用です。

または -
プロパティが設定済みで、コレクション内に <paramref name="keyword" /> が存在せず、<see cref="T:System.Data.Common.DbConnectionStringBuilder" /> が固定サイズです。</exception>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Keys">
      <summary>
        <see cref="T:System.Collections.ICollection" /> 内のキーが格納されている <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 内のキーが格納されている <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Remove(System.String)">
      <summary>指定されたキーを持つエントリを <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> インスタンスから削除します。</summary>
      <param name="keyword">この <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 内の接続文字列から削除するキー/値ペアのキー。</param>
      <returns>キーが接続文字列内に存在していて削除された場合は <see langword="true" />、キーが存在しなかった場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> が null (Visual Basic の場合は <see langword="Nothing" />) です。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> が読み取り専用であるか、<see cref="T:System.Data.Common.DbConnectionStringBuilder" /> が固定サイズです。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)">
      <summary>指定されたキーが、この <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> インスタンスに存在するかどうかを示します。</summary>
      <param name="keyword">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 内で検索されるキー。</param>
      <returns>指定したキーを持つエントリが <see langword="true" /> に格納されている場合は <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>指定したキーおよび値を持つ要素を <see cref="T:System.Collections.IDictionary" /> オブジェクトに追加します。</summary>
      <param name="keyword">追加する要素のキーとして使用する <see cref="T:System.Object" />。</param>
      <param name="value">追加する要素の値として使用する <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>指定したキーを持つ要素が <see cref="T:System.Collections.IDictionary" /> オブジェクトに格納されているかどうかを確認します。</summary>
      <param name="keyword">
        <see cref="T:System.Collections.IDictionary" /> オブジェクト内で検索されるキー。</param>
      <returns>指定したキーを持つ要素を <see langword="true" /> が保持している場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクトの <see cref="T:System.Collections.IDictionary" /> オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクトの <see cref="T:System.Collections.IDictionary" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Item(System.Object)">
      <summary>指定したキーを持つ要素を取得または設定します。</summary>
      <param name="keyword">取得または設定する要素のキー。</param>
      <returns>指定したキーを持つ要素。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>指定したキーを持つ要素を <see cref="T:System.Collections.IDictionary" /> オブジェクトから削除します。</summary>
      <param name="keyword">削除する要素のキー。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>コンポーネントのこのインスタンスのカスタム属性のコレクションを返します。</summary>
      <returns>このオブジェクトの属性を格納している <see cref="T:System.ComponentModel.AttributeCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>コンポーネントのこのインスタンスのクラス名を返します。</summary>
      <returns>オブジェクトのクラス名。クラスに名前がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>コンポーネントのこのインスタンスの名前を返します。</summary>
      <returns>オブジェクト名。オブジェクトに名前がない場合は <see langword="null" /> 。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>コンポーネントのこのインスタンスの型コンバーターを返します。</summary>
      <returns>このオブジェクトのコンバーターである <see cref="T:System.ComponentModel.TypeConverter" />。このオブジェクトの <see langword="null" /> がない場合は <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>コンポーネントのこのインスタンスの既定のイベントを返します。</summary>
      <returns>このオブジェクトの既定のイベントを表す <see cref="T:System.ComponentModel.EventDescriptor" />。このオブジェクトにイベントがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>コンポーネントのこのインスタンスの既定のプロパティを返します。</summary>
      <returns>このオブジェクトの既定のプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor" />。このオブジェクトにプロパティがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>コンポーネントのこのインスタンスに対して指定されている型のエディターを返します。</summary>
      <param name="editorBaseType">このオブジェクトのエディターを表す <see cref="T:System.Type" />。</param>
      <returns>指定した型の、このオブジェクトのエディターとなる <see cref="T:System.Object" />。エディターが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>コンポーネントのこのインスタンスのイベントを返します。</summary>
      <returns>このコンポーネント インスタンスのイベントを表す <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>フィルターとして指定された属性配列を使用して、コンポーネントのこのインスタンスのイベントを返します。</summary>
      <param name="attributes">フィルターとして使用される <see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>このコンポーネント インスタンスのフィルター処理したイベントを表す <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>コンポーネントのこのインスタンスのプロパティを返します。</summary>
      <returns>このコンポーネント インスタンスのプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>属性配列をフィルターとして使用して、コンポーネントのこのインスタンスのプロパティを返します。</summary>
      <param name="attributes">フィルターとして使用される <see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>このコンポーネント インスタンスのフィルター処理したプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>指定したプロパティ記述子によって記述されたプロパティを含むオブジェクトを返します。</summary>
      <param name="pd">所有者を見つけるプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns>指定したプロパティの所有者を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ToString">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> に関連付けられた接続文字列を返します。</summary>
      <returns>現在の <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> プロパティ。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>提供されたキーに対応する値をこの <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> から取得します。</summary>
      <param name="keyword">取得する項目のキー。</param>
      <param name="value">
        <paramref name="keyword" /> に対応する値。</param>
      <returns>
        <see langword="true" /> が接続文字列内で見つかった場合は <paramref name="keyword" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> に null 値 (Visual Basic の場合は <see langword="Nothing" />) が含まれています。</exception>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Values">
      <summary>
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 内の値が格納されている <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</returns>
    </member>
    <member name="T:System.Data.Common.DbDataAdapter">
      <summary>
        <see cref="T:System.Data.IDbDataAdapter" /> インターフェイスの実装を支援します。 <see cref="T:System.Data.Common.DbDataAdapter" /> の継承クラスは、厳密な型指定を行う関数のセットを実装しますが、DataAdapter を完全に実装するために必要な機能の大部分は継承します。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.#ctor">
      <summary>DataAdapter クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)">
      <summary>既存の同じ型のオブジェクトから、<see langword="DataAdapter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="adapter">新しい <see langword="DataAdapter" /> の作成に使用する <see langword="DataAdapter" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)">
      <summary>
        <see cref="T:System.Data.IDbCommand" /> を現在のバッチに追加します。</summary>
      <param name="command">バッチに追加する <see cref="T:System.Data.IDbCommand" />。</param>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> を追加する前のバッチ内のコマンド数。</returns>
      <exception cref="T:System.NotSupportedException">アダプターでバッチがサポートされていません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.ClearBatch">
      <summary>バッチからすべての <see cref="T:System.Data.IDbCommand" /> オブジェクトを削除します。</summary>
      <exception cref="T:System.NotSupportedException">アダプターでバッチがサポートされていません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>
        <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataRow">データ ソースの更新に使用した <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 処理中に実行した <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="statementType">コマンドが UPDATE、INSERT、DELETE、または SELECT ステートメントのいずれかを示す値。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> クラスの新しいインスタンス。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>
        <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataRow">データ ソースを更新する <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 処理中に実行する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="statementType">コマンドが UPDATE、INSERT、DELETE、または SELECT ステートメントのいずれかを示す値。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> クラスの新しいインスタンス。</returns>
    </member>
    <member name="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" /> オブジェクトがテーブル マップに使用する既定の名前。</summary>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.DeleteCommand">
      <summary>データ セットからレコードを削除するコマンドを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 中に、データ セット内の削除された行に対応するデータ ソース内のレコードを削除するために使用する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Common.DbDataAdapter" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.ExecuteBatch">
      <summary>現在のバッチを実行します。</summary>
      <returns>バッチ内の直前のコマンドの戻り値。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 内の行を追加または更新します。</summary>
      <param name="dataSet">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 名および <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の指定した範囲の行を追加または更新します。</summary>
      <param name="dataSet">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</param>
      <param name="startRecord">取得を開始する、0 から始まるレコード番号。</param>
      <param name="maxRecords">取得するレコードの最大数。</param>
      <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
      <exception cref="T:System.SystemException">
        <see cref="T:System.Data.DataSet" /> が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。

または -

接続が無効です。</exception>
      <exception cref="T:System.InvalidCastException">接続が見つかりませんでした。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> パラメーターが 0 未満です。

または -
<paramref name="maxRecords" /> パラメーターが 0 未満です。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 名、ソース テーブル名、コマンド文字列、およびコマンド動作を使用して、データ ソース内の列と一致するように、<see cref="T:System.Data.DataSet" /> 内の指定した範囲の行を追加または更新します。</summary>
      <param name="dataSet">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</param>
      <param name="startRecord">取得を開始する、0 から始まるレコード番号。</param>
      <param name="maxRecords">取得するレコードの最大数。</param>
      <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
      <param name="command">データ ソースから行を取得するために使用する SQL SELECT ステートメント。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
      <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> パラメーターが 0 未満です。

または -
<paramref name="maxRecords" /> パラメーターが 0 未満です。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 名および <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の列と一致するように <see cref="T:System.Data.DataTable" /> 内の行を追加または更新します。</summary>
      <param name="dataSet">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</param>
      <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
      <exception cref="T:System.SystemException">ソース テーブルが無効です。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の指定した範囲の行を追加または更新します。</summary>
      <param name="dataTable">テーブル マップに使用する <see cref="T:System.Data.DataTable" /> の名前。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
      <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>指定した <see cref="T:System.Data.DataTable" />、<see cref="T:System.Data.DataTable" />、および <see cref="T:System.Data.IDbCommand" /> を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.CommandBehavior" /> 内の行を追加または更新します。</summary>
      <param name="dataTable">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataTable" />。</param>
      <param name="command">データ ソースから行を取得するために使用する SQL SELECT ステートメント。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</param>
      <returns>
        <see cref="T:System.Data.DataTable" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 名および <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の指定した範囲の行を追加または更新します。</summary>
      <param name="dataTables">データ ソースから読み込む <see cref="T:System.Data.DataTable" /> オブジェクト。</param>
      <param name="startRecord">取得を開始する、0 から始まるレコード番号。</param>
      <param name="maxRecords">取得するレコードの最大数。</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> オブジェクトにデータを読み込むために実行する <see cref="T:System.Data.DataTable" />。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</param>
      <returns>データ テーブルで追加または更新された行数。</returns>
      <exception cref="T:System.SystemException">
        <see cref="T:System.Data.DataSet" /> が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。

または -

接続が無効です。</exception>
      <exception cref="T:System.InvalidCastException">接続が見つかりませんでした。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> パラメーターが 0 未満です。

または -
<paramref name="maxRecords" /> パラメーターが 0 未満です。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])">
      <summary>指定したレコード位置で開始し、指定した最大数のレコードを読み込んで、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の行を追加または更新します。</summary>
      <param name="startRecord">取得を開始する、0 から始まるレコード番号。</param>
      <param name="maxRecords">取得するレコードの最大数。</param>
      <param name="dataTables">データ ソースから読み込む <see cref="T:System.Data.DataTable" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.Data.DataTable" /> で正常に追加または更新された行数。 この値には、行を返さないステートメントの影響を受ける行は含まれません。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.FillCommandBehavior">
      <summary>データ アダプターにデータを読み込むコマンドの動作を取得または設定します。</summary>
      <returns>データ アダプターにデータを読み込むコマンドの <see cref="T:System.Data.CommandBehavior" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>"Table" という名前の <see cref="T:System.Data.DataTable" /> を指定された <see cref="T:System.Data.DataSet" /> に追加し、指定された <see cref="T:System.Data.SchemaType" /> に基づいて、データ ソースにあるスキーマと一致するようにスキーマを構成します。</summary>
      <param name="dataSet">スキーマを挿入する <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">スキーマを挿入する方法を指定する <see cref="T:System.Data.SchemaType" /> 値の 1 つ。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> に追加された <see cref="T:System.Data.DataTable" /> オブジェクトのコレクションへの参照。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> に <see cref="T:System.Data.DataSet" /> を追加し、指定した <see cref="T:System.Data.SchemaType" /> に基づいて、データ ソース内のスキーマと一致するようにスキーマを設定します。</summary>
      <param name="dataSet">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つ。</param>
      <param name="command">データ ソースから行を取得するために使用する SQL SELECT ステートメント。</param>
      <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</param>
      <returns>データ ソースから返されたスキーマ情報が格納された、<see cref="T:System.Data.DataTable" /> オブジェクトの配列。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> に <see cref="T:System.Data.DataSet" /> を追加し、指定した <see cref="T:System.Data.SchemaType" /> および <see cref="T:System.Data.DataTable" /> に基づいて、データ ソース内のスキーマと一致するようにスキーマを設定します。</summary>
      <param name="dataSet">スキーマを挿入する <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">スキーマを挿入する方法を指定する <see cref="T:System.Data.SchemaType" /> 値の 1 つ。</param>
      <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> に追加された <see cref="T:System.Data.DataTable" /> オブジェクトのコレクションへの参照。</returns>
      <exception cref="T:System.ArgumentException">スキーマの取得元のソース テーブルが見つかりません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> に基いて、指定した <see cref="T:System.Data.SchemaType" /> のスキーマを設定します。</summary>
      <param name="dataTable">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataTable" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 値のいずれか。</param>
      <returns>データ ソースから返されたスキーマ情報を含む <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>指定した <see cref="T:System.Data.DataTable" />、コマンド文字列、および <see cref="T:System.Data.SchemaType" /> 値に基づいて、指定した <see cref="T:System.Data.CommandBehavior" /> のスキーマを設定します。</summary>
      <param name="dataTable">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataTable" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つ。</param>
      <param name="command">データ ソースから行を取得するために使用する SQL SELECT ステートメント。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</param>
      <returns>データ ソースから返されたスキーマ情報が格納された <see cref="T:System.Data.DataTable" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)">
      <summary>現在のバッチのコマンドの 1 つから <see cref="T:System.Data.IDataParameter" /> を返します。</summary>
      <param name="commandIdentifier">パラメーターを取得するコマンドのインデックス。</param>
      <param name="parameterIndex">コマンド内のパラメーターのインデックス。</param>
      <returns>指定された <see cref="T:System.Data.IDataParameter" />。</returns>
      <exception cref="T:System.NotSupportedException">アダプターでバッチがサポートされていません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)">
      <summary>バッチ更新内の、個々の更新の試行に関する情報を返します。</summary>
      <param name="commandIdentifier">バッチ内の個々のコマンドの、0 から始まる列の序数。</param>
      <param name="recordsAffected">バッチ内に指定されたコマンドの影響を受ける、データ ストア内の行数。</param>
      <param name="error">指定されたコマンドの実行中にスローされた <see cref="T:System.Exception" />。 例外がスローされなかった場合は、<see langword="null" /> (Visual Basic では <see langword="Nothing" />) を返します。</param>
      <returns>バッチ更新内の、個々の更新の試行に関する情報。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetFillParameters">
      <summary>SQL SELECT ステートメントの実行時にユーザーが設定したパラメーターを取得します。</summary>
      <returns>ユーザーが設定したパラメーターが格納された <see cref="T:System.Data.IDataParameter" /> オブジェクトの配列。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.InitializeBatching">
      <summary>
        <see cref="T:System.Data.Common.DbDataAdapter" /> のバッチ処理を初期化します。</summary>
      <exception cref="T:System.NotSupportedException">アダプターでバッチがサポートされていません。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.InsertCommand">
      <summary>データ ソースに新しいレコードを挿入するコマンドを取得または設定します。</summary>
      <returns>データ セット内の新しい行に対応するデータ ソース内のレコードを挿入するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
      <summary>.NET Framework データ プロバイダーの <see langword="RowUpdated" /> イベントを発生させます。</summary>
      <param name="value">イベント データを格納している <see cref="T:System.Data.Common.RowUpdatedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
      <summary>.NET Framework データ プロバイダーの <see langword="RowUpdating" /> イベントを発生させます。</summary>
      <param name="value">イベント データを格納している <see cref="T:System.Data.Common.RowUpdatingEventArgs" />。</param>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.SelectCommand">
      <summary>データ ソース内のレコードを選択するコマンドを取得または設定します。</summary>
      <returns>データ セットに挿入するレコードをデータ ソースから選択するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
      <summary>データ セットからレコードを削除する SQL ステートメントを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 中に、データ セット内の削除された行に対応するデータ ソース内のレコードを削除するために使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
      <summary>データ ソースに新しいレコードを挿入する SQL ステートメントを取得または設定します。</summary>
      <returns>データ セット内の新しい行に対応するデータ ソース内のレコードを挿入するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
      <summary>データ ソース内のレコードを選択する SQL ステートメントを取得または設定します。</summary>
      <returns>データ セットに挿入するレコードをデータ ソースから選択するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
      <summary>データ ソース内のレコードを更新する SQL ステートメントを取得または設定します。</summary>
      <returns>データ セット内の変更された行に対応するデータ ソース内のレコードを更新するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone">
      <summary>現在のインスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>このインスタンスのコピーである新しいオブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.TerminateBatching">
      <summary>
        <see cref="T:System.Data.Common.DbDataAdapter" /> のバッチ処理を終了します。</summary>
      <exception cref="T:System.NotSupportedException">アダプターでバッチがサポートされていません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])">
      <summary>指定した <see cref="T:System.Data.DataSet" /> 内の配列での挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
      <param name="dataRows">データ ソースの更新に使用する <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
      <exception cref="T:System.SystemException">更新する <see cref="T:System.Data.DataRow" /> が存在しません。

または -
更新する <see cref="T:System.Data.DataTable" /> が存在しません。

または -
ソースとして使用する <see cref="T:System.Data.DataSet" /> が存在しません。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> オブジェクトの配列内の挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
      <param name="dataRows">データ ソースの更新に使用する <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</param>
      <param name="tableMapping">使用する <see cref="P:System.Data.IDataAdapter.TableMappings" /> コレクション。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
      <exception cref="T:System.SystemException">更新する <see cref="T:System.Data.DataRow" /> が存在しません。

または -
更新する <see cref="T:System.Data.DataTable" /> が存在しません。

または -
ソースとして使用する <see cref="T:System.Data.DataSet" /> が存在しません。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> での挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
      <param name="dataSet">データ ソースの更新に使用した <see cref="T:System.Data.DataSet" />。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</returns>
      <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 内の指定した <see cref="T:System.Data.DataTable" /> 名を持つ挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
      <param name="dataSet">データ ソースの更新に使用する <see cref="T:System.Data.DataSet" />。</param>
      <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> での挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
      <param name="dataTable">データ ソースの更新に使用した <see cref="T:System.Data.DataTable" />。</param>
      <returns>
        <see cref="T:System.Data.DataTable" /> 内で正常に更新された行の数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
      <exception cref="T:System.SystemException">更新する <see cref="T:System.Data.DataRow" /> が存在しません。

または -
更新する <see cref="T:System.Data.DataTable" /> が存在しません。

または -
ソースとして使用する <see cref="T:System.Data.DataSet" /> が存在しません。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.UpdateBatchSize">
      <summary>バッチ処理サポートを有効にするかどうか、および、1 回のバッチで実行可能なコマンド数を指定する値を取得または設定します。</summary>
      <returns>バッチごとに処理される行数。
  値 
  効果 
  0 
  バッチのサイズに制限はありません。  
  
  1 
  バッチ更新を無効にします。  
  
  &gt; 1 
  一度に送信される変更内容は <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> のバッチ サイズに基づきます。  
  
   
これを1以外の値に設定すると、<see cref="T:System.Data.Common.DbDataAdapter" /> に関連付けられているすべてのコマンドの <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> プロパティがNoneまたはOutputParametersに設定されている必要があります。 それ以外の場合、例外がスローされます。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.UpdateCommand">
      <summary>データ ソース内のレコードを更新するコマンドを取得または設定します。</summary>
      <returns>データ セット内の変更された行に対応するデータ ソース内のレコードを更新するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="T:System.Data.Common.DbDataReader">
      <summary>データ ソースから、前方参照専用の行のストリームを読み取ります。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Close">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" /> オブジェクトを閉じます。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.CloseAsync">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" /> オブジェクトを非同期に閉じます。</summary>
      <returns>非同期操作を表すタスク。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Depth">
      <summary>現在の行の入れ子の深さを示す値を取得します。</summary>
      <returns>現在の行の入れ子の深さ。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Dispose">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースを解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DbDataReader.DisposeAsync">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを非同期で解放します。</summary>
      <returns>非同期操作を表す <see cref="T:System.Threading.Tasks.ValueTask" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.FieldCount">
      <summary>派生クラスでオーバーライドされた場合、現在の行の列数を取得します。</summary>
      <returns>現在の行の列の数。</returns>
      <exception cref="T:System.NotSupportedException">SQL Server のインスタンスへの現在の接続がありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetBoolean(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定された列の値をブール値として取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetByte(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定された列の値をバイトとして取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定したインデックスを開始位置として、指定した列から指定したバイト数を読み取り、バッファー内の指定した位置の開始位置としてバッファーに書き込みます。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <param name="dataOffset">読み取り操作を開始する位置を示す行内のインデックス。</param>
      <param name="buffer">データのコピー先のバッファー。</param>
      <param name="bufferOffset">データのコピー先のバッファーのインデックス。</param>
      <param name="length">読み取り対象の最大文字数。</param>
      <returns>実際に読み取られたバイト数。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetChar(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定された列の値を単一文字として取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定したインデックスを開始位置として、指定した列から指定した文字数を読み取り、指定した位置の開始位置としてバッファーに書き込みます。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <param name="dataOffset">読み取り操作を開始する位置を示す行内のインデックス。</param>
      <param name="buffer">データのコピー先のバッファー。</param>
      <param name="bufferOffset">データのコピー先のバッファーのインデックス。</param>
      <param name="length">読み取り対象の最大文字数。</param>
      <returns>実際に読み取られた文字数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetData(System.Int32)">
      <summary>要求された列に対して、入れ子になったデータ リーダーを返します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>データ リーダー。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定された列のデータ型の名前を取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>データ型の名前。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDateTime(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定された列の値を <see cref="T:System.DateTime" /> オブジェクトとして取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)">
      <summary>プロバイダー固有の実装でオーバーライドできる、要求された列序数に対応した <see cref="T:System.Data.Common.DbDataReader" /> オブジェクトを返します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDecimal(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定された列の値を <see cref="T:System.Decimal" /> として取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDouble(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定された列の値を倍精度浮動小数点数として取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetEnumerator">
      <summary>派生クラスでオーバーライドされると、データ リーダー内の行に対して反復処理を行うために使用できる列挙子を返します。</summary>
      <returns>データ リーダー内の行に対して反復処理を行うために使用できる列挙子。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldType(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定された列のデータ型を取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列のデータ型。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)">
      <summary>要求された型として指定した列の値を取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <typeparam name="T">返される値の型。</typeparam>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.InvalidOperationException">データの取得中、接続が切断されたか、閉じられました。

または -
データの取得中、データ リーダーが閉じられました。

または -


読み取ることのできるデータはありません (たとえば、最初の <see cref="M:System.Data.Common.DbDataReader.Read" /> は呼び出されなかったか、<see langword="false" /> を返しました)。

または -

リーダーでは、以前に読み取られた列のシーケンシャル モードでの読み取りが試行されました。

または -

非同期操作が進行中でした。 シーケンシャル モードで実行中、これはすべての Get* メソッドに適用されます。ストリームの読み取り中に呼び出すことができるためです。</exception>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">データベースによって返された値が一致しないか、<typeparamref name="T" /> にキャストできません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)">
      <summary>要求された型として指定された列の値を非同期で取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <typeparam name="T">返される値の型。</typeparam>
      <returns>指定された列の値を <see cref="P:System.Threading.Tasks.Task`1.Result" /> に格納しているタスク。</returns>
      <exception cref="T:System.InvalidOperationException">データの取得中、接続が切断されたか、閉じられました。

または -

データの取得中、データ リーダーが閉じられました。

または -

読み取ることのできるデータはありません (たとえば、最初の <see cref="M:System.Data.Common.DbDataReader.Read" /> は呼び出されなかったか、<see langword="false" /> を返しました)。

または -

以前に読み取られた列をシーケンシャル モードで読み取ろうとしました。

または -

非同期操作が進行中でした。 シーケンシャル モードで実行中、これはすべての Get_*_ メソッドに適用されます。ストリームの読み取り中に呼び出すことができるためです。</exception>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">データベースによって返された値が一致しないか、<typeparamref name="T" /> にキャストできません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)">
      <summary>要求された型として指定された列の値を非同期で取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <param name="cancellationToken">非同期操作を取り消すトークン。</param>
      <typeparam name="T">返される値の型。</typeparam>
      <returns>指定された列の値を <see cref="P:System.Threading.Tasks.Task`1.Result" /> に格納しているタスク。</returns>
      <exception cref="T:System.InvalidOperationException">データの取得中、接続が切断されたか、閉じられました。

または -

データの取得中、データ リーダーが閉じられました。

または -

読み取ることのできるデータはありません (たとえば、最初の <see cref="M:System.Data.Common.DbDataReader.Read" /> は呼び出されなかったか、<see langword="false" /> を返しました)。

または -

以前に読み取られた列をシーケンシャル モードで読み取ろうとしました。

または -

非同期操作が進行中でした。 シーケンシャル モードで実行中、これはすべての Get_*_ メソッドに適用されます。ストリームの読み取り中に呼び出すことができるためです。</exception>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">データベースによって返された値が一致しないか、<typeparamref name="T" /> にキャストできません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFloat(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定された列の値を単精度浮動小数点数として取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetGuid(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定された列の値をグローバル一意識別子 (GUID) として取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt16(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定された列の値を 16 ビット符号付き整数として取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt32(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定された列の値を 32 ビット符号付き整数として取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt64(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定された列の値を 64 ビット符号付き整数として取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetName(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、0 から始まる列序数が指定された列の名前列を取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の名前。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetOrdinal(System.String)">
      <summary>派生クラスでオーバーライドされた場合、列序数が指定された列の名前を取得します。</summary>
      <param name="name">列の名前。</param>
      <returns>0 から始まる列序数。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>指定された列のプロバイダー固有の型を取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>プロバイダー固有の .NET 型。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>指定された列の値をプロバイダー固有の型のインスタンスとして取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>現在の行のコレクション内にあるプロバイダー固有の属性列をすべて取得します。</summary>
      <param name="values">属性列のコピー先の <see cref="T:System.Object" /> の配列。</param>
      <returns>配列に含まれる要素のインスタンスの数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetSchemaTable">
      <summary>
        <see cref="T:System.Data.DataTable" /> の列メタデータを記述する <see cref="T:System.Data.Common.DbDataReader" /> を返します。</summary>
      <returns>列メタデータを記述する <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Common.DbDataReader" /> が閉じています。</exception>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.NotSupportedException">.NET Core のみ: このメンバーはサポートされていません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetStream(System.Int32)">
      <summary>指定された列からデータを取得する目的でストリームを取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>ストリーム。</returns>
      <exception cref="T:System.InvalidOperationException">データの取得中、接続が切断されたか、閉じられました。

または -

データの取得中、データ リーダーが閉じられます。

または -

読み取ることのできるデータはありません (たとえば、最初の <see cref="M:System.Data.Common.DbDataReader.Read" /> は呼び出されなかったか、false を返しました)。

または -

データ リーダーでは、以前に読み取られた列のシーケンシャル モードでの読み取りが試行されました。

または -

非同期操作が進行中でした。 シーケンシャル モードで実行中、これはすべての Get* メソッドに適用されます。ストリームの読み取り中に呼び出すことができるためです。</exception>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">指定の列は、<see cref="T:System.IO.Stream" /> で読み込めるバイナリ型ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetString(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定された列の値を <see cref="T:System.String" /> のインスタンスとして取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetTextReader(System.Int32)">
      <summary>列からデータを取得する目的でテキスト リーダーを取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>テキスト リーダー。</returns>
      <exception cref="T:System.InvalidOperationException">データの取得中、接続が切断されたか、閉じられました。

または -

データの取得中、データ リーダーが閉じられます。

または -

読み取ることのできるデータはありません (たとえば、最初の <see cref="M:System.Data.Common.DbDataReader.Read" /> は呼び出されなかったか、false を返しました)。

または -

データ リーダーでは、以前に読み取られた列のシーケンシャル モードでの読み取りが試行されました。

または -

非同期操作が進行中でした。 シーケンシャル モードで実行中、これはすべての Get* メソッドに適用されます。ストリームの読み取り中に呼び出すことができるためです。</exception>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">指定の列は、<see cref="T:System.IO.TextReader" /> で読み込めるテキスト型ではありません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetValue(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定された列の値を <see cref="T:System.Object" /> のインスタンスとして取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetValues(System.Object[])">
      <summary>派生クラスでオーバーライドされた場合、オブジェクトの配列に現在行の列値を設定します。</summary>
      <param name="values">属性列のコピー先の <see cref="T:System.Object" /> の配列。</param>
      <returns>配列に含まれる <see cref="T:System.Object" /> のインスタンスの数。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.HasRows">
      <summary>派生クラスでオーバーライドされた場合、この <see cref="T:System.Data.Common.DbDataReader" /> に 1 つ以上の行が含まれているかどうかを示す値を取得します。</summary>
      <returns>1 行以上の行が <see cref="T:System.Data.Common.DbDataReader" /> に含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.IsClosed">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.Data.Common.DbDataReader" /> が閉じられているかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> が閉じている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Common.DbDataReader" /> が閉じています。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、存在しない値または欠損値が列に含まれているかどうかを示す値を取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定した列が <see cref="T:System.DBNull" /> と等価の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)">
      <summary>列に格納されている値が存在しない値または欠損値かどうかを示す値を非同期で取得します。</summary>
      <param name="ordinal">取得する、0 から始まる列。</param>
      <returns>指定された列値が <see langword="DBNull" /> に等しい場合は、<see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが <see langword="true" /> になり、等しくない場合は <see langword="false" /> になる <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.InvalidOperationException">データの取得中、接続が切断されたか、閉じられました。

または -

データの取得中、データ リーダーが閉じられます。

または -

読み取ることのできるデータはありません (たとえば、最初の <see cref="M:System.Data.Common.DbDataReader.Read" /> は呼び出されなかったか、false を返しました)。

または -

以前に読み取られた列をシーケンシャル モードで読み取ろうとしています。

または -

非同期操作が進行中でした。 シーケンシャル モードで実行中、これはすべての Get* メソッドに適用されます。ストリームの読み取り中に呼び出すことができるためです。</exception>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>列に格納されている値が存在しない値または欠損値かどうかを示す値を非同期で取得します。</summary>
      <param name="ordinal">取得する、0 から始まる列。</param>
      <param name="cancellationToken">非同期操作を取り消すトークン。</param>
      <returns>指定された列値が <see langword="DBNull" /> に等しい場合は、<see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが <see langword="true" /> になり、等しくない場合は <see langword="false" /> になる <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.InvalidOperationException">データの取得中、接続が切断されたか、閉じられました。

または -

データの取得中、データ リーダーが閉じられます。

または -

読み取ることのできるデータはありません (たとえば、最初の <see cref="M:System.Data.Common.DbDataReader.Read" /> は呼び出されなかったか、false を返しました)。

または -

以前に読み取られた列をシーケンシャル モードで読み取ろうとしています。

または -
非同期操作が進行中でした。 シーケンシャル モードで実行中、これはすべての Get* メソッドに適用されます。ストリームの読み取り中に呼び出すことができるためです。</exception>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Item(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定された列の値を <see cref="T:System.Object" /> のインスタンスとして取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">列インデックスが範囲外です。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Item(System.String)">
      <summary>派生クラスでオーバーライドされた場合、指定された列の値を <see cref="T:System.Object" /> のインスタンスとして取得します。</summary>
      <param name="name">列の名前。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前の列は見つかりませんでした。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResult">
      <summary>派生クラスでオーバーライドされた場合、バッチ ステートメントの結果を読み取っているときに、次の結果にリーダーを非同期で進めます。</summary>
      <returns>次の結果セットがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResultAsync">
      <summary>バッチ ステートメントの結果を読み取っているときに、次の結果にリーダーを非同期で進めます。</summary>
      <returns>
        <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが、結果セットが他にもある場合は <see langword="true" />、ない場合は <see langword="false" /> となるタスク。</returns>
      <exception cref="T:System.Data.Common.DbException">コマンド テキストの実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>バッチ ステートメントの結果を読み取っているときに、次の結果にリーダーを非同期で進めます。</summary>
      <param name="cancellationToken">取り消し命令。</param>
      <returns>結果セットが他にもある場合は <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが <see langword="true" /> で、ない場合は <see langword="false" /> の <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.Data.Common.DbException">コマンド テキストの実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Read">
      <summary>派生クラスでオーバーライドされた場合、リーダーを結果セット内の次のレコードに進めます。</summary>
      <returns>次の行が存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.ReadAsync">
      <summary>結果セット内の次のレコードにリーダーを非同期で進めます。</summary>
      <returns>行が他にもある場合は <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが <see langword="true" /> で、ない場合は <see langword="false" /> の <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.Data.Common.DbException">コマンド テキストの実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>結果セット内の次のレコードにリーダーを非同期で進めます。</summary>
      <param name="cancellationToken">取り消し命令。</param>
      <returns>行が他にもある場合は <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが <see langword="true" /> で、ない場合は <see langword="false" /> の <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.Data.Common.DbException">コマンド テキストの実行中にエラーが発生しました。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataReader.RecordsAffected">
      <summary>派生クラスでオーバーライドされた場合、SQL ステートメントの実行によって変更、挿入、または削除された行の数を取得します。</summary>
      <returns>変更、挿入、または削除された行の数。 SELECT ステートメントの場合は -1、影響を受けた行がなかった場合またはステートメントが失敗した場合は 0。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Data.IDataRecord.GetData(System.Int32)" />」をご覧ください。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>フィールドがさらにリモートの構造化データを指しているときに使用する <see cref="T:System.Data.IDataReader" /> のインスタンス。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.VisibleFieldCount">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" /> 内の表示フィールドの数を取得します。</summary>
      <returns>表示フィールドの数。</returns>
    </member>
    <member name="T:System.Data.Common.DbDataReaderExtensions">
      <summary>このクラスには、<see cref="T:System.Data.Common.DbDataReader" /> の列のスキーマ拡張メソッドが含まれています。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" /> が列スキーマを取得できるかどうかを示す値を取得します。</summary>
      <param name="reader">列スキーマのサポートを確認するための <see cref="T:System.Data.Common.DbDataReader" />。</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> が列スキーマを取得できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" /> 用に、列のスキーマ (<see cref="T:System.Data.Common.DbColumn" /> コレクション) を取得します。</summary>
      <param name="reader">列のスキーマを返す <see cref="T:System.Data.Common.DbDataReader" />。</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 用の、列のスキーマ (<see cref="T:System.Data.Common.DbColumn" /> コレクション)。</returns>
    </member>
    <member name="T:System.Data.Common.DbDataRecord">
      <summary>
        <see cref="T:System.Data.IDataRecord" /> および <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> を実装し、<see cref="T:System.Data.Common.DbEnumerator" /> のデータ バインディングのサポートを提供します。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbDataRecord" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.FieldCount">
      <summary>現在のレコード内のフィールドの数を示します。 このプロパティは読み取り専用です。</summary>
      <returns>現在のレコード内のフィールド数。</returns>
      <exception cref="T:System.NotSupportedException">読み取るデータ ソースに接続されていません。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetBoolean(System.Int32)">
      <summary>指定された列の値を Boolean として返します。</summary>
      <param name="i">列の序数。</param>
      <returns>Boolean が <see langword="true" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetByte(System.Int32)">
      <summary>指定された列の値をバイトとして返します。</summary>
      <param name="i">列の序数。</param>
      <returns>指定された列の値。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>指定された列の値をバイト配列として返します。</summary>
      <param name="i">0 から始まる列序数。</param>
      <param name="dataIndex">読み取り操作を開始する位置を示すフィールド内のインデックス。</param>
      <param name="buffer">バイトのストリームを読み込むバッファー。</param>
      <param name="bufferIndex">読み取り操作を開始する <paramref name="buffer" /> のインデックス。</param>
      <param name="length">読み取るバイト数。</param>
      <returns>指定された列の値。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetChar(System.Int32)">
      <summary>指定された列の値を 1 つの文字として返します。</summary>
      <param name="i">列の序数。</param>
      <returns>指定された列の値。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>指定された列の値を 1 つの文字配列として返します。</summary>
      <param name="i">列の序数。</param>
      <param name="dataIndex">データのコピー先バッファー。</param>
      <param name="buffer">バッファーにコピーするデータの最大長。</param>
      <param name="bufferIndex">バッファー内での開始点。</param>
      <param name="length">ソース データ内での開始点。</param>
      <returns>指定された列の値。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetData(System.Int32)">
      <summary>現在サポートされていません。</summary>
      <param name="i">現在サポートされていません。</param>
      <returns>現在サポートされていません。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDataTypeName(System.Int32)">
      <summary>バックエンドのデータ型の名前を返します。</summary>
      <param name="i">列の序数。</param>
      <returns>バックエンドのデータ型の名前。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDateTime(System.Int32)">
      <summary>指定された列の値を <see cref="T:System.DateTime" /> オブジェクトとして返します。</summary>
      <param name="i">列の序数。</param>
      <returns>指定された列の値。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDbDataReader(System.Int32)">
      <summary>プロバイダー固有の実装でオーバーライドできる、要求された列序数に対応した <see cref="T:System.Data.Common.DbDataReader" /> オブジェクトを返します。</summary>
      <param name="i">0 から始まる列序数。</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDecimal(System.Int32)">
      <summary>指定された列の値を <see cref="T:System.Decimal" /> オブジェクトとして返します。</summary>
      <param name="i">列の序数。</param>
      <returns>指定された列の値。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDouble(System.Int32)">
      <summary>指定された列の値を倍精度浮動小数点値として返します。</summary>
      <param name="i">列の序数。</param>
      <returns>指定された列の値。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetFieldType(System.Int32)">
      <summary>オブジェクトのデータ型である <see cref="T:System.Type" /> を返します。</summary>
      <param name="i">列の序数。</param>
      <returns>オブジェクトのデータ型である <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetFloat(System.Int32)">
      <summary>指定された列の値を単精度浮動小数点値として返します。</summary>
      <param name="i">列の序数。</param>
      <returns>指定された列の値。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetGuid(System.Int32)">
      <summary>指定したフィールドの GUID 値を返します。</summary>
      <param name="i">取得するフィールドのインデックス。</param>
      <returns>指定したフィールドの GUID 値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt16(System.Int32)">
      <summary>指定された列の値を 16 ビット符号付き整数として返します。</summary>
      <param name="i">列の序数。</param>
      <returns>指定された列の値。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt32(System.Int32)">
      <summary>指定された列の値を 32 ビット符号付き整数として返します。</summary>
      <param name="i">列の序数。</param>
      <returns>指定された列の値。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt64(System.Int32)">
      <summary>指定された列の値を 64 ビット符号付き整数として返します。</summary>
      <param name="i">列の序数。</param>
      <returns>指定された列の値。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetName(System.Int32)">
      <summary>指定した列の名前を返します。</summary>
      <param name="i">列の序数。</param>
      <returns>指定された列の名前。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetOrdinal(System.String)">
      <summary>名前で指定された列の列序数を返します。</summary>
      <param name="name">列の名前。</param>
      <returns>列の序数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetString(System.Int32)">
      <summary>指定された列の値を文字列として返します。</summary>
      <param name="i">列の序数。</param>
      <returns>指定された列の値。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetValue(System.Int32)">
      <summary>指定された列のネイティブ形式の値を返します。</summary>
      <param name="i">列の序数。</param>
      <returns>戻り値。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetValues(System.Object[])">
      <summary>現在のレコードの列の値を持つオブジェクトの配列を設定します。</summary>
      <param name="values">属性フィールドをコピーする <see cref="T:System.Object" /> の配列。</param>
      <returns>配列に含まれる <see cref="T:System.Object" /> のインスタンスの数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.IsDBNull(System.Int32)">
      <summary>存在しない値を示すために使用されます。</summary>
      <param name="i">列の序数。</param>
      <returns>指定した列が <see cref="T:System.DBNull" /> に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.Item(System.Int32)">
      <summary>列序数を指定して、指定された列のネイティブ形式の値を示します。 このプロパティは読み取り専用です。</summary>
      <param name="i">列の序数。</param>
      <returns>指定された列のネイティブ形式の値。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.Item(System.String)">
      <summary>列の名前を指定して、指定された列のネイティブ形式の値を示します。 このプロパティは読み取り専用です。</summary>
      <param name="name">列の名前です。</param>
      <returns>指定された列のネイティブ形式の値。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>コンポーネントのこのインスタンスのカスタム属性のコレクションを返します。</summary>
      <returns>このオブジェクトの属性を格納する <see cref="T:System.ComponentModel.AttributeCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>コンポーネントのこのインスタンスのクラス名を返します。</summary>
      <returns>オブジェクトのクラス名。クラスに名前がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>コンポーネントのこのインスタンスの名前を返します。</summary>
      <returns>オブジェクト名。オブジェクトに名前がない場合は <see langword="null" /> 。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>コンポーネントのこのインスタンスの型コンバーターを返します。</summary>
      <returns>このオブジェクトのコンバーターである <see cref="T:System.ComponentModel.TypeConverter" />。このオブジェクトの <see cref="T:System.ComponentModel.TypeConverter" /> がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>コンポーネントのこのインスタンスの既定のイベントを返します。</summary>
      <returns>このオブジェクトの既定のイベントを表す <see cref="T:System.ComponentModel.EventDescriptor" />。このオブジェクトにイベントがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>コンポーネントのこのインスタンスの既定のプロパティを返します。</summary>
      <returns>このオブジェクトの既定のプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor" />。このオブジェクトにプロパティがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>コンポーネントのこのインスタンスに対して指定されている型のエディターを返します。</summary>
      <param name="editorBaseType">このオブジェクトのエディターを表す <see cref="T:System.Type" />。</param>
      <returns>指定した型の、このオブジェクトのエディターとなる <see cref="T:System.Object" />。エディターが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>コンポーネントのこのインスタンスのイベントを返します。</summary>
      <returns>このコンポーネント インスタンスのイベントを表す <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>フィルターとして指定された属性配列を使用して、コンポーネントのこのインスタンスのイベントを返します。</summary>
      <param name="attributes">フィルターとして使用される <see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>このコンポーネント インスタンスのフィルター処理したイベントを表す <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>コンポーネントのこのインスタンスのプロパティを返します。</summary>
      <returns>このコンポーネント インスタンスのプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>属性配列をフィルターとして使用して、コンポーネントのこのインスタンスのプロパティを返します。</summary>
      <param name="attributes">フィルターとして使用される <see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>このコンポーネント インスタンスのフィルター処理したプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>指定したプロパティ記述子によって記述されたプロパティを含むオブジェクトを返します。</summary>
      <param name="pd">所有者を見つけるプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns>指定したプロパティの所有者を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Data.Common.DbDataSourceEnumerator">
      <summary>ローカル ネットワーク内で利用できるデータベース サーバーのすべてのインスタンスを列挙する機構を提供します。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataSourceEnumerator.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> クラスの新しいインスタンスを作成します。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataSourceEnumerator.GetDataSources">
      <summary>このクラスの厳密に型指定されたインスタンスで表されるサーバーの、参照できるすべてのインスタンスに関する情報が格納された <see cref="T:System.Data.DataTable" /> を取得します。</summary>
      <returns>関連付けられたデータ ソースの参照できるインスタンスに関する情報が格納された <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="T:System.Data.Common.DbEnumerator">
      <summary>.NET Framework データ プロバイダーによるコレクションに対する単純な反復処理をサポートする <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> メソッドを公開します。</summary>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)">
      <summary>特定の n データ リーダーを指定して、<see cref="T:System.Data.Common.DbEnumerator" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="reader">反復処理する DataReader。</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)">
      <summary>指定したリーダーを使用して <see cref="T:System.Data.Common.DbEnumerator" /> クラスの新しいインスタンスを初期化します。また、データの反復処理後にリーダーを自動的に閉じるかどうかを示します。</summary>
      <param name="reader">反復処理する DataReader。</param>
      <param name="closeReader">データの反復処理後に DataReader を自動的に閉じる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)">
      <summary>指定した <see langword="DataReader" /> を使用して <see cref="T:System.Data.Common.DbEnumerator" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="reader">反復処理する <see langword="DataReader" />。</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)">
      <summary>指定した <see langword="DataReader" /> を使用して <see cref="T:System.Data.Common.DbEnumerator" /> クラスの新しいインスタンスを初期化します。また、データの反復処理後に <see langword="DataReader" /> を自動的に閉じるかどうかを示します。</summary>
      <param name="reader">反復処理する <see langword="DataReader" />。</param>
      <param name="closeReader">データの反復処理後に <see langword="DataReader" /> を自動的に閉じる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Data.Common.DbEnumerator.Current">
      <summary>コレクション内の現在の要素を取得します。</summary>
      <returns>コレクション内の現在の要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.MoveNext">
      <summary>列挙子をコレクションの次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="T:System.Data.Common.DbException">
      <summary>データ ソースに代わってスローされるすべての例外の基本クラス。</summary>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定したシリアル化情報とコンテキストを使用して、<see cref="T:System.Data.Common.DbException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">転送元または転送先についてのコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext" /> です。</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String)">
      <summary>指定されたエラー メッセージで <see cref="T:System.Data.Common.DbException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">この例外に表示されるメッセージ。</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.Data.Common.DbException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー メッセージ文字列。</param>
      <param name="innerException">内部例外の参照。</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String,System.Int32)">
      <summary>指定したエラー メッセージおよびエラー コードを使用して、<see cref="T:System.Data.Common.DbException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="errorCode">例外のエラー コード。</param>
    </member>
    <member name="T:System.Data.Common.DbMetaDataCollectionNames">
      <summary>既知の MetaDataCollections (DataSourceInformation、DataTypes、MetaDataCollections、ReservedWords、Restrictions) の定数のリストを提供します。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation">
      <summary>DataSourceInformation コレクションを表す、<see cref="M:System.Data.Common.DbConnection.GetSchema" /> メソッドで使用するための定数。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.DataTypes">
      <summary>DataTypes コレクションを表す、<see cref="M:System.Data.Common.DbConnection.GetSchema" /> メソッドで使用するための定数。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.MetaDataCollections">
      <summary>MetaDataCollections コレクションを表す、<see cref="M:System.Data.Common.DbConnection.GetSchema" /> メソッドで使用するための定数。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.ReservedWords">
      <summary>ReservedWords コレクションを表す、<see cref="M:System.Data.Common.DbConnection.GetSchema" /> メソッドで使用するための定数。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.Restrictions">
      <summary>Restrictions コレクションを表す、<see cref="M:System.Data.Common.DbConnection.GetSchema" /> メソッドで使用するための定数。</summary>
    </member>
    <member name="T:System.Data.Common.DbMetaDataColumnNames">
      <summary>
        <see cref="T:System.Data.DataTable" /> に含まれる MetaDataCollection オブジェクトの列名に使用される静的な値を提供します。 <see cref="T:System.Data.DataTable" /> は、GetSchema メソッドによって作成されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CollectionName">
      <summary>DataTypes コレクションの CollectionName 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ColumnSize">
      <summary>DataTypes コレクションの ColumnSize 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CompositeIdentifierSeparatorPattern">
      <summary>DataSourceInformation コレクションの CompositeIdentifierSeparatorPattern 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CreateFormat">
      <summary>DataTypes コレクションの CreateFormat 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CreateParameters">
      <summary>DataTypes コレクションの CreateParameters 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductName">
      <summary>DataSourceInformation コレクションの DataSourceProductName 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductVersion">
      <summary>DataSourceInformation コレクションの DataSourceProductVersion 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductVersionNormalized">
      <summary>DataSourceInformation コレクションの DataSourceProductVersionNormalized 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataType">
      <summary>DataTypes コレクションの DataType 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.GroupByBehavior">
      <summary>DataSourceInformation コレクションの GroupByBehavior 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IdentifierCase">
      <summary>DataSourceInformation コレクションの IdentifierCase 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IdentifierPattern">
      <summary>DataSourceInformation コレクションの IdentifierPattern 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsAutoIncrementable">
      <summary>DataTypes コレクションの IsAutoIncrementable 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsBestMatch">
      <summary>DataTypes コレクションの IsBestMatch 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsCaseSensitive">
      <summary>DataTypes コレクションの IsCaseSensitive 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsConcurrencyType">
      <summary>DataTypes コレクションの IsConcurrencyType 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsFixedLength">
      <summary>DataTypes コレクションの IsFixedLength 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsFixedPrecisionScale">
      <summary>DataTypes コレクションの IsFixedPrecisionScale 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsLiteralSupported">
      <summary>DataTypes コレクションの IsLiteralSupported 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsLong">
      <summary>DataTypes コレクションの IsLong 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsNullable">
      <summary>DataTypes コレクションの IsNullable 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsSearchable">
      <summary>DataTypes コレクションの IsSearchable 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsSearchableWithLike">
      <summary>DataTypes コレクションの IsSearchableWithLike 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsUnsigned">
      <summary>DataTypes コレクションの IsUnsigned 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.LiteralPrefix">
      <summary>DataTypes コレクションの LiteralPrefix 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.LiteralSuffix">
      <summary>DataTypes コレクションの LiteralSuffix 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.MaximumScale">
      <summary>DataTypes コレクションの MaximumScale 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.MinimumScale">
      <summary>DataTypes コレクションの MinimumScale 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.NumberOfIdentifierParts">
      <summary>MetaDataCollections コレクションの NumberOfIdentifierParts 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.NumberOfRestrictions">
      <summary>MetaDataCollections コレクションの NumberOfRestrictions 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.OrderByColumnsInSelect">
      <summary>DataSourceInformation コレクションの OrderByColumnsInSelect 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat">
      <summary>DataSourceInformation コレクションの ParameterMarkerFormat 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerPattern">
      <summary>DataSourceInformation コレクションの ParameterMarkerPattern 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength">
      <summary>DataSourceInformation コレクションの ParameterNameMaxLength 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern">
      <summary>DataSourceInformation コレクションの ParameterNamePattern 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ProviderDbType">
      <summary>DataTypes コレクションの ProviderDbType 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.QuotedIdentifierCase">
      <summary>DataSourceInformation コレクションの QuotedIdentifierCase 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.QuotedIdentifierPattern">
      <summary>DataSourceInformation コレクションの QuotedIdentifierPattern 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ReservedWord">
      <summary>ReservedWords コレクションの ReservedWord 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.StatementSeparatorPattern">
      <summary>DataSourceInformation コレクションの StatementSeparatorPattern 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.StringLiteralPattern">
      <summary>DataSourceInformation コレクションの StringLiteralPattern 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.SupportedJoinOperators">
      <summary>DataSourceInformation コレクションの SupportedJoinOperators 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.TypeName">
      <summary>DataTypes コレクションの TypeName 列を作成するために、GetSchema メソッドによって使用されます。</summary>
    </member>
    <member name="T:System.Data.Common.DbParameter">
      <summary>
        <see cref="T:System.Data.Common.DbCommand" /> のパラメーターと、オプションで <see cref="T:System.Data.DataSet" /> 列に対するマップを表します。 パラメーターの詳細については、「パラメーターおよびパラメーター データ型の構成」を参照してください。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameter.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbParameter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Common.DbParameter.DbType">
      <summary>パラメーターの <see cref="T:System.Data.DbType" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DbType" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Data.DbType.String" /> です。</returns>
      <exception cref="T:System.ArgumentException">プロパティが有効な <see cref="T:System.Data.DbType" /> に設定されていません。</exception>
    </member>
    <member name="P:System.Data.Common.DbParameter.Direction">
      <summary>パラメーターが入力専用、出力専用、双方向、またはストアド プロシージャの戻り値パラメーターのいずれであるかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 値のいずれか 1 つ。 既定値は、<see langword="Input" /> です。</returns>
      <exception cref="T:System.ArgumentException">プロパティが、いずれかの有効な <see cref="T:System.Data.ParameterDirection" /> 値に設定されていません。</exception>
    </member>
    <member name="P:System.Data.Common.DbParameter.IsNullable">
      <summary>パラメーターが null 値を受け取るかどうかを示す値を取得または設定します。</summary>
      <returns>null 値を使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.ParameterName">
      <summary>
        <see cref="T:System.Data.Common.DbParameter" /> の名前を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> の名前。 既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Precision">
      <summary>
        <see cref="P:System.Data.Common.DbParameter.Value" /> プロパティを表すために使用する最大桁数を取得または設定します。</summary>
      <returns>
        <see cref="P:System.Data.Common.DbParameter.Value" /> プロパティを表すために使用する最大桁数。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameter.ResetDbType">
      <summary>DbType プロパティを元の設定にリセットします。</summary>
    </member>
    <member name="P:System.Data.Common.DbParameter.Scale">
      <summary>
        <see cref="P:System.Data.Common.DbParameter.Value" /> が解決される、小数点以下の桁数を取得または設定します。</summary>
      <returns>
        <see cref="P:System.Data.Common.DbParameter.Value" /> が解決される、小数点以下の桁数。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Size">
      <summary>列内のデータの最大サイズをバイト単位で取得または設定します。</summary>
      <returns>列内のデータの最大サイズ (バイト単位)。 既定値はパラメーター値から推論されます。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceColumn">
      <summary>
        <see cref="T:System.Data.DataSet" /> に割り当てられ、<see cref="P:System.Data.Common.DbParameter.Value" /> の読み込みまたは戻しに使用されるソース列の名前を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> にマップされるソース列の名前。 既定値は空の文字列です。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceColumnNullMapping">
      <summary>ソース列が Null 許容かどうかを示す値を取得または設定します。 これにより、<see cref="T:System.Data.Common.DbCommandBuilder" /> で null 許容列の Update ステートメントを正しく生成できます。</summary>
      <returns>ソース列が null 許容である場合は <see langword="true" />。null 許容ではない場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceVersion">
      <summary>
        <see cref="T:System.Data.DataRowVersion" /> の読み込み時に使用する <see cref="P:System.Data.Common.DbParameter.Value" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 値のいずれか 1 つ。 既定値は、<see langword="Current" /> です。</returns>
      <exception cref="T:System.ArgumentException">プロパティが、<see cref="T:System.Data.DataRowVersion" /> 値の 1 つに設定されていません。</exception>
    </member>
    <member name="P:System.Data.Common.DbParameter.System#Data#IDbDataParameter#Precision">
      <summary>数値パラメーターの精度を示します。</summary>
      <returns>データ プロバイダー <see langword="Parameter" /> オブジェクトの <see langword="Value" /> プロパティを表すために使用する最大桁数。 既定値は 0 で、データ プロバイダーにより <see langword="Value" /> の精度が設定されていることを示します。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.System#Data#IDbDataParameter#Scale">
      <summary>このメンバーの詳細については、「<see cref="P:System.Data.IDbDataParameter.Scale" />」をご覧ください。</summary>
      <returns>
        <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> が解決される、小数点以下の桁数。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Value">
      <summary>パラメーターの値を取得または設定します。</summary>
      <returns>パラメーターの値である <see cref="T:System.Object" />。 既定値は NULL です。</returns>
    </member>
    <member name="T:System.Data.Common.DbParameterCollection">
      <summary>
        <see cref="T:System.Data.Common.DbCommand" /> に関連するパラメーターのコレクションの基底クラス。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbParameterCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Add(System.Object)">
      <summary>指定された <see cref="T:System.Data.Common.DbParameter" /> オブジェクトを <see cref="T:System.Data.Common.DbParameterCollection" /> に追加します。</summary>
      <param name="value">コレクションに追加する <see cref="T:System.Data.Common.DbParameter" /> の <see cref="P:System.Data.Common.DbParameter.Value" />。</param>
      <returns>コレクション内の <see cref="T:System.Data.Common.DbParameter" /> オブジェクトのインデックス。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.AddRange(System.Array)">
      <summary>指定された値で項目の配列を <see cref="T:System.Data.Common.DbParameterCollection" /> に追加します。</summary>
      <param name="values">コレクションに追加する <see cref="T:System.Data.Common.DbParameter" /> 型の値の配列。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Clear">
      <summary>
        <see cref="T:System.Data.Common.DbParameterCollection" /> からすべての <see cref="T:System.Data.Common.DbParameter" /> 値を削除します。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Contains(System.Object)">
      <summary>指定した <see cref="P:System.Data.Common.DbParameter.Value" /> の <see cref="T:System.Data.Common.DbParameter" /> がコレクション内に含まれるかどうかを示します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.Data.Common.DbParameter" /> の <see cref="P:System.Data.Common.DbParameter.Value" />。</param>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> がコレクション内に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Contains(System.String)">
      <summary>指定した名前の <see cref="T:System.Data.Common.DbParameter" /> がコレクション内に存在するかどうかを示します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.Data.Common.DbParameter" /> の名前。</param>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> がコレクション内に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>指定したインデックスを開始位置として、項目の配列をコレクションにコピーします。</summary>
      <param name="array">コレクションにコピーする項目の配列。</param>
      <param name="index">項目をコピーするコレクション内のインデックス。</param>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Count">
      <summary>コレクション内の項目の数を指定します。</summary>
      <returns>コレクション内の項目数。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetEnumerator">
      <summary>.NET Framework データ プロバイダーによるコレクションに対する単純な反復処理をサポートする <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> メソッドを公開します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetParameter(System.Int32)">
      <summary>コレクション内の指定したインデックス位置にある <see cref="T:System.Data.Common.DbParameter" /> オブジェクトを返します。</summary>
      <param name="index">コレクション内の <see cref="T:System.Data.Common.DbParameter" /> のインデックス。</param>
      <returns>コレクション内の指定したインデックス位置にある <see cref="T:System.Data.Common.DbParameter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetParameter(System.String)">
      <summary>指定した名前の <see cref="T:System.Data.Common.DbParameter" /> オブジェクトを返します。</summary>
      <param name="parameterName">コレクション内の <see cref="T:System.Data.Common.DbParameter" /> の名前。</param>
      <returns>指定した名前の <see cref="T:System.Data.Common.DbParameter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.IndexOf(System.Object)">
      <summary>指定した <see cref="T:System.Data.Common.DbParameter" /> オブジェクトのインデックスを返します。</summary>
      <param name="value">コレクション内の <see cref="T:System.Data.Common.DbParameter" /> オブジェクト。</param>
      <returns>指定された <see cref="T:System.Data.Common.DbParameter" /> オブジェクトのインデックス。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.IndexOf(System.String)">
      <summary>指定した名前の <see cref="T:System.Data.Common.DbParameter" /> オブジェクトのインデックスを返します。</summary>
      <param name="parameterName">コレクション内の <see cref="T:System.Data.Common.DbParameter" /> オブジェクトの名前。</param>
      <returns>指定した名前の <see cref="T:System.Data.Common.DbParameter" /> オブジェクトのインデックス。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Insert(System.Int32,System.Object)">
      <summary>指定した名前を持つ <see cref="T:System.Data.Common.DbParameter" /> オブジェクトの指定したインデックスを、指定したインデックスにあるコレクションに挿入します。</summary>
      <param name="index">
        <see cref="T:System.Data.Common.DbParameter" /> オブジェクトを挿入する位置を示すインデックス。</param>
      <param name="value">コレクションに挿入する <see cref="T:System.Data.Common.DbParameter" /> オブジェクト。</param>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsFixedSize">
      <summary>コレクションが固定サイズかどうかを指定します。</summary>
      <returns>コレクションが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを指定します。</summary>
      <returns>コレクションが読み取り専用の場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsSynchronized">
      <summary>コレクションが同期されているかどうかを指定します。</summary>
      <returns>コレクションが同期されている場合は <see langword="true" />、それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Item(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.Data.Common.DbParameter" /> を取得または設定します。</summary>
      <param name="index">パラメーターの 0 から始まるインデックス。</param>
      <returns>指定されたインデックス位置にある <see cref="T:System.Data.Common.DbParameter" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定されたインデックスは存在しません。</exception>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Item(System.String)">
      <summary>指定した名前の <see cref="T:System.Data.Common.DbParameter" /> を取得または設定します。</summary>
      <param name="parameterName">パラメーターの名前。</param>
      <returns>指定された名前の <see cref="T:System.Data.Common.DbParameter" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定されたインデックスは存在しません。</exception>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Remove(System.Object)">
      <summary>指定した <see cref="T:System.Data.Common.DbParameter" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value">削除する <see cref="T:System.Data.Common.DbParameter" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.RemoveAt(System.Int32)">
      <summary>指定した位置の <see cref="T:System.Data.Common.DbParameter" /> オブジェクトをコレクションから削除します。</summary>
      <param name="index">
        <see cref="T:System.Data.Common.DbParameter" /> オブジェクトが存在するインデックス。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.RemoveAt(System.String)">
      <summary>指定した名前を持つ <see cref="T:System.Data.Common.DbParameter" /> オブジェクトをコレクションから削除します。</summary>
      <param name="parameterName">削除する <see cref="T:System.Data.Common.DbParameter" /> オブジェクトの名前。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
      <summary>指定したインデックスの <see cref="T:System.Data.Common.DbParameter" /> オブジェクトを新しい値に設定します。</summary>
      <param name="index">
        <see cref="T:System.Data.Common.DbParameter" /> オブジェクトが存在するインデックス。</param>
      <param name="value">新しい <see cref="T:System.Data.Common.DbParameter" /> 値。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
      <summary>指定した名前の <see cref="T:System.Data.Common.DbParameter" /> オブジェクトを新しい値に設定します。</summary>
      <param name="parameterName">コレクション内の <see cref="T:System.Data.Common.DbParameter" /> オブジェクトの名前。</param>
      <param name="value">新しい <see cref="T:System.Data.Common.DbParameter" /> 値。</param>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.SyncRoot">
      <summary>コレクションへのアクセスを同期するために使用する <see cref="T:System.Object" /> を指定します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameterCollection" /> へのアクセスを同期するために使用する <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Collections#IList#Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <returns>指定したインデックス位置にある要素。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Data#IDataParameterCollection#Item(System.String)">
      <summary>指定したインデックスにあるパラメーターを取得または設定します。</summary>
      <param name="parameterName">取得するパラメーターの名前。</param>
      <returns>指定したインデックス位置にある <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderFactories">
      <summary>
        <see cref="T:System.Data.Common.DbProviderFactory" /> クラスの 1 つ以上のインスタンスを作成するための静的メソッドのセットを表します。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.Data.Common.DbConnection)">
      <summary>
        <see cref="T:System.Data.Common.DbProviderFactory" /> のインスタンスを返します。</summary>
      <param name="connection">使用する接続。</param>
      <returns>指定された接続の <see cref="T:System.Data.Common.DbProviderFactory" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.Data.DataRow)">
      <summary>
        <see cref="T:System.Data.Common.DbProviderFactory" /> のインスタンスを返します。</summary>
      <param name="providerRow">プロバイダーの構成情報を格納している <see cref="T:System.Data.DataRow" />。</param>
      <returns>指定された <see cref="T:System.Data.Common.DbProviderFactory" /> の <see cref="T:System.Data.DataRow" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.String)">
      <summary>
        <see cref="T:System.Data.Common.DbProviderFactory" /> のインスタンスを返します。</summary>
      <param name="providerInvariantName">プロバイダーの不変名。</param>
      <returns>指定されたプロバイダー名の <see cref="T:System.Data.Common.DbProviderFactory" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactoryClasses">
      <summary>
        <see cref="T:System.Data.DataTable" /> を実装するすべてのインストール済みプロバイダーに関する情報を格納している <see cref="T:System.Data.Common.DbProviderFactory" /> を返します。</summary>
      <returns>次のデータを格納する <see cref="T:System.Data.DataRow" /> オブジェクトが格納されている <see cref="T:System.Data.DataTable" />:
  列の序数 
  列名 
  説明 
  0 
  **Name**  
  
  ユーザーが判読できるデータ プロバイダーの名前。  
  
  1 
  **説明**  
  
  ユーザーが判読できるデータ プロバイダーの説明。  
  
  2 
  **InvariantName**  
  
  データ プロバイダーをプログラムから参照するために使用できる名前。  
  
  3 
  **AssemblyQualifiedName**  
  
  オブジェクトをインスタンス化するために必要な情報が含まれるファクトリ クラスの完全修飾名。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetProviderInvariantNames">
      <summary>
        <see cref="T:System.Data.Common.DbProviderFactory" /> のすべての登録済みインスタンスの不変のプロバイダー名を返します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbProviderFactory" /> のすべての登録済みインスタンスの不変のプロバイダー名。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.RegisterFactory(System.String,System.Data.Common.DbProviderFactory)">
      <summary>指定された不変のプロバイダー名に <see cref="T:System.Data.Common.DbProviderFactory" /> のインスタンスを登録します。</summary>
      <param name="providerInvariantName">プロバイダーの登録先となる不変のプロバイダー名。</param>
      <param name="factory">登録するプロバイダー ファクトリのインスタンス。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.RegisterFactory(System.String,System.String)">
      <summary>指定されたアセンブリ修飾名を使用して、不変のプロバイダー名に <see cref="T:System.Data.Common.DbProviderFactory" /> のインスタンスを登録します。</summary>
      <param name="providerInvariantName">プロバイダーの登録先となる不変のプロバイダー名。</param>
      <param name="factoryTypeAssemblyQualifiedName">
        <see cref="T:System.Data.Common.DbProviderFactory" /> のアセンブリ修飾名。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.RegisterFactory(System.String,System.Type)">
      <summary>指定された型を使用して、不変のプロバイダー名に <see cref="T:System.Data.Common.DbProviderFactory" /> のインスタンスを登録します。</summary>
      <param name="providerInvariantName">プロバイダーの登録先となる不変のプロバイダー名。</param>
      <param name="providerFactoryClass">
        <see cref="T:System.Data.Common.DbProviderFactory" /> を表す型。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.TryGetFactory(System.String,System.Data.Common.DbProviderFactory@)">
      <summary>指定された不変のプロバイダー名に登録されている <see cref="T:System.Data.Common.DbProviderFactory" /> の取得を試みます。</summary>
      <param name="providerInvariantName">検索対象のプロバイダーの不変名。</param>
      <param name="factory">このメソッドから制御が戻るとき、指定されたプロバイダーの不変名が見つかった場合は、その名前に関連付けられている <see cref="T:System.Data.Common.DbProviderFactory" /> が格納されます。それ以外の場合は <see langword="null" /> になります。 このパラメーターは初期化せずに渡されます。</param>
      <returns>指定された不変のプロバイダー名にプロバイダーが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.UnregisterFactory(System.String)">
      <summary>指定されたプロバイダーの不変名の <see cref="T:System.Data.Common.DbProviderFactory" /> 登録を削除します。</summary>
      <param name="providerInvariantName">削除対象の登録のプロバイダーの不変名。</param>
      <returns>登録が見つかり、正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、<paramref name="providerInvariantName" /> の登録が見つからない場合、<see langword="false" /> を返します。</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderFactory">
      <summary>プロバイダーのデータ ソース クラスの実装のインスタンスを作成するためのメソッドのセットを表します。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbProviderFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Common.DbProviderFactory.CanCreateCommandBuilder">
      <summary>この <see cref="T:System.Data.Common.DbProviderFactory" /> インスタンスが <see cref="T:System.Data.Common.DbCommandBuilder" /> クラスをサポートしているかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" />このインスタンスがクラスを<see cref="T:System.Data.Common.DbCommandBuilder" />サポートしている<see langword="false" />場合は。それ以外の場合は。</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderFactory.CanCreateDataAdapter">
      <summary>この <see cref="T:System.Data.Common.DbProviderFactory" /> インスタンスが <see cref="T:System.Data.Common.DbDataAdapter" /> クラスをサポートしているかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" />インスタンスがクラスを<see cref="T:System.Data.Common.DbDataAdapter" />サポートしている場合は。それ以外の<see langword="false" />場合は。</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderFactory.CanCreateDataSourceEnumerator">
      <summary>この <see cref="T:System.Data.Common.DbProviderFactory" /> インスタンスが <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> クラスをサポートしているかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" />インスタンスがクラスを<see cref="T:System.Data.Common.DbDataSourceEnumerator" />サポートしている場合は。それ以外の<see langword="false" />場合は。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateCommand">
      <summary>
        <see cref="T:System.Data.Common.DbCommand" /> クラスを実装するプロバイダーのクラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateCommandBuilder">
      <summary>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> クラスを実装するプロバイダーのクラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateConnection">
      <summary>
        <see cref="T:System.Data.Common.DbConnection" /> クラスを実装するプロバイダーのクラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnection" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateConnectionStringBuilder">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> クラスを実装するプロバイダーのクラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateDataAdapter">
      <summary>
        <see cref="T:System.Data.Common.DbDataAdapter" /> クラスを実装するプロバイダーのクラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataAdapter" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateDataSourceEnumerator">
      <summary>
        <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> クラスを実装するプロバイダーのクラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateParameter">
      <summary>
        <see cref="T:System.Data.Common.DbParameter" /> クラスを実装するプロバイダーのクラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> の新しいインスタンス。</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderSpecificTypePropertyAttribute">
      <summary>プロバイダー固有の型の設定時に使用される、厳密に型指定されたパラメーター クラスのプロバイダー固有のプロパティを識別します。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderSpecificTypePropertyAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Common.DbProviderSpecificTypePropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="isProviderSpecificTypeProperty">このプロパティがプロバイダー固有のプロパティであるかどうかを示します。</param>
    </member>
    <member name="P:System.Data.Common.DbProviderSpecificTypePropertyAttribute.IsProviderSpecificTypeProperty">
      <summary>属性付きプロパティがプロバイダー固有の型であるかどうかを示します。</summary>
      <returns>この属性が適用されるプロパティがプロバイダー固有の型のプロパティである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Data.Common.DbTransaction">
      <summary>データベース トランザクションのコア動作を定義し、データベース固有のトランザクションに向けた基底クラスを提供します。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.#ctor">
      <summary>新しい <see cref="T:System.Data.Common.DbTransaction" /> オブジェクトを初期化します。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Commit">
      <summary>派生クラス内でオーバーライドされた場合、データベース トランザクションをコミットします。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.CommitAsync(System.Threading.CancellationToken)">
      <summary>データベース トランザクションを非同期にコミットします。</summary>
      <param name="cancellationToken">非同期操作を取り消すオプションのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期操作を表す <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.Connection">
      <summary>トランザクションに関連付けられている <see cref="T:System.Data.Common.DbConnection" /> オブジェクトを指定します。</summary>
      <returns>トランザクションに関連付けられる <see cref="T:System.Data.Common.DbConnection" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.DbConnection">
      <summary>派生クラス内でオーバーライドされた場合、トランザクションに関連付けられている <see cref="T:System.Data.Common.DbConnection" /> オブジェクトを取得します。</summary>
      <returns>トランザクションに関連付けられる <see cref="T:System.Data.Common.DbConnection" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Dispose">
      <summary>
        <see cref="T:System.Data.Common.DbTransaction" /> によって使用されているアンマネージ リソースを解放します。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Common.DbTransaction" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">
        <see langword="true" /> の場合、このメソッドは、この <see cref="T:System.Data.Common.DbTransaction" /> から参照されるすべてのマネージド オブジェクトが保持しているすべてのリソースを解放します。</param>
    </member>
    <member name="M:System.Data.Common.DbTransaction.DisposeAsync">
      <summary>トランザクション オブジェクトを非同期に破棄します。</summary>
      <returns>非同期操作を表す <see cref="T:System.Threading.Tasks.ValueTask" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.IsolationLevel">
      <summary>派生クラス内でオーバーライドされた場合、このトランザクションの分離レベルを取得します。</summary>
      <returns>このトランザクションの分離レベル。</returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Rollback">
      <summary>派生クラス内でオーバーライドされた場合、トランザクションを保留状態からロールバックします。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.RollbackAsync(System.Threading.CancellationToken)">
      <summary>トランザクションを保留状態から非同期にロールバックします。</summary>
      <param name="cancellationToken">非同期操作を取り消すオプションのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期操作を表すタスク。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.System#Data#IDbTransaction#Connection">
      <summary>トランザクションに関連付けられた <see cref="T:System.Data.Common.DbConnection" /> オブジェクト、またはトランザクションが無効になった場合に null 参照を取得します。</summary>
      <returns>トランザクションに関連付けられる <see cref="T:System.Data.Common.DbConnection" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Data.Common.GroupByBehavior">
      <summary>GROUP BY 句の列と SELECT ステートメントの SELECT 一覧の非集計列のリレーションシップを指定します。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.ExactMatch">
      <summary>GROUP BY 句には、SELECT 一覧のすべての非集計列を含める必要があります。また、SELECT 一覧にない他の列を含めることはできません。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.MustContainAll">
      <summary>GROUP BY 句には、SELECT 一覧のすべての非集計列を含める必要があります。また、SELECT 一覧にない他の列を含めることもできます。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.NotSupported">
      <summary>GROUP BY 句がサポートされていません。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.Unknown">
      <summary>GROUP BY 句がサポートされているか不明です。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.Unrelated">
      <summary>GROUP BY 句の列と SELECT 一覧の非集計列との間にリレーションシップがありません。 任意の列によってグループ化できます。</summary>
    </member>
    <member name="T:System.Data.Common.IDbColumnSchemaGenerator">
      <summary>列のスキーマを生成します。</summary>
    </member>
    <member name="M:System.Data.Common.IDbColumnSchemaGenerator.GetColumnSchema">
      <summary>列のスキーマ (<see cref="T:System.Data.Common.DbColumn" /> コレクション) を取得します。</summary>
      <returns>列のスキーマ (<see cref="T:System.Data.Common.DbColumn" /> コレクション)。</returns>
    </member>
    <member name="T:System.Data.Common.IdentifierCase">
      <summary>システム カタログの検索時に、データ ソースで識別子を処理する方法を指定します。</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Insensitive">
      <summary>データ ソースは、システム カタログの検索時に識別子の大文字と小文字を区別しません。 識別子 "ab" と "AB" は一致します。</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Sensitive">
      <summary>データ ソースは、システム カタログの検索時に識別子の大文字と小文字を区別します。 識別子 "ab" と "AB" は一致しません。</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Unknown">
      <summary>データ ソースは、識別子の大文字と小文字の区別に関するあいまいな規則を持ち、この情報を正しく区別できません。</summary>
    </member>
    <member name="T:System.Data.Common.RowUpdatedEventArgs">
      <summary>.NET Framework データ プロバイダーの <see langword="RowUpdated" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>
        <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" /> を通じて送信された <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> の呼び出し時に実行される <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="statementType">実行された SQL ステートメントの種類。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> を通じて送信された <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Command">
      <summary>
        <see cref="T:System.Data.IDbCommand" /> の呼び出し時に実行される <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> の呼び出し時に実行される <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[])">
      <summary>指定した配列に、変更された行の参照をコピーします。</summary>
      <param name="array">コピー先の <see cref="T:System.Data.DataRow" /> の配列。</param>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[],System.Int32)">
      <summary>指定した配列に、変更された行の参照をコピーします。</summary>
      <param name="array">コピー先の <see cref="T:System.Data.DataRow" /> の配列。</param>
      <param name="arrayIndex">コピーの開始位置となる配列内のインデックス。</param>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Errors">
      <summary>
        <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> の実行時に .NET Framework データ プロバイダーが生成したエラーを取得します。</summary>
      <returns>
        <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> の実行時に .NET Framework データ プロバイダーが生成したエラー。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.RecordsAffected">
      <summary>SQL ステートメントの実行によって変更、挿入、または削除された行の数を取得します。</summary>
      <returns>変更、挿入、または削除された行の数。影響を受けた行がない、またはステートメントが失敗した場合は 0。SELECT ステートメントの場合は -1。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Row">
      <summary>
        <see cref="T:System.Data.DataRow" /> を通じて送信された <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> を通じて送信された <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.RowCount">
      <summary>バッチでの更新済みレコードで処理された行数を取得します。</summary>
      <returns>処理された行数を示す <see langword="int" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.StatementType">
      <summary>実行された SQL ステートメントの種類を取得します。</summary>
      <returns>実行された SQL ステートメントの種類。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Status">
      <summary>
        <see cref="T:System.Data.UpdateStatus" /> プロパティの <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Data.UpdateStatus" /> 値のいずれか 1 つ。 既定値は、<see langword="Continue" /> です。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.TableMapping">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" /> を通じて送信された <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> を通じて送信された <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="T:System.Data.Common.RowUpdatingEventArgs">
      <summary>.NET Framework データ プロバイダーの RowUpdating イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.Data.Common.RowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>
        <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" /> を実行する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> の呼び出し時に実行する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="statementType">実行する SQL ステートメントの種類。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> を通じて送信する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.BaseCommand">
      <summary>このクラスのインスタンスの <see cref="T:System.Data.IDbCommand" /> オブジェクトを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 処理中に実行する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Command">
      <summary>
        <see cref="T:System.Data.IDbCommand" /> 処理中に実行する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 処理中に実行する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Errors">
      <summary>
        <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> の実行時に .NET Framework データ プロバイダーが生成したエラーを取得します。</summary>
      <returns>
        <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> の実行時に .NET Framework データ プロバイダーが生成したエラー。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Row">
      <summary>挿入、更新、または削除操作の一部としてサーバーに送信される <see cref="T:System.Data.DataRow" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> を通じて送信する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.StatementType">
      <summary>実行する SQL ステートメントの種類を取得します。</summary>
      <returns>実行する SQL ステートメントの種類。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Status">
      <summary>
        <see cref="T:System.Data.UpdateStatus" /> プロパティの <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.UpdateStatus" /> 値のいずれか。 既定値は、<see langword="Continue" /> です。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.TableMapping">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" /> を通じて送信する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> を通じて送信する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="T:System.Data.Common.SchemaTableColumn">
      <summary>データベース テーブルのスキーマの列メタデータを記述します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.AllowDBNull">
      <summary>値 <see langword="DBNull" /> の使用が許可されているかどうかを示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseColumnName">
      <summary>スキーマ テーブルの列の名前を示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseSchemaName">
      <summary>スキーマ テーブルのスキーマの名前を示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseTableName">
      <summary>スキーマ テーブルのテーブルの名前を示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnName">
      <summary>スキーマ テーブルの列の名前を示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnOrdinal">
      <summary>列の序数を示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnSize">
      <summary>列のサイズを示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.DataType">
      <summary>列のデータの型を示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsAliased">
      <summary>この列に別名が設定されているかどうかを示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsExpression">
      <summary>この列が式であるかどうかを示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsKey">
      <summary>この列がテーブルのキーであるかどうかを示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsLong">
      <summary>この列に長いデータが格納されているかどうかを示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsUnique">
      <summary>この列に UNIQUE 制約が適用されるかどうかを示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NonVersionedProviderType">
      <summary>バージョンなしのプロバイダー固有の列のデータ型を示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NumericPrecision">
      <summary>データが数値の場合に、列データの有効桁数を示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NumericScale">
      <summary>データが数値の場合に、列データの小数点以下桁数を示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ProviderType">
      <summary>プロバイダー固有の列のデータ型を示します。</summary>
    </member>
    <member name="T:System.Data.Common.SchemaTableOptionalColumn">
      <summary>データベース テーブルのスキーマのオプションの列メタデータを記述します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.AutoIncrementSeed">
      <summary>一連の新しい ID 列に割り当てられる値を示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.AutoIncrementStep">
      <summary>ID 列の値間のインクリメントを示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseCatalogName">
      <summary>直前のクエリの結果に関連付けられているカタログの名前。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseColumnNamespace">
      <summary>列の名前空間。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseServerName">
      <summary>列のサーバー名。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseTableNamespace">
      <summary>列を格納しているテーブルの名前空間。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.ColumnMapping">
      <summary>列の割り当てを示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.DefaultValue">
      <summary>列の既定値。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.Expression">
      <summary>列の計算に使用される式。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsAutoIncrement">
      <summary>列内の列値が自動的にインクリメントされるかどうかを示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsHidden">
      <summary>この列が非表示かどうかを示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsReadOnly">
      <summary>この列が読み取り専用かどうかを示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsRowVersion">
      <summary>この列に行のバージョン情報が格納されているかどうかを示します。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.ProviderSpecificDataType">
      <summary>プロバイダー固有の列のデータ型を示します。</summary>
    </member>
    <member name="T:System.Data.Common.SupportedJoinOperators">
      <summary>データ ソースでサポートされている Transact-SQL の JOIN ステートメントの種類を示します。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.FullOuter">
      <summary>データ ソースは、完全外部結合をサポートしています。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.Inner">
      <summary>データ ソースは、内部結合をサポートしています。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.LeftOuter">
      <summary>データ ソースは、左外部結合をサポートしています。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.None">
      <summary>データ ソースは、結合クエリをサポートしていません。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.RightOuter">
      <summary>データ ソースは、右外部結合をサポートしています。</summary>
    </member>
    <member name="T:System.Data.ConflictOption">
      <summary>データ ソースに対する変更が競合していることを検出して解決する方法を指定します。</summary>
    </member>
    <member name="F:System.Data.ConflictOption.CompareAllSearchableValues">
      <summary>UPDATE ステートメントおよび DELETE ステートメントに、WHERE 句のテーブルで検索可能な列がすべて含まれます。 これは、<see langword="CompareAllValuesUpdate" /> | <see langword="CompareAllValuesDelete" /> を指定することと同じです。</summary>
    </member>
    <member name="F:System.Data.ConflictOption.CompareRowVersion">
      <summary>テーブル内にタイムスタンプ列が存在する場合、その列は生成されるすべての UPDATE ステートメントの WHERE 句で使用されます。 これは、<see langword="CompareRowVersionUpdate" /> | <see langword="CompareRowVersionDelete" /> を指定することと同じです。</summary>
    </member>
    <member name="F:System.Data.ConflictOption.OverwriteChanges">
      <summary>すべての UPDATE ステートメントおよび DELETE ステートメントの WHERE 句に、<see cref="P:System.Data.DataTable.PrimaryKey" /> 列のみが含まれます。 <see cref="P:System.Data.DataTable.PrimaryKey" /> が定義されていない場合、検索可能な列がすべて WHERE 句に含まれます。 これは、<see langword="OverwriteChangesUpdate" /> | <see langword="OverwriteChangesDelete" /> と同じです。</summary>
    </member>
    <member name="T:System.Data.ConnectionState">
      <summary>データ ソースへの接続の現在の状態を記述します。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Broken">
      <summary>データ ソースへの接続が断絶しています。 この状態は接続が開かれているときだけ発生します。 この状態の接続は、いったん閉じてから再び開くことができる場合があります。 この値は製品の将来のバージョンで使用するために予約されています。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Closed">
      <summary>接続が閉じています。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Connecting">
      <summary>接続オブジェクトがデータ ソースに接続しています。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Executing">
      <summary>接続オブジェクトがコマンドを実行しています。 この値は製品の将来のバージョンで使用するために予約されています。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Fetching">
      <summary>接続オブジェクトがデータを検索しています。 この値は製品の将来のバージョンで使用するために予約されています。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Open">
      <summary>接続が開いています。</summary>
    </member>
    <member name="T:System.Data.Constraint">
      <summary>1 つ以上の <see cref="T:System.Data.DataColumn" /> オブジェクトに適用できる制約を表します。</summary>
    </member>
    <member name="P:System.Data.Constraint._DataSet">
      <summary>この制約が属する <see cref="T:System.Data.DataSet" /> を取得します。</summary>
      <returns>制約が属する <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="M:System.Data.Constraint.CheckStateForProperty">
      <summary>この制約が属する <see cref="T:System.Data.DataSet" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Constraint.ConstraintName">
      <summary>
        <see cref="T:System.Data.ConstraintCollection" /> 内の制約の名前。</summary>
      <returns>
        <see cref="T:System.Data.Constraint" /> の名前。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.Constraint" /> 名が null 値または空の文字列です。</exception>
      <exception cref="T:System.Data.DuplicateNameException">
        <see cref="T:System.Data.ConstraintCollection" /> には、同じ名前 (名前の比較では大文字と小文字が区別されない) の <see cref="T:System.Data.Constraint" /> が既に含まれています。</exception>
    </member>
    <member name="P:System.Data.Constraint.ExtendedProperties">
      <summary>ユーザー定義の制約のプロパティのコレクションを取得します。</summary>
      <returns>カスタム情報の <see cref="T:System.Data.PropertyCollection" />。</returns>
    </member>
    <member name="M:System.Data.Constraint.SetDataSet(System.Data.DataSet)">
      <summary>制約の <see cref="T:System.Data.DataSet" /> を設定します。</summary>
      <param name="dataSet">この制約が属する <see cref="T:System.Data.DataSet" />。</param>
    </member>
    <member name="P:System.Data.Constraint.Table">
      <summary>制約を適用する <see cref="T:System.Data.DataTable" /> を取得します。</summary>
      <returns>制約を適用する <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Constraint.ToString">
      <summary>
        <see cref="P:System.Data.Constraint.ConstraintName" /> がある場合は、この制約名を文字列として取得します。</summary>
      <returns>
        <see cref="P:System.Data.Constraint.ConstraintName" /> の文字列値。</returns>
    </member>
    <member name="T:System.Data.ConstraintCollection">
      <summary>
        <see cref="T:System.Data.DataTable" /> に対する制約のコレクションを表します。</summary>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.Data.Constraint)">
      <summary>指定した <see cref="T:System.Data.Constraint" /> オブジェクトをコレクションに追加します。</summary>
      <param name="constraint">追加する <see langword="Constraint" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> 引数が null です。</exception>
      <exception cref="T:System.ArgumentException">この制約は既にこのコレクションまたは別のコレクションに属しています。</exception>
      <exception cref="T:System.Data.DuplicateNameException">このコレクションには同じ名前の制約が既に含まれています。 (比較では、大文字と小文字を区別しません。)</exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Boolean)">
      <summary>指定した名前、<see cref="T:System.Data.UniqueConstraint" />、およびその列が主キーかどうかを示す値を使用して、新しい <see cref="T:System.Data.DataColumn" /> を作成し、この制約をコレクションに追加します。</summary>
      <param name="name">
        <see langword="UniqueConstraint" /> の名前。</param>
      <param name="column">制約を適用する <see cref="T:System.Data.DataColumn" />。</param>
      <param name="primaryKey">列を主キーにするかどうかを指定します。 <see langword="true" /> の場合、その列が主キー列になります。</param>
      <returns>新しい <see langword="UniqueConstraint" />。</returns>
      <exception cref="T:System.ArgumentException">この制約は既にこのコレクションに属しています。

または -

この制約は他のコレクションに属しています。</exception>
      <exception cref="T:System.Data.DuplicateNameException">このコレクションには指定した名前の制約が既に含まれています。 (比較では、大文字と小文字を区別しません。)</exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>指定した名前、親列、および子列を使用して新しい <see cref="T:System.Data.ForeignKeyConstraint" /> を作成し、この制約をコレクションに追加します。</summary>
      <param name="name">
        <see cref="T:System.Data.ForeignKeyConstraint" /> の名前。</param>
      <param name="primaryKeyColumn">主キーまたは親 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="foreignKeyColumn">外部キーまたは子 <see cref="T:System.Data.DataColumn" />。</param>
      <returns>新しい <see langword="ForeignKeyConstraint" />。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Boolean)">
      <summary>指定した名前、<see cref="T:System.Data.UniqueConstraint" /> オブジェクトの配列、およびその列が主キーかどうかを示す値を使用して新しい <see cref="T:System.Data.DataColumn" /> を作成し、その制約をコレクションに追加します。</summary>
      <param name="name">
        <see cref="T:System.Data.UniqueConstraint" /> の名前。</param>
      <param name="columns">制約を適用する <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</param>
      <param name="primaryKey">列を主キーにするかどうかを指定します。 <see langword="true" /> の場合、その列が主キー列になります。</param>
      <returns>新しい <see langword="UniqueConstraint" />。</returns>
      <exception cref="T:System.ArgumentException">この制約は既にこのコレクションに属しています。

または -

この制約は他のコレクションに属しています。</exception>
      <exception cref="T:System.Data.DuplicateNameException">このコレクションには指定した名前の制約が既に含まれています。 (比較では、大文字と小文字を区別しません。)</exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>指定した親列と子列の配列を使用して新しい <see cref="T:System.Data.ForeignKeyConstraint" /> を作成し、この制約をコレクションに追加します。</summary>
      <param name="name">
        <see cref="T:System.Data.ForeignKeyConstraint" /> の名前。</param>
      <param name="primaryKeyColumns">主キー列または親列である <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</param>
      <param name="foreignKeyColumns">外部キー列または子列である <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</param>
      <returns>新しい <see langword="ForeignKeyConstraint" />。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])">
      <summary>指定した <see cref="T:System.Data.ConstraintCollection" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="constraints">コレクションに追加する <see cref="T:System.Data.ConstraintCollection" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Data.ConstraintCollection.CanRemove(System.Data.Constraint)">
      <summary>
        <see cref="T:System.Data.Constraint" /> を削除できるかどうかを示します。</summary>
      <param name="constraint">コレクションから削除できるかどうかを確認する <see cref="T:System.Data.Constraint" />。</param>
      <returns>
        <see cref="T:System.Data.Constraint" /> をコレクションから削除できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Clear">
      <summary>すべての <see cref="T:System.Data.Constraint" /> オブジェクトのコレクションを削除します。</summary>
    </member>
    <member name="E:System.Data.ConstraintCollection.CollectionChanged">
      <summary>
        <see cref="T:System.Data.ConstraintCollection" /> オブジェクトを追加または削除したことが原因で <see cref="T:System.Data.Constraint" /> が変更されると、常に発生します。</summary>
    </member>
    <member name="M:System.Data.ConstraintCollection.Contains(System.String)">
      <summary>名前で指定した <see cref="T:System.Data.Constraint" /> オブジェクトがコレクション内に存在するかどうかを示します。</summary>
      <param name="name">制約の <see cref="P:System.Data.Constraint.ConstraintName" />。</param>
      <returns>指定した制約がコレクション内に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.CopyTo(System.Data.Constraint[],System.Int32)">
      <summary>指定したインデックスをコピー開始位置として、1 次元の <see cref="T:System.Array" /> インスタンスにコレクション オブジェクトをコピーします。</summary>
      <param name="array">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">挿入の開始位置を示す、配列内のインデックス。</param>
    </member>
    <member name="M:System.Data.ConstraintCollection.IndexOf(System.Data.Constraint)">
      <summary>指定した <see cref="T:System.Data.Constraint" /> のインデックスを取得します。</summary>
      <param name="constraint">検索対象の <see cref="T:System.Data.Constraint" />。</param>
      <returns>
        <see cref="T:System.Data.Constraint" /> がコレクション内に存在する場合はその制約の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.IndexOf(System.String)">
      <summary>名前で指定した <see cref="T:System.Data.Constraint" /> のインデックスを取得します。</summary>
      <param name="constraintName">
        <see cref="T:System.Data.Constraint" /> の名前。</param>
      <returns>
        <see cref="T:System.Data.Constraint" /> がコレクション内に存在する場合はその制約のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="P:System.Data.ConstraintCollection.Item(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.Data.Constraint" /> をコレクションから取得します。</summary>
      <param name="index">返される制約のインデックス。</param>
      <returns>指定されたインデックス位置にある <see cref="T:System.Data.Constraint" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">インデックス値が、コレクション内の項目数を超える値です。</exception>
    </member>
    <member name="P:System.Data.ConstraintCollection.Item(System.String)">
      <summary>指定した名前の <see cref="T:System.Data.Constraint" /> をコレクションから取得します。</summary>
      <param name="name">返される制約の <see cref="P:System.Data.Constraint.ConstraintName" />。</param>
      <returns>指定した名前の <see cref="T:System.Data.Constraint" />。指定した名前の <see cref="T:System.Data.Constraint" /> が存在しない場合は null 値。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Remove(System.Data.Constraint)">
      <summary>指定された <see cref="T:System.Data.Constraint" /> をコレクションから削除します。</summary>
      <param name="constraint">削除する <see cref="T:System.Data.Constraint" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> 引数が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">この制約はコレクション内に存在しません。</exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Remove(System.String)">
      <summary>名前で指定した <see cref="T:System.Data.Constraint" /> をコレクションから削除します。</summary>
      <param name="name">削除する <see cref="T:System.Data.Constraint" /> の名前。</param>
    </member>
    <member name="M:System.Data.ConstraintCollection.RemoveAt(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.Data.Constraint" /> オブジェクトをコレクションから削除します。</summary>
      <param name="index">削除する <see cref="T:System.Data.Constraint" /> のインデックス。</param>
      <exception cref="T:System.IndexOutOfRangeException">このコレクションにはこのインデックス位置に制約がありません。</exception>
    </member>
    <member name="T:System.Data.ConstraintException">
      <summary>制約に違反する操作を試みた場合にスローされる例外を表します。</summary>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor">
      <summary>
        <see cref="T:System.Data.ConstraintException" /> クラスの新しいインスタンスを初期化します。 これはパラメーターなしのコンストラクターです。</summary>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化コンテキストとストリーム コンテキストを指定して、<see cref="T:System.Data.ConstraintException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">指定したシリアル化ストリームの転送元と転送先の説明。</param>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.String)">
      <summary>文字列を指定して、<see cref="T:System.Data.ConstraintException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.String,System.Exception)">
      <summary>指定した文字列と内部例外を使用して、<see cref="T:System.Data.ConstraintException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外がスローされたときに表示する文字列。</param>
      <param name="innerException">現在の例外の原因となる <see langword="Exception" /> インスタンスを取得します。</param>
    </member>
    <member name="T:System.Data.DataColumn">
      <summary>
        <see cref="T:System.Data.DataTable" /> の列のスキーマを表します。</summary>
    </member>
    <member name="M:System.Data.DataColumn.#ctor">
      <summary>
        <see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを文字列型として初期化します。</summary>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String)">
      <summary>指定した列名を使用して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを文字列型として初期化します。</summary>
      <param name="columnName">作成する列の名前を表す文字列。 <see langword="null" /> または空の文字列 ("") に設定した場合は、列コレクションに追加するときに既定の名前が指定されます。</param>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type)">
      <summary>指定した列名とデータ型を使用して <see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="columnName">作成する列の名前を表す文字列。 <see langword="null" /> または空の文字列 ("") に設定した場合は、列コレクションに追加するときに既定の名前が指定されます。</param>
      <param name="dataType">サポートされる <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataType" /> が指定されませんでした。</exception>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String)">
      <summary>指定した名前、データ型、および式を使用して <see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="columnName">作成する列の名前を表す文字列。 <see langword="null" /> または空の文字列 ("") に設定した場合は、列コレクションに追加するときに既定の名前が指定されます。</param>
      <param name="dataType">サポートされる <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <param name="expr">この列の作成に使用される式。 詳細については、<see cref="P:System.Data.DataColumn.Expression" /> プロパティを参照してください。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataType" /> が指定されませんでした。</exception>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)">
      <summary>指定した名前、データ型、式、およびこの列が属性かどうかを決定する値を使用して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="columnName">作成する列の名前を表す文字列。 <see langword="null" /> または空の文字列 ("") に設定した場合は、列コレクションに追加するときに既定の名前が指定されます。</param>
      <param name="dataType">サポートされる <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <param name="expr">この列の作成に使用される式。 詳細については、<see cref="P:System.Data.DataColumn.Expression" /> プロパティを参照してください。</param>
      <param name="type">
        <see cref="T:System.Data.MappingType" /> 値のいずれか。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataType" /> が指定されませんでした。</exception>
    </member>
    <member name="P:System.Data.DataColumn.AllowDBNull">
      <summary>このテーブルに属する行のこの列に null 値を格納できるかどうかを示す値を取得または設定します。</summary>
      <returns>null 値が許可される場合は <see langword="true" />。それ以外の場合は、<see langword="false" />ます。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrement">
      <summary>このテーブルに追加される新しい行でこの列の値を自動的にインクリメントするかどうかを示す値を取得または設定します。</summary>
      <returns>この列の値を自動的にインクリメントする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
      <exception cref="T:System.ArgumentException">この列は計算列です。</exception>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrementSeed">
      <summary>
        <see cref="P:System.Data.DataColumn.AutoIncrement" /> プロパティが <see langword="true" /> に設定されている列の開始値を取得または設定します。 既定値は 0 です。</summary>
      <returns>
        <see cref="P:System.Data.DataColumn.AutoIncrement" /> 機能の開始値。</returns>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrementStep">
      <summary>
        <see cref="P:System.Data.DataColumn.AutoIncrement" /> プロパティが <see langword="true" /> に設定されている列で使用するインクリメント値を取得または設定します。</summary>
      <returns>列の値を自動的にインクリメントする数値。 既定値は 1 です。</returns>
      <exception cref="T:System.ArgumentException">値が 0 に設定されています。</exception>
    </member>
    <member name="P:System.Data.DataColumn.Caption">
      <summary>列のキャプションを取得または設定します。</summary>
      <returns>列のキャプション。 キャプションが設定されていない場合は、<see cref="P:System.Data.DataColumn.ColumnName" /> 値を返します。</returns>
    </member>
    <member name="M:System.Data.DataColumn.CheckNotAllowNull">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="M:System.Data.DataColumn.CheckUnique">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="P:System.Data.DataColumn.ColumnMapping">
      <summary>列の <see cref="T:System.Data.MappingType" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.MappingType" /> 値のいずれか。</returns>
    </member>
    <member name="P:System.Data.DataColumn.ColumnName">
      <summary>
        <see cref="T:System.Data.DataColumnCollection" /> 内の列名を取得または設定します。</summary>
      <returns>列の名前。</returns>
      <exception cref="T:System.ArgumentException">このプロパティは <see langword="null" /> または空の文字列に設定され、列がコレクションに属しています。</exception>
      <exception cref="T:System.Data.DuplicateNameException">同じ名前の列がコレクション内に既に存在します。 名前の比較では、大文字と小文字が区別されません。</exception>
    </member>
    <member name="P:System.Data.DataColumn.DataType">
      <summary>列に格納されているデータの型を取得または設定します。</summary>
      <returns>列のデータ型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException">この列には既にデータが格納されています。</exception>
    </member>
    <member name="P:System.Data.DataColumn.DateTimeMode">
      <summary>列の <see langword="DateTimeMode" /> を取得または設定します。</summary>
      <returns>指定した列の <see cref="T:System.Data.DataSetDateTime" />。</returns>
    </member>
    <member name="P:System.Data.DataColumn.DefaultValue">
      <summary>新しい行を作成するときに使用されるこの列の既定値を取得または設定します。</summary>
      <returns>この列の <see cref="P:System.Data.DataColumn.DataType" /> に適切な値。</returns>
      <exception cref="T:System.InvalidCastException">行を追加する場合、既定値はこの列のデータ型のインスタンスではありません。</exception>
    </member>
    <member name="P:System.Data.DataColumn.Expression">
      <summary>行のフィルター処理、列内の値の計算、または集約列の作成に使用する式を取得または設定します。</summary>
      <returns>集約列内の値の計算または集約列の作成に使用する式。 式の戻り型は列の <see cref="P:System.Data.DataColumn.DataType" /> によって決定されます。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Data.DataColumn.AutoIncrement" /> プロパティまたは <see cref="P:System.Data.DataColumn.Unique" /> プロパティが <see langword="true" /> に設定されます。</exception>
      <exception cref="T:System.FormatException">CONVERT 関数を使用すると式が文字列と評価されますが、その文字列には型パラメーターに変換できる形式は含まれていません。</exception>
      <exception cref="T:System.InvalidCastException">CONVERT 関数を使用する場合は、要求したキャストを実行できません。 実行できるキャストの詳細については、以降のセクションで変換関数に関するトピックを参照してください。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">SUBSTRING 関数を使用する場合は、開始引数が範囲外にあります。

または -

SUBSTRING 関数を使用する場合は、長さ引数が範囲外にあります。</exception>
      <exception cref="T:System.Exception">LEN 関数または TRIM 関数を使用する場合は、式が文字列と評価されません。 これには <see cref="T:System.Char" /> と評価される式も含まれます。</exception>
    </member>
    <member name="P:System.Data.DataColumn.ExtendedProperties">
      <summary>
        <see cref="T:System.Data.DataColumn" /> に関連付けられているカスタム ユーザー情報のコレクションを取得します。</summary>
      <returns>カスタム情報の <see cref="T:System.Data.PropertyCollection" />。</returns>
    </member>
    <member name="P:System.Data.DataColumn.MaxLength">
      <summary>テキスト列の最大長を取得または設定します。</summary>
      <returns>文字単位で表した列の最大長。 列の最大長が指定されていない場合、値は-1 (既定値) になります。</returns>
    </member>
    <member name="P:System.Data.DataColumn.Namespace">
      <summary>
        <see cref="T:System.Data.DataColumn" /> の名前空間を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> の名前空間。</returns>
      <exception cref="T:System.ArgumentException">この名前空間には既にデータが格納されています。</exception>
    </member>
    <member name="M:System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="pcevent">パラメーターの参照。</param>
    </member>
    <member name="P:System.Data.DataColumn.Ordinal">
      <summary>
        <see cref="T:System.Data.DataColumnCollection" /> コレクション内の 0 から始まる列の位置を取得します。</summary>
      <returns>列の位置。 列がコレクションのメンバーでない場合は、-1 を取得します。</returns>
    </member>
    <member name="P:System.Data.DataColumn.Prefix">
      <summary>
        <see cref="T:System.Data.DataTable" /> の名前空間に別名を付ける XML プリフィックスを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 名前空間の XML プリフィックス。</returns>
    </member>
    <member name="M:System.Data.DataColumn.RaisePropertyChanging(System.String)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="name">パラメーターの参照。</param>
    </member>
    <member name="P:System.Data.DataColumn.ReadOnly">
      <summary>行がテーブルに追加された直後にこの列を変更できるかどうかを示す値を取得または設定します。</summary>
      <returns>列が読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
      <exception cref="T:System.ArgumentException">このプロパティは計算列に対して <see langword="false" /> に設定されます。</exception>
    </member>
    <member name="M:System.Data.DataColumn.SetOrdinal(System.Int32)">
      <summary>
        <see cref="T:System.Data.DataColumn" /> の序数または位置を、指定された序数または位置に変更します。</summary>
      <param name="ordinal">指定する序数。</param>
    </member>
    <member name="P:System.Data.DataColumn.Table">
      <summary>列が属する <see cref="T:System.Data.DataTable" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> が属する <see cref="T:System.Data.DataColumn" />。</returns>
    </member>
    <member name="M:System.Data.DataColumn.ToString">
      <summary>列の <see cref="P:System.Data.DataColumn.Expression" /> がある場合は、その式を取得します。</summary>
      <returns>
        <see cref="P:System.Data.DataColumn.Expression" /> プロパティが設定されている場合はその値。それ以外の場合は <see cref="P:System.Data.DataColumn.ColumnName" /> プロパティ。</returns>
    </member>
    <member name="P:System.Data.DataColumn.Unique">
      <summary>列の各行の値が一意である必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>値が一意である必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
      <exception cref="T:System.ArgumentException">この列は計算列です。</exception>
    </member>
    <member name="T:System.Data.DataColumnChangeEventArgs">
      <summary>
        <see cref="E:System.Data.DataTable.ColumnChanging" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.Data.DataColumnChangeEventArgs.#ctor(System.Data.DataRow,System.Data.DataColumn,System.Object)">
      <summary>
        <see cref="T:System.Data.DataColumnChangeEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="row">値が変化する列の <see cref="T:System.Data.DataRow" />。</param>
      <param name="column">値が変化する <see cref="T:System.Data.DataColumn" />。</param>
      <param name="value">新しい値。</param>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.Column">
      <summary>値が変化する <see cref="T:System.Data.DataColumn" /> を取得します。</summary>
      <returns>値が変化する <see cref="T:System.Data.DataColumn" />。</returns>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.ProposedValue">
      <summary>列の提示された新しい値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Object" /> 型の提示された値。</returns>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.Row">
      <summary>値が変化する列の <see cref="T:System.Data.DataRow" /> を取得します。</summary>
      <returns>値が変化する列の <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="T:System.Data.DataColumnChangeEventHandler">
      <summary>
        <see cref="E:System.Data.DataTable.ColumnChanging" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.Data.DataColumnChangeEventArgs" />。</param>
    </member>
    <member name="T:System.Data.DataColumnCollection">
      <summary>
        <see cref="T:System.Data.DataColumn" /> の <see cref="T:System.Data.DataTable" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add">
      <summary>
        <see cref="T:System.Data.DataColumn" /> オブジェクトを作成し、このオブジェクトを <see cref="T:System.Data.DataColumnCollection" /> に追加します。</summary>
      <returns>新しく作成された <see cref="T:System.Data.DataColumn" />。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)">
      <summary>指定した <see cref="T:System.Data.DataColumn" /> オブジェクトを作成し、このオブジェクトを <see cref="T:System.Data.DataColumnCollection" /> に追加します。</summary>
      <param name="column">追加する <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">この列は既にこのコレクションまたは他のコレクションに属しています。</exception>
      <exception cref="T:System.Data.DuplicateNameException">コレクションには、既に指定した名前の列があります。 (比較では、大文字と小文字を区別しません。)</exception>
      <exception cref="T:System.Data.InvalidExpressionException">式が無効です。 式の作成方法の詳細については、<see cref="P:System.Data.DataColumn.Expression" /> プロパティのトピックを参照してください。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String)">
      <summary>指定した名前で <see cref="T:System.Data.DataColumn" /> オブジェクトを作成し、このオブジェクトを <see cref="T:System.Data.DataColumnCollection" /> に追加します。</summary>
      <param name="columnName">列の名前。</param>
      <returns>新しく作成された <see cref="T:System.Data.DataColumn" />。</returns>
      <exception cref="T:System.Data.DuplicateNameException">コレクションには、既に指定した名前の列があります。 (比較では、大文字と小文字を区別しません。)</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String,System.Type)">
      <summary>指定した名前と型で <see cref="T:System.Data.DataColumn" /> オブジェクトを作成し、このオブジェクトを <see cref="T:System.Data.DataColumnCollection" /> に追加します。</summary>
      <param name="columnName">列の作成時に使用する <see cref="P:System.Data.DataColumn.ColumnName" />。</param>
      <param name="type">新しい列の <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <returns>新しく作成された <see cref="T:System.Data.DataColumn" />。</returns>
      <exception cref="T:System.Data.DuplicateNameException">コレクションには、既に指定した名前の列があります。 (比較では、大文字と小文字を区別しません。)</exception>
      <exception cref="T:System.Data.InvalidExpressionException">式が無効です。 式の作成方法の詳細については、<see cref="P:System.Data.DataColumn.Expression" /> プロパティのトピックを参照してください。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String,System.Type,System.String)">
      <summary>指定した名前、型、および式で <see cref="T:System.Data.DataColumn" /> オブジェクトを作成し、このオブジェクトを <see cref="T:System.Data.DataColumnCollection" /> に追加します。</summary>
      <param name="columnName">列の作成時に使用する名前。</param>
      <param name="type">新しい列の <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <param name="expression">
        <see cref="P:System.Data.DataColumn.Expression" /> プロパティに割り当てる式。</param>
      <returns>新しく作成された <see cref="T:System.Data.DataColumn" />。</returns>
      <exception cref="T:System.Data.DuplicateNameException">コレクションには、既に指定した名前の列があります。 (比較では、大文字と小文字を区別しません。)</exception>
      <exception cref="T:System.Data.InvalidExpressionException">式が無効です。 式の作成方法の詳細については、<see cref="P:System.Data.DataColumn.Expression" /> プロパティのトピックを参照してください。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.AddRange(System.Data.DataColumn[])">
      <summary>指定した <see cref="T:System.Data.DataColumn" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="columns">コレクションに追加する <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Data.DataColumnCollection.CanRemove(System.Data.DataColumn)">
      <summary>特定の列をコレクションから削除できるかどうかを確認します。</summary>
      <param name="column">コレクション内の <see cref="T:System.Data.DataColumn" />。</param>
      <returns>列を削除できる場合は <see langword="true" /> です。 の場合 <see langword="false" /><paramref name="column" /> パラメーターが <see langword="null" /> です。

この列はこのコレクションに属していません。

この列はリレーションシップの一部です。

他の列の式がこの列に依存します。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">この列はこのコレクションに属していません。

または -

この列はリレーションシップの一部です。

または -

他の列の式がこの列に依存します。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Clear">
      <summary>列のコレクションを消去します。</summary>
    </member>
    <member name="E:System.Data.DataColumnCollection.CollectionChanged">
      <summary>列の追加または削除によって列コレクションが変更されたときに発生します。</summary>
    </member>
    <member name="M:System.Data.DataColumnCollection.Contains(System.String)">
      <summary>指定した名前の列がコレクション内に存在するかどうかを確認します。</summary>
      <param name="name">検索する列の <see cref="P:System.Data.DataColumn.ColumnName" />。</param>
      <returns>この名前の列が存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.CopyTo(System.Data.DataColumn[],System.Int32)">
      <summary>コレクション全体を既存の配列内の指定したインデックス位置にコピーします。</summary>
      <param name="array">コレクションのコピー先の <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</param>
      <param name="index">コピーの開始位置を示すインデックス。</param>
    </member>
    <member name="M:System.Data.DataColumnCollection.IndexOf(System.Data.DataColumn)">
      <summary>名前で指定した列のインデックスを取得します。</summary>
      <param name="column">返される列の名前。</param>
      <returns>
        <paramref name="column" /> で指定した列が存在する場合はその列のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.IndexOf(System.String)">
      <summary>特定の名前の列のインデックスを取得します。名前の大文字と小文字は区別されません。</summary>
      <param name="columnName">検索する列の名前。</param>
      <returns>指定した名前の列の 0 から始まるインデックス番号。この列がコレクション内にない場合は -1。</returns>
    </member>
    <member name="P:System.Data.DataColumnCollection.Item(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.Data.DataColumn" /> をコレクションから取得します。</summary>
      <param name="index">返される列の 0 から始まるインデックス。</param>
      <returns>指定されたインデックス位置にある <see cref="T:System.Data.DataColumn" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">インデックス値が、コレクション内の項目数を超える値です。</exception>
    </member>
    <member name="P:System.Data.DataColumnCollection.Item(System.String)">
      <summary>指定した名前の <see cref="T:System.Data.DataColumn" /> をコレクションから取得します。</summary>
      <param name="name">返される列の <see cref="P:System.Data.DataColumn.ColumnName" />。</param>
      <returns>コレクション内の指定した <see cref="T:System.Data.DataColumn" /> の <see cref="P:System.Data.DataColumn.ColumnName" />。<see cref="T:System.Data.DataColumn" /> が存在しない場合は null 値。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Remove(System.Data.DataColumn)">
      <summary>指定した <see cref="T:System.Data.DataColumn" /> オブジェクトをコレクションから削除します。</summary>
      <param name="column">削除する <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">この列はこのコレクションに属していません。

または -

この列はリレーションシップの一部です。

または -

他の列の式がこの列に依存します。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Remove(System.String)">
      <summary>指定した名前の <see cref="T:System.Data.DataColumn" /> オブジェクトをコレクションから削除します。</summary>
      <param name="name">削除する列の名前。</param>
      <exception cref="T:System.ArgumentException">このコレクションには指定した名前の列がありません。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.RemoveAt(System.Int32)">
      <summary>指定したインデックス位置にある列をコレクションから削除します。</summary>
      <param name="index">削除する列のインデックス。</param>
      <exception cref="T:System.ArgumentException">このコレクションには指定したインデックス位置に列がありません。</exception>
    </member>
    <member name="T:System.Data.DataException">
      <summary>ADO.NET コンポーネントを使用してエラーが生成されたときにスローされる例外を表します。</summary>
    </member>
    <member name="M:System.Data.DataException.#ctor">
      <summary>
        <see cref="T:System.Data.DataException" /> クラスの新しいインスタンスを初期化します。 これはパラメーターなしのコンストラクターです。</summary>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定したシリアル化情報とコンテキストを使用して、<see cref="T:System.Data.DataException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">指定したシリアル化ストリームの転送元と転送先の説明。</param>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.String)">
      <summary>文字列を指定して、<see cref="T:System.Data.DataException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.String,System.Exception)">
      <summary>指定した文字列と内部例外を使用して、<see cref="T:System.Data.DataException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">例外がスローされたときに表示する文字列。</param>
      <param name="innerException">内部例外への参照。</param>
    </member>
    <member name="T:System.Data.DataReaderExtensions">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" /> の拡張メソッドを提供します。</summary>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetBoolean(System.Data.Common.DbDataReader,System.String)">
      <summary>指定された列の値を Boolean として取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetByte(System.Data.Common.DbDataReader,System.String)">
      <summary>指定された列の値をバイトとして取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetBytes(System.Data.Common.DbDataReader,System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>指定したインデックスを開始位置として、指定した列から指定したバイト数を読み取り、バッファー内の指定した位置の開始位置としてバッファーに書き込みます。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <param name="dataOffset">読み取り操作を開始する位置を示す行内のインデックス。</param>
      <param name="buffer">データのコピー先のバッファー。</param>
      <param name="bufferOffset">データのコピー先のバッファーのインデックス。</param>
      <param name="length">読み取り対象の最大文字数。</param>
      <returns>実際に読み取られたバイト数。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetChar(System.Data.Common.DbDataReader,System.String)">
      <summary>指定された列の値を単一の文字として取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetChars(System.Data.Common.DbDataReader,System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>指定したインデックスを開始位置として、指定した列から指定した文字数を読み取り、バッファー内の指定した位置の開始位置としてバッファーに書き込みます。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <param name="dataOffset">読み取り操作を開始する位置を示す行内のインデックス。</param>
      <param name="buffer">データのコピー先のバッファー。</param>
      <param name="bufferOffset">データのコピー先のバッファーのインデックス。</param>
      <param name="length">読み取り対象の最大文字数。</param>
      <returns>実際に読み取られた文字数。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetData(System.Data.Common.DbDataReader,System.String)">
      <summary>要求された列に対して、入れ子になったデータ リーダーを返します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>データ リーダー。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetDataTypeName(System.Data.Common.DbDataReader,System.String)">
      <summary>指定された列のデータ型の名前を取得します。</summary>
      <param name="reader">列の型名の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>データ型の名前。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetDateTime(System.Data.Common.DbDataReader,System.String)">
      <summary>指定された列の値を <see cref="T:System.DateTime" /> オブジェクトとして取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetDecimal(System.Data.Common.DbDataReader,System.String)">
      <summary>指定した列の値を <see cref="T:System.Decimal" /> として取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetDouble(System.Data.Common.DbDataReader,System.String)">
      <summary>指定された列の値を倍精度浮動小数点値として取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetFieldType(System.Data.Common.DbDataReader,System.String)">
      <summary>指定された列のデータ型を取得します。</summary>
      <param name="reader">フィールドの型の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>指定された列のデータ型。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetFieldValue``1(System.Data.Common.DbDataReader,System.String)">
      <summary>要求された型として指定した列の値を取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <typeparam name="T">返される値の型。</typeparam>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.InvalidOperationException">データの取得中、接続が切断されたか、閉じられました。

または -
データの取得中、データ リーダーが閉じられました。

または
読み取ることのできるデータはありません (たとえば、最初の <see cref="M:System.Data.Common.DbDataReader.Read" /> は呼び出されなかったか、<see langword="false" /> を返しました)。

または -

リーダーでは、以前に読み取られた列のシーケンシャル モードでの読み取りが試行されました。
または
非同期操作が進行中でした。 シーケンシャル モードで実行中、これはすべての Get* メソッドに適用されます。ストリームの読み取り中に呼び出すことができるためです。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">データベースによって返された値が一致しないか、<typeparamref name="T" /> にキャストできません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetFieldValueAsync``1(System.Data.Common.DbDataReader,System.String,System.Threading.CancellationToken)">
      <summary>要求された型として指定された列の値を非同期で取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <param name="cancellationToken">非同期操作を取り消すオプションのトークン。</param>
      <typeparam name="T">返される値の型。</typeparam>
      <returns>指定された列の値を <see cref="P:System.Threading.Tasks.Task`1.Result" /> に格納しているタスク。</returns>
      <exception cref="T:System.InvalidOperationException">データの取得中、接続が切断されたか、閉じられました。

または -

データの取得中、データ リーダーが閉じられました。

または -

読み取ることのできるデータはありません (たとえば、最初の <see cref="M:System.Data.Common.DbDataReader.Read" /> は呼び出されなかったか、<see langword="false" /> を返しました)。

または -

以前に読み取られた列をシーケンシャル モードで読み取ろうとしました。
または
非同期操作が進行中でした。 シーケンシャル モードで実行中、これはすべての Get_*_ メソッドに適用されます。ストリームの読み取り中に呼び出すことができるためです。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">データベースによって返された値が一致しないか、<typeparamref name="T" /> にキャストできません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetFloat(System.Data.Common.DbDataReader,System.String)">
      <summary>指定された列の値を単精度浮動小数点値として取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetGuid(System.Data.Common.DbDataReader,System.String)">
      <summary>指定した列の値をグローバル一意識別子 (GUID) として取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetInt16(System.Data.Common.DbDataReader,System.String)">
      <summary>指定した列の値を 16 ビット符号付き整数として取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetInt32(System.Data.Common.DbDataReader,System.String)">
      <summary>指定された列の値を 32 ビット符号付き整数として取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetInt64(System.Data.Common.DbDataReader,System.String)">
      <summary>指定された列の値を 64 ビット符号付き整数として取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetProviderSpecificFieldType(System.Data.Common.DbDataReader,System.String)">
      <summary>指定された列のプロバイダー固有の型を取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>プロバイダー固有の .NET 型。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetProviderSpecificValue(System.Data.Common.DbDataReader,System.String)">
      <summary>指定された列の値をプロバイダー固有の型のインスタンスとして取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetStream(System.Data.Common.DbDataReader,System.String)">
      <summary>指定された列からデータを取得する目的でストリームを取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>ストリーム。</returns>
      <exception cref="T:System.InvalidOperationException">データの取得中、接続が切断されたか、閉じられました。
または
データの取得中、データ リーダーが閉じられます。
または
読み取ることのできるデータはありません (たとえば、最初の <see cref="M:System.Data.Common.DbDataReader.Read" /> は呼び出されなかったか、false を返しました)。
または
データ リーダーでは、以前に読み取られた列のシーケンシャル モードでの読み取りが試行されました。

または -

非同期操作が進行中でした。 シーケンシャル モードで実行中、これはすべての Get* メソッドに適用されます。ストリームの読み取り中に呼び出すことができるためです。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">指定の列は、<see cref="T:System.IO.Stream" /> で読み込めるバイナリ型ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetString(System.Data.Common.DbDataReader,System.String)">
      <summary>指定された列の値を <see cref="T:System.String" /> のインスタンスとして取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">指定したキャストが有効ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetTextReader(System.Data.Common.DbDataReader,System.String)">
      <summary>列からデータを取得する目的でテキスト リーダーを取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>テキスト リーダー。</returns>
      <exception cref="T:System.InvalidOperationException">データの取得中、接続が切断されたか、閉じられました。

または -

データの取得中、データ リーダーが閉じられます。

または -

読み取ることのできるデータはありません (たとえば、最初の <see cref="M:System.Data.Common.DbDataReader.Read" /> は呼び出されなかったか、false を返しました)。

または -

データ リーダーでは、以前に読み取られた列のシーケンシャル モードでの読み取りが試行されました。

または -

非同期操作が進行中でした。 シーケンシャル モードで実行中、これはすべての Get* メソッドに適用されます。ストリームの読み取り中に呼び出すことができるためです。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.InvalidCastException">指定の列は、<see cref="T:System.IO.TextReader" /> で読み込めるテキスト型ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetValue(System.Data.Common.DbDataReader,System.String)">
      <summary>指定された列の値を <see cref="T:System.Object" /> のインスタンスとして取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.IsDBNull(System.Data.Common.DbDataReader,System.String)">
      <summary>存在しない値や欠落値が列に含まれているかどうかを示す値を取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <returns>指定した列が <see cref="T:System.DBNull" /> と等価の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
    </member>
    <member name="M:System.Data.DataReaderExtensions.IsDBNullAsync(System.Data.Common.DbDataReader,System.String,System.Threading.CancellationToken)">
      <summary>列に格納されている値が存在しない値または欠損値かどうかを示す値を非同期で取得します。</summary>
      <param name="reader">列値の取得元となるデータ リーダー。</param>
      <param name="name">列の名前。</param>
      <param name="cancellationToken">非同期操作を取り消すオプションのトークン。</param>
      <returns>指定された列値が <see langword="DBNull" /> に等しい場合は、<see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが <see langword="true" /> になり、等しくない場合は <see langword="false" /> になる <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.InvalidOperationException">データの取得中、接続が切断されたか、閉じられました。
または
データの取得中、データ リーダーが閉じられます。
または
読み取ることのできるデータはありません (たとえば、最初の <see cref="M:System.Data.Common.DbDataReader.Read" /> は呼び出されなかったか、false を返しました)。

または -

以前に読み取られた列をシーケンシャル モードで読み取ろうとしています。

または -
非同期操作が進行中でした。 シーケンシャル モードで実行中、これはすべての Get* メソッドに適用されます。ストリームの読み取り中に呼び出すことができるためです。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
    </member>
    <member name="T:System.Data.DataRelation">
      <summary>2 つの <see cref="T:System.Data.DataTable" /> オブジェクト間の親子のリレーションシップを表します。</summary>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>
        <see cref="T:System.Data.DataRelation" /> 名、および親と子の <see cref="T:System.Data.DataRelation" /> オブジェクトを指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> の名前。 <see langword="null" /> または空の文字列 ("") の場合は、作成したオブジェクトを <see cref="T:System.Data.DataRelationCollection" /> に追加するときに既定の名前が使用されます。</param>
      <param name="parentColumn">このリレーションシップの親 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="childColumn">このリレーションシップの子 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataColumn" /> オブジェクトの一方または両方が <see langword="null" /> を格納しています。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列のデータ型が異なります。

または -
テーブルが同じ <see cref="T:System.Data.DataSet" /> に属していません。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)">
      <summary>名前、親と子の <see cref="T:System.Data.DataRelation" /> オブジェクト、および制約を作成するかどうかを示す値を指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="relationName">リレーションシップの名前。 <see langword="null" /> または空の文字列 ("") の場合は、作成したオブジェクトを <see cref="T:System.Data.DataRelationCollection" /> に追加するときに既定の名前が使用されます。</param>
      <param name="parentColumn">このリレーションシップの親 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="childColumn">このリレーションシップの子 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="createConstraints">制約を作成するかどうかを示す値。 制約を作成する場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataColumn" /> オブジェクトの一方または両方が <see langword="null" /> を格納しています。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列のデータ型が異なります。

または -
テーブルが同じ <see cref="T:System.Data.DataSet" /> に属していません。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>
        <see cref="T:System.Data.DataRelation" /> 名、および親と子で一致した <see cref="T:System.Data.DataRelation" /> オブジェクトの配列を指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="relationName">リレーションシップの名前。 <see langword="null" /> または空の文字列 ("") の場合は、作成したオブジェクトを <see cref="T:System.Data.DataRelationCollection" /> に追加するときに既定の名前が使用されます。</param>
      <param name="parentColumns">親 <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</param>
      <param name="childColumns">子 <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataColumn" /> オブジェクトの一方または両方が <see langword="null" /> を格納しています。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">
        <see cref="T:System.Data.DataColumn" /> オブジェクトのデータ型が異なります。

または -
配列の一方または両方が、同じテーブルの異なる列で構成されていません。

または -
テーブルが同じ <see cref="T:System.Data.DataSet" /> に属していません。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)">
      <summary>名前、親と子で一致した <see cref="T:System.Data.DataRelation" /> オブジェクトの配列、および制約を作成するかどうかを示す値を指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="relationName">リレーションシップの名前。 <see langword="null" /> または空の文字列 ("") の場合は、作成したオブジェクトを <see cref="T:System.Data.DataRelationCollection" /> に追加するときに既定の名前が使用されます。</param>
      <param name="parentColumns">親 <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</param>
      <param name="childColumns">子 <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</param>
      <param name="createConstraints">制約を作成するかどうかを示す値。 制約を作成する場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataColumn" /> オブジェクトの一方または両方が <see langword="null" /> です。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列のデータ型が異なります。

または -
テーブルが同じ <see cref="T:System.Data.DataSet" /> に属していません。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean)">
      <summary>このコンストラクターは、Visual Studio 環境でのデザイン時のサポートのために用意されています。</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> の名前。 <see langword="null" /> または空の文字列 ("") の場合は、作成したオブジェクトを <see cref="T:System.Data.DataRelationCollection" /> に追加するときに既定の名前が使用されます。</param>
      <param name="parentTableName">このリレーションシップの親テーブルである <see cref="T:System.Data.DataTable" /> の名前。</param>
      <param name="parentTableNamespace">親テーブルの名前空間の名前。</param>
      <param name="childTableName">このリレーションシップの子テーブルである <see cref="T:System.Data.DataTable" /> の名前。</param>
      <param name="childTableNamespace">子テーブルの名前空間の名前。</param>
      <param name="parentColumnNames">このリレーションシップの親 <see cref="T:System.Data.DataColumn" /> 内の <see cref="T:System.Data.DataTable" /> オブジェクト名の配列。</param>
      <param name="childColumnNames">このリレーションシップの子 <see cref="T:System.Data.DataColumn" /> 内の <see cref="T:System.Data.DataTable" /> オブジェクト名の配列。</param>
      <param name="nested">リレーションシップを入れ子にするかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Boolean)">
      <summary>このコンストラクターは、Visual Studio 環境でのデザイン時のサポートのために用意されています。</summary>
      <param name="relationName">リレーションシップの名前。 <see langword="null" /> または空の文字列 ("") の場合は、作成したオブジェクトを <see cref="T:System.Data.DataRelationCollection" /> に追加するときに既定の名前が使用されます。</param>
      <param name="parentTableName">このリレーションシップの親テーブルである <see cref="T:System.Data.DataTable" /> の名前。</param>
      <param name="childTableName">このリレーションシップの子テーブルである <see cref="T:System.Data.DataTable" /> の名前。</param>
      <param name="parentColumnNames">このリレーションシップの親 <see cref="T:System.Data.DataColumn" /> 内の <see cref="T:System.Data.DataTable" /> オブジェクト名の配列。</param>
      <param name="childColumnNames">このリレーションシップの子 <see cref="T:System.Data.DataColumn" /> 内の <see cref="T:System.Data.DataTable" /> オブジェクト名の配列。</param>
      <param name="nested">リレーションシップを入れ子にするかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.DataRelation.CheckStateForProperty">
      <summary>このメソッドは、.NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <exception cref="T:System.Data.DataException">親テーブルと子テーブルが異なる <see cref="T:System.Data.DataSet" /> オブジェクトに属しています。

または -
1 つ以上のペアの親と子の <see cref="T:System.Data.DataColumn" /> オブジェクトのデータ型が一致していません。

または -
親と子の <see cref="T:System.Data.DataColumn" /> オブジェクトが同一です。</exception>
    </member>
    <member name="P:System.Data.DataRelation.ChildColumns">
      <summary>このリレーションシップの子 <see cref="T:System.Data.DataColumn" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ChildKeyConstraint">
      <summary>このリレーションシップの <see cref="T:System.Data.ForeignKeyConstraint" /> を取得します。</summary>
      <returns>
        <see langword="ForeignKeyConstraint" />。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ChildTable">
      <summary>このリレーションシップの子テーブルを取得します。</summary>
      <returns>このリレーションシップの子テーブルである <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.DataRelation.DataSet">
      <summary>
        <see cref="T:System.Data.DataSet" /> が属する <see cref="T:System.Data.DataRelation" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> が属する <see cref="T:System.Data.DataRelation" />。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ExtendedProperties">
      <summary>カスタマイズしたプロパティを格納するコレクションを取得します。</summary>
      <returns>カスタマイズしたプロパティを格納している <see cref="T:System.Data.PropertyCollection" />。</returns>
    </member>
    <member name="P:System.Data.DataRelation.Nested">
      <summary>
        <see cref="T:System.Data.DataRelation" /> オブジェクトが入れ子になっているかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataRelation" /> オブジェクトが入れ子になっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRelation.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="pcevent">パラメーターの参照。</param>
    </member>
    <member name="P:System.Data.DataRelation.ParentColumns">
      <summary>この <see cref="T:System.Data.DataColumn" /> の親列である <see cref="T:System.Data.DataRelation" /> オブジェクトの配列を取得します。</summary>
      <returns>この <see cref="T:System.Data.DataColumn" /> の親列である <see cref="T:System.Data.DataRelation" /> オブジェクトの配列。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ParentKeyConstraint">
      <summary>
        <see cref="T:System.Data.UniqueConstraint" /> の親列内の値が一意であることを保証する <see cref="T:System.Data.DataRelation" /> を取得します。</summary>
      <returns>親列内の値が一意になるようにする <see cref="T:System.Data.UniqueConstraint" />。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ParentTable">
      <summary>この <see cref="T:System.Data.DataTable" /> の親 <see cref="T:System.Data.DataRelation" /> を取得します。</summary>
      <returns>このリレーションシップの親テーブルである <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataRelation.RaisePropertyChanging(System.String)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="name">パラメーターの参照。</param>
    </member>
    <member name="P:System.Data.DataRelation.RelationName">
      <summary>
        <see cref="T:System.Data.DataRelation" /> から <see cref="T:System.Data.DataRelationCollection" /> を取得する名前を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataRelation" /> の名前。</returns>
      <exception cref="T:System.ArgumentException">
        <see langword="null" /> または空の文字列 ("") が、<see cref="T:System.Data.DataColumn" /> である <see cref="T:System.Data.DataRelation" /> に渡されました。</exception>
      <exception cref="T:System.Data.DuplicateNameException">
        <see cref="T:System.Data.DataRelation" /> は、同じ名前の <see cref="T:System.Data.DataRelation" /> が既に含まれるコレクションに属しています。</exception>
    </member>
    <member name="M:System.Data.DataRelation.ToString">
      <summary>
        <see cref="P:System.Data.DataRelation.RelationName" /> が存在する場合は、このリレーションシップの名前を取得します。</summary>
      <returns>
        <see cref="P:System.Data.DataRelation.RelationName" /> プロパティの値。</returns>
    </member>
    <member name="T:System.Data.DataRelationCollection">
      <summary>この <see cref="T:System.Data.DataRelation" /> の <see cref="T:System.Data.DataSet" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.#ctor">
      <summary>
        <see cref="T:System.Data.DataRelationCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataColumn,System.Data.DataColumn)">
      <summary>指定した親列と子列を使用して <see cref="T:System.Data.DataRelation" /> を作成し、コレクションに追加します。</summary>
      <param name="parentColumn">リレーションシップの親列。</param>
      <param name="childColumn">リレーションシップの子列。</param>
      <returns>作成されたリレーションシップ。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>指定した親列と子列を使用して <see cref="T:System.Data.DataRelation" /> を作成し、コレクションに追加します。</summary>
      <param name="parentColumns">リレーションシップの親列。</param>
      <param name="childColumns">リレーションシップの子列。</param>
      <returns>作成されたリレーションシップ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 引数が null 値です。</exception>
      <exception cref="T:System.ArgumentException">リレーションシップは、既にこのコレクションに属しているか、他のコレクションに属しています。</exception>
      <exception cref="T:System.Data.DuplicateNameException">コレクションには、既に同じ名前のリレーションシップが含まれています。 比較では、大文字と小文字が区別されません。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">リレーションシップの作成後に、そのリレーションシップが無効な状態になりました。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataRelation)">
      <summary>
        <see cref="T:System.Data.DataRelation" /> を <see cref="T:System.Data.DataRelationCollection" /> に追加します。</summary>
      <param name="relation">コレクションに追加する <see langword="DataRelation" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> パラメーターが null 値です。</exception>
      <exception cref="T:System.ArgumentException">リレーションシップは、既にこのコレクションに属しているか、他のコレクションに属しています。</exception>
      <exception cref="T:System.Data.DuplicateNameException">このコレクションには指定した名前のリレーションシップが既に含まれています。 比較では、大文字と小文字が区別されません。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">リレーションシップの作成後に、そのリレーションシップが無効な状態になりました。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>指定した名前、および親列と子列を使用して <see cref="T:System.Data.DataRelation" /> を作成し、コレクションに追加します。</summary>
      <param name="name">リレーションシップの名前。</param>
      <param name="parentColumn">リレーションシップの親列。</param>
      <param name="childColumn">リレーションシップの子列。</param>
      <returns>作成されたリレーションシップ。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)">
      <summary>指定した名前、親列と子列、および <paramref name="createConstraints" /> パラメーターの値に応じた制約 (オプション) を使用して <see cref="T:System.Data.DataRelation" /> を作成し、コレクションに追加します。</summary>
      <param name="name">リレーションシップの名前。</param>
      <param name="parentColumn">リレーションシップの親列。</param>
      <param name="childColumn">リレーションシップの子列。</param>
      <param name="createConstraints">制約を作成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</param>
      <returns>作成されたリレーションシップ。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>指定した名前および親列と子列の配列を使用して <see cref="T:System.Data.DataRelation" /> を作成し、このリレーションシップをコレクションに追加します。</summary>
      <param name="name">作成する <see langword="DataRelation" /> の名前。</param>
      <param name="parentColumns">親 <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</param>
      <param name="childColumns">子 <see langword="DataColumn" /> オブジェクトの配列。</param>
      <returns>作成された <see langword="DataRelation" />。</returns>
      <exception cref="T:System.ArgumentNullException">リレーションシップ名が null 値です。</exception>
      <exception cref="T:System.ArgumentException">リレーションシップは、既にこのコレクションに属しているか、他のコレクションに属しています。</exception>
      <exception cref="T:System.Data.DuplicateNameException">コレクションには、既に同じ名前のリレーションシップが含まれています。 比較では、大文字と小文字が区別されません。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">リレーションシップの作成後に、そのリレーションシップが無効な状態になりました。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)">
      <summary>指定した名前、親列と子列の配列、および制約を作成するかどうかを示す値を使用して <see cref="T:System.Data.DataRelation" /> を作成し、このリレーションシップをコレクションに追加します。</summary>
      <param name="name">作成する <see langword="DataRelation" /> の名前。</param>
      <param name="parentColumns">親 <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</param>
      <param name="childColumns">子 <see langword="DataColumn" /> オブジェクトの配列。</param>
      <param name="createConstraints">制約を作成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>作成されたリレーションシップ。</returns>
      <exception cref="T:System.ArgumentNullException">リレーションシップ名が null 値です。</exception>
      <exception cref="T:System.ArgumentException">リレーションシップは、既にこのコレクションに属しているか、他のコレクションに属しています。</exception>
      <exception cref="T:System.Data.DuplicateNameException">コレクションには、既に同じ名前のリレーションシップが含まれています。 比較では、大文字と小文字が区別されません。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">リレーションシップの作成後に、そのリレーションシップが無効な状態になりました。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.AddCore(System.Data.DataRelation)">
      <summary>テーブルに対して検証を実行します。</summary>
      <param name="relation">確認するリレーションシップ。</param>
      <exception cref="T:System.ArgumentNullException">リレーションシップが null です。</exception>
      <exception cref="T:System.ArgumentException">リレーションシップは、既にこのコレクションに属しているか、他のコレクションに属しています。</exception>
      <exception cref="T:System.Data.DuplicateNameException">コレクションには、既に同じ名前のリレーションシップが含まれています。 比較では、大文字と小文字が区別されません。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.AddRange(System.Data.DataRelation[])">
      <summary>指定した <see cref="T:System.Data.DataRelation" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="relations">コレクションに追加する <see cref="T:System.Data.DataRelation" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.CanRemove(System.Data.DataRelation)">
      <summary>指定した <see cref="T:System.Data.DataRelation" /> をコレクションから削除できるかどうかを検証します。</summary>
      <param name="relation">検証対象のリレーションシップ。</param>
      <returns>
        <see cref="T:System.Data.DataRelation" /> を削除できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Clear">
      <summary>リレーションシップのコレクションを消去します。</summary>
    </member>
    <member name="E:System.Data.DataRelationCollection.CollectionChanged">
      <summary>コレクションが変更されたときに発生します。</summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.Contains(System.String)">
      <summary>特定の名前 (大文字と小文字を区別しない) の <see cref="T:System.Data.DataRelation" /> がコレクション内に存在するかどうかを検証します。</summary>
      <param name="name">検索対象のリレーションシップの名前。</param>
      <returns>指定した名前のリレーションシップが存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.CopyTo(System.Data.DataRelation[],System.Int32)">
      <summary>指定したインデックスを開始位置として、<see cref="T:System.Data.DataRelation" /> オブジェクトのコレクションをコピーします。</summary>
      <param name="array">コレクションのコピー先の <see cref="T:System.Data.DataRelation" /> オブジェクトの配列。</param>
      <param name="index">コピーの開始位置を示すインデックス。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.GetDataSet">
      <summary>このメソッドは、.NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>参照されたデータセット。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.IndexOf(System.Data.DataRelation)">
      <summary>指定した <see cref="T:System.Data.DataRelation" /> オブジェクトのインデックスを取得します。</summary>
      <param name="relation">検索するリレーションシップ。</param>
      <returns>このリレーションシップの 0 から始まるインデックス番号。リレーションシップがコレクション内に存在しない場合は -1。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.IndexOf(System.String)">
      <summary>名前で指定した <see cref="T:System.Data.DataRelation" /> のインデックスを取得します。</summary>
      <param name="relationName">検索対象のリレーションシップの名前。</param>
      <returns>指定した名前のリレーションシップの 0 から始まるインデックス番号。このリレーションシップがコレクション内に存在しない場合は -1。</returns>
    </member>
    <member name="P:System.Data.DataRelationCollection.Item(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.Data.DataRelation" /> オブジェクトを取得します。</summary>
      <param name="index">検索する 0 から始まるインデックス。</param>
      <returns>
        <see cref="T:System.Data.DataRelation" />。指定した <see cref="T:System.Data.DataRelation" /> が存在しない場合は null 値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">インデックス値が、コレクション内の項目数を超える値です。</exception>
    </member>
    <member name="P:System.Data.DataRelationCollection.Item(System.String)">
      <summary>名前で指定した <see cref="T:System.Data.DataRelation" /> オブジェクトを取得します。</summary>
      <param name="name">検索対象のリレーションシップの名前。</param>
      <returns>指定した <see cref="T:System.Data.DataRelation" />。指定した <see cref="T:System.Data.DataRelation" /> が存在しない場合は null 値。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> イベントを発生させます。</summary>
      <param name="ccevent">イベント データを格納している <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.OnCollectionChanging(System.ComponentModel.CollectionChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> イベントを発生させます。</summary>
      <param name="ccevent">イベント データを格納している <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.Remove(System.Data.DataRelation)">
      <summary>指定したリレーションシップをコレクションから削除します。</summary>
      <param name="relation">削除するリレーションシップ。</param>
      <exception cref="T:System.ArgumentNullException">リレーションシップが null 値です。</exception>
      <exception cref="T:System.ArgumentException">このリレーションシップはこのコレクションに属していません。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Remove(System.String)">
      <summary>指定した名前のリレーションシップをコレクションから削除します。</summary>
      <param name="name">削除するリレーションシップの名前。</param>
      <exception cref="T:System.IndexOutOfRangeException">このコレクションには指定した名前のリレーションシップがありません。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.RemoveAt(System.Int32)">
      <summary>指定したインデックス位置にあるリレーションシップをコレクションから削除します。</summary>
      <param name="index">削除するリレーションシップのインデックス。</param>
      <exception cref="T:System.ArgumentException">このコレクションには指定したインデックス位置にリレーションシップがありません。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.RemoveCore(System.Data.DataRelation)">
      <summary>指定した <see cref="T:System.Data.DataRelation" /> オブジェクトに対して検証を実行します。</summary>
      <param name="relation">検証する <see langword="DataRelation" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">このコレクションには指定したインデックス位置にリレーションシップがありません。</exception>
      <exception cref="T:System.ArgumentException">指定したリレーションシップがこのコレクションに属していないか、他のコレクションに属しています。</exception>
    </member>
    <member name="T:System.Data.DataRow">
      <summary>
        <see cref="T:System.Data.DataTable" /> 内のデータ行を表します。</summary>
    </member>
    <member name="M:System.Data.DataRow.#ctor(System.Data.DataRowBuilder)">
      <summary>DataRow の新しいインスタンスを初期化します。 ビルダーから行を構築します。 内部でのみ使用されます。</summary>
      <param name="builder">ビルダー</param>
    </member>
    <member name="M:System.Data.DataRow.AcceptChanges">
      <summary>前回 <see cref="M:System.Data.DataRow.AcceptChanges" /> を呼び出した以降にこの行に対して行われたすべての変更をコミットします。</summary>
      <exception cref="T:System.Data.RowNotInTableException">行がこのテーブルに属していません。</exception>
    </member>
    <member name="M:System.Data.DataRow.BeginEdit">
      <summary>
        <see cref="T:System.Data.DataRow" /> オブジェクトの編集操作を開始します。</summary>
      <exception cref="T:System.Data.InRowChangingEventException">
        <see cref="E:System.Data.DataTable.RowChanging" /> イベント内でメソッドが呼び出されました。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">このメソッドは削除した行に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Data.DataRow.CancelEdit">
      <summary>この行の現在の編集をキャンセルします。</summary>
      <exception cref="T:System.Data.InRowChangingEventException">
        <see cref="E:System.Data.DataTable.RowChanging" /> イベント内でメソッドが呼び出されました。</exception>
    </member>
    <member name="M:System.Data.DataRow.ClearErrors">
      <summary>行のエラーを消去します。 これには <see cref="P:System.Data.DataRow.RowError" /> と、<see cref="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)" /> に設定されているエラーが含まれます。</summary>
    </member>
    <member name="M:System.Data.DataRow.Delete">
      <summary>
        <see cref="T:System.Data.DataRow" /> を削除します。</summary>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
        <see cref="T:System.Data.DataRow" /> が既に削除されています。</exception>
    </member>
    <member name="M:System.Data.DataRow.EndEdit">
      <summary>この行で行われている編集を終了します。</summary>
      <exception cref="T:System.Data.InRowChangingEventException">
        <see cref="E:System.Data.DataTable.RowChanging" /> イベント内でメソッドが呼び出されました。</exception>
      <exception cref="T:System.Data.ConstraintException">編集が制約に違反しています。</exception>
      <exception cref="T:System.Data.ReadOnlyException">この行がこのテーブルに属し、編集によって読み取り専用の列の値を変更しようとしています。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">編集によって、<see cref="P:System.Data.DataColumn.AllowDBNull" /> が false である列に null 値を挿入しようとしています。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.Data.DataRelation)">
      <summary>指定した <see cref="T:System.Data.DataRow" /> を使用して、この <see cref="T:System.Data.DataRelation" /> の子行を取得します。</summary>
      <param name="relation">使用する <see cref="T:System.Data.DataRelation" />。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> オブジェクトの配列、または長さ 0 の配列。</returns>
      <exception cref="T:System.ArgumentException">リレーションシップと行が同じテーブルに属していません。</exception>
      <exception cref="T:System.ArgumentNullException">リレーションシップが <see langword="null" /> です。</exception>
      <exception cref="T:System.Data.RowNotInTableException">行がこのテーブルに属していません。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">このバージョンのデータが行にありません。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>指定した <see cref="T:System.Data.DataRow" /> と <see cref="T:System.Data.DataRelation" /> を使用して、<see cref="T:System.Data.DataRowVersion" /> の子行を取得します。</summary>
      <param name="relation">使用する <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">取得するデータのバージョンを指定する <see cref="T:System.Data.DataRowVersion" /> 値の 1 つ。 指定できる値は、<see langword="Default" />、<see langword="Original" />、<see langword="Current" />、および <see langword="Proposed" /> です。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</returns>
      <exception cref="T:System.ArgumentException">リレーションシップと行が同じテーブルに属していません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Data.RowNotInTableException">行がこのテーブルに属していません。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">要求された <see cref="T:System.Data.DataRowVersion" /> が行にありません。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.String)">
      <summary>
        <see cref="T:System.Data.DataRow" /> の指定した <see cref="P:System.Data.DataRelation.RelationName" /> を使用して、<see cref="T:System.Data.DataRelation" /> の子行を取得します。</summary>
      <param name="relationName">使用する <see cref="P:System.Data.DataRelation.RelationName" /> の <see cref="T:System.Data.DataRelation" />。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> オブジェクトの配列、または長さ 0 の配列。</returns>
      <exception cref="T:System.ArgumentException">リレーションシップと行が同じテーブルに属していません。</exception>
      <exception cref="T:System.Data.RowNotInTableException">行がこのテーブルに属していません。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.String,System.Data.DataRowVersion)">
      <summary>
        <see cref="T:System.Data.DataRow" /> の指定した <see cref="P:System.Data.DataRelation.RelationName" /> と <see cref="T:System.Data.DataRelation" /> を使用して、<see cref="T:System.Data.DataRowVersion" /> の子行を取得します。</summary>
      <param name="relationName">使用する <see cref="P:System.Data.DataRelation.RelationName" /> の <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">取得するデータのバージョンを指定する <see cref="T:System.Data.DataRowVersion" /> 値の 1 つ。 指定できる値は、<see langword="Default" />、<see langword="Original" />、<see langword="Current" />、および <see langword="Proposed" /> です。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> オブジェクトの配列、または長さ 0 の配列。</returns>
      <exception cref="T:System.ArgumentException">リレーションシップと行が同じテーブルに属していません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Data.RowNotInTableException">行がこのテーブルに属していません。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">要求された <see cref="T:System.Data.DataRowVersion" /> が行にありません。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.Data.DataColumn)">
      <summary>指定した <see cref="T:System.Data.DataColumn" /> のエラーの説明を取得します。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
      <returns>エラーの説明のテキスト。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.Int32)">
      <summary>インデックスで指定した列のエラーの説明を取得します。</summary>
      <param name="columnIndex">列の 0 から始まるインデックス番号。</param>
      <returns>エラーの説明のテキスト。</returns>
      <exception cref="T:System.IndexOutOfRangeException">引数 <paramref name="columnIndex" /> が範囲外です。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.String)">
      <summary>名前で指定した列のエラーの説明を取得します。</summary>
      <param name="columnName">列の名前。</param>
      <returns>エラーの説明のテキスト。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetColumnsInError">
      <summary>エラーが含まれる列の配列を取得します。</summary>
      <returns>エラーが含まれる <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.Data.DataRelation)">
      <summary>指定した <see cref="T:System.Data.DataRow" /> を使用して、<see cref="T:System.Data.DataRelation" /> の親行を取得します。</summary>
      <param name="relation">使用する <see cref="T:System.Data.DataRelation" />。</param>
      <returns>現在の行の親 <see cref="T:System.Data.DataRow" />。</returns>
      <exception cref="T:System.ArgumentNullException">この <paramref name="relation" /> は <see cref="T:System.Data.DataTable" /> に属していません。

または -

行が <see langword="null" /> です。</exception>
      <exception cref="T:System.Data.DataException">子の行に複数の親が含まれます。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">この行は <see cref="T:System.Data.DataRelation" /> オブジェクトの子テーブルに属していません。</exception>
      <exception cref="T:System.Data.RowNotInTableException">この行はテーブルに属していません。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>指定した <see cref="T:System.Data.DataRow" /> と <see cref="T:System.Data.DataRelation" /> を使用して、<see cref="T:System.Data.DataRowVersion" /> の親行を取得します。</summary>
      <param name="relation">使用する <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">取得するデータのバージョンを指定する <see cref="T:System.Data.DataRowVersion" /> 値の 1 つ。</param>
      <returns>現在の行の親 <see cref="T:System.Data.DataRow" />。</returns>
      <exception cref="T:System.ArgumentNullException">行が <see langword="null" /> です。

または -

<paramref name="relation" /> は、このテーブルの親リレーションシップに属していません。</exception>
      <exception cref="T:System.Data.DataException">子の行に複数の親が含まれます。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">このリレーションシップの子テーブルは、この行が属しているテーブルではありません。</exception>
      <exception cref="T:System.Data.RowNotInTableException">この行はテーブルに属していません。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">このバージョンのデータが行にありません。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.String)">
      <summary>
        <see cref="T:System.Data.DataRow" /> の指定した <see cref="P:System.Data.DataRelation.RelationName" /> を使用して、<see cref="T:System.Data.DataRelation" /> の親行を取得します。</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> の <see cref="T:System.Data.DataRelation" />。</param>
      <returns>現在の行の親 <see cref="T:System.Data.DataRow" />。</returns>
      <exception cref="T:System.ArgumentException">リレーションシップと行が同じテーブルに属していません。</exception>
      <exception cref="T:System.Data.DataException">子の行に複数の親が含まれます。</exception>
      <exception cref="T:System.Data.RowNotInTableException">行がこのテーブルに属していません。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.String,System.Data.DataRowVersion)">
      <summary>
        <see cref="T:System.Data.DataRow" /> の指定した <see cref="P:System.Data.DataRelation.RelationName" /> と <see cref="T:System.Data.DataRelation" /> を使用して、<see cref="T:System.Data.DataRowVersion" /> の親行を取得します。</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> の <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 値のいずれか。</param>
      <returns>現在の行の親 <see cref="T:System.Data.DataRow" />。</returns>
      <exception cref="T:System.ArgumentException">リレーションシップと行が同じテーブルに属していません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Data.DataException">子の行に複数の親が含まれます。</exception>
      <exception cref="T:System.Data.RowNotInTableException">行がこのテーブルに属していません。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">要求された <see cref="T:System.Data.DataRowVersion" /> が行にありません。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.Data.DataRelation)">
      <summary>指定した <see cref="T:System.Data.DataRow" /> を使用して、<see cref="T:System.Data.DataRelation" /> の親行を取得します。</summary>
      <param name="relation">使用する <see cref="T:System.Data.DataRelation" />。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> オブジェクトの配列、または長さ 0 の配列。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.DataRelation" /> は、この行の <see cref="T:System.Data.DataSet" /> に属していません。</exception>
      <exception cref="T:System.ArgumentNullException">行が <see langword="null" /> です。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">このリレーションシップの子テーブルは、この行が属しているテーブルではありません。</exception>
      <exception cref="T:System.Data.RowNotInTableException">この行は <see cref="T:System.Data.DataTable" /> に属していません。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>指定した <see cref="T:System.Data.DataRow" /> と <see cref="T:System.Data.DataRelation" /> を使用して、<see cref="T:System.Data.DataRowVersion" /> の親行を取得します。</summary>
      <param name="relation">使用する <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">取得するデータのバージョンを指定する <see cref="T:System.Data.DataRowVersion" /> 値の 1 つ。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> オブジェクトの配列、または長さ 0 の配列。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.DataRelation" /> は、この行の <see cref="T:System.Data.DataSet" /> に属していません。</exception>
      <exception cref="T:System.ArgumentNullException">行が <see langword="null" /> です。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">このリレーションシップの子テーブルは、この行が属しているテーブルではありません。</exception>
      <exception cref="T:System.Data.RowNotInTableException">この行は <see cref="T:System.Data.DataTable" /> に属していません。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">要求された <see cref="T:System.Data.DataRowVersion" /> が行にありません。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.String)">
      <summary>
        <see cref="T:System.Data.DataRow" /> の指定した <see cref="P:System.Data.DataRelation.RelationName" /> を使用して、<see cref="T:System.Data.DataRelation" /> の親行を取得します。</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> の <see cref="T:System.Data.DataRelation" />。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> オブジェクトの配列、または長さ 0 の配列。</returns>
      <exception cref="T:System.ArgumentException">リレーションシップと行が同じテーブルに属していません。</exception>
      <exception cref="T:System.Data.RowNotInTableException">行がこのテーブルに属していません。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.String,System.Data.DataRowVersion)">
      <summary>
        <see cref="T:System.Data.DataRow" /> の指定した <see cref="P:System.Data.DataRelation.RelationName" /> と <see cref="T:System.Data.DataRelation" /> を使用して、<see cref="T:System.Data.DataRowVersion" /> の親行を取得します。</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> の <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">取得するデータのバージョンを指定する <see cref="T:System.Data.DataRowVersion" /> 値の 1 つ。 指定できる値は、<see langword="Default" />、<see langword="Original" />、<see langword="Current" />、および <see langword="Proposed" /> です。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> オブジェクトの配列、または長さ 0 の配列。</returns>
      <exception cref="T:System.ArgumentException">リレーションシップと行が同じテーブルに属していません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Data.RowNotInTableException">行がこのテーブルに属していません。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">要求された <see cref="T:System.Data.DataRowVersion" /> が行にありません。</exception>
    </member>
    <member name="P:System.Data.DataRow.HasErrors">
      <summary>行にエラーがあるかどうかを示す値を取得します。</summary>
      <returns>行にエラーがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRow.HasVersion(System.Data.DataRowVersion)">
      <summary>指定したバージョンが存在するかどうかを示す値を取得します。</summary>
      <param name="version">行のバージョンを指定する <see cref="T:System.Data.DataRowVersion" /> 値の 1 つ。</param>
      <returns>指定したバージョンが存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Data.DataColumn)">
      <summary>指定した <see cref="T:System.Data.DataColumn" /> に null 値が格納されているかどうかを示す値を取得します。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
      <returns>列が null 値を格納している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Data.RowNotInTableException">行がこのテーブルに属していません。</exception>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>指定した <see cref="T:System.Data.DataColumn" /> と <see cref="T:System.Data.DataRowVersion" /> に null 値が格納されているかどうかを示す値を取得します。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
      <param name="version">行のバージョンを指定する <see cref="T:System.Data.DataRowVersion" /> 値の 1 つ。 指定できる値は、<see langword="Default" />、<see langword="Original" />、<see langword="Current" />、および <see langword="Proposed" /> です。</param>
      <returns>列が null 値を格納している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Data.RowNotInTableException">行がこのテーブルに属していません。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">要求された <paramref name="version" /> が行にありません。</exception>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Int32)">
      <summary>指定したインデックス位置にある列に null 値が格納されているかどうかを示す値を取得します。</summary>
      <param name="columnIndex">列の 0 から始まるインデックス番号。</param>
      <returns>列が null 値を格納している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> で指定されたインデックスに対応する列がありません。</exception>
      <exception cref="T:System.Data.RowNotInTableException">行がこのテーブルに属していません。</exception>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.String)">
      <summary>指定した列に null 値が格納されているかどうかを示す値を取得します。</summary>
      <param name="columnName">列の名前。</param>
      <returns>列が null 値を格納している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnName" /> で指定した列が見つかりません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="columnName" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Data.RowNotInTableException">行がこのテーブルに属していません。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Data.DataColumn)">
      <summary>指定した <see cref="T:System.Data.DataColumn" /> に格納されているデータを取得または設定します。</summary>
      <param name="column">データが格納されている <see cref="T:System.Data.DataColumn" />。</param>
      <returns>データを格納している <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentException">この列はこのテーブルに属していません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> が null です。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行に値を設定しようとしました。</exception>
      <exception cref="T:System.InvalidCastException">列と値のデータ型が一致しません。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>指定した <see cref="T:System.Data.DataColumn" /> に格納されているデータの指定したバージョンを取得します。</summary>
      <param name="column">列に関する情報を格納する <see cref="T:System.Data.DataColumn" />。</param>
      <param name="version">行のバージョンを指定する <see cref="T:System.Data.DataRowVersion" /> 値の 1 つ。 指定できる値は、<see langword="Default" />、<see langword="Original" />、<see langword="Current" />、および <see langword="Proposed" /> です。</param>
      <returns>データを格納している <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentException">行がこのテーブルに属していません。</exception>
      <exception cref="T:System.ArgumentNullException">引数 <paramref name="column" /> が null です。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">このバージョンのデータが行にありません。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Int32)">
      <summary>インデックスで指定した列に格納されているデータを取得または設定します。</summary>
      <param name="columnIndex">列の 0 から始まるインデックス番号。</param>
      <returns>データを格納している <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行に値を設定しようとしたときに発生します。</exception>
      <exception cref="T:System.IndexOutOfRangeException">引数 <paramref name="columnIndex" /> が範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">値を設定したときに、新しい値の <see cref="T:System.Type" /> の設定が <see cref="P:System.Data.DataColumn.DataType" /> と一致しない場合に発生します。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Int32,System.Data.DataRowVersion)">
      <summary>列に格納されている、取得するデータのインデックスとバージョンで指定したデータを取得します。</summary>
      <param name="columnIndex">列の 0 から始まるインデックス番号。</param>
      <param name="version">行のバージョンを指定する <see cref="T:System.Data.DataRowVersion" /> 値の 1 つ。 指定できる値は、<see langword="Default" />、<see langword="Original" />、<see langword="Current" />、および <see langword="Proposed" /> です。</param>
      <returns>データを格納している <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">引数 <paramref name="columnIndex" /> が範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">列と値のデータ型が一致しません。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">このバージョンのデータが行にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行に値を設定しようとしました。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.String)">
      <summary>名前で指定した列に格納されているデータを取得または設定します。</summary>
      <param name="columnName">列の名前。</param>
      <returns>データを格納している <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnName" /> で指定した列が見つかりません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行に値を設定しようとしたときに発生します。</exception>
      <exception cref="T:System.InvalidCastException">値を設定したときに、その値の <see cref="T:System.Type" /> の設定が <see cref="P:System.Data.DataColumn.DataType" /> と一致していない場合に発生します。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">
        <see cref="P:System.Data.DataColumn.AllowDBNull" /> が <see langword="false" /> に設定されている列に Null 値を挿入したときに発生します。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.String,System.Data.DataRowVersion)">
      <summary>指定した列に格納されているデータの指定したバージョンを取得します。</summary>
      <param name="columnName">列の名前。</param>
      <param name="version">行のバージョンを指定する <see cref="T:System.Data.DataRowVersion" /> 値の 1 つ。 指定できる値は、<see langword="Default" />、<see langword="Original" />、<see langword="Current" />、および <see langword="Proposed" /> です。</param>
      <returns>データを格納している <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnName" /> で指定した列が見つかりません。</exception>
      <exception cref="T:System.InvalidCastException">列と値のデータ型が一致しません。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">このバージョンのデータが行にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">この行は削除されました。</exception>
    </member>
    <member name="P:System.Data.DataRow.ItemArray">
      <summary>配列を使用してこの行のすべての値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Object" /> 型の配列。</returns>
      <exception cref="T:System.ArgumentException">配列がテーブルの列数より大きいです。</exception>
      <exception cref="T:System.InvalidCastException">配列内の値が、各値の <see cref="P:System.Data.DataColumn.DataType" /> 内の <see cref="T:System.Data.DataColumn" /> と一致していません。</exception>
      <exception cref="T:System.Data.ConstraintException">編集が制約に違反しています。</exception>
      <exception cref="T:System.Data.ReadOnlyException">編集によって読み取り専用の列の値を変更しようとしています。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">編集によって、<see cref="P:System.Data.DataColumn.AllowDBNull" /> オブジェクトの <see cref="T:System.Data.DataColumn" /> が <see langword="false" /> である列に null 値を入力しようとしています。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">行が削除されました。</exception>
    </member>
    <member name="M:System.Data.DataRow.RejectChanges">
      <summary>前回 <see cref="M:System.Data.DataRow.AcceptChanges" /> を呼び出した以降にこの行に対して行われたすべての変更を拒否します。</summary>
      <exception cref="T:System.Data.RowNotInTableException">行がこのテーブルに属していません。</exception>
    </member>
    <member name="P:System.Data.DataRow.RowError">
      <summary>行のカスタム エラー説明を取得または設定します。</summary>
      <returns>エラーを説明するテキスト。</returns>
    </member>
    <member name="P:System.Data.DataRow.RowState">
      <summary>
        <see cref="T:System.Data.DataRowCollection" /> とのリレーションシップに関する、行の現在の状態を取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataRowState" /> 値のいずれか。</returns>
    </member>
    <member name="M:System.Data.DataRow.SetAdded">
      <summary>
        <see cref="P:System.Data.DataRow.RowState" /> の <see cref="T:System.Data.DataRow" /> を <see langword="Added" /> に変更します。</summary>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.Data.DataColumn,System.String)">
      <summary>
        <see cref="T:System.Data.DataColumn" /> として指定した列のエラーの説明を設定します。</summary>
      <param name="column">エラーの説明を設定する対象となる <see cref="T:System.Data.DataColumn" />。</param>
      <param name="error">エラーの説明。</param>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)">
      <summary>インデックスで指定した列のエラーの説明を設定します。</summary>
      <param name="columnIndex">列の 0 から始まるインデックス番号。</param>
      <param name="error">エラーの説明。</param>
      <exception cref="T:System.IndexOutOfRangeException">引数 <paramref name="columnIndex" /> が範囲外です。</exception>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.String,System.String)">
      <summary>名前で指定した列のエラーの説明を設定します。</summary>
      <param name="columnName">列の名前。</param>
      <param name="error">エラーの説明。</param>
    </member>
    <member name="M:System.Data.DataRow.SetModified">
      <summary>
        <see cref="P:System.Data.DataRow.RowState" /> の <see cref="T:System.Data.DataRow" /> を <see langword="Modified" /> に変更します。</summary>
    </member>
    <member name="M:System.Data.DataRow.SetNull(System.Data.DataColumn)">
      <summary>指定した <see cref="T:System.Data.DataColumn" /> の値を null 値に設定します。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.DataRow.SetParentRow(System.Data.DataRow)">
      <summary>指定した新しい親 <see cref="T:System.Data.DataRow" /> を使用して、<see cref="T:System.Data.DataRow" /> の親行を設定します。</summary>
      <param name="parentRow">新しい親 <see cref="T:System.Data.DataRow" />。</param>
    </member>
    <member name="M:System.Data.DataRow.SetParentRow(System.Data.DataRow,System.Data.DataRelation)">
      <summary>指定した新しい親 <see cref="T:System.Data.DataRow" /> と <see cref="T:System.Data.DataRow" /> を使用して、<see cref="T:System.Data.DataRelation" /> の親行を設定します。</summary>
      <param name="parentRow">新しい親 <see cref="T:System.Data.DataRow" />。</param>
      <param name="relation">使用するリレーションシップ <see cref="T:System.Data.DataRelation" />。</param>
      <exception cref="T:System.Data.RowNotInTableException">行の 1 つがテーブルに属していません。</exception>
      <exception cref="T:System.ArgumentNullException">行の 1 つが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">リレーションシップが <see cref="T:System.Data.DataRelationCollection" /> オブジェクトの <see cref="T:System.Data.DataSet" /> に属していません。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">このリレーションシップの子 <see cref="T:System.Data.DataTable" /> は、この行が属しているテーブルではありません。</exception>
    </member>
    <member name="P:System.Data.DataRow.Table">
      <summary>この行のスキーマが関連する <see cref="T:System.Data.DataTable" /> を取得します。</summary>
      <returns>この行が属する <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="T:System.Data.DataRowAction">
      <summary>
        <see cref="T:System.Data.DataRow" /> で実行されたアクションを記述します。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Add">
      <summary>この行はこのテーブルに追加されています。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Change">
      <summary>この行は変更されています。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.ChangeCurrentAndOriginal">
      <summary>行の元のバージョンおよび現在のバージョンが変更されました。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.ChangeOriginal">
      <summary>行の元のバージョンが変更されました。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Commit">
      <summary>この行に対する変更がコミットされています。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Delete">
      <summary>この行はテーブルから削除されました。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Nothing">
      <summary>この行は変更されていません。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Rollback">
      <summary>この行に対する最新の変更がロールバックされました。</summary>
    </member>
    <member name="T:System.Data.DataRowBuilder">
      <summary>
        <see langword="DataRowBuilder" /> 型は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="T:System.Data.DataRowChangeEventArgs">
      <summary>
        <see cref="E:System.Data.DataTable.RowChanged" />、<see cref="E:System.Data.DataTable.RowChanging" />、<see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" />、<see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" /> の各イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.Data.DataRowChangeEventArgs.#ctor(System.Data.DataRow,System.Data.DataRowAction)">
      <summary>
        <see cref="T:System.Data.DataRowChangeEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="row">アクションを実行する <see cref="T:System.Data.DataRow" />。</param>
      <param name="action">
        <see cref="T:System.Data.DataRowAction" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="P:System.Data.DataRowChangeEventArgs.Action">
      <summary>
        <see cref="T:System.Data.DataRow" /> で実行されたアクションを取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataRowAction" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.Data.DataRowChangeEventArgs.Row">
      <summary>アクションが実行された行を取得します。</summary>
      <returns>アクションが実行された <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="T:System.Data.DataRowChangeEventHandler">
      <summary>
        <see cref="E:System.Data.DataTable.RowChanging" /> の <see cref="E:System.Data.DataTable.RowChanged" />、<see cref="E:System.Data.DataTable.RowDeleting" />、<see cref="E:System.Data.DataTable.RowDeleted" />、<see cref="T:System.Data.DataTable" /> の各イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="T:System.Data.DataRowCollection">
      <summary>
        <see cref="T:System.Data.DataTable" /> の行のコレクションを表します。</summary>
    </member>
    <member name="M:System.Data.DataRowCollection.Add(System.Data.DataRow)">
      <summary>指定した <see cref="T:System.Data.DataRow" /> を <see cref="T:System.Data.DataRowCollection" /> オブジェクトに追加します。</summary>
      <param name="row">追加する <see cref="T:System.Data.DataRow" />。</param>
      <exception cref="T:System.ArgumentNullException">行が null です。</exception>
      <exception cref="T:System.ArgumentException">この行は他のテーブルに属しているか、既にこのテーブルに属しています。</exception>
      <exception cref="T:System.Data.ConstraintException">この行を追加すると、制約が無効になります。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">この行を追加すると、<see cref="T:System.Data.DataColumn" /> が false である <see cref="P:System.Data.DataColumn.AllowDBNull" /> に null を格納することになります。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Add(System.Object[])">
      <summary>指定した値を使用して行を作成し、この行を <see cref="T:System.Data.DataRowCollection" /> に追加します。</summary>
      <param name="values">新しい行の作成に使用する値の配列。</param>
      <returns>なし。</returns>
      <exception cref="T:System.ArgumentException">配列がテーブルの列数より大きいです。</exception>
      <exception cref="T:System.InvalidCastException">値が各列の型と一致していません。</exception>
      <exception cref="T:System.Data.ConstraintException">この行を追加すると、制約が無効になります。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">
        <see cref="P:System.Data.DataColumn.AllowDBNull" /> が false である列に null を格納しようとしました。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Clear">
      <summary>すべての行のコレクションを消去します。</summary>
      <exception cref="T:System.Data.InvalidConstraintException">
        <see cref="T:System.Data.ForeignKeyConstraint" /> が <see cref="T:System.Data.DataRowCollection" /> に対して強制的に適用されます。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Contains(System.Object)">
      <summary>このコレクション内のいずれかの行の主キーに指定した値が格納されているかどうかを示す値を取得します。</summary>
      <param name="key">確認する主キーの値。</param>
      <returns>指定した主キー値が格納されている <see cref="T:System.Data.DataRow" /> がコレクション内にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.Data.MissingPrimaryKeyException">このテーブルには主キーがありません。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Contains(System.Object[])">
      <summary>このコレクション内のいずれかの行の主キー列に、オブジェクト配列内で指定した値が格納されているかどうかを示す値を取得します。</summary>
      <param name="keys">確認する主キー値の配列。</param>
      <returns>指定したキー値が格納されている <see cref="T:System.Data.DataRowCollection" /> が <see cref="T:System.Data.DataRow" /> 内にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.Data.MissingPrimaryKeyException">このテーブルには主キーがありません。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)">
      <summary>このコレクション内のすべての <see cref="T:System.Data.DataRow" /> オブジェクトを、指定したコピー先配列インデックスから始まる指定した配列にコピーします。</summary>
      <param name="ar">
        <see langword="DataRowCollection" /> から要素がコピーされる先の 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">配列内のコピーを開始する位置を示す、0 から始まるインデックスです。</param>
    </member>
    <member name="M:System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)">
      <summary>このコレクション内のすべての <see cref="T:System.Data.DataRow" /> オブジェクトを、指定したコピー先配列インデックスから始まる指定した配列にコピーします。</summary>
      <param name="array">
        <see langword="DataRowCollection" /> から要素がコピーされる先の 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">配列内のコピーを開始する位置を示す、0 から始まるインデックスです。</param>
    </member>
    <member name="P:System.Data.DataRowCollection.Count">
      <summary>このコレクション内の <see cref="T:System.Data.DataRow" /> オブジェクトの合計数を取得します。</summary>
      <returns>このコレクション内の <see cref="T:System.Data.DataRow" /> オブジェクトの合計数。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.Find(System.Object)">
      <summary>主キー値で指定した行を取得します。</summary>
      <param name="key">検索する <see cref="T:System.Data.DataRow" /> の主キー値。</param>
      <returns>指定した主キー値が格納されている <see cref="T:System.Data.DataRow" />。指定した主キー値が <see cref="T:System.Data.DataRowCollection" /> 内に存在しない場合は null 値。</returns>
      <exception cref="T:System.Data.MissingPrimaryKeyException">このテーブルには主キーがありません。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Find(System.Object[])">
      <summary>指定した主キー値が格納されている行を取得します。</summary>
      <param name="keys">検索する主キー値の配列。 配列の型は <see langword="Object" /> です。</param>
      <returns>指定した主キー値が格納されている <see cref="T:System.Data.DataRow" /> オブジェクト。指定した主キー値が <see cref="T:System.Data.DataRowCollection" /> 内に存在しない場合は null 値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">インデックス値に対応する行がありません。</exception>
      <exception cref="T:System.Data.MissingPrimaryKeyException">このテーブルには主キーがありません。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.GetEnumerator">
      <summary>このコレクションの <see cref="T:System.Collections.IEnumerator" /> を取得します。</summary>
      <returns>このコレクションの <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.IndexOf(System.Data.DataRow)">
      <summary>指定した <see cref="T:System.Data.DataRow" /> オブジェクトのインデックスを取得します。</summary>
      <param name="row">検索対象の <see langword="DataRow" />。</param>
      <returns>行の 0 から始まるインデックス番号。コレクション内でその行が見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)">
      <summary>コレクション内の指定した位置に新しい行を挿入します。</summary>
      <param name="row">追加する <see cref="T:System.Data.DataRow" />。</param>
      <param name="pos">
        <see langword="DataRow" /> を追加するコレクション内の (0 から始まる) 位置。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="pos" /> が 0 未満です。</exception>
    </member>
    <member name="P:System.Data.DataRowCollection.Item(System.Int32)">
      <summary>指定したインデックス位置にある行を取得します。</summary>
      <param name="index">返す行の 0 から始まるインデックス番号。</param>
      <returns>指定された <see cref="T:System.Data.DataRow" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">インデックス値が、コレクション内の項目数を超える値です。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Remove(System.Data.DataRow)">
      <summary>指定された <see cref="T:System.Data.DataRow" /> をコレクションから削除します。</summary>
      <param name="row">削除する <see cref="T:System.Data.DataRow" />。</param>
    </member>
    <member name="M:System.Data.DataRowCollection.RemoveAt(System.Int32)">
      <summary>指定したインデックス位置にある行をコレクションから削除します。</summary>
      <param name="index">削除する行のインデックス。</param>
    </member>
    <member name="T:System.Data.DataRowComparer">
      <summary>
        <see cref="T:System.Data.DataRowComparer`1" /> クラスのシングルトン インスタンスを返します。</summary>
    </member>
    <member name="P:System.Data.DataRowComparer.Default">
      <summary>
        <see cref="T:System.Data.DataRowComparer`1" /> のシングルトン インスタンスを取得します。 このプロパティは読み取り専用です。</summary>
      <returns>
        <see cref="T:System.Data.DataRowComparer`1" /> のインスタンス。</returns>
    </member>
    <member name="T:System.Data.DataRowComparer`1">
      <summary>2 つの <see cref="T:System.Data.DataRow" /> オブジェクトが等しいかどうかを値に基づいて比較します。</summary>
      <typeparam name="TRow">比較するオブジェクトの型。通常は、<see cref="T:System.Data.DataRow" />。</typeparam>
    </member>
    <member name="P:System.Data.DataRowComparer`1.Default">
      <summary>
        <see cref="T:System.Data.DataRowComparer`1" /> のシングルトン インスタンスを取得します。 このプロパティは読み取り専用です。</summary>
      <returns>
        <see cref="T:System.Data.DataRowComparer`1" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Data.DataRowComparer`1.Equals(`0,`0)">
      <summary>2 つの <see cref="T:System.Data.DataRow" /> オブジェクトを、列単位で値に基づいて比較します。</summary>
      <param name="leftRow">比較する最初の <see cref="T:System.Data.DataRow" /> オブジェクト。</param>
      <param name="rightRow">比較する 2 番目の <see cref="T:System.Data.DataRow" /> オブジェクト。</param>
      <returns>2 つの <see cref="T:System.Data.DataRow" /> オブジェクトの順序付けされたセットの列値が等しい場合は <see langword="true" />。それ以外の場合は<see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">比較する 2 つの <see cref="T:System.Data.DataRow" /> オブジェクトのどちらか一方または両方が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Data.DataRowComparer`1.GetHashCode(`0)">
      <summary>指定した <see cref="T:System.Data.DataRow" /> オブジェクトのハッシュ コードを返します。</summary>
      <param name="row">ハッシュ コードの計算対象となる <see cref="T:System.Data.DataRow" />。</param>
      <returns>行のハッシュ コードを表す <see cref="T:System.Int32" /> 値。</returns>
      <exception cref="T:System.ArgumentException">計算対象の <see cref="T:System.Data.DataRow" /> オブジェクトが <see cref="T:System.Data.DataTable" /> に属していません。</exception>
      <exception cref="T:System.ArgumentNullException">計算対象の <see cref="T:System.Data.DataRow" /> オブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Data.DataRowExtensions">
      <summary>
        <see cref="T:System.Data.DataRow" /> クラスの拡張メソッドを定義します。 これは静的クラスです。</summary>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)">
      <summary>指定された行の個々の列値に対し、型を厳密に指定してアクセスできます。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)" /> メソッドは Null 許容型もサポートします。</summary>
      <param name="row">拡張メソッドの <see langword="this" /> インスタンスとして機能する入力 <see cref="T:System.Data.DataRow" />。</param>
      <param name="column">どの列の値を取得するかを指定する入力 <see cref="T:System.Data.DataColumn" /> オブジェクト。</param>
      <typeparam name="T">列の戻り値の型を指定するジェネリック パラメーター。</typeparam>
      <returns>
        <paramref name="T" /> で指定された <see cref="T:System.Data.DataColumn" /> の <paramref name="column" /> 型の値。</returns>
      <exception cref="T:System.InvalidCastException">基になる列値の型を、ジェネリック パラメーター <paramref name="T" /> で指定された型にキャストできませんでした。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="column" /> で指定された列は、<see cref="T:System.Data.DataTable" /> が属している <see cref="T:System.Data.DataRow" /> には存在しません。</exception>
      <exception cref="T:System.NullReferenceException">Null 非許容型に null 値が割り当てられました。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>指定された行の個々の列値に対し、型を厳密に指定してアクセスできます。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)" /> メソッドは Null 許容型もサポートします。</summary>
      <param name="row">拡張メソッドの <see langword="this" /> インスタンスとして機能する入力 <see cref="T:System.Data.DataRow" />。</param>
      <param name="column">どの列の値を取得するかを指定する入力 <see cref="T:System.Data.DataColumn" /> オブジェクト。</param>
      <param name="version">取得する列の値のバージョン (<see langword="Current" />、<see langword="Original" /> など) を指定する <see cref="T:System.Data.DataRowVersion" /> 列挙値。</param>
      <typeparam name="T">列の戻り値の型を指定するジェネリック パラメーター。</typeparam>
      <returns>
        <paramref name="T" /> および <paramref name="column" /> で指定された <see cref="T:System.Data.DataColumn" /> の <paramref name="version" /> 型の値。</returns>
      <exception cref="T:System.InvalidCastException">基になる列値の型を、ジェネリック パラメーター <paramref name="T" /> で指定された型にキャストできませんでした。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="column" /> で指定された列は、<see cref="T:System.Data.DataTable" /> が属している <see cref="T:System.Data.DataRow" /> には存在しません。</exception>
      <exception cref="T:System.NullReferenceException">Null 非許容型に null 値が割り当てられました。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)">
      <summary>指定された行の個々の列値に対し、型を厳密に指定してアクセスできます。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)" /> メソッドは Null 許容型もサポートします。</summary>
      <param name="row">拡張メソッドの <see langword="this" /> インスタンスとして機能する入力 <see cref="T:System.Data.DataRow" />。</param>
      <param name="columnIndex">列インデックス。</param>
      <typeparam name="T">列の戻り値の型を指定するジェネリック パラメーター。</typeparam>
      <returns>
        <paramref name="T" /> で指定された <see cref="T:System.Data.DataColumn" /> の <paramref name="columnIndex" /> 型の値。</returns>
      <exception cref="T:System.InvalidCastException">基になる列値の型を、ジェネリック パラメーター <paramref name="T" /> で指定された型にキャストできませんでした。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> で指定された列は、<see cref="T:System.Data.DataTable" /> が属している <see cref="T:System.Data.DataRow" /> には存在しません。</exception>
      <exception cref="T:System.NullReferenceException">Null 非許容型に null 値が割り当てられました。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
      <summary>指定された行の個々の列値に対し、型を厳密に指定してアクセスできます。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)" /> メソッドは Null 許容型もサポートします。</summary>
      <param name="row">拡張メソッドの <see langword="this" /> インスタンスとして機能する入力 <see cref="T:System.Data.DataRow" />。</param>
      <param name="columnIndex">取得する値が格納されている列の、0 から始まる序数。</param>
      <param name="version">取得する列の値のバージョン (<see langword="Current" />、<see langword="Original" /> など) を指定する <see cref="T:System.Data.DataRowVersion" /> 列挙値。</param>
      <typeparam name="T">列の戻り値の型を指定するジェネリック パラメーター。</typeparam>
      <returns>
        <paramref name="T" /> および <paramref name="ordinal" /> で指定された <see cref="T:System.Data.DataColumn" /> の <paramref name="version" /> 型の値。</returns>
      <exception cref="T:System.InvalidCastException">基になる列値の型を、ジェネリック パラメーター <paramref name="T" /> で指定された型にキャストできませんでした。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> で指定された列は、<see cref="T:System.Data.DataTable" /> が属している <see cref="T:System.Data.DataRow" /> には存在しません。</exception>
      <exception cref="T:System.NullReferenceException">Null 非許容型に null 値が割り当てられました。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)">
      <summary>指定された行の個々の列値に対し、型を厳密に指定してアクセスできます。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)" /> メソッドは Null 許容型もサポートします。</summary>
      <param name="row">拡張メソッドの <see langword="this" /> インスタンスとして機能する入力 <see cref="T:System.Data.DataRow" />。</param>
      <param name="columnName">値を取得する列の名前。</param>
      <typeparam name="T">列の戻り値の型を指定するジェネリック パラメーター。</typeparam>
      <returns>
        <paramref name="T" /> で指定された <see cref="T:System.Data.DataColumn" /> の <paramref name="columnName" /> 型の値。</returns>
      <exception cref="T:System.InvalidCastException">基になる列値の型を、ジェネリック パラメーター <paramref name="T" /> で指定された型にキャストできませんでした。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnName" /> で指定された列は、<see cref="T:System.Data.DataTable" /> が属している <see cref="T:System.Data.DataRow" /> には存在しません。</exception>
      <exception cref="T:System.NullReferenceException">Null 非許容型に <see langword="null" /> 値が割り当てられました。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
      <summary>指定された行の個々の列値に対し、型を厳密に指定してアクセスできます。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)" /> メソッドは Null 許容型もサポートします。</summary>
      <param name="row">拡張メソッドの <see langword="this" /> インスタンスとして機能する入力 <see cref="T:System.Data.DataRow" />。</param>
      <param name="columnName">値を取得する列の名前。</param>
      <param name="version">取得する列の値のバージョン (<see langword="Current" />、<see langword="Original" /> など) を指定する <see cref="T:System.Data.DataRowVersion" /> 列挙値。</param>
      <typeparam name="T">列の戻り値の型を指定するジェネリック パラメーター。</typeparam>
      <returns>
        <paramref name="T" /> および <paramref name="columnName" /> で指定された <see cref="T:System.Data.DataColumn" /> の <paramref name="version" /> 型の値。</returns>
      <exception cref="T:System.InvalidCastException">基になる列値の型を、ジェネリック パラメーター <paramref name="T" /> で指定された型にキャストできませんでした。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnName" /> で指定された列は、<see cref="T:System.Data.DataTable" /> が属している <see cref="T:System.Data.DataRow" /> には存在しません。</exception>
      <exception cref="T:System.NullReferenceException">Null 非許容型に null 値が割り当てられました。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)">
      <summary>
        <see cref="T:System.Data.DataRow" /> 内の指定された列に新しい値を設定します。 <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)" /> メソッドは Null 許容型もサポートします。</summary>
      <param name="row">拡張メソッドの <see langword="this" /> インスタンスとして機能する入力 <see cref="T:System.Data.DataRow" />。</param>
      <param name="column">取得する行の値は、入力の <see cref="T:System.Data.DataColumn" /> によって指定されます。</param>
      <param name="value">行内の指定された列に設定する新しい <paramref name="T" /> 型の値。</param>
      <typeparam name="T">列の値の型を指定するジェネリック パラメーター。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="column" /> で指定した列が見つかりません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> が null です。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行に値を設定しようとしたときに発生します。</exception>
      <exception cref="T:System.InvalidCastException">基になる列値の型を、ジェネリック パラメーター <paramref name="T" /> で指定された型にキャストできませんでした。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)">
      <summary>メソッドを呼び出した <see cref="T:System.Data.DataRow" /> 内の指定された列に新しい値を設定します。 <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)" /> メソッドは Null 許容型もサポートします。</summary>
      <param name="row">拡張メソッドの <see langword="this" /> インスタンスとして機能する入力 <see cref="T:System.Data.DataRow" />。</param>
      <param name="columnIndex">値の設定先となる列の、0 から始まる序数。</param>
      <param name="value">行内の指定された列に設定する新しい <paramref name="T" /> 型の値。</param>
      <typeparam name="T">列の値の型を指定するジェネリック パラメーター。</typeparam>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行に値を設定しようとしたときに発生します。</exception>
      <exception cref="T:System.IndexOutOfRangeException">引数 <paramref name="ordinal" /> が範囲外です。</exception>
      <exception cref="T:System.InvalidCastException">基になる列値の型を、ジェネリック パラメーター <paramref name="T" /> で指定された型にキャストできませんでした。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)">
      <summary>
        <see cref="T:System.Data.DataRow" /> 内の指定された列に新しい値を設定します。 <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)" /> メソッドは Null 許容型もサポートします。</summary>
      <param name="row">拡張メソッドの <see langword="this" /> インスタンスとして機能する入力 <see cref="T:System.Data.DataRow" />。</param>
      <param name="columnName">値の設定先となる列の名前。</param>
      <param name="value">行内の指定された列に設定する新しい <paramref name="T" /> 型の値。</param>
      <typeparam name="T">列の値の型を指定するジェネリック パラメーター。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnName" /> で指定した列が見つかりません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行に値を設定しようとしたときに発生します。</exception>
      <exception cref="T:System.InvalidCastException">基になる列値の型を、ジェネリック パラメーター <paramref name="T" /> で指定された型にキャストできませんでした。</exception>
    </member>
    <member name="T:System.Data.DataRowState">
      <summary>
        <see cref="T:System.Data.DataRow" /> オブジェクトの状態を取得します。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Added">
      <summary>行が <see cref="T:System.Data.DataRowCollection" /> に追加されましたが、<see cref="M:System.Data.DataRow.AcceptChanges" /> が呼び出されていません。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Deleted">
      <summary>
        <see cref="M:System.Data.DataRow.Delete" /> の <see cref="T:System.Data.DataRow" /> メソッドを使用して行が削除されました。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Detached">
      <summary>行は作成されましたが、<see cref="T:System.Data.DataRowCollection" /> の一部ではありません。 <see cref="T:System.Data.DataRow" /> は、作成された直後からコレクションに追加されるまでの間、またはコレクションから削除された場合に、この状態になります。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Modified">
      <summary>行が変更されましたが、<see cref="M:System.Data.DataRow.AcceptChanges" /> が呼び出されていません。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Unchanged">
      <summary>行は <see cref="M:System.Data.DataRow.AcceptChanges" /> が最後に呼び出されてから変更されていません。</summary>
    </member>
    <member name="T:System.Data.DataRowVersion">
      <summary>
        <see cref="T:System.Data.DataRow" /> のバージョンを記述します。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Current">
      <summary>行には、現在の値が含まれています。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Default">
      <summary>
        <see cref="T:System.Data.DataRowState" /> の既定のバージョン。 <see langword="DataRowState" /> の値が <see langword="Added" />、<see langword="Modified" />、または <see langword="Deleted" /> の場合、既定バージョンは <see langword="Current" /> です。 <see langword="Detached" /> の <see cref="T:System.Data.DataRowState" /> 値の場合、バージョンは <see langword="Proposed" /> です。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Original">
      <summary>行には、元の値が含まれています。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Proposed">
      <summary>行には、提案値が含まれています。</summary>
    </member>
    <member name="T:System.Data.DataRowView">
      <summary>
        <see cref="T:System.Data.DataRow" /> のカスタマイズされたビューを表します。</summary>
    </member>
    <member name="M:System.Data.DataRowView.BeginEdit">
      <summary>編集プロシージャを開始します。</summary>
    </member>
    <member name="M:System.Data.DataRowView.CancelEdit">
      <summary>編集プロシージャをキャンセルします。</summary>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.Data.DataRelation)">
      <summary>指定した子 <see cref="T:System.Data.DataView" /> を使用して子 <see cref="T:System.Data.DataTable" /> の <see cref="T:System.Data.DataRelation" /> を返します。</summary>
      <param name="relation">
        <see cref="T:System.Data.DataRelation" /> オブジェクト。</param>
      <returns>子 <see cref="T:System.Data.DataView" /> の <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.Data.DataRelation,System.Boolean)">
      <summary>指定した <see cref="T:System.Data.DataRelation" /> と親を使用して子 <see cref="T:System.Data.DataTable" /> の <see cref="T:System.Data.DataView" /> を返します。</summary>
      <param name="relation">
        <see cref="T:System.Data.DataRelation" /> オブジェクト。</param>
      <param name="followParent">親オブジェクト。</param>
      <returns>子 <see cref="T:System.Data.DataView" /> の <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="relation" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.String)">
      <summary>指定した子 <see cref="T:System.Data.DataView" /> 名を使用して子 <see cref="T:System.Data.DataTable" /> の <see cref="T:System.Data.DataRelation" /> を返します。</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 名を格納している文字列。</param>
      <returns>子 <see cref="T:System.Data.DataView" /> の <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.String,System.Boolean)">
      <summary>指定した <see cref="T:System.Data.DataView" /> 名と親を使用して子 <see cref="T:System.Data.DataTable" /> の <see cref="T:System.Data.DataRelation" /> を返します。</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 名を格納している文字列。</param>
      <param name="followParent">作成された子ビューと親の同期を維持するには <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>子 <see cref="T:System.Data.DataView" /> の <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="relation" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Data.DataRowView.DataView">
      <summary>この行が属する <see cref="T:System.Data.DataView" /> を取得します。</summary>
      <returns>この行が属する <see langword="DataView" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.Delete">
      <summary>行を削除します。</summary>
    </member>
    <member name="M:System.Data.DataRowView.EndEdit">
      <summary>
        <see cref="T:System.Data.DataRow" /> に対する変更をコミットし、<see cref="M:System.Data.DataRowView.BeginEdit" /> によって開始された編集セッションを終了します。  <see cref="M:System.Data.DataRowView.CancelEdit" /> への変更を破棄するには、<see cref="T:System.Data.DataRow" /> を使用します。</summary>
    </member>
    <member name="M:System.Data.DataRowView.Equals(System.Object)">
      <summary>現在の <see cref="T:System.Data.DataRowView" /> が指定したオブジェクトと同一かどうかを示す値を取得します。</summary>
      <param name="other">比較する <see cref="T:System.Object" />。</param>
      <returns>
        <paramref name="object" /> が <see cref="T:System.Data.DataRowView" /> であり、現在の <see cref="T:System.Data.DataRowView" /> と同じ行を返す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.GetHashCode">
      <summary>
        <see cref="T:System.Data.DataRow" /> オブジェクトのハッシュ コードを返します。</summary>
      <returns>このインスタンスの値が 0 以外の場合はブール値 <see langword="true" /> を表す 32 ビット符号付き整数ハッシュ コードの 1。それ以外の場合はブール値 <see langword="false" /> を表す整数の 0。</returns>
    </member>
    <member name="P:System.Data.DataRowView.IsEdit">
      <summary>行が編集モードかどうかを示します。</summary>
      <returns>行が編集モードである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataRowView.IsNew">
      <summary>
        <see cref="T:System.Data.DataRowView" /> が新しいかどうかを示します。</summary>
      <returns>行が新しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataRowView.Item(System.Int32)">
      <summary>指定した列の値を取得または設定します。</summary>
      <param name="ndx">列インデックス。</param>
      <returns>列の値。</returns>
      <exception cref="T:System.Data.DataException">
        <see cref="P:System.Data.DataRowView.DataView" /> では編集を許可しておらず、<see cref="T:System.Data.DataRowView" /> は新しくありません。</exception>
      <exception cref="T:System.IndexOutOfRangeException">そのインデックス値に対応する列がありません。</exception>
    </member>
    <member name="P:System.Data.DataRowView.Item(System.String)">
      <summary>指定した列の値を取得または設定します。</summary>
      <param name="property">指定した列を格納している文字列。</param>
      <returns>列の値。</returns>
      <exception cref="T:System.ArgumentException">指定された名前または関係を持つ列が見つかりませんでした。

または -

<see cref="P:System.Data.DataRowView.DataView" /> では編集を許可しておらず、<see cref="T:System.Data.DataRowView" /> は新しくありません。</exception>
      <exception cref="T:System.Data.DataException">値を設定するときに一致しなかった <paramref name="property" />。</exception>
    </member>
    <member name="E:System.Data.DataRowView.PropertyChanged">
      <summary>
        <see cref="T:System.Data.DataRowView" /> プロパティの変更時に発生するイベント。</summary>
    </member>
    <member name="P:System.Data.DataRowView.Row">
      <summary>表示されている <see cref="T:System.Data.DataRow" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> に表示されている <see cref="T:System.Data.DataRowView" />。</returns>
    </member>
    <member name="P:System.Data.DataRowView.RowVersion">
      <summary>
        <see cref="T:System.Data.DataRow" /> の現在のバージョンの説明を取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 値のいずれか。 <see cref="P:System.Data.DataRowView.RowVersion" /> プロパティに使用できる値は、<see langword="Default" />、<see langword="Original" />、<see langword="Current" />、および <see langword="Proposed" /> です。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>コンポーネントのこのインスタンスのカスタム属性のコレクションを返します。</summary>
      <returns>このオブジェクトの属性を格納する AttributeCollection。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>コンポーネントのこのインスタンスのクラス名を返します。</summary>
      <returns>コンポーネントのこのインスタンスのクラス名。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>コンポーネントのこのインスタンスの名前を返します。</summary>
      <returns>コンポーネントのこのインスタンスの名前。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>コンポーネントのこのインスタンスの型コンバーターを返します。</summary>
      <returns>コンポーネントのこのインスタンスの型コンバーター。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>コンポーネントのこのインスタンスの既定のイベントを返します。</summary>
      <returns>コンポーネントのこのインスタンスの既定のイベント。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>コンポーネントのこのインスタンスの既定のプロパティを返します。</summary>
      <returns>コンポーネントのこのインスタンスの既定のプロパティ。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>コンポーネントのこのインスタンスに対して指定されている型のエディターを返します。</summary>
      <param name="editorBaseType">このオブジェクトのエディターを表す <see cref="T:System.Type" />。</param>
      <returns>指定した型の、このオブジェクトのエディターとなる <see cref="T:System.Object" />。エディターが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>コンポーネントのこのインスタンスのイベントを返します。</summary>
      <returns>コンポーネントのこのインスタンスのイベント。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>指定された属性を持つコンポーネントのこのインスタンスのイベントを返します。</summary>
      <param name="attributes">属性</param>
      <returns>コンポーネントのこのインスタンスのイベント。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>コンポーネントのこのインスタンスのプロパティを返します。</summary>
      <returns>コンポーネントのこのインスタンスのプロパティ。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>指定された属性を持つコンポーネントのこのインスタンスのプロパティを返します。</summary>
      <param name="attributes">属性。</param>
      <returns>コンポーネントのこのインスタンスのプロパティ。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>指定したプロパティ記述子によって記述されたプロパティを含むオブジェクトを返します。</summary>
      <param name="pd">所有者を見つけるプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns>指定したプロパティの所有者を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.DataRowView.System#ComponentModel#IDataErrorInfo#Error">
      <summary>オブジェクトの検証エラーを説明するメッセージを取得します。</summary>
      <returns>オブジェクトの検証エラー。</returns>
    </member>
    <member name="P:System.Data.DataRowView.System#ComponentModel#IDataErrorInfo#Item(System.String)">
      <summary>指定した名前のプロパティに関するエラー メッセージを取得します。</summary>
      <param name="colName">エラー メッセージを取得する対象のプロパティの名前。</param>
      <returns>プロパティに関するエラー メッセージ。 既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="T:System.Data.DataSet">
      <summary>データのメモリ内キャッシュを表します。</summary>
    </member>
    <member name="M:System.Data.DataSet.#ctor">
      <summary>
        <see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定されたシリアル化情報とコンテキストを持つ <see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">指定したシリアル化ストリームの転送元と転送先。</param>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)">
      <summary>
        <see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
      <param name="ConstructSchema">ブール値。</param>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.String)">
      <summary>指定した名前で <see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataSetName">
        <see cref="T:System.Data.DataSet" /> の名前。</param>
    </member>
    <member name="M:System.Data.DataSet.AcceptChanges">
      <summary>この <see cref="T:System.Data.DataSet" /> の読み込み、または前回の <see cref="M:System.Data.DataSet.AcceptChanges" /> の呼び出し以降にこのデータセットに対して行われたすべての変更をコミットします。</summary>
    </member>
    <member name="M:System.Data.DataSet.BeginInit">
      <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Data.DataSet" /> の初期化を開始します。 初期化は実行時に発生します。</summary>
    </member>
    <member name="P:System.Data.DataSet.CaseSensitive">
      <summary>
        <see cref="T:System.Data.DataTable" /> オブジェクト内の文字列比較で大文字と小文字を区別するかどうかを示す値を取得または設定します。</summary>
      <returns>文字列比較で大文字と小文字を区別するかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Data.DataSet.Clear">
      <summary>すべてのテーブル内のすべての行を削除して、データの <see cref="T:System.Data.DataSet" /> を消去します。</summary>
    </member>
    <member name="M:System.Data.DataSet.Clone">
      <summary>すべての <see cref="T:System.Data.DataSet" /> スキーマ、リレーションシップ、および制約を含め <see cref="T:System.Data.DataTable" /> の構造体をコピーします。 データのコピーは行いません。</summary>
      <returns>現在の <see cref="T:System.Data.DataSet" /> と同じスキーマを持つが、データが格納されていない新しい <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.Copy">
      <summary>この <see cref="T:System.Data.DataSet" /> の構造体だけでなくデータもコピーします。</summary>
      <returns>この <see cref="T:System.Data.DataSet" /> と同じ構造体 (テーブル スキーマ、リレーションシップ、および制約) とデータを持つ新しい <see cref="T:System.Data.DataSet" />。

これらのクラスがサブクラス化されている場合は、コピーも同じサブクラスになります。</returns>
    </member>
    <member name="M:System.Data.DataSet.CreateDataReader">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> ごとに 1 つの結果セットを含む <see cref="T:System.Data.DataTable" /> を返します。順序は、<see cref="P:System.Data.DataSet.Tables" /> コレクション内のテーブルでの出現順序と同じです。</summary>
      <returns>ソースの <see cref="T:System.Data.DataTableReader" /> 内に格納されている <see cref="T:System.Data.DataTable" /> インスタンスに対応する結果セットを 1 つ以上格納している <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])">
      <summary>1 つの <see cref="T:System.Data.DataTableReader" /> につき 1 つの結果セットを含む <see cref="T:System.Data.DataTable" /> を返します。</summary>
      <param name="dataTables">
        <see cref="T:System.Data.DataTableReader" /> で返される結果セットの順序を示す、DataTable の配列。</param>
      <returns>ソースの <see cref="T:System.Data.DataTableReader" /> 内に格納されている <see cref="T:System.Data.DataTable" /> インスタンスに対応する結果セットを 1 つ以上格納している <see cref="T:System.Data.DataSet" />。 返される結果セットの順序は、<paramref name="dataTables" /> パラメーターにより指定されます。</returns>
    </member>
    <member name="P:System.Data.DataSet.DataSetName">
      <summary>現在の <see cref="T:System.Data.DataSet" /> の名前を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> の名前。</returns>
    </member>
    <member name="P:System.Data.DataSet.DefaultViewManager">
      <summary>カスタム <see cref="T:System.Data.DataSet" /> を使用してフィルター処理、検索、移動の各操作を行うことができる、<see cref="T:System.Data.DataViewManager" /> に格納されているデータのカスタム ビューを取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataViewManager" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" /> を判別します。</summary>
      <param name="info">リモート処理のシナリオで逆シリアル化の間に <see langword="DataSet" /> の保護されたコンストラクター <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> を起動するために使用される <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">リモート処理のシナリオで逆シリアル化の間に <see langword="DataSet" /> の保護されたコンストラクター <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> を起動するために使用される <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
      <returns>ペイロードのスキーマ情報が省略されているかどうかを示す、<see cref="T:System.Data.SchemaSerializationMode" /> 列挙体。</returns>
    </member>
    <member name="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)">
      <summary>
        <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" /> を判別します。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> の逆シリアル化の際に渡される <see cref="T:System.Data.DataSet" /> インスタンス。</param>
      <returns>ペイロードのスキーマ情報が省略されているかどうかを示す、<see cref="T:System.Data.SchemaSerializationMode" /> 列挙体。</returns>
    </member>
    <member name="M:System.Data.DataSet.EndInit">
      <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Data.DataSet" /> の初期化を終了します。 初期化は実行時に発生します。</summary>
    </member>
    <member name="P:System.Data.DataSet.EnforceConstraints">
      <summary>更新操作を試みたときに操作が制約規則に従っているかどうかを示す値を取得または設定します。</summary>
      <returns>ルールが適用されるかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。 既定値は、<see langword="true" /> です。</returns>
      <exception cref="T:System.Data.ConstraintException">1 つ以上の制約を適用できません。</exception>
    </member>
    <member name="P:System.Data.DataSet.ExtendedProperties">
      <summary>
        <see langword="DataSet" /> に関連付けられている、カスタマイズされたユーザー情報のコレクションを取得します。</summary>
      <returns>すべてのカスタム ユーザー情報が含まれる <see cref="T:System.Data.PropertyCollection" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetChanges">
      <summary>前回 <see cref="T:System.Data.DataSet" /> を読み取るか、<see cref="M:System.Data.DataSet.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更が格納されているこのデータセットのコピーを取得します。</summary>
      <returns>この <see cref="T:System.Data.DataSet" /> の変更内容のコピー。これに対してアクションを実行した後、<see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> を使って元のデータにマージできます。 変更された行が見つからない場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetChanges(System.Data.DataRowState)">
      <summary>前回 <see cref="T:System.Data.DataSet" /> を読み取るか、<see cref="M:System.Data.DataSet.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更が格納されているこのデータセットのコピーを、<see cref="T:System.Data.DataRowState" /> によってフィルター処理した後で取得します。</summary>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 値のいずれか 1 つ。</param>
      <returns>アクションを実行した後、<see cref="T:System.Data.DataSet" /> を使用して元のデータセットにマージするために使用できる、<see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> のフィルター処理後のコピー。 必要な <see cref="T:System.Data.DataRowState" /> の行が見つからない場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>データセットの <see cref="T:System.Xml.Schema.XmlSchemaSet" /> のコピーを取得します。</summary>
      <param name="schemaSet">指定されたスキーマ セット。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> のコピー。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化情報オブジェクトを、<see cref="T:System.Data.DataSet" /> のシリアル化に必要なデータで事前設定します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> と関連付けるシリアル化データを保持する <see cref="T:System.Data.DataSet" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けるシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Data.DataSet" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Data.DataSet.GetSchemaSerializable">
      <summary>シリアル化することができる <see cref="T:System.Xml.Schema.XmlSchema" /> インスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>バイナリまたは XML ストリームからテーブル データを逆シリアル化します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンス。</param>
      <param name="context">ストリーム コンテキスト。</param>
    </member>
    <member name="M:System.Data.DataSet.GetXml">
      <summary>
        <see cref="T:System.Data.DataSet" /> に格納されているデータの XML 表現を返します。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> に格納されているデータの表現である文字列。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetXmlSchema">
      <summary>
        <see cref="T:System.Data.DataSet" /> に格納されているデータの XML 表現の XML スキーマを返します。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> に格納されているデータの XML 表現の XML スキーマである文字列。</returns>
    </member>
    <member name="M:System.Data.DataSet.HasChanges">
      <summary>
        <see cref="T:System.Data.DataSet" /> に新しい行、削除された行、変更された行などの変更があるかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> に変更がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.HasChanges(System.Data.DataRowState)">
      <summary>
        <see cref="T:System.Data.DataSet" /> に <see cref="T:System.Data.DataRowState" /> でフィルター処理された新しい行、削除された行、変更された行などの変更があるかどうかを示す値を取得します。</summary>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 値のいずれか 1 つ。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> に変更がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.HasErrors">
      <summary>この <see cref="T:System.Data.DataTable" /> 内の <see cref="T:System.Data.DataSet" /> オブジェクトのいずれかにエラーがあるかどうかを示す値を取得します。</summary>
      <returns>テーブルにエラーが含まれている場合は <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</returns>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])">
      <summary>指定した <see cref="T:System.IO.Stream" /> の XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</summary>
      <param name="stream">スキーマの読み出し元の <see langword="Stream" />。</param>
      <param name="nsArray">スキーマ推論から除外する名前空間 URI (Uniform Resource Identifier) 文字列の配列。</param>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])">
      <summary>指定した <see cref="T:System.IO.TextReader" /> の XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</summary>
      <param name="reader">スキーマの読み出し元の <see langword="TextReader" />。</param>
      <param name="nsArray">スキーマ推論から除外する名前空間 URI (Uniform Resource Identifier) 文字列の配列。</param>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])">
      <summary>指定したファイルの XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</summary>
      <param name="fileName">スキーマの読み込み元の (パスを含む) ファイル名。</param>
      <param name="nsArray">スキーマ推論から除外する名前空間 URI (Uniform Resource Identifier) 文字列の配列。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> に設定されていません。</exception>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])">
      <summary>指定した <see cref="T:System.Xml.XmlReader" /> の XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</summary>
      <param name="reader">スキーマの読み出し元の <see langword="XMLReader" />。</param>
      <param name="nsArray">スキーマ推論から除外する名前空間 URI (Uniform Resource Identifier) 文字列の配列。</param>
    </member>
    <member name="E:System.Data.DataSet.Initialized">
      <summary>
        <see cref="T:System.Data.DataSet" /> が初期化された後に発生します。</summary>
    </member>
    <member name="M:System.Data.DataSet.InitializeDerivedDataSet">
      <summary>バイナリまたは XML ストリームからデータセットのすべてのテーブル データを逆シリアル化します。</summary>
    </member>
    <member name="M:System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see langword="DataSet" /> のシリアル化された表現の形式を検査します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
      <returns>指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" /> がバイナリ形式でシリアル化された <see langword="true" /> を表す場合は <see langword="DataSet" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.IsInitialized">
      <summary>
        <see cref="T:System.Data.DataSet" /> が初期化されているかどうかを示す値を取得します。</summary>
      <returns>コンポーネントの初期化が完了していることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])">
      <summary>指定した <see cref="T:System.Data.DataSet" /> を使用するデータ ソースの値を <see cref="T:System.Data.IDataReader" /> に格納し、<see cref="T:System.Data.DataTable" /> インスタンスの配列を使用してスキーマ情報と名前空間情報を指定します。</summary>
      <param name="reader">1 つ以上の結果セットを含む <see cref="T:System.Data.IDataReader" />。</param>
      <param name="loadOption">
        <see cref="T:System.Data.LoadOption" /> 列挙体の値。<see cref="T:System.Data.DataTable" /> 内の <see cref="T:System.Data.DataSet" /> インスタンスに既に含まれている行を同じ主キーを持つ受信した行と結合する方法を示します。</param>
      <param name="tables">
        <see cref="T:System.Data.DataTable" /> メソッドが名前と名前空間の情報を取得する、<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> インスタンスの配列。 これらのテーブルは、この <see cref="T:System.Data.DataTableCollection" /> に格納されている <see cref="T:System.Data.DataSet" /> のメンバーである必要があります。</param>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])">
      <summary>指定した <see cref="T:System.Data.DataSet" /> を使用するデータ ソースの値を <see cref="T:System.Data.IDataReader" /> に格納し、<see cref="T:System.Data.DataTable" /> インスタンスの配列を使用してスキーマ情報と名前空間情報を指定します。</summary>
      <param name="reader">1 つ以上の結果セットを含む <see cref="T:System.Data.IDataReader" />。</param>
      <param name="loadOption">
        <see cref="T:System.Data.LoadOption" /> 列挙体の値。<see cref="T:System.Data.DataTable" /> 内の <see cref="T:System.Data.DataSet" /> インスタンスに既に含まれている行を同じ主キーを持つ受信した行と結合する方法を示します。</param>
      <param name="errorHandler">データの読み込み中にエラーが発生した場合に呼び出される <see cref="T:System.Data.FillErrorEventHandler" /> デリゲート。</param>
      <param name="tables">
        <see cref="T:System.Data.DataTable" /> メソッドが名前と名前空間の情報を取得する、<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> インスタンスの配列。</param>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])">
      <summary>指定した <see cref="T:System.Data.DataSet" /> を使用するデータ ソースの値を <see cref="T:System.Data.IDataReader" /> に格納し、文字列の配列を使用して <see langword="DataSet" /> 内のテーブルの名前を指定します。</summary>
      <param name="reader">1 つ以上の結果セットを含む <see cref="T:System.Data.IDataReader" />。</param>
      <param name="loadOption">
        <see cref="T:System.Data.LoadOption" /> 列挙体の値。<see cref="T:System.Data.DataTable" /> 内の <see langword="DataSet" /> インスタンスに既に含まれている行を同じ主キーを持つ受信した行と結合する方法を示します。</param>
      <param name="tables">
        <see langword="Load" /> メソッドがテーブル名の情報を取得する、文字列の配列。</param>
    </member>
    <member name="P:System.Data.DataSet.Locale">
      <summary>テーブル内の文字列の比較に使用するロケール情報を取得または設定します。</summary>
      <returns>ユーザーのコンピューターのロケールについてのデータが格納されている <see cref="T:System.Globalization.CultureInfo" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataRow[])">
      <summary>
        <see cref="T:System.Data.DataRow" /> オブジェクトの配列を現在の <see cref="T:System.Data.DataSet" /> にマージします。</summary>
      <param name="rows">
        <see langword="DataRow" /> にマージされる <see langword="DataSet" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)">
      <summary>
        <see cref="T:System.Data.DataRow" /> オブジェクトの配列を現在の <see cref="T:System.Data.DataSet" /> にマージします。指定した引数に従って、この <see langword="DataSet" /> に行われた変更を保持または破棄し、互換性のないスキーマを処理します。</summary>
      <param name="rows">
        <see cref="T:System.Data.DataRow" /> にマージされる <see langword="DataSet" /> オブジェクトの配列。</param>
      <param name="preserveChanges">
        <see langword="true" /> に対して行われた変更を保持するには <see langword="DataSet" />。保持しない場合は <see langword="false" />。</param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> およびそのスキーマを現在の <see langword="DataSet" /> にマージします。</summary>
      <param name="dataSet">データとスキーマをマージする対象の <see langword="DataSet" />。</param>
      <exception cref="T:System.Data.ConstraintException">1 つ以上の制約を有効にできません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> およびそのスキーマを現在の <see langword="DataSet" /> にマージします。この <see langword="DataSet" /> に対して行われた変更は、指定した引数に従って保持または破棄します。</summary>
      <param name="dataSet">データとスキーマをマージする対象の <see langword="DataSet" />。</param>
      <param name="preserveChanges">現在の <see langword="DataSet" /> に対して行われた変更を保持するには <see langword="true" />。保持しない場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> およびそのスキーマを現在の <see langword="DataSet" /> にマージします。指定した引数に従って、この <see langword="DataSet" /> に行われた変更を保持または破棄し、互換性のないスキーマを処理します。</summary>
      <param name="dataSet">データとスキーマをマージする対象の <see langword="DataSet" />。</param>
      <param name="preserveChanges">現在の <see langword="DataSet" /> に対して行われた変更を保持するには <see langword="true" />。保持しない場合は <see langword="false" />。</param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか 1 つ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataTable)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> およびそのスキーマを現在の <see cref="T:System.Data.DataSet" /> にマージします。</summary>
      <param name="table">データとスキーマをマージする対象の <see cref="T:System.Data.DataTable" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> およびそのスキーマを現在の <see langword="DataSet" /> にマージします。指定した引数に従って、この <see langword="DataSet" /> に行われた変更を保持または破棄し、互換性のないスキーマを処理します。</summary>
      <param name="table">データとスキーマをマージする対象の <see langword="DataTable" />。</param>
      <param name="preserveChanges">
        <see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか 1 つ。</param>
      <param name="missingSchemaAction">
        <see langword="true" /> に対して行われた変更を保持するには <see langword="DataSet" />。保持しない場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="E:System.Data.DataSet.MergeFailed">
      <summary>ターゲットとソースの <see cref="T:System.Data.DataRow" /> に同じ主キー値が格納されていて、<see cref="P:System.Data.DataSet.EnforceConstraints" /> が true に設定されているときに発生します。</summary>
    </member>
    <member name="P:System.Data.DataSet.Namespace">
      <summary>
        <see cref="T:System.Data.DataSet" /> の名前空間を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> の名前空間。</returns>
      <exception cref="T:System.ArgumentException">この名前空間には既にデータが格納されています。</exception>
    </member>
    <member name="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
        <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> イベントを発生させます。</summary>
      <param name="pcevent">イベント データを格納している <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)">
      <summary>
        <see cref="T:System.Data.DataRelation" /> から <see cref="T:System.Data.DataTable" /> オブジェクトが削除されたときに発生します。</summary>
      <param name="relation">削除する <see cref="T:System.Data.DataRelation" />。</param>
    </member>
    <member name="M:System.Data.DataSet.OnRemoveTable(System.Data.DataTable)">
      <summary>
        <see cref="T:System.Data.DataTable" /> から <see cref="T:System.Data.DataSet" /> が削除されたときに発生します。</summary>
      <param name="table">削除する <see cref="T:System.Data.DataTable" />。</param>
    </member>
    <member name="P:System.Data.DataSet.Prefix">
      <summary>
        <see cref="T:System.Data.DataSet" /> の名前空間に別名を付ける XML プリフィックスを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 名前空間の XML プリフィックス。</returns>
    </member>
    <member name="M:System.Data.DataSet.RaisePropertyChanging(System.String)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> プロパティがこれから変更されるという通知を送信します。</summary>
      <param name="name">これから変更されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.Stream)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> を使用して、XML スキーマとデータを <see cref="T:System.IO.Stream" /> に読み込みます。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> から派生するオブジェクト。</param>
      <returns>データを読み込むために使用する <see cref="T:System.Data.XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.IO.Stream" /> を使用して、XML スキーマとデータを <see cref="T:System.Data.XmlReadMode" /> に読み込みます。</summary>
      <param name="stream">読み取り元の <see cref="T:System.IO.Stream" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 値のいずれか 1 つ。</param>
      <returns>データを読み込むために使用する <see langword="XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.TextReader)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> を使用して、XML スキーマとデータを <see cref="T:System.IO.TextReader" /> に読み込みます。</summary>
      <param name="reader">スキーマおよびデータの読み出し元の <see langword="TextReader" />。</param>
      <returns>データを読み込むために使用する <see cref="T:System.Data.XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.IO.TextReader" /> を使用して、XML スキーマとデータを <see cref="T:System.Data.XmlReadMode" /> に読み込みます。</summary>
      <param name="reader">読み取り元の <see cref="T:System.IO.TextReader" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 値のいずれか。</param>
      <returns>データを読み込むために使用する <see langword="XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.String)">
      <summary>指定したファイルを使用して、XML スキーマとデータを <see cref="T:System.Data.DataSet" /> に読み込みます。</summary>
      <param name="fileName">読み込み元の (パスを含む) ファイル名。</param>
      <returns>データを読み込むために使用する <see langword="XmlReadMode" />。</returns>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> に設定されていません。</exception>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)">
      <summary>指定したファイルと <see cref="T:System.Data.DataSet" /> を使用して、XML スキーマとデータを <see cref="T:System.Data.XmlReadMode" /> に読み込みます。</summary>
      <param name="fileName">読み込み元の (パスを含む) ファイル名。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 値のいずれか 1 つ。</param>
      <returns>データを読み込むために使用する <see langword="XmlReadMode" />。</returns>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> に設定されていません。</exception>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> を使用して、XML スキーマとデータを <see cref="T:System.Xml.XmlReader" /> に読み込みます。</summary>
      <param name="reader">読み取り元の <see cref="T:System.Xml.XmlReader" />。</param>
      <returns>データを読み込むために使用する <see langword="XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.Xml.XmlReader" /> を使用して、XML スキーマとデータを <see cref="T:System.Data.XmlReadMode" /> に読み込みます。</summary>
      <param name="reader">読み取り元の <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 値のいずれか 1 つ。</param>
      <returns>データを読み込むために使用する <see langword="XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)">
      <summary>指定した <see cref="T:System.IO.Stream" /> から <see cref="T:System.Data.DataSet" /> に XML スキーマを読み込みます。</summary>
      <param name="stream">読み取り元の <see cref="T:System.IO.Stream" />。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)">
      <summary>指定した <see cref="T:System.IO.TextReader" /> から <see cref="T:System.Data.DataSet" /> に XML スキーマを読み込みます。</summary>
      <param name="reader">読み取り元の <see cref="T:System.IO.TextReader" />。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.String)">
      <summary>指定したファイルから <see cref="T:System.Data.DataSet" /> に XML スキーマを読み込みます。</summary>
      <param name="fileName">読み込み元の (パスを含む) ファイル名。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> に設定されていません。</exception>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)">
      <summary>指定した <see cref="T:System.Xml.XmlReader" /> から <see cref="T:System.Data.DataSet" /> に XML スキーマを読み込みます。</summary>
      <param name="reader">読み取り元の <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)">
      <summary>属性を無視して、空のデータセットを返します。</summary>
      <param name="reader">指定された XML リーダー。</param>
    </member>
    <member name="M:System.Data.DataSet.RejectChanges">
      <summary>この <see cref="T:System.Data.DataSet" /> を作成するか、前回 <see cref="M:System.Data.DataSet.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更をロールバックします。</summary>
    </member>
    <member name="P:System.Data.DataSet.Relations">
      <summary>テーブルをリンクし、親テーブルから子テーブルへ移動できるようにするリレーションシップのコレクションが取得されます。</summary>
      <returns>
        <see cref="T:System.Data.DataRelationCollection" /> オブジェクトのコレクションを格納している <see cref="T:System.Data.DataRelation" />。 <see cref="T:System.Data.DataRelation" /> オブジェクトが存在しない場合、空のコレクションが返されます。</returns>
    </member>
    <member name="P:System.Data.DataSet.RemotingFormat">
      <summary>リモート処理中に使用される <see cref="T:System.Data.SerializationFormat" /> の <see cref="T:System.Data.DataSet" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.SerializationFormat" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.DataSet.Reset">
      <summary>すべてのテーブルをクリアし、<see cref="T:System.Data.DataSet" />からすべての関係、外部の制約、テーブルを削除します。 サブクラスが <see cref="M:System.Data.DataSet.Reset" /> をオーバーライドして <see cref="T:System.Data.DataSet" /> を元の状態に戻す必要があります。</summary>
    </member>
    <member name="P:System.Data.DataSet.SchemaSerializationMode">
      <summary>
        <see cref="T:System.Data.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ShouldSerializeRelations">
      <summary>
        <see cref="P:System.Data.DataSet.Relations" /> プロパティを永続化する必要があるかどうかを示す値を取得します。</summary>
      <returns>プロパティの値が既定値から変更されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ShouldSerializeTables">
      <summary>
        <see cref="P:System.Data.DataSet.Tables" /> プロパティを永続化する必要があるかどうかを示す値を取得します。</summary>
      <returns>プロパティの値が既定値から変更されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.Site">
      <summary>
        <see cref="T:System.ComponentModel.ISite" /> の <see cref="T:System.Data.DataSet" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" /> の <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />」をご覧ください。</returns>
    </member>
    <member name="M:System.Data.DataSet.System#ComponentModel#IListSource#GetList">
      <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IListSource.GetList" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IListSource.GetList" />」をご覧ください。</returns>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />」をご覧ください。</returns>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />」をご覧ください。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />」をご覧ください。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="P:System.Data.DataSet.Tables">
      <summary>
        <see cref="T:System.Data.DataSet" /> に格納されているテーブルのコレクションを取得します。</summary>
      <returns>この <see cref="T:System.Data.DataTableCollection" /> に格納されている <see cref="T:System.Data.DataSet" />。 <see cref="T:System.Data.DataTable" /> オブジェクトが存在しない場合、空のコレクションが返されます。</returns>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.Stream)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> を使用して <see cref="T:System.IO.Stream" /> の現在のデータを書き込みます。</summary>
      <param name="stream">ファイルに書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.IO.Stream" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。 スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</summary>
      <param name="stream">ファイルに書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクト。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.TextWriter)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> を使用して <see cref="T:System.IO.TextWriter" /> の現在のデータを書き込みます。</summary>
      <param name="writer">書き込む対象の <see cref="T:System.IO.TextWriter" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.IO.TextWriter" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。 スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</summary>
      <param name="writer">ドキュメントの書き込みに使用する <see cref="T:System.IO.TextWriter" /> オブジェクト。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.String)">
      <summary>指定したファイルに、<see cref="T:System.Data.DataSet" /> の現在のデータを書き込みます。</summary>
      <param name="fileName">書き込み先の (パスを含む) ファイル名。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> に設定されていません。</exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを、指定したファイルに書き込みます。オプションでスキーマを書き込むこともできます。 スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</summary>
      <param name="fileName">書き込み先の (パスを含む) ファイル名。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 値のいずれか。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> に設定されていません。</exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> に、<see cref="T:System.Xml.XmlWriter" /> の現在のデータを書き込みます。</summary>
      <param name="writer">書き込みに使用する <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.Xml.XmlWriter" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。 スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</summary>
      <param name="writer">書き込みに使用する <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)">
      <summary>XML スキーマとして <see cref="T:System.Data.DataSet" /> 構造体を指定した <see cref="T:System.IO.Stream" /> オブジェクトに書き込みます。</summary>
      <param name="stream">ファイルに書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})">
      <summary>XML スキーマとして <see cref="T:System.Data.DataSet" /> 構造体を指定した <see cref="T:System.IO.Stream" /> オブジェクトに書き込みます。</summary>
      <param name="stream">書き込み先の <see cref="T:System.IO.Stream" /> オブジェクト。</param>
      <param name="multipleTargetConverter">
        <see cref="T:System.Type" /> を文字列に変換するために使用するデリゲート。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)">
      <summary>XML スキーマとして <see cref="T:System.Data.DataSet" /> 構造体を指定した <see cref="T:System.IO.TextWriter" /> オブジェクトに書き込みます。</summary>
      <param name="writer">書き込む対象の <see cref="T:System.IO.TextWriter" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})">
      <summary>指定した <see cref="T:System.Data.DataSet" /> に対し、<see cref="T:System.IO.TextWriter" /> 構造体を XML スキーマとして書き込みます。</summary>
      <param name="writer">書き込み先の <see cref="T:System.IO.TextWriter" /> オブジェクト。</param>
      <param name="multipleTargetConverter">
        <see cref="T:System.Type" /> を文字列に変換するために使用するデリゲート。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.String)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 構造体を XML スキーマとしてファイルに書き込みます。</summary>
      <param name="fileName">書き込み先の (パスを含む) ファイル名。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> に設定されていません。</exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})">
      <summary>
        <see cref="T:System.Data.DataSet" /> 構造体を XML スキーマとしてファイルに書き込みます。</summary>
      <param name="fileName">書き込み先のファイルの名前。</param>
      <param name="multipleTargetConverter">
        <see cref="T:System.Type" /> を文字列に変換するために使用するデリゲート。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 構造体を XML スキーマとして <see cref="T:System.Xml.XmlWriter" /> オブジェクトに書き込みます。</summary>
      <param name="writer">書き込み先の <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})">
      <summary>指定した <see cref="T:System.Data.DataSet" /> に対し、<see cref="T:System.Xml.XmlWriter" /> 構造体を XML スキーマとして書き込みます。</summary>
      <param name="writer">書き込み先の <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</param>
      <param name="multipleTargetConverter">
        <see cref="T:System.Type" /> を文字列に変換するために使用するデリゲート。</param>
    </member>
    <member name="T:System.Data.DataSetDateTime">
      <summary>
        <see cref="T:System.DateTime" /> 内の <see cref="T:System.Data.DataSet" /> 列のシリアル化形式を記述します。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Local">
      <summary>
        <see langword="DateTime" /> は常に Local として格納されます。 このモードの列に <see cref="F:System.Data.DataSetDateTime.Utc" /> または <see cref="F:System.Data.DataSetDateTime.Unspecified" /> が割り当てられている場合、最初に Local に変換されます。 このモードのシリアル化は常に Local として実行されます。 シリアル化の際にはオフセットが発生します。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Unspecified">
      <summary>
        <see langword="DateTime" /> は常に Unspecified として格納されます。 このモードの列に <see cref="F:System.Data.DataSetDateTime.Local" /> または <see cref="F:System.Data.DataSetDateTime.Utc" /> が割り当てられている場合、最初に <see cref="F:System.Data.DataSetDateTime.Unspecified" /> に変換されます。 このモードのシリアル化では、オフセットは発生しません。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.UnspecifiedLocal">
      <summary>
        <see langword="DateTime" /> は Unspecified として格納されます。 このモードの列に <see cref="F:System.Data.DataSetDateTime.Local" /> または <see cref="F:System.Data.DataSetDateTime.Utc" /> が割り当てられている場合、最初に <see cref="F:System.Data.DataSetDateTime.Unspecified" /> に変換されます。 このモードのシリアル化では、オフセットが発生します。 これは既定の動作であり、下位互換性があります。 このオプションはストレージにおける Unspecified であると考えられますが、シリアル化の際には <see cref="F:System.Data.DataSetDateTime.Local" /> に似たオフセットが適用されます。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Utc">
      <summary>
        <see langword="DateTime" /> は世界協定時刻 (UTC) で格納されます。 このモードの列に <see cref="F:System.Data.DataSetDateTime.Local" /> または <see cref="F:System.Data.DataSetDateTime.Unspecified" /> が割り当てられている場合、最初に <see langword="Utc" /> 形式に変換されます。 このモードのシリアル化は常に <see langword="Utc" /> として実行されます。 シリアル化の際にオフセットは発生しません。</summary>
    </member>
    <member name="T:System.Data.DataSysDescriptionAttribute">
      <summary>プロパティ、イベント、またはエクステンダーを作成し、説明を付けます。 メンバーを参照するときに、ビジュアル デザイナーでこの説明を表示できます。</summary>
    </member>
    <member name="M:System.Data.DataSysDescriptionAttribute.#ctor(System.String)">
      <summary>説明文字列を指定して、<see cref="T:System.Data.DataSysDescriptionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="description">説明文字列。</param>
    </member>
    <member name="P:System.Data.DataSysDescriptionAttribute.Description">
      <summary>説明のテキストを取得します。</summary>
      <returns>説明文字列。</returns>
    </member>
    <member name="T:System.Data.DataTable">
      <summary>メモリ内データの 1 つのテーブルを表します。</summary>
    </member>
    <member name="M:System.Data.DataTable.#ctor">
      <summary>引数を指定せずに、<see cref="T:System.Data.DataTable" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.DataTable" /> と <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を使用して、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">指定したシリアル化ストリームの転送元と転送先。</param>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.String)">
      <summary>指定したテーブル名を使用して <see cref="T:System.Data.DataTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tableName">テーブルに付ける名前。 <paramref name="tableName" /> が <see langword="null" /> または空の文字列の場合は、<see cref="T:System.Data.DataTableCollection" /> に追加したときに既定の名前が付けられます。</param>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.String,System.String)">
      <summary>指定したテーブル名と名前空間を使用して、<see cref="T:System.Data.DataTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tableName">テーブルに付ける名前。 <paramref name="tableName" /> が <see langword="null" /> または空の文字列の場合は、<see cref="T:System.Data.DataTableCollection" /> に追加したときに既定の名前が付けられます。</param>
      <param name="tableNamespace">
        <see langword="DataTable" /> に格納されているデータの XML 表現の名前空間。</param>
    </member>
    <member name="M:System.Data.DataTable.AcceptChanges">
      <summary>前回 <see cref="M:System.Data.DataTable.AcceptChanges" /> を呼び出した以降にこのテーブルに対して行われたすべての変更をコミットします。</summary>
    </member>
    <member name="M:System.Data.DataTable.BeginInit">
      <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Data.DataTable" /> の初期化を開始します。 初期化は実行時に発生します。</summary>
    </member>
    <member name="M:System.Data.DataTable.BeginLoadData">
      <summary>データを読み込む間、通知、インデックスの維持、および制約をオフにします。</summary>
    </member>
    <member name="P:System.Data.DataTable.CaseSensitive">
      <summary>テーブル内の文字列比較で大文字と小文字を区別するかどうかを示します。</summary>
      <returns>比較で大文字と小文字を区別する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は親 <see cref="T:System.Data.DataSet" /> オブジェクトの <see cref="P:System.Data.DataSet.CaseSensitive" /> プロパティに設定します。<see cref="T:System.Data.DataTable" /> とは独立して <see cref="T:System.Data.DataSet" /> を作成した場合は <see langword="false" /> に設定します。</returns>
    </member>
    <member name="P:System.Data.DataTable.ChildRelations">
      <summary>この <see cref="T:System.Data.DataTable" /> の子リレーションシップのコレクションを取得します。</summary>
      <returns>テーブルの子リレーションを格納している <see cref="T:System.Data.DataRelationCollection" />。 <see cref="T:System.Data.DataRelation" /> オブジェクトが存在しない場合、空のコレクションが返されます。</returns>
    </member>
    <member name="M:System.Data.DataTable.Clear">
      <summary>
        <see cref="T:System.Data.DataTable" /> からすべてのデータを消去します。</summary>
    </member>
    <member name="M:System.Data.DataTable.Clone">
      <summary>すべての <see cref="T:System.Data.DataTable" /> スキーマおよび制約を含め <see cref="T:System.Data.DataTable" /> の構造体のクローンを作成します。</summary>
      <returns>現在の <see cref="T:System.Data.DataTable" /> と同じスキーマを持つ新しい <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="E:System.Data.DataTable.ColumnChanged">
      <summary>
        <see cref="T:System.Data.DataColumn" /> 内の指定した <see cref="T:System.Data.DataRow" /> の値が変更された後に発生します。</summary>
    </member>
    <member name="E:System.Data.DataTable.ColumnChanging">
      <summary>
        <see cref="T:System.Data.DataColumn" /> 内の指定した <see cref="T:System.Data.DataRow" /> の値が変更されているときに発生します。</summary>
    </member>
    <member name="P:System.Data.DataTable.Columns">
      <summary>このテーブルに属する列のコレクションを取得します。</summary>
      <returns>テーブルの <see cref="T:System.Data.DataColumnCollection" /> オブジェクトのコレクションを格納している <see cref="T:System.Data.DataColumn" />。 <see cref="T:System.Data.DataColumn" /> オブジェクトが存在しない場合、空のコレクションが返されます。</returns>
    </member>
    <member name="M:System.Data.DataTable.Compute(System.String,System.String)">
      <summary>フィルター基準を満たしている現在の行で指定した式を計算します。</summary>
      <param name="expression">計算する式。</param>
      <param name="filter">式で評価される行を制限するフィルター。</param>
      <returns>計算の結果に設定された <see cref="T:System.Object" />。 式が null に評価された場合、戻り値は <see cref="F:System.DBNull.Value" /> です。</returns>
    </member>
    <member name="P:System.Data.DataTable.Constraints">
      <summary>このテーブルに保持されている制約のコレクションを取得します。</summary>
      <returns>テーブルの <see cref="T:System.Data.ConstraintCollection" /> オブジェクトのコレクションを格納している <see cref="T:System.Data.Constraint" />。 <see cref="T:System.Data.Constraint" /> オブジェクトが存在しない場合、空のコレクションが返されます。</returns>
    </member>
    <member name="M:System.Data.DataTable.Copy">
      <summary>この <see cref="T:System.Data.DataTable" /> の構造体だけでなくデータもコピーします。</summary>
      <returns>この <see cref="T:System.Data.DataTable" /> と同じ構造体 (テーブル スキーマおよび制約) とデータを持つ新しい <see cref="T:System.Data.DataTable" />。
これらのクラスが派生されている場合は、コピーも同じ派生クラスになります。
<see cref="M:System.Data.DataTable.Copy" /> は、新しい <see cref="T:System.Data.DataTable" /> を元の <see cref="T:System.Data.DataTable" /> と同じ構造とデータで作成します。 構造体を新しい <see cref="T:System.Data.DataTable" /> にコピーし、データをコピーしない場合は、<see cref="M:System.Data.DataTable.Clone" /> を使用します。</returns>
    </member>
    <member name="M:System.Data.DataTable.CreateDataReader">
      <summary>この <see cref="T:System.Data.DataTableReader" /> 内のデータに対応する <see cref="T:System.Data.DataTable" /> を返します。</summary>
      <returns>1 つの結果セットを格納した <see cref="T:System.Data.DataTableReader" />。ソース インスタンスである <see cref="T:System.Data.DataTable" /> に対応します。</returns>
    </member>
    <member name="M:System.Data.DataTable.CreateInstance">
      <summary>
        <see cref="T:System.Data.DataTable" /> の新しいインスタンスを作成します。</summary>
      <returns>新しい式。</returns>
    </member>
    <member name="P:System.Data.DataTable.DataSet">
      <summary>このテーブルが属する <see cref="T:System.Data.DataSet" /> を取得します。</summary>
      <returns>このテーブルが属する <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.DefaultView">
      <summary>フィルター処理されたビューまたはカーソル位置を含むことがある、テーブルのカスタマイズされたビューを取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataView" /> に関連付けられている <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.DisplayExpression">
      <summary>ユーザー インターフェイスにこのテーブルを表示するために使用する値を返す式を取得または設定します。 <see langword="DisplayExpression" /> プロパティを使用すると、ユーザー インターフェイスにこのテーブルの名前が表示されます。</summary>
      <returns>表示文字列。</returns>
    </member>
    <member name="M:System.Data.DataTable.EndInit">
      <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Data.DataTable" /> の初期化を終了します。 初期化は実行時に発生します。</summary>
    </member>
    <member name="M:System.Data.DataTable.EndLoadData">
      <summary>データを読み込んだ後、通知、インデックスの維持、および制約をオンにします。</summary>
    </member>
    <member name="P:System.Data.DataTable.ExtendedProperties">
      <summary>カスタマイズされたユーザー情報のコレクションを取得します。</summary>
      <returns>カスタム ユーザー情報が格納された <see cref="T:System.Data.PropertyCollection" />。</returns>
    </member>
    <member name="F:System.Data.DataTable.fInitInProgress">
      <summary>初期化処理中かどうかをチェックします。 初期化は実行時に発生します。</summary>
    </member>
    <member name="M:System.Data.DataTable.GetChanges">
      <summary>前回 <see cref="T:System.Data.DataTable" /> を読み取るか、<see cref="M:System.Data.DataTable.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更が格納されているこのデータセットのコピーを取得します。</summary>
      <returns>この <see cref="T:System.Data.DataTable" /> からの変更のコピー。変更がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)">
      <summary>前回 <see cref="T:System.Data.DataTable" /> を読み取るか、<see cref="M:System.Data.DataTable.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更が格納されているこのデータセットのコピーを、<see cref="T:System.Data.DataRowState" /> によってフィルター処理した後で取得します。</summary>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 値のいずれか 1 つ。</param>
      <returns>アクションを実行した後、<see cref="T:System.Data.DataTable" /> を使用して元の <see cref="T:System.Data.DataTable" /> にマージするために使用できる、<see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> のフィルター処理後のコピー。 必要な <see cref="T:System.Data.DataRowState" /> の行が見つからない場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>このメソッドは、Web サービスの <see cref="T:System.Xml.Schema.XmlSchemaSet" /> を記述する Web サービス記述言語 (WSDL) を含む <see cref="T:System.Data.DataTable" /> インスタンスを返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> インスタンス。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetErrors">
      <summary>エラーが含まれる <see cref="T:System.Data.DataRow" /> オブジェクトの配列を取得します。</summary>
      <returns>エラーが含まれる <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化情報オブジェクトを、<see cref="T:System.Data.DataTable" /> のシリアル化に必要なデータで事前設定します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトと関連付けられているシリアル化データを保持する <see cref="T:System.Data.DataTable" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納する <see cref="T:System.Data.DataTable" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</exception>
    </member>
    <member name="M:System.Data.DataTable.GetRowType">
      <summary>行の種類を取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> の型。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetSchema">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />」をご覧ください。</summary>
      <returns>
        <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> メソッドによって生成され <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> メソッドによって処理されるオブジェクトの XML 表現を記述する <see cref="T:System.Xml.Schema.XmlSchema" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.HasErrors">
      <summary>テーブルが属する <see cref="T:System.Data.DataSet" /> のいずれかのテーブルのいずれかの行にエラーがあるかどうかを示す値を取得します。</summary>
      <returns>エラーがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
      <summary>プロパティ設定、元の値、および現在の値を保持し、<see cref="T:System.Data.DataRow" /> を <see cref="T:System.Data.DataTable" /> にコピーします。</summary>
      <param name="row">インポートする <see cref="T:System.Data.DataRow" />。</param>
    </member>
    <member name="E:System.Data.DataTable.Initialized">
      <summary>
        <see cref="T:System.Data.DataTable" /> が初期化された後に発生します。</summary>
    </member>
    <member name="P:System.Data.DataTable.IsInitialized">
      <summary>
        <see cref="T:System.Data.DataTable" /> が初期化されているかどうかを示す値を取得します。</summary>
      <returns>コンポーネントが初期化を完了したことを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader)">
      <summary>指定された <see cref="T:System.Data.DataTable" /> を使用し、<see cref="T:System.Data.IDataReader" /> にデータ ソースからの値を設定します。 <see cref="T:System.Data.DataTable" /> が既に行を含んでいる場合、データ ソースからの受信データは既存の行にマージされます。</summary>
      <param name="reader">結果セットを提供する <see cref="T:System.Data.IDataReader" />。</param>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
      <summary>指定された <see cref="T:System.Data.DataTable" /> を使用し、<see cref="T:System.Data.IDataReader" /> にデータ ソースからの値を設定します。 <see langword="DataTable" /> が既に行を含んでいる場合、<paramref name="loadOption" /> パラメーターの値に従って、データ ソースからの受信データは既存の行にマージされます。</summary>
      <param name="reader">1 つ以上の結果セットを含む <see cref="T:System.Data.IDataReader" />。</param>
      <param name="loadOption">
        <see cref="T:System.Data.LoadOption" /> 列挙体の値。<see cref="T:System.Data.DataTable" /> に既に含まれている行を同じ主キーを持つ受信した行と結合する方法を示します。</param>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
      <summary>エラー処理デリゲートを使用し、指定された <see cref="T:System.Data.DataTable" /> を使用して、<see cref="T:System.Data.IDataReader" /> にデータ ソースからの値を設定します。</summary>
      <param name="reader">結果セットを提供する <see cref="T:System.Data.IDataReader" />。</param>
      <param name="loadOption">
        <see cref="T:System.Data.LoadOption" /> 列挙体の値。<see cref="T:System.Data.DataTable" /> に既に含まれている行を同じ主キーを持つ受信した行と結合する方法を示します。</param>
      <param name="errorHandler">データの読み込み中にエラーが発生した場合に呼び出される <see cref="T:System.Data.FillErrorEventHandler" /> デリゲート。</param>
    </member>
    <member name="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
      <summary>特定の行を検索し、更新します。 一致する行が見つからない場合は、指定した値を使用して新しい行が作成されます。</summary>
      <param name="values">新しい行の作成に使用する値の配列。</param>
      <param name="fAcceptChanges">変更を受け入れる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>新しい <see cref="T:System.Data.DataRow" />。</returns>
      <exception cref="T:System.ArgumentException">配列がテーブルの列数より大きいです。</exception>
      <exception cref="T:System.InvalidCastException">値が各列の型と一致していません。</exception>
      <exception cref="T:System.Data.ConstraintException">この行を追加すると、制約が無効になります。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">
        <see cref="P:System.Data.DataColumn.AllowDBNull" /> が false である列に null を格納しようとしています。</exception>
    </member>
    <member name="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
      <summary>特定の行を検索し、更新します。 一致する行が見つからない場合は、指定した値を使用して新しい行が作成されます。</summary>
      <param name="values">新しい行の作成に使用する値の配列。</param>
      <param name="loadOption">配列値を既存の行にある対応する値に適用する方法を決定するために使用します。</param>
      <returns>新しい <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.Locale">
      <summary>テーブル内の文字列の比較に使用するロケール情報を取得または設定します。</summary>
      <returns>ユーザーのコンピューターのロケールについてのデータが格納されている <see cref="T:System.Globalization.CultureInfo" />。 既定値は <see cref="T:System.Data.DataSet" /> が属する <see cref="T:System.Globalization.CultureInfo" /> オブジェクトの (<see cref="P:System.Data.DataSet.Locale" /> プロパティによって返される) <see cref="T:System.Data.DataTable" /> です。テーブルが <see cref="T:System.Data.DataSet" /> に属さない場合、既定値は現在のシステムの <see cref="T:System.Globalization.CultureInfo" /> です。</returns>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> を現在の <see cref="T:System.Data.DataTable" /> とマージします。</summary>
      <param name="table">現在の <see cref="T:System.Data.DataTable" /> とマージする <see cref="T:System.Data.DataTable" />。</param>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> を現在の <see langword="DataTable" /> とマージし、現在の <see langword="DataTable" /> の変更を保持するかどうかを指定します。</summary>
      <param name="table">現在の <see langword="DataTable" /> とマージする <see langword="DataTable" />。</param>
      <param name="preserveChanges">現在の <see langword="true" /> に対して行われた変更を保持するには <see langword="DataTable" />。保持しない場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> を現在の <see langword="DataTable" /> とマージして、現在の <see langword="DataTable" /> の変更を保持するかどうかを指定し、さらに欠けているスキーマの処理方法を指定します。</summary>
      <param name="table">現在の <see cref="T:System.Data.DataTable" /> とマージする <see cref="T:System.Data.DataTable" />。</param>
      <param name="preserveChanges">現在の <see langword="true" /> に対して行われた変更を保持するには <see cref="T:System.Data.DataTable" />。保持しない場合は <see langword="false" />。</param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか。</param>
    </member>
    <member name="P:System.Data.DataTable.MinimumCapacity">
      <summary>このテーブルの初期開始サイズを取得または設定します。</summary>
      <returns>この行の初期開始サイズ。行数で表します。 既定値は50です。</returns>
    </member>
    <member name="P:System.Data.DataTable.Namespace">
      <summary>
        <see cref="T:System.Data.DataTable" /> に格納されているデータの XML 表現の名前空間を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> の名前空間。</returns>
    </member>
    <member name="M:System.Data.DataTable.NewRow">
      <summary>テーブルと同じスキーマで新しい <see cref="T:System.Data.DataRow" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> と同じスキーマを持つ <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.NewRowArray(System.Int32)">
      <summary>
        <see cref="T:System.Data.DataRow" /> の配列を返します。</summary>
      <param name="size">配列のサイズを表す <see cref="T:System.Int32" /> 値。</param>
      <returns>新しい配列。</returns>
    </member>
    <member name="M:System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
      <summary>既存の行から新しい行を作成します。</summary>
      <param name="builder">
        <see cref="T:System.Data.DataRowBuilder" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> の派生クラス。</returns>
    </member>
    <member name="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.ColumnChanged" /> イベントを発生させます。</summary>
      <param name="e">イベント データを格納している <see cref="T:System.Data.DataColumnChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.ColumnChanging" /> イベントを発生させます。</summary>
      <param name="e">イベント データを格納している <see cref="T:System.Data.DataColumnChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントを発生させます。</summary>
      <param name="pcevent">イベント データを格納している <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)">
      <summary>
        <see cref="T:System.Data.DataTable" /> が削除されることを <see cref="T:System.Data.DataColumn" /> に通知します。</summary>
      <param name="column">削除する <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.RowChanged" /> イベントを発生させます。</summary>
      <param name="e">イベント データを格納している <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.RowChanging" /> イベントを発生させます。</summary>
      <param name="e">イベント データを格納している <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.RowDeleted" /> イベントを発生させます。</summary>
      <param name="e">イベント データを格納している <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.RowDeleting" /> イベントを発生させます。</summary>
      <param name="e">イベント データを格納している <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.TableCleared" /> イベントを発生させます。</summary>
      <param name="e">イベント データを格納している <see cref="T:System.Data.DataTableClearEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.TableClearing" /> イベントを発生させます。</summary>
      <param name="e">イベント データを格納している <see cref="T:System.Data.DataTableClearEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.TableNewRow" /> イベントを発生させます。</summary>
      <param name="e">イベント データを格納している <see cref="T:System.Data.DataTableNewRowEventArgs" />。</param>
    </member>
    <member name="P:System.Data.DataTable.ParentRelations">
      <summary>この <see cref="T:System.Data.DataTable" /> の親リレーションシップのコレクションを取得します。</summary>
      <returns>テーブルの親リレーションを格納している <see cref="T:System.Data.DataRelationCollection" />。 <see cref="T:System.Data.DataRelation" /> オブジェクトが存在しない場合、空のコレクションが返されます。</returns>
    </member>
    <member name="P:System.Data.DataTable.Prefix">
      <summary>
        <see cref="T:System.Data.DataTable" /> に格納されているデータの XML 表現の名前空間を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> のプリフィックス。</returns>
    </member>
    <member name="P:System.Data.DataTable.PrimaryKey">
      <summary>このデータ テーブルの主キーとして機能する列の配列を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</returns>
      <exception cref="T:System.Data.DataException">キーが外部キーです。</exception>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> を使用して、XML スキーマとデータを <see cref="T:System.IO.Stream" /> に読み込みます。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> から派生するオブジェクト。</param>
      <returns>データを読み込むために使用する <see cref="T:System.Data.XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> を使用して、XML スキーマとデータを <see cref="T:System.IO.TextReader" /> に読み込みます。</summary>
      <param name="reader">データを読み込むために使用する <see cref="T:System.IO.TextReader" />。</param>
      <returns>データを読み込むために使用する <see cref="T:System.Data.XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.String)">
      <summary>指定したファイルから、XML スキーマとデータを <see cref="T:System.Data.DataTable" /> に読み込みます。</summary>
      <param name="fileName">データの読み取り元のファイルの名前。</param>
      <returns>データを読み込むために使用する <see cref="T:System.Data.XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> を使用して、XML スキーマとデータを <see cref="T:System.Xml.XmlReader" /> に読み込みます。</summary>
      <param name="reader">データを読み込むために使用する <see cref="T:System.Xml.XmlReader" />。</param>
      <returns>データを読み込むために使用する <see cref="T:System.Data.XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
      <summary>指定したストリームを使用して、XML スキーマを <see cref="T:System.Data.DataTable" /> に読み込みます。</summary>
      <param name="stream">スキーマを読み込むために使用するストリーム。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> を使用して、XML スキーマを <see cref="T:System.IO.TextReader" /> に読み込みます。</summary>
      <param name="reader">スキーマ情報を読み込むために使用する <see cref="T:System.IO.TextReader" />。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.String)">
      <summary>指定したファイルから <see cref="T:System.Data.DataTable" /> に XML スキーマを読み込みます。</summary>
      <param name="fileName">スキーマ情報の読み取り元のファイルの名前。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> を使用して、XML スキーマを <see cref="T:System.Xml.XmlReader" /> に読み込みます。</summary>
      <param name="reader">スキーマ情報を読み込むために使用する <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)">
      <summary>XML ストリームから読み取ります。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.DataTable.RejectChanges">
      <summary>このテーブルを読み込むか、前回 <see cref="M:System.Data.DataTable.AcceptChanges" /> を呼び出した以降にこのテーブルに対して行われたすべての変更をロールバックします。</summary>
    </member>
    <member name="P:System.Data.DataTable.RemotingFormat">
      <summary>シリアル化形式を取得または設定します。</summary>
      <returns>
        <see langword="Binary" /> シリアル化または <see langword="Xml" /> シリアル化を指定する <see cref="T:System.Data.SerializationFormat" /> 列挙体。</returns>
    </member>
    <member name="M:System.Data.DataTable.Reset">
      <summary>
        <see cref="T:System.Data.DataTable" /> を元の状態にリセットします。 テーブルのすべてのデータ、インデックス、リレーションシップ、および列の削除をリセットします。 DataSet に DataTable が含まれている場合は、テーブルをリセットした後も、テーブルは DataSet の一部です。</summary>
    </member>
    <member name="E:System.Data.DataTable.RowChanged">
      <summary>
        <see cref="T:System.Data.DataRow" /> が正常に変更された後に発生します。</summary>
    </member>
    <member name="E:System.Data.DataTable.RowChanging">
      <summary>
        <see cref="T:System.Data.DataRow" /> が変更されているときに発生します。</summary>
    </member>
    <member name="E:System.Data.DataTable.RowDeleted">
      <summary>テーブル内の行が削除された後に発生します。</summary>
    </member>
    <member name="E:System.Data.DataTable.RowDeleting">
      <summary>テーブル内の行が削除される直前に発生します。</summary>
    </member>
    <member name="P:System.Data.DataTable.Rows">
      <summary>このテーブルに属する行のコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataRowCollection" /> オブジェクトが格納されている <see cref="T:System.Data.DataRow" />。<see cref="T:System.Data.DataRow" /> オブジェクトが存在しない場合は null 値。</returns>
    </member>
    <member name="M:System.Data.DataTable.Select">
      <summary>すべての <see cref="T:System.Data.DataRow" /> オブジェクトの配列を取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String)">
      <summary>フィルター基準と一致するすべての <see cref="T:System.Data.DataRow" /> オブジェクトの配列を取得します。</summary>
      <param name="filterExpression">行にフィルターをかけるために使用する基準。 行をフィルター処理する方法の例については、「DataView RowFilter の構文 [C#]」を参照してください。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String,System.String)">
      <summary>フィルター基準と一致するすべての <see cref="T:System.Data.DataRow" /> オブジェクトの配列を、指定した並べ替え順で取得します。</summary>
      <param name="filterExpression">行にフィルターをかけるために使用する基準。 行をフィルター処理する方法の例については、「DataView RowFilter の構文 [C#]」を参照してください。</param>
      <param name="sort">列と並べ替え方向を指定する文字列。</param>
      <returns>フィルター式と一致する <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
      <summary>フィルター基準と一致するすべての <see cref="T:System.Data.DataRow" /> オブジェクトの配列を、指定した状態と一致する並べ替え順に取得します。</summary>
      <param name="filterExpression">行にフィルターをかけるために使用する基準。 行をフィルター処理する方法の例については、「DataView RowFilter の構文 [C#]」を参照してください。</param>
      <param name="sort">列と並べ替え方向を指定する文字列。</param>
      <param name="recordStates">
        <see cref="T:System.Data.DataViewRowState" /> 値のいずれか 1 つ。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</returns>
    </member>
    <member name="P:System.Data.DataTable.Site">
      <summary>
        <see cref="T:System.ComponentModel.ISite" /> の <see cref="T:System.Data.DataTable" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" /> の <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />」をご覧ください。</summary>
      <returns>コレクションが <see cref="T:System.Collections.IList" /> オブジェクトのコレクションである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.System#ComponentModel#IListSource#GetList">
      <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IListSource.GetList" />」をご覧ください。</summary>
      <returns>オブジェクトからデータ ソースに連結できる <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />」をご覧ください。</summary>
      <returns>
        <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> メソッドによって生成され <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> メソッドによって処理されるオブジェクトの XML 表現を記述する <see cref="T:System.Xml.Schema.XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />」をご覧ください。</summary>
      <param name="reader">XmlReader。</param>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />」をご覧ください。</summary>
      <param name="writer">XmlWriter。</param>
    </member>
    <member name="E:System.Data.DataTable.TableCleared">
      <summary>
        <see cref="T:System.Data.DataTable" /> が消去された後に発生します。</summary>
    </member>
    <member name="E:System.Data.DataTable.TableClearing">
      <summary>
        <see cref="T:System.Data.DataTable" /> が削除されたときに発生します。</summary>
    </member>
    <member name="P:System.Data.DataTable.TableName">
      <summary>
        <see cref="T:System.Data.DataTable" /> の名前を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> の名前。</returns>
      <exception cref="T:System.ArgumentException">
        <see langword="null" /> または空の文字列 ("") が渡され、このテーブルはコレクションに属します。</exception>
      <exception cref="T:System.Data.DuplicateNameException">テーブルが属しているコレクションに、同じ名前のテーブルが既に含まれています。 比較では、大文字と小文字が区別されます。</exception>
    </member>
    <member name="E:System.Data.DataTable.TableNewRow">
      <summary>新しい <see cref="T:System.Data.DataRow" /> が挿入されると発生します。</summary>
    </member>
    <member name="M:System.Data.DataTable.ToString">
      <summary>
        <see cref="P:System.Data.DataTable.TableName" /> と <see cref="P:System.Data.DataTable.DisplayExpression" /> が連結された文字列として存在する場合は、これらを取得します。</summary>
      <returns>
        <see cref="P:System.Data.DataTable.TableName" /> と <see cref="P:System.Data.DataTable.DisplayExpression" /> 値で構成された文字列。</returns>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream)">
      <summary>
        <see cref="T:System.Data.DataTable" /> の現在の内容を指定された <see cref="T:System.IO.Stream" /> を使用して XML として書き込みます。</summary>
      <param name="stream">データが書き込まれるストリーム。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
      <summary>
        <see cref="T:System.Data.DataTable" /> の現在の内容を指定された <see cref="T:System.IO.Stream" /> を使用して XML として書き込みます。 テーブルのデータとその子孫をすべて保存するには、<paramref name="writeHierarchy" /> パラメーターを <see langword="true" /> に設定します。</summary>
      <param name="stream">データが書き込まれるストリーム。</param>
      <param name="writeHierarchy">
        <see langword="true" /> の場合は、現在のテーブルとその子孫の内容を書き込みます。 <see langword="false" /> (既定値) の場合は、現在のテーブルのデータのみを書き込みます。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを、指定したファイルに書き込みます。オプションでスキーマを書き込むこともできます。 スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</summary>
      <param name="stream">データが書き込まれるストリーム。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 値のいずれか。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを、指定したファイルに書き込みます。オプションでスキーマを書き込むこともできます。 スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。 テーブルのデータとその子孫をすべて保存するには、<paramref name="writeHierarchy" /> パラメーターを <see langword="true" /> に設定します。</summary>
      <param name="stream">データが書き込まれるストリーム。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つ。</param>
      <param name="writeHierarchy">
        <see langword="true" /> の場合は、現在のテーブルとその子孫の内容を書き込みます。 <see langword="false" /> (既定値) の場合は、現在のテーブルのデータのみを書き込みます。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)">
      <summary>
        <see cref="T:System.Data.DataTable" /> の現在の内容を指定された <see cref="T:System.IO.TextWriter" /> を使用して XML として書き込みます。</summary>
      <param name="writer">内容を書き込む対象の <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.DataTable" /> の現在の内容を指定された <see cref="T:System.IO.TextWriter" /> を使用して XML として書き込みます。 テーブルのデータとその子孫をすべて保存するには、<paramref name="writeHierarchy" /> パラメーターを <see langword="true" /> に設定します。</summary>
      <param name="writer">内容を書き込む対象の <see cref="T:System.IO.TextWriter" />。</param>
      <param name="writeHierarchy">
        <see langword="true" /> の場合は、現在のテーブルとその子孫の内容を書き込みます。 <see langword="false" /> (既定値) の場合は、現在のテーブルのデータのみを書き込みます。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> と <see cref="T:System.IO.TextWriter" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。 スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</summary>
      <param name="writer">ドキュメントを書き込むために使用する <see cref="T:System.IO.TextWriter" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> と <see cref="T:System.IO.TextWriter" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。 スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。 テーブルのデータとその子孫をすべて保存するには、<paramref name="writeHierarchy" /> パラメーターを <see langword="true" /> に設定します。</summary>
      <param name="writer">ドキュメントを書き込むために使用する <see cref="T:System.IO.TextWriter" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つ。</param>
      <param name="writeHierarchy">
        <see langword="true" /> の場合は、現在のテーブルとその子孫の内容を書き込みます。 <see langword="false" /> (既定値) の場合は、現在のテーブルのデータのみを書き込みます。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String)">
      <summary>指定したファイルを使用して <see cref="T:System.Data.DataTable" /> の現在の内容を XML で書き込みます。</summary>
      <param name="fileName">XML データの書き込み先ファイル。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
      <summary>指定したファイルを使用して <see cref="T:System.Data.DataTable" /> の現在の内容を XML で書き込みます。 テーブルのデータとその子孫をすべて保存するには、<paramref name="writeHierarchy" /> パラメーターを <see langword="true" /> に設定します。</summary>
      <param name="fileName">XML データの書き込み先ファイル。</param>
      <param name="writeHierarchy">
        <see langword="true" /> の場合は、現在のテーブルとその子孫の内容を書き込みます。 <see langword="false" /> (既定値) の場合は、現在のテーブルのデータのみを書き込みます。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
      <summary>指定したファイルと <see cref="T:System.Data.DataTable" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。 スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</summary>
      <param name="fileName">データが書き込まれるファイルの名前。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 値のいずれか。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
      <summary>指定したファイルと <see cref="T:System.Data.DataTable" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。 スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。 テーブルのデータとその子孫をすべて保存するには、<paramref name="writeHierarchy" /> パラメーターを <see langword="true" /> に設定します。</summary>
      <param name="fileName">データが書き込まれるファイルの名前。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つ。</param>
      <param name="writeHierarchy">
        <see langword="true" /> の場合は、現在のテーブルとその子孫の内容を書き込みます。 <see langword="false" /> (既定値) の場合は、現在のテーブルのデータのみを書き込みます。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)">
      <summary>
        <see cref="T:System.Data.DataTable" /> の現在の内容を指定された <see cref="T:System.Xml.XmlWriter" /> を使用して XML として書き込みます。</summary>
      <param name="writer">内容の書き込みに使用する <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.DataTable" /> の現在の内容を指定された <see cref="T:System.Xml.XmlWriter" /> を使用して XML として書き込みます。</summary>
      <param name="writer">内容の書き込みに使用する <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="writeHierarchy">
        <see langword="true" /> の場合は、現在のテーブルとその子孫の内容を書き込みます。 <see langword="false" /> (既定値) の場合は、現在のテーブルのデータのみを書き込みます。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> と <see cref="T:System.Xml.XmlWriter" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。 スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</summary>
      <param name="writer">ドキュメントを書き込むために使用する <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> と <see cref="T:System.Xml.XmlWriter" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。 スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。 テーブルのデータとその子孫をすべて保存するには、<paramref name="writeHierarchy" /> パラメーターを <see langword="true" /> に設定します。</summary>
      <param name="writer">ドキュメントを書き込むために使用する <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つ。</param>
      <param name="writeHierarchy">
        <see langword="true" /> の場合は、現在のテーブルとその子孫の内容を書き込みます。 <see langword="false" /> (既定値) の場合は、現在のテーブルのデータのみを書き込みます。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)">
      <summary>
        <see cref="T:System.Data.DataTable" /> の現在のデータ構造体を指定されたストリームに XML スキーマとして書き込みます。</summary>
      <param name="stream">XML スキーマが書き込まれるストリーム。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
      <summary>
        <see cref="T:System.Data.DataTable" /> の現在のデータ構造体を指定されたストリームに XML スキーマとして書き込みます。 テーブルのスキーマとその子孫をすべて保存するには、<paramref name="writeHierarchy" /> パラメーターを <see langword="true" /> に設定します。</summary>
      <param name="stream">XML スキーマが書き込まれるストリーム。</param>
      <param name="writeHierarchy">
        <see langword="true" /> の場合は、現在のテーブルとその子孫のスキーマを書き込みます。 <see langword="false" /> (既定値) の場合は、現在のテーブルのスキーマのみを書き込みます。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> を使用して、<see cref="T:System.IO.TextWriter" /> の現在のデータ構造体を XML スキーマとして書き込みます。</summary>
      <param name="writer">書き込みに使用する <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> を使用して、<see cref="T:System.IO.TextWriter" /> の現在のデータ構造体を XML スキーマとして書き込みます。 テーブルのスキーマとその子孫をすべて保存するには、<paramref name="writeHierarchy" /> パラメーターを <see langword="true" /> に設定します。</summary>
      <param name="writer">書き込みに使用する <see cref="T:System.IO.TextWriter" />。</param>
      <param name="writeHierarchy">
        <see langword="true" /> の場合は、現在のテーブルとその子孫のスキーマを書き込みます。 <see langword="false" /> (既定値) の場合は、現在のテーブルのスキーマのみを書き込みます。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.String)">
      <summary>
        <see cref="T:System.Data.DataTable" /> の現在のデータ構造体を指定されたファイルに XML スキーマとして書き込みます。</summary>
      <param name="fileName">使用するファイルの名前。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Data.DataTable" /> の現在のデータ構造体を指定されたファイルに XML スキーマとして書き込みます。 テーブルのスキーマとその子孫をすべて保存するには、<paramref name="writeHierarchy" /> パラメーターを <see langword="true" /> に設定します。</summary>
      <param name="fileName">使用するファイルの名前。</param>
      <param name="writeHierarchy">
        <see langword="true" /> の場合は、現在のテーブルとその子孫のスキーマを書き込みます。 <see langword="false" /> (既定値) の場合は、現在のテーブルのスキーマのみを書き込みます。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> を使用して、<see cref="T:System.Xml.XmlWriter" /> の現在のデータ構造体を XML スキーマとして書き込みます。</summary>
      <param name="writer">使用する <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> を使用して、<see cref="T:System.Xml.XmlWriter" /> の現在のデータ構造体を XML スキーマとして書き込みます。 テーブルのスキーマとその子孫をすべて保存するには、<paramref name="writeHierarchy" /> パラメーターを <see langword="true" /> に設定します。</summary>
      <param name="writer">ドキュメントを書き込むために使用する <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="writeHierarchy">
        <see langword="true" /> の場合は、現在のテーブルとその子孫のスキーマを書き込みます。 <see langword="false" /> (既定値) の場合は、現在のテーブルのスキーマのみを書き込みます。</param>
    </member>
    <member name="T:System.Data.DataTableClearEventArgs">
      <summary>
        <see cref="M:System.Data.DataTable.Clear" /> メソッドのデータを提供します。</summary>
    </member>
    <member name="M:System.Data.DataTableClearEventArgs.#ctor(System.Data.DataTable)">
      <summary>
        <see cref="T:System.Data.DataTableClearEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataTable">行が削除される <see cref="T:System.Data.DataTable" />。</param>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.Table">
      <summary>行が削除されるテーブルを取得します。</summary>
      <returns>行が削除される <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.TableName">
      <summary>行が削除されるテーブル名を取得します。</summary>
      <returns>テーブル名を示す <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.TableNamespace">
      <summary>行が削除されるテーブルの名前空間を取得します。</summary>
      <returns>名前空間名を示す <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.DataTableClearEventHandler">
      <summary>
        <see cref="M:System.Data.DataTable.Clear" /> メソッドを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.Data.DataTableClearEventArgs" />。</param>
    </member>
    <member name="T:System.Data.DataTableCollection">
      <summary>
        <see cref="T:System.Data.DataSet" /> のテーブルのコレクションを表します。</summary>
    </member>
    <member name="M:System.Data.DataTableCollection.Add">
      <summary>既定の名前を使用して新しい <see cref="T:System.Data.DataTable" /> オブジェクトを作成し、それをコレクションに追加します。</summary>
      <returns>新しく作成された <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.Data.DataTable)">
      <summary>指定された <see langword="DataTable" /> をコレクションに追加します。</summary>
      <param name="table">追加する <see langword="DataTable" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">このテーブルに指定した値が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">このテーブルは既にこのコレクションに属しているか、他のコレクションに属しています。</exception>
      <exception cref="T:System.Data.DuplicateNameException">コレクション内に同じ名前のテーブルがあります。 大文字と小文字は区別されません。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.String)">
      <summary>指定した名前を使用して <see cref="T:System.Data.DataTable" /> オブジェクトを作成し、このオブジェクトをコレクションに追加します。</summary>
      <param name="name">作成した <see cref="T:System.Data.DataTable" /> に付ける名前。</param>
      <returns>新しく作成された <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.Data.DuplicateNameException">コレクション内に同じ名前のテーブルがあります。 比較では、大文字と小文字が区別されません。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.String,System.String)">
      <summary>指定した名前を使用して <see cref="T:System.Data.DataTable" /> オブジェクトを作成し、このオブジェクトをコレクションに追加します。</summary>
      <param name="name">作成した <see cref="T:System.Data.DataTable" /> に付ける名前。</param>
      <param name="tableNamespace">作成した <see cref="T:System.Data.DataTable" /> に指定する名前空間。</param>
      <returns>新しく作成された <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.Data.DuplicateNameException">コレクション内に同じ名前のテーブルがあります。 比較では、大文字と小文字が区別されません。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.AddRange(System.Data.DataTable[])">
      <summary>指定した <see cref="T:System.Data.DataTable" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="tables">コレクションに追加する <see cref="T:System.Data.DataTable" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Data.DataTableCollection.CanRemove(System.Data.DataTable)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> オブジェクトをコレクションから削除できるかどうかを確認します。</summary>
      <param name="table">確認するコレクション内の <see langword="DataTable" />。</param>
      <returns>このテーブルを削除できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Clear">
      <summary>すべての <see cref="T:System.Data.DataTable" /> オブジェクトをコレクションから削除します。</summary>
    </member>
    <member name="E:System.Data.DataTableCollection.CollectionChanged">
      <summary>
        <see cref="T:System.Data.DataTableCollection" /> オブジェクトを追加または削除したことが原因で <see cref="T:System.Data.DataTable" /> が変更された後に発生します。</summary>
    </member>
    <member name="E:System.Data.DataTableCollection.CollectionChanging">
      <summary>
        <see cref="T:System.Data.DataTableCollection" /> オブジェクトを追加または削除したことが原因で <see cref="T:System.Data.DataTable" /> が変更されているときに発生します。</summary>
    </member>
    <member name="M:System.Data.DataTableCollection.Contains(System.String)">
      <summary>指定した名前の <see cref="T:System.Data.DataTable" /> オブジェクトがコレクション内に存在するかどうかを示す値を取得します。</summary>
      <param name="name">検索する <see cref="T:System.Data.DataTable" /> の名前。</param>
      <returns>指定したテーブルが存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Contains(System.String,System.String)">
      <summary>指定した名前の <see cref="T:System.Data.DataTable" /> オブジェクト、およびテーブルの名前空間がコレクション内に存在するかどうかを示す値を取得します。</summary>
      <param name="name">検索する <see cref="T:System.Data.DataTable" /> の名前。</param>
      <param name="tableNamespace">検索する <see cref="T:System.Data.DataTable" /> 名前空間の名前。</param>
      <returns>指定したテーブルが存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.CopyTo(System.Data.DataTable[],System.Int32)">
      <summary>指定したコピー先の配列のインデックスを開始位置として、現在の <see cref="T:System.Data.DataTableCollection" /> のすべての要素を 1 次元の <see cref="T:System.Array" /> にコピーします。</summary>
      <param name="array">現在の <see cref="T:System.Array" /> オブジェクトの要素をコピーする先の 1 次元 <see cref="T:System.Data.DataTableCollection" />。</param>
      <param name="index">コピーを開始するコピー先の <see cref="T:System.Array" /> インデックス。</param>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.Data.DataTable)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> オブジェクトのインデックスを取得します。</summary>
      <param name="table">検索対象の <see langword="DataTable" />。</param>
      <returns>テーブルの 0 から始まるインデックス番号。コレクション内でそのテーブルが見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.String)">
      <summary>コレクション内の、指定した名前の <see cref="T:System.Data.DataTable" /> オブジェクトのインデックスを取得します。</summary>
      <param name="tableName">検索する <see langword="DataTable" /> オブジェクトの名前。</param>
      <returns>指定した名前の <see langword="DataTable" /> の 0 から始まるインデックス番号。このテーブルがコレクション内に存在しない場合は -1。

複数のテーブルが同じ名前を持つ一方で名前空間が異なる場合は -1 を返します。 1 つのテーブル名を正確に 1 つのテーブルに一致させるときにあいまいな点があると、この呼び出しは成功しません。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.String,System.String)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> オブジェクトのコレクション内のインデックスを取得します。</summary>
      <param name="tableName">検索する <see cref="T:System.Data.DataTable" /> オブジェクトの名前。</param>
      <param name="tableNamespace">検索する <see cref="T:System.Data.DataTable" /> 名前空間の名前。</param>
      <returns>指定した名前の <see cref="T:System.Data.DataTable" /> の 0 から始まるインデックス番号。このテーブルがコレクション内に存在しない場合は -1。</returns>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.Data.DataTable" /> オブジェクトを取得します。</summary>
      <param name="index">検索する <see cref="T:System.Data.DataTable" /> の 0 から始まるインデックス。</param>
      <returns>指定したインデックスを持つ <see cref="T:System.Data.DataTable" />。それ以外の場合は <see langword="null" /><see cref="T:System.Data.DataTable" /> が存在しない場合はです。</returns>
      <exception cref="T:System.IndexOutOfRangeException">インデックス値が、コレクション内の項目数を超える値です。</exception>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.String)">
      <summary>指定した名前の <see cref="T:System.Data.DataTable" /> オブジェクトを取得します。</summary>
      <param name="name">検索する <see langword="DataTable" /> の名前。</param>
      <returns>指定した名前の <see cref="T:System.Data.DataTable" />。そのような <see cref="T:System.Data.DataTable" /> が存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.String,System.String)">
      <summary>指定した名前の <see cref="T:System.Data.DataTable" /> オブジェクトを、指定した名前空間から取得します。</summary>
      <param name="name">検索する <see langword="DataTable" /> の名前。</param>
      <param name="tableNamespace">検索する <see cref="T:System.Data.DataTable" /> 名前空間の名前。</param>
      <returns>指定した名前の <see cref="T:System.Data.DataTable" />。そのような <see cref="T:System.Data.DataTable" /> が存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.Data.DataTable)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> オブジェクトをコレクションから削除します。</summary>
      <param name="table">削除する <see langword="DataTable" />。</param>
      <exception cref="T:System.ArgumentNullException">このテーブルに指定した値が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">このテーブルはこのコレクションに属していません。

または -

このテーブルはリレーションシップの一部です。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.String)">
      <summary>指定した名前を持つ <see cref="T:System.Data.DataTable" /> オブジェクトをコレクションから削除します。</summary>
      <param name="name">削除する <see cref="T:System.Data.DataTable" /> オブジェクトの名前。</param>
      <exception cref="T:System.ArgumentException">このコレクションには指定した名前のテーブルがありません。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.String,System.String)">
      <summary>指定した名前を持つ <see cref="T:System.Data.DataTable" /> オブジェクトをコレクションから削除します。</summary>
      <param name="name">削除する <see cref="T:System.Data.DataTable" /> オブジェクトの名前。</param>
      <param name="tableNamespace">検索する <see cref="T:System.Data.DataTable" /> 名前空間の名前。</param>
      <exception cref="T:System.ArgumentException">このコレクションには指定した名前のテーブルがありません。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.RemoveAt(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.Data.DataTable" /> オブジェクトをコレクションから削除します。</summary>
      <param name="index">削除する <see langword="DataTable" /> のインデックス。</param>
      <exception cref="T:System.ArgumentException">このコレクションには指定したインデックス位置にテーブルがありません。</exception>
    </member>
    <member name="T:System.Data.DataTableExtensions">
      <summary>
        <see cref="T:System.Data.DataTable" /> クラスの拡張メソッドを定義します。 <see cref="T:System.Data.DataTableExtensions" /> は静的クラスです。</summary>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)">
      <summary>LINQ 対応の <see cref="T:System.Data.DataView" /> オブジェクトを作成して返します。</summary>
      <param name="table">LINQ 対応の <see cref="T:System.Data.DataTable" /> を作成する元となる <see cref="T:System.Data.DataView" />。</param>
      <returns>LINQ 対応の <see cref="T:System.Data.DataView" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})">
      <summary>LINQ to DataSet クエリを表す LINQ 対応の <see cref="T:System.Data.DataView" /> オブジェクトを作成して返します。</summary>
      <param name="source">LINQ 対応の <see cref="T:System.Data.DataView" /> を作成する元となる LINQ to DataSet クエリ。</param>
      <typeparam name="T">ソース シーケンスのオブジェクトの型 (通常は <see cref="T:System.Data.DataRow" />)。</typeparam>
      <returns>LINQ 対応の <see cref="T:System.Data.DataView" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクトを返します。ここで、ジェネリック パラメーター <paramref name="T" /> は <see cref="T:System.Data.DataRow" /> です。 このオブジェクトは、LINQ 式またはメソッド クエリで使用できます。</summary>
      <param name="source">列挙可能にする対象のソース <see cref="T:System.Data.DataTable" />。</param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクト。ここで、ジェネリック パラメーター <paramref name="T" /> は <see cref="T:System.Data.DataRow" /> です。</returns>
      <exception cref="T:System.ArgumentNullException">ソース <see cref="T:System.Data.DataTable" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>指定した入力 <see cref="T:System.Data.DataTable" /> オブジェクトに応じて (ジェネリック パラメーター <paramref name="T" /> は <see cref="T:System.Data.DataRow" />)、<see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクトのコピーを格納する <see cref="T:System.Data.DataRow" /> を返します。</summary>
      <param name="source">ソース <see cref="T:System.Collections.Generic.IEnumerable`1" /> シーケンス。</param>
      <typeparam name="T">ソース シーケンスのオブジェクトの型 (通常は <see cref="T:System.Data.DataRow" />)。</typeparam>
      <returns>
        <see cref="T:System.Data.DataTable" /> オブジェクト型の入力シーケンスを格納する <see cref="T:System.Data.DataRow" />。</returns>
      <exception cref="T:System.ArgumentNullException">ソース <see cref="T:System.Collections.Generic.IEnumerable`1" /> シーケンスが <see langword="null" /> で、新しいテーブルは作成できません。</exception>
      <exception cref="T:System.InvalidOperationException">ソース シーケンス内の <see cref="T:System.Data.DataRow" /> が <see cref="F:System.Data.DataRowState.Deleted" /> の状態です。
ソース シーケンスに <see cref="T:System.Data.DataRow" /> オブジェクトは格納されていません。
ソース シーケンス内の <see cref="T:System.Data.DataRow" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)">
      <summary>指定した入力 <see cref="T:System.Data.DataRow" /> オブジェクトに応じて (ジェネリック パラメーター <paramref name="T" /> は <see cref="T:System.Data.DataTable" />)、指定した <see cref="T:System.Collections.Generic.IEnumerable`1" /> に <see cref="T:System.Data.DataRow" /> オブジェクトをコピーします。</summary>
      <param name="source">ソース <see cref="T:System.Collections.Generic.IEnumerable`1" /> シーケンス。</param>
      <param name="table">コピー先 <see cref="T:System.Data.DataTable" />。</param>
      <param name="options">
        <see cref="T:System.Data.LoadOption" /> 読み込みオプションを指定する <see cref="T:System.Data.DataTable" /> 列挙体。</param>
      <typeparam name="T">ソース シーケンスのオブジェクトの型 (通常は <see cref="T:System.Data.DataRow" />)。</typeparam>
      <exception cref="T:System.ArgumentException">コピーされた <see cref="T:System.Data.DataRow" /> オブジェクトが、転送先の <see cref="T:System.Data.DataTable" /> のスキーマに適合しません。</exception>
      <exception cref="T:System.ArgumentNullException">転送元の <see cref="T:System.Collections.Generic.IEnumerable`1" /> シーケンスが <see langword="null" />、または転送先の <see cref="T:System.Data.DataTable" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">ソース シーケンス内の <see cref="T:System.Data.DataRow" /> が <see cref="F:System.Data.DataRowState.Deleted" /> の状態です。
ソース シーケンスに <see cref="T:System.Data.DataRow" /> オブジェクトは格納されていません。
ソース シーケンス内の <see cref="T:System.Data.DataRow" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
      <summary>指定した入力 <see cref="T:System.Data.DataRow" /> オブジェクトに応じて (ジェネリック パラメーター <paramref name="T" /> は <see cref="T:System.Data.DataTable" />)、指定した <see cref="T:System.Collections.Generic.IEnumerable`1" /> に <see cref="T:System.Data.DataRow" /> オブジェクトをコピーします。</summary>
      <param name="source">ソース <see cref="T:System.Collections.Generic.IEnumerable`1" /> シーケンス。</param>
      <param name="table">コピー先 <see cref="T:System.Data.DataTable" />。</param>
      <param name="options">
        <see cref="T:System.Data.LoadOption" /> 読み込みオプションを指定する <see cref="T:System.Data.DataTable" /> 列挙体。</param>
      <param name="errorHandler">エラーを処理するメソッドを表す <see cref="T:System.Data.FillErrorEventHandler" /> デリゲート。</param>
      <typeparam name="T">ソース シーケンスのオブジェクトの型 (通常は <see cref="T:System.Data.DataRow" />)。</typeparam>
      <exception cref="T:System.ArgumentException">コピーされた <see cref="T:System.Data.DataRow" /> オブジェクトが、転送先の <see cref="T:System.Data.DataTable" /> のスキーマに適合しません。</exception>
      <exception cref="T:System.ArgumentNullException">転送元の <see cref="T:System.Collections.Generic.IEnumerable`1" /> シーケンスが <see langword="null" />、または転送先の <see cref="T:System.Data.DataTable" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">ソース シーケンス内の <see cref="T:System.Data.DataRow" /> が <see cref="F:System.Data.DataRowState.Deleted" /> の状態です。

または -
ソース シーケンスに <see cref="T:System.Data.DataRow" /> オブジェクトは格納されていません。

または -
ソース シーケンス内の <see cref="T:System.Data.DataRow" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Data.DataTableNewRowEventArgs">
      <summary>
        <see cref="M:System.Data.DataTable.NewRow" /> メソッドのデータを提供します。</summary>
    </member>
    <member name="M:System.Data.DataTableNewRowEventArgs.#ctor(System.Data.DataRow)">
      <summary>
        <see cref="T:System.Data.DataTableNewRowEventArgs" /> の新しいインスタンスを初期化します。</summary>
      <param name="dataRow">追加される <see cref="T:System.Data.DataRow" />。</param>
    </member>
    <member name="P:System.Data.DataTableNewRowEventArgs.Row">
      <summary>追加される行を取得します。</summary>
      <returns>追加される <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="T:System.Data.DataTableNewRowEventHandler">
      <summary>
        <see cref="M:System.Data.DataTable.NewRow" /> メソッドを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.Data.DataTableNewRowEventArgs" />。</param>
    </member>
    <member name="T:System.Data.DataTableReader">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> は、1 つ以上の <see cref="T:System.Data.DataTable" /> オブジェクトの内容を、読み取り専用、前方参照専用の 1 つ以上の結果セットとして取得します。</summary>
    </member>
    <member name="M:System.Data.DataTableReader.#ctor(System.Data.DataTable)">
      <summary>指定された <see cref="T:System.Data.DataTableReader" /> のデータを使用して、<see cref="T:System.Data.DataTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataTable">新しい <see cref="T:System.Data.DataTable" /> が結果セットを取得する <see cref="T:System.Data.DataTableReader" />。</param>
    </member>
    <member name="M:System.Data.DataTableReader.#ctor(System.Data.DataTable[])">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> オブジェクトの指定した配列を使用して、<see cref="T:System.Data.DataTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataTables">新しい <see cref="T:System.Data.DataTable" /> オブジェクトの結果を提供する <see cref="T:System.Data.DataTableReader" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Data.DataTableReader.Close">
      <summary>現在の <see cref="T:System.Data.DataTableReader" /> を閉じます。</summary>
    </member>
    <member name="P:System.Data.DataTableReader.Depth">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> の現在の行の入れ子の深さ。</summary>
      <returns>現在の行の入れ子の深さ。常に 0 になります。</returns>
    </member>
    <member name="P:System.Data.DataTableReader.FieldCount">
      <summary>現在の行の列数を返します。</summary>
      <returns>有効なレコードセットに位置していない場合は 0。それ以外の場合は現在の行の列数。</returns>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> 内のフィールド数を取得しようとしました。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetBoolean(System.Int32)">
      <summary>指定した列の値を <see cref="T:System.Boolean" /> として取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
      <exception cref="T:System.InvalidCastException">指定した列には <see langword="Boolean" /> が含まれていません。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetByte(System.Int32)">
      <summary>指定された列の値をバイトとして取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see langword="DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
      <exception cref="T:System.InvalidCastException">指定した列にバイトが含まれていません。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>指定したバッファー オフセットを開始位置として、指定した列オフセットから始まる文字のストリームをバッファーに配列として読み込みます。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <param name="dataIndex">読み取り操作を開始する位置を示すフィールド内のインデックス。</param>
      <param name="buffer">バイトのストリームを読み込むバッファー。</param>
      <param name="bufferIndex">バッファー内でデータの配置を開始するインデックス。</param>
      <param name="length">バッファーにコピーする最大長。</param>
      <returns>実際に読み取られたバイト数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see langword="DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
      <exception cref="T:System.InvalidCastException">指定した列にはバイト配列が含まれていません。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetChar(System.Int32)">
      <summary>指定した列の値を文字として取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>列の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see langword="DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
      <exception cref="T:System.InvalidCastException">指定したフィールドに文字が含まれていません。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>指定された列の値を 1 つの文字配列として返します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <param name="dataIndex">読み取り操作を開始する位置を示すフィールド内のインデックス。</param>
      <param name="buffer">char のストリームの読み込み先のバッファー。</param>
      <param name="bufferIndex">バッファー内でデータの配置を開始するインデックス。</param>
      <param name="length">バッファーにコピーする最大長。</param>
      <returns>実際に読み取られた文字数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see langword="DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
      <exception cref="T:System.InvalidCastException">指定した列には文字配列が含まれていません。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetDataTypeName(System.Int32)">
      <summary>指定した列のデータ型を示す文字列を取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>列のデータ型を示す文字列。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetDateTime(System.Int32)">
      <summary>指定された列の値を <see cref="T:System.DateTime" /> オブジェクトとして取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see langword="DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
      <exception cref="T:System.InvalidCastException">指定した列に DateTime 値が含まれていません。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetDecimal(System.Int32)">
      <summary>指定した列の値を <see cref="T:System.Decimal" /> として取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see langword="DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
      <exception cref="T:System.InvalidCastException">指定した列には <see langword="Decimal" /> 値が含まれていません。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetDouble(System.Int32)">
      <summary>列の値を倍精度浮動小数点数値として取得します。</summary>
      <param name="ordinal">列の 0 から始まる序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see langword="DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
      <exception cref="T:System.InvalidCastException">指定した列に倍精度浮動小数点数が格納されていません。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetEnumerator">
      <summary>項目のコレクションを反復処理するために使用できる列挙子を返します。</summary>
      <returns>項目のコレクションを表す <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetFieldType(System.Int32)">
      <summary>オブジェクトのデータ型である <see cref="T:System.Type" /> を取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>オブジェクトのデータ型である <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetFloat(System.Int32)">
      <summary>指定された列の値を単精度浮動小数点値として取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>列の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
      <exception cref="T:System.InvalidCastException">指定した列に単精度浮動小数点数が格納されていません。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetGuid(System.Int32)">
      <summary>指定された列の値をグローバル一意識別子 (GUID) として取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
      <exception cref="T:System.InvalidCastException">指定した列に GUID が含まれていません。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt16(System.Int32)">
      <summary>指定した列の値を 16 ビット符号付き整数として取得します。</summary>
      <param name="ordinal">列の 0 から始まる序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
      <exception cref="T:System.InvalidCastException">指定した列に 16 ビット符号付き整数が格納されていません。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt32(System.Int32)">
      <summary>指定された列の値を 32 ビット符号付き整数として取得します。</summary>
      <param name="ordinal">列の 0 から始まる序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
      <exception cref="T:System.InvalidCastException">指定した列に 32 ビット符号付き整数値が格納されていません。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt64(System.Int32)">
      <summary>指定された列の値を 64 ビット符号付き整数として取得します。</summary>
      <param name="ordinal">列の 0 から始まる序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
      <exception cref="T:System.InvalidCastException">指定した列に 64 ビット符号付き整数値が格納されていません。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetName(System.Int32)">
      <summary>指定した列の値を <see cref="T:System.String" /> として取得します。</summary>
      <param name="ordinal">列の 0 から始まる序数。</param>
      <returns>指定された列の名前。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetOrdinal(System.String)">
      <summary>列の名前を指定して、列の序数を取得します。</summary>
      <param name="name">列の名前。</param>
      <returns>0 から始まる列序数。</returns>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
      <exception cref="T:System.ArgumentException">指定された名前は、有効な列名ではありません。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>指定した列の型をプロバイダー固有の形式で取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>オブジェクトのデータ型である <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificValue(System.Int32)">
      <summary>指定した列の値をプロバイダー固有の形式で取得します。</summary>
      <param name="ordinal">値を取得した列の、0 から始まるインデックス番号。</param>
      <returns>プロバイダー固有の形式による、指定した列の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificValues(System.Object[])">
      <summary>指定された配列に、<see cref="T:System.Data.DataTableReader" /> のすべての列に関するプロバイダー固有の型の情報を格納します。</summary>
      <param name="values">
        <see cref="T:System.Data.DataTableReader" /> の列の型情報を格納するオブジェクトの配列。</param>
      <returns>配列にコピーされる列の値の数。</returns>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetSchemaTable">
      <summary>
        <see cref="T:System.Data.DataTable" /> の列メタデータを記述する <see cref="T:System.Data.DataTableReader" /> を返します。</summary>
      <returns>列メタデータを記述する <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.DataTableReader" /> が閉じています。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetString(System.Int32)">
      <summary>指定した列の値を文字列として取得します。</summary>
      <param name="ordinal">列の 0 から始まる序数。</param>
      <returns>指定された列の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
      <exception cref="T:System.InvalidCastException">指定した列に文字列が含まれていません。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetValue(System.Int32)">
      <summary>指定した列の値をネイティブ形式で取得します。</summary>
      <param name="ordinal">列の 0 から始まる序数。</param>
      <returns>指定された列の値。 null 列の場合は、<see langword="DBNull" /> が返されます。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetValues(System.Object[])">
      <summary>オブジェクトの配列に現在行の列値を設定します。</summary>
      <param name="values">
        <see cref="T:System.Object" /> の列の値のコピー先である <see cref="T:System.Data.DataTableReader" /> の配列。</param>
      <returns>配列にコピーされる列の値の数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
    </member>
    <member name="P:System.Data.DataTableReader.HasRows">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> に 1 行以上の行が格納されているかどうかを示す値を取得します。</summary>
      <returns>1 行以上の行が <see cref="T:System.Data.DataTableReader" /> に含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">閉じられた <see cref="T:System.Data.DataTableReader" /> に関する情報を取得しようとしました。</exception>
    </member>
    <member name="P:System.Data.DataTableReader.IsClosed">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> が閉じられているかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataTableReader" /> が閉じている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.IsDBNull(System.Int32)">
      <summary>列に格納されている値が存在しない値または欠損値かどうかを示す値を取得します。</summary>
      <param name="ordinal">列の 0 から始まる序数。</param>
      <returns>指定した列の値が <see cref="T:System.DBNull" /> と等価である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
    </member>
    <member name="P:System.Data.DataTableReader.Item(System.Int32)">
      <summary>列の序数によって指定した列の値をネイティブ形式で取得します。</summary>
      <param name="ordinal">0 から始まる列序数。</param>
      <returns>指定した列のネイティブ形式での値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスが 0 から <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 の範囲にありません。</exception>
    </member>
    <member name="P:System.Data.DataTableReader.Item(System.String)">
      <summary>列名によって指定した列の値をネイティブ形式で取得します。</summary>
      <param name="name">列の名前。</param>
      <returns>指定した列のネイティブ形式での値。</returns>
      <exception cref="T:System.ArgumentException">指定された名前は、有効な列名ではありません。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">削除した行からデータを取得しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.NextResult">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> を次の結果に進めます (存在する場合)。</summary>
      <returns>別の結果セットがあった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">閉じられた <see cref="T:System.Data.DataTableReader" /> 内を移動しようとしました。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.Read">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> を次のレコードに進めます。</summary>
      <returns>読み取る行が他にもあった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">閉じている <see cref="T:System.Data.DataTableReader" /> の列を読み取るかアクセスしようとしました。</exception>
    </member>
    <member name="P:System.Data.DataTableReader.RecordsAffected">
      <summary>SQL ステートメントを実行したことで挿入、変更、または削除された行数を取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataTableReader" /> はこのプロパティをサポートしません。常に 0 を返します。</returns>
    </member>
    <member name="T:System.Data.DataView">
      <summary>並べ替え、フィルター処理、検索、編集、およびナビゲーションを実行するための、データ連結可能な、カスタマイズされた <see cref="T:System.Data.DataTable" /> のビューを表します。 <see cref="T:System.Data.DataView" /> はデータを格納しませんが、代わりに対応する <see cref="T:System.Data.DataTable" /> の接続したビューを表します。 <see cref="T:System.Data.DataView" /> のデータに対して加えた変更は、<see cref="T:System.Data.DataTable" /> に影響します。 <see cref="T:System.Data.DataTable" /> のデータに対して加えた変更は、それに関連付けられているすべての <see cref="T:System.Data.DataView" /> に影響します。</summary>
    </member>
    <member name="M:System.Data.DataView.#ctor">
      <summary>
        <see cref="T:System.Data.DataView" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.DataView.#ctor(System.Data.DataTable)">
      <summary>
        <see cref="T:System.Data.DataView" /> を指定して、<see cref="T:System.Data.DataTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="table">
        <see cref="T:System.Data.DataView" /> に追加する <see cref="T:System.Data.DataTable" />。</param>
    </member>
    <member name="M:System.Data.DataView.#ctor(System.Data.DataTable,System.String,System.String,System.Data.DataViewRowState)">
      <summary>指定された <see cref="T:System.Data.DataTable" />、<see cref="P:System.Data.DataView.RowFilter" />、<see cref="P:System.Data.DataView.Sort" />、および <see cref="T:System.Data.DataViewRowState" /> を使用して、<see cref="T:System.Data.DataView" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="table">
        <see cref="T:System.Data.DataView" /> に追加する <see cref="T:System.Data.DataTable" />。</param>
      <param name="RowFilter">
        <see cref="T:System.Data.DataView" /> に適用する <see cref="P:System.Data.DataView.RowFilter" />。</param>
      <param name="Sort">
        <see cref="P:System.Data.DataView.Sort" /> に適用する <see cref="T:System.Data.DataView" />。</param>
      <param name="RowState">
        <see cref="T:System.Data.DataView" /> に適用する <see cref="T:System.Data.DataViewRowState" />。</param>
    </member>
    <member name="M:System.Data.DataView.AddNew">
      <summary>
        <see cref="T:System.Data.DataView" /> に新しい行を追加します。</summary>
      <returns>新しい <see cref="T:System.Data.DataRowView" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.DataView.AllowDelete">
      <summary>削除が許可されているかどうかを示す値を設定または取得します。</summary>
      <returns>削除が許可される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataView.AllowEdit">
      <summary>更新が許可されるかどうかを示す値を取得または設定します。</summary>
      <returns>更新が許可される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataView.AllowNew">
      <summary>
        <see cref="M:System.Data.DataView.AddNew" /> メソッドを使用して新しい行を追加できるかどうかを示す値を取得または設定します。</summary>
      <returns>新しい行を追加できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataView.ApplyDefaultSort">
      <summary>既定の並べ替えを使用するかどうかを示す値を取得または設定します。 既定の並べ替えは、<see cref="P:System.Data.DataTable.PrimaryKey" /> で指定されているとおり、すべての主キーで "昇順" です。</summary>
      <returns>既定の並べ替えを使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataView.BeginInit">
      <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Data.DataView" /> の初期化を開始します。 初期化は実行時に発生します。</summary>
    </member>
    <member name="M:System.Data.DataView.Close">
      <summary>
        <see cref="T:System.Data.DataView" /> を閉じます。</summary>
    </member>
    <member name="M:System.Data.DataView.ColumnCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>
        <see cref="T:System.Data.DataColumnCollection" /> が正常に変更された後に発生します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataView.CopyTo(System.Array,System.Int32)">
      <summary>配列に項目をコピーします。 Web フォームのインターフェイスに対してのみ。</summary>
      <param name="array">コピー先の配列。</param>
      <param name="index">開始位置を示すインデックス。</param>
    </member>
    <member name="P:System.Data.DataView.Count">
      <summary>
        <see cref="P:System.Data.DataView.RowFilter" /> と <see cref="P:System.Data.DataView.RowStateFilter" /> が適用された後に、<see cref="T:System.Data.DataView" /> 内のレコード数を取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataView" /> のレコード数です。</returns>
    </member>
    <member name="P:System.Data.DataView.DataViewManager">
      <summary>このビューに関連付けられている <see cref="T:System.Data.DataViewManager" /> を取得します。</summary>
      <returns>このビューを作成した <see langword="DataViewManager" />。 これが <see cref="T:System.Data.DataTable" /> の既定値 <see cref="T:System.Data.DataView" /> である場合、<see langword="DataViewManager" /> プロパティは <see langword="DataSet" /> の既定値 <see langword="DataViewManager" /> を返します。 それ以外の場合、つまり <see langword="DataViewManager" /> を使用せずに <see langword="DataView" /> が作成された場合は、このプロパティは <see langword="null" /> になります。</returns>
    </member>
    <member name="M:System.Data.DataView.Delete(System.Int32)">
      <summary>指定したインデックスの行を削除します。</summary>
      <param name="index">削除する行のインデックス。</param>
    </member>
    <member name="M:System.Data.DataView.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Data.DataView" /> オブジェクトによって使用されていたリソース (メモリを除く) を破棄します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.DataView.EndInit">
      <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Data.DataView" /> の初期化を終了します。 初期化は実行時に発生します。</summary>
    </member>
    <member name="M:System.Data.DataView.Equals(System.Data.DataView)">
      <summary>指定された <see cref="T:System.Data.DataView" /> インスタンスが等しいかどうかを判断します。</summary>
      <param name="view">比較対象の <see cref="T:System.Data.DataView" />。</param>
      <returns>2 つの <see cref="T:System.Data.DataView" /> インスタンスが等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataView.Find(System.Object)">
      <summary>指定された並べ替えキーの値で <see cref="T:System.Data.DataView" /> 内の行を検索します。</summary>
      <param name="key">検索するオブジェクト。</param>
      <returns>並べ替えキーの値が存在しない場合、指定された並べ替えキー値を含む <see cref="T:System.Data.DataView" /> の行のインデックス。指定された並べ替えキー値を含む行がない場合は -1。</returns>
    </member>
    <member name="M:System.Data.DataView.Find(System.Object[])">
      <summary>指定された並べ替えキーの値で <see cref="T:System.Data.DataView" /> 内の行を検索します。</summary>
      <param name="key">
        <see cref="T:System.Object" /> 型の値の配列。</param>
      <returns>指定された並べ替えキーの値に一致する <see cref="T:System.Data.DataView" /> 内の最初の行の位置のインデックス。それ以外の場合で、一致する並べ替えキー値がない時は -1。</returns>
    </member>
    <member name="M:System.Data.DataView.FindRows(System.Object)">
      <summary>列が指定した並べ替えキーの値と一致する <see cref="T:System.Data.DataRowView" /> オブジェクトの配列を返します。</summary>
      <param name="key">
        <see cref="T:System.Object" /> として型指定された、検索対象の列の値。</param>
      <returns>指定した並べ替えキーの値と列が一致する <see langword="DataRowView" /> オブジェクトの配列。または、指定した並べ替えキーが行にない場合は、空の <see langword="DataRowView" /> 配列。</returns>
    </member>
    <member name="M:System.Data.DataView.FindRows(System.Object[])">
      <summary>列が指定した並べ替えキーの値と一致する <see cref="T:System.Data.DataRowView" /> オブジェクトの配列を返します。</summary>
      <param name="key">
        <see cref="T:System.Object" /> として型指定された、検索対象の列の値の配列。</param>
      <returns>指定した並べ替えキーの値と列が一致する <see langword="DataRowView" /> オブジェクトの配列。または、指定した並べ替えキーが行にない場合は、空の <see langword="DataRowView" /> 配列。</returns>
    </member>
    <member name="M:System.Data.DataView.GetEnumerator">
      <summary>この <see cref="T:System.Data.DataView" /> の列挙子を取得します</summary>
      <returns>リストを移動する <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.DataView.IndexListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
      <summary>
        <see cref="T:System.Data.DataView" /> が正常に変更された後に発生します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="E:System.Data.DataView.Initialized">
      <summary>
        <see cref="T:System.Data.DataView" /> の初期化が完了した時点で発生します。</summary>
    </member>
    <member name="P:System.Data.DataView.IsInitialized">
      <summary>コンポーネントが初期化されているかどうかを示す値を取得します。</summary>
      <returns>コンポーネントの初期化が完了していることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataView.IsOpen">
      <summary>データ ソースが現在開かれており、かつ <see cref="T:System.Data.DataTable" /> 上のデータのビューを投射しているのかどうかを示す値を取得します。</summary>
      <returns>ソースが開かれている場合、<see langword="true" />。それ以外の場合、<see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataView.Item(System.Int32)">
      <summary>指定したテーブルからデータの行を取得します。</summary>
      <param name="recordIndex">
        <see cref="T:System.Data.DataTable" /> 内のレコードのインデックス。</param>
      <returns>目的の行の <see cref="T:System.Data.DataRowView" />。</returns>
    </member>
    <member name="E:System.Data.DataView.ListChanged">
      <summary>
        <see cref="T:System.Data.DataView" /> によって管理されているリストが変更されたときに発生します。</summary>
    </member>
    <member name="M:System.Data.DataView.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
        <see cref="E:System.Data.DataView.ListChanged" /> イベントを発生させます。</summary>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataView.Open">
      <summary>
        <see cref="T:System.Data.DataView" /> を開きます。</summary>
    </member>
    <member name="M:System.Data.DataView.Reset">
      <summary>内部使用専用に予約されています。</summary>
    </member>
    <member name="P:System.Data.DataView.RowFilter">
      <summary>
        <see cref="T:System.Data.DataView" /> の中で表示する行のフィルター処理に使用する式を取得または設定します。</summary>
      <returns>行のフィルター処理方法を指定する文字列。</returns>
    </member>
    <member name="P:System.Data.DataView.RowStateFilter">
      <summary>
        <see cref="T:System.Data.DataView" /> で使用される行の状態のフィルターを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataViewRowState" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.Data.DataView.Sort">
      <summary>1 つ以上の並べ替え列、および <see cref="T:System.Data.DataView" /> の並べ替え順序を取得または設定します。</summary>
      <returns>列名の後に "ASC" (昇順) または "DESC" (降順) を含む文字列。 既定では列は昇順で並べ替えられます。 複数の列をコンマで区切ることができます。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#ICollection#IsSynchronized">
      <summary>このメンバーの詳細については、「<see cref="P:System.Collections.ICollection.IsSynchronized" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.Collections.ICollection.IsSynchronized" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#ICollection#SyncRoot">
      <summary>このメンバーの詳細については、「<see cref="P:System.Collections.ICollection.SyncRoot" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.Collections.ICollection.SyncRoot" />」をご覧ください。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Add(System.Object)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Collections.IList.Add(System.Object)" />」をご覧ください。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 値。</param>
      <returns>このメンバーの詳細については、「<see cref="M:System.Collections.IList.Add(System.Object)" />」をご覧ください。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Clear">
      <summary>このメンバーの詳細については、「<see cref="M:System.Collections.IList.Clear" />」をご覧ください。</summary>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Contains(System.Object)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Collections.IList.Contains(System.Object)" />」をご覧ください。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 値。</param>
      <returns>このメンバーの詳細については、「<see cref="M:System.Collections.IList.Contains(System.Object)" />」をご覧ください。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#IndexOf(System.Object)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Collections.IList.IndexOf(System.Object)" />」をご覧ください。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 値。</param>
      <returns>このメンバーの詳細については、「<see cref="M:System.Collections.IList.IndexOf(System.Object)" />」をご覧ください。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />」をご覧ください。</summary>
      <param name="index">
        <see cref="T:System.Int32" /> 値。</param>
      <param name="value">挿入する <see cref="T:System.Object" /> 値。</param>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#IsFixedSize">
      <summary>このメンバーの詳細については、「<see cref="P:System.Collections.IList.IsFixedSize" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.Collections.IList.IsFixedSize" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#IsReadOnly">
      <summary>このメンバーの詳細については、「<see cref="P:System.Collections.IList.IsReadOnly" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.Collections.IList.IsReadOnly" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#Item(System.Int32)">
      <summary>このメンバーの詳細については、「<see cref="P:System.Collections.IList.Item(System.Int32)" />」をご覧ください。</summary>
      <param name="recordIndex">
        <see cref="T:System.Int32" /> 値。</param>
      <returns>このメンバーの詳細については、「<see cref="P:System.Collections.IList.Item(System.Int32)" />」をご覧ください。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Remove(System.Object)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Collections.IList.Remove(System.Object)" />」をご覧ください。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 値。</param>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />」をご覧ください。</summary>
      <param name="index">
        <see cref="T:System.Int32" /> 値。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />」をご覧ください。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#AddNew">
      <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IBindingList.AddNew" />」をご覧ください。</summary>
      <returns>リストに追加された項目。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowEdit">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.AllowEdit" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.AllowEdit" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowNew">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.AllowNew" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.AllowNew" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowRemove">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.AllowRemove" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.AllowRemove" />」をご覧ください。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />」をご覧ください。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクト。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />」をご覧ください。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクト。</param>
      <param name="key">
        <see cref="T:System.Object" /> 値。</param>
      <returns>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#IsSorted">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.IsSorted" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.IsSorted" />」をご覧ください。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />」をご覧ください。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#RemoveSort">
      <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IBindingList.RemoveSort" />」をご覧ください。</summary>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SortDirection">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SortDirection" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SortDirection" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SortProperty">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SortProperty" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SortProperty" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />」をご覧ください。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingListView#ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" />」をご覧ください。</summary>
      <param name="sorts">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> オブジェクト。</param>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#Filter">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingListView.Filter" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingListView.Filter" />」をご覧ください。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingListView#RemoveFilter">
      <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IBindingListView.RemoveFilter" />」をご覧ください。</summary>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SortDescriptions">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingListView.SortDescriptions" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingListView.SortDescriptions" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SupportsAdvancedSorting">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SupportsFiltering">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingListView.SupportsFiltering" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingListView.SupportsFiltering" />」をご覧ください。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#ITypedList#GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])" />」をご覧ください。</summary>
      <param name="listAccessors">コレクションから検索するバインド可能な <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトの配列。 この値は、<see langword="null" /> でもかまいません。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#ITypedList#GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" />」をご覧ください。</summary>
      <param name="listAccessors">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトの配列。</param>
      <returns>このメンバーの詳細については、「<see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataView.Table">
      <summary>ソース <see cref="T:System.Data.DataTable" /> を取得または設定します。</summary>
      <returns>このビューに対してデータを提供する <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable">
      <summary>既存の<see cref="T:System.Data.DataView" /> の行に基づく新しい <see cref="T:System.Data.DataTable" /> を作成して返します。</summary>
      <returns>要求した行と列を格納する新しい <see cref="T:System.Data.DataTable" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.Boolean,System.String[])">
      <summary>既存の<see cref="T:System.Data.DataView" /> の行に基づく新しい <see cref="T:System.Data.DataTable" /> を作成して返します。</summary>
      <param name="distinct">
        <see langword="true" /> の場合、返された <see cref="T:System.Data.DataTable" /> にはすべての列に対して重複しない値を持つ行が含まれています。 既定値は <see langword="false" /> です。</param>
      <param name="columnNames">返された <see cref="T:System.Data.DataTable" /> に含まれる列名の一覧を格納する文字列の配列。 <see cref="T:System.Data.DataTable" /> には、この配列内に表示される順序で、指定された列が含まれています。</param>
      <returns>要求した行と列を格納する新しい <see cref="T:System.Data.DataTable" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.String)">
      <summary>既存の<see cref="T:System.Data.DataView" /> の行に基づく新しい <see cref="T:System.Data.DataTable" /> を作成して返します。</summary>
      <param name="tableName">返された <see cref="T:System.Data.DataTable" /> の名前。</param>
      <returns>要求した行と列を格納する新しい <see cref="T:System.Data.DataTable" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.String,System.Boolean,System.String[])">
      <summary>既存の<see cref="T:System.Data.DataView" /> の行に基づく新しい <see cref="T:System.Data.DataTable" /> を作成して返します。</summary>
      <param name="tableName">返された <see cref="T:System.Data.DataTable" /> の名前。</param>
      <param name="distinct">
        <see langword="true" /> の場合、返された <see cref="T:System.Data.DataTable" /> にはすべての列に対して重複しない値を持つ行が含まれています。 既定値は <see langword="false" /> です。</param>
      <param name="columnNames">返された <see cref="T:System.Data.DataTable" /> に含まれる列名の一覧を格納する文字列の配列。 <see langword="DataTable" /> には、この配列内に表示される順序で、指定された列が含まれています。</param>
      <returns>要求した行と列を格納する新しい <see cref="T:System.Data.DataTable" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.DataView.UpdateIndex">
      <summary>内部使用専用に予約されています。</summary>
    </member>
    <member name="M:System.Data.DataView.UpdateIndex(System.Boolean)">
      <summary>内部使用専用に予約されています。</summary>
      <param name="force">内部使用専用に予約されています。</param>
    </member>
    <member name="T:System.Data.DataViewManager">
      <summary>
        <see cref="T:System.Data.DataSet" /> の <see cref="T:System.Data.DataTable" /> ごとに、既定の <see cref="T:System.Data.DataViewSettingCollection" /> が含まれています。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.#ctor">
      <summary>
        <see cref="T:System.Data.DataViewManager" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.#ctor(System.Data.DataSet)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> の <see cref="T:System.Data.DataViewManager" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataSet">使用する <see cref="T:System.Data.DataSet" /> の名前です。</param>
    </member>
    <member name="M:System.Data.DataViewManager.CreateDataView(System.Data.DataTable)">
      <summary>指定した <see cref="T:System.Data.DataTable" /> に対して <see cref="T:System.Data.DataView" /> を作成します。</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 内で使用する <see cref="T:System.Data.DataView" /> の名前。</param>
      <returns>
        <see cref="T:System.Data.DataView" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.DataSet">
      <summary>
        <see cref="T:System.Data.DataSet" /> で使用する <see cref="T:System.Data.DataViewManager" /> を取得または設定します。</summary>
      <returns>使用する <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.DataViewSettingCollectionString">
      <summary>コードの永続化に使用する値を取得または設定します。</summary>
      <returns>コードの永続化に使用する値。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.DataViewSettings">
      <summary>
        <see cref="T:System.Data.DataViewSettingCollection" /> 内の各 <see cref="T:System.Data.DataTable" /> の <see cref="T:System.Data.DataSet" /> を取得します。</summary>
      <returns>各 <see langword="DataTable" /> の <see cref="T:System.Data.DataViewSettingCollection" />。</returns>
    </member>
    <member name="E:System.Data.DataViewManager.ListChanged">
      <summary>
        <see cref="T:System.Data.DataView" /> に対して行を追加または削除した後に発生します。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
        <see cref="E:System.Data.DataViewManager.ListChanged" /> イベントを発生させます。</summary>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.RelationCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> に <see cref="T:System.Data.DataRelation" /> が追加されるか削除されたときに、<see cref="T:System.Data.DataRelationCollection" /> イベントを発生させます。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#Count">
      <summary>このメンバーの詳細については、「<see cref="P:System.Collections.ICollection.Count" />」をご覧ください。</summary>
      <returns>このメンバーの説明については、<see cref="P:System.Collections.ICollection.Count" /> のトピックを参照してください。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#IsSynchronized">
      <summary>このメンバーの詳細については、「<see cref="P:System.Collections.ICollection.IsSynchronized" />」をご覧ください。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#SyncRoot">
      <summary>このメンバーの詳細については、「<see cref="P:System.Collections.ICollection.SyncRoot" />」をご覧ください。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>このメンバーの説明については、<see cref="M:System.Collections.IEnumerable.GetEnumerator" /> のトピックを参照してください。</summary>
      <returns>このメンバーの説明については、<see cref="M:System.Collections.IEnumerable.GetEnumerator" /> のトピックを参照してください。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Add(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> に項目を追加します。</summary>
      <param name="value">
        <see cref="T:System.Object" /> に追加する <see cref="T:System.Collections.IList" />。</param>
      <returns>新しい要素が挿入された位置。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Clear">
      <summary>このメンバーの詳細については、「<see cref="M:System.Collections.IList.Clear" />」をご覧ください。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Contains(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> に特定の値が格納されているかどうかを判断します。</summary>
      <param name="value">
        <see cref="T:System.Collections.IList" /> 内で検索される <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> が <see cref="T:System.Collections.IList" /> に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#IndexOf(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> 内の特定の項目のインデックスを確認します。</summary>
      <param name="value">
        <see cref="T:System.Collections.IList" /> 内で検索される <see cref="T:System.Object" />。</param>
      <returns>リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>指定したインデックスの <see cref="T:System.Collections.IList" /> に項目を挿入します。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value">
        <see cref="T:System.Collections.IList" /> に挿入する <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#IsFixedSize">
      <summary>このメンバーの説明については、<see cref="P:System.Collections.IList.IsFixedSize" /> のトピックを参照してください。</summary>
      <returns>
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#IsReadOnly">
      <summary>このメンバーの説明については、<see cref="P:System.Collections.IList.IsReadOnly" /> のトピックを参照してください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.Collections.IList.IsReadOnly" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <returns>指定したインデックス位置にある要素。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Remove(System.Object)">
      <summary>特定のオブジェクトが <see cref="T:System.Collections.IList" /> 内にあるときに、最初に出現したものを削除します。</summary>
      <param name="value">
        <see cref="T:System.Object" /> から削除する <see cref="T:System.Collections.IList" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>指定したインデックスにある <see cref="T:System.Collections.IList" /> 項目を削除します。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>検索に使用されるインデックスに <see cref="T:System.ComponentModel.PropertyDescriptor" /> を追加します。</summary>
      <param name="property">検索に使用されるインデックスに追加する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#AddNew">
      <summary>このメンバーの説明については、<see cref="M:System.ComponentModel.IBindingList.AddNew" /> のトピックを参照してください。</summary>
      <returns>このメンバーの説明については、<see cref="M:System.ComponentModel.IBindingList.AddNew" /> のトピックを参照してください。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowEdit">
      <summary>このメンバーの説明については、<see cref="P:System.ComponentModel.IBindingList.AllowEdit" /> のトピックを参照してください。</summary>
      <returns>このメンバーの説明については、<see cref="P:System.ComponentModel.IBindingList.AllowEdit" /> のトピックを参照してください。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowNew">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.AllowNew" />」をご覧ください。</summary>
      <returns>このメンバーの説明については、<see cref="P:System.ComponentModel.IBindingList.AllowNew" /> のトピックを参照してください。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowRemove">
      <summary>このメンバーの説明については、<see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> のトピックを参照してください。</summary>
      <returns>このメンバーの説明については、<see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> のトピックを参照してください。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> と <see cref="T:System.ComponentModel.ListSortDirection" /> に基づいて並べ替えを行います。</summary>
      <param name="property">並べ替えのキーとなる <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>指定された <see cref="T:System.ComponentModel.PropertyDescriptor" /> を保持する行のインデックスを返します。</summary>
      <param name="property">検索対象の <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">検索する property パラメーターの値。</param>
      <returns>指定された <see cref="T:System.ComponentModel.PropertyDescriptor" /> を保持する行のインデックス。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#IsSorted">
      <summary>このメンバーの説明については、<see cref="P:System.ComponentModel.IBindingList.IsSorted" /> のトピックを参照してください。</summary>
      <returns>このメンバーの説明については、<see cref="P:System.ComponentModel.IBindingList.IsSorted" /> のトピックを参照してください。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>検索に使用されるインデックスから <see cref="T:System.ComponentModel.PropertyDescriptor" /> を削除します。</summary>
      <param name="property">検索に使用されるインデックスから削除する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#RemoveSort">
      <summary>
        <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> を使用して並べ替えを適用した場合は、その並べ替えを削除します。</summary>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SortDirection">
      <summary>このメンバーの説明については、<see cref="P:System.ComponentModel.IBindingList.SortDirection" /> のトピックを参照してください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SortDirection" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SortProperty">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SortProperty" />」をご覧ください。</summary>
      <returns>このメンバーの説明については、<see cref="P:System.ComponentModel.IBindingList.SortProperty" /> のトピックを参照してください。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>このメンバーの説明については、<see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" /> のトピックを参照してください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />」をご覧ください。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />」をご覧ください。</summary>
      <returns>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />」をご覧ください。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#ITypedList#GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>データ バインドに使用される各項目のプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> を返します。</summary>
      <param name="listAccessors">コレクションから検索するバインド可能な <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトの配列。 この値は、<see langword="null" /> でもかまいません。</param>
      <returns>データ バインドに使用される各項目のプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#ITypedList#GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>リストの名前を返します。</summary>
      <param name="listAccessors">リスト名を返す対象の <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトの配列。 この値は、<see langword="null" /> でもかまいません。</param>
      <returns>リストの名前。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.TableCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTableCollection.CollectionChanged" /> に <see cref="T:System.Data.DataTable" /> が追加されるか削除されたときに、<see cref="T:System.Data.DataTableCollection" /> イベントを発生させます。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="T:System.Data.DataViewRowState">
      <summary>
        <see cref="T:System.Data.DataRow" /> 内のデータのバージョンを記述します。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Added">
      <summary>新しい行。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.CurrentRows">
      <summary>変更されていない行、新しい行、および変更された行を含む現在の行。 既定では、<see cref="T:System.Data.DataViewRowState" /> は CurrentRows に設定されています。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Deleted">
      <summary>削除された行。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.ModifiedCurrent">
      <summary>変更された元のデータの現在のバージョン (<see langword="ModifiedOriginal" /> を参照)。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.ModifiedOriginal">
      <summary>変更されたデータの元のバージョン。 (データは変更されても、<see langword="ModifiedCurrent" /> として利用可能です)。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.None">
      <summary>なし。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.OriginalRows">
      <summary>変更されていない行と削除された行を含む元の行。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Unchanged">
      <summary>変更されていない行。</summary>
    </member>
    <member name="T:System.Data.DataViewSetting">
      <summary>
        <see cref="P:System.Data.DataView.ApplyDefaultSort" /> から作成された DataView の <see cref="P:System.Data.DataView.DataViewManager" />、<see cref="P:System.Data.DataView.RowFilter" />、<see cref="P:System.Data.DataView.RowStateFilter" />、<see cref="P:System.Data.DataView.Sort" />、<see cref="P:System.Data.DataView.Table" />、および <see cref="T:System.Data.DataViewManager" /> の既定の設定を表します。</summary>
    </member>
    <member name="P:System.Data.DataViewSetting.ApplyDefaultSort">
      <summary>既定の並べ替えを使用するかどうかを示す値を取得または設定します。</summary>
      <returns>既定の並べ替えを使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.DataViewManager">
      <summary>この <see cref="T:System.Data.DataViewManager" /> を格納している <see cref="T:System.Data.DataViewSetting" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataViewManager" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.RowFilter">
      <summary>
        <see cref="T:System.Data.DataView" /> 内で適用するフィルターを取得または設定します。 RowFilter を使用するコード例については、「<see cref="P:System.Data.DataView.RowFilter" />」を参照してください。</summary>
      <returns>適用するフィルターを格納している文字列。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.RowStateFilter">
      <summary>
        <see cref="T:System.Data.DataView" /> 内で Current、Deleted、Modified Current、ModifiedOriginal、New、Original、または Unchanged のいずれかの状態の行を表示するか、または行を表示しないかどうかを示す値を取得または設定します。</summary>
      <returns>表示する行を示す値。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.Sort">
      <summary>
        <see cref="T:System.Data.DataView" /> 内で適用する並べ替えを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataView" /> に適用される並べ替え。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.Table">
      <summary>
        <see cref="T:System.Data.DataTable" /> プロパティを適用する <see cref="T:System.Data.DataViewSetting" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Data.DataViewSettingCollection">
      <summary>
        <see cref="T:System.Data.DataViewSetting" /> 内の各 <see cref="T:System.Data.DataTable" /> に対する <see cref="T:System.Data.DataSet" /> オブジェクトの読み取り専用コレクションを格納しています。</summary>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.CopyTo(System.Array,System.Int32)">
      <summary>指定したインデックスをコピー開始位置として、1 次元の <see cref="T:System.Array" /> インスタンスにコレクション オブジェクトをコピーします。</summary>
      <param name="ar">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">挿入の開始位置を示す、配列内のインデックス。</param>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.CopyTo(System.Data.DataViewSetting[],System.Int32)">
      <summary>指定したインデックスをコピー開始位置として、1 次元の <see cref="T:System.Array" /> インスタンスにコレクション オブジェクトをコピーします。</summary>
      <param name="ar">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">挿入の開始位置を示す、配列内のインデックス。</param>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Count">
      <summary>
        <see cref="T:System.Data.DataViewSetting" /> 内の <see cref="T:System.Data.DataViewSettingCollection" /> オブジェクトの数を取得します。</summary>
      <returns>コレクションに含まれる <see cref="T:System.Data.DataViewSetting" /> オブジェクトの数。</returns>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.GetEnumerator">
      <summary>コレクションの <see cref="T:System.Collections.IEnumerator" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.IsReadOnly">
      <summary>
        <see cref="T:System.Data.DataViewSettingCollection" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>コレクションが<see langword="true" />読み取り専用であることを示すために、常にを返します。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.IsSynchronized">
      <summary>
        <see cref="T:System.Data.DataViewSettingCollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>このプロパティは、派生クラスでオーバーライドされない限り、常に <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.Data.DataTable)">
      <summary>指定した <see cref="T:System.Data.DataViewSetting" /> の <see cref="T:System.Data.DataTable" /> オブジェクトをコレクションから取得します。</summary>
      <param name="table">検索する <see cref="T:System.Data.DataTable" />。</param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.Int32)">
      <summary>インデックスで指定した <see cref="T:System.Data.DataViewSetting" /> の <see cref="T:System.Data.DataTable" /> オブジェクトを取得します。</summary>
      <param name="index">検索する <see cref="T:System.Data.DataTable" /> の 0 から始まるインデックス。</param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.String)">
      <summary>名前で指定した <see cref="T:System.Data.DataViewSetting" /> の <see cref="T:System.Data.DataTable" /> を取得します。</summary>
      <param name="tableName">検索する <see cref="T:System.Data.DataTable" /> の名前。</param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.SyncRoot">
      <summary>
        <see cref="T:System.Data.DataViewSettingCollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataViewSettingCollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="T:System.Data.DBConcurrencyException">
      <summary>挿入、更新、または削除操作中に影響を受ける行数が 0 になった場合に <see cref="T:System.Data.Common.DataAdapter" /> によってスローされる例外。</summary>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor">
      <summary>
        <see cref="T:System.Data.DBConcurrencyException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.DBConcurrencyException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の詳細を説明する文字列。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.DBConcurrencyException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の詳細を説明する文字列。</param>
      <param name="inner">内部例外への参照。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])">
      <summary>
        <see cref="T:System.Data.DBConcurrencyException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">この例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<see langword="Nothing" />)。</param>
      <param name="dataRows">この例外を生成する原因となった、更新が失敗した <see cref="T:System.Data.DataRow" /> オブジェクトを格納している配列。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])">
      <summary>この例外を生成する原因となった、更新が失敗した <see cref="T:System.Data.DataRow" /> オブジェクトを、<see cref="T:System.Data.DataRow" /> オブジェクトの指定した配列にコピーします。</summary>
      <param name="array">
        <see cref="T:System.Data.DataRow" /> オブジェクトのコピー先の <see cref="T:System.Data.DataRow" /> オブジェクトの 1 次元配列。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)">
      <summary>指定したコピー先の配列のインデックスを開始位置として、この例外を生成する原因となった、更新が失敗した <see cref="T:System.Data.DataRow" /> オブジェクトを、<see cref="T:System.Data.DataRow" /> オブジェクトの指定した配列にコピーします。</summary>
      <param name="array">
        <see cref="T:System.Data.DataRow" /> オブジェクトのコピー先の <see cref="T:System.Data.DataRow" /> オブジェクトの 1 次元配列。</param>
      <param name="arrayIndex">コピーを開始するコピー先の配列のインデックス。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.DBConcurrencyException" /> をシリアル化するために必要なデータを指定したシリアル化情報オブジェクトに設定します。</summary>
      <param name="si">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> と関連付けるシリアル化データを保持する <see cref="T:System.Data.DBConcurrencyException" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けるシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Data.DBConcurrencyException" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</exception>
    </member>
    <member name="P:System.Data.DBConcurrencyException.Row">
      <summary>
        <see cref="T:System.Data.DataRow" /> を生成した <see cref="T:System.Data.DBConcurrencyException" /> の値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> の値。</returns>
    </member>
    <member name="P:System.Data.DBConcurrencyException.RowCount">
      <summary>この例外を生成する原因となった、更新が失敗した行の数を取得します。</summary>
      <returns>更新が失敗した行の数を格納する整数。</returns>
    </member>
    <member name="T:System.Data.DbType">
      <summary>.NET Framework データ プロバイダーのフィールド、プロパティ、または <see langword="Parameter" /> オブジェクトのデータ型を指定します。</summary>
    </member>
    <member name="F:System.Data.DbType.AnsiString">
      <summary>1 から 8,000 文字の範囲内の非 Unicode 文字の可変長ストリーム。</summary>
    </member>
    <member name="F:System.Data.DbType.AnsiStringFixedLength">
      <summary>非 Unicode 文字の固定長ストリーム。</summary>
    </member>
    <member name="F:System.Data.DbType.Binary">
      <summary>1 から 8,000 バイトの範囲内のバイナリ データの可変長ストリーム。</summary>
    </member>
    <member name="F:System.Data.DbType.Boolean">
      <summary>
        <see langword="true" /> または <see langword="false" /> のブール値を表す単純型。</summary>
    </member>
    <member name="F:System.Data.DbType.Byte">
      <summary>値が 0 から 255 までの範囲内の 8 ビット符号なし整数。</summary>
    </member>
    <member name="F:System.Data.DbType.Currency">
      <summary>精度が通貨単位の 1/10,000 の、 -2 63 (または -922,337,203,685,477.5808) から 2 63 -1 (または +922,337,203,685,477.5807) までの範囲内の通貨値。</summary>
    </member>
    <member name="F:System.Data.DbType.Date">
      <summary>日付の値を表す型。</summary>
    </member>
    <member name="F:System.Data.DbType.DateTime">
      <summary>日時の値を表す型。</summary>
    </member>
    <member name="F:System.Data.DbType.DateTime2">
      <summary>日付と時刻のデータ。 日付の値の範囲は、AD 1 年 1 月 1 日から AD 9999 年 12 月 31 日です。 時刻の値の範囲は、00:00:00 から 23:59:59.9999999 で、精度は 100 ナノ秒です。</summary>
    </member>
    <member name="F:System.Data.DbType.DateTimeOffset">
      <summary>タイム ゾーンに対応した日付と時刻。 日付の値の範囲は、AD 1 年 1 月 1 日から AD 9999 年 12 月 31 日です。 時刻の値の範囲は、00:00:00 から 23:59:59.9999999 で、精度は 100 ナノ秒です。 タイム ゾーンの値の範囲は、-14:00 から +14:00 です。</summary>
    </member>
    <member name="F:System.Data.DbType.Decimal">
      <summary>1.0 × 10 -28 から概数 7.9 × 10 28 までの範囲で、有効桁数が 28 または 29 の値を表す単純型。</summary>
    </member>
    <member name="F:System.Data.DbType.Double">
      <summary>概数 5.0 × 10 -324 から 1.7 × 10 308 までの範囲で、有効桁数が 15 または 16 の値を表す浮動小数点型。</summary>
    </member>
    <member name="F:System.Data.DbType.Guid">
      <summary>グローバル一意識別子 (GUID)。</summary>
    </member>
    <member name="F:System.Data.DbType.Int16">
      <summary>-32768 から 32767 までの値を保持する符号付き 16 ビット整数を表す整数型。</summary>
    </member>
    <member name="F:System.Data.DbType.Int32">
      <summary>-2147483648 から 2147483647 までの値を保持する符号付き 32 ビット整数を表す整数型。</summary>
    </member>
    <member name="F:System.Data.DbType.Int64">
      <summary>-9223372036854775808 から 9223372036854775807 までの値を保持する符号付き 64 ビット整数を表す整数型。</summary>
    </member>
    <member name="F:System.Data.DbType.Object">
      <summary>別の <see langword="DbType" /> 値で明示的に表されていない参照型または値型を表す汎用型。</summary>
    </member>
    <member name="F:System.Data.DbType.SByte">
      <summary>-128 から 127 までの値を保持する符号付き 8 ビット整数を表す整数型。</summary>
    </member>
    <member name="F:System.Data.DbType.Single">
      <summary>概数 1.5 x 10 -45 から 3.4 x 10 38 までの範囲で、有効桁数が 7 の値を表す浮動小数点型。</summary>
    </member>
    <member name="F:System.Data.DbType.String">
      <summary>Unicode 文字列を表す型。</summary>
    </member>
    <member name="F:System.Data.DbType.StringFixedLength">
      <summary>Unicode 文字の固定長文字列。</summary>
    </member>
    <member name="F:System.Data.DbType.Time">
      <summary>SQL Server の <see langword="DateTime" /> 値を表す型。 SQL Server の <see langword="time" /> 値を使用する場合は、<see cref="F:System.Data.SqlDbType.Time" /> を使用してください。</summary>
    </member>
    <member name="F:System.Data.DbType.UInt16">
      <summary>0 から 65535 までの値を保持する符号なし 16 ビット整数を表す整数型。</summary>
    </member>
    <member name="F:System.Data.DbType.UInt32">
      <summary>0 から 4294967295 までの値を保持する符号なし 32 ビット整数を表す整数型。</summary>
    </member>
    <member name="F:System.Data.DbType.UInt64">
      <summary>0 から 18446744073709551615 までの値を保持する符号なし 64 ビット整数を表す整数型。</summary>
    </member>
    <member name="F:System.Data.DbType.VarNumeric">
      <summary>可変長数値。</summary>
    </member>
    <member name="F:System.Data.DbType.Xml">
      <summary>解析された XML ドキュメントまたは XML フラグメントの表現。</summary>
    </member>
    <member name="T:System.Data.DeletedRowInaccessibleException">
      <summary>削除された <see cref="T:System.Data.DataRow" /> でアクションを実行しようとしたときにスローされる例外を表します。</summary>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor">
      <summary>
        <see cref="T:System.Data.DeletedRowInaccessibleException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化情報を指定して、<see cref="T:System.Data.DeletedRowInaccessibleException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">指定したシリアル化ストリームの転送元と転送先の説明。</param>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.String)">
      <summary>文字列を指定して、<see cref="T:System.Data.DeletedRowInaccessibleException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Data.DeletedRowInaccessibleException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.DuplicateNameException">
      <summary>
        <see cref="T:System.Data.DataSet" /> 関連オブジェクトで追加操作を実行中に、重複するデータベース オブジェクト名が発見されたときにスローされる例外を表します。</summary>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor">
      <summary>
        <see cref="T:System.Data.DuplicateNameException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化情報を指定して、<see cref="T:System.Data.DuplicateNameException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">指定したシリアル化ストリームの転送元と転送先の説明。</param>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.String)">
      <summary>文字列を指定して、<see cref="T:System.Data.DuplicateNameException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.String,System.Exception)">
      <summary>指定した文字列と例外を使用して、<see cref="T:System.Data.DuplicateNameException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.EnumerableRowCollection">
      <summary>LINQ to DataSet クエリから返される <see cref="T:System.Data.DataRow" /> オブジェクトのコレクションを表します。 この API は、.NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="M:System.Data.EnumerableRowCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        <see cref="T:System.Data.DataRow" /> オブジェクトのコレクションの列挙子を返します。 この API は、.NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> オブジェクトのコレクションをスキャンするために使用できる <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="T:System.Data.EnumerableRowCollection`1">
      <summary>クエリから返される <see cref="T:System.Data.DataRow" /> オブジェクトのコレクションを表します。</summary>
      <typeparam name="TRow">ソース シーケンスのオブジェクトの型 (通常は <see cref="T:System.Data.DataRow" />)。</typeparam>
    </member>
    <member name="M:System.Data.EnumerableRowCollection`1.GetEnumerator">
      <summary>格納されている行オブジェクトのコレクションの列挙子を返します。</summary>
      <returns>
        <paramref name="TRow" /> オブジェクトのコレクションをスキャンするために使用できる、厳密に型指定された <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        <see cref="T:System.Data.DataRow" /> オブジェクトのコレクションの列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> オブジェクトのコレクションをスキャンするために使用できる <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="T:System.Data.EnumerableRowCollectionExtensions">
      <summary>データ行コレクション クラスの拡張メソッドが含まれます。</summary>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Cast``1(System.Data.EnumerableRowCollection)">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" /> の要素を指定した型に変換します。</summary>
      <param name="source">変換する要素が格納されている <see cref="T:System.Data.EnumerableRowCollection" />。</param>
      <typeparam name="TResult">元の要素の変換後の型。</typeparam>
      <returns>指定した型に変換されたソース シーケンスの各要素が格納されている <see cref="T:System.Data.EnumerableRowCollection" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidCastException">シーケンスの要素を <paramref name="TResult" /> 型にキャストできません。</exception>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderBy``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" /> の行を指定したキーに従って昇順に並べ替えます。</summary>
      <param name="source">並べ替えられる <see cref="T:System.Data.EnumerableRowCollection" /> 要素を含む <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> の行要素の型。通常は、<see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <returns>要素が指定したキーで並べ替えられている <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderBy``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" /> の行を指定したキーと比較子に従って昇順に並べ替えます。</summary>
      <param name="source">並べ替えられる <see cref="T:System.Data.EnumerableRowCollection" /> 要素を含む <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> の行要素の型。通常は、<see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <returns>要素が指定したキーと比較子で並べ替えられている <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderByDescending``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" /> の行を指定したキーに従って降順に並べ替えます。</summary>
      <param name="source">並べ替えられる <see cref="T:System.Data.EnumerableRowCollection" /> 要素を含む <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> の行要素の型。通常は、<see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <returns>要素が指定したキーで並べ替えられている <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderByDescending``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" /> の行を指定したキーと比較子に従って降順に並べ替えます。</summary>
      <param name="source">並べ替えられる <see cref="T:System.Data.EnumerableRowCollection" /> 要素を含む <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> の行要素の型。通常は、<see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <returns>要素が指定したキーと比較子で並べ替えられている <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Select``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection`1" /> の各要素を新しいフォームに射影します。</summary>
      <param name="source">変換関数を呼び出す <see cref="T:System.Data.EnumerableRowCollection`1" /> 要素を格納する <see cref="T:System.Data.DataRow" />。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> の行要素の型。通常は、<see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="S">
        <paramref name="TRow" /> の変換先の型。</typeparam>
      <returns>
        <paramref name="source" /> の各要素に対して変換関数を呼び出した結果として得られる要素を含む <see cref="T:System.Data.EnumerableRowCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenBy``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" /> の行の 2 番目の並べ替えを、指定したキーに従って昇順で行います。</summary>
      <param name="source">並べ替えられる <see cref="T:System.Data.EnumerableRowCollection" /> 要素を含む <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> の行要素の型。通常は、<see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <returns>要素が指定したキーで並べ替えられている <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenBy``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" /> の行の 2 番目の並べ替えを、指定したキーと比較子に従って昇順で行います。</summary>
      <param name="source">並べ替えられる <see cref="T:System.Data.EnumerableRowCollection" /> 要素を含む <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> の行要素の型。通常は、<see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <returns>要素が指定したキーと比較子で並べ替えられている <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenByDescending``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" /> の行の 2 番目の並べ替えを、指定したキーに従って降順で行います。</summary>
      <param name="source">並べ替えられる <see cref="T:System.Data.EnumerableRowCollection" /> 要素を含む <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> の行要素の型。通常は、<see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <returns>要素が指定したキーで並べ替えられている <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenByDescending``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" /> の行の 2 番目の並べ替えを、指定したキーと比較子に従って降順で行います。</summary>
      <param name="source">並べ替えられる <see cref="T:System.Data.EnumerableRowCollection" /> 要素を含む <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> の行要素の型。通常は、<see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <returns>要素が指定したキーと比較子で並べ替えられている <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Where``1(System.Data.EnumerableRowCollection{``0},System.Func{``0,System.Boolean})">
      <summary>指定した述語に基づいて行のシーケンスをフィルター処理します。</summary>
      <param name="source">フィルター処理する <see cref="T:System.Data.EnumerableRowCollection" /> 要素を格納している <see cref="T:System.Data.DataRow" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> の行要素の型。通常は、<see cref="T:System.Data.DataRow" />。</typeparam>
      <returns>条件を満たす、入力シーケンスの行を含む <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />。</returns>
    </member>
    <member name="T:System.Data.EvaluateException">
      <summary>
        <see cref="P:System.Data.DataColumn.Expression" /> の <see cref="T:System.Data.DataColumn" /> プロパティを評価できないときにスローされる例外を表します。</summary>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor">
      <summary>
        <see cref="T:System.Data.EvaluateException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.EvaluateException" /> と <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を使用して、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">特定のシリアル化ストリームの転送元と転送先。</param>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.String)">
      <summary>文字列を指定して、<see cref="T:System.Data.EvaluateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Data.EvaluateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.FillErrorEventArgs">
      <summary>
        <see cref="E:System.Data.Common.DataAdapter.FillError" /> の <see cref="T:System.Data.Common.DbDataAdapter" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.Data.FillErrorEventArgs.#ctor(System.Data.DataTable,System.Object[])">
      <summary>
        <see cref="T:System.Data.FillErrorEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataTable">更新されていた <see cref="T:System.Data.DataTable" />。</param>
      <param name="values">更新されていた行の値。</param>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Continue">
      <summary>エラーが発生しても格納操作を続行するかどうかを示す値を取得または設定します。</summary>
      <returns>格納操作を続行する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.DataTable">
      <summary>エラーが発生したときに更新されていた <see cref="T:System.Data.DataTable" /> を取得します。</summary>
      <returns>更新されていた <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Errors">
      <summary>処理中のエラーを取得します。</summary>
      <returns>処理中のエラー。</returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Values">
      <summary>エラーが発生したときに更新されていた行の値を取得します。</summary>
      <returns>更新されていた行の値。</returns>
    </member>
    <member name="T:System.Data.FillErrorEventHandler">
      <summary>
        <see cref="E:System.Data.Common.DataAdapter.FillError" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.Data.FillErrorEventArgs" />。</param>
    </member>
    <member name="T:System.Data.ForeignKeyConstraint">
      <summary>値または行を削除または更新したときに、主キーと外部キーのリレーションシップに関係する列セットに対して適用するアクション制約を表します。</summary>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.Data.DataColumn,System.Data.DataColumn)">
      <summary>親子の <see cref="T:System.Data.ForeignKeyConstraint" /> オブジェクトを指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parentColumn">制約内の親 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="childColumn">制約内の子 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">列の一方または両方が <see langword="null" /> です。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列のデータ型が異なります。

または -
テーブルが同じ <see cref="T:System.Data.DataSet" /> に属していません。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>親子の <see cref="T:System.Data.ForeignKeyConstraint" /> オブジェクトの配列を指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parentColumns">制約内の親 <see cref="T:System.Data.DataColumn" /> の配列。</param>
      <param name="childColumns">制約内の子 <see cref="T:System.Data.DataColumn" /> の配列。</param>
      <exception cref="T:System.ArgumentNullException">列の一方または両方が <see langword="null" /> です。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列のデータ型が異なります。

または -
テーブルが同じ <see cref="T:System.Data.DataSet" /> に属していません。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>名前と親子の <see cref="T:System.Data.ForeignKeyConstraint" /> オブジェクトを指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="constraintName">制約の名前。</param>
      <param name="parentColumn">制約内の親 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="childColumn">制約内の子 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">列の一方または両方が <see langword="null" /> です。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列のデータ型が異なります。

または -
テーブルが同じ <see cref="T:System.Data.DataSet" /> に属していません。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>名前と親子の <see cref="T:System.Data.ForeignKeyConstraint" /> オブジェクトの配列を指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="constraintName">
        <see cref="T:System.Data.ForeignKeyConstraint" /> の名前。 <see langword="null" /> または空の文字列の場合は、制約コレクションに追加したときに既定の名前が付けられます。</param>
      <param name="parentColumns">制約内の親 <see cref="T:System.Data.DataColumn" /> の配列。</param>
      <param name="childColumns">制約内の子 <see cref="T:System.Data.DataColumn" /> の配列。</param>
      <exception cref="T:System.ArgumentNullException">列の一方または両方が <see langword="null" /> です。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列のデータ型が異なります。

または -
テーブルが同じ <see cref="T:System.Data.DataSet" /> に属していません。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Data.AcceptRejectRule,System.Data.Rule,System.Data.Rule)">
      <summary>このコンストラクターは、Visual Studio 環境でのデザイン時のサポートのために用意されています。 このコンストラクターを使用して作成した <see cref="T:System.Data.ForeignKeyConstraint" /> オブジェクトは、<see cref="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])" /> を使用してコレクションに追加する必要があります。 このメソッドを呼び出したときに、指定した名前のテーブルと列が存在している必要があります。このコンストラクターを呼び出す前に <see cref="M:System.Data.DataTable.BeginInit" /> を呼び出した場合は、<see cref="M:System.Data.DataTable.EndInit" /> を呼び出したときに、指定した名前のテーブルと列が存在している必要があります。</summary>
      <param name="constraintName">制約の名前。</param>
      <param name="parentTableName">制約内の親 <see cref="T:System.Data.DataTable" /> オブジェクトを格納している親 <see cref="T:System.Data.DataColumn" /> の名前。</param>
      <param name="parentTableNamespace">
        <see cref="P:System.Data.DataTable.Namespace" /> の名前。</param>
      <param name="parentColumnNames">制約内の親 <see cref="T:System.Data.DataColumn" /> オブジェクトの名前の配列。</param>
      <param name="childColumnNames">制約内の子 <see cref="T:System.Data.DataColumn" /> オブジェクトの名前の配列。</param>
      <param name="acceptRejectRule">
        <see cref="T:System.Data.AcceptRejectRule" /> 値のいずれか 1 つ。 使用できる値は、<see langword="None" />、<see langword="Cascade" />、および <see langword="Default" /> です。</param>
      <param name="deleteRule">行が削除されたときに使用する <see cref="T:System.Data.Rule" /> 値の 1 つ。 既定値は、<see langword="Cascade" /> です。 使用できる値は、<see langword="None" />、<see langword="Cascade" />、<see langword="SetNull" />、<see langword="SetDefault" />、<see langword="Default" /> などです。</param>
      <param name="updateRule">行が更新されたときに使用する <see cref="T:System.Data.Rule" /> 値の 1 つ。 既定値は、<see langword="Cascade" /> です。 使用できる値は、<see langword="None" />、<see langword="Cascade" />、<see langword="SetNull" />、<see langword="SetDefault" />、<see langword="Default" /> などです。</param>
      <exception cref="T:System.ArgumentNullException">列の一方または両方が <see langword="null" /> です。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列のデータ型が異なります。

または -
テーブルが同じ <see cref="T:System.Data.DataSet" /> に属していません。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.String,System.String[],System.String[],System.Data.AcceptRejectRule,System.Data.Rule,System.Data.Rule)">
      <summary>このコンストラクターは、Visual Studio 環境でのデザイン時のサポートのために用意されています。 このコンストラクターを使用して作成した <see cref="T:System.Data.ForeignKeyConstraint" /> オブジェクトは、<see cref="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])" /> を使用してコレクションに追加する必要があります。 このメソッドを呼び出したときに、指定した名前のテーブルと列が存在している必要があります。このコンストラクターを呼び出す前に <see cref="M:System.Data.DataTable.BeginInit" /> を呼び出した場合は、<see cref="M:System.Data.DataTable.EndInit" /> を呼び出したときに、指定した名前のテーブルと列が存在している必要があります。</summary>
      <param name="constraintName">制約の名前。</param>
      <param name="parentTableName">制約内の親 <see cref="T:System.Data.DataTable" /> オブジェクトを格納している親 <see cref="T:System.Data.DataColumn" /> の名前。</param>
      <param name="parentColumnNames">制約内の親 <see cref="T:System.Data.DataColumn" /> オブジェクトの名前の配列。</param>
      <param name="childColumnNames">制約内の子 <see cref="T:System.Data.DataColumn" /> オブジェクトの名前の配列。</param>
      <param name="acceptRejectRule">
        <see cref="T:System.Data.AcceptRejectRule" /> 値のいずれか 1 つ。 使用できる値は、<see langword="None" />、<see langword="Cascade" />、および <see langword="Default" /> です。</param>
      <param name="deleteRule">行が削除されたときに使用する <see cref="T:System.Data.Rule" /> 値の 1 つ。 既定値は、<see langword="Cascade" /> です。 使用できる値は、<see langword="None" />、<see langword="Cascade" />、<see langword="SetNull" />、<see langword="SetDefault" />、<see langword="Default" /> などです。</param>
      <param name="updateRule">行が更新されたときに使用する <see cref="T:System.Data.Rule" /> 値の 1 つ。 既定値は、<see langword="Cascade" /> です。 使用できる値は、<see langword="None" />、<see langword="Cascade" />、<see langword="SetNull" />、<see langword="SetDefault" />、<see langword="Default" /> などです。</param>
      <exception cref="T:System.ArgumentNullException">列の一方または両方が <see langword="null" /> です。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列のデータ型が異なります。

または -
テーブルが同じ <see cref="T:System.Data.DataSet" /> に属していません。</exception>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.AcceptRejectRule">
      <summary>
        <see cref="M:System.Data.DataTable.AcceptChanges" /> が呼び出されたときにこの制約全体で実行する必要があるアクションを示します。</summary>
      <returns>
        <see cref="T:System.Data.AcceptRejectRule" /> 値のいずれか 1 つ。 使用できる値は、<see langword="None" />、<see langword="Cascade" /> などです。 既定値は、<see langword="None" /> です。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.Columns">
      <summary>この制約の子列を取得します。</summary>
      <returns>この制約の子列である <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.DeleteRule">
      <summary>行を削除したときにこの制約全体で発生するアクションを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.Rule" /> 値のいずれか 1 つ。 既定値は、<see langword="Cascade" /> です。</returns>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.Equals(System.Object)">
      <summary>現在の <see cref="T:System.Data.ForeignKeyConstraint" /> が指定したオブジェクトと同一かどうかを示す値を取得します。</summary>
      <param name="key">この <see cref="T:System.Data.ForeignKeyConstraint" /> と比較するオブジェクト。 2 つの <see cref="T:System.Data.ForeignKeyConstraint" /> が同じ列を制約している場合、両者は同等です。</param>
      <returns>オブジェクトが同一の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.GetHashCode">
      <summary>
        <see cref="T:System.Data.ForeignKeyConstraint" /> オブジェクトのこのインスタンスのハッシュ コードを取得します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.RelatedColumns">
      <summary>この制約の親列。</summary>
      <returns>この制約の親列である <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.RelatedTable">
      <summary>この制約の親テーブルを取得します。</summary>
      <returns>この制約の親 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.Table">
      <summary>この制約の子テーブルを取得します。</summary>
      <returns>この制約内の子テーブルである <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.UpdateRule">
      <summary>行を更新したときにこの制約全体で発生するアクションを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.Rule" /> 値のいずれか 1 つ。 既定値は、<see langword="Cascade" /> です。</returns>
    </member>
    <member name="T:System.Data.IColumnMapping">
      <summary>データ ソース列に <see cref="T:System.Data.DataSet" /> 列を関連付けます。この関連付けは、.NET Framework データ プロバイダーが共通に使用する <see cref="T:System.Data.Common.DataColumnMapping" /> クラスによって実装されます。</summary>
    </member>
    <member name="P:System.Data.IColumnMapping.DataSetColumn">
      <summary>割り当て先の <see cref="T:System.Data.DataSet" /> 内の列の名前を取得または設定します。</summary>
      <returns>割り当て先の <see cref="T:System.Data.DataSet" /> 内の列の名前。 名前の大文字と小文字は区別されません。</returns>
    </member>
    <member name="P:System.Data.IColumnMapping.SourceColumn">
      <summary>割り当て元のデータ ソース内の列の名前を取得または設定します。 名前の大文字と小文字は区別されます。</summary>
      <returns>データ ソース内の列の名前。大文字と小文字が区別されます。</returns>
    </member>
    <member name="T:System.Data.IColumnMappingCollection">
      <summary>DataColumnMapping オブジェクトのコレクションを格納します。 .NET Framework データ プロバイダーが共通に使用する <see cref="T:System.Data.Common.DataColumnMappingCollection" /> によって実装されます。</summary>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.Add(System.String,System.String)">
      <summary>ソース列名と <see cref="T:System.Data.DataSet" /> 列名を使用して、ColumnMapping オブジェクトを ColumnMapping コレクションに追加します。</summary>
      <param name="sourceColumnName">ソース列の名前。大文字と小文字は区別されます。</param>
      <param name="dataSetColumnName">
        <see cref="T:System.Data.DataSet" /> 列の名前。</param>
      <returns>コレクションに追加された ColumnMapping オブジェクト。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.Contains(System.String)">
      <summary>指定したソース列名を持つ <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトが <see cref="T:System.Data.Common.DataColumnMappingCollection" /> に格納されているかどうかを示す値を取得します。</summary>
      <param name="sourceColumnName">ソース列の名前。大文字と小文字は区別されます。</param>
      <returns>指定したソース列名を持つ <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトが存在する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.GetByDataSetColumn(System.String)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> 列名で ColumnMapping オブジェクトを取得します。</summary>
      <param name="dataSetColumnName">コレクション内の <see cref="T:System.Data.DataSet" /> 列の名前。</param>
      <returns>指定した <see langword="DataSet" /> 列名を持つ ColumnMapping オブジェクト。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.IndexOf(System.String)">
      <summary>指定したソース列名で <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトの位置を取得します。 名前の大文字と小文字は区別されます。</summary>
      <param name="sourceColumnName">ソース列の名前。大文字と小文字は区別されます。</param>
      <returns>指定したソース列名を持つ <see langword="DataColumnMapping" /> オブジェクトの 0 から始まる位置。</returns>
    </member>
    <member name="P:System.Data.IColumnMappingCollection.Item(System.String)">
      <summary>指定した <see langword="SourceColumn" /> 名で <see cref="T:System.Data.IColumnMapping" /> オブジェクトを取得または設定します。</summary>
      <param name="index">検索する <see langword="IColumnMapping" /> オブジェクトの <see langword="SourceColumn" /> 名。</param>
      <returns>指定した <see langword="IColumnMapping" /> 名を持つ <see langword="SourceColumn" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.RemoveAt(System.String)">
      <summary>指定した <see cref="P:System.Data.IColumnMapping.SourceColumn" /> 名を持つ <see cref="T:System.Data.IColumnMapping" /> オブジェクトをコレクションから削除します。</summary>
      <param name="sourceColumnName">大文字と小文字を区別する <see langword="SourceColumn" /> 名。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定した <see langword="SourceColumn" /> 名を持つ <see cref="T:System.Data.Common.DataColumnMapping" /> オブジェクトは存在しません。</exception>
    </member>
    <member name="T:System.Data.IDataAdapter">
      <summary>オブジェクトが DataAdapter を実装できるようにします。<see cref="T:System.Data.DataSet" /> の格納と更新およびデータ ソースの更新に使用するメソッドとマップ アクション関連プロパティのセットを表します。
<see cref="T:System.Data.IDbDataAdapter" /> インスタンスは、テキスト コマンド (例: Transact-SQL) を入力するリレーショナル データベースのデータ ソース (またはそれに類似したもの) で、<see cref="T:System.Data.IDataAdapter" /> インスタンスは任意の型のデータ ソースに使用できます。</summary>
    </member>
    <member name="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataSet" /> 内の行を追加または更新します。また、Table という名前の <see cref="T:System.Data.DataTable" /> を作成します。</summary>
      <param name="dataSet">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
    </member>
    <member name="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>"Table" という名前の <see cref="T:System.Data.DataTable" /> を指定された <see cref="T:System.Data.DataSet" /> に追加し、指定された <see cref="T:System.Data.SchemaType" /> に基づいて、データ ソースにあるスキーマと一致するようにスキーマを構成します。</summary>
      <param name="dataSet">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つ。</param>
      <returns>データ ソースから返されたスキーマ情報が格納された、<see cref="T:System.Data.DataTable" /> オブジェクトの配列。</returns>
    </member>
    <member name="M:System.Data.IDataAdapter.GetFillParameters">
      <summary>SQL SELECT ステートメントの実行時にユーザーが設定したパラメーターを取得します。</summary>
      <returns>ユーザーが設定したパラメーターが格納された <see cref="T:System.Data.IDataParameter" /> オブジェクトの配列。</returns>
    </member>
    <member name="P:System.Data.IDataAdapter.MissingMappingAction">
      <summary>割り当てられていないソース テーブルまたはソース列をソース名で渡して、フィルター処理するか、エラーを発生させるかどうかを指示または指定します。</summary>
      <returns>
        <see cref="T:System.Data.MissingMappingAction" /> 値のいずれか 1 つ。 既定値は、<see langword="Passthrough" /> です。</returns>
      <exception cref="T:System.ArgumentException">設定された値が <see cref="T:System.Data.MissingMappingAction" /> 値の 1 つではありません。</exception>
    </member>
    <member name="P:System.Data.IDataAdapter.MissingSchemaAction">
      <summary>存在しないソース テーブル、ソース列、それらのリレーションシップをデータセット スキーマに追加するか、無視するか、またはエラーを発生させるかを表示または指定します。</summary>
      <returns>
        <see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか。 既定値は、<see langword="Add" /> です。</returns>
      <exception cref="T:System.ArgumentException">設定された値が <see cref="T:System.Data.MissingSchemaAction" /> 値の 1 つではありません。</exception>
    </member>
    <member name="P:System.Data.IDataAdapter.TableMappings">
      <summary>ソース テーブルをデータセット テーブルに割り当てる方法を示します。</summary>
      <returns>返されたレコードと <see cref="T:System.Data.DataSet" /> との間のマスター マップを提供するコレクション。 既定値は空のコレクションです。</returns>
    </member>
    <member name="M:System.Data.IDataAdapter.Update(System.Data.DataSet)">
      <summary>指定された <see cref="T:System.Data.DataSet" /> 内の Table という名前の <see cref="T:System.Data.DataTable" /> に含まれる挿入行、更新行、または削除行に対して、INSERT、UPDATE、または DELETE ステートメントを個別に呼び出します。</summary>
      <param name="dataSet">データ ソースの更新に使用した <see cref="T:System.Data.DataSet" />。</param>
      <returns>
        <see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</returns>
      <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
    </member>
    <member name="T:System.Data.IDataParameter">
      <summary>Command オブジェクトへのパラメーター、さらに必要に応じて <see cref="T:System.Data.DataSet" /> 列へのそれらのマッピングを表し、データ ソースにアクセスする .NET Framework データ プロバイダーによって実装されます。</summary>
    </member>
    <member name="P:System.Data.IDataParameter.DbType">
      <summary>パラメーターの <see cref="T:System.Data.DbType" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DbType" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Data.DbType.String" /> です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">プロパティが有効な <see cref="T:System.Data.DbType" /> に設定されませんでした。</exception>
    </member>
    <member name="P:System.Data.IDataParameter.Direction">
      <summary>パラメーターが入力専用、出力専用、双方向、またはストアド プロシージャの戻り値パラメーターのいずれであるかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 値のいずれか。 既定値は、<see langword="Input" /> です。</returns>
      <exception cref="T:System.ArgumentException">プロパティが、有効な <see cref="T:System.Data.ParameterDirection" /> 値のいずれかに設定されていません。</exception>
    </member>
    <member name="P:System.Data.IDataParameter.IsNullable">
      <summary>パラメーターが null 値を受け取るかどうかを示す値を取得します。</summary>
      <returns>null 値を受け取る場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Data.IDataParameter.ParameterName">
      <summary>
        <see cref="T:System.Data.IDataParameter" /> の名前を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> の名前。 既定値は空の文字列です。</returns>
    </member>
    <member name="P:System.Data.IDataParameter.SourceColumn">
      <summary>
        <see cref="T:System.Data.DataSet" /> にマップされ、<see cref="P:System.Data.IDataParameter.Value" /> を読み込んだり返したりするために使用されるソース列の名前を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> にマップされるソース列の名前。 既定値は空の文字列です。</returns>
    </member>
    <member name="P:System.Data.IDataParameter.SourceVersion">
      <summary>
        <see cref="P:System.Data.IDataParameter.Value" /> を読み込むときに使用する <see cref="T:System.Data.DataRowVersion" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 値のいずれか。 既定値は、<see langword="Current" /> です。</returns>
      <exception cref="T:System.ArgumentException">プロパティが <see cref="T:System.Data.DataRowVersion" /> 値のいずれかに設定されていません。</exception>
    </member>
    <member name="P:System.Data.IDataParameter.Value">
      <summary>パラメーターの値を取得または設定します。</summary>
      <returns>パラメーターの値である <see cref="T:System.Object" />。 既定値は NULL です。</returns>
    </member>
    <member name="T:System.Data.IDataParameterCollection">
      <summary>Command オブジェクトと <see cref="T:System.Data.DataSet" /> 列へのそれらのマッピングに対応するすべてのパラメーターを収集し、データ ソースにアクセスする .NET Framework データ プロバイダーによって実装されます。</summary>
    </member>
    <member name="M:System.Data.IDataParameterCollection.Contains(System.String)">
      <summary>コレクション内のパラメーターが指定した名前を持つかどうかを示す値を取得します。</summary>
      <param name="parameterName">パラメーターの名前。</param>
      <returns>パラメーターがコレクションに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.IDataParameterCollection.IndexOf(System.String)">
      <summary>コレクション内の <see cref="T:System.Data.IDataParameter" /> の場所を取得します。</summary>
      <param name="parameterName">パラメーターの名前。</param>
      <returns>コレクション内の <see cref="T:System.Data.IDataParameter" /> の 0 から始まる場所。</returns>
    </member>
    <member name="P:System.Data.IDataParameterCollection.Item(System.String)">
      <summary>指定したインデックスにあるパラメーターを取得または設定します。</summary>
      <param name="parameterName">取得するパラメーターの名前。</param>
      <returns>指定したインデックス位置にある <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Data.IDataParameterCollection.RemoveAt(System.String)">
      <summary>
        <see cref="T:System.Data.IDataParameter" /> をコレクションから削除します。</summary>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="T:System.Data.IDataReader">
      <summary>データ ソースでのコマンド実行により取得された結果セットの 1 つ以上の順方向専用ストリームを読み取る手段を提供し、リレーショナル データベースにアクセスする .NET Framework データ プロバイダーによって実装されます。</summary>
    </member>
    <member name="M:System.Data.IDataReader.Close">
      <summary>
        <see cref="T:System.Data.IDataReader" /> オブジェクトを閉じます。</summary>
    </member>
    <member name="P:System.Data.IDataReader.Depth">
      <summary>現在の行の入れ子の深さを示す値を取得します。</summary>
      <returns>入れ子のレベル。</returns>
    </member>
    <member name="M:System.Data.IDataReader.GetSchemaTable">
      <summary>
        <see cref="T:System.Data.DataTable" /> の列メタデータを記述する <see cref="T:System.Data.IDataReader" /> を返します。</summary>
      <returns>列メタデータを記述する <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.IDataReader" /> が閉じています。</exception>
    </member>
    <member name="P:System.Data.IDataReader.IsClosed">
      <summary>データ リーダーが閉じているかどうかを示す値を取得します。</summary>
      <returns>データ リーダーが閉じている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.IDataReader.NextResult">
      <summary>バッチ SQL ステートメントの結果を読み取っているときに、次の結果にデータ リーダーを進めます。</summary>
      <returns>次の行が存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.IDataReader.Read">
      <summary>
        <see cref="T:System.Data.IDataReader" /> を次のレコードに進めます。</summary>
      <returns>次の行が存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.IDataReader.RecordsAffected">
      <summary>SQL ステートメントの実行によって変更、挿入、または削除された行の数を取得します。</summary>
      <returns>変更、挿入、または削除された行の数。影響を受けた行がない、またはステートメントが失敗した場合は 0。SELECT ステートメントの場合は -1。</returns>
    </member>
    <member name="T:System.Data.IDataRecord">
      <summary>
        <see langword="DataReader" /> について各行内の列の値へのアクセスを提供し、リレーショナル データベースにアクセスする .NET Framework データ プロバイダーによって実装されています。</summary>
    </member>
    <member name="P:System.Data.IDataRecord.FieldCount">
      <summary>現在の行の列の数を取得します。</summary>
      <returns>有効なレコードセットに配置されない場合は 0。それ以外の場合は現在のレコードの列の数。 既定値は -1 です。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetBoolean(System.Int32)">
      <summary>指定された列の値を Boolean として取得します。</summary>
      <param name="i">0 から始まる列序数。</param>
      <returns>列の値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetByte(System.Int32)">
      <summary>指定された列の 8 ビット符号なし整数値を取得します。</summary>
      <param name="i">0 から始まる列序数。</param>
      <returns>指定した列の 8 ビット符号なし整数値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>指定した列オフセットから、指定したバッファー オフセットから始まるバイトのストリームを、配列としてバッファーに読み取ります。</summary>
      <param name="i">0 から始まる列序数。</param>
      <param name="fieldOffset">読み取り操作を開始する位置を示すフィールド内のインデックス。</param>
      <param name="buffer">バイトのストリームを読み込むバッファー。</param>
      <param name="bufferoffset">読み取り操作を開始する <paramref name="buffer" /> のインデックス。</param>
      <param name="length">読み取るバイト数。</param>
      <returns>実際に読み取られたバイト数。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetChar(System.Int32)">
      <summary>指定された列の文字値を取得します。</summary>
      <param name="i">0 から始まる列序数。</param>
      <returns>指定した列の文字値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>指定した列オフセットから、指定したバッファー オフセットから始まる文字列ストリームを、配列としてバッファーに読み取ります。</summary>
      <param name="i">0 から始まる列序数。</param>
      <param name="fieldoffset">読み取り操作を開始する位置を示す行内のインデックス。</param>
      <param name="buffer">バイトのストリームを読み込むバッファー。</param>
      <param name="bufferoffset">読み取り操作を開始する <paramref name="buffer" /> のインデックス。</param>
      <param name="length">読み取るバイト数。</param>
      <returns>実際に読み取られた文字数。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetData(System.Int32)">
      <summary>指定された列序数の <see cref="T:System.Data.IDataReader" /> を返します。</summary>
      <param name="i">検索するフィールドのインデックス。</param>
      <returns>指定した列の序数の <see cref="T:System.Data.IDataReader" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetDataTypeName(System.Int32)">
      <summary>指定されたフィールドのデータ型情報を取得します。</summary>
      <param name="i">検索するフィールドのインデックス。</param>
      <returns>指定したフィールドのデータ型情報。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetDateTime(System.Int32)">
      <summary>指定されたフィールドの日付と時刻のデータ値を取得します。</summary>
      <param name="i">検索するフィールドのインデックス。</param>
      <returns>指定したフィールドの日時のデータ値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetDecimal(System.Int32)">
      <summary>指定されたフィールドの固定位置の数値を取得します。</summary>
      <param name="i">検索するフィールドのインデックス。</param>
      <returns>指定したフィールドの固定位置数値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetDouble(System.Int32)">
      <summary>指定されたフィールドの倍精度浮動小数点値を取得します。</summary>
      <param name="i">検索するフィールドのインデックス。</param>
      <returns>指定したフィールドの倍精度浮動小数点数。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetFieldType(System.Int32)">
      <summary>
        <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" /> から返される <see cref="T:System.Object" /> の型に対応する <see cref="T:System.Type" /> 情報を取得します。</summary>
      <param name="i">検索するフィールドのインデックス。</param>
      <returns>
        <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" /> から返される <see cref="T:System.Object" /> の型に対応する <see cref="T:System.Type" /> 情報。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetFloat(System.Int32)">
      <summary>指定されたフィールドの単精度浮動小数点値を取得します。</summary>
      <param name="i">検索するフィールドのインデックス。</param>
      <returns>指定したフィールドの単精度浮動小数点数。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetGuid(System.Int32)">
      <summary>指定したフィールドの GUID 値を返します。</summary>
      <param name="i">検索するフィールドのインデックス。</param>
      <returns>指定したフィールドの GUID 値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt16(System.Int32)">
      <summary>指定されたフィールドの 16 ビット符号付き整数値を取得します。</summary>
      <param name="i">検索するフィールドのインデックス。</param>
      <returns>指定したフィールドの 16 ビット符号付き整数値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt32(System.Int32)">
      <summary>指定されたフィールドの 32 ビット符号付き整数値を取得します。</summary>
      <param name="i">検索するフィールドのインデックス。</param>
      <returns>指定されたフィールドの 32 ビット符号付き整数値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt64(System.Int32)">
      <summary>指定されたフィールドの 64 ビット符号付き整数値を取得します。</summary>
      <param name="i">検索するフィールドのインデックス。</param>
      <returns>指定されたフィールドの 64 ビット符号付き整数値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetName(System.Int32)">
      <summary>検索するフィールドの名前を取得します。</summary>
      <param name="i">検索するフィールドのインデックス。</param>
      <returns>フィールドの名前。返される値がない場合は空の文字列 ("")。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetOrdinal(System.String)">
      <summary>名前付きフィールドのインデックスを返します。</summary>
      <param name="name">検索するフィールドの名前。</param>
      <returns>名前付きフィールドのインデックス。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetString(System.Int32)">
      <summary>指定したフィールドの文字列値を取得します。</summary>
      <param name="i">検索するフィールドのインデックス。</param>
      <returns>指定したフィールドの文字列値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetValue(System.Int32)">
      <summary>指定したフィールドの値を返します。</summary>
      <param name="i">検索するフィールドのインデックス。</param>
      <returns>フィールドの値が返されたときにその値を格納する <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetValues(System.Object[])">
      <summary>現在のレコードの列の値を持つオブジェクトの配列を設定します。</summary>
      <param name="values">属性フィールドをコピーする <see cref="T:System.Object" /> の配列。</param>
      <returns>配列に含まれる <see cref="T:System.Object" /> のインスタンスの数。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.IsDBNull(System.Int32)">
      <summary>指定されたフィールドが null に設定されているかどうかを返します。</summary>
      <param name="i">検索するフィールドのインデックス。</param>
      <returns>指定したフィールドが null に設定されている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="P:System.Data.IDataRecord.Item(System.Int32)">
      <summary>指定したインデックスにある列を取得します。</summary>
      <param name="i">取得する列の 0 から始まるインデックス。</param>
      <returns>指定したインデックス位置に <see cref="T:System.Object" /> として存在する列。</returns>
      <exception cref="T:System.IndexOutOfRangeException">渡されたインデックスは 0 から <see cref="P:System.Data.IDataRecord.FieldCount" /> の範囲外にあります。</exception>
    </member>
    <member name="P:System.Data.IDataRecord.Item(System.String)">
      <summary>指定された名前を持つ列を取得します。</summary>
      <param name="name">検索する列の名前。</param>
      <returns>指定した名前を <see cref="T:System.Object" /> として持つ列。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前の列は見つかりませんでした。</exception>
    </member>
    <member name="T:System.Data.IDbCommand">
      <summary>データ ソースに接続しながら実行される SQL ステートメントを表し、リレーショナル データベースにアクセスする .NET Framework データ プロバイダーにより実装されます。</summary>
    </member>
    <member name="M:System.Data.IDbCommand.Cancel">
      <summary>
        <see cref="T:System.Data.IDbCommand" /> の実行のキャンセルを試行します。</summary>
    </member>
    <member name="P:System.Data.IDbCommand.CommandText">
      <summary>データ ソースに対して実行するテキスト コマンドを取得または設定します。</summary>
      <returns>実行するテキスト コマンド。 既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.CommandTimeout">
      <summary>コマンド実行の試行を終了してエラーを生成するまでの待機時間 (秒単位) を取得または設定します。</summary>
      <returns>コマンドが実行されるまでの待機時間 (秒)。 既定値は 30 秒です。</returns>
      <exception cref="T:System.ArgumentException">割り当てられたプロパティ値が 0 未満です。</exception>
    </member>
    <member name="P:System.Data.IDbCommand.CommandType">
      <summary>
        <see cref="P:System.Data.IDbCommand.CommandText" /> プロパティをどのように解釈するかを表示または指定します。</summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 値のいずれか 1 つ。 既定値は、<see langword="Text" /> です。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.Connection">
      <summary>この <see cref="T:System.Data.IDbCommand" /> のインスタンスで使用する <see cref="T:System.Data.IDbConnection" /> を取得または設定します。</summary>
      <returns>データ ソースへの接続。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.CreateParameter">
      <summary>
        <see cref="T:System.Data.IDbDataParameter" /> オブジェクトの新しいインスタンスを作成します。</summary>
      <returns>
        <see langword="IDbDataParameter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteNonQuery">
      <summary>.NET Framework データ プロバイダーの <see langword="Connection" /> オブジェクトに対して SQL ステートメントを実行し、影響を受ける行の数を返します。</summary>
      <returns>影響を受けた行の数。</returns>
      <exception cref="T:System.InvalidOperationException">接続が存在しません。

または -

接続が開かれていません。</exception>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteReader">
      <summary>
        <see cref="P:System.Data.IDbCommand.Connection" /> に対して <see cref="P:System.Data.IDbCommand.CommandText" /> を実行し、<see cref="T:System.Data.IDataReader" /> をビルドします。</summary>
      <returns>
        <see cref="T:System.Data.IDataReader" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>
        <see cref="P:System.Data.IDbCommand.Connection" /> に対して <see cref="P:System.Data.IDbCommand.CommandText" /> を実行し、<see cref="T:System.Data.CommandBehavior" /> の値のいずれかを使用して <see cref="T:System.Data.IDataReader" /> をビルドします。</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 値のいずれか。</param>
      <returns>
        <see cref="T:System.Data.IDataReader" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteScalar">
      <summary>クエリを実行し、そのクエリが返す結果セットの最初の行にある最初の列を返します。 追加の列または行は無視されます。</summary>
      <returns>結果セットの最初の行の最初の列。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.Parameters">
      <summary>
        <see cref="T:System.Data.IDataParameterCollection" /> を取得します。</summary>
      <returns>SQL ステートメントまたはストアド プロシージャのパラメーター。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.Prepare">
      <summary>コマンドの準備済み (またはコンパイル済み) のバージョンをデータ ソースに作成します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> が設定されていません。

または -
<see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> が <see cref="M:System.Data.OleDb.OleDbConnection.Open" /> ではありません。</exception>
    </member>
    <member name="P:System.Data.IDbCommand.Transaction">
      <summary>.NET Framework データ プロバイダーの <see langword="Command" /> オブジェクトが実行されるトランザクションを取得または設定します。</summary>
      <returns>.NET Framework データ プロバイダーの <see langword="Command" /> オブジェクトが実行されます。 既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.UpdatedRowSource">
      <summary>
        <see cref="T:System.Data.Common.DbDataAdapter" /> の <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> メソッドで使用するときに、コマンドの結果を <see cref="T:System.Data.DataRow" /> に適用する方法を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 値のいずれか 1 つ。 コマンドが自動的に生成される場合を除き、既定値は <see langword="Both" /> です。 自動的に生成される場合、既定値は <see langword="None" /> です。</returns>
      <exception cref="T:System.ArgumentException">入力された値が、<see cref="T:System.Data.UpdateRowSource" /> 値ではありませんでした。</exception>
    </member>
    <member name="T:System.Data.IDbConnection">
      <summary>データ ソースへのオープン接続を表し、リレーショナル データベースにアクセスする .NET Framework データ プロバイダーにより実装されます。</summary>
    </member>
    <member name="M:System.Data.IDbConnection.BeginTransaction">
      <summary>データベース トランザクションを開始します。</summary>
      <returns>新しいトランザクションを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>指定した <see cref="T:System.Data.IsolationLevel" /> 値を使用して、データベース トランザクションを開始します。</summary>
      <param name="il">
        <see cref="T:System.Data.IsolationLevel" /> 値のいずれか。</param>
      <returns>新しいトランザクションを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Data.IDbConnection.ChangeDatabase(System.String)">
      <summary>開いている <see langword="Connection" /> オブジェクトの現在のデータベースを変更します。</summary>
      <param name="databaseName">現在のデータベースの代わりに使用するデータベースの名前。</param>
    </member>
    <member name="M:System.Data.IDbConnection.Close">
      <summary>データベースへの接続を閉じます。</summary>
    </member>
    <member name="P:System.Data.IDbConnection.ConnectionString">
      <summary>データベースを開くために使用する文字列を取得または設定します。</summary>
      <returns>接続設定が格納されている文字列。</returns>
    </member>
    <member name="P:System.Data.IDbConnection.ConnectionTimeout">
      <summary>試行を終了してエラーを生成するまでの、接続の確立の試行時に待機する時間 (秒単位) を取得します。</summary>
      <returns>接続が開くのを待機する時間 (秒単位)。 既定値は 15 秒です。</returns>
    </member>
    <member name="M:System.Data.IDbConnection.CreateCommand">
      <summary>接続に関連付けられた Command オブジェクトを作成し、返します。</summary>
      <returns>接続に関連付けられている Command オブジェクト。</returns>
    </member>
    <member name="P:System.Data.IDbConnection.Database">
      <summary>現在のデータベース、または接続が開いてから使用するデータベースの名前を取得します。</summary>
      <returns>現在のデータベース、または接続が開いてから使用するデータベースの名前。 既定値は空の文字列です。</returns>
    </member>
    <member name="M:System.Data.IDbConnection.Open">
      <summary>プロバイダー固有の接続オブジェクトの <see langword="ConnectionString" /> プロパティで指定した設定でデータベース接続を開きます。</summary>
    </member>
    <member name="P:System.Data.IDbConnection.State">
      <summary>現在の接続の状態を取得します。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="T:System.Data.IDbDataAdapter">
      <summary>
        <see cref="T:System.Data.DataSet" /> にデータを格納し、データ ソースを更新するために使用するコマンド関連プロパティのセットを表します。リレーショナル データベースにアクセスする .NET Framework データ プロバイダーによって実装されます。</summary>
    </member>
    <member name="P:System.Data.IDbDataAdapter.DeleteCommand">
      <summary>データ セットからレコードを削除する SQL ステートメントを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 中に、データ セット内の削除された行に対応するデータ ソース内のレコードを削除するために使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.InsertCommand">
      <summary>データ ソースに新しいレコードを挿入する SQL ステートメントを取得または設定します。</summary>
      <returns>データ セット内の新しい行に対応するデータ ソース内のレコードを挿入するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.SelectCommand">
      <summary>データ ソース内のレコードを選択する SQL ステートメントを取得または設定します。</summary>
      <returns>データ セットに挿入するレコードをデータ ソースから選択するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.UpdateCommand">
      <summary>データ ソース内のレコードを更新する SQL ステートメントを取得または設定します。</summary>
      <returns>データ セット内の変更された行に対応するデータ ソース内のレコードを更新するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="T:System.Data.IDbDataParameter">
      <summary>Visual Basic .NET データ デザイナーで使用され、コマンド オブジェクトにパラメーターを表し、オプションで <see cref="T:System.Data.DataSet" /> 列にそのマッピングを表します。</summary>
    </member>
    <member name="P:System.Data.IDbDataParameter.Precision">
      <summary>数値パラメーターの精度を示します。</summary>
      <returns>データ プロバイダーである Parameter オブジェクトの Value プロパティを表すために使用される最大桁数。 既定値は 0 で、データ プロバイダーにより Value の精度が設定されていることを示します。</returns>
    </member>
    <member name="P:System.Data.IDbDataParameter.Scale">
      <summary>数値パラメーターのスケールを示します。</summary>
      <returns>
        <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> が解決される、小数点以下の桁数。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Data.IDbDataParameter.Size">
      <summary>パラメーターのサイズ。</summary>
      <returns>列内のデータの最大サイズ (バイト単位)。 既定値はパラメーター値から推論されます。</returns>
    </member>
    <member name="T:System.Data.IDbTransaction">
      <summary>データ ソースで実行されるトランザクションを表し、リレーショナル データベースにアクセスする .NET Framework データ プロバイダーにより実装されます。</summary>
    </member>
    <member name="M:System.Data.IDbTransaction.Commit">
      <summary>データベース トランザクションをコミットします。</summary>
      <exception cref="T:System.Exception">トランザクションをコミットしようとしてエラーが発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">トランザクションは既にコミットまたはロールバックされています。

または -

接続が切れています。</exception>
    </member>
    <member name="P:System.Data.IDbTransaction.Connection">
      <summary>トランザクションに関連付けられる Connection オブジェクトを指定します。</summary>
      <returns>トランザクションに関連付けられる Connection オブジェクト。</returns>
    </member>
    <member name="P:System.Data.IDbTransaction.IsolationLevel">
      <summary>このトランザクションの <see cref="T:System.Data.IsolationLevel" /> を指定します。</summary>
      <returns>このトランザクションの <see cref="T:System.Data.IsolationLevel" />。 既定値は、<see langword="ReadCommitted" /> です。</returns>
    </member>
    <member name="M:System.Data.IDbTransaction.Rollback">
      <summary>トランザクションを保留状態からロールバックします。</summary>
      <exception cref="T:System.Exception">トランザクションをコミットしようとしてエラーが発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">トランザクションは既にコミットまたはロールバックされています。

または -

接続が切れています。</exception>
    </member>
    <member name="T:System.Data.InRowChangingEventException">
      <summary>
        <see cref="M:System.Data.DataRow.EndEdit" /> イベント内で <see cref="E:System.Data.DataTable.RowChanging" /> メソッドを呼び出したときにスローされる例外を表します。</summary>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor">
      <summary>
        <see cref="T:System.Data.InRowChangingEventException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化情報を指定して、<see cref="T:System.Data.InRowChangingEventException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">指定したシリアル化ストリームの転送元と転送先の説明。</param>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.String)">
      <summary>文字列を指定して、<see cref="T:System.Data.InRowChangingEventException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Data.InRowChangingEventException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.InternalDataCollectionBase">
      <summary>コレクションを作成するための基本機能を用意しています。</summary>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.#ctor">
      <summary>
        <see cref="T:System.Data.InternalDataCollectionBase" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.CopyTo(System.Array,System.Int32)">
      <summary>現在の <see cref="T:System.Data.InternalDataCollectionBase" /> のすべての要素を 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、指定した <see cref="T:System.Data.InternalDataCollectionBase" /> インデックスから始まります。</summary>
      <param name="ar">現在の <see cref="T:System.Array" /> オブジェクトの要素をコピーする先の 1 次元 <see cref="T:System.Data.InternalDataCollectionBase" />。</param>
      <param name="index">コピーを開始するコピー先の <see cref="T:System.Array" /> インデックス。</param>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.Count">
      <summary>コレクション内の要素の合計数を取得します。</summary>
      <returns>コレクション内の要素の合計数。</returns>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.GetEnumerator">
      <summary>コレクションの <see cref="T:System.Collections.IEnumerator" /> を取得します。</summary>
      <returns>コレクションの <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.IsReadOnly">
      <summary>
        <see cref="T:System.Data.InternalDataCollectionBase" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>コレクションが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.IsSynchronized">
      <summary>
        <see cref="T:System.Data.InternalDataCollectionBase" /> が同期されているかどうかを示す値を取得します。</summary>
      <returns>コレクションが同期をとられている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.List">
      <summary>コレクションの項目をリストとして取得します。</summary>
      <returns>コレクションを格納している <see cref="T:System.Collections.ArrayList" />。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.SyncRoot">
      <summary>コレクションの同期をとるために使用できるオブジェクトを取得します。</summary>
      <returns>コレクションを同期するために使用する <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Data.InvalidConstraintException">
      <summary>リレーションシップを誤って作成またはアクセスしようとしたときに生成される例外を表します。</summary>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor">
      <summary>
        <see cref="T:System.Data.InvalidConstraintException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化情報を指定して、<see cref="T:System.Data.InvalidConstraintException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">指定したシリアル化ストリームの転送元と転送先の説明。</param>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.String)">
      <summary>文字列を指定して、<see cref="T:System.Data.InvalidConstraintException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Data.InvalidConstraintException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.InvalidExpressionException">
      <summary>無効な <see cref="T:System.Data.DataColumn" /> が格納された <see cref="P:System.Data.DataColumn.Expression" /> を <see cref="T:System.Data.DataColumnCollection" /> に追加しようとした場合にスローされる例外を表します。</summary>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor">
      <summary>
        <see cref="T:System.Data.InvalidExpressionException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.InvalidExpressionException" /> と <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を使用して、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">指定したシリアル化ストリームの転送元と転送先。</param>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.String)">
      <summary>文字列を指定して、<see cref="T:System.Data.InvalidExpressionException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Data.InvalidExpressionException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.IsolationLevel">
      <summary>接続のトランザクション ロック動作を指定します。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Chaos">
      <summary>これより分離性の高いトランザクションからの保留中の変更に対しては上書きできません。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.ReadCommitted">
      <summary>データが読み込まれている間、ダーティ読み込みを防ぐために共有ロックが保持されますが、トランザクションが終了する前にデータを変更できます。このため、読み込みは繰り返されません。また実際には存在しないデータを生成できます。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.ReadUncommitted">
      <summary>ダーティ読み込みができます。つまり、共有ロックが発行されておらず、排他ロックが有効ではありません。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.RepeatableRead">
      <summary>他のユーザーがデータを更新できないようにするために、クエリで使用するすべてのデータをロックします。 繰り返し不能読み込みはできませんが、実際には存在しない行を生成できます。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Serializable">
      <summary>
        <see cref="T:System.Data.DataSet" /> にレンジ ロックがかけられ、トランザクションが完了するまで、他のユーザーは行を更新したりデータセットに行を挿入できません。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Snapshot">
      <summary>あるアプリケーションで変更中のデータを他のアプリケーションから読み取ることができるように、そのデータのバージョンを保存して、ブロッキングを減らします。 この場合、クエリを再実行しても、あるトランザクションで加えられた変更を、他のトランザクションで表示できません。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Unspecified">
      <summary>指定した分離レベルとは異なる分離レベルが使用されていますが、レベルを確認できません。</summary>
    </member>
    <member name="T:System.Data.ITableMapping">
      <summary>ソース テーブルに <see cref="T:System.Data.DataSet" /> 内のテーブルを関連付けます。 .NET Framework データ プロバイダーが共通に使用する <see cref="T:System.Data.Common.DataTableMapping" /> クラスによって実装されます。</summary>
    </member>
    <member name="P:System.Data.ITableMapping.ColumnMappings">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMappingCollection" /> の派生 <see cref="T:System.Data.DataTable" /> を取得します。</summary>
      <returns>データ列マップのコレクション。</returns>
    </member>
    <member name="P:System.Data.ITableMapping.DataSetTable">
      <summary>
        <see cref="T:System.Data.DataSet" /> 内にあるテーブルの、大文字と小文字が区別されない名前を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 内にあるテーブルの、大文字と小文字が区別されない名前。</returns>
    </member>
    <member name="P:System.Data.ITableMapping.SourceTable">
      <summary>ソース テーブルの、大文字と小文字が区別される名前を取得または設定します。</summary>
      <returns>ソース テーブルの、大文字と小文字が区別される名前。</returns>
    </member>
    <member name="T:System.Data.ITableMappingCollection">
      <summary>TableMapping オブジェクトのコレクションを格納します。 .NET Framework データ プロバイダーが共通に使用する <see cref="T:System.Data.Common.DataTableMappingCollection" /> によって実装されます。</summary>
    </member>
    <member name="M:System.Data.ITableMappingCollection.Add(System.String,System.String)">
      <summary>コレクションにテーブル マップを追加します。</summary>
      <param name="sourceTableName">ソース テーブルの、大文字と小文字が区別される名前。</param>
      <param name="dataSetTableName">
        <see cref="T:System.Data.DataSet" /> テーブルの名前。</param>
      <returns>新しく割り当てられた <see cref="T:System.Data.ITableMapping" /> オブジェクトへの参照。</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.Contains(System.String)">
      <summary>指定したソース テーブル名を持つテーブル マップがコレクションに格納されているかどうかを示す値を取得します。</summary>
      <param name="sourceTableName">ソース テーブルの、大文字と小文字が区別される名前。</param>
      <returns>指定したソース テーブル名のテーブル マップが存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.GetByDataSetTable(System.String)">
      <summary>指定した <see cref="T:System.Data.DataSet" /> テーブル名を持つ TableMapping オブジェクトを取得します。</summary>
      <param name="dataSetTableName">コレクション内の <see langword="DataSet" /> テーブルの名前。</param>
      <returns>指定した <see langword="DataSet" /> テーブル名を持つ TableMapping オブジェクト。</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.IndexOf(System.String)">
      <summary>コレクション内の <see cref="T:System.Data.ITableMapping" /> オブジェクトの位置を取得します。</summary>
      <param name="sourceTableName">ソース テーブルの、大文字と小文字が区別される名前。</param>
      <returns>コレクション内の <see cref="T:System.Data.ITableMapping" /> オブジェクトの 0 から始まる位置。</returns>
    </member>
    <member name="P:System.Data.ITableMappingCollection.Item(System.String)">
      <summary>指定した <see cref="T:System.Data.ITableMapping" /> 名で <see cref="P:System.Data.ITableMapping.SourceTable" /> のインスタンスを取得または設定します。</summary>
      <param name="index">
        <see cref="T:System.Data.ITableMapping" /> の <see langword="SourceTable" /> 名。</param>
      <returns>指定した <see langword="SourceTable" /> 名の <see cref="T:System.Data.ITableMapping" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.RemoveAt(System.String)">
      <summary>指定した <see cref="P:System.Data.ITableMapping.SourceTable" /> 名を持つ <see cref="T:System.Data.ITableMapping" /> オブジェクトをコレクションから削除します。</summary>
      <param name="sourceTableName">
        <see langword="SourceTable" /> の、大文字と小文字が区別される名前。</param>
    </member>
    <member name="T:System.Data.KeyRestrictionBehavior">
      <summary>許可されている、または、許可されていないことのいずれかを表す <see langword="KeyRestrictions" /> プロパティで指定された、接続文字列パラメーターのリストを示します。</summary>
    </member>
    <member name="F:System.Data.KeyRestrictionBehavior.AllowOnly">
      <summary>既定モード。 許可されている追加接続文字列パラメーターだけを示します。</summary>
    </member>
    <member name="F:System.Data.KeyRestrictionBehavior.PreventUsage">
      <summary>許可されていない追加接続文字列パラメーターを示します。</summary>
    </member>
    <member name="T:System.Data.LoadOption">
      <summary>
        <see cref="Overload:System.Data.DataTable.Load" /> メソッドまたは <see cref="Overload:System.Data.DataSet.Load" /> メソッドの使用時に、データ ソースからの値を既存の行にどのように適用するかを制御します。</summary>
    </member>
    <member name="F:System.Data.LoadOption.OverwriteChanges">
      <summary>この行に受信した値は、各列で、データの現在の値と元の値の両方のバージョンに書き込まれます。</summary>
    </member>
    <member name="F:System.Data.LoadOption.PreserveChanges">
      <summary>この行に受信した値は、各列の元の値のバージョンに書き込まれます。 各列のデータの現在のバージョンは、変更されません。  既定値です。</summary>
    </member>
    <member name="F:System.Data.LoadOption.Upsert">
      <summary>この行に受信した値は、各列の現在の値のバージョンに書き込まれます。 各列のデータの元のバージョンは、変更されません。</summary>
    </member>
    <member name="T:System.Data.MappingType">
      <summary>
        <see cref="T:System.Data.DataColumn" /> の割り当て方法を指定します。</summary>
    </member>
    <member name="F:System.Data.MappingType.Attribute">
      <summary>列が XML 属性に割り当てられます。</summary>
    </member>
    <member name="F:System.Data.MappingType.Element">
      <summary>列が XML 要素に割り当てられます。</summary>
    </member>
    <member name="F:System.Data.MappingType.Hidden">
      <summary>列が内部構造に割り当てられます。</summary>
    </member>
    <member name="F:System.Data.MappingType.SimpleContent">
      <summary>列が <see cref="T:System.Xml.XmlText" /> ノードに割り当てられます。</summary>
    </member>
    <member name="T:System.Data.MergeFailedEventArgs">
      <summary>ターゲットとソースの <see langword="DataRow" /> に同じ主キー値が格納されていて、<see cref="P:System.Data.DataSet.EnforceConstraints" /> プロパティが true に設定されている場合に発生します。</summary>
    </member>
    <member name="M:System.Data.MergeFailedEventArgs.#ctor(System.Data.DataTable,System.String)">
      <summary>
        <see cref="T:System.Data.MergeFailedEventArgs" /> とマージの矛盾の説明を使用して、<see cref="T:System.Data.DataTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> オブジェクト。</param>
      <param name="conflict">マージの矛盾の説明。</param>
    </member>
    <member name="P:System.Data.MergeFailedEventArgs.Conflict">
      <summary>マージの矛盾の説明を返します。</summary>
      <returns>マージの矛盾の説明。</returns>
    </member>
    <member name="P:System.Data.MergeFailedEventArgs.Table">
      <summary>
        <see cref="T:System.Data.DataTable" /> オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Data.MergeFailedEventHandler">
      <summary>
        <see cref="E:System.Data.DataSet.MergeFailed" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントのデータ。</param>
    </member>
    <member name="T:System.Data.MissingMappingAction">
      <summary>ソース テーブルまたはソース列からのマップがない場合に実行するアクションを決定します。</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Error">
      <summary>指定した列マップが存在しない場合は、<see cref="T:System.InvalidOperationException" /> が生成されます。</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Ignore">
      <summary>マップがない列またはテーブルは無視されます。 <see langword="null" /> を返します。</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Passthrough">
      <summary>ソース列またはソース テーブルは、元の名前を使用して作成され、<see cref="T:System.Data.DataSet" /> に追加されます。</summary>
    </member>
    <member name="T:System.Data.MissingPrimaryKeyException">
      <summary>主キーが格納されていないテーブル内の行にアクセスしようとした場合にスローされる例外を表します。</summary>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor">
      <summary>
        <see cref="T:System.Data.MissingPrimaryKeyException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化情報を指定して、<see cref="T:System.Data.MissingPrimaryKeyException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">指定したシリアル化ストリームの転送元と転送先の説明。</param>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.String)">
      <summary>文字列を指定して、<see cref="T:System.Data.MissingPrimaryKeyException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Data.MissingPrimaryKeyException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.MissingSchemaAction">
      <summary>データを <see cref="T:System.Data.DataSet" /> に追加する場合に、必要な <see cref="T:System.Data.DataTable" /> または <see cref="T:System.Data.DataColumn" /> がないときに実行するアクションを指定します。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Add">
      <summary>必要な列を追加してスキーマを完成します。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.AddWithKey">
      <summary>必要な列と主キー情報を追加してスキーマを完成します。 主キー情報を <see cref="T:System.Data.DataTable" /> に追加する方法の詳細については、「<see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />」を参照してください。.NET Framework OLE DB 用データ プロバイダーで <see langword="AddWithKey" /> が正しく機能するためには、ネイティブな OLE DB プロバイダーが DBPROP_UNIQUEROWS プロパティを設定して必要な主キー情報を取得し、IColumnsRowset 内の DBCOLUMN_KEYCOLUMN を調べてどの列が主キー列かを確認する必要があります。 <see cref="T:System.Data.DataTable" /> ごとに主キー制約を明示的に設定することもできます。 これにより、既存のレコードと一致する入力レコードが、追加ではなく更新されるようになります。 <see langword="AddWithKey" /> を使用する場合、.NET Framework SQL Server 用データ プロバイダーは、実行するステートメントに FOR BROWSE 句を追加します。 SET FMTONLY ON ステートメントの使用による干渉などの副作用に注意してください。 詳細については、「SET FMTONLY (Transact-SQL)」をご覧ください。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Error">
      <summary>指定した列マップが存在しない場合は、<see cref="T:System.InvalidOperationException" /> が生成されます。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Ignore">
      <summary>余分な列を無視します。</summary>
    </member>
    <member name="T:System.Data.NoNullAllowedException">
      <summary>
        <see cref="P:System.Data.DataColumn.AllowDBNull" /> が <see langword="false" /> に設定されている列に null 値を挿入しようとした場合にスローされる例外を表します。</summary>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor">
      <summary>
        <see cref="T:System.Data.NoNullAllowedException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化情報を指定して、<see cref="T:System.Data.NoNullAllowedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">指定したシリアル化ストリームの転送元と転送先の説明。</param>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.String)">
      <summary>文字列を指定して、<see cref="T:System.Data.NoNullAllowedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Data.NoNullAllowedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.OrderedEnumerableRowCollection`1">
      <summary>クエリから返される順序付けされた <see cref="T:System.Data.DataRow" /> オブジェクトのコレクションを表します。</summary>
      <typeparam name="TRow">ソース シーケンスのオブジェクトの型 (通常は <see cref="T:System.Data.DataRow" />)。</typeparam>
    </member>
    <member name="T:System.Data.ParameterDirection">
      <summary>
        <see cref="T:System.Data.DataSet" /> に関連するクエリ内のパラメーターの型を指定します。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.Input">
      <summary>このパラメーターは入力パラメーターです。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.InputOutput">
      <summary>このパラメーターは入力または出力のどちらでもできます。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.Output">
      <summary>このパラメーターは出力パラメーターです。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.ReturnValue">
      <summary>パラメーターは、ストアド プロシージャ、組み込み関数、ユーザー定義関数などの操作からの戻り値を表します。</summary>
    </member>
    <member name="T:System.Data.PropertyCollection">
      <summary>
        <see cref="T:System.Data.DataColumn" />、<see cref="T:System.Data.DataSet" />、または <see cref="T:System.Data.DataTable" /> に追加できるプロパティのコレクションを表します。</summary>
    </member>
    <member name="M:System.Data.PropertyCollection.#ctor">
      <summary>
        <see cref="T:System.Data.PropertyCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.PropertyCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.PropertyCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">指定したシリアル化ストリームの転送元と転送先。</param>
    </member>
    <member name="M:System.Data.PropertyCollection.Clone">
      <summary>
        <see cref="T:System.Data.PropertyCollection" /> オブジェクトの簡易コピーを作成します。</summary>
      <returns>
        <see cref="T:System.Object" /> オブジェクトの簡易コピーである <see cref="T:System.Data.PropertyCollection" /> を返します。</returns>
    </member>
    <member name="T:System.Data.ReadOnlyException">
      <summary>読み取り専用列の値を変更しようとした場合にスローされる例外を表します。</summary>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor">
      <summary>
        <see cref="T:System.Data.ReadOnlyException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化情報を指定して、<see cref="T:System.Data.ReadOnlyException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">指定したシリアル化ストリームの転送元と転送先の説明。</param>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.String)">
      <summary>文字列を指定して、<see cref="T:System.Data.ReadOnlyException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Data.ReadOnlyException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.RowNotInTableException">
      <summary>
        <see cref="T:System.Data.DataRow" /> 内に存在しない <see cref="T:System.Data.DataTable" /> で操作を実行しようとした場合にスローされる例外を表します。</summary>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor">
      <summary>
        <see cref="T:System.Data.RowNotInTableException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化情報を指定して、<see cref="T:System.Data.RowNotInTableException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">指定したシリアル化ストリームの転送元と転送先の説明。</param>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.String)">
      <summary>文字列を指定して、<see cref="T:System.Data.RowNotInTableException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Data.RowNotInTableException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.Rule">
      <summary>
        <see cref="T:System.Data.ForeignKeyConstraint" /> を適用した場合に実行されるアクションを示します。</summary>
    </member>
    <member name="F:System.Data.Rule.Cascade">
      <summary>関連付けられている行を削除または更新します。 既定値です。</summary>
    </member>
    <member name="F:System.Data.Rule.None">
      <summary>関連行で何もアクションが実行されません。</summary>
    </member>
    <member name="F:System.Data.Rule.SetDefault">
      <summary>関連行の値を <see cref="P:System.Data.DataColumn.DefaultValue" /> プロパティに格納されている値に設定します。</summary>
    </member>
    <member name="F:System.Data.Rule.SetNull">
      <summary>関連行の値を <see langword="DBNull" /> に設定します。</summary>
    </member>
    <member name="T:System.Data.SchemaSerializationMode">
      <summary>型指定された <see cref="T:System.Data.DataSet" /> のスキーマのシリアル化モードを示します。</summary>
    </member>
    <member name="F:System.Data.SchemaSerializationMode.ExcludeSchema">
      <summary>型指定された <see cref="T:System.Data.DataSet" /> のスキーマのシリアル化を省略します。</summary>
    </member>
    <member name="F:System.Data.SchemaSerializationMode.IncludeSchema">
      <summary>型指定された <see cref="T:System.Data.DataSet" /> のスキーマのシリアル化を適用します。 これが既定値です。</summary>
    </member>
    <member name="T:System.Data.SchemaType">
      <summary>
        <see cref="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> 操作を実行するときに既存のスキーマ マップを処理する方法を指定します。</summary>
    </member>
    <member name="F:System.Data.SchemaType.Mapped">
      <summary>既存のテーブル マップを受信スキーマに適用します。 変換されたスキーマで <see cref="T:System.Data.DataSet" /> を構成します。</summary>
    </member>
    <member name="F:System.Data.SchemaType.Source">
      <summary>DataAdapter のテーブル マップを無視します。 変換されたスキーマを適用せずに、受信スキーマを使用して <see cref="T:System.Data.DataSet" /> を構成します。</summary>
    </member>
    <member name="T:System.Data.SerializationFormat">
      <summary>
        <see cref="T:System.Data.DataSet" /> のシリアル化形式を決定します。</summary>
    </member>
    <member name="F:System.Data.SerializationFormat.Binary">
      <summary>バイナリ コンテンツとしてシリアル化します。 ADO.NET 2.0 でのみ使用できます。</summary>
    </member>
    <member name="F:System.Data.SerializationFormat.Xml">
      <summary>XML コンテンツとしてシリアル化します。 これが既定値です。</summary>
    </member>
    <member name="T:System.Data.SqlDbType">
      <summary>
        <see cref="T:System.Data.SqlClient.SqlParameter" /> で使用するフィールド (プロパティ) のデータ型として、SQL Server に固有のデータ型を指定します。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.BigInt">
      <summary>
        <see cref="T:System.Int64" />。 64 ビット符号付き整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Binary">
      <summary>
        <see cref="T:System.Array" /> 型の <see cref="T:System.Byte" />。 1 から 8,000 バイトまでの範囲内のバイナリ データの固定長ストリーム。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Bit">
      <summary>
        <see cref="T:System.Boolean" />。 0、1、または <see langword="null" /> である符号なし数値。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Char">
      <summary>
        <see cref="T:System.String" />。 1 から 8,000 文字までの範囲内の非 Unicode 文字の固定長ストリーム。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Date">
      <summary>AD 1 年 1 月 1 日から AD 9999 年 12 月 31 日までの日付のデータ。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTime">
      <summary>
        <see cref="T:System.DateTime" />。 1753 年 1 月 1 日から 9999 年 12 月 31 日までの範囲で、精度 3.33 ミリ秒の日付と時刻のデータ。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTime2">
      <summary>日付と時刻のデータ。 日付の値の範囲は、AD 1 年 1 月 1 日から AD 9999 年 12 月 31 日です。 時刻の値の範囲は、00:00:00 から 23:59:59.9999999 で、精度は 100 ナノ秒です。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTimeOffset">
      <summary>タイム ゾーンに対応した日付と時刻。 日付の値の範囲は、AD 1 年 1 月 1 日から AD 9999 年 12 月 31 日です。 時刻の値の範囲は、00:00:00 から 23:59:59.9999999 で、精度は 100 ナノ秒です。 タイム ゾーンの値の範囲は、-14:00 から +14:00 です。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Decimal">
      <summary>
        <see cref="T:System.Decimal" />。 -10 38 -1 から 10 38 -1 までの範囲内の固定精度小数部桁数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Float">
      <summary>
        <see cref="T:System.Double" />。 -1.79E +308 から 1.79E +308 までの範囲内の浮動小数点数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Image">
      <summary>
        <see cref="T:System.Array" /> 型の <see cref="T:System.Byte" />。 0 バイトから 2 31 -1 (または 2,147,483,647) バイトまでの範囲内のバイナリ データの可変長ストリーム。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Int">
      <summary>
        <see cref="T:System.Int32" />。 32 ビット符号付き整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Money">
      <summary>
        <see cref="T:System.Decimal" />。 精度が通貨単位の 1/10,000 の、-2 63 (-9,223,372,036,854,775,808) から 2 63 -1 (+9,223,372,036,854,775,807) までの範囲内の通貨値。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NChar">
      <summary>
        <see cref="T:System.String" />。 1 から 4,000 文字までの範囲内の Unicode 文字の固定長ストリーム。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NText">
      <summary>
        <see cref="T:System.String" />。 最大長が 2 30 -1 (1,073,741,823) 文字の Unicode データの可変長ストリーム。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NVarChar">
      <summary>
        <see cref="T:System.String" />。 1 から 4,000 文字までの範囲内の Unicode 文字の可変長ストリーム。 文字列が 4,000 文字を超える場合は、暗黙の型変換が失敗します。 4,000 文字を超える文字列を使用する場合は、明示的にオブジェクトを設定します。 データベース列が <see langword="nvarchar(max)" /> の場合、<see cref="F:System.Data.SqlDbType.NVarChar" /> を使用します。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Real">
      <summary>
        <see cref="T:System.Single" />。 -3.40E +38 から 3.40E +38 までの範囲内の浮動小数点数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallDateTime">
      <summary>
        <see cref="T:System.DateTime" />。 1900 年 1 月 1 日から 2079 年 6 月 6 日までの範囲内で、精度 1 分の日付と時刻のデータ。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallInt">
      <summary>
        <see cref="T:System.Int16" />。 16 ビット符号付き整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallMoney">
      <summary>
        <see cref="T:System.Decimal" />。 精度が通貨単位の 1/10,000 の、-214,748.3648 から +214,748.3647 までの範囲内の通貨値。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Structured">
      <summary>テーブル値パラメーターに含まれる構造化データを指定するための特別なデータ型。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Text">
      <summary>
        <see cref="T:System.String" />。 最大長が 2 31 -1 (2,147,483,647) 文字の非 Unicode データの可変長ストリーム。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Time">
      <summary>24 時間表記に基づく時間データ。 時刻の値の範囲は、00:00:00 から 23:59:59.9999999 で、精度は 100 ナノ秒です。 SQL Server <see langword="time" /> 値に対応します。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Timestamp">
      <summary>
        <see cref="T:System.Array" /> 型の <see cref="T:System.Byte" />。 自動的に生成されるバイナリ数値。データベース内で一意であることが保証されます。 <see langword="timestamp" /> は通常、テーブルの行にバージョンを記録するためのメカニズムとして使用されます。 格納サイズは 8 バイトです。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.TinyInt">
      <summary>
        <see cref="T:System.Byte" />。 8 ビット符号なし整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Udt">
      <summary>SQL Server ユーザー定義型 (UDT)。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.UniqueIdentifier">
      <summary>
        <see cref="T:System.Guid" />。 グローバル一意識別子 (GUID)。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.VarBinary">
      <summary>
        <see cref="T:System.Array" /> 型の <see cref="T:System.Byte" />。 1 から 8,000 バイトの範囲内のバイナリ データの可変長ストリーム。 バイト配列が 8,000 バイトを超える場合は、暗黙の型変換が失敗します。 8,000 バイトを超えるバイト配列を使用するときは、オブジェクトを明示的に設定します。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.VarChar">
      <summary>
        <see cref="T:System.String" />。 1 から 8,000 文字の範囲内の非 Unicode 文字の可変長ストリーム。 データベース列が <see langword="varchar(max)" /> の場合、<see cref="F:System.Data.SqlDbType.VarChar" /> を使用します。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Variant">
      <summary>
        <see cref="T:System.Object" />。 数値、文字列、バイナリ、日付の各データのほか、SQL Server の値である Empty と Null を格納できる特殊なデータ型。他の型が宣言されていない場合はこのデータ型であると見なされます。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Xml">
      <summary>XML 値。 <see cref="M:System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)" /> メソッドまたは <see cref="P:System.Data.SqlTypes.SqlXml.Value" /> プロパティを使用して、XML を文字列として取得します。または、<see cref="T:System.Xml.XmlReader" /> メソッドを呼び出して、XML を <see cref="M:System.Data.SqlTypes.SqlXml.CreateReader" /> として取得します。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.INullable">
      <summary>
        <see cref="N:System.Data.SqlTypes" /> のすべてのオブジェクトおよび構造体は、<see langword="INullable" /> インターフェイスを実装しています。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.INullable.IsNull">
      <summary>構造体が null かどうかを示します。 このプロパティは読み取り専用です。</summary>
      <returns>このオブジェクトの値が null の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /><see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlAlreadyFilledException">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> クラスは、スタンドアロン コンポーネントとしてではなく、他のクラスによる標準機能の派生元クラスとして使用するためのものです。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外がスローされたときに表示する文字列。</param>
      <param name="e">内部例外への参照。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBinary">
      <summary>データベースに格納する、またはデータベースから取得するバイナリ データの可変長ストリームを表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.#ctor(System.Byte[])">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体の新しいインスタンスを初期化し、<see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> プロパティを指定されたバイト配列の定数に設定します。</summary>
      <param name="value">格納または取得するバイト配列。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Add(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>指定された 2 つの <see cref="T:System.Data.SqlTypes.SqlBinary" /> 値を連結して、新しい <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を作成します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" />。</param>
      <returns>x と y の値を連結した <see cref="T:System.Data.SqlTypes.SqlBinary" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Data.SqlTypes.SqlBinary)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクトとこの <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクトを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">この <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体と比較する <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクト。</param>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体とオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  この <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクトの値はオブジェクト未満。  
  
  0 
  この <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクトはオブジェクトと同じ。  
  
  0 より大きい値 
  この <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクトはオブジェクトより大きい。  
  
または 
オブジェクトは null 参照。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Object)">
      <summary>指定したオブジェクトとこの <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクトを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">この <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体と比較されるオブジェクト。</param>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体とオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  この <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクトの値はオブジェクト未満。  
  
  0 
  この <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクトはオブジェクトと同じ。  
  
  0 より大きい値 
  この <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクトはオブジェクトより大きい。  
  
または 
オブジェクトは null 参照。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Concat(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を連結して、新しい <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を作成します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</param>
      <returns>
        <paramref name="x" /> パラメーターと <paramref name="y" /> パラメーターを連結した値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Equals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を比較し、それらの構造体が等しいかどうかを判断します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</param>
      <returns>2 つの値が等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。 いずれかのインスタンスが null の場合、<see langword="SqlBinary" /> は null になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Equals(System.Object)">
      <summary>指定したオブジェクト パラメーターを <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> オブジェクトの <see cref="T:System.Data.SqlTypes.SqlBinary" /> プロパティと比較します。</summary>
      <param name="value">比較されるオブジェクト。</param>
      <returns>オブジェクトが <see cref="T:System.Data.SqlTypes.SqlBinary" /> のインスタンスで、2 つが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GetHashCode">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体のハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XML スキーマ定義言語 (XSD) を返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指定した <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD を示す <see langword="string" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を比較して、最初の構造体が 2 番目の構造体より大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> を返します。 <see cref="T:System.Data.SqlTypes.SqlBinary" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を比較して、最初の構造体が 2 番目の構造体以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> を返します。 <see cref="T:System.Data.SqlTypes.SqlBinary" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.IsNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体が null であるかどうかを示します。 このプロパティは読み取り専用です。</summary>
      <returns>
        <see langword="null" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Item(System.Int32)">
      <summary>整数パラメーター <paramref name="index" /> で指定された位置にある <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> プロパティから 1 バイトを取得します。 <paramref name="index" /> で示された位置がバイト配列の末尾を超えている場合は、<see cref="T:System.Data.SqlTypes.SqlNullValueException" /> が発生します。 このプロパティは読み取り専用です。</summary>
      <param name="index">取得するバイトの位置。</param>
      <returns>整数パラメーターで指定された位置にあるバイト。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> プロパティに <see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> が格納されているときに、プロパティが読み取られました。

または -
<paramref name="index" /> パラメーターが示す位置が、<see cref="P:System.Data.SqlTypes.SqlBinary.Length" /> プロパティで示されるバイト配列の長さを超えています。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Length">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> プロパティの長さをバイト数で取得します。 このプロパティは読み取り専用です。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> プロパティのバイナリ データの長さ。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <see cref="P:System.Data.SqlTypes.SqlBinary.Length" /> プロパティに <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> が格納されているときに、<see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> プロパティが読み取られました。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を比較して、最初の構造体が 2 番目の構造体より小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> を返します。 <see cref="T:System.Data.SqlTypes.SqlBinary" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を比較して、最初の構造体が 2 番目の構造体以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> を返します。 <see cref="T:System.Data.SqlTypes.SqlBinary" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.NotEquals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を比較し、それらの構造体が等しくないかどうかを判断します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlBinary" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBinary.Null">
      <summary>
        <see cref="T:System.DBNull" /> 構造体のこのインスタンスに割り当てることができる <see cref="T:System.Data.SqlTypes.SqlBinary" /> を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Addition(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBinary" /> パラメーターを連結して、新しい <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を作成します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクト。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクト。</param>
      <returns>
        <paramref name="x" /> パラメーターと <paramref name="y" /> パラメーターを連結した値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Equality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を比較し、それらの構造体が等しいかどうかを判断します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクト。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクト。</param>
      <returns>2 つのインスタンスが等しい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しくない場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlBinary" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Byte[]">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を <see cref="T:System.Byte" /> 配列に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</param>
      <returns>
        <see cref="T:System.Byte" /> 配列。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlBinary">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <returns>変換対象の <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を比較して、最初の構造体が 2 番目の構造体より大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクト。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクト。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> を返します。 <see cref="T:System.Data.SqlTypes.SqlBinary" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を比較して、最初の構造体が 2 番目の構造体以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクト。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクト。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> を返します。 <see cref="T:System.Data.SqlTypes.SqlBinary" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Implicit(System.Byte[])~System.Data.SqlTypes.SqlBinary">
      <summary>バイト配列を <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体に変換します。</summary>
      <param name="x">変換されるバイト配列。</param>
      <returns>変換されたバイト配列を表す <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Inequality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を比較し、それらの構造体が等しくないかどうかを判断します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクト。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクト。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlBinary" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を比較して、最初の構造体が 2 番目の構造体より小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクト。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクト。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> を返します。 <see cref="T:System.Data.SqlTypes.SqlBinary" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を比較して、最初の構造体が 2 番目の構造体以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクト。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクト。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> を返します。 <see cref="T:System.Data.SqlTypes.SqlBinary" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーの説明については、<see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> のトピックを参照してください。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーの説明については、<see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> のトピックを参照してください。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />」をご覧ください。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.ToSqlGuid">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> のこのインスタンスを <see cref="T:System.Data.SqlTypes.SqlGuid" /> に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.ToString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBinary" /> オブジェクトを文字列に変換します。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBinary" /> を格納している文字列。 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> が null の場合は、文字列に "null" が格納されます。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体の値を取得します。 このプロパティは読み取り専用です。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体の値。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">プロパティに <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> が格納されているときに、<see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> プロパティが読み取られました。</exception>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBoolean">
      <summary>データベースに格納する、またはデータベースから取得する 1 または 0 の整数値を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Boolean)">
      <summary>指定したブール値を使用して、<see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="value">新しい <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の値。<see langword="true" /> または <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Int32)">
      <summary>指定した整数値を使用して、<see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="value">新しい <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体で使用する値を持つ整数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.And(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>指定した 2 つの <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体のビットごとの AND 演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>論理 AND 演算の結果。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.ByteValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の値をバイトとして取得します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の値を表すバイト。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Data.SqlTypes.SqlBoolean)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlBoolean" /> オブジェクトとこの <see cref="T:System.Data.SqlTypes.SqlBoolean" /> オブジェクトを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較する <see cref="T:System.Data.SqlTypes.SqlBoolean" /><see cref="T:System.Data.SqlTypes.SqlBoolean" /> オブジェクト、または null 参照 (Visual Basic の場合は <see langword="Nothing" />)。</param>
      <returns>このインスタンスと値の相対値を示す符号付き数値。
  [値] 
  説明 
  負の整数 
  このインスタンスは <paramref name="value" /> よりも小さくなっています。  
  
  0 
  このインスタンスは <paramref name="value" /> と等価です。  
  
  正の整数 
  このインスタンスは <paramref name="value" /> よりも大きくなっています。  
  
- または - 
 <paramref name="value" /> が null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Object)">
      <summary>指定したオブジェクトとこの <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較するオブジェクト、または null 参照 (Visual Basic の場合は <see langword="Nothing" />)。</param>
      <returns>このインスタンスと値の相対値を示す符号付き数値。
  [値] 
  説明 
  負の整数 
  このインスタンスは <paramref name="value" /> よりも小さくなっています。  
  
  0 
  このインスタンスは <paramref name="value" /> と等価です。  
  
  正の整数 
  このインスタンスは <paramref name="value" /> よりも大きくなっています。  
  
または 
 <paramref name="value" /> が null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Equals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を比較し、それらの構造体が等しいかどうかを判断します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しくない場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Equals(System.Object)">
      <summary>指定したオブジェクト パラメーターを <see cref="T:System.Data.SqlTypes.SqlBoolean" /> と比較します。</summary>
      <param name="value">比較されるオブジェクト。</param>
      <returns>オブジェクトが <see cref="T:System.Data.SqlTypes.SqlBoolean" /> のインスタンスで、2 つが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.False">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 構造体のインスタンスの <see cref="T:System.Data.SqlTypes.SqlBoolean" /> プロパティに割り当てることができる false 値を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XML スキーマ定義言語 (XSD) を返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指定した <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD を示す <see langword="string" /> 型の値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GreaterThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsFalse">
      <summary>現在の <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> が <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> かどうかを示します。</summary>
      <returns>
        <see langword="true" /> が <see langword="Value" /> の場合は <see langword="False" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体が null であるかどうかを示します。</summary>
      <returns>
        <see langword="true" />構造体が null の場合は。 <see langword="false" />それ以外の場合は。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /></returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsTrue">
      <summary>現在の <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> が <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が <see langword="Value" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.LessThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.NotEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の 2 つのインスタンスを比較し、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.Null">
      <summary>
        <see cref="T:System.DBNull" /> 構造体のこのインスタンスに割り当てることができる <see cref="T:System.Data.SqlTypes.SqlBoolean" /> を表します。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.One">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 構造体のインスタンスの <see cref="T:System.Data.SqlTypes.SqlBoolean" /> プロパティに割り当てることができる 1 の値を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.OnesComplement(System.Data.SqlTypes.SqlBoolean)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体で 1 の補数演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>指定した <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の 1 の補数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_BitwiseAnd(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>指定した 2 つの <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体のビットごとの AND 演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>論理 AND 演算の結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_BitwiseOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>オペランドのビットごとの OR を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>論理 OR 演算の結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Equality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の 2 つのインスタンスを比較し、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しくない場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_ExclusiveOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>指定したパラメーターでビットごとの排他的 OR (XOR) 演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>論理 XOR 演算の結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Boolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> をブール値に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> に設定されたブール値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体に変換される <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> と等しい値を持つ新しい <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体に変換される <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> プロパティと等しい値を持つ新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体に変換される <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> プロパティと等しい値を持つ新しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体に変換される <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティと等しい値を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体に変換される <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> プロパティと等しい値を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体に変換される <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> プロパティと等しい値を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体に変換される <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> プロパティと等しい値を持つ新しい <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体に変換される <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> プロパティと等しい値を持つ新しい <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体に変換される <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> プロパティと等しい値を持つ新しい <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_False(System.Data.SqlTypes.SqlBoolean)">
      <summary>false 演算子を使用して、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> をテストし、false かどうかを確認できます。</summary>
      <param name="x">テストされる <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>指定したパラメーター <see cref="T:System.Data.SqlTypes.SqlBoolean" /> が <see langword="false" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を比較して、最初の構造体が 2 番目の構造体より大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> オブジェクト。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> オブジェクト。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を比較して、最初の構造体が 2 番目の構造体以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Implicit(System.Boolean)~System.Data.SqlTypes.SqlBoolean">
      <summary>指定したバイト値を <see cref="T:System.Data.SqlTypes.SqlBoolean" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> に変換されるバイト値。</param>
      <returns>0 または 1 を格納している <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Inequality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の 2 つのインスタンスを比較し、それらが等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LessThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LogicalNot(System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> に対して NOT 演算を実行します。</summary>
      <param name="x">NOT 演算が実行される <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>引数が true だった場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /><see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> を持つ <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />、引数が null だった場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />、それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_OnesComplement(System.Data.SqlTypes.SqlBoolean)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体で 1 の補数演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>指定した <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の 1 の補数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_True(System.Data.SqlTypes.SqlBoolean)">
      <summary>true 演算子を使用して、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> をテストし、true かどうかを確認できます。</summary>
      <param name="x">テストされる <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>指定したパラメーター <see cref="T:System.Data.SqlTypes.SqlBoolean" /> が <see langword="true" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Or(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>指定した 2 つの <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体のビットごとの OR 演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>ビットごとの OR 演算の結果を Value に持つ新しい <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Parse(System.String)">
      <summary>論理値の指定した <see cref="T:System.String" /> 表現を等価の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> に変換します。</summary>
      <param name="s">変換される <see cref="T:System.String" />。</param>
      <returns>解析した値を格納している <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlByte">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <returns>値が 1 または 0 である、新しい <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の値が <see langword="true" /> の場合、新しい <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の値は 1 です。 それ以外の場合、新しい <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の値は 0 です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlDecimal">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <returns>値が 1 または 0 である、新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の値が <see langword="true" /> の場合、新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値は 1 です。 それ以外の場合、新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値は 0 です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlDouble">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <returns>値が 1 または 0 である、新しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の値が <see langword="true" /> の場合、新しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体の値は 1 です。 それ以外の場合、新しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体の値は 0 です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt16">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <returns>値が 1 または 0 である、新しい <see langword="SqlInt16" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の値が <see langword="true" /> の場合、新しい <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体の値は 1 です。 それ以外の場合、新しい <see langword="SqlInt16" /> 構造体の値は 0 です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt32">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <returns>値が 1 または 0 である、新しい <see langword="SqlInt32" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の値が <see langword="true" /> の場合、新しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体の値は 1 です。 それ以外の場合、新しい <see langword="SqlInt32" /> 構造体の値は 0 です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt64">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <returns>値が 1 または 0 である、新しい <see langword="SqlInt64" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の値が <see langword="true" /> の場合、新しい <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体の値は 1 です。 それ以外の場合、新しい <see langword="SqlInt64" /> 構造体の値は 0 です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlMoney">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <returns>値が 1 または 0 である、新しい <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の値が <see langword="true" /> の場合、新しい <see cref="T:System.Data.SqlTypes.SqlMoney" /> の値は 1 です。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の値が <see langword="false" /> の場合、新しい <see cref="T:System.Data.SqlTypes.SqlMoney" /> の値は 0 です。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の値が 1 でも 0 でもない場合、新しい <see cref="T:System.Data.SqlTypes.SqlMoney" /> の値は <see cref="F:System.Data.SqlTypes.SqlMoney.Null" /> です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlSingle">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <returns>値が 1 または 0 である、新しい <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。
<see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の値が true の場合、新しい <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体の値は 1 です。それ以外の場合、新しい <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体の値は 0 です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <returns>値が 1 または 0 である、新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の値が <see langword="true" /> と等しい場合、<see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の値は 1 です。 それ以外の場合、新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の値は 0 です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を文字列に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の値を格納している文字列。 値が null の場合は、文字列に "null" が格納されます。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.True">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 構造体のインスタンスの <see cref="T:System.Data.SqlTypes.SqlBoolean" /> プロパティに割り当てることができる true 値を表します。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の値を取得します。 このプロパティは読み取り専用です。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> が <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> の場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">プロパティが null に設定されています。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Xor(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>指定したパラメーターでビットごとの排他的 OR 演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>論理 XOR 演算の結果。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.Zero">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 構造体のインスタンスの <see cref="T:System.Data.SqlTypes.SqlBoolean" /> プロパティに割り当てることができるゼロ値を表します。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlByte">
      <summary>データベースに格納する、またはデータベースから取得する 0 から 255 までの範囲の、8 ビットの符号なし整数を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.#ctor(System.Byte)">
      <summary>指定したバイト値を使用して、<see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="value">新しい <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 構造体の <see cref="T:System.Data.SqlTypes.SqlByte" /> プロパティに格納されるバイト値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Add(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>指定した 2 つの <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体を加算した値を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>加算した結果を格納している <see langword="Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドのビットごとの AND を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>ビットごとの AND 演算の結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドのビットごとの OR を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>ビットごとの OR 演算の結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.CompareTo(System.Data.SqlTypes.SqlByte)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlByte" /> オブジェクトとこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較される <see cref="T:System.Data.SqlTypes.SqlByte" /> オブジェクト。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.CompareTo(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> とこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Object" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Divide(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドを 2 番目のオペランドで除算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>除算の結果を含む <see cref="P:System.Data.SqlTypes.SqlByte.Value" />プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Equals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>2 つの値が等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。 いずれかのインスタンスが null の場合、<see langword="SqlByte" /> は null になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> パラメーターを <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> オブジェクトの <see cref="T:System.Data.SqlTypes.SqlByte" /> プロパティと比較します。</summary>
      <param name="value">比較対象の <see cref="T:System.Object" />。</param>
      <returns>オブジェクトが <see cref="T:System.Data.SqlTypes.SqlByte" /> のインスタンスで、2 つが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XML スキーマ定義言語 (XSD) を返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指定した <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD を示す <see langword="string" /> 型の値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlByte" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体を比較して、最初の構造体が 2 番目の構造体以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlByte" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlByte.IsNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体が null かどうかを示すブール値を取得します。</summary>
      <returns>null の場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlByte" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlByte" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.MaxValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> の最大有効値を表す定数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.MinValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> の最小有効値を表す定数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Mod(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドを 2 番目のオペランドで除算した後の剰余を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>剰余を格納している <see cref="T:System.Data.SqlTypes.SqlByte" /> を持つ <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlByte" /> 値を除算し、剰余を返します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
      <returns>
        <paramref name="x" /> と <paramref name="y" /> の除算によって得られた剰余。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドの積を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>乗算の積を格納している <see cref="T:System.Data.SqlTypes.SqlByte" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.NotEquals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> の 2 つのインスタンスを比較し、それらが等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlByte" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.Null">
      <summary>
        <see cref="T:System.DBNull" /> 構造体のこのインスタンスに割り当てることができる <see cref="T:System.Data.SqlTypes.SqlByte" /> を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.OnesComplement(System.Data.SqlTypes.SqlByte)">
      <summary>1 の補数演算子は、<see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドでビットごとの 1 の補数演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターの 1 の補数を格納している <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Addition(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>指定した 2 つの <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体を加算した値を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>2 つのオペランドの合計を格納している <see cref="T:System.Data.SqlTypes.SqlByte" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドのビットごとの AND を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>ビットごとの AND 演算の結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドのビットごとの OR を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>ビットごとの OR 演算の結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Division(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドを 2 番目のオペランドで除算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>除算の結果を含む <see cref="P:System.Data.SqlTypes.SqlByte.Value" />プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Equality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>2 つのインスタンスが等しい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しくない場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlByte" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_ExclusiveOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>指定したパラメーターでビットごとの排他的 OR 演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>ビットごとの XOR 演算の結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlByte">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> に変換される <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーター。</param>
      <returns>指定した <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Byte">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体をバイトに変換します。</summary>
      <param name="x">バイトに変換される <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> パラメーターの <see cref="T:System.Data.SqlTypes.SqlByte" /> プロパティと等しい値を持つバイト。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlByte">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> を <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlByte">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDouble" /> を <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlByte">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlByte">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> を <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlByte">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt64" /> を <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> プロパティを持つ <see langword="SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlByte">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <param name="x">
        <see langword="SqlMoney" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlByte">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlByte">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlString" /> を <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <param name="x">
        <see langword="SqlString" /> クラスのインスタンス。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> で表される数値と等しい <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlByte" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlByte" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see langword="SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Implicit(System.Byte)~System.Data.SqlTypes.SqlByte">
      <summary>指定したバイト値を <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換されるバイト値。</param>
      <returns>指定したパラメーターと等しい <see cref="T:System.Data.SqlTypes.SqlByte" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Inequality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> の 2 つのインスタンスを比較し、それらが等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlByte" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlByte" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlByte" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドを 2 番目のオペランドで除算した後の剰余を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>剰余を格納している <see cref="T:System.Data.SqlTypes.SqlByte" /> を持つ <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドの積を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>乗算の積を格納している <see cref="T:System.Data.SqlTypes.SqlByte" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_OnesComplement(System.Data.SqlTypes.SqlByte)">
      <summary>1 の補数演算子は、<see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドでビットごとの 1 の補数演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターの 1 の補数を格納している <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Subtraction(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドから 2 番目のオペランドを減算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>最初の <see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドから 2 番目のオペランドを減算した結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Parse(System.String)">
      <summary>数値の <see cref="T:System.String" /> 形式をそれと等価な 8 ビット符号なし整数に変換します。</summary>
      <param name="s">解析対象の文字列。<see langword="String" /></param>
      <returns>
        <see langword="String" /> パラメーターで表された 8 ビットの数値を格納している <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Subtract(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドから 2 番目のオペランドを減算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>最初の <see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドから 2 番目のオペランドを減算した結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlBoolean">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlBoolean" /> に変換します。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> が 0 以外の場合は <see langword="true" />。0 の場合は <see langword="false" />。それ以外の場合は Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlDecimal">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <returns>この <see langword="SqlDecimal" /> 構造体の <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> を持つ <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlDouble">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlByte" /> と同じ値を持つ <see langword="SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt16">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlByte" /> と同じ値を持つ <see langword="SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt32">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlByte" /> を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlByte" /> と同じ値を持つ <see langword="SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt64">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <returns>この <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> の <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> と等しい <see cref="T:System.Data.SqlTypes.SqlByte" /> を持つ <see langword="SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlMoney">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <returns>この <see langword="SqlMoney" /> 構造体の <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> を持つ <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlSingle">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <returns>この <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 構造体と同じ <see cref="T:System.Data.SqlTypes.SqlByte" /> を持つ <see langword="SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlString">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> のこのインスタンスを <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> の文字列形式を格納している <see langword="SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体を <see cref="T:System.String" /> に変換します。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> の <see cref="T:System.Data.SqlTypes.SqlByte" /> を格納している文字列。 <see langword="Value" /> が null の場合、<see langword="String" /> は null 文字列になります。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlByte.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の値を取得します。 このプロパティは読み取り専用です。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Xor(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>指定したパラメーターでビットごとの排他的 OR 演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>XOR 演算の結果。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.Zero">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 構造体のインスタンスの <see cref="T:System.Data.SqlTypes.SqlByte" /> プロパティに割り当てることができるゼロ値を表します。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBytes">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlBytes.Buffer" /> または <see cref="P:System.Data.SqlTypes.SqlBytes.Stream" /> をラップする、変更可能な参照型を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.Byte[])">
      <summary>指定されたバイト配列に基づいて、<see cref="T:System.Data.SqlTypes.SqlBytes" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="buffer">符号なしバイト配列。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.Data.SqlTypes.SqlBinary)">
      <summary>指定された <see cref="T:System.Data.SqlTypes.SqlBytes" /> 値に基づいて、<see cref="T:System.Data.SqlTypes.SqlBinary" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.IO.Stream)">
      <summary>指定された <see cref="T:System.Data.SqlTypes.SqlBytes" /> 値に基づいて、<see cref="T:System.IO.Stream" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">
        <see cref="T:System.IO.Stream" />。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Buffer">
      <summary>内部バッファーへの参照を返します。</summary>
      <returns>内部バッファーへの参照。 アンマネージド ポインター上に作成された <see cref="T:System.Data.SqlTypes.SqlBytes" /> インスタンスの場合、内部バッファーのマネージド コピーを返します。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XML スキーマ定義言語 (XSD) を返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指定した <see langword="XmlSchemaSet" /> の XSD を示す <see langword="string" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.IsNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBytes" /> が null かどうかを示すブール値を取得します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> が null の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Item(System.Int64)">
      <summary>指定したインデックス位置にある <see cref="T:System.Data.SqlTypes.SqlBytes" /> インスタンスを取得または設定します。</summary>
      <param name="offset">
        <see cref="T:System.Int64" /> 値。</param>
      <returns>
        <see cref="T:System.Byte" /> 値。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Length">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> インスタンスが保持する値の長さを取得します。</summary>
      <returns>
        <see cref="T:System.Int64" /> のインスタンスに格納された値の長さを表す <see cref="T:System.Data.SqlTypes.SqlBytes" /> 値。
インスタンスから利用できるバッファーがない場合、または値が null の場合は -1 を返します。
ストリームでラップされたインスタンスの <see cref="P:System.IO.Stream.Length" /> を返します。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.MaxLength">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBytes" /> の内部バッファーが保持できる値の最大長を取得します。</summary>
      <returns>内部バッファーが保持できる値の最大長を表す long 型の値。 ストリームでラップされた <see cref="T:System.Data.SqlTypes.SqlBytes" /> の場合、-1 を返します。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Null">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBytes" /> の null インスタンスが取得されます。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlBytes.IsNull" />プロパティがを返す<see langword="true" />インスタンス。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Data.SqlTypes.SqlBytes">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlBytes" /> 構造体に変換します。</summary>
      <param name="value">変換対象の <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBytes)~System.Data.SqlTypes.SqlBinary">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体に変換します。</summary>
      <param name="value">変換対象の <see cref="T:System.Data.SqlTypes.SqlBytes" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.Read(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBytes" /> のインスタンスから、引数に指定されたバッファーにバイトをコピーし、コピーされたバイト数を返します。</summary>
      <param name="offset">
        <see cref="T:System.Int64" /> インスタンス内の値のオフセット位置 (<see cref="T:System.Data.SqlTypes.SqlBytes" /> long 値)。</param>
      <param name="buffer">コピー対象のバイト配列バッファー。</param>
      <param name="offsetInBuffer">バッファー内のコピー開始位置を示すオフセット値 (<see cref="T:System.Int32" /> 整数)。</param>
      <param name="count">コピーするバイト数を表す <see cref="T:System.Int32" /> 型の整数。</param>
      <returns>コピーされたバイト数を表す <see cref="T:System.Int64" /> long 値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.SetLength(System.Int64)">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBytes" /> インスタンスの長さを設定します。</summary>
      <param name="value">長さを表す <see cref="T:System.Int64" /> long 値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.SetNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBytes" /> インスタンスを null に設定します。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Storage">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBytes" /> インスタンスについて、ストレージの状態に関する情報を返します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.StorageState" /> 列挙値。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Stream">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBytes" /> のデータをストリームとして取得または設定します。</summary>
      <returns>SqlBytes データを格納しているストリーム。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化情報と、この <see cref="T:System.Data.SqlTypes.SqlBytes" /> インスタンスの再インスタンス化に必要なすべてのデータを取得します。</summary>
      <param name="info">シリアル化情報が設定されるオブジェクト。</param>
      <param name="context">シリアル化の対象コンテキスト。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="r">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.ToSqlBinary">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBinary" /> インスタンスから <see cref="T:System.Data.SqlTypes.SqlBytes" /> を構築して返します。</summary>
      <returns>このインスタンスの <see cref="T:System.Data.SqlTypes.SqlBinary" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Value">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlBytes" /> が保持する値のマネージド コピーを返します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlBytes" /> の値を表すバイト配列。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.Write(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>引数に指定されたバイトから、この <see cref="T:System.Data.SqlTypes.SqlBytes" /> インスタンスに文字をコピーします。</summary>
      <param name="offset">
        <see cref="T:System.Int64" /> インスタンス内の値のオフセット位置 (<see cref="T:System.Data.SqlTypes.SqlBytes" /> long 値)。</param>
      <param name="buffer">コピー対象のバイト配列バッファー。</param>
      <param name="offsetInBuffer">バッファー内のコピー開始位置を示すオフセット値 (<see cref="T:System.Int32" /> 整数)。</param>
      <param name="count">コピーするバイト数を表す <see cref="T:System.Int32" /> 型の整数。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlChars">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> は、<see cref="T:System.Char" /> 配列または <see cref="T:System.Data.SqlTypes.SqlString" /> インスタンスをラップする変更可能な参照型です。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor(System.Char[])">
      <summary>指定された文字配列に基づいて、<see cref="T:System.Data.SqlTypes.SqlChars" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="buffer">
        <see cref="T:System.Char" /> 配列。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor(System.Data.SqlTypes.SqlString)">
      <summary>指定された <see cref="T:System.Data.SqlTypes.SqlChars" /> 値に基づいて、<see cref="T:System.Data.SqlTypes.SqlString" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Buffer">
      <summary>内部バッファーへの参照を返します。</summary>
      <returns>内部バッファーへの参照。 アンマネージド ポインター上に作成された <see cref="T:System.Data.SqlTypes.SqlChars" /> インスタンスの場合、内部バッファーのマネージド コピーを返します。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XML スキーマ定義言語 (XSD) を返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指定した <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD を示す <see langword="string" /> 型の値。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.IsNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlChars" /> が null かどうかを示すブール値を取得します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> が null の場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Item(System.Int64)">
      <summary>指定したインデックス位置にある <see cref="T:System.Data.SqlTypes.SqlChars" /> インスタンスを取得または設定します。</summary>
      <param name="offset">
        <see cref="T:System.Int64" /> 値。</param>
      <returns>
        <see cref="T:System.Char" /> 値。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Length">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> インスタンスが保持する値の長さを取得します。</summary>
      <returns>
        <see cref="T:System.Int64" /> インスタンスが保持する値の文字長を示す <see cref="T:System.Data.SqlTypes.SqlChars" /> 値。
インスタンスから利用できるバッファーがない場合、または値が null の場合は -1 を返します。
ストリームでラップされたインスタンスの <see cref="P:System.IO.Stream.Length" /> を返します。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.MaxLength">
      <summary>内部バッファーが保持できる値の最大長 (2 バイト文字単位) を取得します。</summary>
      <returns>内部バッファーが保持できる値の最大長 (2 バイト文字単位) を表す <see cref="T:System.Int64" /> 値。
ストリームでラップされた <see cref="T:System.Data.SqlTypes.SqlChars" /> の場合、-1 を返します。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Null">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlChars" /> の null インスタンスを返します。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlChars.IsNull" />プロパティがを返す<see langword="true" />インスタンス。 詳細については、「 Null 値の処理」を参照してください。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlChars)~System.Data.SqlTypes.SqlString">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体に変換します。</summary>
      <param name="value">変換対象の <see cref="T:System.Data.SqlTypes.SqlChars" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlChars">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlChars" /> 構造体に変換します。</summary>
      <param name="value">変換対象の <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.Read(System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlChars" /> のインスタンスから、引数に指定されたバッファーに文字をコピーし、コピーされた文字数を返します。</summary>
      <param name="offset">
        <see cref="T:System.Data.SqlTypes.SqlChars" /> インスタンス内の値のオフセット位置 (<see cref="T:System.Int64" /><see langword="long" /> 値)。</param>
      <param name="buffer">コピー対象の文字配列バッファー。</param>
      <param name="offsetInBuffer">バッファー内のコピー開始位置を示すオフセット値 (<see cref="T:System.Int32" /> 整数)。</param>
      <param name="count">コピーする文字数を表す <see cref="T:System.Int32" /> 型の整数値。</param>
      <returns>コピーされたバイト数を表す <see cref="T:System.Int64" /><see langword="long" /> 値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.SetLength(System.Int64)">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlChars" /> インスタンスの長さを設定します。</summary>
      <param name="value">長さを表す <see cref="T:System.Int64" /><see langword="long" /> 値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.SetNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlChars" /> インスタンスを null に設定します。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Storage">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlChars" /> インスタンスについて、ストレージの状態に関する情報を返します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.StorageState" /> 列挙値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化情報と、この <see cref="T:System.Data.SqlTypes.SqlChars" /> インスタンスの再インスタンス化に必要なすべてのデータを取得します。</summary>
      <param name="info">シリアル化情報が設定されるオブジェクト。</param>
      <param name="context">シリアル化の対象コンテキスト。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="r">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.ToSqlString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlChars" /> インスタンスを、対応する等価の <see cref="T:System.Data.SqlTypes.SqlString" /> 表現に変換します。</summary>
      <returns>この型の <see cref="T:System.Data.SqlTypes.SqlString" /> 表現。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Value">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlChars" /> が保持する値のマネージド コピーを返します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlChars" /> の値を表す文字配列。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.Write(System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>引数に指定されたバッファーから、この <see cref="T:System.Data.SqlTypes.SqlChars" /> インスタンスに文字をコピーします。</summary>
      <param name="offset">
        <see cref="T:System.Data.SqlTypes.SqlChars" /> インスタンス内の値のオフセット位置 (<see langword="long" /> 値)。</param>
      <param name="buffer">コピー対象の文字配列バッファー。</param>
      <param name="offsetInBuffer">バッファー内のコピー開始位置を示すオフセット値 (<see cref="T:System.Int32" /> 整数)。</param>
      <param name="count">コピーする文字数を表す <see cref="T:System.Int32" /> 型の整数。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlCompareOptions">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の比較オプション値を指定します。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.BinarySort">
      <summary>文字のアルファベット値ではなく、文字の数値に基づいて並べ替えるように指定します。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.BinarySort2">
      <summary>バイナリでの並べ替えを実行します。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreCase">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> の比較で、大文字と小文字を区別しないように指定します。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreKanaType">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> の比較で、カナ型を無視するように指定します。 カナ型とは、日本語の発音を表すひらがなとカタカナの文字を指します。 ひらがなは、本来の日本語の表現と単語に使用し、カタカナは "コンピューター" または "インターネット" などの外来語に使用します。 発音は、ひらがなとカタカナのどちらでも表現できます。 この値が選択されている場合、ある発音を示すひらがなは、同じ発音を示すカタカナと同一であると見なされます。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreNonSpace">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> の比較で、発音区別符など、空白以外の組み合わせ文字を無視するように指定します。 Unicode 標準は、基本文字を組み合わせて生成される新しい文字を組み合わせ文字として定義しています。 空白以外の組み合わせ文字は、表示するときに文字と文字の間に空白が入りません。 空白以外の組み合わせ文字の詳細については、https://www.unicode.org の「The Unicode Standard」を参照してください。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreWidth">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> の比較で、半角と全角の区別を無視するように指定します。 たとえば、日本語のカタカナ文字は、全角または半角で記述できます。この値を選択した場合、全角で記述されたカタカナ文字は、半角で記述されたカタカナ文字と同一であると見なされます。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.None">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> の比較で、既定のオプション設定を指定します。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDateTime">
      <summary>データベースに格納する、またはデータベースから取得する日付と時刻のデータを表します。値の範囲は 1753 年 1 月 1 日から 9999 年 12 月 31 日までで、精度は 3.33 ミリ秒です。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体は、基になるデータ構造体が、対応する .NET Framework の型 <see cref="T:System.DateTime" /> (12:00:00 AM 1/1/0001 から 11:59:59 PM 12/31/9999 までの任意の日時を、100 ナノ秒の精度で表現できる) とは異なります。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> では、00:00:00 AM 1/1/1900 を起点とした相対的な差が格納されます。 つまり、"00:00:00 AM 1/1/1900" を整数に変換すると、0 が返されます。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> 値を指定して、<see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="value">
        <see langword="DateTime" /> 構造体。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32)">
      <summary>パラメーターを指定して、<see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="dayTicks">日付をタイマー刻みとして表す整数値。</param>
      <param name="timeTicks">時刻をタイマー刻みとして表す整数値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>年、月、日を初期化するパラメーターを指定して、<see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="year">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の年を表す整数値。</param>
      <param name="month">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の月を表す整数値。</param>
      <param name="day">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の日付数字を表す整数値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>新しい構造体の年、月、日、時、分、秒を初期化するパラメーターを指定して、<see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="year">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の年を表す整数値。</param>
      <param name="month">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の月を表す整数値。</param>
      <param name="day">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の月の日付を表す整数値。</param>
      <param name="hour">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の時間を表す整数値。</param>
      <param name="minute">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の分を表す整数値。</param>
      <param name="second">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の秒を表す整数値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>新しい構造体の年、月、日、時、分、秒、ミリ秒を初期化するパラメーターを指定して、<see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="year">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の年を表す整数値。</param>
      <param name="month">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の月を表す整数値。</param>
      <param name="day">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の月の日付を表す整数値。</param>
      <param name="hour">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の時間を表す整数値。</param>
      <param name="minute">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の分を表す整数値。</param>
      <param name="second">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の秒を表す整数値。</param>
      <param name="millisecond">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体のミリ秒を表す double 型の値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>新しい構造体の年、月、日、時、分、秒、マイクロ秒を初期化するパラメーターを指定して、<see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="year">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の年を表す整数値。</param>
      <param name="month">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の月を表す整数値。</param>
      <param name="day">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の日付を表す整数値。</param>
      <param name="hour">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の時間を表す整数値。</param>
      <param name="minute">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の分を表す整数値。</param>
      <param name="second">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の秒を表す整数値。</param>
      <param name="bilisecond">新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体のマイクロ秒 (1 ミリ秒の 1/1000) を表す整数値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Add(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> を指定した <see langword="TimeSpan" /> に追加します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 値。</param>
      <param name="t">
        <see langword="Timespan" /> 値。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Data.SqlTypes.SqlDateTime)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体とこの <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体を比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスは <see cref="T:System.Data.SqlTypes.SqlDateTime" /> よりも小さくなっています。  
  
  0 
  このインスタンスは <see cref="T:System.Data.SqlTypes.SqlDateTime" /> と同じです。  
  
  0 より大きい値 
  このインスタンスは <see cref="T:System.Data.SqlTypes.SqlDateTime" /> よりも大きくなっています。  
  
または 
 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> が null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Object)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDateTime" /> とこの <see cref="T:System.Object" /> 構造体を比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Object" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.DayTicks">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の日付を表すタイマー刻みの数を取得します。</summary>
      <returns>この <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 構造体の <see cref="T:System.Data.SqlTypes.SqlDateTime" /> プロパティに格納されている日付を表すタイマー刻みの数。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <see langword="Value" /> 構造体の <see cref="N:System.Data.SqlTypes" /> プロパティが null に設定されている場合にスローされる例外。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Equals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <returns>2 つの値が等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Equals(System.Object)">
      <summary>指定したオブジェクト パラメーターを <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> オブジェクトの <see cref="T:System.Data.SqlTypes.SqlDateTime" /> プロパティと比較します。</summary>
      <param name="value">比較されるオブジェクト。</param>
      <returns>オブジェクトが <see cref="T:System.Data.SqlTypes.SqlDateTime" /> のインスタンスで、2 つが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GetHashCode">
      <summary>インスタンスのハッシュ コードを取得します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XML スキーマ定義言語 (XSD) を返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指定した <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD を示す <see langword="string" /> 型の値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.IsNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体が null であるかどうかを示します。</summary>
      <returns>null の場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.MaxValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の有効な日付の最大値を表します。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.MinValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の有効な日付の最小値を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.NotEquals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> の 2 つのインスタンスの論理比較を実行して、等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.Null">
      <summary>
        <see cref="T:System.DBNull" /> 構造体のこのインスタンスに割り当てることができる <see cref="T:System.Data.SqlTypes.SqlDateTime" /> を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Addition(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>指定した <see cref="T:System.TimeSpan" /> 構造体に、指定した <see cref="T:System.Data.SqlTypes.SqlDateTime" /> パラメーターの <paramref name="t" /> で示された時間を加算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <param name="t">
        <see cref="T:System.TimeSpan" /> 構造体。</param>
      <returns>新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" />。 いずれかの引数が <see cref="F:System.Data.SqlTypes.SqlDateTime.Null" /> の場合、新しい <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> は <see cref="F:System.Data.SqlTypes.SqlDateTime.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Equality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <returns>2 つの値が等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.DateTime">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体を <see cref="T:System.DateTime" /> 構造体に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <returns>指定した <see cref="T:System.DateTime" /> 構造体の <see cref="P:System.DateTime.Date" /> プロパティと同じ日付と時刻の値を格納している <see cref="P:System.DateTime.TimeOfDay" /> プロパティと <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlDateTime" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDateTime">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlDateTime" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> パラメーターによって表される日付と時刻に等しい <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> を持つ <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlString" /> が null の場合、新しく作成される <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の <see langword="Value" /> は null になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Implicit(System.DateTime)~System.Data.SqlTypes.SqlDateTime">
      <summary>
        <see cref="T:System.DateTime" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体に変換します。</summary>
      <param name="value">
        <see langword="DateTime" /> 構造体。</param>
      <returns>指定した <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> プロパティと <see cref="P:System.DateTime.Date" /> プロパティの組み合わせに等しい <see cref="P:System.DateTime.TimeOfDay" /> を持つ <see cref="T:System.DateTime" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Inequality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> の 2 つのインスタンスの論理比較を実行して、等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Subtraction(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>指定した <see cref="T:System.TimeSpan" /> 構造体から、指定した <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の <paramref name="t" /> を減算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <param name="t">
        <see cref="T:System.TimeSpan" /> 構造体。</param>
      <returns>減算の結果を表す <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Parse(System.String)">
      <summary>指定した <see cref="T:System.String" /> 形式の日付と時刻を等価の <see cref="T:System.Data.SqlTypes.SqlDateTime" /> に変換します。</summary>
      <param name="s">解析対象の文字列。<see langword="string" /></param>
      <returns>指定した <see langword="string" /> によって表される日付と時刻に等しい <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerHour">
      <summary>値が 1 時間に相当するタイマー刻み数である定数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerMinute">
      <summary>値が 1 分に相当するタイマー刻み数である定数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerSecond">
      <summary>値が 1 秒に相当するタイマー刻み数である定数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Subtract(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDateTime" /> インスタンスから、指定した <see langword="Timespan" /> を減算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 値。</param>
      <param name="t">
        <see langword="Timespan" /> 値。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.TimeTicks">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の時刻を表すタイマー刻みの数を取得します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の時刻を表すタイマー刻みの数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.ToSqlString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体に格納されている日付と時刻を表す文字列である値を持つ <see langword="SqlString" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.ToString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体を <see cref="T:System.String" /> に変換します。</summary>
      <returns>この <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 構造体の <see cref="T:System.Data.SqlTypes.SqlDateTime" /> プロパティを表す <see langword="String" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の値を取得します。 このプロパティは読み取り専用です。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体の値。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <see langword="Value" /> 構造体の <see cref="N:System.Data.SqlTypes" /> プロパティが null に設定されている場合にスローされる例外。</exception>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDecimal">
      <summary>10^38 +1 から 10^38 - 1 までの固定精度小数部桁数の数値を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>パラメーターを指定して、<see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="bPrecision">新しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 構造体の <see cref="T:System.Data.SqlTypes.SqlDecimal" /> プロパティを表すために使用できる最大桁数。</param>
      <param name="bScale">新しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 構造体に対して <see cref="T:System.Data.SqlTypes.SqlDecimal" /> プロパティを解決するための小数部桁数。</param>
      <param name="fPositive">新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体が正数を表すか負数を表すかを示すブール値。</param>
      <param name="data1">data2、data3、および data4 と組み合わされて、新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値を表す 128 ビット符号なし整数を構成する 32 ビット符号なし整数。</param>
      <param name="data2">data1、data3、および data4 と組み合わされて、新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値を表す 128 ビット符号なし整数を構成する 32 ビット符号なし整数。</param>
      <param name="data3">data1、data2、および data4 と組み合わされて、新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値を表す 128 ビット符号なし整数を構成する 32 ビット符号なし整数。</param>
      <param name="data4">data1、data2、および data3 と組み合わされて、新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値を表す 128 ビット符号なし整数を構成する 32 ビット符号なし整数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32[])">
      <summary>パラメーターを指定して、<see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="bPrecision">新しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 構造体の <see cref="T:System.Data.SqlTypes.SqlDecimal" /> プロパティを表すために使用できる最大桁数。</param>
      <param name="bScale">新しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 構造体に対して <see cref="T:System.Data.SqlTypes.SqlDecimal" /> プロパティを解決するための小数部桁数。</param>
      <param name="fPositive">新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体が正数を表すか負数を表すかを示すブール値。</param>
      <param name="bits">新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> の値を指定する 128 ビット符号なし整数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Decimal)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 値を使用して、<see cref="T:System.Decimal" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="value">
        <see cref="T:System.Decimal" /> 構造体として格納される <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Double)">
      <summary>指定した倍精度浮動小数点数パラメーターを使用して、<see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="dVal">新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値を表す倍精度浮動小数点数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int32)">
      <summary>指定した整数値を使用して、<see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="value">新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値として使用される指定した整数値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int64)">
      <summary>指定した long 型整数値を使用して、<see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="value">新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値として使用される指定した long 型整数値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Abs(System.Data.SqlTypes.SqlDecimal)">
      <summary>Abs メソッドは、<see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの絶対値を取得します。</summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの絶対値を表す符号なし数値を格納している <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Add(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> オペランドを加算した値を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>合計を格納している <see cref="T:System.Data.SqlTypes.SqlDecimal" /> プロパティを持つ新しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.AdjustScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Boolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> オペランドの小数点以下桁数は、digits パラメーターで示される桁数に調整されます。 fRound パラメーターの値に応じて、値は、適切な桁数に丸められるか、切り捨てられます。</summary>
      <param name="n">調整される <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="digits">調整した構造体の桁数。</param>
      <param name="fRound">このパラメーターが <see langword="true" /> の場合、新しい Value は丸められます。<see langword="false" /> の場合、値は切り捨てられます。</param>
      <returns>調整された数値を格納している <see cref="T:System.Data.SqlTypes.SqlDecimal" /> プロパティを持つ新しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 構造体。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.BinData">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値のバイナリ表現をバイト配列として取得します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値のバイナリ表現を格納しているバイト配列。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Ceiling(System.Data.SqlTypes.SqlDecimal)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体以上で、最小の整数を返します。</summary>
      <param name="n">切り上げ値を計算する対象の <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体以上で、最小の値を表す <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Data.SqlTypes.SqlDecimal)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> オブジェクトとこの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> インスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Object)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> とこの <see cref="T:System.Object" /> インスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Object" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ConvertToPrecScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> オペランドの値を示された精度と小数点以下桁数に調整します。</summary>
      <param name="n">値が調整される <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="precision">新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の精度。</param>
      <param name="scale">新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の小数点以下桁数。</param>
      <returns>パラメーターで示された精度と小数点以下桁数に調整された Value を持つ新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Data">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体のバイナリ表現を整数の配列として取得します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体のバイナリ表現を格納している整数の配列。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Divide(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>除算演算子は、最初の <see cref="T:System.Data.SqlTypes.SqlDecimal" /> オペランドを 2 番目のオペランドで除算した結果を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>除算の結果を含む <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Equals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> オペランドの論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>2 つの値が等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。 いずれかのインスタンスが null の場合、<see langword="SqlDecimal" /> の値は null になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> パラメーターを <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> インスタンスの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> プロパティと比較します。</summary>
      <param name="value">比較対象の <see cref="T:System.Object" />。</param>
      <returns>オブジェクトが <see cref="T:System.Data.SqlTypes.SqlDecimal" /> のインスタンスで、2 つが等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Floor(System.Data.SqlTypes.SqlDecimal)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 数を次に小さな整数に丸めます。</summary>
      <param name="n">切り下げ値を計算する対象の <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の整数部を格納している <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XML スキーマ定義言語 (XSD) を返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指定した <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD を示す <see langword="string" /> 型の値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の論理比較を実行して、最初の構造体が 2 番目の構造体より大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーター以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.IsNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体が null であるかどうかを示します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体が null の場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.IsPositive">
      <summary>この <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 構造体の <see cref="T:System.Data.SqlTypes.SqlDecimal" /> がゼロより大きいかどうかを示します。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> に null が代入されている場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の論理比較を実行して、最初の構造体が 2 番目の構造体より小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーター以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxPrecision">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Precision" /> プロパティの最大有効値を表す定数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxScale">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Scale" /> プロパティの最大値を表す定数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の最大値を表す定数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MinValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の最小値を表す定数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>乗算演算子は、2 つの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの積を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>乗算の積を格納している <see cref="T:System.Data.SqlTypes.SqlDecimal" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.NotEquals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの論理比較を実行して、それらが等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.Null">
      <summary>
        <see cref="T:System.DBNull" /> クラスのこのインスタンスに割り当てることができる <see cref="T:System.Data.SqlTypes.SqlDecimal" /> を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Addition(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> オペランドを加算した値を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>合計を格納している <see cref="T:System.Data.SqlTypes.SqlDecimal" /> プロパティを持つ新しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Division(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>除算演算子は、最初の <see cref="T:System.Data.SqlTypes.SqlDecimal" /> オペランドを 2 番目のオペランドで除算した結果を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>除算の結果を含む <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Equality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> オペランドの論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>2 つのインスタンスが等しい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しくない場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDecimal">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Decimal">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターを <see cref="T:System.Decimal" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>
        <see langword="Decimal" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> と等しい値を持つ新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlDecimal">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDecimal">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDecimal">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <param name="x">変換される <see cref="T:System.Data.SqlTypes.SqlString" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターで表される値と等しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Double)~System.Data.SqlTypes.SqlDecimal">
      <summary>
        <see cref="T:System.Double" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Double" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの値と等しい値を持つ新しい <see cref="T:System.Double" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の論理比較を実行して、最初の構造体が 2 番目の構造体より大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーター以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDecimal">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDecimal">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDecimal">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDecimal">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体を SqlDecimal に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDecimal">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> オペランドを <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlDecimal">
      <summary>
        <see cref="T:System.Decimal" /> 値を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <param name="x">変換される <see cref="T:System.Decimal" /> 値。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの値と等しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> プロパティを持つ新しい <see langword="Decimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlDecimal">
      <summary>指定した <see cref="T:System.Int64" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Int64" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの値と等しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> プロパティを持つ新しい <see cref="T:System.Int64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Inequality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの論理比較を実行して、それらが等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の論理比較を実行して、最初の構造体が 2 番目の構造体より小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーター以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>乗算演算子は、2 つの <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターの積を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>乗算の積を格納している <see cref="T:System.Data.SqlTypes.SqlDecimal" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Subtraction(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlDecimal" /> オペランドから 2 番目のオペランドを減算した結果を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>減算した結果を格納している Value プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_UnaryNegation(System.Data.SqlTypes.SqlDecimal)">
      <summary>単項マイナス演算子は、<see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターを無効にします。</summary>
      <param name="x">無効にされる <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>否定の結果を格納している値を持つ新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Parse(System.String)">
      <summary>数値の <see cref="T:System.String" /> 形式をそれと等価な <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <param name="s">解析対象の文字列。<see langword="String" /></param>
      <returns>指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に格納されている値と等価の <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Power(System.Data.SqlTypes.SqlDecimal,System.Double)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値を指定した指数で累乗します。</summary>
      <param name="n">累乗される <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="exp">数値を累乗する指数を示す double 値。</param>
      <returns>結果を格納している <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Precision">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> プロパティを表すための最大桁数を取得します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の <see langword="Value" /> を表すときに使用する最大桁数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Round(System.Data.SqlTypes.SqlDecimal,System.Int32)">
      <summary>指定した精度で、指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値に最も近い数値を取得します。</summary>
      <param name="n">丸められる <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="position">戻り値の小数点以下の有効桁数 (精度)。</param>
      <returns>丸め演算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Scale">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> を解決するための小数部の桁数を取得します。</summary>
      <returns>
        <see langword="Value" /> プロパティを解決するための小数部桁数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Sign(System.Data.SqlTypes.SqlDecimal)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> プロパティの符号を示す値を取得します。</summary>
      <param name="n">評価される符号を持つ <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の符号を示す数値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Subtract(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlDecimal" /> オペランドから 2 番目のオペランドを減算した結果を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>減算した結果を格納している Value プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToDouble">
      <summary>このインスタンスの <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> プロパティの内容と等しい double 値を返します。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> プロパティの 10 進形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlBoolean">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlBoolean" /> に変換します。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> が 0 以外の場合は <see langword="true" />。0 の場合は <see langword="false" />。それ以外の場合は Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlByte">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の <see langword="Value" /> と等しい <see langword="Value" /> を持つ <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値が <see langword="true" /> の場合、<see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の<see langword="Value" />は 1 になります。 それ以外の場合、<see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の <see langword="Value" /> は 0 です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlDouble">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> のインスタンスと同じ値を持つ <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt16">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> のインスタンスと同じ値を持つ <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt32">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt32" /> のインスタンスと同じ値を持つ <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt64">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> のインスタンスと同じ値を持つ <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlMoney">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> のインスタンスと同じ値を持つ <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlSingle">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> のインスタンスと同じ値を持つ <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の値の文字列表現を値として持つ <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体を <see cref="T:System.String" /> に変換します。</summary>
      <returns>
        <see cref="T:System.String" /> 構造体の <see cref="T:System.Data.SqlTypes.SqlDecimal" /> プロパティの文字列形式を格納している新しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Truncate(System.Data.SqlTypes.SqlDecimal,System.Int32)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値を、目的の位置で切り捨てます。</summary>
      <param name="n">切り捨てられる <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <param name="position">数値を切り捨てる小数部の位置。</param>
      <returns>整数部で値を切り捨てるには、<paramref name="position" /> パラメーターに、切り捨てる位置に対応する負の値を指定します。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値を取得します。 このプロパティは読み取り専用です。</summary>
      <returns>-79,228,162,514,264,337,593,543,950,335 から 79,228,162,514,162,514,264,337,593,543,950,335 までの範囲の数値。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDouble">
      <summary>データベースに格納する、またはデータベースから取得する -1.79E +308 から 1.79E +308 の範囲内の浮動小数点数を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.#ctor(System.Double)">
      <summary>新しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体の <see cref="T:System.Data.SqlTypes.SqlDouble" /> プロパティを設定する倍精度浮動小数点数パラメーターを指定して、<see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="value">新しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> に使用する値を持つ倍精度浮動小数点数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>加算演算子は、2 つの <see cref="T:System.Data.SqlTypes.SqlDouble" /> オペランドの合計を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>2 つの <see cref="T:System.Data.SqlTypes.SqlDouble" /> オペランドの合計。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDouble" /> とこの <see cref="T:System.Data.SqlTypes.SqlDouble" /> インスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Data.SqlTypes.SqlDouble" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDouble" /> とこの <see cref="T:System.Object" /> インスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Object" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>除算演算子は、最初の <see cref="T:System.Data.SqlTypes.SqlDouble" /> オペランドを 2 番目のオペランドで除算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>除算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> の 2 つのインスタンスの論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>2 つの値が等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Equals(System.Object)">
      <summary>指定したオブジェクト パラメーターを <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> オブジェクトの <see cref="T:System.Data.SqlTypes.SqlDouble" /> プロパティと比較します。</summary>
      <param name="value">比較されるオブジェクト。</param>
      <returns>2 つの値が等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GetHashCode">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体のハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XML スキーマ定義言語 (XSD) を返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指定した <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD を示す <see langword="string" /> 型の値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDouble" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDouble" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDouble.IsNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> インスタンスが null かどうかを示すブール値を返します。</summary>
      <returns>
        <see langword="true" /> が null の場合は <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDouble" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDouble" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.MaxValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体の最大値を表す定数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.MinValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> の最小有効値を表す定数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>乗算演算子は、2 つの <see cref="T:System.Data.SqlTypes.SqlDouble" /> オペランドの積を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>2 つの <see cref="T:System.Data.SqlTypes.SqlDouble" /> オペランドの積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> の 2 つのインスタンスを比較し、等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDouble" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.Null">
      <summary>
        <see cref="T:System.DBNull" /> 構造体のこのインスタンスに割り当てることができる <see cref="T:System.Data.SqlTypes.SqlDouble" /> を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>加算演算子は、2 つの <see cref="T:System.Data.SqlTypes.SqlDouble" /> オペランドの合計を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>2 つの <see cref="T:System.Data.SqlTypes.SqlDouble" /> オペランドの合計。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>除算演算子は、最初の <see cref="T:System.Data.SqlTypes.SqlDouble" /> オペランドを 2 番目のオペランドで除算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>除算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> の 2 つのインスタンスの論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>2 つの値が等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDouble">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlBoolean" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <param name="x">変換される <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> プロパティに応じて、0 または 1 の <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> が <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> の場合、<see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体は <see cref="F:System.Data.SqlTypes.SqlDouble.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Double">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体を倍精度浮動小数点数に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>指定した <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体の値と等価な倍精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDouble">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> で表された数値と等しい <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlString" />。 <see cref="T:System.Data.SqlTypes.SqlString" /> が <see cref="F:System.Data.SqlTypes.SqlString.Null" /> の場合、<see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体は <see cref="F:System.Data.SqlTypes.SqlDouble.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDouble" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDouble" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDouble">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> を持つ <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlByte" /> が <see cref="F:System.Data.SqlTypes.SqlByte.Null" /> の場合、<see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体は <see cref="F:System.Data.SqlTypes.SqlDouble.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlDouble">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> が <see cref="F:System.Data.SqlTypes.SqlDecimal.Null" /> の場合、<see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体は <see cref="F:System.Data.SqlTypes.SqlDouble.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDouble">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlInt16" /> が <see cref="F:System.Data.SqlTypes.SqlInt16.Null" /> の場合、<see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体は <see cref="F:System.Data.SqlTypes.SqlDouble.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDouble">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt32" />。 <see cref="T:System.Data.SqlTypes.SqlInt32" /> が <see cref="F:System.Data.SqlTypes.SqlInt32.Null" /> の場合、<see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体は <see cref="F:System.Data.SqlTypes.SqlDouble.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDouble">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt64" />。 <see cref="T:System.Data.SqlTypes.SqlInt64" /> が <see cref="F:System.Data.SqlTypes.SqlInt64.Null" /> の場合、<see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体は <see cref="F:System.Data.SqlTypes.SqlDouble.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDouble">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlMoney" />。 <see cref="T:System.Data.SqlTypes.SqlMoney" /> が <see cref="F:System.Data.SqlTypes.SqlMoney.Null" /> の場合、<see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体は <see cref="F:System.Data.SqlTypes.SqlDouble.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDouble">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlSingle" /> が <see cref="F:System.Data.SqlTypes.SqlSingle.Null" /> の場合、<see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体は <see cref="F:System.Data.SqlTypes.SqlDouble.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Double)~System.Data.SqlTypes.SqlDouble">
      <summary>指定した double 値を <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <param name="x">変換する double 値。</param>
      <returns>指定した倍精度浮動小数点数パラメーターと同じ値を持つ <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> の 2 つのインスタンスを比較し、それらが等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDouble" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDouble" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlDouble" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>乗算演算子は、2 つの <see cref="T:System.Data.SqlTypes.SqlDouble" /> オペランドの積を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>2 つの <see cref="T:System.Data.SqlTypes.SqlDouble" /> オペランドの積。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>減算演算子は、最初の <see cref="T:System.Data.SqlTypes.SqlDouble" /> オペランドから 2 番目のオペランドを減算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>減算の結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_UnaryNegation(System.Data.SqlTypes.SqlDouble)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体の値と符号が逆の値を返します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>符号が逆の値を格納している <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Parse(System.String)">
      <summary>数値の <see cref="T:System.String" /> 形式をそれと等価の倍精度浮動小数点数に変換します。</summary>
      <param name="s">解析対象の文字列。<see langword="String" /></param>
      <returns>
        <see langword="String" /> で表された値を格納している <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>減算演算子は、最初の <see cref="T:System.Data.SqlTypes.SqlDouble" /> オペランドから 2 番目のオペランドを減算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>減算の結果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>.NET Framework によって使用される XML スキーマ。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlBoolean">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlBoolean" /> に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体の <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> が 0 以外の場合は、<see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> になる <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> を持つ <see langword="SqlBoolean" /> 構造体。<see cref="T:System.Data.SqlTypes.SqlDouble" /> が 0 の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。<see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体が <see cref="F:System.Data.SqlTypes.SqlDouble.Null" /> の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlByte">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <returns>この <see langword="SqlByte" /> 構造体の <see langword="Value" /> と等しい <see langword="Value" /> を持つ <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlDecimal">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <returns>変換された値がこの <see langword="SqlDecimal" /> の丸められた値に等しい、新しい <see langword="SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt16">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体の値の整数部と等しい <see langword="Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt32">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体の値の整数部と等しい <see langword="Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt64">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体の値の整数部と等しい <see langword="Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlMoney">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <returns>この <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> の値と等しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> を持つ新しい <see langword="SqlMoney" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlSingle">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <returns>この <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> の <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> と等しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> を持つ新しい <see langword="SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <returns>この <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> の <see cref="T:System.Data.SqlTypes.SqlDouble" /> を表す <see langword="SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体を文字列に変換します。</summary>
      <returns>この <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> の <see cref="T:System.Data.SqlTypes.SqlDouble" /> を表す文字列。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDouble.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体の値を取得します。 このプロパティは読み取り専用です。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体の値。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.Zero">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 構造体のインスタンスの <see cref="T:System.Data.SqlTypes.SqlDouble" /> プロパティに割り当てることができるゼロ値を表します。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlGuid">
      <summary>データベースに格納する、またはデータベースから取得する GUID を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Byte[])">
      <summary>指定したバイト配列パラメーターを使用して、<see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="value">バイト配列。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Guid)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlGuid" /> パラメーターを使用して、<see cref="T:System.Guid" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="g">
        <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>指定した値を使用して、<see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="a">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の最初の 4 バイト。</param>
      <param name="b">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の次の 2 バイト。</param>
      <param name="c">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の次の 2 バイト。</param>
      <param name="d">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の次のバイト。</param>
      <param name="e">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の次のバイト。</param>
      <param name="f">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の次のバイト。</param>
      <param name="g">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の次のバイト。</param>
      <param name="h">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の次のバイト。</param>
      <param name="i">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の次のバイト。</param>
      <param name="j">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の次のバイト。</param>
      <param name="k">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の次のバイト。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.String)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlGuid" /> パラメーターを使用して、<see cref="T:System.String" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="s">
        <see cref="T:System.String" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Data.SqlTypes.SqlGuid)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlGuid" /> とこの <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体を比較し、これらの相対値を示す値を返します。 最後の 6 バイト以外も比較しますが、最後の 6 バイトを比較では最上位バイトとして扱います。</summary>
      <param name="value">比較対象の <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (<see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Object)">
      <summary>指定したオブジェクトとこの <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体を比較し、これらの相対値を示す値を返します。 最後の 6 バイト以外も比較しますが、最後の 6 バイトを比較では最上位バイトとして扱います。</summary>
      <param name="value">比較対象の <see cref="T:System.Object" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (<see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Equals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体の論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <returns>2 つの値が等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。 いずれかのインスタンスが null の場合、<see langword="SqlGuid" /> は null になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Equals(System.Object)">
      <summary>指定したオブジェクト パラメーターを <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> オブジェクトの <see cref="T:System.Data.SqlTypes.SqlGuid" /> プロパティと比較します。</summary>
      <param name="value">比較されるオブジェクト。</param>
      <returns>オブジェクトが <see cref="T:System.Data.SqlTypes.SqlGuid" /> のインスタンスで、2 つが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GetHashCode">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体のハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XML スキーマ定義言語 (XSD) を返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指定した <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD を示す <see langword="string" /> 型の値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlGuid" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlGuid" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlGuid.IsNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体が null かどうかを示すブール値を取得します。</summary>
      <returns>
        <see langword="true" /> if <see langword="null" />. それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlGuid" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlGuid" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.NotEquals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体の論理比較を実行して、等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlGuid" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlGuid.Null">
      <summary>
        <see cref="T:System.DBNull" /> 構造体のこのインスタンスに割り当てることができる <see cref="T:System.Data.SqlTypes.SqlGuid" /> を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Equality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体の論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <returns>2 つのインスタンスが等しい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しくない場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlGuid" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Data.SqlTypes.SqlGuid">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlGuid" /> に変換します。</summary>
      <param name="x">
        <see langword="SqlBinary" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlBinary" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Guid">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlGuid" /> パラメーターを <see cref="T:System.Guid" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <returns>
        <see cref="T:System.Guid" /> の <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> と等しい新しい <see cref="T:System.Data.SqlTypes.SqlGuid" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlGuid">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlGuid" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> パラメーターで表される値と等しい <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> を持つ <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlGuid" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlGuid" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Implicit(System.Guid)~System.Data.SqlTypes.SqlGuid">
      <summary>指定した <see cref="T:System.Guid" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlGuid" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Guid" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> パラメーターと等しい <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> を持つ新しい <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Inequality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体の論理比較を実行して、等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlGuid" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlGuid" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンス以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlGuid" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Parse(System.String)">
      <summary>指定した <see cref="T:System.String" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlGuid" /> に変換します。</summary>
      <param name="s">解析対象の文字列。<see langword="String" /></param>
      <returns>指定した <see cref="T:System.Data.SqlTypes.SqlGuid" /> に格納されている値と等価の <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToByteArray">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体をバイト配列に変換します。</summary>
      <returns>この <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 構造体の <see cref="T:System.Data.SqlTypes.SqlGuid" /> を表すバイト配列。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToSqlBinary">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlBinary" /> に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体のバイトを格納している <see langword="SqlBinary" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToSqlString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の文字列形式を格納している <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体を <see cref="T:System.String" /> に変換します。</summary>
      <returns>
        <see cref="T:System.String" /> 構造体の文字列形式を格納している <see cref="T:System.Data.SqlTypes.SqlGuid" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlGuid.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体の値を取得します。 このプロパティは読み取り専用です。</summary>
      <returns>
        <see cref="T:System.Guid" /> 構造体。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt16">
      <summary>データベースに格納する、またはデータベースから取得する 16 ビット符号付き整数を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.#ctor(System.Int16)">
      <summary>指定した短整数パラメーターを使用して、<see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="value">短整数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Add(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> オペランドの合計を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> オペランドの合計を格納している <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> オペランドのビットごとの AND を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>ビットごとの AND の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt16" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> オペランドのビットごとの OR を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>ビットごとの OR の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt16" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Data.SqlTypes.SqlInt16)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt16" /> とこの <see cref="T:System.Data.SqlTypes.SqlInt16" /> インスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Data.SqlTypes.SqlInt16" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
または 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Object)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt16" /> とこの <see cref="T:System.Object" /> インスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Object" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
object が null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Divide(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt16" /> オペランドを 2 番目のオペランドで除算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>除算した結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt16" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Equals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体の論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>2 つの値が等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。 いずれかのインスタンスが null の場合、<see langword="SqlInt16" /> は null になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Equals(System.Object)">
      <summary>指定したオブジェクトを <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> オブジェクトの <see cref="T:System.Data.SqlTypes.SqlInt16" /> プロパティと比較します。</summary>
      <param name="value">比較されるオブジェクト。</param>
      <returns>オブジェクトが <see cref="T:System.Data.SqlTypes.SqlInt16" /> のインスタンスで、2 つが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XML スキーマ定義言語 (XSD) を返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指定した <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD を示す <see cref="T:System.String" /> 型の値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt16" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体を比較して、最初の構造体が 2 番目の構造体以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt16" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt16.IsNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体が null であるかどうかを示します。</summary>
      <returns>null の場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。 詳細については、「 Null 値の処理」を参照してください。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt16" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体を比較して、最初の構造体が 2 番目の構造体以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt16" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.MaxValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> の最大有効値を表す定数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.MinValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> の最小有効値を表す定数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Mod(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt16" /> オペランドを 2 番目のオペランドで除算した後の剰余を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>剰余を格納している <see cref="T:System.Data.SqlTypes.SqlInt16" /> を持つ <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> 値を除算し、剰余を返します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 値。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 値。</param>
      <returns>
        <paramref name="x" /> と <paramref name="y" /> の除算によって得られた剰余。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターの積を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>2 つのパラメーターの積を格納している <see cref="T:System.Data.SqlTypes.SqlInt16" /> を持つ <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.NotEquals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体の論理比較を実行して、等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt16" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.Null">
      <summary>
        <see cref="T:System.DBNull" /> 構造体のこのインスタンスに割り当てることができる <see cref="T:System.Data.SqlTypes.SqlInt16" /> を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.OnesComplement(System.Data.SqlTypes.SqlInt16)">
      <summary>~ 演算子は、<see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドでビットごとの 1 の補数演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>指定した <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体の補数を格納している <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Addition(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> オペランドの合計を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> オペランドの合計を格納している <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> オペランドのビットごとの AND を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>ビットごとの AND の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt16" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> オペランドのビットごとの OR を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>ビットごとの OR の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt16" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Division(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt16" /> オペランドを 2 番目のオペランドで除算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>除算した結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt16" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Equality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体の論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>2 つのインスタンスが等しい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しくない場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt16" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_ExclusiveOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>指定したパラメーターでビットごとの排他的 OR 演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>ビットごとの XOR の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt16" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt16">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt16">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt16">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターの整数部と等しい <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Int16">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体を短整数に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターの Value と等しい値を持つ短整数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt16">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>指定した <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlInt16">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt16">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt16">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターの整数部と等しい <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt16">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlString" /> オブジェクトを <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> オブジェクト パラメーターで表される値と等しい <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt16" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体を比較して、最初の構造体が 2 番目の構造体以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt16" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt16">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Int16)~System.Data.SqlTypes.SqlInt16">
      <summary>指定した短整数を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <param name="x">短整数値。</param>
      <returns>指定した短整数と同じ値を持つ <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Inequality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体の論理比較を実行して、等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt16" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> の 2 つのインスタンスを比較して、最初のインスタンスが 2 番目のインスタンスより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt16" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体を比較して、最初の構造体が 2 番目の構造体以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt16" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt16" /> オペランドを 2 番目のオペランドで除算した後の剰余を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>剰余を格納している <see cref="T:System.Data.SqlTypes.SqlInt16" /> を持つ <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターの積を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>2 つのパラメーターの積を格納している <see cref="T:System.Data.SqlTypes.SqlInt16" /> を持つ <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_OnesComplement(System.Data.SqlTypes.SqlInt16)">
      <summary>~ 演算子は、<see cref="T:System.Data.SqlTypes.SqlByte" /> オペランドでビットごとの 1 の補数演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>指定した <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体の補数を格納している <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Subtraction(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターから 2 番目のパラメーターを減算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>減算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt16" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_UnaryNegation(System.Data.SqlTypes.SqlInt16)">
      <summary>単項マイナス演算子は、<see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> オペランドの <see cref="T:System.Data.SqlTypes.SqlInt16" /> を無効にします。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>符号が逆の値を格納している <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Parse(System.String)">
      <summary>数値の <see cref="T:System.String" /> 形式を等価の 16 ビット符号付き整数に変換します。</summary>
      <param name="s">解析対象の文字列。<see langword="String" /></param>
      <returns>指定した <see cref="T:System.String" /> に格納されている値と等しい 16 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Subtract(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターから 2 番目のパラメーターを減算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>減算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt16" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>.NET Framework によって使用される XML スキーマ。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlBoolean">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlBoolean" /> に変換します。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> が 0 以外の場合は <see langword="true" />。0 の場合は <see langword="false" />。それ以外の場合は Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlByte">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> を持つ <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlInt16" /> の値が 0 より小さいか、255 を超える場合、<see cref="T:System.OverflowException" /> が発生します。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlDecimal">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体の値と等しい <see langword="Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlDouble">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体の値と等しい <see langword="Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlInt32">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体の値と等しい <see langword="Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlInt64">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体の値と等しい <see langword="Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlMoney">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体の値と等しい <see langword="Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlSingle">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体の値と等しい <see langword="Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> のこのインスタンスの <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> を表す <see cref="T:System.Data.SqlTypes.SqlInt16" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToString">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体を <see cref="T:System.String" /> に変換します。</summary>
      <returns>
        <see cref="T:System.String" /> のインスタンスの <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> を表す <see cref="T:System.Data.SqlTypes.SqlInt16" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt16.Value">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体のインスタンスの値を取得します。 このプロパティは読み取り専用です。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体の値を表す短整数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Xor(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>指定したパラメーターでビットごとの排他的 OR 演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>XOR 演算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.Zero">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 構造体のインスタンスの <see cref="T:System.Data.SqlTypes.SqlInt16" /> プロパティに割り当てることができるゼロ値を表します。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt32">
      <summary>データベースに格納する、またはデータベースから取得する 32 ビット符号付き整数を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.#ctor(System.Int32)">
      <summary>指定した整数値を使用して、<see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="value">変換される整数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Add(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>指定した 2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体を加算した値を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体の合計を格納している <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> オペランドのビットごとの AND を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>ビットごとの AND 演算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体のビットごとの OR を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>ビットごとの OR 演算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Data.SqlTypes.SqlInt32)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> とこの <see cref="T:System.Data.SqlTypes.SqlInt32" /> インスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Data.SqlTypes.SqlInt32" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Object)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> とこの <see cref="T:System.Object" /> インスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Object" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Divide(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを 2 番目のパラメーターで除算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>除算した結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Equals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターの論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>2 つの値が等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。 いずれかのインスタンスが null の場合、<see langword="SqlInt32" /> は null になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Equals(System.Object)">
      <summary>指定したオブジェクト パラメーターを <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> オブジェクトの <see cref="T:System.Data.SqlTypes.SqlInt32" /> プロパティと比較します。</summary>
      <param name="value">比較されるオブジェクト。</param>
      <returns>オブジェクトが <see cref="T:System.Data.SqlTypes.SqlInt32" /> のインスタンスで、2 つが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XML スキーマ定義言語 (XSD) を返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指定した <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD を示す <see langword="string" /> 型の値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを比較して、最初のパラメーターが 2 番目のパラメーターより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt32" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを比較して、最初のパラメーターが 2 番目のパラメーター以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt32" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.IsNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体が null であるかどうかを示します。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> が null の場合、このプロパティは <see langword="true" /> になります。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを比較して、最初のパラメーターが 2 番目のパラメーターより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt32" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを比較して、最初のパラメーターが 2 番目のパラメーター以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt32" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.MaxValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> の最大有効値を表す定数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.MinValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> の最小有効値を表す定数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Mod(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを 2 番目のパラメーターで除算した後の剰余を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>剰余を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> を持つ <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> 値を除算し、剰余を返します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 値。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 値。</param>
      <returns>
        <paramref name="x" /> と <paramref name="y" /> の除算によって得られた剰余。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターの積を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>2 つのパラメーターの積を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> を持つ <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.NotEquals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターの論理比較を実行して、それらが等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt32" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Null">
      <summary>
        <see cref="T:System.DBNull" /> クラスのこのインスタンスに割り当てることができる <see cref="T:System.Data.SqlTypes.SqlInt32" /> を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.OnesComplement(System.Data.SqlTypes.SqlInt32)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体でビットごとの 1 の補数演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>1 の補数演算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Addition(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>指定した 2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体を加算した値を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体の合計を格納している <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> プロパティを持つ <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> オペランドのビットごとの AND を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>ビットごとの AND 演算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体のビットごとの OR を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>ビットごとの OR 演算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Division(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを 2 番目のパラメーターで除算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>除算した結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Equality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターの論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>2 つのインスタンスが等しい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しくない場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt32" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_ExclusiveOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体でビットごとの排他的 OR 演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>ビットごとの XOR 演算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt32">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlBoolean" /> を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt32">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt32">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDouble" /> を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターの整数部と等しい <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Int32">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体を整数に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>変換された整数値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlInt32">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt64" /> を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> プロパティを持つ新しい <see langword="SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt32">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt32">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlSingle" /> を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターの整数部と等しい <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt32">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlString" /> オブジェクトを <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターで表される値と等しい <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを比較して、最初のパラメーターが 2 番目のパラメーターより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt32" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを比較して、最初のパラメーターが 2 番目のパラメーター以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt32" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt32">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlByte" /> プロパティを <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt32">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt16" /> を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Int32)~System.Data.SqlTypes.SqlInt32">
      <summary>指定した整数を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <param name="x">整数値。</param>
      <returns>整数パラメーターと等しい Value プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Inequality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターの論理比較を実行して、それらが等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt32" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを比較して、最初のパラメーターが 2 番目のパラメーターより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt32" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを比較して、最初のパラメーターが 2 番目のパラメーター以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt32" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを 2 番目のパラメーターで除算した後の剰余を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>剰余を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> を持つ <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターの積を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>2 つのパラメーターの積を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> を持つ <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_OnesComplement(System.Data.SqlTypes.SqlInt32)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体でビットごとの 1 の補数演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>1 の補数演算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Subtraction(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターから 2 番目のパラメーターを減算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>減算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_UnaryNegation(System.Data.SqlTypes.SqlInt32)">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> オペランドの <see cref="T:System.Data.SqlTypes.SqlInt32" /> を無効にします。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>符号が逆の値を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Parse(System.String)">
      <summary>数値の <see cref="T:System.String" /> 形式を等価の 32 ビット符号付き整数に変換します。</summary>
      <param name="s">解析対象の文字列。<see cref="T:System.String" /></param>
      <returns>指定した <see cref="T:System.String" /> に格納されている値と等しい 32 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Subtract(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターから 2 番目のパラメーターを減算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>減算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> プロパティを持つ <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlBoolean">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlBoolean" /> に変換します。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> が 0 以外の場合は <see langword="true" />。0 の場合は <see langword="false" />。それ以外の場合は Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlByte">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の <see langword="Value" /> と等しい <see langword="Value" /> を持つ <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。 <see langword="SqlInt32" /> の値が 0 より小さいか、255 を超える場合、<see cref="T:System.OverflowException" /> が発生します。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDecimal">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDouble">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt16">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt64">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlMoney">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlSingle">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlString" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToString">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体を <see cref="T:System.String" /> に変換します。</summary>
      <returns>この <see cref="T:System.String" /> の値と等しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.Value">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体の値を取得します。 このプロパティは読み取り専用です。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体の値を表す整数。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">プロパティに <see cref="F:System.Data.SqlTypes.SqlInt32.Null" /> が格納されています。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Xor(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体でビットごとの排他的 OR 演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>ビットごとの XOR 演算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Zero">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 構造体のインスタンスの <see cref="T:System.Data.SqlTypes.SqlInt32" /> プロパティに割り当てることができるゼロ値を表します。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt64">
      <summary>データベースに格納する、またはデータベースから取得する 64 ビット符号付き整数を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.#ctor(System.Int64)">
      <summary>指定した長整数を使用して、<see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="value">長整数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Add(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの合計を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの合計と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> オペランドのビットごとの AND を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>ビットごとの AND 演算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> オペランドのビットごとの OR を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>ビットごとの OR 演算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Data.SqlTypes.SqlInt64)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt64" /> とこの <see cref="T:System.Data.SqlTypes.SqlInt64" /> インスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Data.SqlTypes.SqlInt64" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Object)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt64" /> とこの <see cref="T:System.Object" /> インスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Object" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Divide(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターを 2 番目のパラメーターで除算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>除算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt64" /> プロパティを持つ新しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>2 つの値が等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。 いずれかのインスタンスが null の場合、<see langword="SqlInt64" /> は null になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Object)">
      <summary>指定したオブジェクト パラメーターを <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> オブジェクトの <see cref="T:System.Data.SqlTypes.SqlInt64" /> プロパティと比較します。</summary>
      <param name="value">比較されるオブジェクト。</param>
      <returns>オブジェクトが <see cref="T:System.Data.SqlTypes.SqlInt64" /> のインスタンスで、2 つが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XML スキーマ定義言語 (XSD) を返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指定した <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD を示す <see langword="string" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーターより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt64" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーター以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt64" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.IsNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体が null かどうかを示すブール値を取得します。</summary>
      <returns>null の場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーターより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt64" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーター以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt64" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MaxValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体の最大有効値を表す定数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MinValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体の最小有効値を表す定数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Mod(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターを 2 番目のパラメーターで除算した後の剰余を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>剰余を格納している <see cref="T:System.Data.SqlTypes.SqlInt64" /> プロパティを持つ新しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> 値を除算し、剰余を返します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 値。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 値。</param>
      <returns>
        <paramref name="x" /> と <paramref name="y" /> の除算によって得られた剰余。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの積を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの積と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.NotEquals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの SqlInt64 パラメーターの論理比較を実行して、等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt64" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Null">
      <summary>
        <see cref="T:System.DBNull" /> 構造体のこのインスタンスに割り当てることができる <see cref="T:System.Data.SqlTypes.SqlInt64" /> を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> オペランドでビットごとの 1 の補数演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの 1 の補数と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Addition(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの合計を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの合計と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> オペランドのビットごとの AND を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>ビットごとの AND 演算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> オペランドのビットごとの OR を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>ビットごとの OR 演算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Division(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターを 2 番目のパラメーターで除算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>除算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt64" /> プロパティを持つ新しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Equality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>2 つのインスタンスが等しい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しくない場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt64" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_ExclusiveOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>指定したパラメーターでビットごとの排他的 OR 演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>ビットごとの XOR 演算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt64">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlBoolean" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt64">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの整数部と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt64">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの整数部と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Int64">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターを long 型に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> の <see cref="T:System.Data.SqlTypes.SqlInt64" /> と等しい新しい long 値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt64">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの整数部と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt64">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの整数部と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt64">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <param name="x">変換される <see cref="T:System.Data.SqlTypes.SqlString" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターで表される値と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーターより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt64" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーター以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt64" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt64">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt64">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt64">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlInt64">
      <summary>long 型パラメーターを <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <param name="x">長整数値。</param>
      <returns>long 型パラメーターの値と等しい <see cref="T:System.Data.SqlTypes.SqlInt64" /> を持つ新しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Inequality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの SqlInt64 パラメーターの論理比較を実行して、等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt64" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーターより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt64" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーター以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlInt64" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターを 2 番目のパラメーターで除算した後の剰余を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>剰余を格納している <see cref="T:System.Data.SqlTypes.SqlInt64" /> プロパティを持つ新しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの積を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>2 つの <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの積と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> オペランドでビットごとの 1 の補数演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの 1 の補数と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Subtraction(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターから 2 番目のパラメーターを減算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>減算の結果と等しい <see cref="T:System.Data.SqlTypes.SqlInt64" /> プロパティを持つ新しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_UnaryNegation(System.Data.SqlTypes.SqlInt64)">
      <summary>単項マイナス演算子は、<see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> オペランドの <see cref="T:System.Data.SqlTypes.SqlInt64" /> を無効にします。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターの符号が逆の <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> を持つ <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Parse(System.String)">
      <summary>数値の <see cref="T:System.String" /> 形式を等価の 64 ビット符号付き整数に変換します。</summary>
      <param name="s">解析対象の文字列。<see cref="T:System.String" /></param>
      <returns>指定した <see cref="T:System.String" /> に格納されている値と等しい 64 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Subtract(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターから 2 番目のパラメーターを減算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>減算の結果と等しい <see cref="T:System.Data.SqlTypes.SqlInt64" /> プロパティを持つ新しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlBoolean">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlBoolean" /> に変換します。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> が 0 以外の場合は <see langword="true" />。0 の場合は <see langword="false" />。それ以外の場合は Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlByte">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の <see langword="Value" /> と等しい <see langword="Value" /> を持つ <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDecimal">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDouble">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt16">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt32">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlMoney">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlSingle">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlString" /> の値を表す <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToString">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> のこのインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <returns>この <see cref="T:System.String" /> の値を表す <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.Value">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体の値を取得します。 このプロパティは読み取り専用です。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体の値を表す長整数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Xor(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>指定したパラメーターでビットごとの排他的 OR 演算を実行します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>ビットごとの XOR 演算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Zero">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 構造体のインスタンスの <see cref="T:System.Data.SqlTypes.SqlInt64" /> プロパティに割り当てることができるゼロ値を表します。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlMoney">
      <summary>データベースに格納する、またはデータベースから取得する通貨の値を表します。値の範囲は -2 63 (-922,337,203,685,477.5808) から 2 63 -1 (+922,337,203,685,477.5807) までで、精度は通貨単位の 1/10,000 です。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Decimal)">
      <summary>指定した <see cref="T:System.Decimal" /> 値を使用して、<see cref="T:System.Data.SqlTypes.SqlMoney" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">初期化する通貨の値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Double)">
      <summary>指定した double 値を使用して、<see cref="T:System.Data.SqlTypes.SqlMoney" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">初期化する通貨の値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int32)">
      <summary>指定した整数値を使用して、<see cref="T:System.Data.SqlTypes.SqlMoney" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">初期化する通貨の値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int64)">
      <summary>指定した長整数値を使用して、<see cref="T:System.Data.SqlTypes.SqlMoney" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">初期化する通貨の値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Add(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの合計を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの合計を格納している <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Data.SqlTypes.SqlMoney)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlMoney" /> とこの <see cref="T:System.Data.SqlTypes.SqlMoney" /> インスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Data.SqlTypes.SqlMoney" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
または 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Object)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlMoney" /> とこの <see cref="T:System.Object" /> インスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Object" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Divide(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>除算演算子は、最初の <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターを 2 番目のパラメーターで除算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>除算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlMoney" /> を持つ <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>2 つの値が等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。 いずれかのインスタンスが null の場合、<see langword="SqlMoney" /> は null になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Object)">
      <summary>指定したオブジェクト パラメーターを <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> オブジェクトの <see cref="T:System.Data.SqlTypes.SqlMoney" /> プロパティと比較します。</summary>
      <param name="value">比較されるオブジェクト。</param>
      <returns>オブジェクトが <see cref="T:System.Data.SqlTypes.SqlMoney" /> のインスタンスで、2 つが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetHashCode">
      <summary>インスタンスのハッシュ コードを取得します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XML スキーマ定義言語 (XSD) を返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指定した <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD を示す <see langword="string" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーターより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlMoney" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーター以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlMoney" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.IsNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体が null かどうかを示すブール値を返します。</summary>
      <returns>null の場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーターより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlMoney" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーター以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlMoney" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MaxValue">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> クラスのインスタンスの <see cref="T:System.Data.SqlTypes.SqlMoney" /> プロパティに割り当てることができる最大値を表します。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MinValue">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> クラスのインスタンスの <see cref="T:System.Data.SqlTypes.SqlMoney" /> プロパティに割り当てることができる最小値を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>乗算演算子は、2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの積を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>乗算の積を格納している <see cref="T:System.Data.SqlTypes.SqlMoney" /> を持つ新しい <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.NotEquals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの論理比較を実行して、それらが等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlMoney" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Null">
      <summary>
        <see cref="T:System.DBNull" /> クラスのこのインスタンスに割り当てることができる <see cref="T:System.Data.SqlTypes.SqlMoney" /> を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Addition(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの合計を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの合計を格納している <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Division(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>除算演算子は、最初の <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターを 2 番目のパラメーターで除算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>除算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlMoney" /> を持つ <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Equality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>2 つのインスタンスが等しい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しくない場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlMoney" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlMoney">
      <summary>この暗黙の演算子は、指定した <see cref="T:System.Data.SqlTypes.SqlBoolean" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlMoney">
      <summary>この演算子は、指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlMoney">
      <summary>この演算子は、指定した <see cref="T:System.Data.SqlTypes.SqlDouble" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Decimal">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体を <see cref="T:System.Decimal" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>
        <see cref="T:System.Decimal" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> と等しい値を持つ新しい <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlMoney">
      <summary>この演算子は、指定した <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlMoney">
      <summary>この演算子は、<see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <param name="x">変換される <see cref="T:System.Data.SqlTypes.SqlString" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターで表される値と等しい <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Double)~System.Data.SqlTypes.SqlMoney">
      <summary>この暗黙の演算子は、指定した <see cref="T:System.Data.SqlTypes.SqlDouble" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> プロパティと等しい <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーターより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlMoney" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーター以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlMoney" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlMoney">
      <summary>この暗黙の演算子は、指定した <see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlMoney">
      <summary>この暗黙の演算子は、指定した <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlMoney">
      <summary>この暗黙の演算子は、指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlMoney">
      <summary>この暗黙の演算子は、指定した <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlMoney">
      <summary>
        <see cref="T:System.Decimal" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <param name="x">変換される <see cref="T:System.Decimal" /> 値。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの値と等しい <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> を持つ新しい <see cref="T:System.Decimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlMoney">
      <summary>この暗黙の演算子は、指定した <see cref="T:System.Int64" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Int64" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの値と等しい <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> プロパティを持つ新しい <see cref="T:System.Int64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Inequality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの論理比較を実行して、それらが等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlMoney" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーターより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlMoney" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーター以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlMoney" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>乗算演算子は、2 つの <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターの積を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>乗算の積を格納している <see cref="T:System.Data.SqlTypes.SqlMoney" /> を持つ新しい <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Subtraction(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>減算演算子は、最初の <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターから 2 番目のパラメーターを減算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>減算の結果を格納している新しい <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_UnaryNegation(System.Data.SqlTypes.SqlMoney)">
      <summary>単項マイナス演算子は、<see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターを無効にします。</summary>
      <param name="x">無効にされる <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>否定の結果を格納している <see cref="T:System.Data.SqlTypes.SqlMoney" /> を持つ <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Parse(System.String)">
      <summary>数値の <see cref="T:System.String" /> 形式をそれと等価な <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <param name="s">解析対象の文字列。<see langword="String" /></param>
      <returns>指定した <see cref="T:System.Data.SqlTypes.SqlMoney" /> に格納されている値と等価の <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Subtract(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>減算演算子は、最初の <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターから 2 番目のパラメーターを減算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>減算の結果を格納している新しい <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDecimal">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> のインスタンスの Value を <see cref="T:System.Decimal" /> 構造体に変換します。</summary>
      <returns>この <see cref="T:System.Decimal" /> 構造体の <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> プロパティと等しい値を持つ <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDouble">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体を <see cref="T:System.Double" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体と等しい値を持つ倍精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt32">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体を <see cref="T:System.Int32" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体の整数部と等しい値を持つ 32 ビット整数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt64">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体の Value を <see cref="T:System.Int64" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体の整数部と等しい値を持つ 64 ビット整数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlBoolean">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlBoolean" /> に変換します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体の値がゼロの場合、<see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体の値は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> になります。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlByte">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlByte" /> の値と等しい <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDecimal">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDouble">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt16">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt32">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt32" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt64">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlSingle">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlString" /> の値の文字列表現を値として持つ <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> のインスタンスを文字列に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> の値の文字列表現を値として持つ文字列。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体のインスタンスの通貨値を取得します。 このプロパティは読み取り専用です。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体のインスタンスの通貨値。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">プロパティが null に設定されています。</exception>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Zero">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> クラスのインスタンスの <see cref="T:System.Data.SqlTypes.SqlMoney" /> プロパティに割り当てることができるゼロ値を表します。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNotFilledException">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> クラスは、スタンドアロン コンポーネントとしてではなく、他のクラスによる標準機能の派生元クラスとして使用するためのものです。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外がスローされたときに表示する文字列。</param>
      <param name="e">内部例外への参照。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNullValueException">
      <summary>
        <see langword="Value" /> 構造体の <see cref="N:System.Data.SqlTypes" /> プロパティが null に設定されている場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor">
      <summary>エラーを説明するシステム提供のメッセージを使用して、<see cref="T:System.Data.SqlTypes.SqlNullValueException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String)">
      <summary>エラーを説明する指定したメッセージを使用して、<see cref="T:System.Data.SqlTypes.SqlNullValueException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Data.SqlTypes.SqlNullValueException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
      <param name="e">現在の例外の原因となった例外。 <c>innerException</c> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlSingle">
      <summary>データベースに格納する、またはデータベースから取得する、-3.40E +38 から 3.40E +38 までの範囲の浮動小数点数を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Double)">
      <summary>指定した倍精度浮動小数点数パラメーターを使用して、<see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="value">新しい <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 構造体の <see cref="T:System.Data.SqlTypes.SqlSingle" /> として使用される double 値。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Single)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="value">新しい <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 構造体の <see cref="T:System.Data.SqlTypes.SqlSingle" /> として使用される浮動小数点数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Add(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>指定した 2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を加算した値を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>指定した 2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体の合計を格納している <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Data.SqlTypes.SqlSingle)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlSingle" /> とこの <see cref="T:System.Data.SqlTypes.SqlSingle" /> インスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Data.SqlTypes.SqlSingle" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Object)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlSingle" /> とこの <see cref="T:System.Object" /> インスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Object" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Divide(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を 2 番目の構造体で除算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>除算の結果を格納している <see langword="SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>2 つの値が等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。 いずれかのインスタンスが null の場合、<see langword="SqlSingle" /> は null になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Object)">
      <summary>指定したオブジェクト パラメーターを <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> オブジェクトの <see cref="T:System.Data.SqlTypes.SqlSingle" /> プロパティと比較します。</summary>
      <param name="value">比較されるオブジェクト。</param>
      <returns>オブジェクトが <see cref="T:System.Data.SqlTypes.SqlSingle" /> のインスタンスで、2 つが等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetHashCode">
      <summary>インスタンスのハッシュ コードを取得します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XML スキーマ定義言語 (XSD) を返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指定した <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD を示す <see langword="string" /> 型の値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーターより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlSingle" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体の論理比較を実行して、最初の構造体が 2 番目の構造体以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlSingle" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.IsNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体が null であるかどうかを示します。</summary>
      <returns>null の場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーターより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlSingle" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーター以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlSingle" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MaxValue">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> クラスのインスタンスの <see cref="T:System.Data.SqlTypes.SqlSingle" /> プロパティに割り当てることができる最大値を表します。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MinValue">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> クラスのインスタンスの <see cref="T:System.Data.SqlTypes.SqlSingle" /> プロパティに割り当てることができる最小値を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>指定した 2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体の積を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>乗算の積を格納している <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.NotEquals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの論理比較を実行して、それらが等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlSingle" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Null">
      <summary>
        <see cref="T:System.DBNull" /> 構造体のこのインスタンスに割り当てることができる <see cref="T:System.Data.SqlTypes.SqlSingle" /> を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Addition(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>指定した 2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を加算した値を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>指定した 2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体の合計を格納している <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Division(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を 2 番目の構造体で除算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>除算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Equality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>2 つの SqlSingle パラメーターの論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>2 つのインスタンスが等しい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しくない場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlSingle" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlSingle">
      <summary>この暗黙の演算子は、指定した <see cref="T:System.Data.SqlTypes.SqlBoolean" /> を <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlSingle">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDouble" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <param name="x">変換される <see cref="T:System.Data.SqlTypes.SqlDouble" /> パラメーター。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Single">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を float 型に変換します。</summary>
      <param name="x">float 型に変換される <see cref="T:System.Data.SqlTypes.SqlSingle" /> 値。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体の値を格納している float 型。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlSingle">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <param name="x">変換される <see cref="T:System.Data.SqlTypes.SqlString" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターで表される値と等しい <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーターより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlSingle" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体の論理比較を実行して、最初の構造体が 2 番目の構造体以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlSingle" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlSingle">
      <summary>この暗黙の演算子は、<see cref="T:System.Data.SqlTypes.SqlByte" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <param name="x">変換される <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> プロパティを持つ新しい <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlSingle">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlSingle">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlSingle">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlSingle">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlSingle">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> と等しい <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Single)~System.Data.SqlTypes.SqlSingle">
      <summary>指定した浮動小数点値を <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換される float 型の値。</param>
      <returns>指定した float 型の値を格納している <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Inequality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの論理比較を実行して、それらが等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlSingle" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーターより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlSingle" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーター以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlSingle" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>指定した 2 つの <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体の積を計算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>乗算の積を格納している <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Subtraction(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体から 2 番目の構造体を減算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>減算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_UnaryNegation(System.Data.SqlTypes.SqlSingle)">
      <summary>指定した <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 構造体の <see cref="T:System.Data.SqlTypes.SqlSingle" /> を無効にします。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>符号が逆の値を格納している <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Parse(System.String)">
      <summary>指定した <see cref="T:System.String" /> を <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体に変換します。</summary>
      <param name="s">解析対象の文字列。<see cref="T:System.String" /></param>
      <returns>指定した <see cref="T:System.Data.SqlTypes.SqlSingle" /> に格納されている値と等価の <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Subtract(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>最初の <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体から 2 番目の構造体を減算します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>減算の結果を格納している <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlBoolean">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlBoolean" /> に変換します。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> が 0 以外の場合は <see langword="true" />。0 の場合は <see langword="false" />。それ以外の場合は Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlByte">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の <see langword="Value" /> と等しい <see langword="Value" /> を持つ <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体の値が <see langword="true" /> の場合、<see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の<see langword="Value" />は 1 になります。 それ以外の場合、<see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体の <see langword="Value" /> は 0 です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDecimal">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <returns>この <see langword="SqlDecimal" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDouble">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <returns>この <see langword="SqlDouble" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt16">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <returns>この <see langword="SqlInt16" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt32">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt32" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt64">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> の値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlMoney">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> の値と等しい <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlString" /> の値を表す <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToString">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体を <see cref="T:System.String" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> の値を表す <see langword="String" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.Value">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体の値を取得します。 このプロパティは読み取り専用です。</summary>
      <returns>-3.40E+38 から 3.40E+38 までの浮動小数点値。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Zero">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> クラスのインスタンスの <see cref="T:System.Data.SqlTypes.SqlSingle" /> プロパティに割り当てることができるゼロ値を表します。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlString">
      <summary>データベースに格納する、またはデータベースから取得する文字の可変長ストリームを表します。 <see cref="T:System.Data.SqlTypes.SqlString" /> は、基になるデータ構造体が、対応する .NET Framework の <see cref="T:System.String" /> データ型とは異なります。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[])">
      <summary>ロケール ID、比較オプション、およびデータを指定して、<see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="lcid">新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の地理的なロケールと言語を指定します。</param>
      <param name="compareOptions">新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の比較オプションを指定します。</param>
      <param name="data">格納するデータ配列。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Boolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="lcid">新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の地理的なロケールと言語を指定します。</param>
      <param name="compareOptions">新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の比較オプションを指定します。</param>
      <param name="data">格納するデータ配列。</param>
      <param name="fUnicode">Unicode でエンコードされている場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="lcid">新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の地理的なロケールと言語を指定します。</param>
      <param name="compareOptions">新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の比較オプションを指定します。</param>
      <param name="data">格納するデータ配列。</param>
      <param name="index">配列内の開始インデックス。</param>
      <param name="count">インデックスからコピーする文字数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="lcid">新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の地理的なロケールと言語を指定します。</param>
      <param name="compareOptions">新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の比較オプションを指定します。</param>
      <param name="data">格納するデータ配列。</param>
      <param name="index">配列内の開始インデックス。</param>
      <param name="count">インデックスからコピーする文字数。</param>
      <param name="fUnicode">Unicode でエンコードされている場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String)">
      <summary>文字列を指定して、<see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="data">格納する文字列。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32)">
      <summary>文字列とロケール ID 値を指定して、<see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="data">格納する文字列。</param>
      <param name="lcid">新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の地理的なロケールと言語を指定します。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32,System.Data.SqlTypes.SqlCompareOptions)">
      <summary>文字列、ロケール ID、および比較オプションの値を指定して、<see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="data">格納する文字列。</param>
      <param name="lcid">新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の地理的なロケールと言語を指定します。</param>
      <param name="compareOptions">新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の比較オプションを指定します。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Add(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>指定された 2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> 値を連結して、新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を作成します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>
        <paramref name="x" /> と <paramref name="y" /> の値を連結した <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort">
      <summary>文字のアルファベット値ではなく、文字の数値に基づいて並べ替えるように指定します。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort2">
      <summary>文字のアルファベット値ではなく、文字の数値に基づいて並べ替えるように指定します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Clone">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlString" /> オブジェクトのコピーを作成します。</summary>
      <returns>すべてのプロパティ値が元のオブジェクトと同じ新しい <see cref="T:System.Data.SqlTypes.SqlString" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CompareInfo">
      <summary>この <see cref="T:System.Globalization.CompareInfo" /> 構造体で実行する文字列比較の方法を定義する <see cref="T:System.Data.SqlTypes.SqlString" /> オブジェクトを取得します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の文字列比較を定義する <see langword="CompareInfo" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions)">
      <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値と等価の <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 列挙値を取得します。</summary>
      <param name="compareOptions">この <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 構造体の比較オプションを記述する <see cref="T:System.Data.SqlTypes.SqlString" /> 値。</param>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の <see langword="CompareOptions" /> に対応する <see langword="SqlCompareOptions" /> 値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Data.SqlTypes.SqlString)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlString" /> とこの <see cref="T:System.Data.SqlTypes.SqlString" /> インスタンスを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Object)">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlString" /> とこの <see cref="T:System.Object" /> オブジェクトを比較し、これらの相対値を示す値を返します。</summary>
      <param name="value">比較対象の <see cref="T:System.Object" />。</param>
      <returns>インスタンスとオブジェクトの相対値を示す符号付き数値。
  戻り値 
  条件 
  0 より小さい値 
  このインスタンスはオブジェクトよりも小さくなっています。  
  
  0 
  このインスタンスはオブジェクトと同じです。  
  
  0 より大きい値 
  このインスタンスはオブジェクトよりも大きくなっています。 
- または - 
オブジェクトが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Concat(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>指定した 2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を連結します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターの内容を表す新しく連結された値を格納している <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CultureInfo">
      <summary>この <see cref="T:System.Globalization.CultureInfo" /> オブジェクトのカルチャに関する情報を表す <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を取得します。</summary>
      <returns>カルチャの名前、書記体系、使用する暦など、この SqlString 構造体のカルチャに関する情報を記述し、カルチャ固有のオブジェクトにアクセスできるようにする <see cref="T:System.Globalization.CultureInfo" /> 構造体。カルチャ固有のオブジェクトは、日付の書式指定や文字列の並べ替えなどの共通の操作を行うためのメソッドを提供します。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> オペランドの論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>2 つの値が等しい場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。 いずれかのインスタンスが null の場合、<see langword="SqlString" /> は null になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Object)">
      <summary>指定したオブジェクト パラメーターを <see cref="P:System.Data.SqlTypes.SqlString.Value" /> オブジェクトの <see cref="T:System.Data.SqlTypes.SqlString" /> プロパティと比較します。</summary>
      <param name="value">比較されるオブジェクト。</param>
      <returns>オブジェクトが <see cref="T:System.Data.SqlTypes.SqlString" /> のインスタンスで、2 つが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetHashCode">
      <summary>インスタンスのハッシュ コードを取得します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetNonUnicodeBytes">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> の内容を ANSI 形式で格納しているバイト配列を取得します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> の内容を ANSI 形式で格納しているバイト配列。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetUnicodeBytes">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> の内容を Unicode 形式で格納しているバイト配列を取得します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> の内容を Unicode 形式で格納しているバイト配列。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XML スキーマ定義言語 (XSD) を返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指定した <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD を示す <see langword="string" /> 型の値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーターより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlString" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> オペランドの論理比較を実行して、最初のパラメーターが 2 番目のパラメーター以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlString" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreCase">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> の比較で、大文字と小文字を区別しないように指定します。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreKanaType">
      <summary>文字列比較でカナ型を無視するように指定します。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreNonSpace">
      <summary>文字列比較で、発音区別符など、空白以外の組み合わせ文字を無視するように指定します。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreWidth">
      <summary>文字列比較で、半角と全角の区別を無視するように指定します。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.IsNull">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体が null であるかどうかを示します。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlString.Value" /> が <see cref="F:System.Data.SqlTypes.SqlString.Null" /> の場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.LCID">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体の地理的なロケールと言語を指定します。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlString.Value" /> プロパティに格納されている文字列のロケール ID。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> オペランドの論理比較を実行して、最初のパラメーターが 2 番目のパラメーターより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlString" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> オペランドの論理比較を実行して、最初のオペランドが 2 番目のオペランド以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlString" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.NotEquals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> オペランドの論理比較を実行して、それらが等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlString" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.Null">
      <summary>
        <see cref="T:System.DBNull" /> 構造体のこのインスタンスに割り当てることができる <see cref="T:System.Data.SqlTypes.SqlString" /> を表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Addition(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>指定した 2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を連結します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターの内容を表す新しく連結された値を格納している <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Equality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> オペランドの論理比較を実行して、等しいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>2 つのインスタンスが等しい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しくない場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlString" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlString">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターの文字列形式を格納している新しい <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlString">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlByte" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターの文字列形式を格納している新しい <see cref="T:System.Data.SqlTypes.SqlByte" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.Data.SqlTypes.SqlString">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDateTime" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターの文字列形式を格納している新しい <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlString">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDecimal" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <param name="x">変換対象の <see langword="SqlDecimal" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターの文字列形式を格納している新しい <see langword="SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlString">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlDouble" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlDouble" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターの文字列形式を格納している新しい <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlString">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlGuid" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体。</param>
      <returns>指定した <see cref="T:System.Data.SqlTypes.SqlString" /> の文字列形式である値を持つ <see cref="T:System.Data.SqlTypes.SqlGuid" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlString">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt16" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlInt16" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターの文字列形式を格納している新しい <see cref="T:System.Data.SqlTypes.SqlInt16" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlString">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt32" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <param name="x">変換される SqlInt32 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターの文字列形式を格納している新しい <see cref="T:System.Data.SqlTypes.SqlInt32" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlString">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlInt64" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlInt64" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターの文字列形式を格納している新しい <see cref="T:System.Data.SqlTypes.SqlInt64" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlString">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlMoney" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlMoney" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターの文字列形式を格納している新しい <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlString">
      <summary>指定した <see cref="T:System.Data.SqlTypes.SqlSingle" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <param name="x">変換対象の <see cref="T:System.Data.SqlTypes.SqlSingle" /> 構造体。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターの文字列形式を格納している新しい <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlString)~System.String">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="x">変換される <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターの <see cref="P:System.Data.SqlTypes.SqlString.Value" /> プロパティと同じ内容を持つ <see langword="String" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> パラメーターの論理比較を実行して、最初のパラメーターが 2 番目のパラメーターより大きいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより大きい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlString" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> オペランドの論理比較を実行して、最初のパラメーターが 2 番目のパラメーター以上かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以上の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlString" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Implicit(System.String)~System.Data.SqlTypes.SqlString">
      <summary>
        <see cref="T:System.String" /> パラメーターを <see cref="T:System.Data.SqlTypes.SqlString" /> に変換します。</summary>
      <param name="x">変換される <see cref="T:System.String" />。</param>
      <returns>指定した <see langword="String" /> の値を格納している <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Inequality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> オペランドの論理比較を実行して、それらが等しくないかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>2 つのインスタンスが等しくない場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。2 つのインスタンスが等しい場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlString" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> オペランドの論理比較を実行して、最初のパラメーターが 2 番目のパラメーターより小さいかどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>最初のインスタンスが 2 番目のインスタンスより小さい場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlString" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>2 つの <see cref="T:System.Data.SqlTypes.SqlString" /> オペランドの論理比較を実行して、最初のオペランドが 2 番目のオペランド以下かどうかを確認します。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>最初のインスタンスが 2 番目のインスタンス以下の場合は <see cref="T:System.Data.SqlTypes.SqlBoolean" /> の <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 それ以外の場合は <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 <see cref="T:System.Data.SqlTypes.SqlString" /> のいずれかのインスタンスが null の場合、<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> の <see cref="T:System.Data.SqlTypes.SqlBoolean" /> は <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> になります。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.SqlCompareOptions">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> を他の <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体と比較する方法を表す 1 つ以上の <see cref="T:System.Data.SqlTypes.SqlString" /> 列挙値の組み合わせ。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlString" /> を他の <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体と比較する方法を指定する値。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlBoolean">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlBoolean" /> に変換します。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlString.Value" /> が 0 以外の場合は <see langword="true" />。0 の場合は <see langword="false" />。それ以外の場合は Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlByte">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlByte" /> に変換します。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 構造体で表される数値と等しい <see cref="T:System.Data.SqlTypes.SqlString" /> を持つ新しい <see langword="SqlByte" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDateTime">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDateTime" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlString" /> で表される日付値を格納している新しい <see langword="SqlDateTime" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDecimal">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDecimal" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlDecimal" /> の値を格納する新しい <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDouble">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlDouble" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlDouble" /> の数値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlGuid">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlGuid" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlGuid" /> 構造体で表される <see langword="Guid" /> である <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> を持つ新しい <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt16">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt16" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt16" /> の数値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt32">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt32" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt32" /> の数値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt64">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlInt64" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlInt64" /> の数値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlMoney">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlMoney" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlMoney" /> の数値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlSingle">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体を <see cref="T:System.Data.SqlTypes.SqlSingle" /> に変換します。</summary>
      <returns>この <see cref="T:System.Data.SqlTypes.SqlSingle" /> の数値と等しい新しい <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToString">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> オブジェクトを <see cref="T:System.String" /> に変換します。</summary>
      <returns>この <see cref="T:System.String" /> 構造体と同じ値を持つ <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.Value">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlString" /> 構造体に格納されている文字列を取得します。 このプロパティは読み取り専用です。</summary>
      <returns>格納されている文字列。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">文字列の値が <see cref="F:System.Data.SqlTypes.SqlString.Null" /> です。</exception>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTruncateException">
      <summary>
        <see cref="N:System.Data.SqlTypes" /> 構造体に値を設定するとその値が切り捨てられる場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.Data.SqlTypes.SqlTruncateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> に対する参照を使用して、<see cref="T:System.Exception" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="e">内部 <see cref="T:System.Exception" /> への参照。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTypeException">
      <summary>
        <see cref="N:System.Data.SqlTypes" /> の基本例外クラス。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypeException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Data.SqlTypes.SqlTypeException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="si">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="sc">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.Data.SqlTypes.SqlTypeException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Data.SqlTypes.SqlTypeException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
      <param name="e">現在の例外の原因となった例外。 <c>innerException</c> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlXml">
      <summary>サーバーに格納する、またはサーバーから取得する XML データを表します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor">
      <summary>新しい <see cref="T:System.Data.SqlTypes.SqlXml" /> のインスタンスを作成します。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.IO.Stream)">
      <summary>新しい <see cref="T:System.Data.SqlTypes.SqlXml" /> インスタンスを作成します。<see cref="T:System.IO.Stream" /> から派生したインスタンスを引数に受け取り、XML 値を生成します。</summary>
      <param name="value">
        <see cref="T:System.IO.Stream" /> から派生したインスタンス (<see cref="T:System.IO.FileStream" /> など)。このインスタンスから、<see cref="T:System.Data.SqlTypes.SqlXml" /> インスタンスの Xml コンテンツが読み込まれます。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.Xml.XmlReader)">
      <summary>新しい <see cref="T:System.Data.SqlTypes.SqlXml" /> インスタンスを作成し、指定された <see cref="T:System.Xml.XmlReader" /> の内容と関連付けます。</summary>
      <param name="value">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの値として使用する、<see cref="T:System.Data.SqlTypes.SqlXml" /> の派生クラスのインスタンス。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.CreateReader">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlXml" /> として表現された、<see cref="T:System.Xml.XmlReader" /> の XML コンテンツの値を取得します。</summary>
      <returns>XML コンテンツを格納している、<see cref="T:System.Xml.XmlReader" /> から派生したインスタンス。 実際の型は、サーバー上で情報が内部的にどのように表現されているかによって異なる場合があります。たとえば、戻り値は <see cref="T:System.Xml.XmlTextReader" /> になる場合もあります。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <see cref="T:System.Data.SqlTypes.SqlXml" /> の null インスタンスに対し、このプロパティにアクセスしようとしました。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XML スキーマ定義言語 (XSD) を返します。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指定した <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD を示す文字列。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.IsNull">
      <summary>このインスタンスが null の <see cref="T:System.Data.SqlTypes.SqlXml" /> 値を表すかどうかを示します。</summary>
      <returns>
        <see langword="true" /> が null の場合は <see langword="Value" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Null">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlXml" /> 型の null インスタンスを表します。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlXml" /> 型の Null インスタンス。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />」をご覧ください。</summary>
      <returns>
        <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> メソッドによって生成され <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> メソッドによって処理されるオブジェクトの XML 表現を記述する <see cref="T:System.Xml.Schema.XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />」をご覧ください。</summary>
      <param name="r">XmlReader。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />」をご覧ください。</summary>
      <param name="writer">XmlWriter。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Value">
      <summary>この <see cref="T:System.Data.SqlTypes.SqlXml" /> インスタンスが保持する XML コンテンツの文字列形式を取得します。</summary>
      <returns>XML コンテンツの文字列形式。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.StorageState">
      <summary>
        <see cref="T:System.Data.SqlTypes.StorageState" /> 列挙体は、スタンドアロン コンポーネントとしてではなく、他のクラスによる標準機能の派生元の列挙体として使用するためのものです。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.Buffer">
      <summary>バッファー サイズ。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.Stream">
      <summary>ストリーム。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.UnmanagedBuffer">
      <summary>アンマネージ バッファー。</summary>
    </member>
    <member name="T:System.Data.StateChangeEventArgs">
      <summary>.NET Framework データ プロバイダーの状態変化イベントにデータを提供します。</summary>
    </member>
    <member name="M:System.Data.StateChangeEventArgs.#ctor(System.Data.ConnectionState,System.Data.ConnectionState)">
      <summary>オブジェクトの元の状態と現在の状態が指定されている場合は、<see cref="T:System.Data.StateChangeEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="originalState">
        <see cref="T:System.Data.ConnectionState" /> 値のいずれか 1 つ。</param>
      <param name="currentState">
        <see cref="T:System.Data.ConnectionState" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="P:System.Data.StateChangeEventArgs.CurrentState">
      <summary>接続の新しい状態を取得します。 イベントが発生したときは、接続オブジェクトが既に新しい状態になっています。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.Data.StateChangeEventArgs.OriginalState">
      <summary>接続の元の状態を取得します。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 値のいずれか。</returns>
    </member>
    <member name="T:System.Data.StateChangeEventHandler">
      <summary>
        <see cref="E:System.Data.Common.DbConnection.StateChange" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.Data.StateChangeEventArgs" />。</param>
    </member>
    <member name="T:System.Data.StatementCompletedEventArgs">
      <summary>
        <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> イベントの追加情報を提供します。</summary>
    </member>
    <member name="M:System.Data.StatementCompletedEventArgs.#ctor(System.Int32)">
      <summary>
        <see cref="T:System.Data.StatementCompletedEventArgs" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="recordCount">
        <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> イベントが発生する原因となったステートメントの影響を受けた行の数を示します。</param>
    </member>
    <member name="P:System.Data.StatementCompletedEventArgs.RecordCount">
      <summary>
        <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> イベントが発生する原因となったステートメントの影響を受けた行の数を示します。</summary>
      <returns>影響を受けた行の数。</returns>
    </member>
    <member name="T:System.Data.StatementCompletedEventHandler">
      <summary>
        <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> イベントのイベント ハンドラーのデリゲート型。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントのデータ。</param>
    </member>
    <member name="T:System.Data.StatementType">
      <summary>
        <see cref="T:System.Data.OleDb.OleDbRowUpdatedEventArgs" />、<see cref="T:System.Data.OleDb.OleDbRowUpdatingEventArgs" />、<see cref="T:System.Data.SqlClient.SqlRowUpdatedEventArgs" />、または <see cref="T:System.Data.SqlClient.SqlRowUpdatingEventArgs" /> の各クラスが使用する SQL クエリの種類を指定します。</summary>
    </member>
    <member name="F:System.Data.StatementType.Batch">
      <summary>バッチ ステートメントである SQL クエリ。</summary>
    </member>
    <member name="F:System.Data.StatementType.Delete">
      <summary>DELETE ステートメントである SQL クエリ。</summary>
    </member>
    <member name="F:System.Data.StatementType.Insert">
      <summary>INSERT ステートメントである SQL クエリ。</summary>
    </member>
    <member name="F:System.Data.StatementType.Select">
      <summary>SELECT ステートメントである SQL クエリ。</summary>
    </member>
    <member name="F:System.Data.StatementType.Update">
      <summary>UPDATE ステートメントである SQL クエリ。</summary>
    </member>
    <member name="T:System.Data.StrongTypingException">
      <summary>ユーザーが <see langword="DBNull" /> 値にアクセスした場合に厳密に型指定された <see cref="T:System.Data.DataSet" /> によってスローされる例外。</summary>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor">
      <summary>
        <see cref="T:System.Data.StrongTypingException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化情報とストリーム コンテキストを指定して、<see cref="T:System.Data.StrongTypingException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 構造体。</param>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.String)">
      <summary>文字列を指定して、<see cref="T:System.Data.StrongTypingException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.String,System.Exception)">
      <summary>指定した文字列と内部例外を使用して、<see cref="T:System.Data.StrongTypingException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">例外がスローされたときに表示する文字列。</param>
      <param name="innerException">内部例外への参照。</param>
    </member>
    <member name="T:System.Data.SyntaxErrorException">
      <summary>
        <see cref="P:System.Data.DataColumn.Expression" /> の <see cref="T:System.Data.DataColumn" /> プロパティが構文エラーを含んでいる場合にスローされる例外を表します。</summary>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor">
      <summary>
        <see cref="T:System.Data.SyntaxErrorException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.SyntaxErrorException" /> と <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を使用して、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">特定のシリアル化ストリームの転送元と転送先。</param>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.String)">
      <summary>文字列を指定して、<see cref="T:System.Data.SyntaxErrorException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Data.SyntaxErrorException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.TypedTableBase`1">
      <summary>この型は、Visual Studio および XSD.exe .NET Framework ツールによって、型指定された <see cref="T:System.Data.DataTable" /> オブジェクト生成の基底クラスとして使用されます。コードから直接使用するためのものではありません。</summary>
      <typeparam name="T">テーブルにより表されるソース シーケンス内のオブジェクトの型。通常は <see cref="T:System.Data.DataRow" />。</typeparam>
    </member>
    <member name="M:System.Data.TypedTableBase`1.#ctor">
      <summary>新しい <see cref="T:System.Data.TypedTableBase`1" /> を初期化します。 このメソッドは、Visual Studio と XSD.exe .NET Framework ツールによって、型指定された <see cref="T:System.Data.DataTable" /> オブジェクトの生成をサポートします。 この型は、コードで直接使用するためのものではありません。</summary>
    </member>
    <member name="M:System.Data.TypedTableBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新しい <see cref="T:System.Data.TypedTableBase`1" /> を初期化します。 このメソッドは、Visual Studio と XSD.exe .NET Framework ツールによって、型指定された <see cref="T:System.Data.DataTable" /> オブジェクトの生成をサポートします。 このメソッドはコードから直接使用するためのものではありません。</summary>
      <param name="info">オブジェクトを構築するためのデータを含んでいる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">逆シリアル化されるオブジェクトのストリーミング コンテキスト。</param>
    </member>
    <member name="M:System.Data.TypedTableBase`1.Cast``1">
      <summary>
        <see cref="T:System.Data.TypedTableBase`1" /> の要素を指定した型に変換します。 このメソッドは、Visual Studio と XSD.exe .NET Framework ツールによって、型指定された <see cref="T:System.Data.DataTable" /> オブジェクトの生成をサポートします。 このメソッドはコードから直接使用するためのものではありません。</summary>
      <typeparam name="TResult" />
      <returns>指定した型に変換されたソース シーケンスの各要素が格納されている <see cref="T:System.Data.EnumerableRowCollection" />。</returns>
    </member>
    <member name="M:System.Data.TypedTableBase`1.GetEnumerator">
      <summary>型指定された <see cref="T:System.Data.DataRow" /> の列挙子を返します。 このメソッドは、Visual Studio と XSD.exe .NET Framework ツールによって、型指定された <see cref="T:System.Data.DataTable" /> オブジェクトの生成をサポートします。 このメソッドはコードから直接使用するためのものではありません。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> インターフェイスを実装するオブジェクト。</returns>
    </member>
    <member name="M:System.Data.TypedTableBase`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>型指定された <see cref="T:System.Data.DataRow" /> の列挙子を返します。 このメソッドは、Visual Studio と XSD.exe .NET Framework ツールによって、型指定された <see cref="T:System.Data.DataTable" /> オブジェクトの生成をサポートします。 このメソッドはコードから直接使用するためのものではありません。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> インターフェイスを実装するオブジェクト。</returns>
    </member>
    <member name="T:System.Data.TypedTableBaseExtensions">
      <summary>
        <see cref="T:System.Data.TypedTableBase`1" /> クラスの拡張メソッドを格納します。</summary>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.AsEnumerable``1(System.Data.TypedTableBase{``0})">
      <summary>
        <see cref="T:System.Data.TypedTableBase`1" /> のデータ行要素を列挙し、<see cref="T:System.Data.EnumerableRowCollection`1" /> オブジェクトを返します。ここで、ジェネリック パラメーター <paramref name="T" /> は <see cref="T:System.Data.DataRow" /> です。 このオブジェクトは、LINQ 式またはメソッド クエリで使用できます。</summary>
      <param name="source">列挙可能にする対象のソース <see cref="T:System.Data.TypedTableBase`1" />。</param>
      <typeparam name="TRow">元の要素の変換後の型。</typeparam>
      <returns>
        <see cref="T:System.Data.EnumerableRowCollection`1" /> オブジェクト。ここで、ジェネリック パラメーター <paramref name="T" /> は <see cref="T:System.Data.DataRow" /> です。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.ElementAtOrDefault``1(System.Data.TypedTableBase{``0},System.Int32)">
      <summary>シーケンス内の指定された行にある要素を返します。行が範囲外の場合は既定値を返します。</summary>
      <param name="source">要素が返される列挙可能オブジェクト。</param>
      <param name="index">取得する要素の、0 から始まるインデックス。</param>
      <typeparam name="TRow">要素または行の型。</typeparam>
      <returns>シーケンス内の指定された行位置にある要素。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Data.TypedTableBase`1" /> の行を指定したキーに従って昇順に並べ替えます。</summary>
      <param name="source">順序付けする <see cref="T:System.Data.TypedTableBase`1" /> 要素が格納されている <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> の行要素の型。通常は、<see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <returns>要素が指定したキーで並べ替えられている <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
        <see cref="T:System.Data.TypedTableBase`1" /> の行を指定したキーと比較子に従って昇順に並べ替えます。</summary>
      <param name="source">順序付けする <see cref="T:System.Data.TypedTableBase`1" /> 要素が格納されている <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> の行要素の型。通常は、<see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <returns>要素が指定したキーと比較子で並べ替えられている <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Data.TypedTableBase`1" /> の行を指定したキーに従って降順に並べ替えます。</summary>
      <param name="source">順序付けする <see cref="T:System.Data.TypedTableBase`1" /> 要素が格納されている <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> の行要素の型。通常は、<see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <returns>要素が指定したキーで並べ替えられている <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
        <see cref="T:System.Data.TypedTableBase`1" /> の行を指定したキーと比較子に従って降順に並べ替えます。</summary>
      <param name="source">順序付けする <see cref="T:System.Data.TypedTableBase`1" /> 要素が格納されている <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> の行要素の型。通常は、<see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <returns>要素が指定したキーと比較子で並べ替えられている <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.Select``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Data.TypedTableBase`1" /> の各要素を新しいフォームに射影します。</summary>
      <param name="source">変換関数を呼び出す <see cref="T:System.Data.TypedTableBase`1" /> 要素を格納する <see cref="T:System.Data.DataRow" />。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TRow">
        <paramref name="source" />、<see cref="T:System.Data.DataRow" /> の行要素の型。</typeparam>
      <typeparam name="S" />
      <returns>
        <paramref name="source" /> の各要素に対して変換関数を呼び出した結果として得られる要素を含む <see cref="T:System.Data.EnumerableRowCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.Where``1(System.Data.TypedTableBase{``0},System.Func{``0,System.Boolean})">
      <summary>指定した述語に基づいて行のシーケンスをフィルター処理します。</summary>
      <param name="source">フィルター処理する <see cref="T:System.Data.TypedTableBase`1" /> 要素が格納されている <see cref="T:System.Data.DataRow" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TRow">
        <paramref name="source" />、<see cref="T:System.Data.DataRow" /> の行要素の型。</typeparam>
      <returns>条件を満たす、入力シーケンスの行を含む <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />。</returns>
    </member>
    <member name="T:System.Data.UniqueConstraint">
      <summary>すべての値が一意である必要がある列のセットに対する制限を表します。</summary>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn)">
      <summary>
        <see cref="T:System.Data.UniqueConstraint" /> を指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="column">制約する <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn,System.Boolean)">
      <summary>制約する <see cref="T:System.Data.UniqueConstraint" /> と、その制約が主キーかどうかを示す値を指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="column">制約する <see cref="T:System.Data.DataColumn" />。</param>
      <param name="isPrimaryKey">制約が主キーであることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn[])">
      <summary>
        <see cref="T:System.Data.UniqueConstraint" /> オブジェクトの配列を指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="columns">制約する <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn[],System.Boolean)">
      <summary>制約する <see cref="T:System.Data.UniqueConstraint" /> オブジェクトの配列と、その制約が主キーかどうかを示す値を指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="columns">制約する <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</param>
      <param name="isPrimaryKey">制約が主キーであることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn)">
      <summary>名前と <see cref="T:System.Data.UniqueConstraint" /> を指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">制約の名前。</param>
      <param name="column">制約する <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn,System.Boolean)">
      <summary>名前、制約する <see cref="T:System.Data.UniqueConstraint" />、およびその制約が主キーかどうかを示す値を指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">制約の名前。</param>
      <param name="column">制約する <see cref="T:System.Data.DataColumn" />。</param>
      <param name="isPrimaryKey">制約が主キーであることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn[])">
      <summary>名前と <see cref="T:System.Data.UniqueConstraint" /> オブジェクトの配列を指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">制約の名前。</param>
      <param name="columns">制約する <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn[],System.Boolean)">
      <summary>名前、制約する <see cref="T:System.Data.UniqueConstraint" /> オブジェクトの配列、およびその制約が主キーかどうかを示す値を指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">制約の名前。</param>
      <param name="columns">制約する <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</param>
      <param name="isPrimaryKey">制約が主キーであることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.String[],System.Boolean)">
      <summary>名前、制約する <see cref="T:System.Data.UniqueConstraint" /> オブジェクトの配列、およびその制約が主キーかどうかを示す値を指定して、<see cref="T:System.Data.DataColumn" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">制約の名前。</param>
      <param name="columnNames">制約する <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</param>
      <param name="isPrimaryKey">制約が主キーであることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Data.UniqueConstraint.Columns">
      <summary>この制約が影響を与える列の配列を取得します。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</returns>
    </member>
    <member name="M:System.Data.UniqueConstraint.Equals(System.Object)">
      <summary>この制約と 2 つ目の制約を比較して、2 つの制約が等しいかどうかを判断します。</summary>
      <param name="key2">この <see cref="T:System.Data.UniqueConstraint" /> と比較するオブジェクト。</param>
      <returns>2 つの制約が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.UniqueConstraint.GetHashCode">
      <summary>
        <see cref="T:System.Data.UniqueConstraint" /> オブジェクトのこのインスタンスのハッシュ コードを取得します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.Data.UniqueConstraint.IsPrimaryKey">
      <summary>この制約が主キーに適用されるかどうかを示す値を取得します。</summary>
      <returns>この制約が主キーに適用される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.UniqueConstraint.Table">
      <summary>制約が属するテーブルを取得します。</summary>
      <returns>制約が属する <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="T:System.Data.UpdateRowSource">
      <summary>更新する行にクエリ コマンドの結果を適用する方法を指定します。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.Both">
      <summary>出力パラメーターと最初に返された行の両方が、<see cref="T:System.Data.DataSet" /> 内の変更された行に割り当てられます。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.FirstReturnedRecord">
      <summary>最初に返された行のデータが、<see cref="T:System.Data.DataSet" /> 内の変更された行に割り当てられます。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.None">
      <summary>返されたパラメーターまたは行はすべて無視されます。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.OutputParameters">
      <summary>出力パラメーターが <see cref="T:System.Data.DataSet" /> 内の変更された行に割り当てられます。</summary>
    </member>
    <member name="T:System.Data.UpdateStatus">
      <summary>
        <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 中に現在の行と残りの行に対して実行するアクションを指定します。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.Continue">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" /> は行の処理を続行します。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.ErrorsOccurred">
      <summary>イベント ハンドラーは、更新をエラーとして処理する必要があることを報告します。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.SkipAllRemainingRows">
      <summary>現在の行と残りのすべての行は更新されません。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.SkipCurrentRow">
      <summary>現在の行は更新されません。</summary>
    </member>
    <member name="T:System.Data.VersionNotFoundException">
      <summary>削除された <see cref="T:System.Data.DataRow" /> のバージョンを返そうとした場合にスローされる例外を表します。</summary>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor">
      <summary>
        <see cref="T:System.Data.VersionNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化情報を指定して、<see cref="T:System.Data.VersionNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">指定したシリアル化ストリームの転送元と転送先の説明。</param>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.String)">
      <summary>文字列を指定して、<see cref="T:System.Data.VersionNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">例外がスローされたときに表示する文字列。</param>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Data.VersionNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<see langword="Nothing" />)。</param>
    </member>
    <member name="T:System.Data.XmlReadMode">
      <summary>XML データとリレーショナル スキーマを <see cref="T:System.Data.DataSet" /> に読み込む方法を指定します。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.Auto">
      <summary>既定の読み取りモード。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.DiffGram">
      <summary>DiffGram を読み込んで、変更を DiffGram から <see cref="T:System.Data.DataSet" /> に適用します。 セマンティクスは <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 操作の場合と同じです。 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 操作の場合と同様に、<see cref="P:System.Data.DataRow.RowState" /> 値が保存されます。 DiffGram による <see cref="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" /> への入力は、<see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" /> からの出力を DiffGram として使用する方法によってだけ取得する必要があります。
ターゲットの <see cref="T:System.Data.DataSet" /> は、DiffGram として <see cref="Overload:System.Data.DataSet.WriteXml" /> が呼び出される <see cref="T:System.Data.DataSet" /> と同じスキーマを持つ必要があります。 それ以外の場合、DiffGram のマージ操作が失敗し、例外がスローされます。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.Fragment">
      <summary>SQL Server のインスタンスに対して、XML フラグメント (FOR XML クエリを実行して生成されたものなど) を読み込みます。 <see cref="T:System.Data.XmlReadMode" /> が <see langword="Fragment" /> に設定されている場合は、既定の名前空間がインライン スキーマとして読み込まれます。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.IgnoreSchema">
      <summary>インライン スキーマを無視し、データを既存の <see cref="T:System.Data.DataSet" /> スキーマに読み取ります。 既存のスキーマと一致しないデータがある場合、そのデータ (<see cref="T:System.Data.DataSet" /> 用に定義された、異なる名前空間からのデータを含む) は破棄されます。 データが DiffGram の場合、<see langword="IgnoreSchema" /> は <see langword="DiffGram" /> と同じ機能を果たします。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.InferSchema">
      <summary>インライン スキーマを無視し、データからスキーマを推論し、データを読み込みます。 <see cref="T:System.Data.DataSet" /> が既にスキーマを格納している場合は、新しいテーブルを追加するか、既存のテーブルに新しい列を追加して、現在のスキーマを拡張します。 推論されたテーブルが既に存在するが名前空間が異なる場合、または推論された列が既存の列と矛盾する場合は例外がスローされます。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.InferTypedSchema">
      <summary>インライン スキーマを無視し、厳密に型指定されたスキーマをデータから推論し、データを読み込みます。 データから型を推測できない場合は、文字列データとして解釈されます。 <see cref="T:System.Data.DataSet" /> が既にスキーマを格納している場合は、新しいテーブルを追加するか、既存のテーブルに新しい列を追加して、現在のスキーマを拡張します。 推論されたテーブルが既に存在するが名前空間が異なる場合、または推論された列が既存の列と矛盾する場合は例外がスローされます。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.ReadSchema">
      <summary>インライン スキーマを読み込み、データを読み込みます。 <see cref="T:System.Data.DataSet" /> が既にスキーマを格納している場合は、新しいテーブルをスキーマに追加できますが、インライン スキーマ内のテーブルが既に <see cref="T:System.Data.DataSet" /> 内に存在する場合は例外がスローされます。</summary>
    </member>
    <member name="T:System.Data.XmlWriteMode">
      <summary>XML データとリレーショナル スキーマを <see cref="T:System.Data.DataSet" /> から書き込む方法を指定します。</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.DiffGram">
      <summary>元の値と現在の値を含め、<see cref="T:System.Data.DataSet" /> 全体を DiffGram として書き込みます。 変更された値だけを格納する DiffGram を生成するには、<see cref="M:System.Data.DataSet.GetChanges" /> を呼び出し、返された <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" /> で <see cref="T:System.Data.DataSet" /> を DiffGram として呼び出します。</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.IgnoreSchema">
      <summary>XSD スキーマを使用せずに <see cref="T:System.Data.DataSet" /> の現在の内容を XML データとして書き込みます。 <see cref="T:System.Data.DataSet" /> にデータが書き込まれていない場合は、何も書き込まれません。</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.WriteSchema">
      <summary>リレーショナル構造をインライン XSD スキーマとして使用して、<see cref="T:System.Data.DataSet" /> の現在の内容を XML データとして書き込みます。 <see cref="T:System.Data.DataSet" /> がスキーマだけを持ち、データを持っていない場合は、インライン スキーマだけが書き込まれます。 <see cref="T:System.Data.DataSet" /> が現在のスキーマを持っていない場合は、何も書き込まれません。</summary>
    </member>
    <member name="T:System.Xml.XmlDataDocument">
      <summary>リレーショナル <see cref="T:System.Data.DataSet" /> を通じて、構造化データを格納、取得、および操作できるようにします。</summary>
    </member>
    <member name="M:System.Xml.XmlDataDocument.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlDataDocument" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)">
      <summary>
        <see cref="T:System.Xml.XmlDataDocument" /> を指定して、<see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataset">
        <see langword="DataSet" /> に読み込む <see langword="XmlDataDocument" />。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CloneNode(System.Boolean)">
      <summary>現在のノードの複製を作成します。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <returns>クローンとして作成されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)">
      <summary>指定した <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" />、<see cref="P:System.Xml.XmlNode.NamespaceURI" /> を使用して、要素を作成します。</summary>
      <param name="prefix">新しい要素のプレフィックス。 String.Empty または <see langword="null" /> の場合、プレフィックスはありません。</param>
      <param name="localName">新しい要素のローカル名。</param>
      <param name="namespaceURI">新しい要素の名前空間 URI (Uniform Resource Identifier)。 String.Empty または <see langword="null" /> の場合、namespaceURI はありません。</param>
      <returns>新しい <see cref="T:System.Xml.XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateEntityReference(System.String)">
      <summary>指定した名前を使用して、<see cref="T:System.Xml.XmlEntityReference" /> を作成します。</summary>
      <param name="name">エンティティ参照の名前。</param>
      <returns>指定した名前を持つ <see cref="T:System.Xml.XmlEntityReference" />。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドを呼び出しています。</exception>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary>このドキュメント内を移動するための、新しい <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトを作成します。 <see langword="XPathNavigator" /> は、<paramref name="node" /> パラメーターに指定されたノード上に配置されています。</summary>
      <param name="node">ナビゲーターを最初に配置する <see cref="T:System.Xml.XmlNode" />。</param>
      <returns>XML ドキュメントに移動するために使用される <see langword="XPathNavigator" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDataDocument.DataSet">
      <summary>
        <see langword="XmlDataDocument" /> のデータのリレーショナル表現を提供する <see cref="T:System.Data.DataSet" /> を取得します。</summary>
      <returns>リレーショナル モデルを使用して <see langword="DataSet" /> のデータにアクセスするために使用できる <see langword="XmlDataDocument" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementById(System.String)">
      <summary>指定した ID の <see cref="T:System.Xml.XmlElement" /> を取得します。 このメソッドは <see cref="T:System.Xml.XmlDataDocument" /> クラスでサポートされていません。 このメソッドを呼び出すと、例外がスローされます。</summary>
      <param name="elemId">一致する属性 ID。</param>
      <returns>指定した ID を持つ <see cref="T:System.Xml.XmlElement" />。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドを呼び出しています。</exception>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)">
      <summary>指定した <see cref="T:System.Xml.XmlElement" /> に関連付けられている <see cref="T:System.Data.DataRow" /> を取得します。</summary>
      <param name="r">取得する対象の、関連付けられた <see langword="DataRow" /> を持つ <see langword="XmlElement" />。</param>
      <returns>指定した <see langword="XmlElement" /> の表現を格納している <see langword="DataRow" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementsByTagName(System.String)">
      <summary>指定した <see cref="P:System.Xml.XmlDocument.Name" /> に一致するすべての子孫の要素のリストを格納している <see cref="T:System.Xml.XmlNodeList" /> を返します。</summary>
      <param name="name">一致する限定名。 一致するノードの <see cref="P:System.Xml.XmlDocument.Name" /> プロパティに一致します。 特殊値の "*" は、すべてのタグに一致します。</param>
      <returns>一致しているすべてのノードのリストを格納している <see cref="T:System.Xml.XmlNodeList" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)">
      <summary>指定した <see cref="T:System.Data.DataRow" /> に関連付けられている <see cref="T:System.Xml.XmlElement" /> を取得します。</summary>
      <param name="e">取得する対象の、関連付けられた <see langword="XmlElement" /> を持つ <see langword="DataRow" />。</param>
      <returns>
        <see langword="DataRow" /> の表現を格納している <see langword="XmlElement" />。<see langword="null" /> に関連付けられた <see langword="DataRow" /> がない場合は <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.IO.Stream)">
      <summary>指定したストリームから <see langword="XmlDataDocument" /> を読み込みます。</summary>
      <param name="inStream">読み込む XML ドキュメントが含まれているストリーム。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.IO.TextReader)">
      <summary>指定した <see cref="T:System.IO.TextReader" /> から <see langword="XmlDataDocument" /> を読み込みます。</summary>
      <param name="txtReader">XML データをドキュメントに送るために使用する <see langword="TextReader" />。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.String)">
      <summary>指定した URL を使用して、<see langword="XmlDataDocument" /> を読み込みます。</summary>
      <param name="filename">読み込む XML ドキュメントを格納しているファイルの URL。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)">
      <summary>指定した <see cref="T:System.Xml.XmlReader" /> から <see langword="XmlDataDocument" /> を読み込みます。</summary>
      <param name="reader">読み込む XML ドキュメントを格納している <see langword="XmlReader" />。</param>
      <exception cref="T:System.NotSupportedException">読み込まれている XML にエンティティ参照が含まれており、リーダーがエンティティを解決できません。</exception>
    </member>
  </members>
</doc>
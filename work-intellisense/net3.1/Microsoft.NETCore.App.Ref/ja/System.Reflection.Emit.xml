<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Emit</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.AssemblyBuilder">
      <summary>動的アセンブリを定義し、表します。</summary>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.CodeBase">
      <summary>
        <see cref="T:System.Reflection.AssemblyName" /> オブジェクトの中など、初めに指定されたアセンブリの場所を取得します。</summary>
      <returns>初めに指定されたとおりのアセンブリの場所。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary>指定した名前とアクセス権がある動的アセンブリを定義します。</summary>
      <param name="name">アセンブリの名前。</param>
      <param name="access">アセンブリのアクセス権。</param>
      <returns>新しいアセンブリを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
      <summary>指定した名前、アクセス権、および属性がある新しいアセンブリを定義します。</summary>
      <param name="name">アセンブリの名前。</param>
      <param name="access">アセンブリのアクセス権。</param>
      <param name="assemblyAttributes">アセンブリの属性を含むコレクション。</param>
      <returns>新しいアセンブリを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)">
      <summary>このアセンブリの中に、指定された一時動的モジュールを定義します。</summary>
      <param name="name">動的アセンブリの名前。</param>
      <returns>定義された動的モジュールを表す <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が空白文字から始まっています。

または -
<paramref name="name" /> の長さが 0 です。

または -
<paramref name="name" /> の長さがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
      <exception cref="T:System.ExecutionEngineException">既定のシンボル ライターのアセンブリを読み込めません。

または -

既定のシンボル ライターのインターフェイスを実装する型が見つかりません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint">
      <summary>このアセンブリのエントリ ポイントを返します。</summary>
      <returns>このアセンブリのエントリ ポイント。</returns>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <param name="obj">対象のインスタンスと比較する対象のオブジェクト、または <see langword="null" />。</param>
      <returns>
        <see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.FullName">
      <summary>現在の動的アセンブリの表示名を取得します。</summary>
      <returns>動的アセンブリの表示名。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)">
      <summary>現在の <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> に適用されたカスタム属性をすべて返します。</summary>
      <param name="inherit">この型のオブジェクトでは、この引数は無視されます。</param>
      <returns>カスタム属性を含む配列。属性がない場合、配列は空です。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>現在の <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> に適用されており、指定された属性の型から派生するすべてのカスタム属性を返します。</summary>
      <param name="attributeType">属性の派生元となる基本型。</param>
      <param name="inherit">この型のオブジェクトでは、この引数は無視されます。</param>
      <returns>
        <paramref name="attributeType" /> の任意のレベルから派生したカスタム属性を含む配列。そのような属性がない場合、配列は空です。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" />は、ランタイムによって提供された <see cref="T:System.Type" /> オブジェクトではありません。 たとえば、<paramref name="attributeType" /> は <see cref="T:System.Reflection.Emit.TypeBuilder" /> オブジェクトです。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData">
      <summary>現在の <see cref="T:System.Reflection.CustomAttributeData" /> に適用されている属性に関する情報を含む <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> オブジェクトを返します。</summary>
      <returns>現在のモジュールに適用されている属性に関するデータを表す <see cref="T:System.Reflection.CustomAttributeData" /> オブジェクトのジェネリック リスト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)">
      <summary>指定された名前の動的モジュールを返します。</summary>
      <param name="name">要求された動的モジュールの名前。</param>
      <returns>要求された動的モジュールを表す ModuleBuilder オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の長さが 0 です。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes">
      <summary>このアセンブリで定義されているエクスポートされた型を取得します。</summary>
      <returns>このアセンブリで定義されているエクスポートされた型を格納している <see cref="T:System.Type" /> の配列。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは実装されていません。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)">
      <summary>このアセンブリのマニフェストのファイル テーブル内の指定されたファイルの <see cref="T:System.IO.FileStream" /> を取得します。</summary>
      <param name="name">指定されたファイルの名前。</param>
      <returns>指定されたファイルの <see cref="T:System.IO.FileStream" />。ファイルが見つからない場合は、<see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)">
      <summary>リソース モジュールを含めるかどうかを指定して、アセンブリ マニフェストのファイル テーブルのファイルを取得します。</summary>
      <param name="getResourceModules">リソース モジュールを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>
        <see cref="T:System.IO.FileStream" /> オブジェクトの配列。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetLoadedModules(System.Boolean)">
      <summary>このアセンブリの一部であるすべての読み込み済みモジュールを返し、また必要に応じて、リソース モジュールを含めます。</summary>
      <param name="getResourceModules">リソース モジュールを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>このアセンブリの一部である読み込み済みモジュール。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)">
      <summary>指定されたリソースが永続化された方法に関する情報を返します。</summary>
      <param name="resourceName">リソースの名前。</param>
      <returns>リソースのトポロジに関する情報が設定された <see cref="T:System.Reflection.ManifestResourceInfo" />。リソースが見つからない場合は <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames">
      <summary>このアセンブリから、指定されたマニフェスト リソースを読み込みます。</summary>
      <returns>すべてのリソースの名前を格納している <see langword="String" /> 型配列。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは動的アセンブリではサポートされていません。 マニフェスト リソース名を取得するには、<see cref="M:System.Reflection.Assembly.GetManifestResourceNames" /> を使用します。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)">
      <summary>このアセンブリから、指定されたマニフェスト リソースを読み込みます。</summary>
      <param name="name">要求されているマニフェスト リソースの名前。</param>
      <returns>このマニフェスト リソースを表す <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)">
      <summary>このアセンブリから、指定された型の名前空間によってスコープが指定されている、指定されたマニフェスト リソースを読み込みます。</summary>
      <param name="type">マニフェスト リソース名のスコープを指定するために名前空間を使用する型。</param>
      <param name="name">要求されているマニフェスト リソースの名前。</param>
      <returns>このマニフェスト リソースを表す <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModule(System.String)">
      <summary>このアセンブリから指定されたモジュールを取得します。</summary>
      <param name="name">要求されたモジュールの名前。</param>
      <returns>要求されたモジュール。モジュールが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModules(System.Boolean)">
      <summary>このアセンブリの一部であるすべてのモジュールを取得し、また必要に応じて、リソース モジュールを含めます。</summary>
      <param name="getResourceModules">リソース モジュールを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>このアセンブリの一部であるモジュール。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)">
      <summary>現在の動的アセンブリが作成された時に指定した <see cref="T:System.Reflection.AssemblyName" /> を取得し、指定されたとおりにコード ベースを設定します。</summary>
      <param name="copiedName">シャドウ コピーの後でコード ベースをアセンブリの場所に設定する場合は <see langword="true" />。コード ベースを元の場所に設定する場合は <see langword="false" />。</param>
      <returns>動的アセンブリの名前。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies">
      <summary>この <see cref="T:System.Reflection.AssemblyName" /> で参照されるアセンブリの <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> オブジェクトの不完全なリストを取得します。</summary>
      <returns>参照アセンブリのアセンブリ名の配列。 この配列は完全な一覧ではありません。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary>指定されたカルチャ設定のサテライト アセンブリを取得します。</summary>
      <param name="culture">指定されたカルチャ。</param>
      <returns>指定されたサテライト アセンブリ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">アセンブリが見つかりません。</exception>
      <exception cref="T:System.IO.FileLoadException">ファイル名が一致するサテライト アセンブリが見つかりましたが、<see langword="CultureInfo" /> は指定されているファイル名とは一致しませんでした。</exception>
      <exception cref="T:System.BadImageFormatException">サテライト アセンブリは、有効なアセンブリではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary>指定されたバージョンの、指定されたカルチャ設定のサテライト アセンブリを取得します。</summary>
      <param name="culture">指定されたカルチャ。</param>
      <param name="version">サテライト アセンブリのバージョン。</param>
      <returns>指定されたサテライト アセンブリ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.IO.FileLoadException">ファイル名が一致するサテライト アセンブリが見つかりましたが、<see langword="CultureInfo" /> またはバージョンが指定されているファイルとは一致しませんでした。</exception>
      <exception cref="T:System.IO.FileNotFoundException">アセンブリが見つかりません。</exception>
      <exception cref="T:System.BadImageFormatException">サテライト アセンブリは、有効なアセンブリではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>現在の <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> で定義および作成された型から、指定された型を取得します。</summary>
      <param name="name">検索の対象となる型の名前。</param>
      <param name="throwOnError">型が見つからなかったときに例外をスローする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="ignoreCase">検索中に型名の大文字と小文字の違いを無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>指定された型。型が見つからない場合、またはまだ作成されていない場合は、<see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache">
      <summary>アセンブリがグローバル アセンブリ キャッシュから読み込まれたかどうかを示す値を取得します。</summary>
      <returns>常に <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.HostContext">
      <summary>動的アセンブリが作成されるホスト コンテキストを取得します。</summary>
      <returns>動的アセンブリが作成されるホスト コンテキストを示す値。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion">
      <summary>マニフェストを格納しているファイルに保存される、共通言語ランタイムのバージョンを取得します。</summary>
      <returns>共通言語ランタイムのバージョンを表す文字列。</returns>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>このメンバーに指定された属性の型の 1 つまたは複数のインスタンスが適用されるかどうかを示す値を返します。</summary>
      <param name="attributeType">テストする属性の種類。</param>
      <param name="inherit">この型のオブジェクトでは、この引数は無視されます。</param>
      <returns>
        <see langword="true" /> の 1 つまたは複数のインスタンスがこの動的アセンブリに適用される場合は <paramref name="attributeType" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic">
      <summary>現在のアセンブリが動的なアセンブリであることを示す値を取得します。</summary>
      <returns>常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.Location">
      <summary>シャドウ コピーされたファイルではない場合は、マニフェストを格納している読み込み済みファイルの位置をコードベース形式で取得します。</summary>
      <returns>マニフェストを格納している読み込み済みファイルの場所。 読み込み済みファイルがシャドウ コピーされている場合、<see langword="Location" /> はシャドウ コピーされる前のファイルの場所です。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule">
      <summary>アセンブリのマニフェストを格納している現在の <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> のモジュールを取得します。</summary>
      <returns>マニフェスト モジュール。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ReflectionOnly">
      <summary>動的アセンブリがリフレクションのみのコンテキストにあるかどうかを示す値を取得します。</summary>
      <returns>動的アセンブリがリフレクションのみのコンテキストにある場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>指定されたカスタム属性 blob を使用して、このアセンブリのカスタム属性を設定します。</summary>
      <param name="con">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="con" /> は <see langword="RuntimeConstructorInfo" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>カスタム属性ビルダーを使用して、このアセンブリのカスタム属性を設定します。</summary>
      <param name="customBuilder">カスタム属性を定義するヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilderAccess">
      <summary>動的アセンブリのアクセス モードを定義します。</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Run">
      <summary>動的アセンブリは実行できますが、保存できません。</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect">
      <summary>アクセスできなくなったとき、動的アセンブリは自動的にアンロードされ、そのメモリは解放されます。</summary>
    </member>
    <member name="T:System.Reflection.Emit.ConstructorBuilder">
      <summary>動的クラスのコンストラクターを定義し、表します。</summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
      <summary>このコンストラクターの属性を取得します。</summary>
      <returns>このコンストラクターの属性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.CallingConvention">
      <summary>宣言する型がジェネリックかどうかに依存する <see cref="T:System.Reflection.CallingConventions" /> の値を取得します。</summary>
      <returns>宣言する型がジェネリックの場合は <see cref="F:System.Reflection.CallingConventions.HasThis" />、それ以外の場合は <see cref="F:System.Reflection.CallingConventions.Standard" /> です。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
      <summary>このメンバーを宣言する型の <see cref="T:System.Type" /> オブジェクトへの参照を取得します。</summary>
      <returns>このメンバーを宣言する型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>このコンストラクターのパラメーターを定義します。</summary>
      <param name="iSequence">パラメーター リストのパラメーターの位置。 最初のパラメーターに対応する 1 から順番にインデックス番号がパラメーターに付けられます。</param>
      <param name="attributes">パラメーターの属性。</param>
      <param name="strParamName">パラメーターの名前。 名前は、null 文字列にすることができます。</param>
      <returns>このコンストラクターの新しいパラメーターを表すオブジェクト。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iSequence" /> が 0 (ゼロ) より小さいか、またはコンストラクターのパラメーター数よりも大きい値です。</exception>
      <exception cref="T:System.InvalidOperationException">含んでいる型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して作成されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
      <summary>このコンストラクターに定義済みのカスタム属性をすべて返します。</summary>
      <param name="inherit">基底クラスからのカスタム属性の継承を制御します。 このパラメーターは無視されます。</param>
      <returns>この <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> インスタンスで表されるコンストラクターのすべてのカスタム属性を表す、オブジェクトの配列。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>指定された型で識別されるカスタム属性を返します。</summary>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">基底クラスからのカスタム属性の継承を制御します。 このパラメーターは無視されます。</param>
      <returns>このコンストラクターの属性を表すオブジェクトの配列。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
      <summary>このコンストラクターの <see cref="T:System.Reflection.Emit.ILGenerator" /> を取得します。</summary>
      <returns>このコンストラクターの <see cref="T:System.Reflection.Emit.ILGenerator" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">コンストラクターは、パラメーターなしのコンストラクターです。

または -
コンストラクターに、メソッド本体があってはならないことを示す <see cref="T:System.Reflection.MethodAttributes" /> フラグまたは <see cref="T:System.Reflection.MethodImplAttributes" /> フラグが付いています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
      <summary>指定された MSIL ストリーム サイズの <see cref="T:System.Reflection.Emit.ILGenerator" /> オブジェクトを取得します。これは、このコンストラクターのためのメソッド本体をビルドするために使用できます。</summary>
      <param name="streamSize">バイト単位の MSIL ストリームのサイズ。</param>
      <returns>このコンストラクターの <see cref="T:System.Reflection.Emit.ILGenerator" />。</returns>
      <exception cref="T:System.InvalidOperationException">コンストラクターは、パラメーターなしのコンストラクターです。

または -
コンストラクターに、メソッド本体があってはならないことを示す <see cref="T:System.Reflection.MethodAttributes" /> フラグまたは <see cref="T:System.Reflection.MethodImplAttributes" /> フラグが付いています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
      <summary>このコンストラクターのメソッド実装フラグを返します。</summary>
      <returns>このコンストラクターのメソッド実装フラグ。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
      <summary>このコンストラクターのパラメーターを返します。</summary>
      <returns>このコンストラクターのパラメーターを表す配列。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> は、.NET Framework バージョン 1.0 および 1.1 でこのコンストラクターの型に呼び出されていません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> は、.NET Framework バージョン 2.0 でこのコンストラクターの型に呼び出されていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
      <summary>このコンストラクターのローカル変数をゼロに初期化する必要があるかどうかを取得または設定します。</summary>
      <returns>読み取り/書き込み。 このコンストラクターのローカル変数をゼロに初期化する必要があるかどうかを取得または設定します。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>指定された <see langword="Binder" /> の制約下において、指定された引数で、このインスタンスによって反映されるコンストラクターを動的に呼び出します。</summary>
      <param name="obj">再初期化を必要とするオブジェクト。</param>
      <param name="invokeAttr">望ましいバインディングの種類を指定する <see langword="BindingFlags" /> 値の 1 つ。</param>
      <param name="binder">プロパティのセットを定義し、バインディング、引数の型の強制変換、およびリフレクションを使用したメンバーの呼び出しの機能を有効にする <see langword="Binder" />。 <paramref name="binder" /> が <see langword="null" /> の場合、Binder.DefaultBinding が使用されます。</param>
      <param name="parameters">引数リスト。 これは、呼び出されるコンストラクターのパラメーターと同じ数、順序、型の引数の配列です。 パラメーターがない場合、これは null 参照でなければなりません (Visual Basic では <see langword="Nothing" />)。</param>
      <param name="culture">型の強制変換を制御するために使用する <see cref="T:System.Globalization.CultureInfo" />。 null の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。</param>
      <returns>コンストラクターに関連付けられているクラスのインスタンス。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用してコンストラクターを取得し、返された <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> で <see cref="T:System.Reflection.ConstructorInfo" /> を呼び出すことができます。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>特定のオブジェクト上のインスタンスによって表されるコンストラクターを動的に呼び出します。その際、指定されたバインダーの制約下で、指定されたパラメーターを一緒に渡します。</summary>
      <param name="invokeAttr">これは、InvokeMethod や NonPublic などの、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <param name="binder">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションを使用した <see langword="MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。 バインダーが <see langword="null" /> の場合は、既定のバインダーが使用されます。 「 <see cref="T:System.Reflection.Binder" />」を参照してください。</param>
      <param name="parameters">引数リスト。 これは、呼び出されるコンストラクターのパラメーターと同じ数、順序、型の引数の配列です。 パラメーターがない場合は、これは <see langword="null" /> である必要があります。</param>
      <param name="culture">型の強制変換を制御するために使用する <see cref="T:System.Globalization.CultureInfo" /> のインスタンス。 null の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。 (たとえば、これは 1000 を表す <see cref="T:System.String" /> を <see cref="T:System.Double" /> 値に変換する場合に必要です。これは、カルチャによって 1000 の表記が異なるためです。)</param>
      <returns>呼び出されたコンストラクターによって返される値。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用してコンストラクターを取得し、返された <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> で <see cref="T:System.Reflection.ConstructorInfo" /> を呼び出すことができます。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>指定されたカスタム属性の型が定義されているかどうかを確認します。</summary>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">基底クラスからのカスタム属性の継承を制御します。 このパラメーターは無視されます。</param>
      <returns>指定されたカスタム属性の型が定義されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用してコンストラクターを取得し、返された <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> で <see cref="T:System.Reflection.ConstructorInfo" /> を呼び出すことができます。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
      <summary>メソッドの内部ハンドルを取得します。 基になるメタデータ ハンドルにアクセスするには、このハンドルを使用します。</summary>
      <returns>メソッドの内部ハンドル。 基になるメタデータ ハンドルにアクセスするには、このハンドルを使用します。</returns>
      <exception cref="T:System.NotSupportedException">このプロパティは、このクラスではサポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Module">
      <summary>このコンストラクターが定義されている動的モジュールを取得します。</summary>
      <returns>このコンストラクターが定義されている動的モジュールを表わす <see cref="T:System.Reflection.Module" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Name">
      <summary>このコンストラクターの名前を取得します。</summary>
      <returns>このコンストラクターの名前。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
      <summary>このオブジェクトの取得元となった <see cref="T:System.Type" /> オブジェクトへの参照を保持します。</summary>
      <returns>このオブジェクトの取得元の <see langword="Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>指定されたカスタム属性の blob を使用して、カスタム属性を設定します。</summary>
      <param name="con">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder">カスタム属性を定義するヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary>このコンストラクターのメソッド実装フラグを設定します。</summary>
      <param name="attributes">メソッド実装フラグ。</param>
      <exception cref="T:System.InvalidOperationException">含んでいる型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して作成されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.ToString">
      <summary>この <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> インスタンスを <see cref="T:System.String" /> として返します。</summary>
      <returns>このコンストラクターの名前、属性、例外が含まれる文字列。その後に現在の Microsoft intermediate language (MSIL) ストリームが続きます。</returns>
    </member>
    <member name="T:System.Reflection.Emit.EnumBuilder">
      <summary>列挙型を記述および表現します。</summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Assembly">
      <summary>この列挙型の定義を含む動的アセンブリを取得します。</summary>
      <returns>読み取り専用です。 この列挙型の定義を含む動的アセンブリ。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
      <summary>親アセンブリの表示名で修飾されたこの列挙型の完全なパスを返します。</summary>
      <returns>読み取り専用です。 親アセンブリの表示名で修飾されたこの列挙型の完全なパス。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.BaseType">
      <summary>この型の親 <see cref="T:System.Type" /> (常に<see cref="T:System.Enum" />) を返します。</summary>
      <returns>読み取り専用です。 この型の親 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo">
      <summary>この列挙体を表す <see cref="T:System.Reflection.TypeInfo" /> オブジェクトを取得します。</summary>
      <returns>この列挙体を表すオブジェクト。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
      <summary>この <see cref="T:System.Reflection.Emit.EnumBuilder" /> を宣言した型を返します。</summary>
      <returns>読み取り専用です。 この <see cref="T:System.Reflection.Emit.EnumBuilder" /> を宣言した型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
      <summary>指定の定数値を持つ列挙型の、名前付きの静的フィールドを定義します。</summary>
      <param name="literalName">静的フィールドの名前。</param>
      <param name="literalValue">リテラルの定数値。</param>
      <returns>定義済みのフィールド。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.FullName">
      <summary>この列挙型の完全なパスを返します。</summary>
      <returns>読み取り専用です。 この列挙型の完全なパス。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>指定に従って、このクラスに定義されているパブリック コンストラクターおよび非パブリック コンストラクターを表す <see cref="T:System.Reflection.ConstructorInfo" /> オブジェクトの配列を返します。</summary>
      <param name="bindingAttr">これは <see cref="T:System.Reflection.BindingFlags" /> や <see langword="InvokeMethod" /> など、<see langword="NonPublic" /> からのビット フラグでなければなりません。</param>
      <returns>このクラスに定義されている指定したコンストラクターを表す <see cref="T:System.Reflection.ConstructorInfo" /> オブジェクトの配列を返します。 コンストラクターが定義されていない場合は、空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
      <summary>このコンストラクターに定義済みのカスタム属性をすべて返します。</summary>
      <param name="inherit">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</param>
      <returns>この <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> インスタンスで表されるコンストラクターのすべてのカスタム属性を表す、オブジェクトの配列を返します。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>指定された型で識別されるカスタム属性を返します。</summary>
      <param name="attributeType">カスタム属性が適用される <see langword="Type" /> オブジェクト。</param>
      <param name="inherit">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</param>
      <returns>このコンストラクターの属性のうち <see cref="T:System.Type" /><paramref name="attributeType" /> であるものを表すオブジェクトの配列を返します。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetElementType">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <returns>このメソッドはサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType">
      <summary>列挙体のビルダーが定義されている場合に設定されている、現在の列挙体の基になる整数型を返します。</summary>
      <returns>基になる型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>指定した名前のイベントを返します。</summary>
      <param name="name">取得するイベントの名前。</param>
      <param name="bindingAttr">この呼び出しの属性。 これは <see cref="T:System.Reflection.BindingFlags" /> や <see langword="InvokeMethod" /> など、<see langword="NonPublic" /> からのビット フラグでなければなりません。</param>
      <returns>指定した名前の、この型によって宣言または継承されたイベントを表す <see cref="T:System.Reflection.EventInfo" /> オブジェクトを返します。 一致するものがない場合、<see langword="null" /> が返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents">
      <summary>この型によって宣言または継承されているパブリック イベントのイベントを返します。</summary>
      <returns>この型で宣言または継承されているパブリック イベントを表す <see cref="T:System.Reflection.EventInfo" /> オブジェクトの配列を返します。 パブリック イベントがない場合は、空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>この型で宣言されているパブリック イベントとパブリックでないイベントを返します。</summary>
      <param name="bindingAttr">これは <see cref="T:System.Reflection.BindingFlags" /> や <see langword="InvokeMethod" /> などの、<see langword="NonPublic" /> からのビット フラグでなければなりません。</param>
      <returns>この型で宣言または継承されているパブリック イベントとパブリックでないイベントを表す <see cref="T:System.Reflection.EventInfo" /> オブジェクトの配列を返します。 指定どおりに、イベントがない場合は空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>指定した名前で指定されたフィールドを返します。</summary>
      <param name="name">取得するフィールドの名前。</param>
      <param name="bindingAttr">これは <see cref="T:System.Reflection.BindingFlags" /> や <see langword="InvokeMethod" /> など、<see langword="NonPublic" /> からのビット フラグでなければなりません。</param>
      <returns>指定した名前と公開または非公開の修飾子を持つ、この型によって宣言または継承されているフィールドを表す <see cref="T:System.Reflection.FieldInfo" /> オブジェクトを返します。 どれとも一致しない場合は、null が返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>この型で宣言されているパブリック フィールドとパブリックでないフィールドを返します。</summary>
      <param name="bindingAttr">これは、InvokeMethod や NonPublic などの、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns>この型で宣言または継承されているパブリック フィールドと非パブリック フィールドを表す <see cref="T:System.Reflection.FieldInfo" /> オブジェクトの配列を返します。 指定どおりに、フィールドがない場合は空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
      <summary>指定された完全修飾子名を名前とし、この型によって (直接または間接に) 実装されるインターフェイスを返します。</summary>
      <param name="name">インターフェイスの名前。</param>
      <param name="ignoreCase">
        <see langword="true" /> の場合、検索では大文字と小文字が区別されません。 <see langword="false" /> の場合、検索では、大文字と小文字が区別されます。</param>
      <returns>実装されているインターフェイスを表す <see cref="T:System.Type" /> オブジェクトを返します。 インターフェイスの一致する名前が見つからない場合、null を返します。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
      <summary>要求されたインターフェイスに対するインターフェイス マップを返します。</summary>
      <param name="interfaceType">インターフェイス マップの取得対象のインターフェイスの型。</param>
      <returns>要求されたインターフェイス マップ。</returns>
      <exception cref="T:System.ArgumentException">この型はインターフェイスを実装していません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
      <summary>このクラスとその基本クラスに実装されているすべてのインターフェイスの配列を返します。</summary>
      <returns>実装されているインターフェイスを表す <see cref="T:System.Type" /> オブジェクトの配列を返します。 何も定義されていない場合は、空の配列が返されます。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>この型によって宣言または継承されている指定された名前、型、およびバインドを持つすべてのメンバーを返します。</summary>
      <param name="name">メンバーの名前。</param>
      <param name="type">返されるメンバーの型。</param>
      <param name="bindingAttr">これは <see cref="T:System.Reflection.BindingFlags" /> や <see langword="InvokeMethod" /> など、<see langword="NonPublic" /> からのビット フラグでなければなりません。</param>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> が使用されている場合、この型で定義されているパブリック メンバーと非パブリック メンバーを表す <paramref name="nonPublic" /> オブジェクトの配列を返します。それ以外の場合、パブリック メンバーのみが返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>この型で宣言または継承されている指定メンバーを返します。</summary>
      <param name="bindingAttr">これは <see cref="T:System.Reflection.BindingFlags" /> や <see langword="InvokeMethod" /> など、<see langword="NonPublic" /> からのビット フラグでなければなりません。</param>
      <returns>この型で宣言または継承されているパブリック メンバーと非パブリック メンバーを表す <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの配列を返します。 一致するメンバーがない場合は、空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>指定のとおりに、この型によって宣言または継承されたパブリック メソッドと非パブリック メソッドをすべて返します。</summary>
      <param name="bindingAttr">これは <see cref="T:System.Reflection.BindingFlags" /> や <see langword="InvokeMethod" /> などの、<see langword="NonPublic" /> からのビット フラグでなければなりません。</param>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> が使用されている場合、この型で定義されているパブリック メソッドと非パブリック メソッドを表す <paramref name="nonPublic" /> オブジェクトの配列を返します。それ以外の場合、パブリック メソッドのみが返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>この型で宣言されている指定された入れ子の型を返します。</summary>
      <param name="name">取得対象の入れ子にされた型の名前を格納している <see cref="T:System.String" />。</param>
      <param name="bindingAttr">検索の実行方法を指定する 1 つ以上の <see cref="T:System.Reflection.BindingFlags" /> から成るビットマスク。

または -
大文字小文字を区別してパブリック メソッドの検索を行う場合は 0。</param>
      <returns>指定した要件と一致し、入れ子にされた型が存在する場合は、その型を表す <see cref="T:System.Type" /> オブジェクト。それ以外の場合は <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>この型で宣言または継承されている入れ子にされたパブリック型とパブリックでない型を返します。</summary>
      <param name="bindingAttr">これは <see cref="T:System.Reflection.BindingFlags" /> や <see langword="InvokeMethod" /> などの、<see langword="NonPublic" /> からのビット フラグでなければなりません。</param>
      <returns>現在の <see cref="T:System.Type" /> 内で入れ子にされた型のうち、指定したバインディング制約に一致するすべての型を表す <see cref="T:System.Type" /> オブジェクトの配列。
現在の <see cref="T:System.Type" /> 内で型が入れ子にされていない場合、または入れ子にされた型の中にバインディング制約に一致するものが存在しない場合は、<see cref="T:System.Type" /> 型の空の配列。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>指定のとおりに、この型によって宣言または継承されたパブリック プロパティと非パブリック プロパティをすべて返します。</summary>
      <param name="bindingAttr">この呼び出しの属性。 これは <see cref="T:System.Reflection.BindingFlags" /> や <see langword="InvokeMethod" /> など、<see langword="NonPublic" /> からのビット フラグでなければなりません。</param>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" /> が使用されている場合、この型で定義されているパブリック プロパティと非パブリック プロパティを表す <paramref name="nonPublic" /> オブジェクトの配列を返します。 それ以外の場合、パブリック プロパティのみが返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GUID">
      <summary>この列挙型の GUID を返します。</summary>
      <returns>読み取り専用です。 この列挙型の GUID。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>指定したメンバーを呼び出します。 呼び出すメソッドはアクセス可能でなければならず、指定したバインダーと呼び出し属性の制約の下で、指定された引数リストに対する一致の特定性が最高のものでなければなりません。</summary>
      <param name="name">呼び出すメンバーの名前。 コンストラクター、メソッド、プロパティ、またはフィールドを指定できます。 適切な呼び出し属性を指定する必要があります。 メンバーの名前として空の文字列を渡すことによって、クラスの既定のメンバーを呼び出せることにご注意ください。</param>
      <param name="invokeAttr">呼び出し属性。 これは <see langword="BindingFlags" /> からのビット フラグでなければなりません。</param>
      <param name="binder">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションを使用した <see langword="MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。 バインダーが <see langword="null" /> の場合は、既定のバインダーが使用されます。 「 <see cref="T:System.Reflection.Binder" />」を参照してください。</param>
      <param name="target">指定したメンバーを呼び出す対象となるオブジェクト。 メンバーが静的な場合、このパラメーターは無視されます。</param>
      <param name="args">引数リスト。 これは、呼び出されるメンバーのパラメーターの数、順序、および型を含むオブジェクトの配列です。 パラメーターがない場合は、これは null である必要があります。</param>
      <param name="modifiers">
        <paramref name="args" /> と同じ長さの配列であり、その要素は、呼び出されるメンバーの引数に関連付けられた属性を表します。 メタデータの中でパラメーターには属性が関連付けられています。 これらは、さまざまな相互運用サービスで使用されます。 このような場合の詳細については、メタデータの仕様を参照してください。</param>
      <param name="culture">型の強制変換を制御するために使用する <see langword="CultureInfo" /> のインスタンス。 null の場合は、現在のスレッドの <see langword="CultureInfo" /> が使用されます。 (これは、たとえば、1000 を表す String を Double 値に変換する場合に必要であることに注意ください。これは、カルチャによって 1000 の表記が異なるためです。)</param>
      <param name="namedParameters">
        <paramref name="namedParameters" /> 配列の各パラメーターは、<paramref name="args" /> 配列内の対応する要素の値を取得します。 <paramref name="args" /> の長さが <paramref name="namedParameters" /> の長さより大きい場合、残りの引数の値は順番に渡されます。</param>
      <returns>呼び出されたメンバーの戻り値を返します。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType">
      <summary>このオブジェクトが構築ジェネリック型かどうかを示す値を取得します。</summary>
      <returns>このオブジェクトが構築ジェネリック型を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>指定されたカスタム属性の型が定義されているかどうかを確認します。</summary>
      <param name="attributeType">カスタム属性が適用される <see langword="Type" /> オブジェクト。</param>
      <param name="inherit">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</param>
      <returns>
        <see langword="true" /> の 1 つ以上のインスタンスがこのメンバーで定義されている場合は <paramref name="attributeType" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
      <summary>下限を 0 に設定して現在の型の 1 次元配列を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns>下限を 0 に設定して現在の型の 1 次元配列を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
      <summary>次元数を指定して現在の型の配列を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <param name="rank">配列の次元数。 この数値は 32 以下である必要があります。</param>
      <returns>次元数を指定して現在の型の配列を表すオブジェクト。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> が 1 未満です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
      <summary>
        <see cref="T:System.Type" />refパラメーター (Visual Basic の場合はByRefパラメーター) として渡されるときに現在の型を表す オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.Type" />refパラメーター (Visual Basic の場合はByRefパラメーター) として渡されるときに現在の型を表す オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
      <summary>現在の型へのポインターを表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns>現在の型へのポインターを表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Module">
      <summary>この <see cref="T:System.Reflection.Emit.EnumBuilder" /> 定義を含む動的モジュールを取得します。</summary>
      <returns>読み取り専用です。 この <see cref="T:System.Reflection.Emit.EnumBuilder" /> 定義を含む動的モジュール。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Name">
      <summary>この列挙型の名前を返します。</summary>
      <returns>読み取り専用です。 この列挙型の名前。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Namespace">
      <summary>この列挙型の名前空間を返します。</summary>
      <returns>読み取り専用です。 この列挙型の名前空間。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
      <summary>この <see cref="T:System.Reflection.Emit.EnumBuilder" /> を取得するために使用された型を返します。</summary>
      <returns>読み取り専用です。 この <see cref="T:System.Reflection.Emit.EnumBuilder" /> を取得するために使用された型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>指定されたカスタム属性の blob を使用して、カスタム属性を設定します。</summary>
      <param name="con">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder">カスタム属性を定義するヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
      <summary>この列挙型の内部ハンドルを取得します。</summary>
      <returns>読み取り専用です。 この列挙型の内部ハンドル。</returns>
      <exception cref="T:System.NotSupportedException">このプロパティは現在サポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
      <summary>この列挙型の基になるフィールドを返します。</summary>
      <returns>読み取り専用です。 この列挙型の基になるフィールド。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
      <summary>この列挙型の基になるシステム型を返します。</summary>
      <returns>読み取り専用です。 基になるシステム型を返します。</returns>
    </member>
    <member name="T:System.Reflection.Emit.EventBuilder">
      <summary>クラスのイベントを定義します。</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>このイベントに関連付ける "other" メソッドの 1 つを追加します。 "other" メソッドとは、イベントに関連付けられた "on" メソッドおよび "raise" メソッド以外のメソッドです。 この関数は、必要な数の "other" メソッドを追加するために何回も呼び出すことができます。</summary>
      <param name="mdBuilder">他のメソッドを表す <see langword="MethodBuilder" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>このイベントをサブスクライブするメソッドを設定します。</summary>
      <param name="mdBuilder">このイベントをサブスクライブするメソッドを表す <see langword="MethodBuilder" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>指定されたカスタム属性の blob を使用して、カスタム属性を設定します。</summary>
      <param name="con">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder">カスタム属性を説明するヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>このイベントを発生させるメソッドを設定します。</summary>
      <param name="mdBuilder">このイベントを発生させるメソッドを表す <see langword="MethodBuilder" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>このイベントをアンサブスクライブするメソッドを設定します。</summary>
      <param name="mdBuilder">このイベントをアンサブスクライブするメソッドを表す <see langword="MethodBuilder" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="T:System.Reflection.Emit.FieldBuilder">
      <summary>フィールドを定義および表現します。 このクラスは継承できません。</summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Attributes">
      <summary>このフィールドの属性を示します。 このプロパティは読み取り専用です。</summary>
      <returns>このフィールドの属性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.DeclaringType">
      <summary>このフィールドを宣言する型の <see cref="T:System.Type" /> オブジェクトへの参照を示します。 このプロパティは読み取り専用です。</summary>
      <returns>このフィールドを宣言する型の <see cref="T:System.Type" /> オブジェクトへの参照。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldHandle">
      <summary>このフィールドの内部メタデータ ハンドルを示します。 このプロパティは読み取り専用です。</summary>
      <returns>このフィールドの内部メタデータ ハンドル。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldType">
      <summary>このフィールドの型を表す <see cref="T:System.Type" /> オブジェクトを示します。 このプロパティは読み取り専用です。</summary>
      <returns>このフィールドの型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Boolean)">
      <summary>このフィールドに対して定義されているすべてのカスタム属性を返します。</summary>
      <param name="inherit">基底クラスからのカスタム属性の継承を制御します。</param>
      <returns>この <see cref="T:System.Object" /> インスタンスで表されるコンストラクターのすべてのカスタム属性を表す <see cref="T:System.Reflection.Emit.FieldBuilder" /> 型の配列。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>指定された型によって識別されるこのフィールドに定義されたすべてのカスタム属性を返します。</summary>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">基底クラスからのカスタム属性の継承を制御します。</param>
      <returns>この <see cref="T:System.Object" /> インスタンスで表されるコンストラクターのすべてのカスタム属性を表す <see cref="T:System.Reflection.Emit.FieldBuilder" /> 型の配列。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)">
      <summary>指定したオブジェクトでサポートされているフィールドの値を取得します。</summary>
      <param name="obj">フィールドにアクセスするオブジェクト。</param>
      <returns>このインスタンスがリフレクションするフィールドの値を格納している <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>指定した型の属性がフィールドで定義されているかどうかを示します。</summary>
      <param name="attributeType">属性の型。</param>
      <param name="inherit">基底クラスからのカスタム属性の継承を制御します。</param>
      <returns>このフィールドに <paramref name="attributeType" /> のインスタンスが 1 つ以上定義されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> を使用してフィールドを取得し、返された <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> に対して <see cref="T:System.Reflection.FieldInfo" /> を呼び出します。</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Module">
      <summary>このフィールドを含む型が定義されるモジュールを取得します。</summary>
      <returns>このフィールドが定義される動的モジュールを表す <see cref="T:System.Reflection.Module" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Name">
      <summary>このフィールドの名前を示します。 このプロパティは読み取り専用です。</summary>
      <returns>このフィールドの名前を格納している <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.ReflectedType">
      <summary>このオブジェクトの取得元である <see cref="T:System.Type" /> オブジェクトへの参照を示します。 このプロパティは読み取り専用です。</summary>
      <returns>このインスタンスを取得するために使用した <see cref="T:System.Type" /> オブジェクトへの参照。</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)">
      <summary>このフィールドの既定値を設定します。</summary>
      <param name="defaultValue">このフィールドの新しい既定値。</param>
      <exception cref="T:System.InvalidOperationException">含んでいる型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して作成されています。</exception>
      <exception cref="T:System.ArgumentException">フィールドが、サポートされている型のいずれでもありません。

または -
<paramref name="defaultValue" /> の型がフィールドの型と一致しません。

または -
フィールドが <see cref="T:System.Object" /> 型または他の参照型であり、<paramref name="defaultValue" /> が <see langword="null" /> ではなく、値を参照型に割り当てることができません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>指定されたカスタム属性の blob を使用して、カスタム属性を設定します。</summary>
      <param name="con">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">このフィールドの親の型が完全型です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder">カスタム属性を定義するヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">このフィールドの親の型が完全型です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)">
      <summary>フィールド レイアウトを指定します。</summary>
      <param name="iOffset">このフィールドを格納している型の中でのフィールドのオフセット。</param>
      <exception cref="T:System.InvalidOperationException">含んでいる型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して作成されています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="iOffset" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>指定したオブジェクトでサポートされているフィールドの値を設定します。</summary>
      <param name="obj">フィールドにアクセスするオブジェクト。</param>
      <param name="val">フィールドに代入する値。</param>
      <param name="invokeAttr">使用するバインディングの型を指定する <see langword="IBinder" /> のメンバー (IBinder.CreateInstance、IBinder.ExactBinding など)。</param>
      <param name="binder">バインディング、引数型の強制変換、リフレクションを使用したメンバーの呼び出しを有効にする一連のプロパティ。 バインダーが null の場合は、IBinder.DefaultBinding が使用されます。</param>
      <param name="culture">特定のカルチャに関するソフトウェア上の設定。</param>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。</exception>
    </member>
    <member name="T:System.Reflection.Emit.GenericTypeParameterBuilder">
      <summary>動的に定義されたジェネリック型およびジェネリック メソッドのジェネリック型パラメーターを定義および作成します。 このクラスは継承できません。</summary>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
      <summary>現在の型パラメーターが属するジェネリック型の定義を格納する動的アセンブリを表す <see cref="T:System.Reflection.Assembly" /> オブジェクトを取得します。</summary>
      <returns>現在の型パラメーターが属するジェネリック型の定義を格納する動的アセンブリを表す <see cref="T:System.Reflection.Assembly" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
      <summary>常に <see langword="null" /> を取得します。</summary>
      <returns>常に null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
      <summary>現在のジェネリック型パラメーターの基本型の制約を取得します。</summary>
      <returns>ジェネリック型パラメーターの基本型の制約を表す <see cref="T:System.Type" /> オブジェクト。型パラメーターに基本型の制約がない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
      <summary>常に <see langword="true" /> を取得します。</summary>
      <returns>常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
      <summary>現在の <see cref="T:System.Reflection.MethodInfo" /> がジェネリック メソッドの型パラメーターを表している場合に、宣言するメソッドを表す <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> を取得します。</summary>
      <returns>現在の <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> がジェネリック メソッドの型パラメーターを表している場合、宣言するメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。それ以外の場合、<see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
      <summary>ジェネリック型パラメーターが所属する、ジェネリック型定義またはジェネリック メソッド定義を取得します。</summary>
      <returns>型パラメーターがジェネリック型に属している場合は、そのジェネリック型を表す <see cref="T:System.Type" /> オブジェクト。型パラメーターがジェネリック メソッドに属している場合は、そのジェネリック メソッドを宣言した型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
      <summary>指定されたオブジェクトが <see langword="EventToken" /> のインスタンスであり、現在のインスタンスと等しいかどうかをテストします。</summary>
      <param name="o">現在のインスタンスと比較するオブジェクト。</param>
      <returns>
        <paramref name="o" /> が <see langword="true" /> のインスタンスで、現在のインスタンスと等しい場合は <see langword="EventToken" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
      <summary>常に <see langword="null" /> を取得します。</summary>
      <returns>常に null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes">
      <summary>現在のジェネリック型パラメーターの共変性および特殊な制約を説明する <see cref="T:System.Reflection.GenericParameterAttributes" /> フラグの組み合わせを取得します。</summary>
      <returns>現在のジェネリック型パラメーターの共変性と特殊な制約を表す値のビットごとの組み合わせ。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
      <summary>パラメーターを宣言したジェネリック型またはジェネリック メソッドの型パラメーター リスト内の型パラメーターの位置を取得します。</summary>
      <returns>パラメーターを宣言したジェネリック型またはジェネリック メソッドの型パラメーター リスト内の型パラメーターの位置。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="bindingAttr">サポートされていません。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="inherit">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="attributeType">検索する属性の種類。 この型に代入可能な属性だけが返されます。</param>
      <param name="inherit">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>現在の配列型、ポインター型、または <see langword="ByRef" /> 型によって参照される型。または、現在の型が配列型でもポインター型でもなく、参照渡しでもない場合は <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="name">サポートされていません。</param>
      <param name="bindingAttr">サポートされていません。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="bindingAttr">サポートされていません。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="name">サポートされていません。</param>
      <param name="bindingAttr">サポートされていません。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="bindingAttr">サポートされていません。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
      <summary>ジェネリック型パラメーターでは使用できません。</summary>
      <returns>ジェネリック型パラメーターでは使用できません。</returns>
      <exception cref="T:System.InvalidOperationException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
      <summary>ジェネリック型パラメーターでは使用できません。</summary>
      <returns>ジェネリック型パラメーターでは使用できません。</returns>
      <exception cref="T:System.InvalidOperationException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
      <summary>現在のインスタンスの 32 ビット整数ハッシュ コードを返します。</summary>
      <returns>32 ビット整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="name">インターフェイスの名前。</param>
      <param name="ignoreCase">大文字小文字を問わず検索する場合は <see langword="true" />。大文字と小文字を区別した検索を行う場合は <see langword="false" />。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="interfaceType">割り当ての取得対象となるインターフェイス型を表す <see cref="T:System.Type" /> オブジェクト。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="name">サポートされていません。</param>
      <param name="type">サポートされていません。</param>
      <param name="bindingAttr">サポートされていません。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="bindingAttr">サポートされていません。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="bindingAttr">サポートされていません。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="name">サポートされていません。</param>
      <param name="bindingAttr">サポートされていません。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="bindingAttr">サポートされていません。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="bindingAttr">サポートされていません。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="name">サポートされていません。</param>
      <param name="invokeAttr">サポートされていません。</param>
      <param name="binder">サポートされていません。</param>
      <param name="target">サポートされていません。</param>
      <param name="args">サポートされていません。</param>
      <param name="modifiers">サポートされていません。</param>
      <param name="culture">サポートされていません。</param>
      <param name="namedParameters">サポートされていません。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
      <summary>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</summary>
      <param name="c">テストするオブジェクト。</param>
      <returns>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType">
      <summary>このオブジェクトが構築ジェネリック型かどうかを示す値を取得します。</summary>
      <returns>このオブジェクトが構築ジェネリック型を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="attributeType">サポートされていません。</param>
      <param name="inherit">サポートされていません。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
      <summary>常に <see langword="true" /> を取得します。</summary>
      <returns>常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
      <summary>常に <see langword="false" /> を返します。</summary>
      <returns>常に <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
      <summary>常に <see langword="false" /> を取得します。</summary>
      <returns>常に <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="c">サポートされていません。</param>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
      <summary>要素型がジェネリック型パラメーターである 1 次元配列の型を返します。</summary>
      <returns>要素型がジェネリック型パラメーターである 1 次元配列の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
      <summary>指定した次元数を持つ、要素型がジェネリック型パラメーターである配列の型を返します。</summary>
      <param name="rank">配列の次元数。</param>
      <returns>要素型がジェネリック型パラメーターで、指定の次元数の配列型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> が有効な次元の数値ではありません。 たとえば、値が 1 未満であるなどです。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
      <summary>参照パラメーターとして渡されるときに、現在のジェネリック型パラメーターを表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns>参照パラメーターとして渡されるときに現在のジェネリック型パラメーターを表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
      <summary>不完全なジェネリック型パラメーターには有効ではありません。</summary>
      <param name="typeArguments">型引数の配列。</param>
      <returns>このメソッドは、不完全なジェネリック型パラメーターには無効です。</returns>
      <exception cref="T:System.InvalidOperationException">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
      <summary>現在のジェネリック型パラメーターへのポインターを表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns>現在のジェネリック型パラメーターを指すポインターを表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
      <summary>ジェネリック型パラメーターを含む動的モジュールを取得します。</summary>
      <returns>ジェネリック型パラメーターを格納する動的モジュールを表す <see cref="T:System.Reflection.Module" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
      <summary>ジェネリック型パラメーターの名前を取得します。</summary>
      <returns>ジェネリック型パラメーターの名前。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
      <summary>常に <see langword="null" /> を取得します。</summary>
      <returns>常に null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
      <summary>
        <see cref="T:System.Type" /> を取得するために使用した <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Type" /> を取得するために使用した <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
      <summary>型パラメーターの代わりに使用するために、型が継承する必要のある基本データ型を設定します。</summary>
      <param name="baseTypeConstraint">型パラメーターを置き換える型が継承する必要のある <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>指定されたカスタム属性の blob を使用して、カスタム属性を設定します。</summary>
      <param name="con">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute">属性を表すバイト BLOB。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> は <see langword="null" />です。

または -
<paramref name="binaryAttribute" /> が null 参照です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder">カスタム属性を定義するためのヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
      <summary>パラメーターなしのコンストラクター制約など、ジェネリック パラメーターの分散特性および特殊な制約を設定します。</summary>
      <param name="genericParameterAttributes">ジェネリック型パラメーターの分散特性と特殊な制約を表す <see cref="T:System.Reflection.GenericParameterAttributes" /> 値のビットごとの組み合わせ。</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
      <summary>型パラメーターを置き換えるために、型において実装する必要のあるインターフェイスを設定します。</summary>
      <param name="interfaceConstraints">型パラメーターを置き換えるために、型が実装する必要のあるインターフェイスを表す <see cref="T:System.Type" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
      <summary>現在のジェネリック型パラメーターの文字列形式を返します。</summary>
      <returns>ジェネリック型パラメーターの名前を含む文字列。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
      <summary>不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <returns>不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
      <summary>現在のジェネリック型パラメーターを取得します。</summary>
      <returns>現在の <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Reflection.Emit.MethodBuilder">
      <summary>動的クラスのメソッドまたはコンストラクターを定義し、表わします。</summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Attributes">
      <summary>このメソッドの属性を取得します。</summary>
      <returns>読み取り専用です。 このメソッドの <see langword="MethodAttributes" /> を取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
      <summary>メソッドの呼び出し規則を返します。</summary>
      <returns>読み取り専用です。 メソッドの呼び出し規則。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
      <summary>この型ではサポートされていません。</summary>
      <returns>サポートされていません。</returns>
      <exception cref="T:System.NotSupportedException">呼び出されたメソッドは基底クラスでサポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
      <summary>このメソッドを宣言する型を返します。</summary>
      <returns>読み取り専用です。 このメソッドを宣言する型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
      <summary>現在のメソッドのジェネリック型パラメーターの数を設定し、それらのパラメーターの名前を指定し、パラメーターの制約の定義に使用できる <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクトの配列を返します。</summary>
      <param name="names">ジェネリック型パラメーターの名前を表す文字列の配列。</param>
      <returns>ジェネリック メソッドの型パラメーターを表す <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクトの配列。</returns>
      <exception cref="T:System.InvalidOperationException">このメソッドのジェネリック型パラメーターは既に定義されています。

または -
メソッドが既に完了しました。

または -
現在のメソッドの <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> メソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="names" /> は <see langword="null" />です。

または -
<paramref name="names" /> の要素は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" /> は空の配列です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>パラメーター属性およびこのメソッドのパラメーターの名前、またはこのメソッドの戻り値の名前を設定します。 カスタム属性を適用するために使用できる ParameterBuilder を返します。</summary>
      <param name="position">パラメーター リストのパラメーターの位置。 パラメーターのインデックスの作成は、最初のパラメーターの数値 1 から始まります。数値 0 は、メソッドの戻り値です。</param>
      <param name="attributes">パラメーターのパラメーター属性。</param>
      <param name="strParamName">パラメーターの名前。 名前は、null 文字列にすることができます。</param>
      <returns>このメソッドのパラメーターまたはこのメソッドの戻り値を表す <see langword="ParameterBuilder" /> オブジェクトを返します。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">メソッドにパラメーターが指定されていません。

または -
<paramref name="position" /> が 0 未満です。

または -
<paramref name="position" /> は、メソッドのパラメーターの数を超えています。</exception>
      <exception cref="T:System.InvalidOperationException">含まれている型は、<see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して以前に作成されています。

または -
現在のメソッドでは、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
      <summary>指定したオブジェクトが、このインスタンスと等しいかどうかを判定します。</summary>
      <param name="obj">この <see langword="MethodBuilder" /> インスタンスと比較するオブジェクト。</param>
      <returns>
        <see langword="true" /> が <paramref name="obj" /> のインスタンスで、このオブジェクトと等しい場合は <see langword="MethodBuilder" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
      <summary>メソッドの基本実装を返します。</summary>
      <returns>このメソッドの基本実装。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
      <summary>このメソッドの定義済みのカスタム属性をすべて返します。</summary>
      <param name="inherit">このメンバーの継承チェーンを検索してカスタム属性を見つけるかどうかを指定します。</param>
      <returns>このメソッドのすべてのカスタム属性を表す、オブジェクトの配列を返します。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用してメソッドを取得し、返された <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> に対して <see cref="T:System.Reflection.MethodInfo" /> を呼び出します。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>指定された型で識別されるカスタム属性を返します。</summary>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">このメンバーの継承チェーンを検索してカスタム属性を見つけるかどうかを指定します。</param>
      <returns>このメソッドの属性のうち <paramref name="attributeType" /> 型であるものを表すオブジェクトの配列を返します。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用してメソッドを取得し、返された <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> に対して <see cref="T:System.Reflection.MethodInfo" /> を呼び出します。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
      <summary>メソッドの型パラメーターがジェネリックの場合、そのパラメーターを表す <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクトの配列。</summary>
      <returns>メソッドがジェネリックの場合、型パラメーターを表す <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクトの配列。メソッドがジェネリックでない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
      <summary>このメソッドを返します。</summary>
      <returns>
        <see cref="T:System.Reflection.Emit.MethodBuilder" /> の現在のインスタンス。</returns>
      <exception cref="T:System.InvalidOperationException">このメソッドはジェネリックではありません。 つまり、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティが <see langword="false" /> を返します。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
      <summary>このメソッドのハッシュ コードを取得します。</summary>
      <returns>このメソッドのハッシュ コード。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
      <summary>このメソッドの <see langword="ILGenerator" /> を返します。既定の Microsoft Intermediate Language (MSIL) のストリーム サイズは 64 バイトです。</summary>
      <returns>このメソッドの <see langword="ILGenerator" /> オブジェクトを返します。</returns>
      <exception cref="T:System.InvalidOperationException">その<see cref="T:System.Reflection.MethodAttributes" /> または <see cref="T:System.Reflection.MethodImplAttributes" /> フラグにより、(たとえば、それに <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> フラグがあるため) メソッドは本文を持つべきではありません。

または -
メソッドはジェネリック メソッドですが、ジェネリック メソッド定義ではありません。 つまり、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
      <summary>指定された Microsoft Intermediate Language (MSIL) のストリーム サイズにより、このメソッドの <see langword="ILGenerator" /> を返します。</summary>
      <param name="size">バイト単位の MSIL ストリームのサイズ。</param>
      <returns>このメソッドの <see langword="ILGenerator" /> オブジェクトを返します。</returns>
      <exception cref="T:System.InvalidOperationException">その<see cref="T:System.Reflection.MethodAttributes" /> または <see cref="T:System.Reflection.MethodImplAttributes" /> フラグにより、(たとえば、それに <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> フラグがあるため) メソッドは本文を持つべきではありません。

または -
メソッドはジェネリック メソッドですが、ジェネリック メソッド定義ではありません。 つまり、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
      <summary>このメソッドの実装フラグを返します。</summary>
      <returns>このメソッドの実装フラグを返します。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetParameters">
      <summary>このメソッドのパラメーターを返します。</summary>
      <returns>メソッドへの引数を表す <see langword="ParameterInfo" /> オブジェクトの配列。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用してメソッドを取得し、返された <see langword="GetParameters" /> に対して <see cref="T:System.Reflection.MethodInfo" /> を呼び出します。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.InitLocals">
      <summary>このメソッドのローカル変数をゼロに初期化するかどうかを指定するブール値を取得または設定します。 このプロパティの既定値は <see langword="true" /> です。</summary>
      <returns>このメソッドのローカル変数をゼロに初期化する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">現在のメソッドでは、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティは <see langword="false" /> です。 (取得または設定します。)</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>指定されたバインダーの制約下で、指定されたパラメーターを渡しつつ、指定されたオブジェクトのこのインスタンスによって反映されるメソッドを動的に呼び出します。</summary>
      <param name="obj">指定したメソッドを呼び出す対象となるオブジェクト。 メソッドが静的である場合、このパラメーターは無視されます。</param>
      <param name="invokeAttr">これは <see cref="T:System.Reflection.BindingFlags" /> や <see langword="InvokeMethod" /> など、<see langword="NonPublic" /> からのビット フラグでなければなりません。</param>
      <param name="binder">バインディング、引数型の強制変換、メンバーの呼び出し、リフレクションによる MemberInfo オブジェクトの取得を有効にするオブジェクト。 バインダーが <see langword="null" /> の場合は、既定のバインダーが使用されます。 詳細については、「<see cref="T:System.Reflection.Binder" />」を参照してください。</param>
      <param name="parameters">引数リスト。 これは、呼び出されるメソッドのパラメーターと同じ数、順序、型の引数の配列です。 パラメーターがない場合は、これは <see langword="null" /> である必要があります。</param>
      <param name="culture">型の強制変換を制御するために使用する <see cref="T:System.Globalization.CultureInfo" /> のインスタンス。 null の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。 (これは、1000 を表す <see cref="T:System.String" /> を <see cref="T:System.Double" /> 値に変換する場合などに必要です。カルチャによって 1000 の表記が異なるためです。)</param>
      <returns>呼び出されたメソッドの戻り値を格納するオブジェクトを返します。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用してメソッドを取得し、返された <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> に対して <see cref="T:System.Reflection.MethodInfo" /> を呼び出します。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod" />
    <member name="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>指定されたカスタム属性の型が定義されているかどうかを確認します。</summary>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">このメンバーの継承チェーンを検索してカスタム属性を見つけるかどうかを指定します。</param>
      <returns>指定されたカスタム属性の型が定義されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用してメソッドを取得し、返された <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> に対して <see cref="T:System.Reflection.MethodInfo" /> を呼び出します。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
      <summary>メソッドがジェネリック メソッドかどうかを示す値を取得します。</summary>
      <returns>メソッドがジェネリックの場合、<see langword="true" />。それ以外の場合、<see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
      <summary>現在の <see cref="T:System.Reflection.Emit.MethodBuilder" /> オブジェクトがジェネリック メソッドの定義を表しているかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> オブジェクトがジェネリック メソッドの定義を表している場合は <see cref="T:System.Reflection.Emit.MethodBuilder" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。 このプロパティは、動的アセンブリではサポートされません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。 このプロパティは、動的アセンブリではサポートされません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。 このプロパティは、動的アセンブリではサポートされません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
      <summary>指定したジェネリック型引数を使用して、現在のジェネリック メソッド定義から構築されたジェネリック メソッドを返します。</summary>
      <param name="typeArguments">ジェネリック メソッドの型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。</param>
      <returns>指定したジェネリック型引数を使用して、現在のジェネリック メソッド定義から構築されたジェネリック メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
      <summary>メソッドの内部ハンドルを取得します。 基になるメタデータ ハンドルにアクセスするには、このハンドルを使用します。</summary>
      <returns>読み取り専用です。 メソッドの内部ハンドル。 基になるメタデータ ハンドルにアクセスするには、このハンドルを使用します。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用してメソッドを取得し、返された <see cref="P:System.Reflection.MethodBase.MethodHandle" /> に対して <see cref="T:System.Reflection.MethodInfo" /> を呼び出します。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Module">
      <summary>現在のメソッドが定義されているモジュールを取得します。</summary>
      <returns>現在の <see cref="T:System.Reflection.Module" /> によって表されるメンバーが定義されている <see cref="T:System.Reflection.MemberInfo" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Name">
      <summary>このメソッドの名前を取得します。</summary>
      <returns>読み取り専用です。 このメソッドの簡易名を含む文字列を取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
      <summary>このオブジェクトを取得するためにリフレクションで使用されたクラスを取得します。</summary>
      <returns>読み取り専用です。 このメソッドの取得に使用された型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
      <summary>戻り値の型にカスタム修飾子があるかどうかなど、メソッドの戻り値の型に関する情報を格納している <see cref="T:System.Reflection.ParameterInfo" /> オブジェクトを取得します。</summary>
      <returns>戻り値の型に関する情報を格納している <see cref="T:System.Reflection.ParameterInfo" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">宣言する型が作成されていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnType">
      <summary>この <see cref="T:System.Reflection.Emit.MethodBuilder" /> によって表されるメソッドの戻り値の型を取得します。</summary>
      <returns>メソッドの戻り値の型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
      <summary>メソッドの戻り値の型のカスタム属性を返します。</summary>
      <returns>読み取り専用です。 メソッドの戻り値の型のカスタム属性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>指定されたカスタム属性の blob を使用して、カスタム属性を設定します。</summary>
      <param name="con">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">現在のメソッドでは、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder">カスタム属性を説明するヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">現在のメソッドでは、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary>このメソッドの実装フラグを取得または設定します。</summary>
      <param name="attributes">設定する実装フラグ。</param>
      <exception cref="T:System.InvalidOperationException">含まれている型は、<see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して以前に作成されています。

または -
現在のメソッドでは、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
      <summary>メソッドのパラメーターの数と型を設定します。</summary>
      <param name="parameterTypes">パラメーターの型を表す <see cref="T:System.Type" /> オブジェクトの配列。</param>
      <exception cref="T:System.InvalidOperationException">現在のメソッドはジェネリックですが、ジェネリック メソッド定義ではありません。 つまり、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
      <summary>メソッドの戻り値の型を設定します。</summary>
      <param name="returnType">メソッドの戻り値の型を表す <see cref="T:System.Type" /> オブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">現在のメソッドはジェネリックですが、ジェネリック メソッド定義ではありません。 つまり、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>メソッドのシグネチャを設定します。それには、戻り値の型、パラメーターの型、および戻り値の型とパラメーター型の必須カスタム修飾子と省略可能カスタム修飾子が含まれます。</summary>
      <param name="returnType">メソッドの戻り値の型。</param>
      <param name="returnTypeRequiredCustomModifiers">メソッドの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> など、必須のカスタム修飾子を表す型の配列。 戻り値の型が必須のカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
      <param name="returnTypeOptionalCustomModifiers">メソッドの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、省略可能なカスタム修飾子を表す型の配列。 戻り値の型に省略可能のカスタム修飾子がない場合は、<see langword="null" /> を指定します。</param>
      <param name="parameterTypes">メソッドのパラメーターの型。</param>
      <param name="parameterTypeRequiredCustomModifiers">型の配列の配列。 型の各配列は、<see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、対応するパラメーターの必須のカスタム修飾子を表します。 特定のパラメーターに必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="parameterTypeOptionalCustomModifiers">型の配列の配列。 型の各配列は、<see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、対応するパラメーターの省略可能なカスタム修飾子を表します。 特定のパラメーターに省略可能なカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも省略可能なカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <exception cref="T:System.InvalidOperationException">現在のメソッドはジェネリックですが、ジェネリック メソッド定義ではありません。 つまり、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.ToString">
      <summary>この <see langword="MethodBuilder" /> インスタンスを文字列として返します。</summary>
      <returns>このメソッドの名前、属性、メソッド シグネチャ、例外、ローカル シグネチャ、およびその後に現在の Microsoft intermediate language (MSIL) ストリームを内容とする文字列を返します。</returns>
    </member>
    <member name="T:System.Reflection.Emit.ModuleBuilder">
      <summary>動的アセンブリ内のモジュールを定義および表現します。</summary>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Assembly">
      <summary>この <see cref="T:System.Reflection.Emit.ModuleBuilder" /> インスタンスが定義されている動的アセンブリを取得します。</summary>
      <returns>現在の動的モジュールが定義されている動的アセンブリ。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions">
      <summary>この動的モジュールのグローバル関数定義とグローバル データ定義を完了します。</summary>
      <exception cref="T:System.InvalidOperationException">このメソッドは、既に呼び出されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>指定した型の <paramref name="value__" /> という単一の非静的フィールドと共に、値型の列挙型を定義します。</summary>
      <param name="name">列挙型の完全なパス。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="visibility">列挙型の型属性。 属性は、<see cref="F:System.Reflection.TypeAttributes.VisibilityMask" /> で定義された任意のビットです。</param>
      <param name="underlyingType">列挙型の基になる型。 これは、組み込みの整数型にする必要があります。</param>
      <returns>定義された列挙型。</returns>
      <exception cref="T:System.ArgumentException">可視属性以外の属性が指定されています。

または -
指定された名前の列挙型が、このモジュールの親アセンブリに存在します。

または -
可視属性が列挙型のスコープと一致しません。 たとえば、<see cref="F:System.Reflection.TypeAttributes.NestedPublic" /> が<paramref name="visibility" /> に指定されていて、列挙型が入れ子にされた型ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>名前、属性、呼び出し規約、戻り値の型、およびパラメーター型を指定して、グローバル メソッドを定義します。</summary>
      <param name="name">メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes">メソッドの属性。 <paramref name="attributes" /> には <see cref="F:System.Reflection.MethodAttributes.Static" /> を含める必要があります。</param>
      <param name="callingConvention">メソッドの呼び出し規則。</param>
      <param name="returnType">メソッドの戻り値の型。</param>
      <param name="parameterTypes">メソッドのパラメーター型。</param>
      <returns>定義されたグローバル メソッド。</returns>
      <exception cref="T:System.ArgumentException">メソッドは静的ではありません。 つまり、<paramref name="attributes" /> に <see cref="F:System.Reflection.MethodAttributes.Static" /> が含まれていません。

または -
<see cref="T:System.Type" /> 配列の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> は以前に呼び出されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>名前、属性、呼び出し規約、戻り値の型、戻り値の型のカスタム修飾子、パラメーター型、およびパラメーター型のカスタム修飾子を指定して、グローバル メソッドを定義します。</summary>
      <param name="name">メソッドの名前。 <paramref name="name" /> に null 文字を埋め込むことはできません。</param>
      <param name="attributes">メソッドの属性。 <paramref name="attributes" /> には <see cref="F:System.Reflection.MethodAttributes.Static" /> を含める必要があります。</param>
      <param name="callingConvention">メソッドの呼び出し規則。</param>
      <param name="returnType">メソッドの戻り値の型。</param>
      <param name="requiredReturnTypeCustomModifiers">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> や <see cref="T:System.Runtime.CompilerServices.IsBoxed" /> などの、戻り値の型の必須のカスタム修飾子を表す型の配列。 戻り値の型が必須のカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
      <param name="optionalReturnTypeCustomModifiers">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> や <see cref="T:System.Runtime.CompilerServices.IsBoxed" /> などの、戻り値の型のオプションのカスタム修飾子を表す型の配列。 戻り値の型に省略可能のカスタム修飾子がない場合は、<see langword="null" /> を指定します。</param>
      <param name="parameterTypes">メソッドのパラメーター型。</param>
      <param name="requiredParameterTypeCustomModifiers">型の配列の配列。 型の各配列は、グローバル メソッドの対応するパラメーターの必須のカスタム修飾子を表します。 特定の引数に必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 グローバル メソッドに引数がない場合、またはどの引数にも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="optionalParameterTypeCustomModifiers">型の配列の配列。 型の各配列は、対応するパラメーターのオプションのカスタム修飾子を表します。 特定の引数にオプションのカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 グローバル メソッドに引数がない場合、またはどの引数にもオプションのカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <returns>定義されたグローバル メソッド。</returns>
      <exception cref="T:System.ArgumentException">メソッドは静的ではありません。 つまり、<paramref name="attributes" /> に <see cref="F:System.Reflection.MethodAttributes.Static" /> が含まれていません。

または -
<see cref="T:System.Type" /> 配列の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> メソッドは既に呼び出されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>名前、属性、戻り値の型、およびパラメーター型を指定して、グローバル メソッドを定義します。</summary>
      <param name="name">メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes">メソッドの属性。 <paramref name="attributes" /> には <see cref="F:System.Reflection.MethodAttributes.Static" /> を含める必要があります。</param>
      <param name="returnType">メソッドの戻り値の型。</param>
      <param name="parameterTypes">メソッドのパラメーター型。</param>
      <returns>定義されたグローバル メソッド。</returns>
      <exception cref="T:System.ArgumentException">メソッドは静的ではありません。 つまり、<paramref name="attributes" /> に <see cref="F:System.Reflection.MethodAttributes.Static" /> が含まれていません。

または -
<paramref name="name" /> の長さが 0 です。
または -
<see cref="T:System.Type" /> 配列の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> は以前に呼び出されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>移植可能な実行可能 (PE) ファイルの .sdata セクションに、初期化済みデータ フィールドを定義します。</summary>
      <param name="name">データを参照するために使用する名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="data">データのバイナリ ラージ オブジェクト (BLOB)。</param>
      <param name="attributes">フィールドの属性。 既定値は、<see langword="Static" /> です。</param>
      <returns>データを参照するフィールド。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の長さが 0 です。

または -
<paramref name="data" /> のサイズが 0 以下か、0x3f0000 以上です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="data" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> は以前に呼び出されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>メソッド名、メソッドが定義される DLL の名前、メソッドの属性、メソッドの呼び出し規約、メソッドの戻り値の型、メソッドのパラメーターの型、および <see langword="PInvoke" /> フラグを指定して、<see langword="PInvoke" /> メソッドを定義します。</summary>
      <param name="name">
        <see langword="PInvoke" /> メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="dllName">
        <see langword="PInvoke" /> メソッドが定義されている DLL の名前。</param>
      <param name="attributes">メソッドの属性。</param>
      <param name="callingConvention">メソッドの呼び出し規則。</param>
      <param name="returnType">メソッドの戻り値の型。</param>
      <param name="parameterTypes">メソッドのパラメーター型。</param>
      <param name="nativeCallConv">ネイティブ呼び出し規則。</param>
      <param name="nativeCharSet">メソッドのネイティブ文字セット。</param>
      <returns>定義された <see langword="PInvoke" /> メソッド。</returns>
      <exception cref="T:System.ArgumentException">メソッドが静的でないか、格納している型がインターフェイスです。

または -

抽象メソッドです。

または -

メソッドは以前に定義されています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="dllName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">含んでいる型が <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して以前に作成されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>メソッド名、メソッドが定義される DLL の名前、メソッドの属性、メソッドの呼び出し規約、メソッドの戻り値の型、メソッドのパラメーターの型、および <see langword="PInvoke" /> フラグを指定して、<see langword="PInvoke" /> メソッドを定義します。</summary>
      <param name="name">
        <see langword="PInvoke" /> メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="dllName">
        <see langword="PInvoke" /> メソッドが定義されている DLL の名前。</param>
      <param name="entryName">DLL 内のエントリ ポイントの名前。</param>
      <param name="attributes">メソッドの属性。</param>
      <param name="callingConvention">メソッドの呼び出し規則。</param>
      <param name="returnType">メソッドの戻り値の型。</param>
      <param name="parameterTypes">メソッドのパラメーター型。</param>
      <param name="nativeCallConv">ネイティブ呼び出し規則。</param>
      <param name="nativeCharSet">メソッドのネイティブ文字セット。</param>
      <returns>定義された <see langword="PInvoke" /> メソッド。</returns>
      <exception cref="T:System.ArgumentException">メソッドが静的でないか、格納している型がインターフェイスです。または、メソッドが既に定義されている場合は、メソッドが抽象メソッドです。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="dllName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">含んでいる型が <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して以前に作成されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)">
      <summary>このモジュールで、指定した名前のプライベート型の <see langword="TypeBuilder" /> を構築します。</summary>
      <param name="name">名前空間を含む、型の完全なパス。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <returns>指定した名前のプライベート型。</returns>
      <exception cref="T:System.ArgumentException">指定された名前の型が、このモジュールの親アセンブリに存在します。

または -

入れ子にされた型の属性は、入れ子になっていない型に対して設定されます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)">
      <summary>型名と型属性を指定して、<see langword="TypeBuilder" /> を構築します。</summary>
      <param name="name">型の完全なパス。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr">定義された型の属性。</param>
      <returns>要求された属性をすべて指定して作成された <see langword="TypeBuilder" />。</returns>
      <exception cref="T:System.ArgumentException">指定された名前の型が、このモジュールの親アセンブリに存在します。

または -

入れ子にされた型の属性は、入れ子になっていない型に対して設定されます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>型名、属性、および定義された型によって拡張される型を指定して、<see langword="TypeBuilder" /> を構築します。</summary>
      <param name="name">型の完全なパス。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr">型に関連付ける属性。</param>
      <param name="parent">定義された型を拡張する型。</param>
      <returns>要求された属性をすべて指定して作成された <see langword="TypeBuilder" />。</returns>
      <exception cref="T:System.ArgumentException">指定された名前の型が、このモジュールの親アセンブリに存在します。

または -

入れ子にされた型の属性は、入れ子になっていない型に対して設定されます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>型名、属性、定義された型によって拡張される型、および型の合計サイズを指定して、<see langword="TypeBuilder" /> を構築します。</summary>
      <param name="name">型の完全なパス。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr">定義された型の属性。</param>
      <param name="parent">定義された型を拡張する型。</param>
      <param name="typesize">型の合計サイズ。</param>
      <returns>
        <see langword="TypeBuilder" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException">指定された名前の型が、このモジュールの親アセンブリに存在します。

または -

入れ子にされた型の属性は、入れ子になっていない型に対して設定されます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>型名、属性、定義された型によって拡張される型、および型のパッキング サイズを指定して、<see langword="TypeBuilder" /> を構築します。</summary>
      <param name="name">型の完全なパス。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr">定義された型の属性。</param>
      <param name="parent">定義された型を拡張する型。</param>
      <param name="packsize">型のパッキング サイズ。</param>
      <returns>
        <see langword="TypeBuilder" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException">指定された名前の型が、このモジュールの親アセンブリに存在します。

または -

入れ子にされた型の属性は、入れ子になっていない型に対して設定されます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary>型名、属性、定義された型によって拡張される型、定義された型のパッキング サイズ、および定義された型の合計サイズを指定して、<see langword="TypeBuilder" /> を構築します。</summary>
      <param name="name">型の完全なパス。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr">定義された型の属性。</param>
      <param name="parent">定義された型を拡張する型。</param>
      <param name="packingSize">型のパッキング サイズ。</param>
      <param name="typesize">型の合計サイズ。</param>
      <returns>要求された属性をすべて指定して作成された <see langword="TypeBuilder" />。</returns>
      <exception cref="T:System.ArgumentException">指定された名前の型が、このモジュールの親アセンブリに存在します。

または -

入れ子にされた型の属性は、入れ子になっていない型に対して設定されます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>型名、属性、定義された型によって拡張される型、および定義された型によって実装されるインターフェイスを指定して、<see langword="TypeBuilder" /> を構築します。</summary>
      <param name="name">型の完全なパス。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr">型に関連付ける属性。</param>
      <param name="parent">定義された型を拡張する型。</param>
      <param name="interfaces">型が実装するインターフェイスのリスト。</param>
      <returns>要求された属性をすべて指定して作成された <see langword="TypeBuilder" />。</returns>
      <exception cref="T:System.ArgumentException">指定された名前の型が、このモジュールの親アセンブリに存在します。

または -

入れ子にされた型の属性は、入れ子になっていない型に対して設定されます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>ポータブル実行可能 (PE) ファイルの .sdata セクションの初期化されていないデータ フィールドを定義します。</summary>
      <param name="name">データを参照するために使用する名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="size">データ フィールドのサイズ。</param>
      <param name="attributes">フィールドの属性。</param>
      <returns>データを参照するフィールド。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の長さが 0 です。

または -
<paramref name="size" /> が 0 以下か、0x003f0000 以上です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> は以前に呼び出されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <param name="obj">対象のインスタンスと比較する対象のオブジェクト、または <see langword="null" />。</param>
      <returns>
        <see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName">
      <summary>このモジュールの完全修飾名とパスを表す <see langword="String" /> を取得します。</summary>
      <returns>モジュールの完全修飾名。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>配列クラスの名前付きメソッドを返します。</summary>
      <param name="arrayClass">配列クラス。</param>
      <param name="methodName">配列クラスのメソッドの名前。</param>
      <param name="callingConvention">メソッドの呼び出し規則。</param>
      <param name="returnType">メソッドの戻り値の型。</param>
      <param name="parameterTypes">メソッドのパラメーター型。</param>
      <returns>配列クラスの名前付きメソッド。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayClass" /> が配列ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arrayClass" /> または <paramref name="methodName" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)">
      <summary>現在の <see cref="T:System.Reflection.Emit.ModuleBuilder" /> に適用されたカスタム属性をすべて返します。</summary>
      <param name="inherit">この型のオブジェクトでは、この引数は無視されます。</param>
      <returns>カスタム属性を含む配列。属性がない場合、配列は空です。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>現在の <see cref="T:System.Reflection.Emit.ModuleBuilder" /> に適用されており、指定された属性の型から派生するすべてのカスタム属性を返します。</summary>
      <param name="attributeType">属性の派生元となる基本型。</param>
      <param name="inherit">この型のオブジェクトでは、この引数は無視されます。</param>
      <returns>
        <paramref name="attributeType" /> の任意のレベルから派生したカスタム属性を含む配列。そのような属性がない場合、配列は空です。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" />は、ランタイムによって提供された <see cref="T:System.Type" /> オブジェクトではありません。 たとえば、<paramref name="attributeType" /> は <see cref="T:System.Reflection.Emit.TypeBuilder" /> オブジェクトです。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData">
      <summary>現在の <see cref="T:System.Reflection.Emit.ModuleBuilder" /> に適用されている属性に関する情報を、<see cref="T:System.Reflection.CustomAttributeData" /> オブジェクトとして返します。</summary>
      <returns>現在のモジュールに適用されている属性に関するデータを表す <see cref="T:System.Reflection.CustomAttributeData" /> オブジェクトのジェネリック リスト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>移植可能な実行可能 (PE) ファイルの .sdata セクションに定義されている、指定した名前とバインディング属性を持つモジュール レベルのフィールドを返します。</summary>
      <param name="name">フィールド名。</param>
      <param name="bindingAttr">検索を制御するために使用される <see langword="BindingFlags" /> ビット フラグの組み合わせ。</param>
      <returns>指定した名前とバインディング属性を持つフィールド。フィールドが存在しない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>移植可能な実行可能 (PE) ファイルの .sdata セクションに定義されている、指定したバインディング フラグに一致するすべてのフィールドを返します。</summary>
      <param name="bindingFlags">検索を制御するために使用される <see langword="BindingFlags" /> ビット フラグの組み合わせ。</param>
      <returns>指定したフラグに一致するフィールドの配列。このようなフィールドが存在しない場合、配列は空になります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>現在の <see cref="T:System.Reflection.Emit.ModuleBuilder" /> に対してモジュール レベルで定義され、指定したバインディング フラグに一致するすべてのメソッドを返します。</summary>
      <param name="bindingFlags">検索を制御するために使用される <see langword="BindingFlags" /> ビット フラグの組み合わせ。</param>
      <returns>
        <paramref name="bindingFlags" /> に一致するすべてのモジュール レベルのメソッドを含む配列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)">
      <summary>モジュール内のコードの性質およびモジュールの対象プラットフォームを示す値のペアを取得します。</summary>
      <param name="peKind">このメソッドから制御が戻る場合、モジュール内のコードの性質を示す <see cref="T:System.Reflection.PortableExecutableKinds" /> 値の組み合わせ。</param>
      <param name="machine">このメソッドから制御が戻る場合、モジュールの対象プラットフォームを示す <see cref="T:System.Reflection.ImageFileMachine" /> 値の 1 つ。</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String)">
      <summary>このモジュールで定義されている名前付きの型を取得します。</summary>
      <param name="className">取得する <see cref="T:System.Type" /> の名前。</param>
      <returns>型がこのモジュールで定義されている場合は要求された型。それ以外の場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> の長さが 0 か、または 1023 を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">要求された <see cref="T:System.Type" /> がパブリックではなく、呼び出し元には、現在のアセンブリ外の非パブリック オブジェクトをリフレクトするための <see cref="T:System.Security.Permissions.ReflectionPermission" /> がありません。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">クラス初期化子が呼び出され、例外をスローします。</exception>
      <exception cref="T:System.TypeLoadException">
        <see cref="T:System.Type" /> の読み込み中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)">
      <summary>オプションで型名の大文字小文字の区別を無視して、モジュールで定義されている名前付きの型を取得します。</summary>
      <param name="className">取得する <see cref="T:System.Type" /> の名前。</param>
      <param name="ignoreCase">
        <see langword="true" /> の場合、検索では、大文字と小文字を区別しません。 <see langword="false" /> の場合、検索では、大文字と小文字が区別されます。</param>
      <returns>型がこのモジュールで定義されている場合は要求された型。それ以外の場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> の長さが 0 か、または 1023 を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">要求された <see cref="T:System.Type" /> がパブリックではなく、呼び出し元には、現在のアセンブリ外の非パブリック オブジェクトをリフレクトするための <see cref="T:System.Security.Permissions.ReflectionPermission" /> がありません。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">クラス初期化子が呼び出され、例外をスローします。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>オプションで型名の大文字小文字の区別を無視して、モジュールで定義されている名前付きの型を取得します。 型が見つからないときに例外をスローすることもできます。</summary>
      <param name="className">取得する <see cref="T:System.Type" /> の名前。</param>
      <param name="throwOnError">型が見つからなかったときに例外をスローする場合は <see langword="true" />。<see langword="false" /> を返す場合は <see langword="null" />。</param>
      <param name="ignoreCase">
        <see langword="true" /> の場合、検索では、大文字と小文字を区別しません。 <see langword="false" /> の場合、検索では、大文字と小文字が区別されます。</param>
      <returns>型がこのモジュールで宣言されている場合は、指定した型。それ以外の場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> の長さが 0 か、または 1023 を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Security.SecurityException">要求された <see cref="T:System.Type" /> がパブリックではなく、呼び出し元には、現在のアセンブリ外の非パブリック オブジェクトをリフレクトするための <see cref="T:System.Security.Permissions.ReflectionPermission" /> がありません。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">クラス初期化子が呼び出され、例外をスローします。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> が <see langword="true" /> で、指定した型が見つかりません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypes">
      <summary>このモジュールで定義されているすべてのクラスを返します。</summary>
      <returns>このインスタンスによってリフレクトされたモジュールで定義されている型を格納している配列。</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">モジュールの 1 つまたは複数のクラスを読み込むことができませんでした。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>指定された属性型がこのモジュールに適用されているかどうかを示す値を返します。</summary>
      <param name="attributeType">テストするカスタム属性の型。</param>
      <param name="inherit">この型のオブジェクトでは、この引数は無視されます。</param>
      <returns>このモジュールに <paramref name="attributeType" /> のインスタンスが 1 つ以上適用されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" />は、ランタイムによって提供された <see cref="T:System.Type" /> オブジェクトではありません。 たとえば、<paramref name="attributeType" /> は <see cref="T:System.Reflection.Emit.TypeBuilder" /> オブジェクトです。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsResource">
      <summary>オブジェクトがリソースかどうかを示す値を取得します。</summary>
      <returns>オブジェクトがリソースである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MDStreamVersion">
      <summary>メタデータ ストリーム バージョンを取得します。</summary>
      <returns>メタデータ ストリーム バージョンを表す 32 ビットの整数。 上位 2 バイトはメジャー バージョン番号を表し、下位 2 バイトはマイナー バージョン番号を表します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MetadataToken">
      <summary>メタデータ内の現在の動的モジュールを識別するトークンを取得します。</summary>
      <returns>メタデータ内の現在モジュールを識別する整数トークン。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ModuleVersionId">
      <summary>モジュールの 2 つのバージョンを区別するために使用できる汎用一意識別子 (UUID) を取得します。</summary>
      <returns>モジュールの 2 つのバージョンを区別するために使用できる <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Name">
      <summary>これがメモリ内モジュールであることを示す文字列。</summary>
      <returns>これがメモリ内モジュールであることを示すテキスト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveField(System.Int32,System.Type[],System.Type[])">
      <summary>指定したジェネリック型パラメーターで定義されたコンテキストの、指定したメタデータ トークンで識別されるフィールドを返します。</summary>
      <param name="metadataToken">モジュール内のフィールドを識別するメタデータ トークン。</param>
      <param name="genericTypeArguments">トークンがスコープ内にある型のジェネリック型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。その型がジェネリックではない場合は <see langword="null" />。</param>
      <param name="genericMethodArguments">トークンがスコープ内にあるメソッドのジェネリック型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。そのメソッドがジェネリックではない場合は <see langword="null" />。</param>
      <returns>指定したメタデータ トークンで識別されるフィールドを表す <see cref="T:System.Reflection.FieldInfo" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープに含まれるフィールドのトークンではありません。

または -
<paramref name="metadataToken" /> は、親 <see langword="TypeSpec" /> が要素型 <see langword="var" /> (ジェネリック型の型パラメーター) または <see langword="mvar" /> (ジェネリック メソッドの型パラメーター) を含む署名を持つフィールドを識別しますが、必要なジェネリック型引数が <paramref name="genericTypeArguments" /> と <paramref name="genericMethodArguments" /> の両方またはいずれかに提供されていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープで有効なトークンではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMember(System.Int32,System.Type[],System.Type[])">
      <summary>指定したジェネリック型パラメーターで定義されたコンテキストの、指定したメタデータ トークンで識別される型またはメンバーを返します。</summary>
      <param name="metadataToken">モジュール内の型またはメンバーを識別するメタデータ トークン。</param>
      <param name="genericTypeArguments">トークンがスコープ内にある型のジェネリック型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。その型がジェネリックではない場合は <see langword="null" />。</param>
      <param name="genericMethodArguments">トークンがスコープ内にあるメソッドのジェネリック型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。そのメソッドがジェネリックではない場合は <see langword="null" />。</param>
      <returns>指定したメタデータ トークンで識別される型またはメンバーを表す <see cref="T:System.Reflection.MemberInfo" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープ内の型またはメンバーのトークンではありません。

または -
<paramref name="metadataToken" /> は、要素型 <see langword="var" /> (ジェネリック型の型パラメーター) または <see langword="mvar" /> (ジェネリック メソッドの型パラメーター) を含むシグネチャを持つ <see langword="MethodSpec" /> または <see langword="TypeSpec" /> ですが、必要なジェネリック型の引数が <paramref name="genericTypeArguments" /> と <paramref name="genericMethodArguments" /> の両方またはいずれかに提供されていません。

または -
<paramref name="metadataToken" /> は、プロパティまたはイベントを識別します。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープで有効なトークンではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary>指定したジェネリック型パラメーターで定義されたコンテキストの、指定したメタデータ トークンで識別されるメソッドまたはコンストラクターを返します。</summary>
      <param name="metadataToken">メソッドまたはモジュール内のコンス トラクターを識別するメタデータ トークン。</param>
      <param name="genericTypeArguments">トークンがスコープ内にある型のジェネリック型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。その型がジェネリックではない場合は <see langword="null" />。</param>
      <param name="genericMethodArguments">トークンがスコープ内にあるメソッドのジェネリック型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。そのメソッドがジェネリックではない場合は <see langword="null" />。</param>
      <returns>指定したメタデータ トークンで識別されるメソッドを表す <see cref="T:System.Reflection.MethodBase" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープに含まれるメソッドまたはコンストラクターのトークンではありません。

または -
<paramref name="metadataToken" /> は、要素型 <see langword="var" /> (ジェネリック型の型パラメーター) または <see langword="mvar" /> (ジェネリック メソッドの型パラメーター) を含むシグネチャを持つ <see langword="MethodSpec" /> ですが、必要なジェネリック型引数が <paramref name="genericTypeArguments" /> と <paramref name="genericMethodArguments" />.の両方またはいずれかに提供されていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープで有効なトークンではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveSignature(System.Int32)">
      <summary>メタデータ トークンで識別されるシグネチャ BLOB を返します。</summary>
      <param name="metadataToken">モジュール内のシグネチャを識別するメタデータ トークン。</param>
      <returns>シグネチャ BLOB を表すバイトの配列。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープで有効な <see langword="MemberRef" />、<see langword="MethodDef" />、<see langword="TypeSpec" />、シグネチャ、または <see langword="FieldDef" /> トークンではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープで有効なトークンではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)">
      <summary>指定したメタデータ トークンで識別される文字列を返します。</summary>
      <param name="metadataToken">モジュールの文字列ヒープ内の文字列を識別するメタデータ トークン。</param>
      <returns>メタデータの文字列ヒープの文字列値を格納する <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープ内の文字列のトークンではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープで有効なトークンではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary>指定したジェネリック型パラメーターで定義されたコンテキストの、指定したメタデータ トークンで識別される型を返します。</summary>
      <param name="metadataToken">モジュール内の型を識別するメタデータ トークン。</param>
      <param name="genericTypeArguments">トークンがスコープ内にある型のジェネリック型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。その型がジェネリックではない場合は <see langword="null" />。</param>
      <param name="genericMethodArguments">トークンがスコープ内にあるメソッドのジェネリック型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。そのメソッドがジェネリックではない場合は <see langword="null" />。</param>
      <returns>指定したメタデータ トークンで識別される型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープに含まれる型のトークンではありません。

または -
<paramref name="metadataToken" /> は、要素型 <see langword="var" /> (ジェネリック型の型パラメーター) または <see langword="mvar" /> (ジェネリック メソッドの型パラメーター) を含むシグネチャを持つ <see langword="TypeSpec" /> ですが、必要なジェネリック型引数が <paramref name="genericTypeArguments" /> と <paramref name="genericMethodArguments" />.の両方またはいずれかに提供されていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープで有効なトークンではありません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ScopeName">
      <summary>動的モジュールの名前を表す文字列を取得します。</summary>
      <returns>動的アセンブリの名前。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>属性を表す指定したバイナリ ラージ オブジェクト (BLOB) を使用して、カスタム属性をこのモジュールに適用します。</summary>
      <param name="con">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute">属性を表すバイト BLOB。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>カスタム属性ビルダーを使用して、カスタム属性をこのモジュールに適用します。</summary>
      <param name="customBuilder">適用するカスタム属性を指定するためのヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Reflection.Emit.PropertyBuilder">
      <summary>型のプロパティを定義します。</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>このプロパティに関連付ける別のメソッドを追加します。</summary>
      <param name="mdBuilder">他のメソッドを表す <see langword="MethodBuilder" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Attributes">
      <summary>このプロパティの属性を取得します。</summary>
      <returns>このプロパティの属性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanRead">
      <summary>プロパティを読み取ることができるかどうかを示す値を取得します。</summary>
      <returns>このプロパティを読み取ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
      <summary>プロパティに書き込むことができるかどうかを示す値を取得します。</summary>
      <returns>このプロパティに書き込むことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
      <summary>このメンバーを宣言するクラスを取得します。</summary>
      <returns>このメンバーを宣言するクラスの <see langword="Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
      <summary>このプロパティのパブリックおよび非パブリックな <see langword="get" /> アクセサーと <see langword="set" /> アクセサーの配列を返します。</summary>
      <param name="nonPublic">
        <see langword="MethodInfo" /> 配列で非パブリック メソッドを返すかどうかを示します。 非パブリック メソッドが含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>一致するパブリック アクセサーまたは非パブリック アクセサーを格納している <see langword="MethodInfo" /> 型の配列。このプロパティに一致するアクセサーがない場合は、空の配列。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
      <summary>このプロパティのすべてのカスタム属性の配列を返します。</summary>
      <param name="inherit">このプロパティの継承チェーンを検索して、カスタム属性を見つける場合は <see langword="true" />。</param>
      <returns>すべてのカスタム属性の配列。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
        <see cref="T:System.Type" /> によって識別されるカスタム属性の配列を返します。</summary>
      <param name="attributeType">型により識別されるカスタム属性の配列。</param>
      <param name="inherit">このプロパティの継承チェーンを検索して、カスタム属性を見つける場合は <see langword="true" />。</param>
      <returns>リフレクションされたメンバーに定義されているカスタム属性の配列。このメンバーに定義されている属性がない場合は <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
      <summary>このプロパティのパブリックおよび非パブリックな get アクセサーを返します。</summary>
      <param name="nonPublic">非パブリックな get アクセサーを返すかどうかを示します。 非パブリック メソッドが含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>
        <paramref name="nonPublic" /> が <see langword="MethodInfo" /> の場合は、このプロパティの get アクセサーを表す <see langword="true" /> オブジェクト。 <paramref name="nonPublic" /> が <see langword="null" /> で get アクセサーが非パブリックの場合、または <paramref name="nonPublic" /> が <see langword="false" /> でも get アクセサーがない場合は、<see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
      <summary>プロパティのすべてのインデックス パラメーターの配列を返します。</summary>
      <returns>インデックスのパラメーターを格納している <see langword="ParameterInfo" /> 型の配列。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
      <summary>このプロパティの set アクセサーを返します。</summary>
      <param name="nonPublic">パブリックでないアクセサーの場合に、アクセサーを返すかどうかを示します。 非パブリック メソッドが含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>次の表に示すように、プロパティの <see langword="Set" /> メソッド、または <see langword="null" />。
  [値] 
  条件 
  このプロパティの set メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクト。  
  
  set アクセサーがパブリック。  
  
 <paramref name="nonPublic" /> が true で、非パブリック メソッドを返すことができる。  
  
  null 
 <paramref name="nonPublic" /> が true で、プロパティが読み取り専用。  
  
 <paramref name="nonPublic" /> が false で set アクセサーが非パブリック。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
      <summary>プロパティの取得側メソッドを呼び出して、インデックス付きプロパティの値を取得します。</summary>
      <param name="obj">プロパティ値が返されるオブジェクト。</param>
      <param name="index">インデックス付きプロパティのインデックス値 (省略可能)。 インデックス付きでないプロパティの場合は、この値を <see langword="null" /> にする必要があります。</param>
      <returns>指定したインデックス付きプロパティの値。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>指定したバインディング、インデックス、および <see langword="CultureInfo" /> のプロパティの値を取得します。</summary>
      <param name="obj">プロパティ値が返されるオブジェクト。</param>
      <param name="invokeAttr">呼び出し属性。 <see langword="BindingFlags" /> のビット フラグ <see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="Static" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" />、または <see langword="SetProperty" /> にする必要があります。 適切な呼び出し属性を指定する必要があります。 静的メンバーを呼び出す場合は、<see langword="Static" /> の <see langword="BindingFlags" /> フラグを設定する必要があります。</param>
      <param name="binder">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションを使用した <see langword="MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。 <paramref name="binder" /> が <see langword="null" /> の場合は、既定のバインダーが使用されます。</param>
      <param name="index">インデックス付きプロパティのインデックス値 (省略可能)。 インデックス付きでないプロパティの場合は、この値を <see langword="null" /> にする必要があります。</param>
      <param name="culture">リソースのローカライズ対象のカルチャを表す <see langword="CultureInfo" /> オブジェクト。 リソースがこのカルチャ用にローカライズされていない場合は、一致する対象を検索するために <see langword="CultureInfo.Parent" /> メソッドが連続して呼び出されます。 この値が <see langword="null" /> の場合は、<see langword="CultureInfo" /> プロパティから <see langword="CultureInfo.CurrentUICulture" /> が取得されます。</param>
      <returns>
        <paramref name="obj" /> のプロパティ値。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>このプロパティに <paramref name="attributeType" /> のインスタンスが 1 つ以上定義されているかどうかを示します。</summary>
      <param name="attributeType">カスタム属性が適用される <see langword="Type" /> オブジェクト。</param>
      <param name="inherit">このプロパティの継承チェーンを検索して、カスタム属性を見つけるかどうかを指定します。</param>
      <returns>このプロパティに <paramref name="attributeType" /> のインスタンスが 1 つ以上定義されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Module">
      <summary>現在のプロパティを宣言している型が定義されているモジュールを取得します。</summary>
      <returns>現在のプロパティを宣言している型が定義されている <see cref="T:System.Reflection.Module" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Name">
      <summary>このメンバーの名前を取得します。</summary>
      <returns>このメンバーの名前を格納している <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
      <summary>このプロパティのフィールドの型を取得します。</summary>
      <returns>このプロパティの型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
      <summary>
        <see langword="MemberInfo" /> のこのインスタンスを取得するために使用したクラス オブジェクトを取得します。</summary>
      <returns>この <see langword="Type" /> オブジェクトを取得するために使用した <see langword="MemberInfo" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
      <summary>このプロパティの既定値を設定します。</summary>
      <param name="defaultValue">このプロパティの既定値。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
      <exception cref="T:System.ArgumentException">プロパティが、サポートされている型のいずれでもありません。

または -
<paramref name="defaultValue" /> の型がプロパティの型と一致しません。

または -
プロパティが <see cref="T:System.Object" /> 型または他の参照型であり、<paramref name="defaultValue" /> が <see langword="null" /> ではなく、値を参照型に割り当てることができません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>指定されたカスタム属性の blob を使用して、カスタム属性を設定します。</summary>
      <param name="con">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder">カスタム属性を定義するヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>プロパティ値を取得するメソッドを設定します。</summary>
      <param name="mdBuilder">プロパティ値を取得するメソッドを表す <see langword="MethodBuilder" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>プロパティ値を設定するメソッドを設定します。</summary>
      <param name="mdBuilder">プロパティ値を設定するメソッドを表す <see langword="MethodBuilder" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
      <summary>プロパティの値を設定します。インデックス付きプロパティの場合は、オプションでインデックス値を設定できます。</summary>
      <param name="obj">プロパティ値が設定されるオブジェクト。</param>
      <param name="value">このプロパティの新しい値。</param>
      <param name="index">インデックス付きプロパティのインデックス値 (省略可能)。 インデックス付きでないプロパティの場合は、この値を <see langword="null" /> にする必要があります。</param>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>指定したオブジェクトのプロパティ値に、指定した値を設定します。</summary>
      <param name="obj">プロパティ値が返されるオブジェクト。</param>
      <param name="value">このプロパティの新しい値。</param>
      <param name="invokeAttr">呼び出し属性。 <see langword="BindingFlags" /> のビット フラグ <see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="Static" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" />、または <see langword="SetProperty" /> にする必要があります。 適切な呼び出し属性を指定する必要があります。 静的メンバーを呼び出す場合は、<see langword="Static" /> の <see langword="BindingFlags" /> フラグを設定する必要があります。</param>
      <param name="binder">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションを使用した <see langword="MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。 <paramref name="binder" /> が <see langword="null" /> の場合は、既定のバインダーが使用されます。</param>
      <param name="index">インデックス付きプロパティのインデックス値 (省略可能)。 インデックス付きでないプロパティの場合は、この値を <see langword="null" /> にする必要があります。</param>
      <param name="culture">リソースのローカライズ対象のカルチャを表す <see langword="CultureInfo" /> オブジェクト。 リソースがこのカルチャ用にローカライズされていない場合は、一致する対象を検索するために <see langword="CultureInfo.Parent" /> メソッドが連続して呼び出されます。 この値が <see langword="null" /> の場合は、<see langword="CultureInfo" /> プロパティから <see langword="CultureInfo.CurrentUICulture" /> が取得されます。</param>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。</exception>
    </member>
    <member name="T:System.Reflection.Emit.TypeBuilder">
      <summary>実行時のクラスの新しいインスタンスを定義し、作成します。</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)">
      <summary>この型が実装するインターフェイスを追加します。</summary>
      <param name="interfaceType">この型が実装するインターフェイス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Assembly">
      <summary>この型の定義を含む動的アセンブリを取得します。</summary>
      <returns>読み取り専用。 この型の定義を含む動的アセンブリを取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName">
      <summary>アセンブリの表示名で修飾されたこの型の完全名を返します。</summary>
      <returns>読み取り専用。 アセンブリの表示名で修飾されたこの型の完全名。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.BaseType">
      <summary>この型の基本データ型を取得します。</summary>
      <returns>読み取り専用。 この型の基本データ型を取得します。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateType">
      <summary>クラスの <see cref="T:System.Type" /> オブジェクトを作成します。 フィールドおよびメソッドをクラスで定義した後、<see langword="Type" /> オブジェクトを読みこむために <see langword="CreateType" /> が呼び出されます。</summary>
      <returns>このクラスの新しい <see cref="T:System.Type" /> オブジェクトを返します。</returns>
      <exception cref="T:System.InvalidOperationException">囲む型が作成されていません。

または -

この型は非抽象であり、抽象メソッドを含んでいます。

または -

この型は抽象クラスまたはインターフェイスではなく、メソッド本体のないメソッドを持ちます。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Reflection.Emit.ILGenerator" /> 内の正しくないラベル コンテンツ: <see cref="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)" /> を呼び出さずにラベルが定義されています。</exception>
      <exception cref="T:System.NotSupportedException">この型は正しくない MSIL (Microsoft Intermediate Language) コードを含んでいます。

または -

分岐ターゲットは 1 バイト オフセットを使用して指定されますが、ターゲットは分岐点から 127 バイトを超える距離にあります。</exception>
      <exception cref="T:System.TypeLoadException">型を読み込めません。 たとえば、呼び出し規則 <see cref="F:System.Reflection.CallingConventions.HasThis" /> を持つ <see langword="static" /> メソッドを含んでいます。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo">
      <summary>この型を表す <see cref="T:System.Reflection.TypeInfo" /> オブジェクトを取得します。</summary>
      <returns>この型を表すオブジェクト。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod">
      <summary>現在のジェネリック型パラメーターを宣言したメソッドを取得します。</summary>
      <returns>現在の型がジェネリック型パラメーターである場合は、現在の型を宣言したメソッドを表す <see cref="T:System.Reflection.MethodBase" />、それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringType">
      <summary>この型を宣言した型を返します。</summary>
      <returns>読み取り専用。 この型を宣言した型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
      <summary>型に、指定した属性およびシグネチャの新しいコンストラクターを追加します。</summary>
      <param name="attributes">コンストラクターの属性。</param>
      <param name="callingConvention">コンストラクターの呼び出し規約。</param>
      <param name="parameterTypes">コンストラクターのパラメーター型。</param>
      <returns>定義済みのコンストラクター。</returns>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])">
      <summary>指定された属性、署名、およびカスタム修飾子で、型に新しいコンストラクターを追加します。</summary>
      <param name="attributes">コンストラクターの属性。</param>
      <param name="callingConvention">コンストラクターの呼び出し規約。</param>
      <param name="parameterTypes">コンストラクターのパラメーター型。</param>
      <param name="requiredCustomModifiers">型の配列の配列。 型の各配列は、<see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、対応するパラメーターの必須のカスタム修飾子を表します。 特定のパラメーターに必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="optionalCustomModifiers">型の配列の配列。 型の各配列は、 <see cref="T:System.Runtime.CompilerServices.IsConst" />のような、対応するパラメーターの省略可能なカスタム修飾子を表します。 特定のパラメーターに省略可能なカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも省略可能カスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <returns>定義済みのコンストラクター。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="requiredCustomModifiers" /> または <paramref name="optionalCustomModifiers" /> のサイズは <paramref name="parameterTypes" /> のサイズと同じではありません。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。

または -
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)">
      <summary>パラメーターなしのコンストラクターを定義します。 ここで定義されたコンストラクターは、単に親のパラメーターなしのコンストラクターを呼び出します。</summary>
      <param name="attributes">コンストラクターに適用される属性を表す <see langword="MethodAttributes" /> オブジェクト。</param>
      <returns>コンストラクターを返します。</returns>
      <exception cref="T:System.NotSupportedException">親の型 (基本型) には、パラメーターなしのコンストラクターがありません。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。

または -
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)">
      <summary>指定した名前、属性、イベント型の新しいイベントを型に追加します。</summary>
      <param name="name">イベントの名前です。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes">イベントの属性。</param>
      <param name="eventtype">イベントの型。</param>
      <returns>定義済みのイベント。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の長さが 0 です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。

または -
<paramref name="eventtype" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
      <summary>指定した名前、属性、フィールド型の新しいフィールドを型に追加します。</summary>
      <param name="fieldName">フィールドの名前。 <paramref name="fieldName" /> に埋め込み null 値を含めることはできません。</param>
      <param name="type">フィールドの種類。</param>
      <param name="attributes">フィールドの属性。</param>
      <returns>定義済みのフィールド。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldName" /> の長さが 0 です。
または
<paramref name="type" /> が System.Void です。
または
このフィールドの親クラスの合計サイズが指定されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fieldName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)">
      <summary>指定された名前、属性、フィールドの種類、およびカスタム修飾子を持つ新しいフィールドを型に追加します。</summary>
      <param name="fieldName">フィールドの名前。 <paramref name="fieldName" /> に埋め込み null 値を含めることはできません。</param>
      <param name="type">フィールドの種類。</param>
      <param name="requiredCustomModifiers">
        <see cref="T:Microsoft.VisualC.IsConstModifier" /> など、フィールドの必須のカスタム修飾子を表す型の配列。</param>
      <param name="optionalCustomModifiers">
        <see cref="T:Microsoft.VisualC.IsConstModifier" /> など、フィールドのオプションのカスタム修飾子を表す型の配列。</param>
      <param name="attributes">フィールドの属性。</param>
      <returns>定義済みのフィールド。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldName" /> の長さが 0 です。
または
<paramref name="type" /> が System.Void です。
または
このフィールドの親クラスの合計サイズが指定されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fieldName" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])">
      <summary>現在の型のジェネリック型パラメーターを定義してその数と名前を指定し、それらの制約の設定に使用できる <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクトの配列を返します。</summary>
      <param name="names">ジェネリック型パラメーターの名前の配列。</param>
      <returns>現在の型のジェネリック型パラメーターの制約を定義するために使用できる <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクトの配列。</returns>
      <exception cref="T:System.InvalidOperationException">この型のジェネリック型パラメーターは既に定義されています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="names" /> が <see langword="null" /> です。

または -
<paramref name="names" /> の要素は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" /> は空の配列です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>ポータブル実行可能 (PE) ファイルの .sdata セクションの初期化済みデータ フィールドを定義します。</summary>
      <param name="name">データを参照するために使用する名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="data">データの blob。</param>
      <param name="attributes">フィールドの属性。</param>
      <returns>データを参照するフィールド。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の長さが 0 です。

または -
データのサイズが、0 以下か、0x3f0000 以上です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="data" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> は以前に呼び出されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)">
      <summary>新しいメソッドを、指定された名前とメソッドの属性を持つ型に追加します。</summary>
      <param name="name">メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes">メソッドの属性。</param>
      <returns>新しく定義したメソッドを表す <see cref="T:System.Reflection.Emit.MethodBuilder" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の長さが 0 です。

または -
このメソッドの親の型がインターフェイスであり、このメソッドは仮想ではありません (Visual Basic では<see langword="Overridable" /> )。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。

または -
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)">
      <summary>新しいメソッドを、指定された名前、メソッドの属性、および呼び出し規約を持つ型に追加します。</summary>
      <param name="name">メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes">メソッドの属性。</param>
      <param name="callingConvention">メソッドの呼び出し規則。</param>
      <returns>新しく定義したメソッドを表す <see cref="T:System.Reflection.Emit.MethodBuilder" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の長さが 0 です。

または -
このメソッドの親の型がインターフェイスであり、このメソッドは仮想ではありません (Visual Basic では <see langword="Overridable" />)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。

または -
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>指定された名前、メソッドの属性、呼び出し規則、およびメソッドのシグネチャを持つ新しいメソッドを型に追加します。</summary>
      <param name="name">メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes">メソッドの属性。</param>
      <param name="callingConvention">メソッドの呼び出し規則。</param>
      <param name="returnType">メソッドの戻り値の型。</param>
      <param name="parameterTypes">メソッドのパラメーターの型。</param>
      <returns>新しく定義したメソッドを表す <see cref="T:System.Reflection.Emit.MethodBuilder" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の長さが 0 です。

または -
このメソッドの親の型がインターフェイスであり、このメソッドは仮想ではありません (Visual Basic では<see langword="Overridable" /> )。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。

または -
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>新しいメソッドを、指定された名前、メソッドの属性、呼び出し規則、メソッドのシグニチャ、およびカスタム修飾子を持つ型に追加します。</summary>
      <param name="name">メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes">メソッドの属性。</param>
      <param name="callingConvention">メソッドの呼び出し規則。</param>
      <param name="returnType">メソッドの戻り値の型。</param>
      <param name="returnTypeRequiredCustomModifiers">メソッドの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> など、必須のカスタム修飾子を表す型の配列。 戻り値の型が必須のカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
      <param name="returnTypeOptionalCustomModifiers">メソッドの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、省略可能なカスタム修飾子を表す型の配列。 戻り値の型に省略可能のカスタム修飾子がない場合は、<see langword="null" /> を指定します。</param>
      <param name="parameterTypes">メソッドのパラメーターの型。</param>
      <param name="parameterTypeRequiredCustomModifiers">型の配列の配列。 型の各配列は、<see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、対応するパラメーターの必須のカスタム修飾子を表します。 特定のパラメーターに必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="parameterTypeOptionalCustomModifiers">型の配列の配列。 型の各配列は、 <see cref="T:System.Runtime.CompilerServices.IsConst" />のような、対応するパラメーターの省略可能なカスタム修飾子を表します。 特定のパラメーターに省略可能なカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも省略可能カスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <returns>新しく追加されたメソッドを表す <see cref="T:System.Reflection.Emit.MethodBuilder" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の長さが 0 です。

または -
このメソッドの親の型がインターフェイスであり、このメソッドは仮想 (Visual Basic では <see langword="Overridable" />) ではありません。

または
<paramref name="parameterTypeRequiredCustomModifiers" /> または <paramref name="parameterTypeOptionalCustomModifiers" /> のサイズは <paramref name="parameterTypes" /> のサイズと同じではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。

または -
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>新しいメソッドを、指定された名前、メソッドの属性、およびメソッドのシグニチャを持つ型に追加します。</summary>
      <param name="name">メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes">メソッドの属性。</param>
      <param name="returnType">メソッドの戻り値の型。</param>
      <param name="parameterTypes">メソッドのパラメーターの型。</param>
      <returns>定義されたメソッド。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の長さが 0 です。
または
このメソッドの親の型がインターフェイスであり、このメソッドは仮想ではありません (Visual Basic では<see langword="Overridable" /> )。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。
または
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>特定のメソッド宣言 (名前が異なる可能性があります) を実装する特定のメソッド本体を指定します。</summary>
      <param name="methodInfoBody">使用するメソッド本体。 これは <see langword="MethodBuilder" /> オブジェクトである必要があります。</param>
      <param name="methodInfoDeclaration">宣言が使用されるメソッド。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="methodInfoBody" /> はこのクラスに属していません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="methodInfoBody" /> または <paramref name="methodInfoDeclaration" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。

または -
<paramref name="methodInfoBody" /> の宣言型は、この <see cref="T:System.Reflection.Emit.TypeBuilder" /> によって表される型ではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
      <summary>名前を指定された、入れ子にされた型を定義します。</summary>
      <param name="name">型の短い名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <returns>定義済みの入れ子にされた型。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の長さが 0 または 1023 を超えています。
または
この操作では、現在のアセンブリ内に <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> が重複する型が作成されます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)">
      <summary>指定した名前と属性を持つ入れ子にされた型を定義します。</summary>
      <param name="name">型の短い名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr">型の属性。</param>
      <returns>定義済みの入れ子にされた型。</returns>
      <exception cref="T:System.ArgumentException">入れ子にされた属性が指定されていません。

または -
この型は封印されています。

または -
この型は配列です。

または -
この型はインターフェイスですが、入れ子にされた型がインターフェイスではありません。


または
<paramref name="name" /> の長さが 0 であるか、1023 を超えています。
または
この操作では、現在のアセンブリ内に <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> が重複する型が作成されます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>入れ子にされた型、指定された名前、属性、および拡張する型を定義します。</summary>
      <param name="name">型の短い名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr">型の属性。</param>
      <param name="parent">入れ子にされた型を拡張する型。</param>
      <returns>定義済みの入れ子にされた型。</returns>
      <exception cref="T:System.ArgumentException">入れ子にされた属性が指定されていません。
または
この型は封印されています。

または -
この型は配列です。

または
この型はインターフェイスですが、入れ子にされた型がインターフェイスではありません。

または -
<paramref name="name" /> の長さが 0 であるか、1023 を超えています。

または -
この操作では、現在のアセンブリ内に <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> が重複する型が作成されます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>入れ子にされた型、指定された名前、属性、型の合計サイズ、および拡張する型を定義します。</summary>
      <param name="name">型の短い名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr">型の属性。</param>
      <param name="parent">入れ子にされた型を拡張する型。</param>
      <param name="typeSize">型の合計サイズ。</param>
      <returns>定義済みの入れ子にされた型。</returns>
      <exception cref="T:System.ArgumentException">入れ子にされた属性が指定されていません。

または -
この型は封印されています。

または -
この型は配列です。


または
この型はインターフェイスですが、入れ子にされた型がインターフェイスではありません。
または
<paramref name="name" /> の長さが 0 であるか、1023 を超えています。

または -
この操作では、現在のアセンブリ内に <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> が重複する型が作成されます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>入れ子にされた型、指定された名前、属性、拡張する型、およびパッキング サイズを定義します。</summary>
      <param name="name">型の短い名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr">型の属性。</param>
      <param name="parent">入れ子にされた型を拡張する型。</param>
      <param name="packSize">型のパッキング サイズ。</param>
      <returns>定義済みの入れ子にされた型。</returns>
      <exception cref="T:System.ArgumentException">入れ子にされた属性が指定されていません。

または -
この型は封印されています。

または -
この型は配列です。

または -
この型はインターフェイスですが、入れ子にされた型がインターフェイスではありません。

または -
<paramref name="name" /> の長さが 0 であるか、1023 を超えています。

または -
この操作では、現在のアセンブリ内に <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> が重複する型が作成されます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary>入れ子にされた型、指定された名前、属性、サイズ、および拡張する型を定義します。</summary>
      <param name="name">型の短い名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr">型の属性。</param>
      <param name="parent">入れ子にされた型を拡張する型。</param>
      <param name="packSize">型のパッキング サイズ。</param>
      <param name="typeSize">型の合計サイズ。</param>
      <returns>定義済みの入れ子にされた型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>指定された名前、属性、拡張する基本型、および実装するインターフェイスを指定して、ネスト型を定義します。</summary>
      <param name="name">型の短い名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr">型の属性。</param>
      <param name="parent">入れ子にされた型を拡張する型。</param>
      <param name="interfaces">入れ子型で実装されるインターフェイス。</param>
      <returns>定義済みの入れ子にされた型。</returns>
      <exception cref="T:System.ArgumentException">入れ子にされた属性が指定されていません。
または
この型は封印されています。

または -
この型は配列です。

または -
この型はインターフェイスですが、入れ子にされた型がインターフェイスではありません。

または -
<paramref name="name" /> の長さが 0 であるか、1023 を超えています。


または
この操作では、現在のアセンブリ内に <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> が重複する型が作成されます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。

または -
<paramref name="interfaces" /> 配列の要素が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>
        <see langword="PInvoke" /> メソッドに名前を指定して、メソッドが定義されている DLL の名前、メソッドの属性、メソッドの呼び出し規則、メソッドの戻り値の型、メソッドのパラメーター型、および <see langword="PInvoke" /> フラグを定義します。</summary>
      <param name="name">
        <see langword="PInvoke" /> メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="dllName">
        <see langword="PInvoke" /> メソッドが定義されている DLL の名前。</param>
      <param name="attributes">メソッドの属性。</param>
      <param name="callingConvention">メソッドの呼び出し規則。</param>
      <param name="returnType">メソッドの戻り値の型。</param>
      <param name="parameterTypes">メソッドのパラメーター型。</param>
      <param name="nativeCallConv">ネイティブ呼び出し規則。</param>
      <param name="nativeCharSet">メソッドのネイティブ文字セット。</param>
      <returns>定義された <see langword="PInvoke" /> メソッド。</returns>
      <exception cref="T:System.ArgumentException">メソッドは静的ではありません。

または -
親の型がインターフェイスです。

または -
抽象メソッドです。

または -
メソッドは以前に定義されています。

または -
<paramref name="name" /> または <paramref name="dllName" /> の長さが 0 です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="dllName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">含んでいる型が <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して以前に作成されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>
        <see langword="PInvoke" /> メソッドに名前を指定して、メソッドが定義されている DLL の名前、エントリ ポイント名、メソッドの属性、メソッドの呼び出し規約、メソッドの戻り値の型、メソッドのパラメーター型、および <see langword="PInvoke" /> フラグを定義します。</summary>
      <param name="name">
        <see langword="PInvoke" /> メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="dllName">
        <see langword="PInvoke" /> メソッドが定義されている DLL の名前。</param>
      <param name="entryName">DLL 内のエントリ ポイントの名前。</param>
      <param name="attributes">メソッドの属性。</param>
      <param name="callingConvention">メソッドの呼び出し規則。</param>
      <param name="returnType">メソッドの戻り値の型。</param>
      <param name="parameterTypes">メソッドのパラメーター型。</param>
      <param name="nativeCallConv">ネイティブ呼び出し規則。</param>
      <param name="nativeCharSet">メソッドのネイティブ文字セット。</param>
      <returns>定義された <see langword="PInvoke" /> メソッド。</returns>
      <exception cref="T:System.ArgumentException">メソッドは静的ではありません。
または
親の型がインターフェイスです。

または -
抽象メソッドです。

または
メソッドは以前に定義されています。
または
<paramref name="name" />、<paramref name="dllName" />、または <paramref name="entryName" /> の長さが 0 です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />、<paramref name="dllName" />、または <paramref name="entryName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">含んでいる型が <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して以前に作成されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][])">
      <summary>
        <see langword="PInvoke" /> メソッドを定義します。名前、メソッドが定義されている DLL の名前、エントリ ポイント名、メソッドの属性、メソッドの呼び出し規則、メソッドの戻り値の型、メソッドのパラメーター型、<see langword="PInvoke" /> フラグ、およびパラメーターと戻り値の型のカスタム修飾子を指定します。</summary>
      <param name="name">
        <see langword="PInvoke" /> メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="dllName">
        <see langword="PInvoke" /> メソッドが定義されている DLL の名前。</param>
      <param name="parameterTypeOptionalCustomModifiers">型の配列の配列。 型の各配列は、 <see cref="T:System.Runtime.CompilerServices.IsConst" />のような、対応するパラメーターの省略可能なカスタム修飾子を表します。 特定のパラメーターに省略可能なカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも省略可能カスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="nativeCallConv">ネイティブ呼び出し規則。</param>
      <param name="nativeCharSet">メソッドのネイティブ文字セット。</param>
      <param name="entryName">DLL 内のエントリ ポイントの名前。</param>
      <param name="attributes">メソッドの属性。</param>
      <param name="callingConvention">メソッドの呼び出し規則。</param>
      <param name="returnType">メソッドの戻り値の型。</param>
      <param name="returnTypeRequiredCustomModifiers">メソッドの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" />など、必須のカスタム修飾子を表す型の配列。 戻り値の型が必須のカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
      <param name="returnTypeOptionalCustomModifiers">メソッドの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、省略可能なカスタム修飾子を表す型の配列。 戻り値の型に省略可能のカスタム修飾子がない場合は、<see langword="null" /> を指定します。</param>
      <param name="parameterTypes">メソッドのパラメーター型。</param>
      <param name="parameterTypeRequiredCustomModifiers">型の配列の配列。 型の各配列は、<see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、対応するパラメーターの必須のカスタム修飾子を表します。 特定のパラメーターに必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <returns>定義された <see langword="PInvoke" /> メソッドを表す <see cref="T:System.Reflection.Emit.MethodBuilder" />。</returns>
      <exception cref="T:System.ArgumentException">メソッドは静的ではありません。
または
親の型がインターフェイスです。

または -
抽象メソッドです。

または
メソッドは以前に定義されています。

または -
<paramref name="name" />、<paramref name="dllName" />、または <paramref name="entryName" /> の長さが 0 です。

または -
<paramref name="parameterTypeRequiredCustomModifiers" /> または <paramref name="parameterTypeOptionalCustomModifiers" /> のサイズは <paramref name="parameterTypes" /> のサイズと同じではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />、<paramref name="dllName" />、または <paramref name="entryName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。

または -
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>新しいプロパティを、指定された名前、属性、呼び出し規則、およびプロパティの署名を持つ型に追加します。</summary>
      <param name="name">プロパティの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes">プロパティの属性。</param>
      <param name="callingConvention">プロパティ アクセサーの呼び出し規則。</param>
      <param name="returnType">プロパティの戻り値の型。</param>
      <param name="parameterTypes">プロパティのパラメーターの型。</param>
      <returns>定義されたプロパティ。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の長さが 0 です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。

または -
<paramref name="parameterTypes" /> 配列の要素のいずれかが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>指定された名前、呼び出し規則、プロパティの署名、およびカスタム修飾子を使用して、新しいプロパティを型に追加します。</summary>
      <param name="name">プロパティの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes">プロパティの属性。</param>
      <param name="callingConvention">プロパティ アクセサーの呼び出し規則。</param>
      <param name="returnType">プロパティの戻り値の型。</param>
      <param name="returnTypeRequiredCustomModifiers">プロパティの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> など、必須のカスタム修飾子を表す型の配列。 戻り値の型が必須のカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
      <param name="returnTypeOptionalCustomModifiers">プロパティの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、省略可能なカスタム修飾子を表す型の配列。 戻り値の型に省略可能のカスタム修飾子がない場合は、<see langword="null" /> を指定します。</param>
      <param name="parameterTypes">プロパティのパラメーターの型。</param>
      <param name="parameterTypeRequiredCustomModifiers">型の配列の配列。 型の各配列は、<see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、対応するパラメーターの必須のカスタム修飾子を表します。 特定のパラメーターに必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="parameterTypeOptionalCustomModifiers">型の配列の配列。 型の各配列は、 <see cref="T:System.Runtime.CompilerServices.IsConst" />のような、対応するパラメーターの省略可能なカスタム修飾子を表します。 特定のパラメーターに省略可能なカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも省略可能カスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <returns>定義されたプロパティ。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の長さが 0 です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。
または
<paramref name="parameterTypes" /> 配列の要素のいずれかが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])">
      <summary>指定された名前とプロパティのシグネチャにより、新しいプロパティを型に追加します。</summary>
      <param name="name">プロパティの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes">プロパティの属性。</param>
      <param name="returnType">プロパティの戻り値の型。</param>
      <param name="parameterTypes">プロパティのパラメーターの型。</param>
      <returns>定義されたプロパティ。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の長さが 0 です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。

または -
<paramref name="parameterTypes" /> 配列の要素のいずれかが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>指定された名前、プロパティのシグネチャ、およびカスタム修飾子により、新しいプロパティを型に追加します。</summary>
      <param name="name">プロパティの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes">プロパティの属性。</param>
      <param name="returnType">プロパティの戻り値の型。</param>
      <param name="returnTypeRequiredCustomModifiers">プロパティの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> など、必須のカスタム修飾子を表す型の配列。 戻り値の型が必須のカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
      <param name="returnTypeOptionalCustomModifiers">プロパティの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、省略可能なカスタム修飾子を表す型の配列。 戻り値の型に省略可能のカスタム修飾子がない場合は、<see langword="null" /> を指定します。</param>
      <param name="parameterTypes">プロパティのパラメーターの型。</param>
      <param name="parameterTypeRequiredCustomModifiers">型の配列の配列。 型の各配列は、<see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、対応するパラメーターの必須のカスタム修飾子を表します。 特定のパラメーターに必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="parameterTypeOptionalCustomModifiers">型の配列の配列。 型の各配列は、 <see cref="T:System.Runtime.CompilerServices.IsConst" />のような、対応するパラメーターの省略可能なカスタム修飾子を表します。 特定のパラメーターに省略可能なカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも省略可能カスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <returns>定義されたプロパティ。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の長さが 0 です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" /> です
または
<paramref name="parameterTypes" /> 配列の要素のいずれかが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer">
      <summary>この型の初期化子を定義します。</summary>
      <returns>型の初期化子を返します。</returns>
      <exception cref="T:System.InvalidOperationException">含んでいる型が <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して以前に作成されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>ポータブル実行可能 (PE) ファイルの <see langword=".sdata" /> セクションの初期化されていないデータ フィールドを定義します。</summary>
      <param name="name">データを参照するために使用する名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="size">データ フィールドのサイズ。</param>
      <param name="attributes">フィールドの属性。</param>
      <returns>データを参照するフィールド。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の長さが 0 です。
または
<paramref name="size" /> が 0 以下か、0x003f0000 以上です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.FullName">
      <summary>この型の完全なパスを取得します。</summary>
      <returns>読み取り専用。 この型の完全なパスを取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes">
      <summary>現在のジェネリック型パラメーターの共変性および特殊な制約を示す値を取得します。</summary>
      <returns>現在のジェネリック型パラメーターの共変性と特殊な制約を表す <see cref="T:System.Reflection.GenericParameterAttributes" /> 値のビットごとの組み合わせ。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition">
      <summary>パラメーターを宣言するジェネリック型の型パラメーター リスト内の型パラメーターの位置を取得します。</summary>
      <returns>現在の <see cref="T:System.Reflection.Emit.TypeBuilder" /> オブジェクトがジェネリック型パラメーターを表す場合、パラメーターを宣言したジェネリック型の型パラメーター リスト内の型パラメーターの位置。それ以外の場合は、定義されません。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)">
      <summary>ジェネリック型定義の指定されたコンストラクターに対応する、指定の構築されたジェネリック型のコンストラクターを返します。</summary>
      <param name="type">コンストラクターが返される構築されたジェネリック型。</param>
      <param name="constructor">返す <paramref name="type" /> のコンストラクターを指定する、<paramref name="type" /> のジェネリック型定義のコンストラクター。</param>
      <returns>
        <paramref name="type" /> のジェネリック型定義に属するコンストラクターを指定する、<paramref name="constructor" /> に対応する <paramref name="type" /> のコンストラクターを表す <see cref="T:System.Reflection.ConstructorInfo" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> がジェネリック型を表していません。

または -
<paramref name="type" /> が <see cref="T:System.Reflection.Emit.TypeBuilder" />型ではありません。

または
<paramref name="constructor" /> の宣言する型はジェネリック型定義ではありません。
または
<paramref name="constructor" /> の宣言する型は <paramref name="type" /> のジェネリック型定義ではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>指定に従って、このクラスに定義されているパブリック コンストラクターおよび非パブリック コンストラクターを表す <see cref="T:System.Reflection.ConstructorInfo" /> オブジェクトの配列を返します。</summary>
      <param name="bindingAttr">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> などにある、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns>このクラスに定義されている指定したコンストラクターを表す <see cref="T:System.Reflection.ConstructorInfo" /> オブジェクトの配列を返します。 コンストラクターが定義されていない場合は、空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)">
      <summary>この型の定義済みのカスタム属性をすべて返します。</summary>
      <param name="inherit">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</param>
      <returns>この型のすべてのカスタム属性を表す、オブジェクトの配列を返します。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetType" /> を使用して型を取得し、返された <see cref="T:System.Type" /> で <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> を呼び出します。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>現在の型のカスタム属性のうち、指定された型に代入可能なものすべてを返します。</summary>
      <param name="attributeType">検索する属性の種類。 この型に代入可能な属性だけが返されます。</param>
      <param name="inherit">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</param>
      <returns>現在の型について定義されているカスタム属性の配列。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetType" /> を使用して型を取得し、返された <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> で <see cref="T:System.Type" />を呼び出します。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">型は、基になるランタイム システムで提供されている型でなければなりません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetElementType">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <returns>このメソッドはサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>指定した名前のイベントを返します。</summary>
      <param name="name">検索対象のイベントの名前。</param>
      <param name="bindingAttr">検索を制限する <see cref="T:System.Reflection.BindingFlags" /> 値のビットごとの組み合わせ。</param>
      <returns>この型によって宣言または継承されている、指定した名前のイベントを表す <see cref="T:System.Reflection.EventInfo" /> オブジェクト。または、一致するものがない場合は <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents">
      <summary>この型で宣言または継承されているパブリック イベントを返します。</summary>
      <returns>この型で宣言または継承されているパブリック イベントを表す <see cref="T:System.Reflection.EventInfo" /> オブジェクトの配列を返します。 パブリック イベントがない場合は、空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>この型で宣言されているパブリック イベントとパブリックでないイベントを返します。</summary>
      <param name="bindingAttr">検索を制限する <see cref="T:System.Reflection.BindingFlags" /> 値のビットごとの組み合わせ。</param>
      <returns>この型で宣言または継承されているイベントのうち、指定したバインディング フラグに一致するイベントを表す <see cref="T:System.Reflection.EventInfo" /> オブジェクトの配列を返します。 一致するイベントがない場合は、空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>指定した名前で指定されたフィールドを返します。</summary>
      <param name="name">取得するフィールドの名前。</param>
      <param name="bindingAttr">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> などにある、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns>指定した名前と公開または非公開の修飾子を持つ、この型によって宣言または継承されているフィールドを表す <see cref="T:System.Reflection.FieldInfo" /> オブジェクトを返します。 一致するものがない場合は、<see langword="null" /> が返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)">
      <summary>ジェネリック型定義の指定されたフィールドに対応する、指定の構築されたジェネリック型のフィールドを返します。</summary>
      <param name="type">フィールドが返される構築されたジェネリック型。</param>
      <param name="field">返す <paramref name="type" /> のフィールドを指定する、<paramref name="type" /> のジェネリック型定義のフィールド。</param>
      <returns>
        <paramref name="type" /> のジェネリック型定義に属するフィールドを指定する、<paramref name="field" /> に対応する <paramref name="type" /> のフィールドを表す <see cref="T:System.Reflection.FieldInfo" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> がジェネリック型を表していません。

または -
<paramref name="type" /> が <see cref="T:System.Reflection.Emit.TypeBuilder" />型ではありません。

または
<paramref name="field" /> の宣言する型はジェネリック型定義ではありません。

または -
<paramref name="field" /> の宣言する型は <paramref name="type" /> のジェネリック型定義ではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>この型で宣言されているパブリック フィールドとパブリックでないフィールドを返します。</summary>
      <param name="bindingAttr">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> など、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns>この型で宣言または継承されているパブリック フィールドと非パブリック フィールドを表す <see cref="T:System.Reflection.FieldInfo" /> オブジェクトの配列を返します。 指定どおりに、フィールドがない場合は空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments">
      <summary>ジェネリック型の型引数またはジェネリック型定義の型パラメーターを表す <see cref="T:System.Type" /> オブジェクトの配列を返します。</summary>
      <returns>
        <see cref="T:System.Type" /> オブジェクトの配列。 ジェネリック型の型引数またはジェネリック型定義の型パラメーターを表す配列の要素。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition">
      <summary>現在の型を取得する元になるジェネリック型定義を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns>現在の型を取得する元になる型定義を表す <see cref="T:System.Type" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">現在の型はジェネリックではありません。 つまり、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> は <see langword="false" /> を返します。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)">
      <summary>指定されたインターフェイス名に一致する完全修飾名を名前とする、このクラスによって (直接的または間接的に) 実装されるインターフェイスを返します。</summary>
      <param name="name">インターフェイスの名前です。</param>
      <param name="ignoreCase">
        <see langword="true" />の場合、検索では、大文字と小文字を区別しません。 <see langword="false" /> の場合、検索では、大文字と小文字が区別されます。</param>
      <returns>実装されているインターフェイスを表す <see cref="T:System.Type" /> オブジェクトを返します。 インターフェイスの一致する名前が見つからない場合、null を返します。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)">
      <summary>要求されたインターフェイスに対するインターフェイス マップを返します。</summary>
      <param name="interfaceType">マッピングの取得対象のインターフェイスの <see cref="T:System.Type" />。</param>
      <returns>要求されたインターフェイス マップを返します。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaces">
      <summary>この型とその基本型に実装されているすべてのインターフェイスの配列を返します。</summary>
      <returns>実装されているインターフェイスを表す <see cref="T:System.Type" /> オブジェクトの配列を返します。 何も定義されていない場合は、空の配列が返されます。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>指定のとおりに、この型によって宣言または継承されたパブリック メンバーと非パブリック メンバーをすべて返します。</summary>
      <param name="name">メンバーの名前。</param>
      <param name="type">返すメンバーの型。</param>
      <param name="bindingAttr">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> などにある、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns>
        <paramref name="nonPublic" /> が使用されている場合、この型で定義されているパブリック メンバーと非パブリック メンバーを表す <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの配列を返します。それ以外の場合、パブリック メンバーのみが返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>この型によって宣言または継承されたパブリック メンバーと非パブリック メンバーをすべて返します。</summary>
      <param name="bindingAttr">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> などの、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns>この型で宣言または継承されているパブリック メンバーと非パブリック メンバーを表す <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの配列を返します。 一致するメンバーがない場合は、空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)">
      <summary>ジェネリック型定義の指定されたメソッドに対応する、指定の構築されたジェネリック型のメソッドを返します。</summary>
      <param name="type">メソッドが返される構築されたジェネリック型。</param>
      <param name="method">返す <paramref name="type" /> のメソッドを指定する、<paramref name="type" /> のジェネリック型定義のメソッド。</param>
      <returns>
        <paramref name="type" /> のジェネリック型定義に属するメソッドを指定する、<paramref name="method" /> に対応する <paramref name="type" /> のメソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> はジェネリック メソッド定義ではないジェネリック メソッドです。

または -
<paramref name="type" /> がジェネリック型を表していません。

または -
<paramref name="type" /> が <see cref="T:System.Reflection.Emit.TypeBuilder" />型ではありません。

または -
<paramref name="method" /> の宣言する型はジェネリック型定義ではありません。


または
<paramref name="method" /> の宣言する型は <paramref name="type" /> のジェネリック型定義ではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>指定のとおりに、この型によって宣言または継承されたパブリック メソッドと非パブリック メソッドをすべて返します。</summary>
      <param name="bindingAttr">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> などにある、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns>
        <paramref name="nonPublic" /> が使用されている場合、この型で定義されているパブリック メソッドと非パブリック メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクトの配列を返します。それ以外の場合、パブリック メソッドのみが返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>この型によって宣言されている、入れ子にされたパブリック型とパブリックでない型を返します。</summary>
      <param name="name">取得対象の入れ子にされた型の名前を格納している <see cref="T:System.String" />。</param>
      <param name="bindingAttr">検索の実行方法を指定する 1 つ以上の <see cref="T:System.Reflection.BindingFlags" /> から成るビットマスク。

または -
大文字小文字を区別してパブリック メソッドの検索を行う場合は 0。</param>
      <returns>指定した要件と一致し、入れ子にされた型が存在する場合は、その型を表す <see cref="T:System.Type" /> オブジェクト。それ以外の場合は <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>この型で宣言または継承されている入れ子にされたパブリック型とパブリックでない型を返します。</summary>
      <param name="bindingAttr">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> などにある、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns>現在の <see cref="T:System.Type" /> 内で入れ子にされた型のうち、指定したバインディング制約に一致するすべての型を表す <see cref="T:System.Type" /> オブジェクトの配列。
現在の <see cref="T:System.Type" /> 内で型が入れ子にされていないか、または入れ子にされた型の中にバインディング制約に一致するものが存在しない場合は、<see cref="T:System.Type" /> 型の空の配列。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>指定のとおりに、この型によって宣言または継承されたパブリック プロパティと非パブリック プロパティをすべて返します。</summary>
      <param name="bindingAttr">この呼び出しの属性。 これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> など、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns>
        <paramref name="nonPublic" /> が使用されている場合、この型で定義されているパブリック プロパティと非パブリック プロパティを表す <see langword="PropertyInfo" /> オブジェクトの配列を返します。 それ以外の場合、パブリック プロパティのみが返されます。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GUID">
      <summary>この型の GUID を取得します。</summary>
      <returns>読み取り専用。 この型の GUID を取得します。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>指定したメンバーを呼び出します。 呼び出すメソッドはアクセス可能でなければならず、指定したバインダーと呼び出し属性の制約の下で、指定された引数リストに対する一致の特定性が最高のものでなければなりません。</summary>
      <param name="name">呼び出すメンバーの名前。 コンストラクター、メソッド、プロパティ、またはフィールドを指定できます。 適切な呼び出し属性を指定する必要があります。 メンバーの名前として空の文字列を渡すことによって、クラスの既定のメンバーを呼び出せることにご注意ください。</param>
      <param name="invokeAttr">呼び出し属性。 これは <see langword="BindingFlags" /> からのビット フラグでなければなりません。</param>
      <param name="binder">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションを使用した <see langword="MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。 バインダーが <see langword="null" />の場合は、既定のバインダーが使用されます。 「<see cref="T:System.Reflection.Binder" />」を参照してください。</param>
      <param name="target">指定したメンバーを呼び出す対象となるオブジェクト。 メンバーが静的な場合、このパラメーターは無視されます。</param>
      <param name="args">引数リスト。 これは、呼び出されるメンバーのパラメーターの数、順序、および型を含むオブジェクトの配列です。 パラメーターがない場合は、これは null である必要があります。</param>
      <param name="modifiers">
        <paramref name="args" /> と同じ長さの配列であり、その要素は、呼び出されるメンバーの引数に関連付けられた属性を表します。 メタデータの中でパラメーターには属性が関連付けられています。 これらは、さまざまな相互運用サービスで使用されます。 詳細については、メタデータの仕様を参照してください。</param>
      <param name="culture">型の強制変換を制御するために使用する <see langword="CultureInfo" /> のインスタンス。 null の場合は、現在のスレッドの <see langword="CultureInfo" /> が使用されます。 (これは、たとえば、1000 を表す String を Double 値に変換する場合に必要であることに注意ください。これは、カルチャによって 1000 の表記が異なるためです。)</param>
      <param name="namedParameters">
        <paramref name="namedParameters" /> 配列の各パラメーターは、<paramref name="args" /> 配列内の対応する要素の値を取得します。 <paramref name="args" /> の長さが <paramref name="namedParameters" /> の長さより大きい場合、残りの引数の値は順番に渡されます。</param>
      <returns>呼び出されたメンバーの戻り値を返します。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)">
      <summary>指定された <see cref="T:System.Type" /> をこのオブジェクトに割り当てることができるかどうかを示す値を取得します。</summary>
      <param name="c">テストするオブジェクト。</param>
      <returns>
        <paramref name="c" /> パラメーターと現在の型が同じ型を表す場合、現在の型が <paramref name="c" /> の継承階層内にある場合、または現在の型が <paramref name="c" /> によってサポートされるインターフェイスである場合は <see langword="true" />。 これらの条件がいずれも当てはまらない場合、または <paramref name="c" /> が <see langword="null" /> である場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsConstructedGenericType">
      <summary>このオブジェクトが構築ジェネリック型かどうかを示す値を取得します。</summary>
      <returns>このオブジェクトが構築ジェネリック型を表している場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsCreated">
      <summary>現在の動的な型が作成されたかどうかを示す値を返します。</summary>
      <returns>
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> メソッドが呼び出された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>カスタム属性が現在の型に適用されるかどうかを判断します。</summary>
      <param name="attributeType">検索する属性の種類。 この型に代入可能な属性だけが返されます。</param>
      <param name="inherit">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</param>
      <returns>
        <paramref name="attributeType" /> の 1 つ以上のインスタンス、または <paramref name="attributeType" /> から派生する属性がこの型で定義されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">不完全な型では、このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetType" /> を使用して型を取得し、返された <see cref="T:System.Type" /> で <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> を呼び出します。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> が定義されていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter">
      <summary>現在の型がジェネリック型パラメーターかどうかを示す値を取得します。</summary>
      <returns>現在の <see cref="T:System.Reflection.Emit.TypeBuilder" /> オブジェクトがジェネリック型パラメーターを表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericType">
      <summary>現在の型がジェネリック型かどうかを示す値を取得します。</summary>
      <returns>現在の <see cref="T:System.Reflection.Emit.TypeBuilder" /> オブジェクトによって表される型がジェネリックの場合、<see langword="true" />。それ以外の場合、<see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition">
      <summary>現在の <see cref="T:System.Reflection.Emit.TypeBuilder" /> が、他のジェネリック型を構築できるジェネリック型の定義を表しているかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Reflection.Emit.TypeBuilder" /> オブジェクトがジェネリック型定義を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical">
      <summary>現在の型がセキュリティ クリティカルまたはセキュリティ セーフ クリティカルであり、重要な操作を実行できるかどうかを示す値を取得します。</summary>
      <returns>現在の型がセキュリティ クリティカルまたはセキュリティ セーフ クリティカルである場合は <see langword="true" />。現在の型が透過的な場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">現在の動的な型は、<see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> メソッドを呼び出して作成された型ではありません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical">
      <summary>現在の型がセキュリティ セーフ クリティカルであり、重要な操作を実行でき、透過的なコードからアクセスできるかどうかを示す値を取得します。</summary>
      <returns>現在の型がセキュリティ セーフ クリティカルである場合は <see langword="true" />。現在の型がセキュリティ クリティカルまたは透過的な場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">現在の動的な型は、<see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> メソッドを呼び出して作成された型ではありません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent">
      <summary>現在の型が透過的であり、重要な操作を実行できないかどうかを示す値を取得します。</summary>
      <returns>型が透過的セキュリティの場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">現在の動的な型は、<see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> メソッドを呼び出して作成された型ではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)">
      <summary>この型が指定した型から派生したものかどうかを判断します。</summary>
      <param name="c">チェックする <see cref="T:System.Type" />。</param>
      <returns>読み取り専用。 この型が型 <paramref name="c" /> と同じ場合、または型 <paramref name="c" /> のサブタイプである場合は、<see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType">
      <summary>下限を 0 に設定して現在の型の 1 次元配列を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns>下限を 0 に設定して要素型が現在の型である 1 次元配列を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)">
      <summary>次元数を指定して現在の型の配列を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <param name="rank">配列の次元数。</param>
      <returns>現在の型の 1 次元配列を表す <see cref="T:System.Type" /> オブジェクト。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> は有効な配列の次元ではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeByRefType">
      <summary>
        <see langword="ref" /> パラメーター (Visual Basic の場合は <see langword="ByRef" />) として渡されるときに現在の型を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns>
        <see langword="ref" /> パラメーター (Visual Basic の場合は <see langword="ByRef" />) として渡されるときに現在の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])">
      <summary>型の配列の要素を現在のジェネリック型定義の型パラメーターで置き換え、結果の構築型を返します。</summary>
      <param name="typeArguments">現在のジェネリック型定義の型パラメーターに置き換えられる型の配列。</param>
      <returns>
        <paramref name="typeArguments" /> の要素を現在のジェネリック型の型パラメーターで置き換えることによって作られる構築型を表す <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.InvalidOperationException">現在の型はジェネリック型の定義を表していません。 つまり、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> は <see langword="false" /> を返します。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> が <see langword="null" /> です。
または
<paramref name="typeArguments" /> のどの要素も <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArguments" /> のどの要素の <see cref="P:System.Type.Module" /> プロパティも <see langword="null" /> です。

または -
<paramref name="typeArguments" /> のどの要素のモジュールの <see cref="P:System.Reflection.Module.Assembly" /> プロパティも <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakePointerType">
      <summary>現在の型を指すアンマネージ ポインターの型を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns>現在の型を指すアンマネージ ポインターの型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Module">
      <summary>この型定義を含む動的モジュールを取得します。</summary>
      <returns>読み取り専用。 この型定義を含む動的モジュールを取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Name">
      <summary>この型の名前を取得します。</summary>
      <returns>読み取り専用。 この型の <see cref="T:System.String" /> 名を取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Namespace">
      <summary>この <see langword="TypeBuilder" /> が定義されている名前空間を取得します。</summary>
      <returns>読み取り専用。 この <see langword="TypeBuilder" /> が定義されている名前空間を取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.PackingSize">
      <summary>この型のパッキング サイズを取得します。</summary>
      <returns>読み取り専用。 この型のパッキング サイズを取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ReflectedType">
      <summary>この型を取得するために使用された型を返します。</summary>
      <returns>読み取り専用。 この型を取得するために使用された型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>指定されたカスタム属性の blob を使用して、カスタム属性を設定します。</summary>
      <param name="con">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder">カスタム属性を定義するヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)">
      <summary>現在作成中の型の基本型を設定します。</summary>
      <param name="parent">新しい基本型。</param>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。

または -
<paramref name="parent" /> が <see langword="null" /> で、現在のインスタンスが <see cref="F:System.Reflection.TypeAttributes.Abstract" /> を含まない属性のインターフェイスを表します。

または -
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parent" /> がインターフェイスです。 この例外条件は、.NET Framework Version 2.0 で新しく追加されたものです。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Size">
      <summary>型の合計サイズを取得します。</summary>
      <returns>読み取り専用。 この型の合計サイズを取得します。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.ToString">
      <summary>名前空間を含まない型の名前を返します。</summary>
      <returns>読み取り専用。 名前空間を含まない型の名前。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeHandle">
      <summary>動的モジュールではサポートされていません。</summary>
      <returns>読み取り専用。</returns>
      <exception cref="T:System.NotSupportedException">動的モジュールではサポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType">
      <summary>この <see langword="TypeBuilder" /> の基になるシステム型を返します。</summary>
      <returns>読み取り専用。 基になるシステム型を返します。</returns>
      <exception cref="T:System.InvalidOperationException">この型は列挙型ですが、基になるシステム型はありません。</exception>
    </member>
    <member name="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize">
      <summary>この型の合計サイズが指定されていないことを表します。</summary>
    </member>
  </members>
</doc>
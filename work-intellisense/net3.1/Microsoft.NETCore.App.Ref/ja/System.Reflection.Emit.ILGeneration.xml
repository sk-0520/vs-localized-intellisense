<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit.ILGeneration</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.CustomAttributeBuilder">
      <summary vsli:raw="Helps build custom attributes.">カスタム属性の構築を支援します。</summary>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute and the arguments to the constructor.">カスタム属性のコンストラクター、およびコンストラクターに渡す引数を指定して、<see langword="CustomAttributeBuilder" /> クラスのインスタンスを初期化します。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">カスタム属性のコンストラクター。</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">カスタム属性のコンストラクターに渡す引数。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="con" /> が静的またはプライベートです。

または -
指定した引数の数が、コンストラクターの呼び出し規約で求められるコンストラクターのパラメーターの数と一致しません。

または -
指定した引数の型は、コンストラクターで宣言されているパラメーターの型と一致しません。

または -
指定された引数が <see cref="T:System.String" /> または <see cref="T:System.Type" /> 以外の参照型です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;constructorArgs&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> または <paramref name="constructorArgs" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, and a set of named field/value pairs.">カスタム属性のコンストラクター、そのコンストラクターの引数、および名前付きフィールドと値のペアのセットを指定して、<see langword="CustomAttributeBuilder" /> クラスのインスタンスを初期化します。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">カスタム属性のコンストラクター。</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">カスタム属性のコンストラクターに渡す引数。</param>
      <param name="namedFields" vsli:raw="Named fields of the custom attribute.">カスタム属性の名前付きフィールド。</param>
      <param name="fieldValues" vsli:raw="Values for the named fields of the custom attribute.">カスタム属性の名前付きフィールドの値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedFields&quot; /&gt; and &lt;paramref name=&quot;fieldValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the field values do not match the types of the named fields.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument or named field is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="namedFields" /> 配列と <paramref name="fieldValues" /> 配列の長さが違います。
または
<paramref name="con" /> が静的またはプライベートです。

または -
指定した引数の数が、コンストラクターの呼び出し規約で求められるコンストラクターのパラメーターの数と一致しません。

または -
指定した引数の型は、コンストラクターで宣言されているパラメーターの型と一致しません。

または -
フィールド値の型が名前付きフィールドの型と一致しません。

または -
フィールドが、コンストラクターと同じクラスまたは基本クラスに属していません。

または -
指定された引数または名前付きフィールドが <see cref="T:System.String" /> または <see cref="T:System.Type" /> 以外の参照型です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">パラメーターの 1 つが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, and a set of named property or value pairs.">カスタム属性のコンストラクター、そのコンストラクターの引数、および名前付きプロパティまたは値のペアのセットを指定して、<see langword="CustomAttributeBuilder" /> クラスのインスタンスを初期化します。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">カスタム属性のコンストラクター。</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">カスタム属性のコンストラクターに渡す引数。</param>
      <param name="namedProperties" vsli:raw="Named properties of the custom attribute.">カスタム属性の名前付きプロパティ。</param>
      <param name="propertyValues" vsli:raw="Values for the named properties of the custom attribute.">カスタム属性の名前付きプロパティの値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedProperties&quot; /&gt; and &lt;paramref name=&quot;propertyValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the property values do not match the types of the named properties.  &#xA;  &#xA; -or-  &#xA;  &#xA; A property has no setter method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument or named property is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="namedProperties" /> 配列と <paramref name="propertyValues" /> 配列の長さが違います。
または
<paramref name="con" /> が静的またはプライベートです。

または -
指定した引数の数が、コンストラクターの呼び出し規約で求められるコンストラクターのパラメーターの数と一致しません。

または
指定した引数の型は、コンストラクターで宣言されているパラメーターの型と一致しません。

または -
プロパティ値の型が名前付きプロパティの型と一致しません。

または -
プロパティにセッター メソッドがありません。

または -
プロパティが、コンストラクターと同じクラスまたは基本クラスに属していません。


または
指定された引数または名前付きプロパティが <see cref="T:System.String" /> または <see cref="T:System.Type" /> 以外の参照型です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">パラメーターの 1 つが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, a set of named property or value pairs, and a set of named field or value pairs.">カスタム属性のコンストラクター、そのコンストラクターの引数、名前付きプロパティまたは値のペアのセット、および名前付きフィールドまたは値のペアのセットを指定して、<see langword="CustomAttributeBuilder" /> クラスのインスタンスを初期化します。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">カスタム属性のコンストラクター。</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">カスタム属性のコンストラクターに渡す引数。</param>
      <param name="namedProperties" vsli:raw="Named properties of the custom attribute.">カスタム属性の名前付きプロパティ。</param>
      <param name="propertyValues" vsli:raw="Values for the named properties of the custom attribute.">カスタム属性の名前付きプロパティの値。</param>
      <param name="namedFields" vsli:raw="Named fields of the custom attribute.">カスタム属性の名前付きフィールド。</param>
      <param name="fieldValues" vsli:raw="Values for the named fields of the custom attribute.">カスタム属性の名前付きフィールドの値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedProperties&quot; /&gt; and &lt;paramref name=&quot;propertyValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; The lengths of the &lt;paramref name=&quot;namedFields&quot; /&gt; and &lt;paramref name=&quot;fieldValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the property values do not match the types of the named properties.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the field values do not match the types of the corresponding field types.  &#xA;  &#xA; -or-  &#xA;  &#xA; A property has no setter.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property or field does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument, named property, or named field is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="namedProperties" /> 配列と <paramref name="propertyValues" /> 配列の長さが違います。
または
<paramref name="namedFields" /> 配列と <paramref name="fieldValues" /> 配列の長さが違います。
または
<paramref name="con" /> が静的またはプライベートです。

または -
指定した引数の数が、コンストラクターの呼び出し規約で求められるコンストラクターのパラメーターの数と一致しません。

または -
指定した引数の型は、コンストラクターで宣言されているパラメーターの型と一致しません。

または -
プロパティ値の型が名前付きプロパティの型と一致しません。


または
フィールド値の型が、対応するフィールド型の型と一致しません。

または -
プロパティにセッター メソッドがありません。

または
プロパティまたはフィールドが、コンストラクターと同じクラスまたは基本クラスに属していません。

または -
指定された引数、名前付きプロパティ、または名前付きフィールドが <see cref="T:System.String" /> または <see cref="T:System.Type" /> 以外の参照型です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">パラメーターの 1 つが <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Reflection.Emit.ILGenerator">
      <summary vsli:raw="Generates Microsoft intermediate language (MSIL) instructions.">MSIL (Microsoft Intermediate Language) 命令を生成します。</summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
      <summary vsli:raw="Begins a catch block.">Catch ブロックを開始します。</summary>
      <param name="exceptionType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the exception.">例外を表す <see cref="T:System.Type" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The catch block is within a filtered exception.">catch ブロックは、フィルター処理された例外の内側にあります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;exceptionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located.">
        <paramref name="exceptionType" /> は <see langword="null" /> で、例外フィルター ブロックは、この catch ブロックが出現するまで finally ブロックが実行されることを示す値を返していません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.">生成されている MSIL (Microsoft intermediate language) は、現在例外ブロックに含まれていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
      <summary vsli:raw="Begins an exception block for a filtered exception.">フィルター処理された例外の例外ブロックを開始します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.  &#xA;  &#xA; -or-  &#xA;  &#xA; This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">生成されている MSIL (Microsoft intermediate language) は、現在例外ブロックに含まれていません。

または -
この <see cref="T:System.Reflection.Emit.ILGenerator" /> は <see cref="T:System.Reflection.Emit.DynamicMethod" /> に属しています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
      <summary vsli:raw="Begins an exception block for a non-filtered exception.">フィルター処理されない例外の例外ブロックを開始します。</summary>
      <returns vsli:raw="The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.">ブロックの終了のラベル。 finally ブロックを実行する正しい位置、または試行を終了する正しい位置です。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
      <summary vsli:raw="Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.">MSIL (Microsoft Intermediate Language) ストリームで例外フォールト ブロックを開始します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The MSIL being generated is not currently in an exception block.  &#xA;  &#xA; -or-  &#xA;  &#xA; This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">生成されている MSIL (Microsoft Intermediate Language) は、現在例外ブロックに含まれていません。

または -
この <see cref="T:System.Reflection.Emit.ILGenerator" /> は <see cref="T:System.Reflection.Emit.DynamicMethod" /> に属しています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
      <summary vsli:raw="Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.">MSIL (Microsoft Intermediate Language) 命令ストリームで finally ブロックを開始します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The MSIL being generated is not currently in an exception block.">生成されている MSIL (Microsoft Intermediate Language) は、現在例外ブロックに含まれていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginScope">
      <summary vsli:raw="Begins a lexical scope.">構文のスコープを開始します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">この <see cref="T:System.Reflection.Emit.ILGenerator" /> は <see cref="T:System.Reflection.Emit.DynamicMethod" /> に属しています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
      <summary vsli:raw="Declares a local variable of the specified type.">指定した型のローカル変数を宣言します。</summary>
      <param name="localType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of the local variable.">ローカル変数の型を表す <see cref="T:System.Type" /> オブジェクト。</param>
      <returns vsli:raw="The declared local variable.">宣言されたローカル変数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localType" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">外側の型が <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> メソッドで作成されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
      <summary vsli:raw="Declares a local variable of the specified type, optionally pinning the object referred to by the variable.">指定した型のローカル変数を宣言し、オプションでその変数が参照するオブジェクトを固定します。</summary>
      <param name="localType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of the local variable.">ローカル変数の型を表す <see cref="T:System.Type" /> オブジェクト。</param>
      <param name="pinned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to pin the object in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">メモリ内でオブジェクトを固定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.LocalBuilder&quot; /&gt; object that represents the local variable.">ローカル変数を表す <see cref="T:System.Reflection.Emit.LocalBuilder" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localType" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method body of the enclosing method has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)&quot; /&gt; method.">外側の型が <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> メソッドで作成されています。

または -
外側のメソッドのメソッド本体が <see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" /> メソッドによって作成されています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The method with which this &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; is associated is not represented by a &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">この <see cref="T:System.Reflection.Emit.ILGenerator" /> が関連付けられているメソッドが、<see cref="T:System.Reflection.Emit.MethodBuilder" /> で表されていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DefineLabel">
      <summary vsli:raw="Declares a new label.">新しいラベルを宣言します。</summary>
      <returns vsli:raw="A new label that can be used as a token for branching.">分岐のトークンとして使用できる新しいラベル。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Puts the specified instruction onto the stream of instructions.">指定された命令を命令のストリームに書き込みます。</summary>
      <param name="opcode" vsli:raw="The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.">ストリームに書き込む MSIL (Microsoft Intermediate Language) 命令。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
      <summary vsli:raw="Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.">命令の MSIL (Microsoft Intermediate Language) ストリームに、指定した命令と文字引数を書き込みます。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">ストリームに書き込む MSIL 命令。</param>
      <param name="arg" vsli:raw="The character argument pushed onto the stream immediately after the instruction.">命令の直後にストリームに書き込む文字引数。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">命令の MSIL (Microsoft Intermediate Language) ストリームに、指定した命令と数値引数を書き込みます。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream. Defined in the &lt;see langword=&quot;OpCodes&quot; /&gt; enumeration.">ストリームに書き込む MSIL 命令。 <see langword="OpCodes" /> 列挙体で定義されます。</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">命令の直後のストリームに書き込まれる数値引数。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">命令の MSIL (Microsoft Intermediate Language) ストリームに、指定した命令と数値引数を書き込みます。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">ストリームに生成する MSIL 命令。</param>
      <param name="arg" vsli:raw="The &lt;see langword=&quot;Int&quot; /&gt; argument pushed onto the stream immediately after the instruction.">命令の直後にストリームに格納する <see langword="Int" /> 引数。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">命令の MSIL (Microsoft Intermediate Language) ストリームに、指定した命令と数値引数を書き込みます。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">ストリームに書き込む MSIL 命令。</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">命令の直後のストリームに書き込まれる数値引数。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">命令の MSIL (Microsoft Intermediate Language) ストリームに、指定した命令と数値引数を書き込みます。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">ストリームに書き込む MSIL 命令。</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">命令の直後のストリームに書き込まれる数値引数。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.">命令の MSIL (Microsoft Intermediate Language) ストリームに、指定したコンストラクターの指定した命令とメタデータ トークンを書き込みます。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">ストリームに生成する MSIL 命令。</param>
      <param name="con" vsli:raw="A &lt;see langword=&quot;ConstructorInfo&quot; /&gt; representing a constructor.">コンストラクターを表す <see langword="ConstructorInfo" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This exception is new in the .NET Framework 4.">
        <paramref name="con" /> は <see langword="null" />です。 この例外は、.NET Framework 4 の新しい例外です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.">指定された命令を MSIL (Microsoft Intermediate Language) ストリームに書き込み、位置を確定した後でラベルを格納する領域を残します。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">ストリームに生成する MSIL 命令。</param>
      <param name="label" vsli:raw="The label to which to branch from this location.">この位置から分岐するラベル。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.">指定された命令を MSIL (Microsoft Intermediate Language) ストリームに書き込み、位置を確定した後でラベルを格納する領域を残します。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">ストリームに生成する MSIL 命令。</param>
      <param name="labels" vsli:raw="The array of label objects to which to branch from this location. All of the labels will be used.">この位置から分岐するラベル オブジェクトの配列。 すべてのラベルが使用されます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This exception is new in the .NET Framework 4.">
        <paramref name="con" /> は <see langword="null" />です。 この例外は、.NET Framework 4 の新しい例外です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.">指定された命令を MSIL (Microsoft Intermediate Language) ストリームに書き込み、その後ろに指定されたローカル変数のインデックスを書き込みます。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">ストリームに生成する MSIL 命令。</param>
      <param name="local" vsli:raw="A local variable.">ローカル変数。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The parent method of the &lt;paramref name=&quot;local&quot; /&gt; parameter does not match the method associated with this &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;.">
        <paramref name="local" /> パラメーターの親メソッドが、この <see cref="T:System.Reflection.Emit.ILGenerator" /> に関連付けられたメソッドと一致しません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;local&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="local" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;opcode&quot; /&gt; is a single-byte instruction, and &lt;paramref name=&quot;local&quot; /&gt; represents a local variable with an index greater than &lt;see langword=&quot;Byte.MaxValue&quot; /&gt;.">
        <paramref name="opcode" /> は 1 バイトの命令で、<paramref name="local" /> は <see langword="Byte.MaxValue" /> を超えるインデックスのローカル変数を表します。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
      <summary vsli:raw="Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.">命令の MSIL (Microsoft Intermediate Language) ストリームに、指定した命令とシグネチャ トークンを書き込みます。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">ストリームに生成する MSIL 命令。</param>
      <param name="signature" vsli:raw="A helper for constructing a signature token.">シグネチャ トークンを構築するヘルパー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;signature&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="signature" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
      <summary vsli:raw="Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.">命令の MSIL (Microsoft Intermediate Language) ストリームに、指定したフィールドの指定した命令とメタデータ トークンを書き込みます。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">ストリームに生成する MSIL 命令。</param>
      <param name="field" vsli:raw="A &lt;see langword=&quot;FieldInfo&quot; /&gt; representing a field.">フィールドを表す <see langword="FieldInfo" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.">指定された命令を MSIL ストリームに書き込み、その後ろに指定されたメソッドのメタデータ トークンを書き込みます。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">ストリームに生成する MSIL 命令。</param>
      <param name="meth" vsli:raw="A &lt;see langword=&quot;MethodInfo&quot; /&gt; representing a method.">メソッドを表す <see langword="MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;meth&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="meth" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;meth&quot; /&gt; is a generic method for which the &lt;see cref=&quot;P:System.Reflection.MethodBase.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="meth" /> は、<see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /> プロパティが <see langword="false" /> のジェネリック メソッドです。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
      <summary vsli:raw="Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.">命令の MSIL (Microsoft Intermediate Language) ストリームに、指定した命令と文字引数を書き込みます。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">ストリームに書き込む MSIL 命令。</param>
      <param name="arg" vsli:raw="The character argument pushed onto the stream immediately after the instruction.">命令の直後にストリームに書き込む文字引数。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">命令の MSIL (Microsoft Intermediate Language) ストリームに、指定した命令と数値引数を書き込みます。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">ストリームに書き込む MSIL 命令。</param>
      <param name="arg" vsli:raw="The &lt;see cref=&quot;T:System.Single&quot; /&gt; argument pushed onto the stream immediately after the instruction.">命令の直後にストリームに格納する <see langword="Single" /> 引数。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.">指定された命令を MSIL ストリームに書き込み、その後ろに指定された文字列のメタデータ トークンを書き込みます。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">ストリームに生成する MSIL 命令。</param>
      <param name="str" vsli:raw="The &lt;see langword=&quot;String&quot; /&gt; to be emitted.">生成する <see langword="String" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.">指定された命令を MSIL ストリームに書き込み、その後ろに指定された型のメタデータ トークンを書き込みます。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">ストリームに書き込む MSIL 命令。</param>
      <param name="cls" vsli:raw="A &lt;see langword=&quot;Type&quot; /&gt;.">
        <see langword="Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;cls&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="cls" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
      <summary vsli:raw="Puts a &lt;see langword=&quot;call&quot; /&gt; or &lt;see langword=&quot;callvirt&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream to call a &lt;see langword=&quot;varargs&quot; /&gt; method.">Microsoft intermediate language (MSIL) ストリームに、<see langword="call" /> メソッドを呼び出す <see langword="callvirt" /> または <see langword="varargs" /> 命令を配置します。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Call&quot; /&gt;, &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Callvirt&quot; /&gt;, or &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Newobj&quot; /&gt;.">ストリームに生成する MSIL 命令。 <see cref="F:System.Reflection.Emit.OpCodes.Call" />、<see cref="F:System.Reflection.Emit.OpCodes.Callvirt" />、または <see cref="F:System.Reflection.Emit.OpCodes.Newobj" /> にする必要があります。</param>
      <param name="methodInfo" vsli:raw="The &lt;see langword=&quot;varargs&quot; /&gt; method to be called.">呼び出される <see langword="varargs" /> メソッド。</param>
      <param name="optionalParameterTypes" vsli:raw="The types of the optional arguments if the method is a &lt;see langword=&quot;varargs&quot; /&gt; method; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">メソッドが <see langword="varargs" /> メソッドの場合は、省略可能な引数の型。それ以外の場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;opcode&quot; /&gt; does not specify a method call.">
        <paramref name="opcode" /> はメソッド呼び出しを指定していません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;methodInfo&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="methodInfo" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The calling convention for the method is not &lt;see langword=&quot;varargs&quot; /&gt;, but optional parameter types are supplied. This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.">メソッドの呼び出し規約が <see langword="varargs" /> ではなく、省略可能なパラメーター型が使用されています。 .NET Framework バージョン 1.0 およびバージョン 1.1 では、この例外がスローされます。それ以降のバージョンでは、例外はスローされません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
      <summary vsli:raw="Puts a &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.">間接的な呼び出しにマネージド呼び出し規約を指定して、MSIL (Microsoft Intermediate Language) ストリームに <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> 命令を書き込みます。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt;.">ストリームに生成する MSIL 命令。 <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> にする必要があります。</param>
      <param name="callingConvention" vsli:raw="The managed calling convention to be used.">使用するマネージド呼び出し規則。</param>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the result.">結果の <see cref="T:System.Type" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the required arguments to the instruction.">命令に必要な引数の型。</param>
      <param name="optionalParameterTypes" vsli:raw="The types of the optional arguments for &lt;see langword=&quot;varargs&quot; /&gt; calls.">
        <see langword="varargs" /> 呼び出しの省略可能な引数の型。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;optionalParameterTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, but &lt;paramref name=&quot;callingConvention&quot; /&gt; does not include the &lt;see cref=&quot;F:System.Reflection.CallingConventions.VarArgs&quot; /&gt; flag.">
        <paramref name="optionalParameterTypes" /> が <see langword="null" /> でないにもかかわらず、<paramref name="callingConvention" /> に <see cref="F:System.Reflection.CallingConventions.VarArgs" /> フラグが含まれていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
      <summary vsli:raw="Puts a &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.">間接的な呼び出しにアンマネージ呼び出し規約を指定して、MSIL (Microsoft Intermediate Language) ストリームに <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> 命令を書き込みます。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt;.">ストリームに生成する MSIL 命令。 <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> にする必要があります。</param>
      <param name="unmanagedCallConv" vsli:raw="The unmanaged calling convention to be used.">使用するアンマネージ呼び出し規約。</param>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the result.">結果の <see cref="T:System.Type" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the required arguments to the instruction.">命令に必要な引数の型。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) necessary to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with the given local variable.">指定されたローカル変数で <see cref="Overload:System.Console.WriteLine" /> を呼び出すのに必要な Microsoft Intermediate Language (MSIL) を生成します。</summary>
      <param name="localBuilder" vsli:raw="The local variable whose value is to be written to the console.">コンソールに値が書き込まれるローカル変数。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The type of &lt;paramref name=&quot;localBuilder&quot; /&gt; is &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;, which are not supported.  &#xA;  &#xA; -or-  &#xA;  &#xA; There is no overload of &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; that accepts the type of &lt;paramref name=&quot;localBuilder&quot; /&gt;.">
        <paramref name="localBuilder" /> の型は <see cref="T:System.Reflection.Emit.TypeBuilder" /> または <see cref="T:System.Reflection.Emit.EnumBuilder" /> で、これらはサポートされていません。

または -
<see cref="Overload:System.Console.WriteLine" />の型を受け入れる <paramref name="localBuilder" /> のオーバーロードがありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localBuilder" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) necessary to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with the given field.">指定したフィールドを使用して <see cref="Overload:System.Console.WriteLine" /> を呼び出すために必要な MSIL を生成します。</summary>
      <param name="fld" vsli:raw="The field whose value is to be written to the console.">値がコンソールに書き込まれるフィールド。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There is no overload of the &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; method that accepts the type of the specified field.">指定されたフィールドの型を受け取る <see cref="Overload:System.Console.WriteLine" /> メソッドのオーバーロードがありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fld&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fld" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The type of the field is &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;, which are not supported.">フィールドの型が <see cref="T:System.Reflection.Emit.TypeBuilder" /> であるか、またはサポートされていない <see cref="T:System.Reflection.Emit.EnumBuilder" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with a string.">文字列を使用して <see cref="Overload:System.Console.WriteLine" /> を呼び出す MSIL を生成します。</summary>
      <param name="value" vsli:raw="The string to be printed.">出力する文字列。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
      <summary vsli:raw="Ends an exception block.">例外ブロックを終了します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The end exception block occurs in an unexpected place in the code stream.">コード ストリームの予期しない場所で例外ブロックの終了が発生しました。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.">生成されている MSIL (Microsoft intermediate language) は、現在例外ブロックに含まれていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndScope">
      <summary vsli:raw="Ends a lexical scope.">構文のスコープを終了します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">この <see cref="T:System.Reflection.Emit.ILGenerator" /> は <see cref="T:System.Reflection.Emit.DynamicMethod" /> に属しています。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ILGenerator.ILOffset">
      <summary vsli:raw="Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.ILGenerator" /> によって生成されている MSIL (Microsoft Intermediate Language) ストリーム内の現在のオフセットをバイト単位で取得します。</summary>
      <returns vsli:raw="The offset in the MSIL stream at which the next instruction will be emitted.">次の命令が出力される MSIL ストリーム内のオフセット。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
      <summary vsli:raw="Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.">指定したラベルを使用して、MSIL (Microsoft Intermediate Language) ストリームの現在の位置をマークします。</summary>
      <param name="loc" vsli:raw="The label for which to set an index.">インデックスを設定するラベル。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;loc&quot; /&gt; represents an invalid index into the label array.  &#xA;  &#xA; -or-  &#xA;  &#xA; An index for &lt;paramref name=&quot;loc&quot; /&gt; has already been defined.">
        <paramref name="loc" /> がラベル配列の無効なインデックスを表しています。

または -
<paramref name="loc" /> のインデックスが既に定義されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
      <summary vsli:raw="Emits an instruction to throw an exception.">例外をスローする命令を生成します。</summary>
      <param name="excType" vsli:raw="The class of the type of exception to throw.">スローする例外の型のクラス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;excType&quot; /&gt; is not the &lt;see cref=&quot;T:System.Exception&quot; /&gt; class or a derived class of &lt;see cref=&quot;T:System.Exception&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type does not have a parameterless constructor.">
        <paramref name="excType" /> が <see cref="T:System.Exception" /> クラスではないか、または <see cref="T:System.Exception" /> の派生クラスではありません。

または -
この型には、パラメーターなしのコンストラクターがありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;excType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="excType" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
      <summary vsli:raw="Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.">現在のアクティブな構文のスコープのローカルとウォッチの評価で使用する名前空間を指定します。</summary>
      <param name="usingNamespace" vsli:raw="The namespace to be used in evaluating locals and watches for the current active lexical scope.">現在のアクティブな構文のスコープのローカルとウォッチの評価で使用する名前空間。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;usingNamespace&quot; /&gt; is zero.">
        <paramref name="usingNamespace" /> の長さが 0 です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;usingNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="usingNamespace" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">この <see cref="T:System.Reflection.Emit.ILGenerator" /> は <see cref="T:System.Reflection.Emit.DynamicMethod" /> に属しています。</exception>
    </member>
    <member name="T:System.Reflection.Emit.Label">
      <summary vsli:raw="Represents a label in the instruction stream. &lt;see langword=&quot;Label&quot; /&gt; is used in conjunction with the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; class.">命令ストリームのラベルを表します。 <see langword="Label" /> インターフェイスは、<see cref="T:System.Reflection.Emit.ILGenerator" /> クラスと組み合わせて使用します。</summary>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Object)">
      <summary vsli:raw="Checks if the given object is an instance of &lt;see langword=&quot;Label&quot; /&gt; and is equal to this instance.">指定されたオブジェクトが <see langword="Label" /> のインスタンスで、このインスタンスと等しいかどうかを確認します。</summary>
      <param name="obj" vsli:raw="The object to compare with this &lt;see langword=&quot;Label&quot; /&gt; instance.">この <see langword="Label" /> インスタンスと比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;Label&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" /> が <see langword="Label" /> のインスタンスで、このオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether the current instance is equal to the specified &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt;.">現在のインスタンスが指定した <see cref="T:System.Reflection.Emit.Label" /> と等しいかどうかを示します。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to the current instance.">現在のインスタンスと比較する対象の <see cref="T:System.Reflection.Emit.Label" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;obj&quot; /&gt; is equal to the value of the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" /> の値が現在のインスタンスの値に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.GetHashCode">
      <summary vsli:raw="Generates a hash code for this instance.">このインスタンスのハッシュ コードを生成します。</summary>
      <returns vsli:raw="A hash code for this instance.">このインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; structures are equal.">2 つの <see cref="T:System.Reflection.Emit.Label" /> 構造体が等しいかどうかを示します。</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">
        <paramref name="b" /> と比較する <see cref="T:System.Reflection.Emit.Label" />。</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">
        <paramref name="a" /> と比較する <see cref="T:System.Reflection.Emit.Label" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が <paramref name="a" /> に等しい場合は <paramref name="b" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; structures are not equal.">2 つの <see cref="T:System.Reflection.Emit.Label" /> 構造体が等しくないかどうかを示します。</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">
        <paramref name="b" /> と比較する <see cref="T:System.Reflection.Emit.Label" />。</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">
        <paramref name="a" /> と比較する <see cref="T:System.Reflection.Emit.Label" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is not equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が <paramref name="a" /> と等しくない場合は <paramref name="b" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.Emit.LocalBuilder">
      <summary vsli:raw="Represents a local variable within a method or constructor.">メソッドまたはコンストラクターのローカル変数を表します。</summary>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.IsPinned">
      <summary vsli:raw="Gets a value indicating whether the object referred to by the local variable is pinned in memory.">ローカル変数によって参照されるオブジェクトがメモリに固定されているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object referred to by the local variable is pinned in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ローカル変数によって参照されるオブジェクトがメモリに固定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalIndex">
      <summary vsli:raw="Gets the zero-based index of the local variable within the method body.">メソッド本体内のローカル変数の、0 から始まるインデックスを取得します。</summary>
      <returns vsli:raw="An integer value that represents the order of declaration of the local variable within the method body.">メソッド本体内のローカル変数の宣言順序を表す整数値。</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalType">
      <summary vsli:raw="Gets the type of the local variable.">ローカル変数の型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the local variable.">ローカル変数の <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Reflection.Emit.ParameterBuilder">
      <summary vsli:raw="Creates or associates parameter information.">パラメーター情報の作成または関連付けを行います。</summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Attributes">
      <summary vsli:raw="Retrieves the attributes for this parameter.">このパラメーターの属性を取得します。</summary>
      <returns vsli:raw="Read-only. Retrieves the attributes for this parameter.">読み取り専用。 このパラメーターの属性を取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsIn">
      <summary vsli:raw="Retrieves whether this is an input parameter.">入力パラメーターかどうかを取得します。</summary>
      <returns vsli:raw="Read-only. Retrieves whether this is an input parameter.">読み取り専用。 入力パラメーターかどうかを取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOptional">
      <summary vsli:raw="Retrieves whether this parameter is optional.">パラメーターが省略可能かどうかを取得します。</summary>
      <returns vsli:raw="Read-only. Specifies whether this parameter is optional.">読み取り専用。 パラメーターが省略可能かどうかを指定します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOut">
      <summary vsli:raw="Retrieves whether this parameter is an output parameter.">このパラメーターが出力パラメーターかどうかを取得します。</summary>
      <returns vsli:raw="Read-only. Retrieves whether this parameter is an output parameter.">読み取り専用。 このパラメーターが出力パラメーターかどうかを取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Name">
      <summary vsli:raw="Retrieves the name of this parameter.">このパラメーターの名前を取得します。</summary>
      <returns vsli:raw="Read-only. Retrieves the name of this parameter.">読み取り専用。 このパラメーターの名前を取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Position">
      <summary vsli:raw="Retrieves the signature position for this parameter.">このパラメーターのシグネチャ位置を取得します。</summary>
      <returns vsli:raw="Read-only. Retrieves the signature position for this parameter.">読み取り専用。 このパラメーターのシグネチャ位置を取得します。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of the parameter.">パラメーターの既定値を設定します。</summary>
      <param name="defaultValue" vsli:raw="The default value of this parameter.">このパラメーターの既定値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The parameter is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the parameter.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parameter is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">パラメーターが、サポートされている型のいずれでもありません。

または -
<paramref name="defaultValue" /> の型がパラメーターの型と一致しません。

または -
パラメーターが <see cref="T:System.Object" /> 型または他の参照型であり、<paramref name="defaultValue" /> が <see langword="null" /> ではなく、値を参照型に割り当てることができません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">指定されたカスタム属性の blob を使用して、カスタム属性を設定します。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">カスタム属性を定義するヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> は <see langword="null" />です。</exception>
    </member>
    <member name="T:System.Reflection.Emit.SignatureHelper">
      <summary vsli:raw="Provides methods for building signatures.">シグネチャを構築するメソッドを提供します。</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)">
      <summary vsli:raw="Adds an argument to the signature.">シグネチャに引数を追加します。</summary>
      <param name="clsArgument" vsli:raw="The type of the argument.">引数の型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.">シグネチャが既に完了しています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;clsArgument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="clsArgument" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)">
      <summary vsli:raw="Adds an argument of the specified type to the signature, specifying whether the argument is pinned.">シグネチャに指定した型の引数を追加して、引数が固定されるかどうかを指定します。</summary>
      <param name="argument" vsli:raw="The argument type.">引数の型。</param>
      <param name="pinned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the argument is pinned; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">引数が固定される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;argument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argument" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])">
      <summary vsli:raw="Adds an argument to the signature, with the specified custom modifiers.">指定したカスタム修飾子を使用して、シグネチャに引数を追加します。</summary>
      <param name="argument" vsli:raw="The argument type.">引数の型。</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> や <see cref="T:System.Runtime.CompilerServices.IsBoxed" /> などの、引数の必須のカスタム修飾子を表す型の配列。 引数に必須のカスタム修飾子がない場合は、<see langword="null" /> を指定します。</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> や <see cref="T:System.Runtime.CompilerServices.IsBoxed" /> などの、引数のオプションのカスタム修飾子を表す型の配列。 引数にオプションのカスタム修飾子がない場合は、<see langword="null" /> を指定します。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;argument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argument" /> は <see langword="null" />です。

または -
<paramref name="requiredCustomModifiers" /> または <paramref name="optionalCustomModifiers" />の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.">シグネチャが既に完了しています。
または
指定したカスタム修飾子の 1 つが配列型です。

または -
指定したカスタム修飾子の 1 つがオープン ジェネリック型です。 つまり、そのカスタム修飾子に対する <see cref="P:System.Type.ContainsGenericParameters" /> プロパティが <see langword="true" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a set of arguments to the signature, with the specified custom modifiers.">指定したカスタム修飾子を使用して、シグネチャに引数のセットを追加します。</summary>
      <param name="arguments" vsli:raw="The types of the arguments to be added.">追加する引数の型。</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、<see cref="T:System.Runtime.CompilerServices.IsConst" /> や <see cref="T:System.Runtime.CompilerServices.IsBoxed" /> などの、対応する引数の必須のカスタム修飾子を表します。 特定の引数に必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どの引数にも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、<see cref="T:System.Runtime.CompilerServices.IsConst" /> や <see cref="T:System.Runtime.CompilerServices.IsBoxed" /> などの、対応する引数のオプションのカスタム修飾子を表します。 特定の引数にオプションのカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どの引数にもオプションのカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="arguments" /> の要素は <see langword="null" /> です。

または -
指定したカスタム修飾子の 1 つが <see langword="null" /> です。 ただし、<see langword="null" /> は、どの引数のカスタム修飾子の配列に対しても指定できます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;arguments&quot; /&gt;.">シグネチャが既に完了しています。
または
指定したカスタム修飾子の 1 つが配列型です。

または -
指定したカスタム修飾子の 1 つがオープン ジェネリック型です。 つまり、そのカスタム修飾子に対する <see cref="P:System.Type.ContainsGenericParameters" /> プロパティが <see langword="true" /> です。

または -
<paramref name="requiredCustomModifiers" /> または <paramref name="optionalCustomModifiers" /> のサイズは <paramref name="arguments" /> のサイズと同じではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddSentinel">
      <summary vsli:raw="Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.">vararg の固定部分の終わりをマークします。 呼び出し元が vararg シグネチャ呼び出しサイトを作成する場合にだけ使用します。</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)">
      <summary vsli:raw="Checks if this instance is equal to the given object.">このインスタンスが、指定したオブジェクトと同一かどうかを確認します。</summary>
      <param name="obj" vsli:raw="The object with which this instance should be compared.">このインスタンスと比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given object is a &lt;see langword=&quot;SignatureHelper&quot; /&gt; and represents the same signature; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したオブジェクトが <see langword="SignatureHelper" /> で、同じシグネチャを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)">
      <summary vsli:raw="Returns a signature helper for a field.">フィールドのシグネチャ ヘルパーを返します。</summary>
      <param name="mod" vsli:raw="The dynamic module that contains the field for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">
        <see langword="SignatureHelper" /> を要求するフィールドが格納されている動的モジュール。</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a field.">フィールドの <see langword="SignatureHelper" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetHashCode">
      <summary vsli:raw="Creates and returns a hash code for this instance.">このインスタンスのハッシュ コードを作成し、返します。</summary>
      <returns vsli:raw="The hash code based on the name.">名前に基づいたハッシュ コード。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper">
      <summary vsli:raw="Returns a signature helper for a local variable.">ローカル変数のシグネチャ ヘルパーを返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; for a local variable.">ローカル変数の <see cref="T:System.Reflection.Emit.SignatureHelper" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)">
      <summary vsli:raw="Returns a signature helper for a local variable.">ローカル変数のシグネチャ ヘルパーを返します。</summary>
      <param name="mod" vsli:raw="The dynamic module that contains the local variable for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">
        <see langword="SignatureHelper" /> を要求するローカル変数が格納されている動的モジュール。</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a local variable.">ローカル変数の <see langword="SignatureHelper" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)">
      <summary vsli:raw="Returns a signature helper for a method given the method's calling convention and return type.">メソッドの呼び出し規約、および戻り値の型を指定して、メソッドのシグネチャ ヘルパーを返します。</summary>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">メソッドの呼び出し規則。</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">メソッドの戻り値の型。戻り値の型が void (Visual Basic では <see langword="Sub" /> プロシージャ) である場合は <see langword="null" />。</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">メソッドの <see langword="SignatureHelper" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)">
      <summary vsli:raw="Returns a signature helper for a method given the method's module, calling convention, and return type.">メソッドのモジュール、呼び出し規約、戻り値の型を指定して、メソッドのシグネチャのヘルパーを返します。</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the method for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">
        <see langword="SignatureHelper" /> を要求するメソッドが格納されている <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">メソッドの呼び出し規則。</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">メソッドの戻り値の型。戻り値の型が void (Visual Basic では <see langword="Sub" /> プロシージャ) である場合は <see langword="null" />。</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">メソッドの <see langword="SignatureHelper" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> が <see cref="T:System.Reflection.Emit.ModuleBuilder" />ではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary vsli:raw="Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.">標準の呼び出し規約を使用し、メソッドのモジュール、戻り値の型、および引数型を指定して、メソッドのシグネチャ ヘルパーを返します。</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the method for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">
        <see langword="SignatureHelper" /> を要求するメソッドが格納されている <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">メソッドの戻り値の型。戻り値の型が void (Visual Basic では <see langword="Sub" /> プロシージャ) である場合は <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the arguments of the method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no arguments.">メソッドの引数の型。メソッドに引数がない場合は <see langword="null" />。</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">メソッドの <see langword="SignatureHelper" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> は <see langword="null" />です。

または -
<paramref name="parameterTypes" /> の要素は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> が <see cref="T:System.Reflection.Emit.ModuleBuilder" /> ではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.">プロパティを格納している動的モジュール、呼び出し規約、プロパティの型、プロパティの引数、および戻り値の型と引数のカスタム修飾子を指定して、プロパティのシグネチャ ヘルパーを返します。</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.SignatureHelper" /> を要求するプロパティが格納されている <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">プロパティ アクセサーの呼び出し規則。</param>
      <param name="returnType" vsli:raw="The property type.">プロパティの型</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> や <see cref="T:System.Runtime.CompilerServices.IsBoxed" /> などの、戻り値の型の必須のカスタム修飾子を表す型の配列。 戻り値の型が必須のカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> や <see cref="T:System.Runtime.CompilerServices.IsBoxed" /> などの、戻り値の型のオプションのカスタム修飾子を表す型の配列。 戻り値の型に省略可能のカスタム修飾子がない場合は、<see langword="null" /> を指定します。</param>
      <param name="parameterTypes" vsli:raw="The types of the property's arguments, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">プロパティの引数の型。プロパティに引数がない場合は <see langword="null" />。</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、プロパティの対応する引数の必須のカスタム修飾子を表します。 特定の引数に必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 プロパティに引数がない場合、またはどの引数にも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、プロパティの対応する引数のオプションのカスタム修飾子を表します。 特定の引数にオプションのカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 プロパティに引数がない場合、またはどの引数にもオプションのカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">プロパティの <see cref="T:System.Reflection.Emit.SignatureHelper" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="mod" /> が <see langword="null" /> です。

または -
<paramref name="parameterTypes" /> の要素は <see langword="null" /> です。

または
指定したカスタム修飾子の 1 つが <see langword="null" /> です。 ただし、<see langword="null" /> は、どの引数のカスタム修飾子の配列に対しても指定できます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredParameterTypeCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalParameterTypeCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">シグネチャが既に完了しています。
または
<paramref name="mod" /> が <see cref="T:System.Reflection.Emit.ModuleBuilder" /> ではありません。

または -
指定したカスタム修飾子の 1 つが配列型です。

または -
指定したカスタム修飾子の 1 つがオープン ジェネリック型です。 つまり、そのカスタム修飾子に対する <see cref="P:System.Type.ContainsGenericParameters" /> プロパティが <see langword="true" /> です。

または -
<paramref name="requiredParameterTypeCustomModifiers" /> または <paramref name="optionalParameterTypeCustomModifiers" /> のサイズは <paramref name="parameterTypes" /> のサイズと同じではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.">プロパティを格納している動的モジュール、プロパティの型、およびプロパティの引数を指定して、プロパティのシグネチャ ヘルパーを返します。</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.SignatureHelper" /> を要求するプロパティが格納されている <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</param>
      <param name="returnType" vsli:raw="The property type.">プロパティの型</param>
      <param name="parameterTypes" vsli:raw="The argument types, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">引数型。プロパティに引数がない場合は <see langword="null" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">プロパティの <see cref="T:System.Reflection.Emit.SignatureHelper" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> は <see langword="null" />です。

または -
<paramref name="parameterTypes" /> の要素は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> が <see cref="T:System.Reflection.Emit.ModuleBuilder" /> ではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.">プロパティを格納している動的モジュール、プロパティの型、プロパティの引数、および戻り値の型と引数のカスタム修飾子を指定して、プロパティのシグネチャ ヘルパーを返します。</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.SignatureHelper" /> を要求するプロパティが格納されている <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</param>
      <param name="returnType" vsli:raw="The property type.">プロパティの型</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> や <see cref="T:System.Runtime.CompilerServices.IsBoxed" /> などの、戻り値の型の必須のカスタム修飾子を表す型の配列。 戻り値の型が必須のカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> や <see cref="T:System.Runtime.CompilerServices.IsBoxed" /> などの、戻り値の型のオプションのカスタム修飾子を表す型の配列。 戻り値の型に省略可能のカスタム修飾子がない場合は、<see langword="null" /> を指定します。</param>
      <param name="parameterTypes" vsli:raw="The types of the property's arguments, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">プロパティの引数の型。プロパティに引数がない場合は <see langword="null" />。</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、プロパティの対応する引数の必須のカスタム修飾子を表します。 特定の引数に必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 プロパティに引数がない場合、またはどの引数にも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、プロパティの対応する引数のオプションのカスタム修飾子を表します。 特定の引数にオプションのカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 プロパティに引数がない場合、またはどの引数にもオプションのカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">プロパティの <see cref="T:System.Reflection.Emit.SignatureHelper" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="mod" /> は <see langword="null" />です。
または
<paramref name="parameterTypes" /> の要素は <see langword="null" /> です。
または
指定したカスタム修飾子の 1 つが <see langword="null" /> です。 ただし、<see langword="null" /> は、どの引数のカスタム修飾子の配列に対しても指定できます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredParameterTypeCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalParameterTypeCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">シグネチャが既に完了しています。
または
<paramref name="mod" /> が <see cref="T:System.Reflection.Emit.ModuleBuilder" /> ではありません。

または -
指定したカスタム修飾子の 1 つが配列型です。

または
指定したカスタム修飾子の 1 つがオープン ジェネリック型です。 つまり、そのカスタム修飾子に対する <see cref="P:System.Type.ContainsGenericParameters" /> プロパティが <see langword="true" /> です。
または
<paramref name="requiredParameterTypeCustomModifiers" /> または <paramref name="optionalParameterTypeCustomModifiers" /> のサイズは <paramref name="parameterTypes" /> のサイズと同じではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetSignature">
      <summary vsli:raw="Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.">シグネチャに終了トークンを追加し、シグネチャが完成したことを示します。これ以降、トークンは追加できません。</summary>
      <returns vsli:raw="A byte array made up of the full signature.">完全なシグネチャで構成されるバイト配列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.ToString">
      <summary vsli:raw="Returns a string representing the signature arguments.">シグネチャの引数を表す文字列を返します。</summary>
      <returns vsli:raw="A string representing the arguments of this signature.">このシグネチャの引数を表す文字列。</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Extensions</name>
  </assembly>
  <members>
    <member name="T:System.AppDomain">
      <summary>アプリケーション ドメインを表します。アプリケーション ドメインとは、アプリケーションが実行される分離された環境です。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.AppDomain.AppendPrivatePath(System.String)">
      <summary>指定されたディレクトリ名をプライベート パス リストに追加します。</summary>
      <param name="path">プライベート パスに追加するディレクトリ名。</param>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="M:System.AppDomain.ApplyPolicy(System.String)">
      <summary>ポリシーが適用された後のアセンブリの表示名を返します。</summary>
      <param name="assemblyName">アセンブリの表示名。<see cref="P:System.Reflection.Assembly.FullName" /> プロパティによって返される表示名と同じ形式で指定します。</param>
      <returns>ポリシーが適用された後のアセンブリの表示名を保持する文字列。</returns>
    </member>
    <member name="E:System.AppDomain.AssemblyLoad">
      <summary>アセンブリが読み込まれたときに発生します。</summary>
    </member>
    <member name="E:System.AppDomain.AssemblyResolve">
      <summary>アセンブリの解決が失敗したときに発生します。</summary>
    </member>
    <member name="P:System.AppDomain.BaseDirectory">
      <summary>アセンブリを探すためにアセンブリ リゾルバーが使用したベース ディレクトリを取得します。</summary>
      <returns>アセンブリを探すためにアセンブリ リゾルバーが使用するベース ディレクトリ。</returns>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="M:System.AppDomain.ClearPrivatePath">
      <summary>プライベート アセンブリの場所を指定するパスを空の文字列 ("") にリセットします。</summary>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="M:System.AppDomain.ClearShadowCopyPath">
      <summary>シャドウ コピーされたアセンブリが含まれているディレクトリのリストを空の文字列 ("") にリセットします。</summary>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="M:System.AppDomain.CreateDomain(System.String)">
      <summary>名前を指定して新しいアプリケーション ドメインを作成します。</summary>
      <param name="friendlyName">ドメインの表示名。</param>
      <returns>新しく作成されたアプリケーション ドメイン。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="friendlyName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core でサポートされていないメソッド。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String)">
      <summary>指定したアセンブリで定義されている、指定した型の新しいインスタンスを作成します。</summary>
      <param name="assemblyName">アセンブリの表示名。 以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></param>
      <param name="typeName">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</param>
      <returns>
        <paramref name="typeName" /> で指定した新しいインスタンスのラッパーであるオブジェクト。 実際のオブジェクトにアクセスするには、戻り値のラップを解除する必要があります。</returns>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> または <paramref name="typeName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> は正しいアセンブリではありません。

または -
共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> が見つかりませんでした。</exception>
      <exception cref="T:System.MethodAccessException">呼び出し元には、このコンストラクターを呼び出すアクセス許可がありません。</exception>
      <exception cref="T:System.MissingMethodException">一致するパブリック コンストラクターが見つかりませんでした。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> が <paramref name="assemblyName" /> に見つかりませんでした。</exception>
      <exception cref="T:System.NullReferenceException">このインスタンスは <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>指定したアセンブリで定義されている、指定した型の新しいインスタンスを作成します。 バインダー、バインディング フラグ、コンストラクター引数、引数を解釈するために使用するカルチャ固有の情報、および省略可能なアクティベーション属性をパラメーターで指定します。</summary>
      <param name="assemblyName">アセンブリの表示名。 以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></param>
      <param name="typeName">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</param>
      <param name="ignoreCase">検索で大文字と小文字を区別するかどうかを指定する Boolean 値。</param>
      <param name="bindingAttr">
        <paramref name="typeName" /> コンストラクターの検索に影響を与える 0 個以上のビット フラグの組み合わせ。 <paramref name="bindingAttr" /> が 0 の場合は、大文字と小文字を区別してパブリック コンストラクターを検索します。</param>
      <param name="binder">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションを使用した <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。 <paramref name="binder" /> が null の場合は、既定のバインダーが使用されます。</param>
      <param name="args">コンストラクターに渡される引数。 この引数の配列は、呼び出すコンストラクターのパラメーターに対して、数、順序、および型を一致させる必要があります。 パラメーターなしのコンストラクターを使用する場合は、<paramref name="args" /> を空の配列または null にする必要があります。</param>
      <param name="culture">
        <paramref name="args" /> から <paramref name="typeName" /> コンストラクターに対して宣言された仮引数型への強制変換を制御するカルチャ固有の情報。 <paramref name="culture" /> が <see langword="null" /> の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。</param>
      <param name="activationAttributes">アクティべーションに参加できる 1 つ以上の属性の配列。 通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。
このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。 クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。 分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</param>
      <returns>
        <paramref name="typeName" /> で指定した新しいインスタンスのラッパーであるオブジェクト。 実際のオブジェクトにアクセスするには、戻り値のラップを解除する必要があります。</returns>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> または <paramref name="typeName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> は正しいアセンブリではありません。

または -
現在読み込まれているバージョンよりも新しいバージョンの共通言語ランタイムで、<paramref name="assemblyName" /> がコンパイルされました。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> が見つかりませんでした。</exception>
      <exception cref="T:System.MethodAccessException">呼び出し元には、このコンストラクターを呼び出すアクセス許可がありません。</exception>
      <exception cref="T:System.MissingMethodException">一致するコンストラクターが見つかりませんでした。</exception>
      <exception cref="T:System.NotSupportedException">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> が <paramref name="assemblyName" /> に見つかりませんでした。</exception>
      <exception cref="T:System.NullReferenceException">このインスタンスは <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
      <summary>指定したアセンブリで定義されている、指定した型の新しいインスタンスを作成します。 アクティベーション属性の配列をパラメーターで指定します。</summary>
      <param name="assemblyName">アセンブリの表示名。 以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></param>
      <param name="typeName">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</param>
      <param name="activationAttributes">アクティべーションに参加できる 1 つ以上の属性の配列。 通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。
このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。 分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</param>
      <returns>
        <paramref name="typeName" /> で指定した新しいインスタンスのラッパーであるオブジェクト。 実際のオブジェクトにアクセスするには、戻り値のラップを解除する必要があります。</returns>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> または <paramref name="typeName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> は正しいアセンブリではありません。

または -
共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> が見つかりませんでした。</exception>
      <exception cref="T:System.MethodAccessException">呼び出し元には、このコンストラクターを呼び出すアクセス許可がありません。</exception>
      <exception cref="T:System.MissingMethodException">一致するパブリック コンストラクターが見つかりませんでした。</exception>
      <exception cref="T:System.NotSupportedException">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> が <paramref name="assemblyName" /> に見つかりませんでした。</exception>
      <exception cref="T:System.NullReferenceException">このインスタンスは <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
      <summary>指定した型の新しいインスタンスを作成します。 型が定義されているアセンブリの名前と、型の名前をパラメーターで指定します。</summary>
      <param name="assemblyName">アセンブリの表示名。 以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></param>
      <param name="typeName">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</param>
      <returns>
        <paramref name="typeName" /> で指定したオブジェクトのインスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> または <paramref name="typeName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.MissingMethodException">一致するパブリック コンストラクターが見つかりませんでした。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> が <paramref name="assemblyName" /> に見つかりませんでした。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> が見つかりませんでした。</exception>
      <exception cref="T:System.MethodAccessException">呼び出し元には、このコンストラクターを呼び出すアクセス許可がありません。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> は正しいアセンブリではありません。

または -
共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>指定したアセンブリで定義されている、指定した型の新しいインスタンスを作成します。型名の大文字と小文字の区別を無視するかどうか、作成する型を選択するために使用されるバインディング属性とバインダー、コンストラクターの引数、カルチャ、およびアクティベーション属性を指定します。</summary>
      <param name="assemblyName">アセンブリの表示名。 以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></param>
      <param name="typeName">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</param>
      <param name="ignoreCase">検索で大文字と小文字を区別するかどうかを指定する Boolean 値。</param>
      <param name="bindingAttr">
        <paramref name="typeName" /> コンストラクターの検索に影響を与える 0 個以上のビット フラグの組み合わせ。 <paramref name="bindingAttr" /> が 0 の場合は、大文字と小文字を区別してパブリック コンストラクターを検索します。</param>
      <param name="binder">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションを使用した <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。 <paramref name="binder" /> が null の場合は、既定のバインダーが使用されます。</param>
      <param name="args">コンストラクターに渡される引数。 この引数の配列は、呼び出すコンストラクターのパラメーターに対して、数、順序、および型を一致させる必要があります。 パラメーターなしのコンストラクターを使用する場合は、<paramref name="args" /> を空の配列または null にする必要があります。</param>
      <param name="culture">型の強制変換を制御するために使用するカルチャ固有のオブジェクト。 <paramref name="culture" /> が <see langword="null" /> の場合は、現在のスレッドの <see langword="CultureInfo" /> が使用されます。</param>
      <param name="activationAttributes">アクティべーションに参加できる 1 つ以上の属性の配列。 一般的に、1 つの配列に 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトが含まれます。 リモート オブジェクトのアクティブ化に必要な URL を指定します。
このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。 クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。 分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</param>
      <returns>
        <paramref name="typeName" /> で指定したオブジェクトのインスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> または <paramref name="typeName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.MissingMethodException">一致するコンストラクターが見つかりませんでした。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> が <paramref name="assemblyName" /> に見つかりませんでした。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> が見つかりませんでした。</exception>
      <exception cref="T:System.MethodAccessException">呼び出し元には、このコンストラクターを呼び出すアクセス許可がありません。</exception>
      <exception cref="T:System.NotSupportedException">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> は正しいアセンブリではありません。

または -
現在読み込まれているバージョンよりも新しいバージョンの共通言語ランタイムで、<paramref name="assemblyName" /> がコンパイルされました。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
      <summary>指定した型の新しいインスタンスを作成します。 型が定義されているアセンブリの名前、型の名前、およびアクティベーション属性の配列をパラメーターで指定します。</summary>
      <param name="assemblyName">アセンブリの表示名。 以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></param>
      <param name="typeName">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</param>
      <param name="activationAttributes">アクティべーションに参加できる 1 つ以上の属性の配列。 通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。
このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。 分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</param>
      <returns>
        <paramref name="typeName" /> で指定したオブジェクトのインスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> または <paramref name="typeName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.MissingMethodException">一致するパブリック コンストラクターが見つかりませんでした。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> が <paramref name="assemblyName" /> に見つかりませんでした。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> が見つかりませんでした。</exception>
      <exception cref="T:System.MethodAccessException">呼び出し元には、このコンストラクターを呼び出すアクセス許可がありません。</exception>
      <exception cref="T:System.NotSupportedException">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> は正しいアセンブリではありません。

または -
共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
      <summary>指定したアセンブリ ファイルで定義されている、指定した型の新しいインスタンスを作成します。</summary>
      <param name="assemblyFile">要求する型を定義しているアセンブリが格納されているファイルの名前 (パスを含む)。 アセンブリは <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> メソッドを使用して読み込まれます。</param>
      <param name="typeName">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</param>
      <returns>新しいインスタンスのラッパーであるオブジェクト。<paramref name="typeName" /> が見つからない場合は <see langword="null" />。 実際のオブジェクトにアクセスするには、戻り値のラップを解除する必要があります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> が <see langword="null" /> です。

または -
<paramref name="typeName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> が見つかりませんでした。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> が <paramref name="assemblyFile" /> に見つかりませんでした。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.MissingMethodException">パラメーターなしのパブリック コンストラクターが見つかりませんでした。</exception>
      <exception cref="T:System.MethodAccessException">呼び出し元には、このコンストラクターを呼び出すために必要なアクセス許可がありません。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> は正しいアセンブリではありません。

または -
共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyFile" /> は、より新しいバージョンでコンパイルされています。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
      <exception cref="T:System.NullReferenceException">このインスタンスは <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>指定したアセンブリ ファイルで定義されている、指定した型の新しいインスタンスを作成します。</summary>
      <param name="assemblyFile">要求する型を定義しているアセンブリが格納されているファイルの名前 (パスを含む)。 アセンブリは <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> メソッドを使用して読み込まれます。</param>
      <param name="typeName">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</param>
      <param name="ignoreCase">検索で大文字と小文字を区別するかどうかを指定する Boolean 値。</param>
      <param name="bindingAttr">
        <paramref name="typeName" /> コンストラクターの検索に影響を与える 0 個以上のビット フラグの組み合わせ。 <paramref name="bindingAttr" /> が 0 の場合は、大文字と小文字を区別してパブリック コンストラクターを検索します。</param>
      <param name="binder">バインディング、引数型の強制変換、メンバーの呼び出し、およびリフレクションを使用した <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。 <paramref name="binder" /> が null の場合は、既定のバインダーが使用されます。</param>
      <param name="args">コンストラクターに渡される引数。 この引数の配列は、呼び出すコンストラクターのパラメーターに対して、数、順序、および型を一致させる必要があります。 パラメーターなしのコンストラクターを使用する場合は、<paramref name="args" /> を空の配列または null にする必要があります。</param>
      <param name="culture">
        <paramref name="args" /> から <paramref name="typeName" /> コンストラクターに対して宣言された仮引数型への強制変換を制御するカルチャ固有の情報。 <paramref name="culture" /> が <see langword="null" /> の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。</param>
      <param name="activationAttributes">アクティべーションに参加できる 1 つ以上の属性の配列。 通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。
このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。 クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。 分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</param>
      <returns>新しいインスタンスのラッパーであるオブジェクト。<paramref name="typeName" /> が見つからない場合は <see langword="null" />。 実際のオブジェクトにアクセスするには、戻り値のラップを解除する必要があります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> は <see langword="null" />です。

または -
<paramref name="typeName" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> が見つかりませんでした。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> が <paramref name="assemblyFile" /> に見つかりませんでした。</exception>
      <exception cref="T:System.MissingMethodException">一致するパブリック コンストラクターが見つかりませんでした。</exception>
      <exception cref="T:System.MethodAccessException">呼び出し元には、このコンストラクターを呼び出すために必要なアクセス許可がありません。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> は正しいアセンブリではありません。

または -
現在読み込まれているバージョンよりも新しいバージョンの共通言語ランタイムで、<paramref name="assemblyFile" /> がコンパイルされました。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
      <exception cref="T:System.NullReferenceException">このインスタンスは <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <summary>指定したアセンブリ ファイルで定義されている、指定した型の新しいインスタンスを作成します。</summary>
      <param name="assemblyFile">要求する型を定義しているアセンブリが格納されているファイルの名前 (パスを含む)。 アセンブリは <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> メソッドを使用して読み込まれます。</param>
      <param name="typeName">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</param>
      <param name="activationAttributes">アクティべーションに参加できる 1 つ以上の属性の配列。 通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。
このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。 分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</param>
      <returns>新しいインスタンスのラッパーであるオブジェクト。<paramref name="typeName" /> が見つからない場合は <see langword="null" />。 実際のオブジェクトにアクセスするには、戻り値のラップを解除する必要があります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> が見つかりませんでした。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> が <paramref name="assemblyFile" /> に見つかりませんでした。</exception>
      <exception cref="T:System.MethodAccessException">呼び出し元には、このコンストラクターを呼び出すために必要なアクセス許可がありません。</exception>
      <exception cref="T:System.MissingMethodException">一致するパブリック コンストラクターが見つかりませんでした。</exception>
      <exception cref="T:System.NotSupportedException">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> は正しいアセンブリではありません。

または -
共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyFile" /> は、より新しいバージョンでコンパイルされています。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
      <exception cref="T:System.NullReferenceException">このインスタンスは <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
      <summary>指定したアセンブリ ファイルで定義されている、指定した型の新しいインスタンスを作成します。</summary>
      <param name="assemblyName">要求された型を定義するアセンブリのファイル名とパス。</param>
      <param name="typeName">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</param>
      <returns>要求されたオブジェクト。<paramref name="typeName" /> が見つからなかった場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> が <see langword="null" /> です。

または -
<paramref name="typeName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> が見つかりませんでした。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> が <paramref name="assemblyName" /> に見つかりませんでした。</exception>
      <exception cref="T:System.MissingMethodException">パラメーターなしのパブリック コンストラクターが見つかりませんでした。</exception>
      <exception cref="T:System.MethodAccessException">呼び出し元には、このコンストラクターを呼び出すために必要なアクセス許可がありません。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> は正しいアセンブリではありません。

または -
共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>指定したアセンブリ ファイルで定義されている、指定した型の新しいインスタンスを作成します。型名の大文字と小文字の区別を無視するかどうか、作成する型を選択するために使用されるバインディング属性とバインダー、コンストラクターの引数、カルチャ、およびアクティベーション属性を指定します。</summary>
      <param name="assemblyFile">要求された型を定義するアセンブリのファイル名とパス。</param>
      <param name="typeName">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</param>
      <param name="ignoreCase">検索で大文字と小文字を区別するかどうかを指定する Boolean 値。</param>
      <param name="bindingAttr">
        <paramref name="typeName" /> コンストラクターの検索に影響を与える 0 個以上のビット フラグの組み合わせ。 <paramref name="bindingAttr" /> が 0 の場合は、大文字と小文字を区別してパブリック コンストラクターを検索します。</param>
      <param name="binder">バインディング、引数型の強制変換、メンバーの呼び出し、およびリフレクションを使用した <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。 <paramref name="binder" /> が null の場合は、既定のバインダーが使用されます。</param>
      <param name="args">コンストラクターに渡される引数。 この引数の配列は、呼び出すコンストラクターのパラメーターに対して、数、順序、および型を一致させる必要があります。 パラメーターなしのコンストラクターを使用する場合は、<paramref name="args" /> を空の配列または null にする必要があります。</param>
      <param name="culture">
        <paramref name="args" /> から <paramref name="typeName" /> コンストラクターに対して宣言された仮引数型への強制変換を制御するカルチャ固有の情報。 <paramref name="culture" /> が <see langword="null" /> の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。</param>
      <param name="activationAttributes">アクティべーションに参加できる 1 つ以上の属性の配列。 通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。
このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。 クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。 分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</param>
      <returns>要求されたオブジェクト。<paramref name="typeName" /> が見つからなかった場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> が <see langword="null" /> です。

または -
<paramref name="typeName" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> が見つかりませんでした。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> が <paramref name="assemblyName" /> に見つかりませんでした。</exception>
      <exception cref="T:System.MissingMethodException">一致するパブリック コンストラクターが見つかりませんでした。</exception>
      <exception cref="T:System.MethodAccessException">呼び出し元には、このコンストラクターを呼び出すために必要なアクセス許可がありません。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> は正しいアセンブリではありません。

または -
現在読み込まれているバージョンよりも新しいバージョンの共通言語ランタイムで、<paramref name="assemblyName" /> がコンパイルされました。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
      <summary>指定したアセンブリ ファイルで定義されている、指定した型の新しいインスタンスを作成します。</summary>
      <param name="assemblyName">要求された型を定義するアセンブリのファイル名とパス。</param>
      <param name="typeName">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します (<see cref="P:System.Type.FullName" /> プロパティを参照)。</param>
      <param name="activationAttributes">アクティべーションに参加できる 1 つ以上の属性の配列。 通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。
このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。 分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</param>
      <returns>要求されたオブジェクト。<paramref name="typeName" /> が見つからなかった場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> が <see langword="null" /> です。

または -
<paramref name="typeName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> が見つかりませんでした。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> が <paramref name="assemblyName" /> に見つかりませんでした。</exception>
      <exception cref="T:System.MissingMethodException">パラメーターなしのパブリック コンストラクターが見つかりませんでした。</exception>
      <exception cref="T:System.MethodAccessException">呼び出し元には、このコンストラクターを呼び出すために必要なアクセス許可がありません。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> は正しいアセンブリではありません。

または -
共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
    </member>
    <member name="P:System.AppDomain.CurrentDomain">
      <summary>現在の <see cref="T:System.Threading.Thread" /> に対する現在のアプリケーション ドメインを取得します。</summary>
      <returns>現在のアプリケーション ドメイン。</returns>
    </member>
    <member name="E:System.AppDomain.DomainUnload">
      <summary>
        <see cref="T:System.AppDomain" /> をアンロードしようとすると発生します。</summary>
    </member>
    <member name="P:System.AppDomain.DynamicDirectory">
      <summary>動的に作成されたアセンブリを探すためにアセンブリ リゾルバーが使用するディレクトリを取得します。</summary>
      <returns>動的に作成されたアセンブリを探すためにアセンブリ リゾルバーが使用するディレクトリ。</returns>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String)">
      <summary>指定したファイルに格納されているアセンブリを実行します。</summary>
      <param name="assemblyFile">実行するアセンブリが格納されているファイルの名前。</param>
      <returns>アセンブリのエントリ ポイントが返す値。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> が見つかりません。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> は正しいアセンブリではありません。

または -
共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyFile" /> は、より新しいバージョンでコンパイルされています。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
      <exception cref="T:System.MissingMethodException">指定したアセンブリには、エントリ ポイントがありません。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
      <summary>指定したファイルに格納されているアセンブリを、指定した引数を使用して実行します。</summary>
      <param name="assemblyFile">実行するアセンブリが格納されているファイルの名前。</param>
      <param name="args">アセンブリのエントリ ポイントに渡す引数。</param>
      <returns>アセンブリのエントリ ポイントから返された値。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> が見つかりません。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> は正しいアセンブリではありません。

または -
現在読み込まれているバージョンよりも新しいバージョンの共通言語ランタイムで、<paramref name="assemblyFile" /> がコンパイルされました。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
      <exception cref="T:System.MissingMethodException">指定したアセンブリには、エントリ ポイントがありません。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>指定したファイルに格納されているアセンブリを、指定した引数、ハッシュ値、およびハッシュ アルゴリズムを使用して実行します。</summary>
      <param name="assemblyFile">実行するアセンブリが格納されているファイルの名前。</param>
      <param name="args">アセンブリのエントリ ポイントに渡す引数。</param>
      <param name="hashValue">計算されたハッシュ コードの値を表します。</param>
      <param name="hashAlgorithm">アセンブリ マニフェストが使用するハッシュ アルゴリズムを表します。</param>
      <returns>アセンブリのエントリ ポイントから返された値。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> が見つかりません。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> は正しいアセンブリではありません。

または -
現在読み込まれているバージョンよりも新しいバージョンの共通言語ランタイムで、<paramref name="assemblyFile" /> がコンパイルされました。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
      <exception cref="T:System.MissingMethodException">指定したアセンブリには、エントリ ポイントがありません。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
      <summary>
        <see cref="T:System.Reflection.AssemblyName" /> を指定し、指定された引数を使用してアセンブリを実行します。</summary>
      <param name="assemblyName">アセンブリの名前を表す <see cref="T:System.Reflection.AssemblyName" /> オブジェクト。</param>
      <param name="args">プロセスを起動するときに渡すコマンド ライン引数。</param>
      <returns>アセンブリのエントリ ポイントから返された値。</returns>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> によって指定したアセンブリが見つかりません。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="assemblyName" /> によって指定したアセンブリが検出されましたが、読み込むことができません。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> によって指定したアセンブリは、有効なアセンブリではありません。

または -
現在読み込まれているバージョンよりも新しいバージョンの共通言語ランタイムで、<paramref name="assemblyName" /> がコンパイルされました。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.MissingMethodException">指定したアセンブリには、エントリ ポイントがありません。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
      <summary>表示名を指定してアセンブリを実行します。</summary>
      <param name="assemblyName">アセンブリの表示名。 以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></param>
      <returns>アセンブリのエントリ ポイントが返す値。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> によって指定したアセンブリが見つかりません。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> によって指定したアセンブリは、有効なアセンブリではありません。

または -
共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="assemblyName" /> によって指定したアセンブリが検出されましたが、読み込むことができません。</exception>
      <exception cref="T:System.MissingMethodException">指定したアセンブリには、エントリ ポイントがありません。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
      <summary>表示名を指定し、指定された引数を使用してアセンブリを実行します。</summary>
      <param name="assemblyName">アセンブリの表示名。 「 <see cref="P:System.Reflection.Assembly.FullName" />」を参照してください。</param>
      <param name="args">プロセスを起動するときに渡すコマンド ライン引数。</param>
      <returns>アセンブリのエントリ ポイントから返された値。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> によって指定したアセンブリが見つかりません。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="assemblyName" /> によって指定したアセンブリが検出されましたが、読み込むことができません。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> によって指定したアセンブリは、有効なアセンブリではありません。

または -
現在読み込まれているバージョンよりも新しいバージョンの共通言語ランタイムで、<paramref name="assemblyName" /> がコンパイルされました。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.MissingMethodException">指定したアセンブリには、エントリ ポイントがありません。</exception>
    </member>
    <member name="E:System.AppDomain.FirstChanceException">
      <summary>アプリケーション ドメイン内の例外ハンドラーに対する呼び出し履歴をランタイムが検索する前に、マネージド コード内で例外がスローされた場合に発生します。</summary>
    </member>
    <member name="P:System.AppDomain.FriendlyName">
      <summary>アプリケーション ドメインの表示名を取得します。</summary>
      <returns>アプリケーション ドメインの表示名。</returns>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="M:System.AppDomain.GetAssemblies">
      <summary>アプリケーション ドメインの実行コンテキストに読み込まれているアセンブリを取得します。</summary>
      <returns>アプリケーション ドメイン内のアセンブリの配列。</returns>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="M:System.AppDomain.GetCurrentThreadId">
      <summary>現在のスレッドの識別子を取得します。</summary>
      <returns>現在のスレッドの識別子を表す 32 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.AppDomain.GetData(System.String)">
      <summary>現在のアプリケーション ドメイン内に格納されている、指定した名前の値を取得します。</summary>
      <param name="name">あらかじめ定義されたアプリケーション ドメイン プロパティの名前、または独自に定義したアプリケーション ドメイン プロパティの名前。</param>
      <returns>
        <paramref name="name" /> プロパティの値。プロパティが存在しない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="P:System.AppDomain.Id">
      <summary>プロセス内のアプリケーション ドメインを一意に識別する整数を取得します。</summary>
      <returns>アプリケーション ドメインを識別する整数。</returns>
    </member>
    <member name="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
      <summary>いずれかの互換性スイッチが設定されているかどうか、設定されている場合は指定の互換性スイッチが設定されているかどうかを示す、null 許容のブール値を取得します。</summary>
      <param name="value">テストする互換性スイッチ。</param>
      <returns>互換性スイッチが設定されていない場合は null 参照 (Visual Basic では <see langword="Nothing" />)。それ以外の場合は、<paramref name="value" /> で指定された互換性スイッチが設定されているかどうかを示すブール値。</returns>
    </member>
    <member name="M:System.AppDomain.IsDefaultAppDomain">
      <summary>アプリケーション ドメインが、プロセスの既定のアプリケーション ドメインであるかどうかを示す値を返します。</summary>
      <returns>現在の <see cref="T:System.AppDomain" /> オブジェクトがプロセスの既定のアプリケーション ドメインを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.AppDomain.IsFinalizingForUnload">
      <summary>このアプリケーション ドメインがアンロード中で、これに含まれるオブジェクトが共通言語ランタイムによって終了処理されているかどうかを示します。</summary>
      <returns>アプリケーション ドメインがアンロード中で、共通言語ランタイムがファイナライザーの呼び出しを既に開始している場合は <see langword="true" />。これ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.AppDomain.IsFullyTrusted">
      <summary>現在のアプリケーション ドメインに読み込まれたアセンブリが、完全に信頼された状態で実行されるかどうかを示す値を取得します。</summary>
      <returns>現在のアプリケーション ドメインに読み込まれたアセンブリが、完全に信頼された状態で実行される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.AppDomain.IsHomogenous">
      <summary>アプリケーション ドメインに読み込まれたすべてのアセンブリに付与されるアクセス許可セットが、現在のアプリケーション ドメインに存在するかどうかを示す値を取得します。</summary>
      <returns>一貫して付与されるアクセス許可セットが現在のアプリケーション ドメインに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[])">
      <summary>生成された <see cref="T:System.Reflection.Assembly" /> を含む COFF (Common Object File Format) ベースのイメージを使用して、<see cref="T:System.Reflection.Assembly" /> を読み込みます。</summary>
      <param name="rawAssembly">生成されたアセンブリを含む COFF ベースのイメージである <see langword="byte" /> 型配列。</param>
      <returns>読み込まれるアセンブリ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> は正しいアセンブリではありません。

または -
共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="rawAssembly" /> は、より新しいバージョンでコンパイルされています。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
      <summary>生成された <see cref="T:System.Reflection.Assembly" /> を含む COFF (Common Object File Format) ベースのイメージを使用して、<see cref="T:System.Reflection.Assembly" /> を読み込みます。 <see cref="T:System.Reflection.Assembly" /> のシンボルを表す生バイトも読み込まれます。</summary>
      <param name="rawAssembly">生成されたアセンブリを含む COFF ベースのイメージである <see langword="byte" /> 型配列。</param>
      <param name="rawSymbolStore">アセンブリのシンボルを表す生バイトを格納している <see langword="byte" /> 型の配列。</param>
      <returns>読み込まれるアセンブリ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> は正しいアセンブリではありません。

または -
共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="rawAssembly" /> は、より新しいバージョンでコンパイルされています。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
      <summary>
        <see cref="T:System.Reflection.AssemblyName" /> を指定して、<see cref="T:System.Reflection.Assembly" /> を読み込みます。</summary>
      <param name="assemblyRef">読み込むアセンブリについて記述しているオブジェクト。</param>
      <returns>読み込まれるアセンブリ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyRef" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyRef" /> が見つかりません。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyRef" /> は正しいアセンブリではありません。

または -
共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyRef" /> は、より新しいバージョンでコンパイルされています。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.String)">
      <summary>表示名を指定して <see cref="T:System.Reflection.Assembly" /> を読み込みます。</summary>
      <param name="assemblyString">アセンブリの表示名。 以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></param>
      <returns>読み込まれるアセンブリ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> は <see langword="null" /> です</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> 。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> は正しいアセンブリではありません。

または -
共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyString" /> は、より新しいバージョンでコンパイルされています。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
      <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringIsEnabled">
      <summary>現在のプロセスに対して、アプリケーション ドメインの CPU およびメモリの監視が有効になっているかどうかを示す値を取得または設定します。 プロセスに対して一度有効にした監視を無効にすることはできません。</summary>
      <returns>監視が有効になっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">現在のプロセスがこのプロパティに値 <see langword="false" /> を代入しようとしました。</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedMemorySize">
      <summary>最後のコレクションの実行後に残された、現在のアプリケーション ドメインによって参照されていることが判明しているバイト数を取得します。</summary>
      <returns>残っているバイト数。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" /> (Visual Basic では <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> プロパティが <see langword="false" /> に設定されています。</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
      <summary>最後のコレクションの実行後に残された、プロセス内のすべてのアプリケーション ドメインにおける合計バイト数を取得します。</summary>
      <returns>プロセスに残っている合計バイト数。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" /> (Visual Basic では <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> プロパティが <see langword="false" /> に設定されています。</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalAllocatedMemorySize">
      <summary>アプリケーション ドメインが作成されてから、そのアプリケーション ドメインで実行されたすべてのメモリ割り当ての合計サイズをバイト単位で取得します。収集されたメモリは差し引かれません。</summary>
      <returns>すべてのメモリ割り当ての合計サイズ。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" /> (Visual Basic では <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> プロパティが <see langword="false" /> に設定されています。</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalProcessorTime">
      <summary>プロセスが開始されてから、現在のアプリケーション ドメインでの実行中にすべてのスレッドで使用された合計プロセッサ時間を取得します。</summary>
      <returns>現在のアプリケーション ドメインの合計プロセッサ時間。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" /> (Visual Basic では <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> プロパティが <see langword="false" /> に設定されています。</exception>
    </member>
    <member name="P:System.AppDomain.PermissionSet">
      <summary>サンドボックス化されたアプリケーション ドメインのアクセス許可セットを取得します。</summary>
      <returns>サンドボックス化されたアプリケーション ドメインのアクセス許可セット。</returns>
    </member>
    <member name="E:System.AppDomain.ProcessExit">
      <summary>既定のアプリケーション ドメインの親プロセスが終了した場合に発生します。</summary>
    </member>
    <member name="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
      <summary>リフレクション専用のコンテキストでアセンブリの解決に失敗した場合に発生します。</summary>
    </member>
    <member name="M:System.AppDomain.ReflectionOnlyGetAssemblies">
      <summary>アプリケーション ドメインのリフレクション専用コンテキストに読み込まれているアセンブリを返します。</summary>
      <returns>アプリケーション ドメインのリフレクション専用コンテキストに読み込まれているアセンブリを表す <see cref="T:System.Reflection.Assembly" /> オブジェクトの配列。</returns>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作が試行されています。</exception>
    </member>
    <member name="P:System.AppDomain.RelativeSearchPath">
      <summary>アセンブリ リゾルバーがプライベート アセンブリを探す場所を示す、ベース ディレクトリ以下のパスを取得します。</summary>
      <returns>アセンブリ リゾルバーがプライベート アセンブリを探す場所を示す、ベース ディレクトリ以下のパス。</returns>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="E:System.AppDomain.ResourceResolve">
      <summary>リソースが正しくリンクされていなかったり、アセンブリに埋め込まれているなどの理由からリソースの解決に失敗した場合に発生します。</summary>
    </member>
    <member name="M:System.AppDomain.SetCachePath(System.String)">
      <summary>指定したディレクトリ パスを、アセンブリのシャドウ コピー先として設定します。</summary>
      <param name="path">シャドウ コピー先の絶対パス。</param>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="M:System.AppDomain.SetData(System.String,System.Object)">
      <summary>指定したアプリケーション ドメイン プロパティに、指定した値を割り当てます。</summary>
      <param name="name">作成または変更の対象となるユーザー定義アプリケーション ドメイン プロパティの名前。</param>
      <param name="data">プロパティの値。</param>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="M:System.AppDomain.SetDynamicBase(System.String)">
      <summary>動的に生成されたファイルの格納先、およびそのファイルへのアクセス先となるサブディレクトリに対するベース ディレクトリとして、ディレクトリ パスを設定します。</summary>
      <param name="path">動的アセンブリの格納先となるサブディレクトリに対するベース ディレクトリを指定する絶対パス。</param>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
      <summary>アプリケーション ドメインでスレッドを実行中に、スレッドがプリンシパルにバインドしようとした場合に、プリンシパル オブジェクトと ID オブジェクトをそのスレッドに関連付ける方法を指定します。</summary>
      <param name="policy">スレッドにアタッチするプリンシパル オブジェクトの型を指定する、<see cref="T:System.Security.Principal.PrincipalPolicy" /> のいずれかの値。</param>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyFiles">
      <summary>シャドウ コピーをオンにします。</summary>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyPath(System.String)">
      <summary>指定したディレクトリ パスを、シャドウ コピーするアセンブリがある場所として設定します。</summary>
      <param name="path">ディレクトリ名のリスト。各ディレクトリ名はセミコロンで区切られます。</param>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
      <summary>アプリケーション ドメインでスレッドを実行中に、スレッドがプリンシパルにバインドしようとした場合に、そのスレッドに関連付ける既定のプリンシパル オブジェクトを設定します。</summary>
      <param name="principal">スレッドに関連付けるプリンシパル オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="principal" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Security.Policy.PolicyException">スレッドのプリンシパルが既に設定されています。</exception>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="P:System.AppDomain.SetupInformation">
      <summary>このインスタンスのアプリケーション ドメイン構成情報を取得します。</summary>
      <returns>アプリケーション ドメインの初期化情報。</returns>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="P:System.AppDomain.ShadowCopyFiles">
      <summary>アプリケーション ドメインでファイルのシャドウ コピーを実行するよう設定されているかどうかを示す値を取得します。</summary>
      <returns>アプリケーション ドメインでファイルのシャドウ コピーを実行するよう設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.AppDomainUnloadedException">アンロードされたアプリケーション ドメインで操作しようとします。</exception>
    </member>
    <member name="M:System.AppDomain.ToString">
      <summary>アプリケーション ドメインの表示名とコンテキスト ポリシーを含む文字列形式を取得します。</summary>
      <returns>アプリケーション ドメインの表示名であるリテラル文字列 "Name:" と、コンテキスト ポリシーの文字列形式または "There are no context policies." という文字列のどちらかを連結した文字列。</returns>
      <exception cref="T:System.AppDomainUnloadedException">現在の <see cref="T:System.AppDomain" /> によって表されるアプリケーション ドメインは既にアンロードされています。</exception>
    </member>
    <member name="E:System.AppDomain.TypeResolve">
      <summary>型の解決が失敗したときに発生します。</summary>
    </member>
    <member name="E:System.AppDomain.UnhandledException">
      <summary>例外がキャッチされない場合に発生します。</summary>
    </member>
    <member name="M:System.AppDomain.Unload(System.AppDomain)">
      <summary>指定したアプリケーション ドメインをアンロードします。</summary>
      <param name="domain">アンロードするアプリケーション ドメイン。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="domain" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.CannotUnloadAppDomainException">
        <paramref name="domain" /> をアンロードできませんでした。</exception>
      <exception cref="T:System.Exception">アンロード処理中にエラーが発生しました。</exception>
    </member>
    <member name="T:System.AppDomainSetup">
      <summary>
        <see cref="T:System.AppDomain" /> のインスタンスに追加できるアセンブリ バインディング情報を表します。</summary>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationBase">
      <summary>アプリケーションが格納されているディレクトリの名前を取得または設定します。</summary>
      <returns>アプリケーションのベース ディレクトリの名前。</returns>
    </member>
    <member name="P:System.AppDomainSetup.TargetFrameworkName">
      <summary>
        <see cref="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)" /> コンストラクターによって解析できる形式で、アプリケーション ドメインの .NET Framework のターゲット バージョンおよびプロファイルを指定する文字列を取得または設定します。</summary>
      <returns>対象となる .NET Framework のバージョンとプロファイル。</returns>
    </member>
    <member name="T:System.AppDomainUnloadedException">
      <summary>アンロードされたアプリケーション ドメインにアクセスしようとするとスローされる例外。</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor">
      <summary>
        <see cref="T:System.AppDomainUnloadedException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.AppDomainUnloadedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.AppDomainUnloadedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.AppDomainUnloadedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが null 参照でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.ApplicationId">
      <summary>マニフェスト ベースのアプリケーションを一意に識別するための情報が格納されます。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ApplicationId.#ctor(System.Byte[],System.String,System.Version,System.String,System.String)">
      <summary>
        <see cref="T:System.ApplicationId" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="publicKeyToken">公開キーの生データを表すバイト配列。</param>
      <param name="name">アプリケーションの名前。</param>
      <param name="version">アプリケーションのバージョンを示す <see cref="T:System.Version" /> オブジェクト。</param>
      <param name="processorArchitecture">アプリケーションのプロセッサ アーキテクチャ。</param>
      <param name="culture">アプリケーションのカルチャ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" />です。

または -
<paramref name="version" /> は <see langword="null" />です。

または -
<paramref name="publicKeyToken" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が空の文字列です。</exception>
    </member>
    <member name="M:System.ApplicationId.Copy">
      <summary>現在のアプリケーション ID のコピーを作成して返します。</summary>
      <returns>元のオブジェクトの正確なコピーを表す <see cref="T:System.ApplicationId" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ApplicationId.Culture">
      <summary>アプリケーションのカルチャ情報を表す文字列を取得します。</summary>
      <returns>アプリケーションのカルチャ情報。</returns>
    </member>
    <member name="M:System.ApplicationId.Equals(System.Object)">
      <summary>指定した <see cref="T:System.ApplicationId" /> オブジェクトが、現在の <see cref="T:System.ApplicationId" /> と等しいかどうかを判断します。</summary>
      <param name="o">現在の <see cref="T:System.ApplicationId" /> と比較する <see cref="T:System.ApplicationId" /> オブジェクト。</param>
      <returns>指定した <see cref="T:System.ApplicationId" /> オブジェクトが現在の <see cref="T:System.ApplicationId" /> オブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ApplicationId.GetHashCode">
      <summary>現在のアプリケーション ID のハッシュ コードを取得します。</summary>
      <returns>現在のアプリケーション ID のハッシュ コード。</returns>
    </member>
    <member name="P:System.ApplicationId.Name">
      <summary>アプリケーションの名前を取得します。</summary>
      <returns>アプリケーションの名前。</returns>
    </member>
    <member name="P:System.ApplicationId.ProcessorArchitecture">
      <summary>対象となるアプリケーションのプロセッサ アーキテクチャを取得します。</summary>
      <returns>アプリケーションのプロセッサ アーキテクチャ。</returns>
    </member>
    <member name="P:System.ApplicationId.PublicKeyToken">
      <summary>アプリケーションの公開キー トークンを取得します。</summary>
      <returns>アプリケーションの公開キー トークンを保持しているバイト配列。</returns>
    </member>
    <member name="M:System.ApplicationId.ToString">
      <summary>アプリケーション ID の文字列形式を作成して返します。</summary>
      <returns>アプリケーション ID の文字列形式。</returns>
    </member>
    <member name="P:System.ApplicationId.Version">
      <summary>アプリケーションのバージョンを取得します。</summary>
      <returns>アプリケーションのバージョンを示す <see cref="T:System.Version" />。</returns>
    </member>
    <member name="T:System.AssemblyLoadEventArgs">
      <summary>
        <see cref="E:System.AppDomain.AssemblyLoad" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.AssemblyLoadEventArgs.#ctor(System.Reflection.Assembly)">
      <summary>指定した <see cref="T:System.Reflection.Assembly" /> を使用して <see cref="T:System.AssemblyLoadEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="loadedAssembly">現在読み込まれているアセンブリを表すインスタンス。</param>
    </member>
    <member name="P:System.AssemblyLoadEventArgs.LoadedAssembly">
      <summary>現在読み込まれているアセンブリを表す <see cref="T:System.Reflection.Assembly" /> を取得します。</summary>
      <returns>現在読み込まれているアセンブリを表す、<see cref="T:System.Reflection.Assembly" /> のインスタンス。</returns>
    </member>
    <member name="T:System.AssemblyLoadEventHandler">
      <summary>
        <see cref="E:System.AppDomain.AssemblyLoad" /> の <see cref="T:System.AppDomain" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="args">イベント データを格納している <see cref="T:System.AssemblyLoadEventArgs" />。</param>
    </member>
    <member name="T:System.Base64FormattingOptions">
      <summary>関連する <see cref="Overload:System.Convert.ToBase64CharArray" /> メソッドと <see cref="Overload:System.Convert.ToBase64String" /> メソッドで、それぞれの出力に改行を挿入するかどうかを指定します。</summary>
    </member>
    <member name="F:System.Base64FormattingOptions.InsertLineBreaks">
      <summary>文字列形式で 76 文字ごとに改行を挿入します。</summary>
    </member>
    <member name="F:System.Base64FormattingOptions.None">
      <summary>文字列形式で 76 文字ごとに改行を挿入しません。</summary>
    </member>
    <member name="T:System.BitConverter">
      <summary>基本データ型をバイト配列に、バイト配列を基本データ型に変換します。</summary>
    </member>
    <member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
      <summary>指定した倍精度浮動小数点数を 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する数値。</param>
      <returns>
        <paramref name="value" /> と等価の値を持つ 64 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Boolean)">
      <summary>指定したブール値をバイト配列として返します。</summary>
      <param name="value">ブール値。</param>
      <returns>長さ 1 のバイト配列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Char)">
      <summary>指定した Unicode 文字値をバイト配列として返します。</summary>
      <param name="value">変換する文字。</param>
      <returns>長さが 2 バイトの配列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Double)">
      <summary>指定した倍精度浮動小数点値をバイト配列として返します。</summary>
      <param name="value">変換する数値。</param>
      <returns>長さが 8 バイトの配列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int16)">
      <summary>指定した 16 ビットの符号なし整数値をバイト配列として返します。</summary>
      <param name="value">変換する数値。</param>
      <returns>長さが 2 バイトの配列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int32)">
      <summary>バイト配列として指定した 32 ビット符号付き整数値を返します。</summary>
      <param name="value">変換する数値。</param>
      <returns>長さが 4 バイトの配列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int64)">
      <summary>バイト配列として指定した 64 ビット符号付き整数値を返します。</summary>
      <param name="value">変換する数値。</param>
      <returns>長さが 8 バイトの配列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Single)">
      <summary>指定した単精度浮動小数点値をバイト配列として返します。</summary>
      <param name="value">変換する数値。</param>
      <returns>長さが 4 バイトの配列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt16)">
      <summary>指定した 16 ビットの符号なし整数値をバイト配列として返します。</summary>
      <param name="value">変換する数値。</param>
      <returns>長さが 2 バイトの配列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt32)">
      <summary>指定した 32 ビットの符号なし整数値をバイト配列として返します。</summary>
      <param name="value">変換する数値。</param>
      <returns>長さが 4 バイトの配列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt64)">
      <summary>指定した 64 ビットの符号なし整数値をバイト配列として返します。</summary>
      <param name="value">変換する数値。</param>
      <returns>長さが 8 バイトの配列。</returns>
    </member>
    <member name="M:System.BitConverter.Int32BitsToSingle(System.Int32)">
      <summary>指定した 32 ビット整数を単精度浮動小数点の値として再解釈します。</summary>
      <param name="value">変換する整数。</param>
      <returns>変換された整数を表す単精度浮動小数点の値。</returns>
    </member>
    <member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
      <summary>指定した 64 ビット符号付き整数を倍精度浮動小数点数に再解釈します。</summary>
      <param name="value">変換する数値。</param>
      <returns>
        <paramref name="value" /> と等価の値を持つ倍精度浮動小数点数。</returns>
    </member>
    <member name="F:System.BitConverter.IsLittleEndian">
      <summary>このコンピューターのアーキテクチャにデータを格納するバイト順 ("エンディアン") を示します。</summary>
    </member>
    <member name="M:System.BitConverter.SingleToInt32Bits(System.Single)">
      <summary>単精度浮動小数点値を整数に変換します。</summary>
      <param name="value">変換する単精度浮動小数点値。</param>
      <returns>変換された単精度浮動小数点の値を表す整数。</returns>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
      <summary>バイト配列内の指定位置にあるバイトから変換されたブール値を返します。</summary>
      <param name="value">バイト配列。</param>
      <param name="startIndex">
        <paramref name="value" /> 内のバイトのインデックス。</param>
      <returns>
        <paramref name="startIndex" /> の <paramref name="value" /> にあるバイトが 0 以外の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</exception>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.ReadOnlySpan{System.Byte})">
      <summary>読み取り専用のバイト スパンをブール値に変換します。</summary>
      <param name="value">変換するバイトを含む読み取り専用のスパン。</param>
      <returns>変換後のバイトを表すブール値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> の長さは 0 未満です。</exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
      <summary>バイト配列内の指定位置にある 2 バイトから変換された Unicode 文字を返します。</summary>
      <param name="value">配列。</param>
      <param name="startIndex">
        <paramref name="value" /> 内の開始位置。</param>
      <returns>
        <paramref name="startIndex" /> から始まる 2 バイトで構成される文字。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> が <paramref name="value" /> の長さから 1 を引いた値です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.ReadOnlySpan{System.Byte})">
      <summary>読み取り専用のバイト スパンを文字に変換します。</summary>
      <param name="value">変換するバイトを含む読み取り専用のスパン。</param>
      <returns>変換後のバイトを表す文字。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> の長さが <see cref="T:System.Char" /> の長さを下回っています。</exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
      <summary>バイト配列内の指定位置にある 8 バイトから変換された倍精度浮動小数点数を返します。</summary>
      <param name="value">バイト配列。</param>
      <param name="startIndex">
        <paramref name="value" /> 内の開始位置。</param>
      <returns>
        <paramref name="startIndex" /> から始まる 8 バイトで構成される倍精度浮動小数点数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> が <paramref name="value" /> の長さから 7 を引いた値以上で、<paramref name="value" /> の長さから 1 を引いた値以下です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.ReadOnlySpan{System.Byte})">
      <summary>読み取り専用のバイト スパンを倍精度浮動小数点の値に変換します。</summary>
      <param name="value">変換するバイトを含む読み取り専用のスパン。</param>
      <returns>変換されたバイトを表す倍精度浮動小数点の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> の長さが <see cref="T:System.Double" /> の値の長さを下回っています。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
      <summary>バイト配列内の指定位置にある 2 バイトから変換された 16 ビット符号付き整数を返します。</summary>
      <param name="value">バイト配列。</param>
      <param name="startIndex">
        <paramref name="value" /> 内の開始位置。</param>
      <returns>
        <paramref name="startIndex" /> から始まる 2 バイトで構成される 16 ビット符号付き整数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> が <paramref name="value" /> の長さから 1 を引いた値です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.ReadOnlySpan{System.Byte})">
      <summary>読み取り専用のバイト スパンを 16 ビット符号付き整数に変換します。</summary>
      <param name="value">変換するバイトを含む読み取り専用のスパン。</param>
      <returns>変換されたバイトを表す 16 ビット符号付き整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> の長さは 2 未満です。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
      <summary>バイト配列内の指定位置にある 4 バイトから変換された 32 ビット符号付き整数を返します。</summary>
      <param name="value">バイト配列。</param>
      <param name="startIndex">
        <paramref name="value" /> 内の開始位置。</param>
      <returns>
        <paramref name="startIndex" /> から始まる 4 バイトで構成される 32 ビット符号付き整数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> が <paramref name="value" /> の長さから 3 を引いた値以上で、<paramref name="value" /> の長さから 1 を引いた値以下です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.ReadOnlySpan{System.Byte})">
      <summary>読み取り専用のバイト スパンを 32 ビット符号付き整数に変換します。</summary>
      <param name="value">変換するバイトを含む読み取り専用のスパン。</param>
      <returns>変換されたバイトを表す 32 ビット符号付き整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> の長さは 4 未満です。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
      <summary>バイト配列内の指定位置にある 8 バイトから変換された 64 ビット符号付き整数を返します。</summary>
      <param name="value">バイト配列。</param>
      <param name="startIndex">
        <paramref name="value" /> 内の開始位置。</param>
      <returns>
        <paramref name="startIndex" /> から始まる 8 バイトで構成される 64 ビット符号付き整数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> が <paramref name="value" /> の長さから 7 を引いた値以上で、<paramref name="value" /> の長さから 1 を引いた値以下です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.ReadOnlySpan{System.Byte})">
      <summary>読み取り専用のバイト スパンを 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換するバイトを含む読み取り専用のスパン。</param>
      <returns>変換されたバイトを表す 64 ビット符号付き整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> の長さは 8 未満です。</exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
      <summary>バイト配列内の指定位置にある 4 バイトから変換された単精度浮動小数点数を返します。</summary>
      <param name="value">バイト配列。</param>
      <param name="startIndex">
        <paramref name="value" /> 内の開始位置。</param>
      <returns>
        <paramref name="startIndex" /> から始まる 4 バイトで構成される単精度浮動小数点数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> が <paramref name="value" /> の長さから 3 を引いた値以上で、<paramref name="value" /> の長さから 1 を引いた値以下です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.ReadOnlySpan{System.Byte})">
      <summary>読み取り専用のバイト スパンを倍精度浮動小数点の値に変換します。</summary>
      <param name="value">変換するバイトを含む読み取り専用のスパン。</param>
      <returns>変換されたバイトを表す倍精度浮動小数点の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> の長さが <see cref="T:System.Double" /> の値の長さを下回っています。</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[])">
      <summary>指定されたバイト配列の各要素の数値をそれと等価な 16 進数文字列形式に変換します。</summary>
      <param name="value">バイト配列。</param>
      <returns>
        <paramref name="value" /> 内の対応する要素を表す 16 進値がハイフンで区切られている文字列 ("7F-2C-4A-00" など)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
      <summary>指定されたバイト サブ配列の各要素の数値をそれと等価な 16 進数文字列形式に変換します。</summary>
      <param name="value">バイト配列。</param>
      <param name="startIndex">
        <paramref name="value" /> 内の開始位置。</param>
      <returns>
        <paramref name="value" /> のサブ配列内の対応する要素を表す 16 進値がハイフンで区切られている文字列 ("7F-2C-4A-00" など)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
      <summary>指定されたバイト サブ配列の各要素の数値をそれと等価な 16 進数文字列形式に変換します。</summary>
      <param name="value">バイト配列。</param>
      <param name="startIndex">
        <paramref name="value" /> 内の開始位置。</param>
      <param name="length">変換する <paramref name="value" /> の配列要素の数。</param>
      <returns>
        <paramref name="value" /> のサブ配列内の対応する要素を表す 16 進値がハイフンで区切られている文字列 ("7F-2C-4A-00" など)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。

または -
<paramref name="startIndex" /> が 0 より大きく、<paramref name="value" /> の長さ以上になっています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> と <paramref name="length" /> の組み合わせが、<paramref name="value" /> 内の位置を指定していません。つまり、<paramref name="startIndex" /> パラメーターが、<paramref name="value" /> の長さから <paramref name="length" /> パラメーターの値を減算した値より大きくなっています。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
      <summary>バイト配列内の指定位置にある 2 バイトから変換された 16 ビット符号なし整数を返します。</summary>
      <param name="value">バイト配列。</param>
      <param name="startIndex">
        <paramref name="value" /> 内の開始位置。</param>
      <returns>
        <paramref name="startIndex" /> から始まる 2 バイトで構成される 16 ビット符号なし整数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> が <paramref name="value" /> の長さから 1 を引いた値です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.ReadOnlySpan{System.Byte})">
      <summary>読み取り専用のバイト スパンを 16 ビット符号なし整数に変換します。</summary>
      <param name="value">変換するバイトを含む読み取り専用のスパン。</param>
      <returns>変換されたバイトを表す 16 ビット符号なし整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> の長さは 2 未満です。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
      <summary>バイト配列内の指定位置にある 4 バイトから変換された 32 ビット符号なし整数を返します。</summary>
      <param name="value">バイト配列。</param>
      <param name="startIndex">
        <paramref name="value" /> 内の開始位置。</param>
      <returns>
        <paramref name="startIndex" /> から始まる 4 バイトで構成される 32 ビット符号なし整数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> が <paramref name="value" /> の長さから 3 を引いた値以上で、<paramref name="value" /> の長さから 1 を引いた値以下です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.ReadOnlySpan{System.Byte})">
      <summary>読み取り専用のバイト スパンを 32 ビット符号なし整数に変換します。</summary>
      <param name="value">変換するバイトを含む読み取り専用のスパン。</param>
      <returns>変換されたバイトを表す 32 ビット符号なし整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> の長さは 4 未満です。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
      <summary>バイト配列内の指定位置にある 8 バイトから変換された 64 ビット符号なし整数を返します。</summary>
      <param name="value">バイト配列。</param>
      <param name="startIndex">
        <paramref name="value" /> 内の開始位置。</param>
      <returns>
        <paramref name="startIndex" /> から始まる 8 バイトで構成される 64 ビット符号なし整数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> が <paramref name="value" /> の長さから 7 を引いた値以上で、<paramref name="value" /> の長さから 1 を引いた値以下です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.ReadOnlySpan{System.Byte})">
      <summary>byte を符号なしの long に変換します。</summary>
      <param name="value">変換するバイトを含む読み取り専用のスパン。</param>
      <returns>変換されたバイトを表す 64 ビット符号なし整数。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Boolean)">
      <summary>ブール値をバイトのスパンに変換します。</summary>
      <param name="destination">このメソッドから制御が戻るときに、変換されたブール値を表すバイト。</param>
      <param name="value">変換するブール値。</param>
      <returns>変換が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Char)">
      <summary>文字をバイトのスパンに変換します。</summary>
      <param name="destination">このメソッドから制御が戻るときに、変換された文字を表すバイト。</param>
      <param name="value">変換する文字。</param>
      <returns>変換が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Double)">
      <summary>倍精度浮動小数点値をバイトのスパンに変換します。</summary>
      <param name="destination">このメソッドから制御が戻るときに、変換された倍精度浮動小数点の値を表すバイト。</param>
      <param name="value">変換する倍精度浮動小数点値。</param>
      <returns>変換が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int16)">
      <summary>16 ビット符号付き整数をバイトのスパンに変換します。</summary>
      <param name="destination">このメソッドから制御が戻るときに、変換された 16 ビット符号付き整数を表すバイト。</param>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <returns>変換が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int32)">
      <summary>32 ビット符号付き整数をバイトのスパンに変換します。</summary>
      <param name="destination">このメソッドから制御が戻るときに、変換された 32 ビット符号付き整数を表すバイト。</param>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <returns>変換が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int64)">
      <summary>64 ビット符号付き整数をバイトのスパンに変換します。</summary>
      <param name="destination">このメソッドから制御が戻るときに、変換された 64 ビット符号付き整数を表すバイト。</param>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <returns>変換が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Single)">
      <summary>倍精度浮動小数点値をバイトのスパンに変換します。</summary>
      <param name="destination">このメソッドから制御が戻るときに、変換された倍精度浮動小数点の値を表すバイト。</param>
      <param name="value">変換する倍精度浮動小数点値。</param>
      <returns>変換が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt16)">
      <summary>16 ビット符号なし整数をバイトのスパンに変換します。</summary>
      <param name="destination">このメソッドから制御が戻るときに、変換された 16 ビット符号なし整数を表すバイト。</param>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <returns>変換が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt32)">
      <summary>32 ビット符号なし整数をバイトのスパンに変換します。</summary>
      <param name="destination">このメソッドから制御が戻るときに、変換された 32 ビット符号なし整数を表すバイト。</param>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <returns>変換が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt64)">
      <summary>64 ビット符号なし整数をバイトのスパンに変換します。</summary>
      <param name="destination">このメソッドから制御が戻るときに、変換された 64 ビット符号なし整数を表すバイト。</param>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <returns>変換が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.CannotUnloadAppDomainException">
      <summary>アプリケーション ドメインのアンロードが失敗した場合にスローされる例外。</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor">
      <summary>
        <see cref="T:System.CannotUnloadAppDomainException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータから、<see cref="T:System.CannotUnloadAppDomainException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.CannotUnloadAppDomainException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明する <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.CannotUnloadAppDomainException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.CodeDom.Compiler.IndentedTextWriter">
      <summary>タブ文字列トークンを使用して、新しい行にインデントを設定できるテキスト ライターを提供します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>指定したテキスト ライターと既定のタブ文字列を使用して、<see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="writer">出力に使用する <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>テキスト ライターとタブ文字列を指定して、<see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="writer">出力に使用する <see cref="T:System.IO.TextWriter" />。</param>
      <param name="tabString">インデント幅として使用するタブ文字列。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Close">
      <summary>書き込まれているドキュメントを閉じます。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString">
      <summary>既定のタブ文字列を指定します。 このフィールドは定数です。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Encoding">
      <summary>使用するテキスト ライターのエンコーディングを取得します。</summary>
      <returns>使用するテキスト ライターのエンコーディングを示す <see cref="T:System.Text.Encoding" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Flush">
      <summary>ストリームをフラッシュします。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Indent">
      <summary>インデント幅として適用する空白文字の数を取得または設定します。</summary>
      <returns>インデント幅として使用する空白文字の数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.InnerWriter">
      <summary>使用する <see cref="T:System.IO.TextWriter" /> を取得します。</summary>
      <returns>使用する <see cref="T:System.IO.TextWriter" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.NewLine">
      <summary>使用する改行文字を取得または設定します。</summary>
      <returns>使用する改行文字。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.OutputTabs">
      <summary>
        <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> プロパティに従って、各インデント レベルに対してタブ文字列を 1 回出力します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Boolean)">
      <summary>Boolean 値のテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む Boolean 値。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char)">
      <summary>文字をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む文字。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[])">
      <summary>文字配列をテキスト ストリームに書き込みます。</summary>
      <param name="buffer">書き込む文字配列。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>文字の部分配列をテキスト ストリームに書き込みます。</summary>
      <param name="buffer">データの書き込み元の文字配列。</param>
      <param name="index">バッファー内の開始インデックス。</param>
      <param name="count">書き込む文字数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Double)">
      <summary>Double 値のテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む <see langword="double" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int32)">
      <summary>整数のテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む整数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int64)">
      <summary>8 バイト整数のテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 8 バイト整数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Object)">
      <summary>オブジェクトのテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込むオブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Single)">
      <summary>Single 値のテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む <see langword="single" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String)">
      <summary>指定した文字列をテキスト ストリームに書き込みます。</summary>
      <param name="s">書き込む文字列。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>指定されているセマンティクスを使用して、書式設定された文字列を書き込みます。</summary>
      <param name="format">書式指定文字列。</param>
      <param name="arg0">書式指定文字列に書き込むオブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>指定されているセマンティクスを使用して、書式設定された文字列を書き込みます。</summary>
      <param name="format">使用する書式指定文字列。</param>
      <param name="arg0">書式指定文字列に書き込む最初のオブジェクト。</param>
      <param name="arg1">書式指定文字列に書き込む 2 番目のオブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>指定されているセマンティクスを使用して、書式設定された文字列を書き込みます。</summary>
      <param name="format">使用する書式指定文字列。</param>
      <param name="arg">出力する引数配列。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine">
      <summary>行終端記号を書き込みます。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>Boolean 値のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む Boolean。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char)">
      <summary>文字をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む文字。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>文字配列をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="buffer">書き込む文字配列。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>文字の部分配列をテキスト ストリームに書き込み、続けて行終端記号書き込みます。</summary>
      <param name="buffer">データの書き込み元の文字配列。</param>
      <param name="index">バッファー内の開始インデックス。</param>
      <param name="count">書き込む文字数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Double)">
      <summary>Double 値のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む <see langword="double" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>整数のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む整数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>8 バイト整数のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む 8 バイト整数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Object)">
      <summary>オブジェクトのテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込むオブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Single)">
      <summary>Single 値のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む <see langword="single" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String)">
      <summary>指定した文字列をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="s">書き込む文字列。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>指定されているセマンティクスを使用して、書式設定された文字列を書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="format">書式指定文字列。</param>
      <param name="arg0">書式指定文字列に書き込むオブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>指定されているセマンティクスを使用して、書式設定された文字列を書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="format">使用する書式指定文字列。</param>
      <param name="arg0">書式指定文字列に書き込む最初のオブジェクト。</param>
      <param name="arg1">書式指定文字列に書き込む 2 番目のオブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>指定されているセマンティクスを使用して、書式設定された文字列を書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="format">使用する書式指定文字列。</param>
      <param name="arg">出力する引数配列。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>UInt32 のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">出力する UInt32。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>タブが適用されていない行に、指定した文字列を書き込みます。</summary>
      <param name="s">書き込む文字列。</param>
    </member>
    <member name="T:System.Collections.ArrayList">
      <summary>必要に応じてサイズが動的に拡大される配列を使用して <see cref="T:System.Collections.IList" /> インターフェイスを実装します。</summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor">
      <summary>空で、既定の初期量を備えた、<see cref="T:System.Collections.ArrayList" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
      <summary>指定したコレクションからコピーした要素を格納し、コピーされる要素の数と同じ初期量を備えた、<see cref="T:System.Collections.ArrayList" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="c">新しいリストに要素がコピーされた <see cref="T:System.Collections.ICollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Int32)">
      <summary>空で、指定した初期量を備えた、<see cref="T:System.Collections.ArrayList" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity">新しいリストに格納できる要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
      <summary>特定の <see cref="T:System.Collections.ArrayList" /> に関する <see cref="T:System.Collections.IList" /> ラッパーを作成します。</summary>
      <param name="list">ラップする <see cref="T:System.Collections.IList" />。</param>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> をラップする <see cref="T:System.Collections.IList" /> ラッパー。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Add(System.Object)">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> の末尾にオブジェクトを追加します。</summary>
      <param name="value">
        <see cref="T:System.Object" /> の末尾に追加する <see cref="T:System.Collections.ArrayList" />。 値として <see langword="null" /> を指定できます。</param>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> が追加された位置の <paramref name="value" /> インデックス。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。

または -
<see cref="T:System.Collections.ArrayList" /> は固定サイズです。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Collections.ArrayList" /> の末尾に追加します。</summary>
      <param name="c">
        <see cref="T:System.Collections.ICollection" /> の末尾に要素が追加される <see cref="T:System.Collections.ArrayList" />。 コレクション自体を <see langword="null" /> にすることはできませんが、<see langword="null" /> である要素を格納することは可能です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。

または -
<see cref="T:System.Collections.ArrayList" /> は固定サイズです。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>指定した比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.ArrayList" /> の 1 つの要素の範囲を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="index">検索範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索する範囲の長さ。</param>
      <param name="value">検索する <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
      <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> の実装。

または -
各要素の <see langword="null" /> 実装である既定の比較子を使用する場合は <see cref="T:System.IComparable" />。</param>
      <returns>
        <paramref name="value" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.ArrayList" /> 内の <paramref name="value" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="value" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.ArrayList.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.ArrayList" /> において有効な範囲を表していません。

または -
<paramref name="comparer" /> は <see langword="null" /> であり、<paramref name="value" /> または <see cref="T:System.Collections.ArrayList" /> の要素のいずれも <see cref="T:System.IComparable" /> インターフェイスを実装していません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> は <see langword="null" /> であり、<paramref name="value" /> は<see cref="T:System.Collections.ArrayList" /> の要素と同じ型ではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="count" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object)">
      <summary>既定の比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.ArrayList" /> 全体を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="value">検索する <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
      <returns>
        <paramref name="value" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.ArrayList" /> 内の <paramref name="value" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="value" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.ArrayList.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> または <see cref="T:System.Collections.ArrayList" /> の要素のいずれも <see cref="T:System.IComparable" /> インターフェイスを実装していません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> は<see cref="T:System.Collections.ArrayList" /> の要素と同じ型ではありません。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
      <summary>指定した比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.ArrayList" /> 全体を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="value">検索する <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
      <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> の実装。

または -
各要素の <see langword="null" /> 実装である既定の比較子を使用する場合は <see cref="T:System.IComparable" />。</param>
      <returns>
        <paramref name="value" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.ArrayList" /> 内の <paramref name="value" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="value" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.ArrayList.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> は <see langword="null" /> であり、<paramref name="value" /> または <see cref="T:System.Collections.ArrayList" /> の要素のいずれも <see cref="T:System.IComparable" /> インターフェイスを実装していません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> は <see langword="null" /> であり、<paramref name="value" /> は<see cref="T:System.Collections.ArrayList" /> の要素と同じ型ではありません。</exception>
    </member>
    <member name="P:System.Collections.ArrayList.Capacity">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> に格納できる要素の数を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> に格納できる要素の数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.ArrayList.Capacity" /> は <see cref="P:System.Collections.ArrayList.Count" /> より小さい値に設定されます。</exception>
      <exception cref="T:System.OutOfMemoryException">システムで使用可能なメモリが不足しています。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clear">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> からすべての要素を削除します。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。

または -
<see cref="T:System.Collections.ArrayList" /> は固定サイズです。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clone">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> の簡易コピーを作成します。</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> の簡易コピー。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.Contains(System.Object)">
      <summary>ある要素が <see cref="T:System.Collections.ArrayList" /> 内に存在するかどうかを判断します。</summary>
      <param name="item">
        <see cref="T:System.Object" /> 内で検索される <see cref="T:System.Collections.ArrayList" />。 値として <see langword="null" /> を指定できます。</param>
      <returns>
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.ArrayList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array)">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> 全体を互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の先頭から始まります。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ArrayList" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。

または -
コピー元の <see cref="T:System.Collections.ArrayList" /> の要素数が、コピー先 <paramref name="array" /> に含めることができる要素数を超えています。</exception>
      <exception cref="T:System.InvalidCastException">コピー元の <see cref="T:System.Collections.ArrayList" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> 全体を、互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まる部分に行います。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ArrayList" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。

または -
コピー元の <see cref="T:System.Collections.ArrayList" /> の要素数が、コピー先 <paramref name="arrayIndex" /> の <paramref name="array" /> から最後までの使用可能領域を超えています。</exception>
      <exception cref="T:System.InvalidCastException">コピー元の <see cref="T:System.Collections.ArrayList" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>要素の範囲を <see cref="T:System.Collections.ArrayList" /> から互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。</summary>
      <param name="index">コピーを開始するコピー元の <see cref="T:System.Collections.ArrayList" /> 内の、0 から始まるインデックス番号。</param>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ArrayList" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <param name="count">コピーする要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="arrayIndex" /> が 0 未満です。

または -
<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。

または -
<paramref name="index" /> がコピー元の <see cref="P:System.Collections.ArrayList.Count" /> の <see cref="T:System.Collections.ArrayList" /> 以上です。

または -
コピー元の <paramref name="index" /> の <see cref="T:System.Collections.ArrayList" /> から最後までの要素数が、コピー先の <paramref name="arrayIndex" /> の <paramref name="array" /> から最後までの使用可能な領域を超えています。</exception>
      <exception cref="T:System.InvalidCastException">コピー元の <see cref="T:System.Collections.ArrayList" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.ArrayList.Count">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> に実際に含まれる要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> に実際に格納されている要素の数。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
      <summary>固定サイズの <see cref="T:System.Collections.ArrayList" /> ラッパーを返します。</summary>
      <param name="list">ラップする <see cref="T:System.Collections.ArrayList" />。</param>
      <returns>固定サイズの <see cref="T:System.Collections.ArrayList" /> ラッパー。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
      <summary>固定サイズの <see cref="T:System.Collections.IList" /> ラッパーを返します。</summary>
      <param name="list">ラップする <see cref="T:System.Collections.IList" />。</param>
      <returns>固定サイズの <see cref="T:System.Collections.IList" /> ラッパー。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator">
      <summary>全体の <see cref="T:System.Collections.ArrayList" /> の列挙子を返します。</summary>
      <returns>全体の <see cref="T:System.Collections.IEnumerator" /> の <see cref="T:System.Collections.ArrayList" />。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> 内の要素の範囲の列挙子を返します。</summary>
      <param name="index">列挙子が参照する必要のある <see cref="T:System.Collections.ArrayList" /> セクションの開始位置を示す 0 から始まるインデックス番号。</param>
      <param name="count">列挙子が参照する必要のある <see cref="T:System.Collections.ArrayList" /> セクション内の要素の数。</param>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 内の要素の指定した範囲の <see cref="T:System.Collections.ArrayList" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.ArrayList" /> において有効な範囲を指定していません。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
      <summary>元の <see cref="T:System.Collections.ArrayList" /> 内の要素のサブセットを表す <see cref="T:System.Collections.ArrayList" /> を返します。</summary>
      <param name="index">範囲が開始する位置の、0 から始まる <see cref="T:System.Collections.ArrayList" /> のインデックス番号。</param>
      <param name="count">範囲内の要素の数。</param>
      <returns>元の <see cref="T:System.Collections.ArrayList" /> 内の要素のサブセットを表す <see cref="T:System.Collections.ArrayList" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.ArrayList" /> において要素の有効な範囲を表していません。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> を検索し、<see cref="T:System.Collections.ArrayList" /> 全体内で最初に見つかった位置の 0 から始まるインデックスを返します。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 内で検索される <see cref="T:System.Collections.ArrayList" />。 値として <see langword="null" /> を指定できます。</param>
      <returns>
        <paramref name="value" /> 全体を対象に <see cref="T:System.Collections.ArrayList" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号、それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
      <summary>指定した <see cref="T:System.Object" /> を検索し、指定したインデックスから最後の要素までの <see cref="T:System.Collections.ArrayList" /> 内の要素の範囲内で最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 内で検索される <see cref="T:System.Collections.ArrayList" />。 値として <see langword="null" /> を指定できます。</param>
      <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <returns>
        <paramref name="value" /> から最後の要素までの <see cref="T:System.Collections.ArrayList" /> 内の要素の範囲内で <paramref name="startIndex" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> は <see cref="T:System.Collections.ArrayList" /> の有効なインデックスの範囲外です。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
      <summary>指定した <see cref="T:System.Object" /> を検索し、指定したインデックスから始まって指定した数の要素を格納する <see cref="T:System.Collections.ArrayList" /> 内の要素の範囲内で最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 内で検索される <see cref="T:System.Collections.ArrayList" />。 値として <see langword="null" /> を指定できます。</param>
      <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <returns>
        <paramref name="value" /> から始まって <see cref="T:System.Collections.ArrayList" /> 個の要素を格納する <paramref name="startIndex" /> 内の要素の範囲内で <paramref name="count" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> は <see cref="T:System.Collections.ArrayList" /> の有効なインデックスの範囲外です。

または -
<paramref name="count" /> が 0 未満です。

または -
<paramref name="startIndex" /> および <paramref name="count" /> が <see cref="T:System.Collections.ArrayList" /> 内の正しいセクションを指定していません。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> 内の指定したインデックスの位置に要素を挿入します。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value">挿入する <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="index" /> が <see cref="P:System.Collections.ArrayList.Count" /> より大きくなっています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。

または -
<see cref="T:System.Collections.ArrayList" /> は固定サイズです。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
      <summary>コレクションの要素を <see cref="T:System.Collections.ArrayList" /> 内の指定したインデックスの位置に挿入します。</summary>
      <param name="index">新しい要素が挿入される位置の 0 から始まるインデックス。</param>
      <param name="c">
        <see cref="T:System.Collections.ICollection" /> に挿入される要素を持つ <see cref="T:System.Collections.ArrayList" />。 コレクション自体を <see langword="null" /> にすることはできませんが、<see langword="null" /> である要素を格納することは可能です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="index" /> が <see cref="P:System.Collections.ArrayList.Count" /> より大きくなっています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。

または -
<see cref="T:System.Collections.ArrayList" /> は固定サイズです。</exception>
    </member>
    <member name="P:System.Collections.ArrayList.IsFixedSize">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.ArrayList" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsReadOnly">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.ArrayList" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ArrayList" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Collections.ArrayList.Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <returns>指定したインデックス位置にある要素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="index" /> が <see cref="P:System.Collections.ArrayList.Count" /> 以上になっています。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> を検索し、<see cref="T:System.Collections.ArrayList" /> 全体で最後に見つかった位置の 0 から始まるインデックスを返します。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 内で検索される <see cref="T:System.Collections.ArrayList" />。 値として <see langword="null" /> を指定できます。</param>
      <returns>
        <paramref name="value" /> が見つかった場合は、<see cref="T:System.Collections.ArrayList" /> 全体で最後に見つかった位置のインデックス番号 (0 から始まる)。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
      <summary>指定した <see cref="T:System.Object" /> を検索し、最初の要素から、指定したインデックスまでの <see cref="T:System.Collections.ArrayList" /> 内の要素の範囲内で最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 内で検索される <see cref="T:System.Collections.ArrayList" />。 値として <see langword="null" /> を指定できます。</param>
      <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <returns>最初の要素から <paramref name="value" /> までの <see cref="T:System.Collections.ArrayList" /> 内の要素の範囲内で <paramref name="startIndex" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> は <see cref="T:System.Collections.ArrayList" /> の有効なインデックスの範囲外です。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
      <summary>指定した <see cref="T:System.Object" /> を検索し、指定した数の要素を含み、かつ指定したインデックスで終了する <see cref="T:System.Collections.ArrayList" /> 内の要素の範囲内で最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 内で検索される <see cref="T:System.Collections.ArrayList" />。 値として <see langword="null" /> を指定できます。</param>
      <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <returns>
        <paramref name="value" /> 個の要素を格納し、<see cref="T:System.Collections.ArrayList" /> の位置で終了する <paramref name="count" /> 内の要素の範囲内で <paramref name="startIndex" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> は <see cref="T:System.Collections.ArrayList" /> の有効なインデックスの範囲外です。

または -
<paramref name="count" /> が 0 未満です。

または -
<paramref name="startIndex" /> および <paramref name="count" /> が <see cref="T:System.Collections.ArrayList" /> 内の正しいセクションを指定していません。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
      <summary>読み取り専用 <see cref="T:System.Collections.ArrayList" /> ラッパーを返します。</summary>
      <param name="list">ラップする <see cref="T:System.Collections.ArrayList" />。</param>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> をラップする読み取り専用の <paramref name="list" /> ラッパー。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
      <summary>読み取り専用 <see cref="T:System.Collections.IList" /> ラッパーを返します。</summary>
      <param name="list">ラップする <see cref="T:System.Collections.IList" />。</param>
      <returns>
        <see cref="T:System.Collections.IList" /> をラップする読み取り専用の <paramref name="list" /> ラッパー。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Remove(System.Object)">
      <summary>特定のオブジェクトが <see cref="T:System.Collections.ArrayList" /> 内にあるときに、最初に出現したものを削除します。</summary>
      <param name="obj">
        <see cref="T:System.Object" /> から削除する <see cref="T:System.Collections.ArrayList" />。 値として <see langword="null" /> を指定できます。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。

または -
<see cref="T:System.Collections.ArrayList" /> は固定サイズです。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> の指定したインデックスにある要素を削除します。</summary>
      <param name="index">削除する要素の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="index" /> が <see cref="P:System.Collections.ArrayList.Count" /> 以上になっています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。

または -
<see cref="T:System.Collections.ArrayList" /> は固定サイズです。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> から要素の範囲を削除します。</summary>
      <param name="index">削除する要素の範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">削除する要素の数を指定します。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.ArrayList" /> において要素の有効な範囲を表していません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。

または -
<see cref="T:System.Collections.ArrayList" /> は固定サイズです。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
      <summary>指定した値のコピーである要素を持つ <see cref="T:System.Collections.ArrayList" /> を返します。</summary>
      <param name="value">新しい <see cref="T:System.Object" /> で複数回コピーする <see cref="T:System.Collections.ArrayList" />。 値として <see langword="null" /> を指定できます。</param>
      <param name="count">
        <paramref name="value" /> をコピーする回数。</param>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 個の要素があり、その要素がすべて <paramref name="count" /> のコピーである <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> 全体の要素の順序を反転させます。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
      <summary>指定した範囲の要素の順序を反転させます。</summary>
      <param name="index">反転させる範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">反転させる範囲内にある要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.ArrayList" /> において要素の有効な範囲を表していません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
      <summary>コレクションの要素を <see cref="T:System.Collections.ArrayList" /> 内の要素の範囲にコピーします。</summary>
      <param name="index">
        <see cref="T:System.Collections.ArrayList" /> の要素のコピーを開始する位置を示す、0 から始まる <paramref name="c" /> インデックス。</param>
      <param name="c">
        <see cref="T:System.Collections.ICollection" /> にコピーする要素を持つ <see cref="T:System.Collections.ArrayList" />。 コレクション自体を <see langword="null" /> にすることはできませんが、<see langword="null" /> である要素を格納することは可能です。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="index" /> に <paramref name="c" /> 内の要素数を加算すると <see cref="P:System.Collections.ArrayList.Count" /> より大きい値になります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> 全体で要素を並べ替えます。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
      <summary>指定した比較子を使用して、<see cref="T:System.Collections.ArrayList" /> 全体内の要素を並べ替えます。</summary>
      <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> の実装。

または -
各要素の <see langword="Nothing" /> 実装を使用するための null 参照 (Visual Basic の場合は <see cref="T:System.IComparable" />)。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。</exception>
      <exception cref="T:System.InvalidOperationException">2 つの要素の比較中にエラーが発生しました。</exception>
      <exception cref="T:System.ArgumentException">
        <see langword="null" /> が <paramref name="comparer" /> として渡され、リスト内の要素が <see cref="T:System.IComparable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>指定した比較子を使用して、<see cref="T:System.Collections.ArrayList" /> 内の要素の範囲内の要素を並べ替えます。</summary>
      <param name="index">並べ替える範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">並べ替える範囲の長さ。</param>
      <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> の実装。

または -
各要素の <see langword="Nothing" /> 実装を使用するための null 参照 (Visual Basic の場合は <see cref="T:System.IComparable" />)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.ArrayList" /> において有効な範囲を指定していません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。</exception>
      <exception cref="T:System.InvalidOperationException">2 つの要素の比較中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
      <summary>同期されている (スレッド セーフな) <see cref="T:System.Collections.ArrayList" /> ラッパーを返します。</summary>
      <param name="list">同期する <see cref="T:System.Collections.ArrayList" />。</param>
      <returns>同期されている (スレッド セーフな) <see cref="T:System.Collections.ArrayList" /> ラッパー。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
      <summary>同期されている (スレッド セーフな) <see cref="T:System.Collections.IList" /> ラッパーを返します。</summary>
      <param name="list">同期する <see cref="T:System.Collections.IList" />。</param>
      <returns>同期されている (スレッド セーフな) <see cref="T:System.Collections.IList" /> ラッパー。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Collections.ArrayList.SyncRoot">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> の要素を新しい <see cref="T:System.Object" /> 配列にコピーします。</summary>
      <returns>
        <see cref="T:System.Object" /> の要素のコピーを格納する <see cref="T:System.Collections.ArrayList" /> 配列。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray(System.Type)">
      <summary>
        <see cref="T:System.Collections.ArrayList" /> の要素を、指定した要素型の新しい配列にコピーします。</summary>
      <param name="type">作成して要素をコピーする対象となる配列の要素 <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> の要素のコピーを格納する、指定した要素型の配列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidCastException">ソース <see cref="T:System.Collections.ArrayList" /> の型を指定された型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.TrimToSize">
      <summary>容量を <see cref="T:System.Collections.ArrayList" /> 内にある実際の要素数に設定します。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。

または -
<see cref="T:System.Collections.ArrayList" /> は固定サイズです。</exception>
    </member>
    <member name="T:System.Collections.Comparer">
      <summary>2 つのオブジェクトが等しいかどうかを比較します。文字列の大文字と小文字は区別されます。</summary>
    </member>
    <member name="M:System.Collections.Comparer.#ctor(System.Globalization.CultureInfo)">
      <summary>指定した <see cref="T:System.Globalization.CultureInfo" /> を使用して <see cref="T:System.Collections.Comparer" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="culture">新しい <see cref="T:System.Globalization.CultureInfo" /> で使用する <see cref="T:System.Collections.Comparer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Comparer.Compare(System.Object,System.Object)">
      <summary>同じ型の 2 つのオブジェクトに対して大文字と小文字を区別する比較を実行し、一方が他方よりも小さいか、等しいか、大きいかを示す値を返します。</summary>
      <param name="a">比較する最初のオブジェクト。</param>
      <param name="b">比較する 2 番目のオブジェクト。</param>
      <returns>
        <paramref name="a" /> と <paramref name="b" /> の相対値を示す符号付き整数。次の表を参照してください。
 [値] 
 説明 
 0 より小さい値 
<paramref name="a" /> は <paramref name="b" /> より小さい値です。  
  
 0 
<paramref name="a" /> と <paramref name="b" /> は等しい。  
  
 0 より大きい値 
<paramref name="a" /> が <paramref name="b" /> より大きくなっています。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="a" /> と <paramref name="b" /> が、いずれも <see cref="T:System.IComparable" /> インターフェイスを実装していません。
または
<paramref name="a" /> と <paramref name="b" /> の型が異なっていて、両者を比較できません。</exception>
    </member>
    <member name="F:System.Collections.Comparer.Default">
      <summary>現在のスレッドの <see cref="T:System.Collections.Comparer" /> に関連付けられた <see cref="P:System.Threading.Thread.CurrentCulture" /> のインスタンスを表します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.Collections.Comparer.DefaultInvariant">
      <summary>
        <see cref="T:System.Collections.Comparer" /> に関連付けられた <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> のインスタンスを表します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.Collections.Comparer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、シリアル化に必要なデータを設定します。</summary>
      <param name="info">データを読み込む先のオブジェクト。</param>
      <param name="context">シリアル化の発生元または発生先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> は <see langword="null" />です。</exception>
    </member>
    <member name="T:System.Collections.Hashtable">
      <summary>キーのハッシュ コードに基づいて編成された、キーと値のペアのコレクションを表します。</summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor">
      <summary>既定の初期量、テーブル占有率、ハッシュ コード プロバイダー、および比較子を使用して、<see cref="T:System.Collections.Hashtable" /> クラスの新しい空のインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)">
      <summary>指定したディクショナリの要素を新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトにコピーすることによって、<see cref="T:System.Collections.Hashtable" /> クラスの新しいインスタンスを初期化します。 新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトは、コピーされた要素数に等しい初期量を備えており、既定のテーブル占有率、ハッシュ コード プロバイダー、および比較子を使用します。</summary>
      <param name="d">新しい <see cref="T:System.Collections.IDictionary" /> オブジェクトにコピーする <see cref="T:System.Collections.Hashtable" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)">
      <summary>指定したディクショナリの要素を新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトにコピーすることによって、<see cref="T:System.Collections.Hashtable" /> クラスの新しいインスタンスを初期化します。 新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトは、コピーされた要素数に等しい初期量を備えており、既定のテーブル占有率および指定した <see cref="T:System.Collections.IEqualityComparer" /> オブジェクトを使用します。</summary>
      <param name="d">新しい <see cref="T:System.Collections.IDictionary" /> オブジェクトにコピーする <see cref="T:System.Collections.Hashtable" /> オブジェクト。</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> で使用するハッシュ コード プロバイダーと比較子を定義する <see cref="T:System.Collections.Hashtable" /> オブジェクト。

または -
既定のハッシュ コード プロバイダーおよび既定の比較子を使用する場合は <see langword="null" />。 既定のハッシュ コード プロバイダーは、各キーの <see cref="M:System.Object.GetHashCode" /> の実装です。また、既定の比較子は各キーの <see cref="M:System.Object.Equals(System.Object)" /> の実装です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>指定したディクショナリの要素を新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトにコピーすることによって、<see cref="T:System.Collections.Hashtable" /> クラスの新しいインスタンスを初期化します。 新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトは、コピーされた要素数に等しい初期量を備えており、既定のテーブル占有率、および指定したハッシュ コード プロバイダーと比較子を使用します。 この API は、互換性のために残されています。 代替については、<see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)" /> を参照してください。</summary>
      <param name="d">新しい <see cref="T:System.Collections.IDictionary" /> オブジェクトにコピーする <see cref="T:System.Collections.Hashtable" /> オブジェクト。</param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 内のすべてのキーにハッシュ コードを提供する <see cref="T:System.Collections.Hashtable" /> オブジェクト。

または -
各キーの <see cref="M:System.Object.GetHashCode" /> の実装である既定のハッシュ コード プロバイダーを使用する場合は <see langword="null" />。</param>
      <param name="comparer">2 つのキーが等しいかどうかを判断するために使用する <see cref="T:System.Collections.IComparer" /> オブジェクト。

または -
各キーの <see cref="M:System.Object.Equals(System.Object)" /> の実装である既定の比較子を使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)">
      <summary>指定したディクショナリの要素を新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトにコピーすることによって、<see cref="T:System.Collections.Hashtable" /> クラスの新しいインスタンスを初期化します。 新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトは、コピーされた要素数に等しい初期量を備えており、指定したテーブル占有率、および既定のハッシュ コード プロバイダーと比較子を使用します。</summary>
      <param name="d">新しい <see cref="T:System.Collections.IDictionary" /> オブジェクトにコピーする <see cref="T:System.Collections.Hashtable" /> オブジェクト。</param>
      <param name="loadFactor">0.1 ～ 1.0 の範囲の値。これに、パフォーマンスが最高になる既定値を乗算します。 その結果が、バケット数に対する要素数の最大比率です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> が 0.1 未満です。

または -
<paramref name="loadFactor" /> が 1.0 を超えています。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)">
      <summary>指定したディクショナリの要素を新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトにコピーすることによって、<see cref="T:System.Collections.Hashtable" /> クラスの新しいインスタンスを初期化します。 新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトは、コピーされた要素数に等しい初期量を備えており、指定したテーブル占有率および <see cref="T:System.Collections.IEqualityComparer" /> オブジェクトを使用します。</summary>
      <param name="d">新しい <see cref="T:System.Collections.IDictionary" /> オブジェクトにコピーする <see cref="T:System.Collections.Hashtable" /> オブジェクト。</param>
      <param name="loadFactor">0.1 ～ 1.0 の範囲の値。これに、パフォーマンスが最高になる既定値を乗算します。 その結果が、バケット数に対する要素数の最大比率です。</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> で使用するハッシュ コード プロバイダーと比較子を定義する <see cref="T:System.Collections.Hashtable" /> オブジェクト。

または -
既定のハッシュ コード プロバイダーおよび既定の比較子を使用する場合は <see langword="null" />。 既定のハッシュ コード プロバイダーは、各キーの <see cref="M:System.Object.GetHashCode" /> の実装です。また、既定の比較子は各キーの <see cref="M:System.Object.Equals(System.Object)" /> の実装です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> が 0.1 未満です。

または -
<paramref name="loadFactor" /> が 1.0 を超えています。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>指定したディクショナリの要素を新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトにコピーすることによって、<see cref="T:System.Collections.Hashtable" /> クラスの新しいインスタンスを初期化します。 新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトは、コピーされた要素数に等しい初期量を備えており、指定したテーブル占有率、ハッシュ コード プロバイダー、および比較子を使用します。</summary>
      <param name="d">新しい <see cref="T:System.Collections.IDictionary" /> オブジェクトにコピーする <see cref="T:System.Collections.Hashtable" /> オブジェクト。</param>
      <param name="loadFactor">0.1 ～ 1.0 の範囲の値。これに、パフォーマンスが最高になる既定値を乗算します。 その結果が、バケット数に対する要素数の最大比率です。</param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 内のすべてのキーにハッシュ コードを提供する <see cref="T:System.Collections.Hashtable" /> オブジェクト。

または -
各キーの <see cref="M:System.Object.GetHashCode" /> の実装である既定のハッシュ コード プロバイダーを使用する場合は <see langword="null" />。</param>
      <param name="comparer">2 つのキーが等しいかどうかを判断するために使用する <see cref="T:System.Collections.IComparer" /> オブジェクト。

または -
各キーの <see cref="M:System.Object.Equals(System.Object)" /> の実装である既定の比較子を使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> が 0.1 未満です。

または -
<paramref name="loadFactor" /> が 1.0 を超えています。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)">
      <summary>既定の初期量とテーブル占有率、および指定した <see cref="T:System.Collections.Hashtable" /> オブジェクトを使用して、<see cref="T:System.Collections.IEqualityComparer" /> クラスの新しい空のインスタンスを初期化します。</summary>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> オブジェクトで使用するハッシュ コード プロバイダーと比較子を定義する <see cref="T:System.Collections.Hashtable" /> オブジェクト。

または -
既定のハッシュ コード プロバイダーおよび既定の比較子を使用する場合は <see langword="null" />。 既定のハッシュ コード プロバイダーは、各キーの <see cref="M:System.Object.GetHashCode" /> の実装です。また、既定の比較子は各キーの <see cref="M:System.Object.Equals(System.Object)" /> の実装です。</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>既定の初期量とテーブル占有率、および指定したハッシュ コード プロバイダーと比較子を使用して、<see cref="T:System.Collections.Hashtable" /> クラスの新しい空のインスタンスを初期化します。</summary>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> オブジェクト内のすべてのキーにハッシュ コードを提供する <see cref="T:System.Collections.Hashtable" /> オブジェクト。

または -
各キーの <see cref="M:System.Object.GetHashCode" /> の実装である既定のハッシュ コード プロバイダーを使用する場合は <see langword="null" />。</param>
      <param name="comparer">2 つのキーが等しいかどうかを判断するために使用する <see cref="T:System.Collections.IComparer" /> オブジェクト。

または -
各キーの <see cref="M:System.Object.Equals(System.Object)" /> の実装である既定の比較子を使用する場合は <see langword="null" />。</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32)">
      <summary>指定した初期量と、既定のテーブル占有率、ハッシュ コード プロバイダー、および比較子を使用して、<see cref="T:System.Collections.Hashtable" /> クラスの新しい空のインスタンスを初期化します。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> オブジェクトが初期状態で格納できる要素の概数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>指定した初期量と <see cref="T:System.Collections.Hashtable" />、および既定のテーブル占有率を使用して、<see cref="T:System.Collections.IEqualityComparer" /> クラスの新しい空のインスタンスを初期化します。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> オブジェクトが初期状態で格納できる要素の概数。</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> で使用するハッシュ コード プロバイダーと比較子を定義する <see cref="T:System.Collections.Hashtable" /> オブジェクト。

または -
既定のハッシュ コード プロバイダーおよび既定の比較子を使用する場合は <see langword="null" />。 既定のハッシュ コード プロバイダーは、各キーの <see cref="M:System.Object.GetHashCode" /> の実装です。また、既定の比較子は各キーの <see cref="M:System.Object.Equals(System.Object)" /> の実装です。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>指定した初期量、ハッシュ コード プロバイダー、および比較子と、既定のテーブル占有率を使用して、<see cref="T:System.Collections.Hashtable" /> クラスの新しい空のインスタンスを初期化します。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> オブジェクトが初期状態で格納できる要素の概数。</param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 内のすべてのキーにハッシュ コードを提供する <see cref="T:System.Collections.Hashtable" /> オブジェクト。

または -
各キーの <see cref="M:System.Object.GetHashCode" /> の実装である既定のハッシュ コード プロバイダーを使用する場合は <see langword="null" />。</param>
      <param name="comparer">2 つのキーが等しいかどうかを判断するために使用する <see cref="T:System.Collections.IComparer" /> オブジェクト。

または -
各キーの <see cref="M:System.Object.Equals(System.Object)" /> の実装である既定の比較子を使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)">
      <summary>指定した初期量とテーブル占有率、および既定のハッシュ コード プロバイダーと比較子を使用して、<see cref="T:System.Collections.Hashtable" /> クラスの新しい空のインスタンスを初期化します。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> オブジェクトが初期状態で格納できる要素の概数。</param>
      <param name="loadFactor">0.1 ～ 1.0 の範囲の値。これに、パフォーマンスが最高になる既定値を乗算します。 その結果が、バケット数に対する要素数の最大比率です。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。

または -
<paramref name="loadFactor" /> が 0.1 未満です。

または -
<paramref name="loadFactor" /> が 1.0 を超えています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="capacity" /> はオーバーフローを起こしています。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)">
      <summary>指定した初期量、テーブル占有率、および <see cref="T:System.Collections.Hashtable" /> オブジェクトを使用して、<see cref="T:System.Collections.IEqualityComparer" /> クラスの新しい空のインスタンスを初期化します。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> オブジェクトが初期状態で格納できる要素の概数。</param>
      <param name="loadFactor">0.1 ～ 1.0 の範囲の値。これに、パフォーマンスが最高になる既定値を乗算します。 その結果が、バケット数に対する要素数の最大比率です。</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> で使用するハッシュ コード プロバイダーと比較子を定義する <see cref="T:System.Collections.Hashtable" /> オブジェクト。

または -
既定のハッシュ コード プロバイダーおよび既定の比較子を使用する場合は <see langword="null" />。 既定のハッシュ コード プロバイダーは、各キーの <see cref="M:System.Object.GetHashCode" /> の実装です。また、既定の比較子は各キーの <see cref="M:System.Object.Equals(System.Object)" /> の実装です。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。

または -
<paramref name="loadFactor" /> が 0.1 未満です。

または -
<paramref name="loadFactor" /> が 1.0 を超えています。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>指定した初期量、テーブル占有率、ハッシュ コード プロバイダー、および比較子を使用して、<see cref="T:System.Collections.Hashtable" /> クラスの新しい空のインスタンスを初期化します。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> オブジェクトが初期状態で格納できる要素の概数。</param>
      <param name="loadFactor">0.1 ～ 1.0 の範囲の値。これに、パフォーマンスが最高になる既定値を乗算します。 その結果が、バケット数に対する要素数の最大比率です。</param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 内のすべてのキーにハッシュ コードを提供する <see cref="T:System.Collections.Hashtable" /> オブジェクト。

または -
各キーの <see cref="M:System.Object.GetHashCode" /> の実装である既定のハッシュ コード プロバイダーを使用する場合は <see langword="null" />。</param>
      <param name="comparer">2 つのキーが等しいかどうかを判断するために使用する <see cref="T:System.Collections.IComparer" /> オブジェクト。

または -
各キーの <see cref="M:System.Object.Equals(System.Object)" /> の実装である既定の比較子を使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。

または -
<paramref name="loadFactor" /> が 0.1 未満です。

または -
<paramref name="loadFactor" /> が 1.0 を超えています。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定した <see cref="T:System.Collections.Hashtable" /> オブジェクトと <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトを使用してシリアル化できる、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しい空のインスタンスを初期化します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトをシリアル化するために必要な情報を格納している <see cref="T:System.Collections.Hashtable" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納している <see cref="T:System.Collections.Hashtable" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Add(System.Object,System.Object)">
      <summary>指定したキーおよび値を持つ要素を <see cref="T:System.Collections.Hashtable" /> に追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。 値として <see langword="null" /> を指定できます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">同じキーを持つ要素が、<see cref="T:System.Collections.Hashtable" /> に既に存在します。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> は読み取り専用です。

または -
<see cref="T:System.Collections.Hashtable" /> は固定サイズです。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clear">
      <summary>
        <see cref="T:System.Collections.Hashtable" /> からすべての要素を削除します。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> は読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clone">
      <summary>
        <see cref="T:System.Collections.Hashtable" /> の簡易コピーを作成します。</summary>
      <returns>
        <see cref="T:System.Collections.Hashtable" /> の簡易コピー。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.comparer">
      <summary>
        <see cref="T:System.Collections.IComparer" /> で使用する <see cref="T:System.Collections.Hashtable" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Collections.IComparer" /> で使用する <see cref="T:System.Collections.Hashtable" />。</returns>
      <exception cref="T:System.ArgumentException">プロパティには値が設定されますが、ハッシュ テーブルは <see cref="T:System.Collections.IEqualityComparer" /> を使用して作成されています。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Contains(System.Object)">
      <summary>
        <see cref="T:System.Collections.Hashtable" /> に特定のキーが格納されているかどうかを判断します。</summary>
      <param name="key">
        <see cref="T:System.Collections.Hashtable" /> 内で検索されるキー。</param>
      <returns>指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Hashtable" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsKey(System.Object)">
      <summary>
        <see cref="T:System.Collections.Hashtable" /> に特定のキーが格納されているかどうかを判断します。</summary>
      <param name="key">
        <see cref="T:System.Collections.Hashtable" /> 内で検索されるキー。</param>
      <returns>指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Hashtable" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsValue(System.Object)">
      <summary>
        <see cref="T:System.Collections.Hashtable" /> に特定の値が格納されているかどうかを判断します。</summary>
      <param name="value">
        <see cref="T:System.Collections.Hashtable" /> 内で検索される値。 値として <see langword="null" /> を指定できます。</param>
      <returns>指定した <see langword="true" /> を持つ要素が <see cref="T:System.Collections.Hashtable" /> に含まれている場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)">
      <summary>1 次元の <see cref="T:System.Collections.Hashtable" /> インスタンスの指定したインデックスに <see cref="T:System.Array" /> の要素をコピーします。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から <see cref="T:System.Collections.DictionaryEntry" /> オブジェクトがコピーされる 1 次元の <see cref="T:System.Collections.Hashtable" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。

または -
コピー元の <see cref="T:System.Collections.Hashtable" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</exception>
      <exception cref="T:System.InvalidCastException">コピー元の <see cref="T:System.Collections.Hashtable" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.Hashtable.Count">
      <summary>
        <see cref="T:System.Collections.Hashtable" /> に格納されているキー/値ペアの数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Hashtable" /> に格納されているキー/値ペアの数。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.EqualityComparer">
      <summary>
        <see cref="T:System.Collections.IEqualityComparer" /> に使用する <see cref="T:System.Collections.Hashtable" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IEqualityComparer" /> で使用する <see cref="T:System.Collections.Hashtable" />。</returns>
      <exception cref="T:System.ArgumentException">プロパティには値が設定されますが、ハッシュ テーブルは <see cref="T:System.Collections.IHashCodeProvider" /> および <see cref="T:System.Collections.IComparer" /> を使用して作成されています。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Hashtable" /> を反復処理する <see cref="T:System.Collections.IDictionaryEnumerator" /> を返します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.Hashtable" />。</returns>
    </member>
    <member name="M:System.Collections.Hashtable.GetHash(System.Object)">
      <summary>指定したキーのハッシュ コードを返します。</summary>
      <param name="key">ハッシュ コードが返される対象の <see cref="T:System.Object" />。</param>
      <returns>
        <paramref name="key" /> のハッシュ コード。</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="key" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Hashtable" /> をシリアル化するために必要なデータを返します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> をシリアル化するために必要な情報を格納している <see cref="T:System.Collections.Hashtable" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納している <see cref="T:System.Collections.Hashtable" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">コレクションが変更されました。</exception>
    </member>
    <member name="P:System.Collections.Hashtable.hcp">
      <summary>ハッシュ コードを提供できるオブジェクトを取得または設定します。</summary>
      <returns>ハッシュ コードを提供できるオブジェクト。</returns>
      <exception cref="T:System.ArgumentException">プロパティには値が設定されますが、ハッシュ テーブルは <see cref="T:System.Collections.IEqualityComparer" /> を使用して作成されています。</exception>
    </member>
    <member name="P:System.Collections.Hashtable.IsFixedSize">
      <summary>
        <see cref="T:System.Collections.Hashtable" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.Hashtable" /> 。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Hashtable" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Hashtable" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsSynchronized">
      <summary>
        <see cref="T:System.Collections.Hashtable" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.Hashtable" /> 。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.Item(System.Object)">
      <summary>指定されたキーに関連付けられている値を取得または設定します。</summary>
      <param name="key">値を取得または設定する対象のキー。</param>
      <returns>指定されたキーに関連付けられている値。 指定したキーが見つからない場合、そのキーを取得しようとした場合は <see langword="null" /> が返され、そのキーを設定しようとした場合は、指定したキーを使用して新しい要素が作成されます。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">このプロパティが設定されていますが、<see cref="T:System.Collections.Hashtable" /> が読み取り専用です。

または -
プロパティが設定済みで、コレクション内に <paramref name="key" /> が存在せず、<see cref="T:System.Collections.Hashtable" /> が固定サイズです。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.KeyEquals(System.Object,System.Object)">
      <summary>特定の <see cref="T:System.Object" /> を <see cref="T:System.Collections.Hashtable" /> 内の特定のキーと比較します。</summary>
      <param name="item">
        <paramref name="key" /> と比較する <see cref="T:System.Object" />。</param>
      <param name="key">
        <paramref name="item" /> と比較する、<see cref="T:System.Collections.Hashtable" /> 内のキー。</param>
      <returns>
        <see langword="true" /> と <paramref name="item" /> が等しい場合は <paramref name="key" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> は <see langword="null" />です。

または -
<paramref name="key" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Collections.Hashtable.Keys">
      <summary>
        <see cref="T:System.Collections.Hashtable" /> 内のキーを格納している <see cref="T:System.Collections.ICollection" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 内のキーを格納している <see cref="T:System.Collections.Hashtable" />。</returns>
    </member>
    <member name="M:System.Collections.Hashtable.OnDeserialization(System.Object)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
      <param name="sender">逆シリアル化イベントのソース。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">現在の <see cref="T:System.Runtime.Serialization.SerializationInfo" /> と関連付けられている <see cref="T:System.Collections.Hashtable" /> オブジェクトが無効です。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Remove(System.Object)">
      <summary>指定したキーを持つ要素を <see cref="T:System.Collections.Hashtable" /> から削除します。</summary>
      <param name="key">削除する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> は読み取り専用です。

または -
<see cref="T:System.Collections.Hashtable" /> は固定サイズです。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)">
      <summary>
        <see cref="T:System.Collections.Hashtable" /> 用の同期された (スレッド セーフな) ラッパーを返します。</summary>
      <param name="table">同期する <see cref="T:System.Collections.Hashtable" />。</param>
      <returns>
        <see cref="T:System.Collections.Hashtable" /> 用の同期された (スレッド セーフな) ラッパー。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Collections.Hashtable.SyncRoot">
      <summary>
        <see cref="T:System.Collections.Hashtable" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Hashtable" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.Values">
      <summary>
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.Hashtable" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.Hashtable" />。</returns>
    </member>
    <member name="T:System.Collections.IHashCodeProvider">
      <summary>カスタム ハッシュ関数を使用して、オブジェクトのハッシュ コードを提供します。</summary>
    </member>
    <member name="M:System.Collections.IHashCodeProvider.GetHashCode(System.Object)">
      <summary>指定したオブジェクトのハッシュ コードを返します。</summary>
      <param name="obj">ハッシュ コードが返される対象の <see cref="T:System.Object" />。</param>
      <returns>指定したオブジェクトのハッシュ コード。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> の型が参照型で、<paramref name="obj" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.ContextBoundObject">
      <summary>すべてのコンテキスト バインド クラスの基本クラスを定義します。</summary>
    </member>
    <member name="M:System.ContextBoundObject.#ctor">
      <summary>
        <see cref="T:System.ContextBoundObject" /> クラスのインスタンスをインスタンス化します。</summary>
    </member>
    <member name="T:System.ContextMarshalException">
      <summary>コンテキストの境界を越えてオブジェクトをマーシャリングしようとして失敗した場合にスローされる例外。</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor">
      <summary>
        <see cref="T:System.ContextMarshalException" /> クラスの新しいインスタンスを、既定のプロパティを使用して初期化します。</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.ContextMarshalException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">転送元または転送先についてのコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext" /> です。</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ContextMarshalException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.ContextMarshalException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.ContextStaticAttribute">
      <summary>静的フィールドの値が特定のコンテキストで一意であることを示します。</summary>
    </member>
    <member name="M:System.ContextStaticAttribute.#ctor">
      <summary>
        <see cref="T:System.ContextStaticAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Convert">
      <summary>基本データ型を別の基本データ型に変換します。</summary>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type)">
      <summary>指定されたオブジェクトと等しい値を持つ、指定された型のオブジェクトを返します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="conversionType">返すオブジェクトの型。</param>
      <returns>型が <paramref name="conversionType" /> であり、<paramref name="value" /> と等価の値を持つオブジェクト。

または -
<paramref name="value" /> が <see langword="null" /> で、<paramref name="conversionType" /> が値型ではない場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />)。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。

または -
<paramref name="value" /> が <see langword="null" /> で、<paramref name="conversionType" /> が値型です。

または -
<paramref name="value" /> は <see cref="T:System.IConvertible" /> インターフェイスを実装していません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は <paramref name="conversionType" /> によって認識される形式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <paramref name="conversionType" /> の範囲外にある数値を表します。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
      <summary>指定したオブジェクトに等しい値を持つ指定した型のオブジェクトを返します。 パラメーターにより、カルチャに固有の書式情報が指定されます。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="conversionType">返すオブジェクトの型。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>型が <paramref name="conversionType" /> であり、<paramref name="value" /> と等価の値を持つオブジェクト。

または -
<paramref name="value" /> の <see cref="T:System.Type" /> と <paramref name="conversionType" /> が等しい場合は <paramref name="value" />。

または -
<paramref name="value" /> が <see langword="null" /> で、<paramref name="conversionType" /> が値型ではない場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />)。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。

または -
<paramref name="value" /> が <see langword="null" /> で、<paramref name="conversionType" /> が値型です。

または -
<paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、<paramref name="provider" /> によって認識される <paramref name="conversionType" /> の形式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <paramref name="conversionType" />の範囲外にある数値を表します。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
      <summary>指定したオブジェクトに等しい値を持つ指定した型のオブジェクトを返します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="typeCode">返すオブジェクトの型。</param>
      <returns>基になる型が <paramref name="typeCode" /> であり、<paramref name="value" /> と等価の値を持つオブジェクト。

または -
<paramref name="value" /> が <see langword="null" /> で、<paramref name="typeCode" /> が <see cref="F:System.TypeCode.Empty" />、<see cref="F:System.TypeCode.String" />、または <see cref="F:System.TypeCode.Object" /> の場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />)。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。

または -
<paramref name="value" /> は <see langword="null" /> であり、<paramref name="typeCode" /> は値の型を指定します。

または -
<paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は <paramref name="typeCode" /> 型によって認識される形式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <paramref name="typeCode" /> 型の範囲外にある数値を表します。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" /> が無効です。</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
      <summary>指定したオブジェクトに等しい値を持つ指定した型のオブジェクトを返します。 パラメーターにより、カルチャに固有の書式情報が指定されます。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="typeCode">返すオブジェクトの型。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>基になる型が <paramref name="typeCode" /> であり、<paramref name="value" /> と等価の値を持つオブジェクト。

または -
<paramref name="value" /> が <see langword="null" /> で、<paramref name="typeCode" /> が <see cref="F:System.TypeCode.Empty" />、<see cref="F:System.TypeCode.String" />、または <see cref="F:System.TypeCode.Object" /> の場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />)。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。

または -
<paramref name="value" /> は <see langword="null" /> であり、<paramref name="typeCode" /> は値の型を指定します。

または -
<paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は <paramref name="provider" /> によって認識される <paramref name="typeCode" /> 型の形式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <paramref name="typeCode" /> 型の範囲外にある数値を表します。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" /> が無効です。</exception>
    </member>
    <member name="F:System.Convert.DBNull">
      <summary>データのないデータベース列、つまりデータベースが null であることを表す定数。</summary>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
      <summary>Unicode 文字配列のサブセットを変換します。これにより、バイナリ データは Base64 の数字として等価の 8 ビット符号なし整数配列にエンコードされます。 入力配列のサブセットと変換する要素の数をパラメーターで指定します。</summary>
      <param name="inArray">Unicode 文字配列。</param>
      <param name="offset">
        <paramref name="inArray" /> 内での位置。</param>
      <param name="length">変換する <paramref name="inArray" /> の要素の数。</param>
      <returns>
        <paramref name="length" /> の <paramref name="offset" /> の位置にある <paramref name="inArray" /> 要素と等価の 8 ビット符号なし整数の配列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="length" /> が 0 未満です。

または -
<paramref name="offset" /> に<paramref name="length" /> を加算した値は <paramref name="inArray" /> の範囲外である位置を示します。</exception>
      <exception cref="T:System.FormatException">空白文字を除いた <paramref name="inArray" /> の長さが、0 でなく 4 の倍数でもありません。

または -
<paramref name="inArray" /> の形式が正しくありません。 <paramref name="inArray" /> に Base-64 以外の文字が含まれるか、3 個以上の埋め込み文字があるか、または埋め込み文字の間に空白以外の文字が含まれています。</exception>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
      <summary>指定した文字列を変換します。これにより、バイナリ データは Base64 の数字として等価の 8 ビット符号なし整数配列にエンコードされます。</summary>
      <param name="s">変換する文字列。</param>
      <returns>
        <paramref name="s" /> と等価な 8 ビット符号なし整数の配列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.FormatException">空白文字を除いた <paramref name="s" /> の長さが、0 でなく 4 の倍数でもありません。

または -
<paramref name="s" /> の形式が正しくありません。 <paramref name="s" /> に Base-64 以外の文字が含まれるか、3 個以上の埋め込み文字があるか、または埋め込み文字の間に空白以外の文字が含まれています。</exception>
    </member>
    <member name="M:System.Convert.GetTypeCode(System.Object)">
      <summary>指定したオブジェクトの <see cref="T:System.TypeCode" /> を返します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <returns>
        <see cref="T:System.TypeCode" /> の <paramref name="value" />。<see cref="F:System.TypeCode.Empty" /> が <paramref name="value" /> である場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Convert.IsDBNull(System.Object)">
      <summary>指定したオブジェクトの型が <see cref="T:System.DBNull" /> かどうかを示す値を返します。</summary>
      <param name="value">オブジェクト。</param>
      <returns>
        <see langword="true" /> の型が <paramref name="value" /> の場合は <see cref="T:System.DBNull" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>8 ビット符号なし整数配列のサブセットを、Base64 の数字でエンコードされた Unicode 文字配列の等価のサブセットに変換します。 入力配列と出力配列のオフセットとしてのサブセット、および変換する入力配列の要素の数をパラメーターで指定します。</summary>
      <param name="inArray">8 ビット符号なし整数で構成される入力配列。</param>
      <param name="offsetIn">
        <paramref name="inArray" /> 内での位置。</param>
      <param name="length">変換する <paramref name="inArray" /> の要素の数。</param>
      <param name="outArray">Unicode 文字の出力配列。</param>
      <param name="offsetOut">
        <paramref name="outArray" /> 内での位置。</param>
      <returns>
        <paramref name="outArray" /> のバイト数が格納された 32 ビット符号付き整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> または <paramref name="outArray" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />、<paramref name="offsetOut" />、または <paramref name="length" /> が負の値です。

または -
<paramref name="offsetIn" /> に <paramref name="length" /> を加算した値が、<paramref name="inArray" /> の長さを超えています。

または -
<paramref name="offsetOut" /> と返される要素の数を加算した値が <paramref name="outArray" /> の長さを超えています。</exception>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
      <summary>8 ビット符号なし整数配列のサブセットを、Base64 の数字でエンコードされた Unicode 文字配列の等価のサブセットに変換します。 入力配列と出力配列のオフセットとしてのサブセット、変換する入力配列の要素の数、および出力配列で改行を挿入するかどうかをパラメーターで指定します。</summary>
      <param name="inArray">8 ビット符号なし整数で構成される入力配列。</param>
      <param name="offsetIn">
        <paramref name="inArray" /> 内での位置。</param>
      <param name="length">変換する <paramref name="inArray" /> の要素の数。</param>
      <param name="outArray">Unicode 文字の出力配列。</param>
      <param name="offsetOut">
        <paramref name="outArray" /> 内での位置。</param>
      <param name="options">76 文字ごとに改行を挿入する場合は <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" />。改行を挿入しない場合は <see cref="F:System.Base64FormattingOptions.None" />。</param>
      <returns>
        <paramref name="outArray" /> のバイト数が格納された 32 ビット符号付き整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> または <paramref name="outArray" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />、<paramref name="offsetOut" />、または <paramref name="length" /> が負の値です。

または -
<paramref name="offsetIn" /> に <paramref name="length" /> を加算した値が、<paramref name="inArray" /> の長さを超えています。

または -
<paramref name="offsetOut" /> と返される要素の数を加算した値が <paramref name="outArray" />の長さを超えています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> は有効な <see cref="T:System.Base64FormattingOptions" /> 値ではありません。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
      <summary>8 ビット符号なし整数の配列を、Base64 の数字でエンコードされた等価の文字列形式に変換します。</summary>
      <param name="inArray">8 ビット符号なし整数の配列。</param>
      <returns>
        <paramref name="inArray" /> の内容の Base64 形式での文字列形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
      <summary>8 ビット符号なし整数の配列を、Base64 の数字でエンコードされた等価の文字列形式に変換します。 戻り値に改行を挿入するかどうかを指定できます。</summary>
      <param name="inArray">8 ビット符号なし整数の配列。</param>
      <param name="options">76 文字ごとに改行を挿入する場合は <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" />。改行を挿入しない場合は <see cref="F:System.Base64FormattingOptions.None" />。</param>
      <returns>
        <paramref name="inArray" /> の要素の Base64 形式の文字列形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> は有効な <see cref="T:System.Base64FormattingOptions" /> 値ではありません。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
      <summary>8 ビット符号なし整数配列のサブセットを、Base64 の数字でエンコードされた等価の文字列形式に変換します。 入力配列のオフセットとしてのサブセット、および変換する配列の要素の数をパラメーターで指定します。</summary>
      <param name="inArray">8 ビット符号なし整数の配列。</param>
      <param name="offset">
        <paramref name="inArray" /> のオフセット。</param>
      <param name="length">変換する <paramref name="inArray" /> の要素の数。</param>
      <returns>
        <paramref name="length" /> の <paramref name="inArray" /> 位置から <paramref name="offset" /> 個の要素の文字列形式。Base64 の数字で構成されています。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="length" /> が負の値です。

または -
<paramref name="offset" /> に <paramref name="length" /> を加算した値が、<paramref name="inArray" /> の長さを超えています。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
      <summary>8 ビット符号なし整数配列のサブセットを、Base64 の数字でエンコードされた等価の文字列形式に変換します。 入力配列のオフセットとしてのサブセット、変換する配列の要素の数、および戻り値で改行を挿入するかどうかをパラメーターで指定します。</summary>
      <param name="inArray">8 ビット符号なし整数の配列。</param>
      <param name="offset">
        <paramref name="inArray" /> のオフセット。</param>
      <param name="length">変換する <paramref name="inArray" /> の要素の数。</param>
      <param name="options">76 文字ごとに改行を挿入する場合は <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" />。改行を挿入しない場合は <see cref="F:System.Base64FormattingOptions.None" />。</param>
      <returns>
        <paramref name="length" /> の <paramref name="inArray" /> 位置から <paramref name="offset" /> 個の要素の文字列形式。Base64 の数字で構成されています。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="length" /> が負の値です。

または -
<paramref name="offset" /> に <paramref name="length" /> を加算した値が、<paramref name="inArray" /> の長さを超えています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> は有効な <see cref="T:System.Base64FormattingOptions" /> 値ではありません。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.ReadOnlySpan{System.Byte},System.Base64FormattingOptions)">
      <summary>指定した読み取り専用スパン内の 8 ビット符号なし整数を、それと等価の、Base 64 の数字でエンコードされた文字列形式に変換します。 必要に応じて、戻り値に改行を挿入するかどうかを指定できます。</summary>
      <param name="bytes">8 ビット符号なし整数の読み取り専用スパン。</param>
      <param name="options">戻り値に改行を挿入するかどうかを指定する列挙値の 1 つ。 既定値は <see cref="F:System.Base64FormattingOptions.None" /> です。</param>
      <returns>
        <paramref name="inArray" /> の要素の Base64 形式の文字列形式。 <paramref name="bytes" /> の長さが 0 の場合、空の文字列が返されます。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> は有効な <see cref="T:System.Base64FormattingOptions" /> 値ではありません。</exception>
      <exception cref="T:System.OutOfMemoryException">出力の長さが <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
      <summary>指定したブール値を返します。実際の変換は行われません。</summary>
      <param name="value">返されるブール値。</param>
      <returns>
        <paramref name="value" /> は変更されずに返されます。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
      <summary>指定した 8 ビット符号なし整数の値を等価の Boolean 値に変換します。</summary>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <returns>
        <see langword="true" /> が 0 以外の場合は <paramref name="value" />。0 の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Char)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する Unicode 文字。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.DateTime)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する日時の値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
      <summary>指定した 10 進数値を等価のブール値に変換します。</summary>
      <param name="value">変換する数値。</param>
      <returns>
        <see langword="true" /> が 0 以外の場合は <paramref name="value" />。0 の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
      <summary>指定した倍精度浮動小数点数値を等価のブール値に変換します。</summary>
      <param name="value">変換する倍精度浮動小数点数。</param>
      <returns>
        <see langword="true" /> が 0 以外の場合は <paramref name="value" />。0 の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
      <summary>指定された 16 ビット符号付き整数の値を等価のブール値に変換します。</summary>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <returns>
        <see langword="true" /> が 0 以外の場合は <paramref name="value" />。0 の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
      <summary>指定した 32 ビット符号付き整数の値を等価の Boolean 値に変換します。</summary>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <returns>
        <see langword="true" /> が 0 以外の場合は <paramref name="value" />。0 の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
      <summary>指定した 64 ビット符号付き整数の値を等価の Boolean 値に変換します。</summary>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <returns>
        <see langword="true" /> が 0 以外の場合は <paramref name="value" />。0 の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
      <summary>指定したオブジェクトの値を等価のブール値に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクトか、または <see langword="null" />。</param>
      <returns>
        <see langword="true" /> または <see langword="false" />。基になる <paramref name="value" /> の型に対して <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> メソッドを呼び出すことで返される値を反映します。 <paramref name="value" /> が <see langword="null" /> の場合、メソッドは <see langword="false" /> を返します。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は <see cref="F:System.Boolean.TrueString" /> または <see cref="F:System.Boolean.FalseString" /> と一致しない文字列です。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
<see cref="T:System.Boolean" /> への <paramref name="value" /> の変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定したオブジェクトの値を等価のブール値に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクトか、または <see langword="null" />。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <see langword="true" /> または <see langword="false" />。基になる <paramref name="value" /> の型に対して <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> メソッドを呼び出すことで返される値を反映します。 <paramref name="value" /> が <see langword="null" /> の場合、メソッドは <see langword="false" /> を返します。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は <see cref="F:System.Boolean.TrueString" /> または <see cref="F:System.Boolean.FalseString" /> と一致しない文字列です。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
<see cref="T:System.Boolean" /> への <paramref name="value" /> の変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
      <summary>指定した 8 ビット符号付き整数の値を等価の Boolean 値に変換します。</summary>
      <param name="value">変換する 8 ビット符号付き整数。</param>
      <returns>
        <see langword="true" /> が 0 以外の場合は <paramref name="value" />。0 の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
      <summary>指定した単精度浮動小数点数値を等価のブール値に変換します。</summary>
      <param name="value">変換する単精度浮動小数点数。</param>
      <returns>
        <see langword="true" /> が 0 以外の場合は <paramref name="value" />。0 の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
      <summary>指定した論理値の文字列形式をそれと等価なブール値に変換します。</summary>
      <param name="value">
        <see cref="F:System.Boolean.TrueString" /> または <see cref="F:System.Boolean.FalseString" /> のいずれかの値を格納する文字列。</param>
      <returns>
        <paramref name="value" /> が <see cref="F:System.Boolean.TrueString" /> に等しい場合は <see langword="true" />。<paramref name="value" /> が <see cref="F:System.Boolean.FalseString" /> または <see langword="null" /> に等しい場合は <see langword="false" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は <see cref="F:System.Boolean.TrueString" /> または <see cref="F:System.Boolean.FalseString" /> と等しくありません。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した論理値の文字列形式を等価のブール値に変換します。</summary>
      <param name="value">
        <see cref="F:System.Boolean.TrueString" /> または <see cref="F:System.Boolean.FalseString" /> のいずれかの値を格納する文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。 このパラメーターは無視されます。</param>
      <returns>
        <paramref name="value" /> が <see cref="F:System.Boolean.TrueString" /> に等しい場合は <see langword="true" />。<paramref name="value" /> が <see cref="F:System.Boolean.FalseString" /> または <see langword="null" /> に等しい場合は <see langword="false" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は <see cref="F:System.Boolean.TrueString" /> または <see cref="F:System.Boolean.FalseString" /> と等しくありません。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
      <summary>指定した 16 ビット符号なし整数の値を等価の Boolean 値に変換します。</summary>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <returns>
        <see langword="true" /> が 0 以外の場合は <paramref name="value" />。0 の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
      <summary>指定した 32 ビット符号なし整数の値を等価の Boolean 値に変換します。</summary>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <returns>
        <see langword="true" /> が 0 以外の場合は <paramref name="value" />。0 の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
      <summary>指定した 64 ビット符号なし整数の値を等価の Boolean 値に変換します。</summary>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <returns>
        <see langword="true" /> が 0 以外の場合は <paramref name="value" />。0 の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
      <summary>指定したブール値を等価の 8 ビット符号なし整数に変換します。</summary>
      <param name="value">変換するブール値。</param>
      <returns>
        <paramref name="value" /> が <see langword="true" /> の場合は数値の 1。それ以外の場合は 0。</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
      <summary>指定した 8 ビット符号なし整数が返されます。実際の変換は行われません。</summary>
      <param name="value">返される 8 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> は変更されずに返されます。</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
      <summary>指定した Unicode 文字の値を等価の 8 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する Unicode 文字。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Byte.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.DateTime)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する日時の値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
      <summary>指定した 10 進数値を等価の 8 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する数値。</param>
      <returns>近似値の 8 ビット符号なし整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Byte.MaxValue" /> を超えているか、または <see cref="F:System.Byte.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
      <summary>指定した倍精度浮動小数点数値を等価の 8 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する倍精度浮動小数点数。</param>
      <returns>近似値の 8 ビット符号なし整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Byte.MaxValue" /> を超えているか、または <see cref="F:System.Byte.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
      <summary>指定した 16 ビット符号付き整数の値を等価の 8 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Byte.MinValue" /> より小さいか <see cref="F:System.Byte.MaxValue" /> より大きいです。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
      <summary>指定した 32 ビット符号付き整数の値を等価の 8 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Byte.MinValue" /> より小さいか <see cref="F:System.Byte.MaxValue" /> より大きいです。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
      <summary>指定した 64 ビット符号付き整数の値を等価の 8 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Byte.MinValue" /> より小さいか <see cref="F:System.Byte.MaxValue" /> より大きいです。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
      <summary>指定したオブジェクトの値を 8 ビット符号なし整数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクトか、または <see langword="null" />。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号なし整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が <see cref="T:System.Byte" /> 値のプロパティの形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> を実装していません。

または -
<paramref name="value" /> から <see cref="T:System.Byte" /> 型への変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Byte.MinValue" /> 未満の数値か、<see cref="F:System.Byte.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定したオブジェクトの値を 8 ビット符号なし整数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号なし整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が <see cref="T:System.Byte" /> 値のプロパティの形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> を実装していません。

または -
<paramref name="value" /> から <see cref="T:System.Byte" /> 型への変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Byte.MinValue" /> 未満の数値か、<see cref="F:System.Byte.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
      <summary>指定した 8 ビット符号付き整数の値を等価の 8 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 8 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Byte.MinValue" /> より小さい値です。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
      <summary>指定した単精度浮動小数点数値を等価の 8 ビット符号なし整数に変換します。</summary>
      <param name="value">単精度浮動小数点数。</param>
      <returns>近似値の 8 ビット符号なし整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Byte.MaxValue" /> を超えているか、または <see cref="F:System.Byte.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
      <summary>指定した数値の文字列形式を等価の 8 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号なし整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、オプションの符号とそれに続く数字 (0 ～ 9) のシーケンスで構成されていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Byte.MinValue" /> 未満の数値か、<see cref="F:System.Byte.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した数値の文字列形式を等価の 8 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号なし整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、オプションの符号とそれに続く数字 (0 ～ 9) のシーケンスで構成されていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Byte.MinValue" /> 未満の数値か、<see cref="F:System.Byte.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
      <summary>指定した基数での数値の文字列形式を、等価の 8 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="fromBase">
        <paramref name="value" /> 内の数値の基数。これは 2、8、10、または 16 である必要があります。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 8 ビット符号なし整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> が 2、8、10、16 のどれでもありません。

または -
<paramref name="value" /> は 10 進法でない符号なし数値を表しますが、前に負の符号が付いています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> が <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> に、<paramref name="fromBase" /> で指定された進法では使用できない数字である文字が含まれています。 <paramref name="value" /> 内の最初の文字が正しくない場合は、例外メッセージは、変換する数字がないことを示します。それ以外の場合は、このメッセージは、<paramref name="value" /> に正しくない末尾文字が含まれていることを示します。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は、10 進法の符号なし数値を表しますが、前に負の符号が付いています。

または -
<paramref name="value" /> は <see cref="F:System.Byte.MinValue" /> 未満の数値か、<see cref="F:System.Byte.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
      <summary>指定した 16 ビット符号なし整数の値を等価の 8 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Byte.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
      <summary>指定した 32 ビット符号なし整数の値を等価の 8 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Byte.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
      <summary>指定した 64 ビット符号なし整数の値を等価の 8 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Byte.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Boolean)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換するブール値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
      <summary>指定した 8 ビット符号なし整数の値を等価の Unicode 文字に変換します。</summary>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の Unicode 文字。</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Char)">
      <summary>指定した Unicode 文字値を返します。実際の変換は実行されません。</summary>
      <param name="value">返される Unicode 文字。</param>
      <returns>
        <paramref name="value" /> は変更されずに返されます。</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.DateTime)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する日時の値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Decimal)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する 10 進数。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Double)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する倍精度浮動小数点数。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
      <summary>指定した 16 ビット符号付き整数の値を等価の Unicode 文字に変換します。</summary>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の Unicode 文字。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Char.MinValue" /> より小さい値です。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
      <summary>指定した 32 ビット符号付き整数の値を等価の Unicode 文字に変換します。</summary>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の Unicode 文字。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Char.MinValue" /> より小さいか <see cref="F:System.Char.MaxValue" /> より大きいです。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
      <summary>指定した 64 ビット符号付き整数の値を等価の Unicode 文字に変換します。</summary>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の Unicode 文字。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Char.MinValue" /> より小さいか <see cref="F:System.Char.MaxValue" /> より大きいです。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
      <summary>指定したオブジェクトの値を Unicode 文字に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <returns>value と等価の Unicode 文字。<see cref="F:System.Char.MinValue" /> が <paramref name="value" /> の場合は、<see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null 文字列です。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
<see cref="T:System.Char" /> への <paramref name="value" /> の変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Char.MinValue" /> より小さいか <see cref="F:System.Char.MaxValue" /> より大きいです。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
      <summary>指定したカルチャ固有の書式情報を使用して、指定したオブジェクトの値を、それと等しい Unicode 文字に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> と等しい Unicode 文字。<paramref name="value" /> が <see langword="null" /> の場合は、<see cref="F:System.Char.MinValue" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は null 文字列です。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
<see cref="T:System.Char" /> への <paramref name="value" /> の変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Char.MinValue" /> より小さいか <see cref="F:System.Char.MaxValue" /> より大きいです。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
      <summary>指定した 8 ビット符号付き整数の値を等価の Unicode 文字に変換します。</summary>
      <param name="value">変換する 8 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の Unicode 文字。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Char.MinValue" /> より小さい値です。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Single)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する単精度浮動小数点数。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
      <summary>指定した文字列の 1 番目の文字を Unicode 文字に変換します。</summary>
      <param name="value">長さ 1 の文字列。</param>
      <returns>
        <paramref name="value" /> の唯一の文字、つまり 1 番目の文字と等価の Unicode 文字。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> の長さが 1 ではありません。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した文字列の 1 番目の文字を Unicode 文字に変換します。</summary>
      <param name="value">長さ 1 の文字列または <see langword="null" />。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。 このパラメーターは無視されます。</param>
      <returns>
        <paramref name="value" /> の唯一の文字、つまり 1 番目の文字と等価の Unicode 文字。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> の長さが 1 ではありません。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
      <summary>指定した 16 ビット符号なし整数の値を等価の Unicode 文字に変換します。</summary>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の Unicode 文字。</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
      <summary>指定した 32 ビット符号なし整数の値を等価の Unicode 文字に変換します。</summary>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の Unicode 文字。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Char.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
      <summary>指定した 64 ビット符号なし整数の値を等価の Unicode 文字に変換します。</summary>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の Unicode 文字。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Char.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Boolean)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換するブール値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Byte)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Char)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する Unicode 文字。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.DateTime)">
      <summary>指定した <see cref="T:System.DateTime" /> オブジェクトを返します。実際の変換は行われません。</summary>
      <param name="value">日付と時刻の値。</param>
      <returns>
        <paramref name="value" /> は変更されずに返されます。</returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Decimal)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する数値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Double)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する倍精度浮動小数点値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int16)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int32)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int64)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
      <summary>指定したオブジェクトの値を <see cref="T:System.DateTime" /> オブジェクトに変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクトか、または <see langword="null" />。</param>
      <returns>
        <paramref name="value" /> の値と等価の日付と時刻。<see cref="F:System.DateTime.MinValue" /> が <paramref name="value" /> の場合は、<see langword="null" /> と等価の日付と時刻。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は有効な日付と時刻の値ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定したオブジェクトの値を <see cref="T:System.DateTime" /> オブジェクトに変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の値と等価の日付と時刻。<paramref name="value" /> が <see langword="null" />の場合は、<see cref="F:System.DateTime.MinValue" /> と等価の日付と時刻。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は有効な日付と時刻の値ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.SByte)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する 8 ビット符号付き整数。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Single)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する単精度浮動小数点値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
      <summary>指定した日付と時刻の文字列形式を等価の日付と時刻の値に変換します。</summary>
      <param name="value">日付と時刻の文字列形式。</param>
      <returns>
        <paramref name="value" /> の値と等価の日付と時刻。<paramref name="value" /> が <see langword="null" />の場合は、<see cref="F:System.DateTime.MinValue" /> と等価の日付と時刻。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が、適切に書式設定された日付と時刻の文字列ではありません。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した数値の文字列形式を等価な日付と時刻に変換します。</summary>
      <param name="value">変換する日時を含む文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の値と等価の日付と時刻。<paramref name="value" /> が <see langword="null" />の場合は、<see cref="F:System.DateTime.MinValue" /> と等価の日付と時刻。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が、適切に書式設定された日付と時刻の文字列ではありません。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt16)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt32)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt64)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
      <summary>指定したブール値を等価の 10 進数に変換します。</summary>
      <param name="value">変換するブール値。</param>
      <returns>
        <paramref name="value" /> が <see langword="true" /> の場合は数値の 1。それ以外の場合は 0。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
      <summary>指定した 8 ビット符号なし整数の値を等価の 10 進数に変換します。</summary>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 10 進数。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Char)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する Unicode 文字。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.DateTime)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する日時の値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
      <summary>指定した 10 進数を返します。実際の変換は行われません。</summary>
      <param name="value">10 進数。</param>
      <returns>
        <paramref name="value" /> は変更されずに返されます。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
      <summary>指定した倍精度浮動小数点数値を等価の 10 進数に変換します。</summary>
      <param name="value">変換する倍精度浮動小数点数。</param>
      <returns>
        <paramref name="value" /> と等しい 10 進数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Decimal.MaxValue" /> を超えているか、または <see cref="F:System.Decimal.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
      <summary>指定した 16 ビット符号付き整数の値を等価の 10 進数に変換します。</summary>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等しい 10 進数。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
      <summary>指定した 32 ビット符号付き整数の値を等価の 10 進数に変換します。</summary>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等しい 10 進数。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
      <summary>指定した 64 ビット符号付き整数の値を等価の 10 進数に変換します。</summary>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等しい 10 進数。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
      <summary>指定したオブジェクトの値を等価の 10 進数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクトか、または <see langword="null" />。</param>
      <returns>
        <paramref name="value" /> と等価の 10 進数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は <see cref="T:System.Decimal" /> 型の適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Decimal.MinValue" /> 未満の数値か、<see cref="F:System.Decimal.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定したオブジェクトの値を等価の 10 進数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> と等価の 10 進数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は <see cref="T:System.Decimal" /> 型の適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Decimal.MinValue" /> 未満の数値か、<see cref="F:System.Decimal.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
      <summary>指定した 8 ビット符号付き整数の値を等価の 10 進数に変換します。</summary>
      <param name="value">変換する 8 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等しい 10 進数。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
      <summary>指定した単精度浮動小数点数値を等価の 10 進数に変換します。</summary>
      <param name="value">変換する単精度浮動小数点数。</param>
      <returns>
        <paramref name="value" /> と等しい 10 進数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Decimal.MaxValue" /> を超えているか、または <see cref="F:System.Decimal.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
      <summary>指定した数値の文字列形式を等価の 10 進数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 10 進数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は有効な形式の数値ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Decimal.MinValue" /> 未満の数値か、<see cref="F:System.Decimal.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した数値の文字列形式を等価の 10 進数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 10 進数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は有効な形式の数値ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Decimal.MinValue" /> 未満の数値か、<see cref="F:System.Decimal.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
      <summary>指定した 16 ビット符号なし整数の値を等価の 10 進数に変換します。</summary>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 10 進数。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
      <summary>指定した 32 ビット符号なし整数の値を等価の 10 進数に変換します。</summary>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等しい 10 進数。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
      <summary>指定した 64 ビット符号なし整数の値を等価の 10 進数に変換します。</summary>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等しい 10 進数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
      <summary>指定したブール値を等価の倍精度浮動小数点数に変換します。</summary>
      <param name="value">変換するブール値。</param>
      <returns>
        <paramref name="value" /> が <see langword="true" /> の場合は数値の 1。それ以外の場合は 0。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
      <summary>指定した 8 ビット符号なし整数の値を等価の倍精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の倍精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Char)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する Unicode 文字。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.DateTime)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する日時の値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
      <summary>指定した 10 進数値を等価の倍精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 10 進数。</param>
      <returns>
        <paramref name="value" /> と等価の倍精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
      <summary>指定した倍精度浮動小数点数を返します。実際の変換は行われません。</summary>
      <param name="value">返される倍精度浮動小数点数。</param>
      <returns>
        <paramref name="value" /> は変更されずに返されます。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
      <summary>指定した 16 ビット符号付き整数の値を等価の倍精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の倍精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
      <summary>指定した 32 ビット符号付き整数の値を等価の倍精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の倍精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
      <summary>指定した 64 ビット符号付き整数の値を等価の倍精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の倍精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
      <summary>指定したオブジェクトの値を倍精度浮動小数点数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクトか、または <see langword="null" />。</param>
      <returns>
        <paramref name="value" /> と等価の倍精度浮動小数点数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は <see cref="T:System.Double" /> 型の適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Double.MinValue" /> 未満の数値か、<see cref="F:System.Double.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定したオブジェクトの値を倍精度浮動小数点数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> と等価の倍精度浮動小数点数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は <see cref="T:System.Double" /> 型の適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Double.MinValue" /> 未満の数値か、<see cref="F:System.Double.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
      <summary>指定した 8 ビット符号付き整数の値を等価の倍精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 8 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
      <summary>指定した単精度浮動小数点数値を等価の倍精度浮動小数点数に変換します。</summary>
      <param name="value">単精度浮動小数点数。</param>
      <returns>
        <paramref name="value" /> と等価の倍精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
      <summary>指定した数値の文字列形式を等価の倍精度浮動小数点数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <returns>
        <paramref name="value" /> の数値と等価の倍精度浮動小数点数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は有効な形式の数値ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Double.MinValue" /> 未満の数値か、<see cref="F:System.Double.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した数値の文字列形式を等価の倍精度浮動小数点数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の数値と等価の倍精度浮動小数点数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は有効な形式の数値ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Double.MinValue" /> 未満の数値か、<see cref="F:System.Double.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
      <summary>指定した 16 ビット符号なし整数の値を等価の倍精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の倍精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
      <summary>指定した 32 ビット符号なし整数の値を等価の倍精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の倍精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
      <summary>指定した 64 ビット符号なし整数の値を等価の倍精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の倍精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
      <summary>指定したブール値を等価の 16 ビット符号付き整数に変換します。</summary>
      <param name="value">変換するブール値。</param>
      <returns>
        <paramref name="value" /> が <see langword="true" /> の場合は数値の 1。それ以外の場合は 0。</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
      <summary>指定した 8 ビット符号なし整数の値を等価の 16 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
      <summary>指定した Unicode 文字の値を等価の 16 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する Unicode 文字。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Int16.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.DateTime)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する日時の値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
      <summary>指定した 10 進数値を等価の 16 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 10 進数。</param>
      <returns>近似値の 16 ビット符号付き整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int16.MaxValue" /> を超えているか、または <see cref="F:System.Int16.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
      <summary>指定された倍精度浮動小数点数値を等価の 16 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する倍精度浮動小数点数。</param>
      <returns>近似値の 16 ビット符号付き整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int16.MaxValue" /> を超えているか、または <see cref="F:System.Int16.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
      <summary>指定した 16 ビット符号付き整数が返されます。実際の変換は行われません。</summary>
      <param name="value">返される 16 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> は変更されずに返されます。</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
      <summary>指定した 32 ビット符号付き整数の値を等価の 16 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int16.MaxValue" /> を超えているか、または <see cref="F:System.Int16.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
      <summary>指定された 64 ビット符号付き整数の値を等価の 16 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int16.MaxValue" /> を超えているか、または <see cref="F:System.Int16.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
      <summary>指定したオブジェクトの値を 16 ビット符号付き整数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクトか、または <see langword="null" />。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は <see cref="T:System.Int16" /> 型の適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int16.MinValue" /> 未満の数値か、<see cref="F:System.Int16.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定したオブジェクトの値を 16 ビット符号付き整数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は <see cref="T:System.Int16" /> 型の適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> は <see cref="T:System.IConvertible" />を実装していません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int16.MinValue" /> 未満の数値か、<see cref="F:System.Int16.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
      <summary>指定した 8 ビット符号付き整数の値を等価の 16 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 8 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
      <summary>指定した単精度浮動小数点数の値を等価の 16 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する単精度浮動小数点数。</param>
      <returns>近似値の 16 ビット符号付き整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int16.MaxValue" /> を超えているか、または <see cref="F:System.Int16.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
      <summary>数値の指定した文字列形式を等価の 16 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 16 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、オプションの符号とそれに続く数字 (0 ～ 9) のシーケンスで構成されていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int16.MinValue" /> 未満の数値か、<see cref="F:System.Int16.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した数値の文字列形式を等価の 16 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 16 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、オプションの符号とそれに続く数字 (0 ～ 9) のシーケンスで構成されていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int16.MinValue" /> 未満の数値か、<see cref="F:System.Int16.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
      <summary>指定した基数での数値の文字列形式を、等価の 16 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="fromBase">
        <paramref name="value" /> 内の数値の基数。これは 2、8、10、または 16 である必要があります。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 16 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> が 2、8、10、16 のどれでもありません。

または -
<paramref name="value" /> は非 10 進法符号付き数値を表しますが、前に負の符号が付いています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> が <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> に、<paramref name="fromBase" /> で指定された進法では使用できない数字である文字が含まれています。 <paramref name="value" /> 内の最初の文字が正しくない場合は、例外メッセージは、変換する数字がないことを示します。それ以外の場合は、このメッセージは、<paramref name="value" /> に正しくない末尾文字が含まれていることを示します。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />は 10 進法でない符号付き数値を表しますが、前に負の符号が付いています。

または -
<paramref name="value" /> は <see cref="F:System.Int16.MinValue" /> 未満の数値か、<see cref="F:System.Int16.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
      <summary>指定した 16 ビット符号なし整数の値を等価の 16 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Int16.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
      <summary>指定した 32 ビット符号なし整数の値を等価の 16 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Int16.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
      <summary>指定した 64 ビット符号なし整数の値を等価の 16 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Int16.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
      <summary>指定したブール値を等価の 32 ビット符号付き整数に変換します。</summary>
      <param name="value">変換するブール値。</param>
      <returns>
        <paramref name="value" /> が <see langword="true" /> の場合は数値の 1。それ以外の場合は 0。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
      <summary>指定した 8 ビット符号なし整数の値を等価の 32 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
      <summary>指定した Unicode 文字の値を等価の 32 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する Unicode 文字。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.DateTime)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する日時の値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
      <summary>指定した 10 進数値を等価の 32 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 10 進数。</param>
      <returns>最も近い 32 ビット符号付き整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int32.MaxValue" /> を超えているか、または <see cref="F:System.Int32.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
      <summary>指定した倍精度浮動小数点数値を等価の 32 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する倍精度浮動小数点数。</param>
      <returns>最も近い 32 ビット符号付き整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int32.MaxValue" /> を超えているか、または <see cref="F:System.Int32.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
      <summary>指定した 16 ビット符号付き整数の値を等価の 32 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
      <summary>指定した 32 ビット符号付き整数が返されます。実際の変換は実行されません。</summary>
      <param name="value">返される 32 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> は変更されずに返されます。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
      <summary>指定した 64 ビット符号付き整数の値を等価の 32 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int32.MaxValue" /> を超えているか、または <see cref="F:System.Int32.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
      <summary>指定したオブジェクトの値を 32 ビット符号付き整数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクトか、または <see langword="null" />。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> は <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int32.MinValue" /> 未満の数値か、<see cref="F:System.Int32.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定したオブジェクトの値を 32 ビット符号付き整数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> を実装していません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int32.MinValue" /> 未満の数値か、<see cref="F:System.Int32.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
      <summary>指定した 8 ビット符号付き整数の値を等価の 32 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 8 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
      <summary>指定した単精度浮動小数点数の値を等価の 32 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する単精度浮動小数点数。</param>
      <returns>最も近い 32 ビット符号付き整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int32.MaxValue" /> を超えているか、または <see cref="F:System.Int32.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
      <summary>指定した数値の文字列形式を等価の 32 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 32 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、オプションの符号とそれに続く数字 (0 ～ 9) のシーケンスで構成されていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int32.MinValue" /> 未満の数値か、<see cref="F:System.Int32.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した数値の文字列形式を等価の 32 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 32 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、オプションの符号とそれに続く数字 (0 ～ 9) のシーケンスで構成されていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int32.MinValue" /> 未満の数値か、<see cref="F:System.Int32.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
      <summary>指定した基数での数値の文字列形式を、等価の 32 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="fromBase">
        <paramref name="value" /> 内の数値の基数。これは 2、8、10、または 16 である必要があります。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 32 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> が 2、8、10、16 のどれでもありません。

または -
<paramref name="value" /> は非 10 進法符号付き数値を表しますが、前に負の符号が付いています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> が <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> に、<paramref name="fromBase" /> で指定された進法では使用できない数字である文字が含まれています。 <paramref name="value" /> 内の最初の文字が正しくない場合は、例外メッセージは、変換する数字がないことを示します。それ以外の場合は、このメッセージは、<paramref name="value" /> に正しくない末尾文字が含まれていることを示します。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />は 10 進法でない符号付き数値を表しますが、前に負の符号が付いています。

または -
<paramref name="value" /> は <see cref="F:System.Int32.MinValue" /> 未満の数値か、<see cref="F:System.Int32.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
      <summary>指定した 16 ビット符号なし整数の値を等価の 32 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
      <summary>指定した 32 ビット符号なし整数の値を等価の 32 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
      <summary>指定した 64 ビット符号なし整数の値を等価の 32 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
      <summary>指定したブール値を等価の 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換するブール値。</param>
      <returns>
        <paramref name="value" /> が <see langword="true" /> の場合は数値の 1。それ以外の場合は 0。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
      <summary>指定した 8 ビット符号なし整数の値を等価の 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
      <summary>指定した Unicode 文字の値を等価の 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する Unicode 文字。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.DateTime)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する日時の値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
      <summary>指定した 10 進数値を等価の 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 10 進数。</param>
      <returns>近似値の 64 ビット符号付き整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int64.MaxValue" /> を超えているか、または <see cref="F:System.Int64.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
      <summary>指定した倍精度浮動小数点数値を等価の 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する倍精度浮動小数点数。</param>
      <returns>近似値の 64 ビット符号付き整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int64.MaxValue" /> を超えているか、または <see cref="F:System.Int64.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
      <summary>指定した 16 ビット符号付き整数の値を等価の 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
      <summary>指定した 32 ビット符号付き整数の値を等価の 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
      <summary>指定した 64 ビット符号付き整数が返されます。実際の変換は行実行されません。</summary>
      <param name="value">64 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> は変更されずに返されます。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
      <summary>指定したオブジェクトの値を 64 ビット符号付き整数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクトか、または <see langword="null" />。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int64.MinValue" /> 未満の数値か、<see cref="F:System.Int64.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
      <summary>指定したカルチャ固有の書式情報を使用して、指定したオブジェクトの値を 64 ビット符号付き整数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int64.MinValue" /> 未満の数値か、<see cref="F:System.Int64.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
      <summary>指定した 8 ビット符号付き整数の値を等価の 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 8 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
      <summary>指定した単精度浮動小数点数の値を等価の 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する単精度浮動小数点数。</param>
      <returns>近似値の 64 ビット符号付き整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int64.MaxValue" /> を超えているか、または <see cref="F:System.Int64.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
      <summary>指定した数値の文字列形式を等価の 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 64 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、オプションの符号とそれに続く数字 (0 ～ 9) のシーケンスで構成されていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int64.MinValue" /> 未満の数値か、<see cref="F:System.Int64.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した数値の文字列形式を等価の 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 64 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、オプションの符号とそれに続く数字 (0 ～ 9) のシーケンスで構成されていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Int64.MinValue" /> 未満の数値か、<see cref="F:System.Int64.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
      <summary>指定した基数での数値の文字列形式を、等価の 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="fromBase">
        <paramref name="value" /> 内の数値の基数。これは 2、8、10、または 16 である必要があります。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 64 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> が 2、8、10、16 のどれでもありません。

または -
<paramref name="value" /> は非 10 進法符号付き数値を表しますが、前に負の符号が付いています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> が <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> に、<paramref name="fromBase" /> で指定された進法では使用できない数字である文字が含まれています。 <paramref name="value" /> 内の最初の文字が正しくない場合は、例外メッセージは、変換する数字がないことを示します。それ以外の場合は、このメッセージは、<paramref name="value" /> に正しくない末尾文字が含まれていることを示します。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />は 10 進法でない符号付き数値を表しますが、前に負の符号が付いています。

または -
<paramref name="value" /> は <see cref="F:System.Int64.MinValue" /> 未満の数値か、<see cref="F:System.Int64.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
      <summary>指定した 16 ビット符号なし整数の値を等価の 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
      <summary>指定した 32 ビット符号なし整数の値を等価の 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
      <summary>指定した 64 ビット符号なし整数の値を等価の 64 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.Int64.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
      <summary>指定したブール値を等価の 8 ビット符号付き整数に変換します。</summary>
      <param name="value">変換するブール値。</param>
      <returns>
        <paramref name="value" /> が <see langword="true" /> の場合は数値の 1。それ以外の場合は 0。</returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
      <summary>指定した 8 ビット符号なし整数の値を等価の 8 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.SByte.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
      <summary>指定した Unicode 文字の値を等価の 8 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する Unicode 文字。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.SByte.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.DateTime)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する日時の値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
      <summary>指定した 10 進数値を等価の 8 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 10 進数。</param>
      <returns>近似値の 8 ビット符号付き整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.SByte.MaxValue" /> を超えているか、または <see cref="F:System.SByte.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
      <summary>指定した倍精度浮動小数点数値を等価の 8 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する倍精度浮動小数点数。</param>
      <returns>近似値の 8 ビット符号付き整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.SByte.MaxValue" /> を超えているか、または <see cref="F:System.SByte.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
      <summary>指定した 16 ビット符号付き整数の値を等価の 8 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.SByte.MaxValue" /> を超えているか、または <see cref="F:System.SByte.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
      <summary>指定した 32 ビット符号付き整数の値を、それと等しい 8 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.SByte.MaxValue" /> を超えているか、または <see cref="F:System.SByte.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
      <summary>指定した 64 ビット符号付き整数の値を等価の 8 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.SByte.MaxValue" /> を超えているか、または <see cref="F:System.SByte.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
      <summary>指定したオブジェクトの値を 8 ビット符号付き整数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクトか、または <see langword="null" />。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.SByte.MinValue" /> 未満の数値か、<see cref="F:System.SByte.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定したオブジェクトの値を 8 ビット符号付き整数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.SByte.MinValue" /> 未満の数値か、<see cref="F:System.SByte.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
      <summary>指定した 8 ビット符号付き整数が返されます。実際の変換は行われません。</summary>
      <param name="value">返される 8 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> は変更されずに返されます。</returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
      <summary>指定した単精度浮動小数点数の値を等価の 8 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する単精度浮動小数点数。</param>
      <returns>近似値の 8 ビット符号付き整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.SByte.MaxValue" /> を超えているか、または <see cref="F:System.SByte.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
      <summary>指定した数値の文字列形式を等価の 8 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 8 ビット符号付き整数。value が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、オプションの符号とそれに続く数字 (0 ～ 9) のシーケンスで構成されていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.SByte.MinValue" /> 未満の数値か、<see cref="F:System.SByte.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した数値の文字列形式を等価の 8 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号付き整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、オプションの符号とそれに続く数字 (0 ～ 9) のシーケンスで構成されていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.SByte.MinValue" /> 未満の数値か、<see cref="F:System.SByte.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
      <summary>指定した基数での数値の文字列形式を、等価の 8 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="fromBase">
        <paramref name="value" /> 内の数値の基数。これは 2、8、10、または 16 である必要があります。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 8 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> が 2、8、10、16 のどれでもありません。

または -
<paramref name="value" /> は非 10 進法符号付き数値を表しますが、前に負の符号が付いています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> が <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> に、<paramref name="fromBase" /> で指定された進法では使用できない数字である文字が含まれています。 <paramref name="value" /> 内の最初の文字が正しくない場合は、例外メッセージは、変換する数字がないことを示します。それ以外の場合は、このメッセージは、<paramref name="value" /> に正しくない末尾文字が含まれていることを示します。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />は 10 進法でない符号付き数値を表しますが、前に負の符号が付いています。

または -
<paramref name="value" /> は <see cref="F:System.SByte.MinValue" /> 未満の数値か、<see cref="F:System.SByte.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
      <summary>指定した 16 ビット符号なし整数の値を等価の 8 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.SByte.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
      <summary>指定した 32 ビット符号なし整数の値を等価の 8 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.SByte.MaxValue" /> を超えているか、または <see cref="F:System.SByte.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
      <summary>指定した 64 ビット符号なし整数の値を等価の 8 ビット符号付き整数に変換します。</summary>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号付き整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.SByte.MaxValue" /> を超えているか、または <see cref="F:System.SByte.MinValue" /> 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
      <summary>指定したブール値を等価の単精度浮動小数点数に変換します。</summary>
      <param name="value">変換するブール値。</param>
      <returns>
        <paramref name="value" /> が <see langword="true" /> の場合は数値の 1。それ以外の場合は 0。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
      <summary>指定した 8 ビット符号なし整数の値を等価の単精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の単精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Char)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する Unicode 文字。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.DateTime)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する日時の値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
      <summary>指定した 10 進数値を等価の単精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 10 進数。</param>
      <returns>
        <paramref name="value" /> と等価の単精度浮動小数点数。
<paramref name="value" /> は近似値に丸められます。 たとえば、小数点以下 2 桁に丸められる場合、値 2.345 は 2.34 になり、値 2.355 は 2.36 になります。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
      <summary>指定した倍精度浮動小数点数値を等価の単精度浮動小数点数に変換します。</summary>
      <param name="value">変換する倍精度浮動小数点数。</param>
      <returns>
        <paramref name="value" /> と等価の単精度浮動小数点数。
<paramref name="value" /> は近似値に丸められます。 たとえば、小数点以下 2 桁に丸められる場合、値 2.345 は 2.34 になり、値 2.355 は 2.36 になります。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
      <summary>指定した 16 ビット符号付き整数の値を等価の単精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の単精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
      <summary>指定した 32 ビット符号付き整数の値を等価の単精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の単精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
      <summary>指定した 64 ビット符号付き整数の値を等価の単精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の単精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
      <summary>指定したオブジェクトの値を単精度浮動小数点数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクトか、または <see langword="null" />。</param>
      <returns>
        <paramref name="value" /> と等価の単精度浮動小数点数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定したオブジェクトの値を単精度浮動小数点数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> と等価の単精度浮動小数点数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> を実装していません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
      <summary>指定した 8 ビット符号付き整数の値を等価の単精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 8 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 8 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
      <summary>指定した単精度浮動小数点数を返します。実際の変換は行われません。</summary>
      <param name="value">返される単精度浮動小数点数。</param>
      <returns>
        <paramref name="value" /> は変更されずに返されます。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
      <summary>指定した数値の文字列形式を等価の単精度浮動小数点数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <returns>
        <paramref name="value" /> の数値と等価の単精度浮動小数点数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は有効な形式の数値ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した数値の文字列形式を等価の単精度浮動小数点数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の数値と等価の単精度浮動小数点数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は有効な形式の数値ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
      <summary>指定された 16 ビット符号なし整数の値を等価の単精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の単精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
      <summary>指定した 32 ビット符号なし整数の値を等価の単精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の単精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
      <summary>指定した 64 ビット符号なし整数の値を等価の単精度浮動小数点数に変換します。</summary>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の単精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
      <summary>指定したブール値を、それと等しい文字列形式に変換します。</summary>
      <param name="value">変換するブール値。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
      <summary>指定したブール値を、それと等しい文字列形式に変換します。</summary>
      <param name="value">変換するブール値。</param>
      <param name="provider">オブジェクトのインスタンス。 このパラメーターは無視されます。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
      <summary>指定した 8 ビット符号なし整数の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した 8 ビット符号なし整数の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
      <summary>8 ビット符号なし整数値を、指定した基数で表される等価な文字列形式に変換します。</summary>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <param name="toBase">戻り値の基数。これは 2、8、10、16 である必要があります。</param>
      <returns>基数 <paramref name="value" /> の <paramref name="toBase" /> の文字列形式。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> が 2、8、10、16 のどれでもありません。</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
      <summary>指定した Unicode 文字の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する Unicode 文字。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した Unicode 文字の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する Unicode 文字。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。 このパラメーターは無視されます。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
      <summary>指定した <see cref="T:System.DateTime" /> の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する日時の値。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した <see cref="T:System.DateTime" /> の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する日時の値。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
      <summary>指定した 10 進数値を、それと等しい文字列形式に変換します。</summary>
      <param name="value">変換する 10 進数。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した 10 進数値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 10 進数。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
      <summary>指定した倍精度浮動小数点数値を等価の文字列形表記に変換します。</summary>
      <param name="value">変換する倍精度浮動小数点数。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
      <summary>指定した倍精度浮動小数点数値を等価の文字列形表記に変換します。</summary>
      <param name="value">変換する倍精度浮動小数点数。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
      <summary>指定した 16 ビット符号付き整数の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した 16 ビット符号付き整数の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
      <summary>16 ビット符号付き整数の値を、指定した基数での等価の文字列形式に変換します。</summary>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <param name="toBase">戻り値の基数。これは 2、8、10、16 である必要があります。</param>
      <returns>基数 <paramref name="value" /> の <paramref name="toBase" /> の文字列形式。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> が 2、8、10、16 のどれでもありません。</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
      <summary>指定した 32 ビット符号付き整数の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した 32 ビット符号付き整数の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
      <summary>32 ビット符号付き整数の値を、指定した基数での等価の文字列形式に変換します。</summary>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <param name="toBase">戻り値の基数。これは 2、8、10、16 である必要があります。</param>
      <returns>基数 <paramref name="value" /> の <paramref name="toBase" /> の文字列形式。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> が 2、8、10、16 のどれでもありません。</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
      <summary>指定した 64 ビット符号付き整数の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した 64 ビット符号付き整数の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
      <summary>64 ビット符号付き整数の値を、指定した基数でそれと等しい文字列形式に変換します。</summary>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <param name="toBase">戻り値の基数。これは 2、8、10、16 である必要があります。</param>
      <returns>基数 <paramref name="value" /> の <paramref name="toBase" /> の文字列形式。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> が 2、8、10、16 のどれでもありません。</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
      <summary>指定したオブジェクトの値を等価の文字列表記に変換します。</summary>
      <param name="value">変換する値を提供するオブジェクト、または <see langword="null" />。</param>
      <returns>
        <paramref name="value" /> の文字列形式。<paramref name="value" /> が <see langword="null" /> の場合は <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
      <summary>指定したカルチャ固有の書式情報を使用して、指定したオブジェクトの値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する値を提供するオブジェクト、または <see langword="null" />。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の文字列表現。または <paramref name="value" /> が <see langword="null" /> という値を持つオブジェクトである場合は <see cref="F:System.String.Empty" />。 <paramref name="value" /> が <see langword="null" /> の場合、メソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
      <summary>指定した 8 ビット符号付き整数の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 8 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した 8 ビット符号付き整数の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 8 ビット符号付き整数。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
      <summary>指定した単精度浮動小数点数値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する単精度浮動小数点数。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した単精度浮動小数点数値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する単精度浮動小数点数。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.String)">
      <summary>指定した文字列インスタンスを返します。実際の変換は実行されません。</summary>
      <param name="value">返される文字列。</param>
      <returns>
        <paramref name="value" /> は変更されずに返されます。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.String,System.IFormatProvider)">
      <summary>指定した文字列インスタンスを返します。実際の変換は実行されません。</summary>
      <param name="value">返される文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。 このパラメーターは無視されます。</param>
      <returns>
        <paramref name="value" /> は変更されずに返されます。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
      <summary>指定した 16 ビット符号なし整数の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した 16 ビット符号なし整数の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
      <summary>指定した 32 ビット符号なし整数の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した 32 ビット符号なし整数の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
      <summary>指定した 64 ビット符号なし整数の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した 64 ビット符号なし整数の値を等価の文字列形式に変換します。</summary>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
      <summary>指定したブール値を等価の 16 ビット符号なし整数に変換します。</summary>
      <param name="value">変換するブール値。</param>
      <returns>
        <paramref name="value" /> が <see langword="true" /> の場合は数値の 1。それ以外の場合は 0。</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
      <summary>指定した 8 ビット符号なし整数の値を等価の 16 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号なし整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
      <summary>指定した Unicode 文字の値を等価の 16 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する Unicode 文字。</param>
      <returns>
        <paramref name="value" /> と等価な 16 ビット符号なし整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.DateTime)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する日時の値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
      <summary>指定した 10 進数値を等価の 16 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 10 進数。</param>
      <returns>近似値の 16 ビット符号なし整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満であるか、<see cref="F:System.UInt16.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
      <summary>指定した倍精度浮動小数点数値を等価の 16 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する倍精度浮動小数点数。</param>
      <returns>近似値の 16 ビット符号なし整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満であるか、<see cref="F:System.UInt16.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
      <summary>指定した 16 ビット符号付き整数の値を等価の 16 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
      <summary>指定した 32 ビット符号付き整数の値を等価の 16 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満であるか、<see cref="F:System.UInt16.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
      <summary>指定した 64 ビット符号付き整数の値を等価の 16 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満であるか、<see cref="F:System.UInt16.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
      <summary>指定したオブジェクトの値を 16 ビット符号なし整数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクトか、または <see langword="null" />。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号なし整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> は <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.UInt16.MinValue" /> 未満の数値か、<see cref="F:System.UInt16.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定したオブジェクトの値を 16 ビット符号なし整数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号なし整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> は <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.UInt16.MinValue" /> 未満の数値か、<see cref="F:System.UInt16.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
      <summary>指定した 8 ビット符号付き整数の値を等価の 16 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 8 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
      <summary>指定した単精度浮動小数点数値を等価の 16 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する単精度浮動小数点数。</param>
      <returns>近似値の 16 ビット符号なし整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満であるか、<see cref="F:System.UInt16.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
      <summary>指定した数値の文字列形式を等価の 16 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 16 ビット符号なし整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、オプションの符号とそれに続く数字 (0 ～ 9) のシーケンスで構成されていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.UInt16.MinValue" /> 未満の数値か、<see cref="F:System.UInt16.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した数値の文字列形式を等価の 16 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 16 ビット符号なし整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、オプションの符号とそれに続く数字 (0 ～ 9) のシーケンスで構成されていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.UInt16.MinValue" /> 未満の数値か、<see cref="F:System.UInt16.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
      <summary>指定した基数での数値の文字列形式を、等価の 16 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="fromBase">
        <paramref name="value" /> 内の数値の基数。これは 2、8、10、または 16 である必要があります。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 16 ビット符号なし整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> が 2、8、10、16 のどれでもありません。

または -
<paramref name="value" /> は 10 進法でない符号なし数値を表しますが、前に負の符号が付いています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> が <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> に、<paramref name="fromBase" /> で指定された進法では使用できない数字である文字が含まれています。 <paramref name="value" /> 内の最初の文字が正しくない場合は、例外メッセージは、変換する数字がないことを示します。それ以外の場合は、このメッセージは、 <paramref name="value" /> に正しくない末尾文字が含まれていることを示します。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />は 10 進法でない符号なし数値を表しますが、前に負の符号が付いています。

または -
<paramref name="value" /> は <see cref="F:System.UInt16.MinValue" /> 未満の数値か、<see cref="F:System.UInt16.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
      <summary>指定した 16 ビット符号なし整数が返されます。実際の変換は行われません。</summary>
      <param name="value">返される 16 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> は変更されずに返されます。</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
      <summary>指定した 32 ビット符号なし整数の値を等価の 16 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.UInt16.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
      <summary>指定した 64 ビット符号なし整数の値を等価の 16 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 16 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.UInt16.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
      <summary>指定されたブール値を等価の 32 ビット符号なし整数に変換します。</summary>
      <param name="value">変換するブール値。</param>
      <returns>
        <paramref name="value" /> が <see langword="true" /> の場合は数値の 1。それ以外の場合は 0。</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
      <summary>指定した 8 ビット符号なし整数の値を等価の 32 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号なし整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
      <summary>指定した Unicode 文字の値を等価の 32 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する Unicode 文字。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号なし整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.DateTime)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する日時の値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
      <summary>指定した 10 進数値を等価の 32 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 10 進数。</param>
      <returns>最も近い 32 ビット符号なし整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満であるか、<see cref="F:System.UInt32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
      <summary>指定した倍精度浮動小数点数値を等価の 32 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する倍精度浮動小数点数。</param>
      <returns>最も近い 32 ビット符号なし整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満であるか、<see cref="F:System.UInt32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
      <summary>指定した 16 ビット符号付き整数の値を等価の 32 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
      <summary>指定した 32 ビット符号付き整数の値を等価の 32 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
      <summary>指定した 64 ビット符号付き整数の値を等価の 32 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満であるか、<see cref="F:System.UInt32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
      <summary>指定したオブジェクトの値を 32 ビット符号なし整数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクトか、または <see langword="null" />。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号なし整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.UInt32.MinValue" /> 未満の数値か、<see cref="F:System.UInt32.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定したオブジェクトの値を 32 ビット符号なし整数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号なし整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.UInt32.MinValue" /> 未満の数値か、<see cref="F:System.UInt32.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
      <summary>指定した 8 ビット符号付き整数の値を等価の 32 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 8 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
      <summary>指定した単精度浮動小数点数値を等価の 32 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する単精度浮動小数点数。</param>
      <returns>最も近い 32 ビット符号なし整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満であるか、<see cref="F:System.UInt32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
      <summary>指定した数値の文字列表記を等価の 32 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 32 ビット符号なし整数。または <paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、オプションの符号とそれに続く数字 (0 ～ 9) のシーケンスで構成されていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.UInt32.MinValue" /> 未満の数値か、<see cref="F:System.UInt32.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した数値の文字列形式を等価の 32 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 32 ビット符号なし整数。または <paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、オプションの符号とそれに続く数字 (0 ～ 9) のシーケンスで構成されていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.UInt32.MinValue" /> 未満の数値か、<see cref="F:System.UInt32.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
      <summary>指定した基数での数値の文字列形式を、等価の 32 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="fromBase">
        <paramref name="value" /> 内の数値の基数。これは 2、8、10、または 16 である必要があります。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 32 ビット符号なし整数。または <paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> が 2、8、10、16 のどれでもありません。

または -
<paramref name="value" /> は 10 進法でない符号なし数値を表しますが、前に負の符号が付いています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> が <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> に、<paramref name="fromBase" /> で指定された進法では使用できない数字である文字が含まれています。 <paramref name="value" /> 内の最初の文字が正しくない場合は、例外メッセージは、変換する数字がないことを示します。それ以外の場合は、このメッセージは、 <paramref name="value" /> に正しくない末尾文字が含まれていることを示します。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />は 10 進法でない符号なし数値を表しますが、前に負の符号が付いています。

または -
<paramref name="value" /> は <see cref="F:System.UInt32.MinValue" /> 未満の数値か、<see cref="F:System.UInt32.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
      <summary>指定した 16 ビット符号なし整数の値を等価の 32 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号なし整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
      <summary>指定した 32 ビット符号なし整数が返されます。実際の変換は行われません。</summary>
      <param name="value">返される 32 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> は変更されずに返されます。</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
      <summary>指定した 64 ビット符号なし整数の値を等価の 32 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 64 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 32 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が <see cref="F:System.UInt32.MaxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
      <summary>指定したブール値を等価の 64 ビット符号なし整数に変換します。</summary>
      <param name="value">変換するブール値。</param>
      <returns>
        <paramref name="value" /> が <see langword="true" /> の場合は数値の 1。それ以外の場合は 0。</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
      <summary>指定した 8 ビット符号なし整数の値を等価の 64 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 8 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
      <summary>指定した Unicode 文字の値を等価の 64 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する Unicode 文字。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号なし整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.DateTime)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.InvalidCastException" /> がスローされます。</summary>
      <param name="value">変換する日時の値。</param>
      <returns>この変換はサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
      <summary>指定した 10 進数値を等価の 64 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 10 進数。</param>
      <returns>近似値の 64 ビット符号なし整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満であるか、<see cref="F:System.UInt64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
      <summary>指定した倍精度浮動小数点数値を等価の 64 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する倍精度浮動小数点数。</param>
      <returns>近似値の 64 ビット符号なし整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満であるか、<see cref="F:System.UInt64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
      <summary>指定した 16 ビット符号付き整数の値を等価の 64 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 16 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
      <summary>指定した 32 ビット符号付き整数の値を等価の 64 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 32 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
      <summary>指定した 64 ビット符号付き整数の値を等価の 64 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 64 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
      <summary>指定したオブジェクトの値を 64 ビット符号なし整数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクトか、または <see langword="null" />。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号なし整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.UInt64.MinValue" /> 未満の数値か、<see cref="F:System.UInt64.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定したオブジェクトの値を 64 ビット符号なし整数に変換します。</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> インターフェイスを実装するオブジェクト。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号なし整数。<paramref name="value" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> が適切な形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> が <see cref="T:System.IConvertible" /> インターフェイスを実装していません。

または -
この変換はサポートされていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.UInt64.MinValue" /> 未満の数値か、<see cref="F:System.UInt64.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
      <summary>指定した 8 ビット符号付き整数の値を等価の 64 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 8 ビット符号付き整数。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号なし整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
      <summary>指定した単精度浮動小数点数値を等価の 64 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する単精度浮動小数点数。</param>
      <returns>近似値の 64 ビット符号なし整数に丸められた <paramref name="value" />。 <paramref name="value" /> が 2 つの整数のちょうど中間にある場合は、偶数が返されます。つまり、4.5 は 4 に変換され、5.5 は 6 に変換されます。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> が 0 未満であるか、<see cref="F:System.UInt64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
      <summary>指定した数値の文字列形式を等価の 64 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 64 ビット符号付き整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、オプションの符号とそれに続く数字 (0 ～ 9) のシーケンスで構成されていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.UInt64.MinValue" /> 未満の数値か、<see cref="F:System.UInt64.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
      <summary>指定したカルチャに固有の書式情報を使用して、指定した数値の文字列形式を等価の 64 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 64 ビット符号なし整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、オプションの符号とそれに続く数字 (0 ～ 9) のシーケンスで構成されていません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> は <see cref="F:System.UInt64.MinValue" /> 未満の数値か、<see cref="F:System.UInt64.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
      <summary>指定した基数での数値の文字列形式を、等価の 64 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する数値を含んだ文字列。</param>
      <param name="fromBase">
        <paramref name="value" /> 内の数値の基数。これは 2、8、10、または 16 である必要があります。</param>
      <returns>
        <paramref name="value" /> の数値と等価の 64 ビット符号なし整数。<paramref name="value" /> が <see langword="null" /> の場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> が 2、8、10、16 のどれでもありません。

または -
<paramref name="value" /> は 10 進法でない符号なし数値を表しますが、前に負の符号が付いています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> が <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> に、<paramref name="fromBase" /> で指定された進法では使用できない数字である文字が含まれています。 <paramref name="value" /> 内の最初の文字が正しくない場合は、例外メッセージは、変換する数字がないことを示します。それ以外の場合は、このメッセージは、 <paramref name="value" /> に正しくない末尾文字が含まれていることを示します。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />は 10 進法でない符号なし数値を表しますが、前に負の符号が付いています。

または -
<paramref name="value" /> は <see cref="F:System.UInt64.MinValue" /> 未満の数値か、<see cref="F:System.UInt64.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
      <summary>指定した 16 ビット符号なし整数の値を等価の 64 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 16 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号なし整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
      <summary>指定した 32 ビット符号なし整数の値を等価の 64 ビット符号なし整数に変換します。</summary>
      <param name="value">変換する 32 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> と等価の 64 ビット符号なし整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
      <summary>指定した 64 ビット符号なし整数が返されます。実際の変換は行われません。</summary>
      <param name="value">返される 64 ビット符号なし整数。</param>
      <returns>
        <paramref name="value" /> は変更されずに返されます。</returns>
    </member>
    <member name="M:System.Convert.TryFromBase64Chars(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)">
      <summary>Base 64 の数字でエンコードされた文字列形式を含む指定されたスパンを、8 ビット符号なし整数のスパンに変換しようとします。</summary>
      <param name="chars">Base 64 の数字でエンコードされた文字列表現を含むスパン。</param>
      <param name="bytes">このメソッドから <see langword="true" /> が返される場合、変換された 8 ビット符号なし整数。 このメソッドから <see langword="false" /> が返される場合、スパンが変更されていないか、最後の有効な文字までの <paramref name="chars" /> の不完全な変換が含まれています。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="bytes" /> に書き込まれたバイト数。</param>
      <returns>変換が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.TryFromBase64String(System.String,System.Span{System.Byte},System.Int32@)">
      <summary>Base 64 の数字でエンコードされた指定された文字列形式を、8 ビット符号なし整数のスパンに変換しようとします。</summary>
      <param name="s">Base 64 の数字でエンコードされた文字列形式。</param>
      <param name="bytes">このメソッドから <see langword="true" /> が返される場合、変換された 8 ビット符号なし整数。 このメソッドから <see langword="false" /> が返される場合、スパンが変更されていないか、最後の有効な文字までの <paramref name="s" /> の不完全な変換が含まれています。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="bytes" /> に書き込まれたバイト数。</param>
      <returns>変換が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Convert.TryToBase64Chars(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@,System.Base64FormattingOptions)">
      <summary>指定した読み取り専用スパン内の 8 ビット符号なし整数を、それと等価な、Base 64 の数字でエンコードされた文字列形式に変換しようとします。 必要に応じて、戻り値に改行を挿入するかどうかを指定できます。</summary>
      <param name="bytes">8 ビット符号なし整数の読み取り専用スパン。</param>
      <param name="chars">このメソッドから <see langword="true" /> が返される場合、<paramref name="bytes" /> 内の要素の Base 64 での文字列形式を格納しているスパン。 <paramref name="bytes" /> の長さが 0 の場合、またはこのメソッドから <paramref name="false" /> が返される場合、このパラメーターには何も書き込まれません。</param>
      <param name="charsWritten">このメソッドから制御が戻るときは、<paramref name="chars" /> に書き込まれた文字数の合計。</param>
      <param name="options">戻り値に改行を挿入するかどうかを指定する列挙値の 1 つ。 既定値は <see cref="F:System.Base64FormattingOptions.None" /> です。</param>
      <returns>変換が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> は有効な <see cref="T:System.Base64FormattingOptions" /> 値ではありません。</exception>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>経過時間を正確に計測するために使用できる一連のメソッドとプロパティを提供します。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.Stopwatch" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>現在のインスタンスで計測された経過時間の合計を取得します。</summary>
      <returns>現在のインスタンスで計測された経過時間の合計を表す読み取り専用の <see cref="T:System.TimeSpan" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>現在のインスタンスで計測された経過時間の合計を取得します (ミリ秒単位)。</summary>
      <returns>現在のインスタンスで計測されたミリ秒の合計を表す読み取り専用の長整数。</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>現在のインスタンスで計測された経過時間の合計を取得します (タイマー刻み)。</summary>
      <returns>現在のインスタンスで計測されたタイマー刻みの合計を表す読み取り専用の長整数。</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>1 秒あたりのタイマー刻みの数として、タイマーの頻度を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>タイマー機構の現在のタイマー刻み数を取得します。</summary>
      <returns>基になるタイマー機構のタイマー刻みカウンター値を表す長整数。</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>タイマーが高解像力のパフォーマンス カウンターに基づいているかどうかを示します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>
        <see cref="T:System.Diagnostics.Stopwatch" /> タイマーが実行中かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Diagnostics.Stopwatch" /> インスタンスが現在実行中で、間隔の経過時間を計測中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>タイマー間隔の計測を停止して、経過時間をゼロにリセットします。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>時間間隔の計測を停止し、経過時間をゼロにリセットして、経過時間の計測を開始します。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>間隔の経過時間の計測を開始または再開します。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>新しい <see cref="T:System.Diagnostics.Stopwatch" /> インスタンスを初期化して、経過時間のプロパティをゼロに設定し、経過時間の計測を開始します。</summary>
      <returns>経過時間の計測を開始した <see cref="T:System.Diagnostics.Stopwatch" />。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>間隔の経過時間の計測を停止します。</summary>
    </member>
    <member name="T:System.Environment">
      <summary>現在の環境およびプラットフォームに関する情報、およびそれらを操作する手段を提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="P:System.Environment.CommandLine">
      <summary>このプロセス用のコマンド ラインを取得します。</summary>
      <returns>コマンド ラインの引数を格納している文字列。</returns>
    </member>
    <member name="P:System.Environment.CurrentDirectory">
      <summary>現在の作業ディレクトリの完全修飾パスを取得または設定します。</summary>
      <returns>ディレクトリのパスを格納している文字列。</returns>
      <exception cref="T:System.ArgumentException">空の文字列 ("") に設定しようとしました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see langword="null." />
      </exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">見つからないローカル パスを設定しようとしました。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、該当するアクセス許可がありません。</exception>
    </member>
    <member name="P:System.Environment.CurrentManagedThreadId">
      <summary>現在のマネージド スレッドの一意の識別子を取得します。</summary>
      <returns>このマネージド スレッドの一意の識別子を表す整数。</returns>
    </member>
    <member name="M:System.Environment.Exit(System.Int32)">
      <summary>このプロセスを終了し、オペレーティング システムに終了コードを返します。</summary>
      <param name="exitCode">オペレーティング システムに返す終了コード。 処理が正常に完了したことを示す場合は 0 (ゼロ) を使用します。</param>
      <exception cref="T:System.Security.SecurityException">呼び出し元には、この機能を実行するのに十分なセキュリティ アクセス許可がありません。</exception>
    </member>
    <member name="P:System.Environment.ExitCode">
      <summary>プロセスの終了コードを取得または設定します。</summary>
      <returns>終了コードを格納している 32 ビット符号付き整数。 既定値は 0 (ゼロ) です。この値は、プロセスが成功して完了したことを意味します。</returns>
    </member>
    <member name="M:System.Environment.ExpandEnvironmentVariables(System.String)">
      <summary>指定した文字列に埋め込まれている各環境変数の名前を、その変数の値を表す文字列で置換し、置換後の文字列全体を返します。</summary>
      <param name="name">0 個以上の環境変数の名前を格納している文字列。 各環境変数は、パーセント文字 (%) で囲まれます。</param>
      <returns>各環境変数をその値で置換した文字列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Environment.FailFast(System.String)">
      <summary>メッセージを Windows アプリケーションのイベント ログに書き込んだ直後にプロセスを終了させ、Microsoft に送信するエラー レポートにそのメッセージを含めます。</summary>
      <param name="message">プロセスが終了させられた原因を説明するメッセージ。説明を提供しない場合は <see langword="null" />。</param>
    </member>
    <member name="M:System.Environment.FailFast(System.String,System.Exception)">
      <summary>メッセージを Windows アプリケーションのイベント ログに書き込んだ直後にプロセスを終了させ、Microsoft に送信するエラー レポートにそのメッセージと例外情報を含めます。</summary>
      <param name="message">プロセスが終了させられた原因を説明するメッセージ。説明を提供しない場合は <see langword="null" />。</param>
      <param name="exception">終了の原因となったエラーを表す例外。 通常、これは <see langword="catch" /> ブロックでの例外です。</param>
    </member>
    <member name="M:System.Environment.GetCommandLineArgs">
      <summary>現在のプロセスに対するコマンド ライン引数を格納している文字列配列を返します。</summary>
      <returns>各要素にコマンド ライン引数を格納している文字列の配列。 先頭の要素には実行可能ファイルの名前、それに続く 0 個以上の要素には残りのコマンド ライン引数が格納されます。</returns>
      <exception cref="T:System.NotSupportedException">システムでは、コマンドライン引数はサポートされません。</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String)">
      <summary>現在のプロセスから環境変数の値を取得します。</summary>
      <param name="variable">環境変数の名前。</param>
      <returns>
        <paramref name="variable" /> で指定された環境変数の値。環境変数が見つからない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、この操作を実行するために必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
      <summary>環境変数の値を取得します。取得する場所として、現在のプロセス、現在のユーザー用に予約されている Windows オペレーティング システムのレジストリ キー、および、ローカル コンピューター用に予約されているレジストリ キーのいずれかを選択できます。</summary>
      <param name="variable">環境変数の名前。</param>
      <param name="target">
        <see cref="T:System.EnvironmentVariableTarget" /> 値のいずれか。 Unix ベースのシステムで実行される .NET Core では、<see cref="F:System.EnvironmentVariableTarget.Process" /> のみがサポートされています。</param>
      <returns>
        <paramref name="variable" /> パラメーターと <paramref name="target" /> パラメーターで指定された環境変数の値。環境変数が見つからない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> は有効な <see cref="T:System.EnvironmentVariableTarget" /> 値ではありません。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、この操作を実行するために必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables">
      <summary>すべての環境変数の名前と値を現在のプロセスから取得します。</summary>
      <returns>すべての環境変数の名前と値を保持するディクショナリ。環境変数が見つからなかった場合は空のディクショナリ。</returns>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、この操作を実行するために必要なアクセス許可がありません。</exception>
      <exception cref="T:System.OutOfMemoryException">バッファーがメモリ不足です。</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
      <summary>現在のプロセスから、または Windows オペレーティング システムのレジストリ キー (現在のユーザー用に予約されているレジストリ キーまたはローカル コンピューター用に予約されているレジストリ キー) から、すべての環境変数の名前と値を取得します。</summary>
      <param name="target">
        <see cref="T:System.EnvironmentVariableTarget" /> 値のいずれか 1 つ。 Unix ベースのシステムで実行される .NET Core では、<see cref="F:System.EnvironmentVariableTarget.Process" /> のみがサポートされています。</param>
      <returns>
        <paramref name="target" /> パラメーターに指定したソースから取得された、すべての環境変数の名前と値を保持するディクショナリ。環境変数が見つからない場合は空のディクショナリ。</returns>
      <exception cref="T:System.Security.SecurityException">呼び出し元には、<paramref name="target" /> の指定された値にこの操作を実行するために必要なアクセス許可がありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> に正しくない値が含まれています。</exception>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
      <summary>指定した列挙体によって識別されるシステムの特別なフォルダーへのパスを取得します。</summary>
      <param name="folder">システムの固定フォルダーを識別する列挙値の 1 つです。</param>
      <returns>指定したシステムの特別なフォルダーが物理的に存在する場合は、そのフォルダーへのパス。それ以外の場合は、空の文字列 ("")。
オペレーティング システムがフォルダーを作成していない場合、存在していたフォルダーを削除した場合、またはフォルダーが物理パスに対応しない [マイ コンピューター] などの仮想ディレクトリの場合、フォルダーは物理的に存在しません。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="folder" /> が <see cref="T:System.Environment.SpecialFolder" /> のメンバーではありません。</exception>
      <exception cref="T:System.PlatformNotSupportedException">現在のプラットフォームはサポートされていません。</exception>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
      <summary>指定した列挙体によって識別されるシステムの特別なフォルダーへのパスを取得します。指定したオプションを使用して特別なフォルダーにアクセスします。</summary>
      <param name="folder">システムの特別なフォルダーを識別する列挙値の 1 つです。</param>
      <param name="option">特別なフォルダーへのアクセスに使用するオプションを指定する列挙値の 1 つ。</param>
      <returns>指定したシステムの特別なフォルダーが物理的に存在する場合は、そのフォルダーへのパス。それ以外の場合は、空の文字列 ("")。
オペレーティング システムがフォルダーを作成していない場合、存在していたフォルダーを削除した場合、またはフォルダーが物理パスに対応しない [マイ コンピューター] などの仮想ディレクトリの場合、フォルダーは物理的に存在しません。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="folder" /> が <see cref="T:System.Environment.SpecialFolder" /> のメンバーではありません。

または -

<paramref name="options" /> が <see cref="T:System.Environment.SpecialFolderOption" /> のメンバーではありません。</exception>
      <exception cref="T:System.PlatformNotSupportedException">現在のプラットフォームはサポートされていません。</exception>
    </member>
    <member name="M:System.Environment.GetLogicalDrives">
      <summary>現在のコンピューターの論理ドライブの名前を格納している文字列の配列を返します。</summary>
      <returns>各要素に論理ドライブの名前を格納している文字列の配列。 たとえば、コンピューターのハード ディスク ドライブが最初の論理ドライブの場合、返される先頭の要素は "C:\" です。</returns>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
      <summary>現在のアプリケーション ドメインがアンロード中か、または共通言語ランタイム (CLR) がシャットダウン中かどうかを示す値を取得します。</summary>
      <returns>現在のアプリケーションドメインがアンロードされている場合、または CLR がシャットダウン中の場合は <see langword="true" />。それ以外の場合は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Environment.Is64BitOperatingSystem">
      <summary>現在のオペレーティング システムが 64 ビット オペレーティング システムかどうかを判断します。</summary>
      <returns>オペレーティング システムが 64 ビットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Environment.Is64BitProcess">
      <summary>現在のプロセスが 64 ビット プロセスかどうかを判断します。</summary>
      <returns>プロセスが 64 ビットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Environment.MachineName">
      <summary>ローカル コンピューターの NetBIOS 名を取得します。</summary>
      <returns>このコンピューターの名前を格納している文字列。</returns>
      <exception cref="T:System.InvalidOperationException">このコンピューターの名前を取得できません。</exception>
    </member>
    <member name="P:System.Environment.NewLine">
      <summary>この環境で定義されている改行文字列を取得します。</summary>
      <returns>UNIX 以外のプラットフォームでは "\r\n" を含む文字列。UNIX プラットフォームでは "\n" を含む文字列。</returns>
    </member>
    <member name="P:System.Environment.OSVersion">
      <summary>現在のプラットフォーム ID とバージョン番号を格納している <see cref="T:System.OperatingSystem" /> オブジェクトを取得します。</summary>
      <returns>プラットフォーム ID とバージョン番号を格納しているオブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">このプロパティはシステムのバージョンを取得できませんでした。

または -
取得したプラットフォーム ID が <see cref="T:System.PlatformID" />のメンバーではありません</exception>
    </member>
    <member name="P:System.Environment.ProcessorCount">
      <summary>現在のコンピューター上のプロセッサ数を取得します。</summary>
      <returns>現在のコンピューター上のプロセッサ数を示す 32 ビット符号付き整数。 既定値はありません。 現在のコンピューターが複数のプロセッサ グループを持っている場合、このプロパティは共通言語ランタイム (CLR) で使用できる論理プロセッサの数を返します。</returns>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
      <summary>現在のプロセスに格納されている環境変数を作成、変更、または削除します。</summary>
      <param name="variable">環境変数の名前。</param>
      <param name="value">
        <paramref name="variable" /> に割り当てる値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variable" /> に、長さ 0 の文字列、最初の 16 進数 0 文字 (0x00)、または等号 ("=") が含まれています。

または -
<paramref name="variable" /> または <paramref name="value" /> の長さが 32,767 文字以上です。

または -
この操作の実行中にエラーが発生しました。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、この操作を実行するために必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
      <summary>現在のプロセス、または Windows オペレーティング システムのレジストリ キー (現在のユーザー用に予約されているレジストリ キーまたはローカル コンピューター用に予約されているレジストリ キー) に格納される環境変数を作成、変更、または削除します。</summary>
      <param name="variable">環境変数の名前。</param>
      <param name="value">
        <paramref name="variable" /> に割り当てる値。</param>
      <param name="target">環境変数の位置を指定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variable" /> に、長さ 0 の文字列、最初の 16 進数 0 文字 (0x00)、または等号 ("=") が含まれています。

または -
<paramref name="variable" /> の長さが 32,767 文字以上です。

または -
<paramref name="target" /> が <see cref="T:System.EnvironmentVariableTarget" /> 列挙体のメンバーではありません。

または -
<paramref name="target" /> が <see cref="F:System.EnvironmentVariableTarget.Machine" /> または <see cref="F:System.EnvironmentVariableTarget.User" />で、 <paramref name="variable" /> の長さが 255 文字以上です。

または -
<paramref name="target" /> が <see cref="F:System.EnvironmentVariableTarget.Process" /> で、 <paramref name="value" /> の長さが 32,767 文字以上です。

または -
この操作の実行中にエラーが発生しました。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、この操作を実行するために必要なアクセス許可がありません。</exception>
    </member>
    <member name="T:System.Environment.SpecialFolder">
      <summary>システムの特別なフォルダーへのディレクトリ パスを取得するために使用される列挙定数を指定します。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.AdminTools">
      <summary>個々のユーザーの管理ツールを格納するために使用されるファイル システム ディレクトリ。 Microsoft 管理コンソール (MMC: Microsoft Management Console) は、カスタマイズされたコンソールをこのディレクトリに保存します。このディレクトリは、ユーザーと共に移動します。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ApplicationData">
      <summary>現在のローミング ユーザーのアプリケーション固有のデータの共通リポジトリとして機能するディレクトリ。 ローミング ユーザーは、ネットワーク上の複数のコンピューターを使用します。 ローミング ユーザーのプロファイルはネットワーク上のサーバーに保持され、ユーザーがログオンするとシステムに読み込まれます。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CDBurning">
      <summary>CD への書き込みを待機しているファイルのステージング領域として機能するファイル システム ディレクトリ。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonAdminTools">
      <summary>コンピューターのすべてのユーザーの管理ツールを格納するファイル システム ディレクトリ。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonApplicationData">
      <summary>すべてのユーザーが使用するアプリケーション固有のデータの共通リポジトリとして機能するディレクトリ。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonDesktopDirectory">
      <summary>すべてのユーザーのデスクトップに表示されるファイルおよびフォルダーを格納するファイル システム ディレクトリ。 この特別なフォルダーは、Windows NT システムでのみ有効です。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonDocuments">
      <summary>すべてのユーザーに共通のドキュメントを格納するファイル システム ディレクトリ。 この特別なフォルダーは、Shfolder.dll がインストールされている Windows NT システム、Windows 95 システム、および Windows 98 システムで有効です。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonMusic">
      <summary>すべてのユーザーに共通のミュージック ファイルを格納するリポジトリの役割をするファイル システム ディレクトリ。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonOemLinks">
      <summary>Windows Vista では、この値は下位互換性のために認識されますが、特別なフォルダー自体は使用されなくなりました。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonPictures">
      <summary>すべてのユーザーに共通のイメージ ファイルを格納するリポジトリの役割をするファイル システム ディレクトリ。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFiles">
      <summary>アプリケーション間で共有されるコンポーネント用のディレクトリ。
x86 以外のシステムの x86 共通 Program Files ディレクトリを取得するには、<see cref="F:System.Environment.SpecialFolder.ProgramFilesX86" /> メンバーを使用します。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFilesX86">
      <summary>Program Files フォルダー。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonPrograms">
      <summary>アプリケーション間で共有されるコンポーネントを格納するフォルダー。 この特別なフォルダーは、Windows NT、Windows 2000、および Windows XP の各システムでのみ有効です。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonStartMenu">
      <summary>すべてのユーザーの [スタート] メニューに表示されるプログラムおよびフォルダーを格納するファイル システム ディレクトリ。 この特別なフォルダーは、Windows NT システムでのみ有効です。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonStartup">
      <summary>すべてのユーザーの [スタートアップ] フォルダーに表示されるプログラムを格納するファイル システム ディレクトリ。 この特別なフォルダーは、Windows NT システムでのみ有効です。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonTemplates">
      <summary>すべてのユーザーが使用できるテンプレートを格納するファイル システム ディレクトリ。 この特別なフォルダーは、Windows NT システムでのみ有効です。  .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonVideos">
      <summary>すべてのユーザーに共通のビデオ ファイルを格納するリポジトリの役割をするファイル システム ディレクトリ。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Cookies">
      <summary>インターネット cookies の共通リポジトリとして機能するディレクトリ。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Desktop">
      <summary>物理的なファイル システム上の場所ではない論理的なデスクトップ。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.DesktopDirectory">
      <summary>デスクトップ上のファイル オブジェクトを物理的に格納するために使用されるディレクトリ。 このディレクトリをデスクトップ フォルダー自体と混同しないでください。デスクトップ フォルダーは仮想フォルダーです。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Favorites">
      <summary>ユーザーのお気に入り項目の共通リポジトリとして機能するディレクトリ。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Fonts">
      <summary>フォントが含まれる仮想フォルダー。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.History">
      <summary>インターネットの履歴項目の共通リポジトリとして機能するディレクトリ。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.InternetCache">
      <summary>一時インターネット ファイルの共通リポジトリとして機能するディレクトリ。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalApplicationData">
      <summary>現在の非ローミング ユーザーが使用するアプリケーション固有のデータの共通リポジトリとして機能するディレクトリ。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalizedResources">
      <summary>ローカライズされたリソース データを格納するファイル システム ディレクトリ。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyComputer">
      <summary>[マイ コンピューター] フォルダー。 [マイ コンピューター] フォルダーのパスは定義されていないため、<see langword="MyComputer" /> 列挙型のメンバーは、<see langword="Environment.GetFolderPath" /> メソッドに渡されると、常に空の文字列 ("") を生成します。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyDocuments">
      <summary>[マイ ドキュメント] フォルダー。 このメンバーは <see cref="F:System.Environment.SpecialFolder.Personal" /> に相当します。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyMusic">
      <summary>[マイ ミュージック] フォルダー。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyPictures">
      <summary>[マイ ピクチャ] フォルダー。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyVideos">
      <summary>ユーザーが所有しているビデオを格納するリポジトリの役割をするファイル システム ディレクトリ。  .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.NetworkShortcuts">
      <summary>[マイ ネットワーク] 仮想フォルダーに存在できるリンク オブジェクトを格納するファイル システム ディレクトリ。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Personal">
      <summary>ドキュメントの共通リポジトリとして機能するディレクトリ。  このメンバーは <see cref="F:System.Environment.SpecialFolder.MyDocuments" /> に相当します。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.PrinterShortcuts">
      <summary>[プリンター] 仮想フォルダーに存在できるリンク オブジェクトを格納するファイル システム ディレクトリ。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFiles">
      <summary>プログラム ファイル ディレクトリ。
x86 以外のシステムでは、<see cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)" /> メソッドに <see cref="F:System.Environment.SpecialFolder.ProgramFiles" /> を渡すと x86 以外のプログラムのパスを返します。 x86 以外のシステムの x86 の Program Files ディレクトリを取得するには、<see cref="F:System.Environment.SpecialFolder.ProgramFilesX86" /> メンバーを使用します。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFilesX86">
      <summary>x86 Program Files フォルダー。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Programs">
      <summary>ユーザーのプログラム グループを格納するディレクトリ。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Recent">
      <summary>ユーザーが最近使用したドキュメントを格納するディレクトリ。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Resources">
      <summary>リソース データを格納するファイル システム ディレクトリ。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SendTo">
      <summary>[送る] メニュー項目を格納するディレクトリ。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.StartMenu">
      <summary>[スタート] メニュー項目を格納するディレクトリ。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Startup">
      <summary>ユーザーの [スタート アップ] プログラム グループに対応するディレクトリ。 ユーザーが Windows にログオンするか Windows を起動するたびに、システムはこれらのプログラムを起動します。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.System">
      <summary>System ディレクトリ。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SystemX86">
      <summary>Windows の System フォルダー。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Templates">
      <summary>ドキュメント テンプレートの共通リポジトリとして機能するディレクトリ。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.UserProfile">
      <summary>ユーザーのプロファイル フォルダー。 アプリケーションでは、この階層にファイルやフォルダーを作成しないでください。アプリケーションのデータは、<see cref="F:System.Environment.SpecialFolder.ApplicationData" /> で参照される場所に配置する必要があります。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Windows">
      <summary>Windows ディレクトリまたは SYSROOT。 これは、%windir% 環境変数または %SYSTEMROOT% 環境変数に対応します。 .NET Framework 4 で追加されました。</summary>
    </member>
    <member name="T:System.Environment.SpecialFolderOption">
      <summary>特別なフォルダーのパスを取得するために使用するオプションを指定します。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.Create">
      <summary>存在しない場合に作成するフォルダーのパス。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.DoNotVerify">
      <summary>フォルダーへのパスは、そのパスが存在するかどうかを確認せずに返されます。 フォルダーがネットワーク上にある場合は、このオプションを指定すると待ち時間を短縮できます。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.None">
      <summary>フォルダーへのパスは検証されます。 フォルダーが存在する場合は、パスが返されます。 フォルダーが存在しない場合は、空の文字列が返されます。 これが既定の動作です。</summary>
    </member>
    <member name="P:System.Environment.StackTrace">
      <summary>現在のスタック トレース情報を取得します。</summary>
      <returns>スタック トレース情報を格納している文字列。 この値は、<see cref="F:System.String.Empty" /> の場合もあります。</returns>
    </member>
    <member name="P:System.Environment.SystemDirectory">
      <summary>システム ディレクトリの絶対パスを取得します。</summary>
      <returns>ディレクトリのパスを格納している文字列。</returns>
    </member>
    <member name="P:System.Environment.SystemPageSize">
      <summary>オペレーティング システムのメモリ ページ内にあるバイト数を取得します。</summary>
      <returns>システム メモリ ページ内のバイト数。</returns>
    </member>
    <member name="P:System.Environment.TickCount">
      <summary>システム起動後のミリ秒単位の経過時間を取得します。</summary>
      <returns>コンピューターが最後に起動してからの経過時間をミリ秒単位で保持している 32 ビット符号付き整数。</returns>
    </member>
    <member name="P:System.Environment.TickCount64">
      <summary>システム起動後のミリ秒単位の経過時間を取得します。</summary>
      <returns>システムが起動してからの経過時間 (ミリ秒)。</returns>
    </member>
    <member name="P:System.Environment.UserDomainName">
      <summary>現在のユーザーに関連付けられているネットワーク ドメイン名を取得します。</summary>
      <returns>現在のユーザーに関連付けられているネットワーク ドメイン名。</returns>
      <exception cref="T:System.PlatformNotSupportedException">オペレーティング システムでは、ネットワークのドメイン名を取得できません。</exception>
      <exception cref="T:System.InvalidOperationException">ネットワークのドメイン名を取得できません。</exception>
    </member>
    <member name="P:System.Environment.UserInteractive">
      <summary>現在のプロセスがユーザー対話モードで実行されているかどうかを示す値を取得します。</summary>
      <returns>現在のプロセスがユーザー対話モードで実行されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Environment.UserName">
      <summary>現在オペレーティング システムにログオンしている人のユーザー名を取得します。</summary>
      <returns>オペレーティングシステムにログオンしているユーザーのユーザー名。</returns>
    </member>
    <member name="P:System.Environment.Version">
      <summary>共通言語ランタイムのメジャー バージョン番号、マイナー バージョン番号、ビルド番号、およびリビジョン番号を記述する <see cref="T:System.Version" /> オブジェクトを取得します。</summary>
      <returns>共通言語ランタイムのバージョンを表示するオブジェクト。</returns>
    </member>
    <member name="P:System.Environment.WorkingSet">
      <summary>プロセス コンテキストに割り当てられる物理メモリ量を取得します。</summary>
      <returns>プロセス コンテキストに割り当てられる物理メモリのバイト数を格納している 64 ビット符号付き整数。</returns>
    </member>
    <member name="T:System.EnvironmentVariableTarget">
      <summary>環境変数の格納場所を指定します。</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.Machine">
      <summary>環境変数の保存と取得は Windows オペレーティング システムのレジストリ キー <see langword="HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment" /> との間で行われます。 この値は、Windows システムで実行される .NET の実装でのみ使用します。</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.Process">
      <summary>環境変数は、現在のプロセスに関連付けられた環境ブロックから取得されます。</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.User">
      <summary>環境変数の保存と取得は Windows オペレーティング システムのレジストリ キー <see langword="HKEY_CURRENT_USER\Environment" /> との間で行われます。 この値は、Windows システムで実行される .NET の実装でのみ使用します。</summary>
    </member>
    <member name="T:System.Globalization.GlobalizationExtensions">
      <summary>グローバリゼーションに関連する拡張メソッドを提供します。</summary>
    </member>
    <member name="M:System.Globalization.GlobalizationExtensions.GetStringComparer(System.Globalization.CompareInfo,System.Globalization.CompareOptions)">
      <summary>指定した <see cref="T:System.Globalization.CompareInfo" /> オブジェクトの、カルチャを区別する文字列比較ルールに基づいて、<see cref="T:System.StringComparer" /> オブジェクトを返します。</summary>
      <param name="compareInfo">カルチャを区別する文字列比較をサポートするオブジェクト。</param>
      <param name="options">文字列の比較方法を定義する値。 <paramref name="options" /> は列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、列挙値 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />、または、<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />、<see cref="F:System.Globalization.CompareOptions.StringSort" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
      <returns>文字列比較を実行するために使用できるオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="compareInfo" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> が無効です。</exception>
    </member>
    <member name="T:System.IO.BinaryReader">
      <summary>プリミティブ データ型を特定のエンコーディングのバイナリ値として読み取ります。</summary>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
      <summary>指定したストリームに基づき、UTF-8 エンコーディングを使用する <see cref="T:System.IO.BinaryReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="input">入力ストリーム。</param>
      <exception cref="T:System.ArgumentException">ストリームが読み取りをサポートしていないか、<see langword="null" /> であるか、既に閉じています。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>指定したストリームと文字エンコーディングに基づいて、<see cref="T:System.IO.BinaryReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="input">入力ストリーム。</param>
      <param name="encoding">使用する文字エンコーディング。</param>
      <exception cref="T:System.ArgumentException">ストリームが読み取りをサポートしていないか、<see langword="null" /> であるか、既に閉じています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>指定したストリームと文字エンコーディングに基づいて <see cref="T:System.IO.BinaryReader" /> クラスの新しいインスタンスを初期化し、必要に応じて、ストリームを開いたままにします。</summary>
      <param name="input">入力ストリーム。</param>
      <param name="encoding">使用する文字エンコーディング。</param>
      <param name="leaveOpen">
        <see cref="T:System.IO.BinaryReader" /> オブジェクトを破棄した後にストリームを開いたままにする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">ストリームが読み取りをサポートしていないか、<see langword="null" /> であるか、既に閉じています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> または <paramref name="input" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.IO.BinaryReader.BaseStream">
      <summary>
        <see cref="T:System.IO.BinaryReader" /> の基になるストリームへのアクセスを公開します。</summary>
      <returns>
        <see langword="BinaryReader" /> に関連付けられた、基になるストリーム。</returns>
    </member>
    <member name="M:System.IO.BinaryReader.Close">
      <summary>現在のリーダーと基になるストリームをクローズします。</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose">
      <summary>
        <see cref="T:System.IO.BinaryReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.BinaryReader" /> クラスによって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
      <summary>指定したバイト数分だけストリームから読み取ったバイトを内部バッファーに格納します。</summary>
      <param name="numBytes">読み取るバイト数。</param>
      <exception cref="T:System.IO.EndOfStreamException">
        <paramref name="numBytes" /> 分のバイトを読み取る前にストリームの末尾に到達しました。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">要求された <paramref name="numBytes" /> が、内部バッファー サイズより大きくなっています。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.PeekChar">
      <summary>読み取り可能な次の文字を返します。バイトの位置または文字の位置は変化しません。</summary>
      <returns>使用できる次の文字。使用できる文字がないか、ストリームがシークをサポートしていない場合は -1。</returns>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentException">現在の文字は、ストリーム用に選択された <see cref="T:System.Text.Encoding" /> を使用して内部文字バッファーにデコードできません。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read">
      <summary>基になるストリームから文字を読み取り、使用した <see langword="Encoding" /> とストリームから読み取った特定の文字に従ってストリームの現在位置を進めます。</summary>
      <returns>入力ストリームの次の文字。現在読み取り可能な文字がない場合は -1。</returns>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>バイト配列内の指定された位置を開始点として、ストリームから指定されたバイト数を読み取ります。</summary>
      <param name="buffer">データを読み取るバッファー。</param>
      <param name="index">バッファー内の、バッファーへの読み取り開始点。</param>
      <param name="count">読み取るバイト数。</param>
      <returns>
        <paramref name="buffer" /> に読み取るバイト数。 要求したバイト数分のバイトを読み取れなかった場合、この値は要求したバイト数より小さくなります。ストリームの末尾に到達した場合は 0 になることがあります。</returns>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。
または
デコードされた文字の数が <paramref name="count" /> を超えています。 これは、Unicode デコーダーがフォールバック文字またはサロゲート ペアを返す場合に発生することがあります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>文字配列内の指定された位置を開始点として、ストリームから指定された文字数を読み取ります。</summary>
      <param name="buffer">データを読み取るバッファー。</param>
      <param name="index">バッファー内の、バッファーへの読み取り開始点。</param>
      <param name="count">読み取る文字の数。</param>
      <returns>バッファーに読み取られた合計文字数。 要求した文字数分の文字を読み取れなかった場合、この値は要求した文字数より小さくなります。また、ストリームの末尾に到達した場合は 0 になることがあります。</returns>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。

または -
デコードされた文字の数が <paramref name="count" /> を超えています。 これは、Unicode デコーダーがフォールバック文字またはサロゲート ペアを返す場合に発生することがあります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Span{System.Byte})">
      <summary>現在のストリームからバイト シーケンスを読み取り、読み取ったバイト数だけストリーム内の位置を進めます。</summary>
      <param name="buffer">メモリの領域。 このメソッドが戻ると、この領域のコンテンツは現在のソースから読み取られたバイトに置き換えられます。</param>
      <returns>バッファーに読み取られた合計バイト数。 要求しただけのバイト数を読み取ることができなかった場合、この値はバッファーに割り当てられているバイト数より小さくなります。ストリームの末尾に到達した場合は 0 (ゼロ) になることがあります。</returns>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Span{System.Char})">
      <summary>現在のストリームから、指定されたバッファーの長さと同じ文字数を読み取り、指定されたバッファーにそれらを書き込んでから、使用した <see langword="Encoding" /> とストリームから読み取った特定の文字に従って現在位置を進めます。</summary>
      <param name="buffer">文字のスパン。 このメソッドが戻ると、この領域のコンテンツは現在のソースから読み取られた文字に置き換えられます。</param>
      <returns>バッファーに読み取られた合計文字数。 要求した文字数分の文字を読み取れなかった場合、この値は要求した文字数より小さくなります。また、ストリームの末尾に到達した場合は 0 になることがあります。</returns>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read7BitEncodedInt">
      <summary>32 ビット整数を圧縮形式で読み取ります。</summary>
      <returns>圧縮形式の 32 ビット整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
      <exception cref="T:System.FormatException">ストリームが破損しています。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBoolean">
      <summary>現在のストリームから <see langword="Boolean" /> 値を読み取り、ストリームの現在位置を 1 バイトだけ進めます。</summary>
      <returns>読み取ったバイトが 0 以外の場合は <see langword="true" />。0 の場合は <see langword="false" />。</returns>
      <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadByte">
      <summary>現在のストリームから次のバイトを読み取り、ストリームの現在位置を 1 バイトだけ進めます。</summary>
      <returns>現在のストリームから読み取った次のバイト。</returns>
      <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
      <summary>現在のストリームから指定されたバイト数をバイト配列に読み取り、そのバイト数だけストリーム内の現在位置を進めます。</summary>
      <param name="count">読み取るバイト数。 この値は 0 以上の数字の必要があり、それ以外の場合は例外が発生します。</param>
      <returns>基になるストリームから読み取ったデータが格納されているバイト配列。 ストリームの末尾に到達した場合は要求したバイト数より小さくなることがあります。</returns>
      <exception cref="T:System.ArgumentException">デコードされた文字の数が <paramref name="count" /> を超えています。 これは、Unicode デコーダーがフォールバック文字またはサロゲート ペアを返す場合に発生することがあります。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> が負の値です。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChar">
      <summary>現在のストリームの次の文字を読み取り、使用した <see langword="Encoding" /> とストリームから読み取った特定の文字に従ってストリームの現在位置を進めます。</summary>
      <returns>現在のストリームから読み取った文字。</returns>
      <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentException">サロゲート文字が読み取られました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChars(System.Int32)">
      <summary>現在のストリームから指定された文字数を読み取り、そのデータを文字配列として返します。また、使用した <see langword="Encoding" /> とストリームから読み取った特定の文字に従って現在位置を進めます。</summary>
      <param name="count">読み取る文字の数。</param>
      <returns>基になるストリームから読み取ったデータが格納されている文字配列。 ストリームの末尾に到達した場合は、要求された文字数より小さくなることがあります。</returns>
      <exception cref="T:System.ArgumentException">デコードされた文字の数が <paramref name="count" /> を超えています。 これは、Unicode デコーダーがフォールバック文字またはサロゲート ペアを返す場合に発生することがあります。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> が負の値です。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDecimal">
      <summary>現在のストリームから 10 進数値を読み取り、ストリームの現在位置を 16 バイトだけ進めます。</summary>
      <returns>現在のストリームから読み取った 10 進数値。</returns>
      <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDouble">
      <summary>現在のストリームから 8 バイト浮動小数点値を読み取り、ストリームの現在位置を 8 バイトだけ進めます。</summary>
      <returns>現在のストリームから読み取った 8 バイト浮動小数点値。</returns>
      <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt16">
      <summary>現在のストリームから 2 バイト符号付き整数を読み取り、ストリームの現在位置を 2 バイトだけ進めます。</summary>
      <returns>現在のストリームから読み取った 2 バイト符号付き整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt32">
      <summary>現在のストリームから 4 バイト符号付き整数を読み取り、ストリームの現在位置を 4 バイトだけ進めます。</summary>
      <returns>現在のストリームから読み取った 4 バイト符号付き整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt64">
      <summary>現在のストリームから 8 バイト符号付き整数を読み取り、ストリームの現在位置を 8 バイトだけ進めます。</summary>
      <returns>現在のストリームから読み取った 8 バイト符号付き整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSByte">
      <summary>現在のストリームから符号付きバイトを読み取り、ストリームの現在位置を 1 バイトだけ進めます。</summary>
      <returns>現在のストリームから読み取った符号付きバイト。</returns>
      <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSingle">
      <summary>現在のストリームから 4 バイト浮動小数点値を読み取り、ストリームの現在位置を 4 バイトだけ進めます。</summary>
      <returns>現在のストリームから読み取った 4 バイト浮動小数点値。</returns>
      <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadString">
      <summary>現在のストリームから 1 つの文字列を読み取ります。 ストリームの文字列は、7 ビットごとにエンコードされた文字列の長さが先頭に付加されています。</summary>
      <returns>読み取った文字列。</returns>
      <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt16">
      <summary>リトル エンディアン エンコーディングを使用して現在のストリームから 2 バイト符号なし整数を読み取り、ストリームの位置を 2 バイトだけ進めます。</summary>
      <returns>現在のストリームから読み取った 2 バイト符号なし整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt32">
      <summary>現在のストリームから 4 バイト符号なし整数を読み取り、ストリームの位置を 4 バイトだけ進めます。</summary>
      <returns>現在のストリームから読み取った 4 バイト符号なし整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt64">
      <summary>現在のストリームから 8 バイト符号なし整数を読み取り、ストリームの位置を 8 バイトだけ進めます。</summary>
      <returns>現在のストリームから読み取った 8 バイト符号なし整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達しました。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="T:System.IO.BinaryWriter">
      <summary>プリミティブ型をバイナリでストリームに書き込みます。特定のエンコーディングの文字列の書き込みをサポートします。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor">
      <summary>ストリームへの書き込みを行う <see cref="T:System.IO.BinaryWriter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
      <summary>指定したストリームに基づき、UTF-8 エンコーディングを使用する <see cref="T:System.IO.BinaryWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="output">出力ストリーム。</param>
      <exception cref="T:System.ArgumentException">ストリームが書き込みをサポートしていないか、既に閉じています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>指定したストリームと文字エンコーディングに基づいて、<see cref="T:System.IO.BinaryWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="output">出力ストリーム。</param>
      <param name="encoding">使用する文字エンコーディング。</param>
      <exception cref="T:System.ArgumentException">ストリームが書き込みをサポートしていないか、既に閉じています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> または <paramref name="encoding" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>指定したストリームと文字エンコーディングに基づいて <see cref="T:System.IO.BinaryWriter" /> クラスの新しいインスタンスを初期化し、必要に応じて、ストリームを開いたままにします。</summary>
      <param name="output">出力ストリーム。</param>
      <param name="encoding">使用する文字エンコーディング。</param>
      <param name="leaveOpen">
        <see cref="T:System.IO.BinaryWriter" /> オブジェクトを破棄した後にストリームを開いたままにする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">ストリームが書き込みをサポートしていないか、既に閉じています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> または <paramref name="encoding" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.IO.BinaryWriter.BaseStream">
      <summary>
        <see cref="T:System.IO.BinaryWriter" /> の基になるストリームを取得します。</summary>
      <returns>
        <see langword="BinaryWriter" /> に関連付けられた、基になるストリーム。</returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Close">
      <summary>現在の <see cref="T:System.IO.BinaryWriter" />、および基になるストリームを閉じます。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose">
      <summary>
        <see cref="T:System.IO.BinaryWriter" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.BinaryWriter" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.BinaryWriter.DisposeAsync">
      <summary>
        <see cref="T:System.IO.BinaryWriter" /> クラスの現在のインスタンスによって使用されているすべてのリソースを非同期で解放します。</summary>
      <returns>非同期の破棄操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Flush">
      <summary>現在のライターのすべてのバッファーをクリアし、バッファー内のデータを基になるデバイスに書き込みます。</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.Null">
      <summary>バッキング ストアを持たない <see cref="T:System.IO.BinaryWriter" /> を指定します。</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.OutStream">
      <summary>基になるストリームを保持します。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
      <summary>現在のストリーム内の位置を設定します。</summary>
      <param name="offset">
        <paramref name="origin" /> からのバイト オフセット。</param>
      <param name="origin">新しい位置を取得するための参照ポイントを示す <see cref="T:System.IO.SeekOrigin" /> のフィールド。</param>
      <returns>現在のストリームの位置。</returns>
      <exception cref="T:System.IO.IOException">ファイル ポインターが無効な位置に移動されました。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.IO.SeekOrigin" /> 値が無効です。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Boolean)">
      <summary>現在のストリームに 1 バイト <see langword="Boolean" /> 値を書き込みます。0 は <see langword="false" /> を表し、1 は <see langword="true" /> を表します。</summary>
      <param name="value">書き込む <see langword="Boolean" /> 値 (0 または 1)。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte)">
      <summary>現在のストリームに符号なしバイトを書き込み、ストリームの位置を 1 バイトだけ進めます。</summary>
      <param name="value">書き込む符号なしバイト。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[])">
      <summary>基になるストリームにバイト配列を書き込みます。</summary>
      <param name="buffer">書き込むデータを含むバイト配列。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>現在のストリームにバイト配列の領域を書き込みます。</summary>
      <param name="buffer">書き込むデータを含むバイト配列。</param>
      <param name="index">
        <paramref name="buffer" /> からの読み取りおよびストリームへの書き込みに使用する、最初のバイトのインデックス。</param>
      <param name="count">
        <paramref name="buffer" /> からの読み取りおよびストリームへの書き込みのバイト数。</param>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char)">
      <summary>現在のストリームに Unicode 文字を書き込み、使用した <see langword="Encoding" /> とストリームに書き込んだ特定の文字に従ってストリームの現在位置を進めます。</summary>
      <param name="ch">書き込む非サロゲート Unicode 文字。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ch" /> は、単一のサロゲート文字です。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[])">
      <summary>現在のストリームに文字配列を書き込み、使用した <see langword="Encoding" /> とストリームに書き込んだ特定の文字に従ってストリームの現在位置を進めます。</summary>
      <param name="chars">書き込むデータを格納する文字配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>現在のストリームに文字配列セクションを書き込み、使用した <see langword="Encoding" /> とストリームに書き込んだ特定の文字に従ってストリームの現在位置を進めます。</summary>
      <param name="chars">書き込むデータを格納する文字配列。</param>
      <param name="index">
        <paramref name="chars" /> からの読み取りおよびストリームへの書き込みに使用する、最初の文字のインデックス。</param>
      <param name="count">
        <paramref name="chars" /> からの読み取りおよびストリームへの書き込みの文字数。</param>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Decimal)">
      <summary>現在のストリームに 10 進値を書き込み、ストリームの位置を 16 バイトだけ進めます。</summary>
      <param name="value">書き込む 10 進値。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Double)">
      <summary>現在のストリームに 8 バイト浮動小数点値を書き込み、ストリームの位置を 8 バイトだけ進めます。</summary>
      <param name="value">書き込む 8 バイト浮動小数点値。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int16)">
      <summary>現在のストリームに 2 バイト符号付き整数を書き込み、ストリームの位置を 2 バイトだけ進めます。</summary>
      <param name="value">書き込む 2 バイト符号付き整数。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int32)">
      <summary>現在のストリームに 4 バイト符号付き整数を書き込み、ストリームの位置を 4 バイトだけ進めます。</summary>
      <param name="value">書き込む 4 バイト符号付き整数。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int64)">
      <summary>現在のストリームに 8 バイト符号付き整数を書き込み、ストリームの位置を 8 バイトだけ進めます。</summary>
      <param name="value">書き込む 8 バイト符号付き整数。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.ReadOnlySpan{System.Byte})">
      <summary>現在のストリームにバイトのスパンを書き込みます。</summary>
      <param name="buffer">書き込むバイトのスパン。</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>現在のストリームに文字のスパンを書き込み、使用した <see langword="Encoding" /> とストリームに書き込んだ特定の文字に従ってストリームの現在位置を進めます。</summary>
      <param name="chars">書き込む文字のスパン。</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.SByte)">
      <summary>現在のストリームに符号付きバイトを書き込み、ストリームの位置を 1 バイトだけ進めます。</summary>
      <param name="value">書き込む符号付きバイト。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Single)">
      <summary>現在のストリームに 4 バイト浮動小数点値を書き込み、ストリームの位置を 4 バイトだけ進めます。</summary>
      <param name="value">書き込む 4 バイト浮動小数点値。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.String)">
      <summary>長さを示すプレフィックスを付けた文字列を、<see cref="T:System.IO.BinaryWriter" /> の現在のエンコーディングでこのストリームに書き込み、使用したエンコーディングとストリームに書き込んだ特定の文字に従ってストリームの現在位置を進めます。</summary>
      <param name="value">書き込む値。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt16)">
      <summary>現在のストリームに 2 バイト符号なし整数を書き込み、ストリームの位置を 2 バイトだけ進めます。</summary>
      <param name="value">書き込む 2 バイト符号なし整数。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt32)">
      <summary>現在のストリームに 4 バイト符号なし整数を書き込み、ストリームの位置を 4 バイトだけ進めます。</summary>
      <param name="value">書き込む 4 バイト符号なし整数。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt64)">
      <summary>現在のストリームに 8 バイト符号なし整数を書き込み、ストリームの位置を 8 バイトだけ進めます。</summary>
      <param name="value">書き込む 8 バイト符号なし整数。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
      <summary>32 ビット整数を圧縮形式で書き込みます。</summary>
      <param name="value">書き込む 32 ビット整数。</param>
      <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.IO.IOException">ストリームは閉じられています。</exception>
    </member>
    <member name="T:System.IO.BufferedStream">
      <summary>他のストリームの読み取りおよび書き込み操作に対してバッファリング レイヤーを追加します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
      <summary>
        <see cref="T:System.IO.BufferedStream" /> クラスの新しいインスタンスを、4,096 バイトの既定のバッファー サイズを使用して初期化します。</summary>
      <param name="stream">現在のストリーム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
      <summary>
        <see cref="T:System.IO.BufferedStream" /> クラスの新しいインスタンスを、指定したバッファー サイズを使用して初期化します。</summary>
      <param name="stream">現在のストリーム。</param>
      <param name="bufferSize">バイト単位のバッファー サイズ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> が負の値です。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>非同期の読み込み動作を開始します。 (代わりに、<see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> の使用を検討してください。)</summary>
      <param name="buffer">データを読み込むバッファー。</param>
      <param name="offset">ストリームから読み込んだデータの書き込み開始位置を示す <paramref name="buffer" /> 内のバイト オフセット。</param>
      <param name="count">読み取る最大バイト数。</param>
      <param name="callback">読み取り完了時に呼び出されるオプションの非同期コールバック。</param>
      <param name="state">この特定の非同期読み取り要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</param>
      <returns>まだ保留中である可能性がある非同期読み取りを表すオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.IO.IOException">ストリームの末尾を越える位置で非同期読み取りを実行しようとしました。</exception>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="offset" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.NotSupportedException">現在のストリームは、読み取り操作をサポートしていません。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>非同期の書き込み操作を開始します。 (代わりに、<see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> の使用を検討してください。)</summary>
      <param name="buffer">現在のストリームに書き込むデータを格納しているバッファー。</param>
      <param name="offset">現在のストリームへのバイトのコピーを開始する位置を示す <paramref name="buffer" /> 内のバイト オフセット。インデックス番号は 0 から始まります。</param>
      <param name="count">書き込む最大バイト数。</param>
      <param name="callback">非同期の書き込み操作が完了したときに呼び出されるメソッド。</param>
      <param name="state">この特定の非同期書き込み要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</param>
      <returns>まだ保留中である可能性がある非同期書き込みを参照するオブジェクト。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> の長さから <paramref name="offset" /> を引いた長さが <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.NotSupportedException">ストリームは書き込みをサポートしません。</exception>
    </member>
    <member name="P:System.IO.BufferedStream.BufferSize">
      <summary>このバッファー ストリームのバッファー サイズをバイト単位で取得します。</summary>
      <returns>バッファーサイズをバイト単位で表す整数。</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanRead">
      <summary>現在のストリームが読み取りをサポートしているかどうかを示す値を取得します。</summary>
      <returns>ストリームが読み取りをサポートしている場合は <see langword="true" />。ストリームが閉じているか、書き込み専用アクセスで開かれた場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanSeek">
      <summary>現在のストリームがシークをサポートしているかどうかを示す値を取得します。</summary>
      <returns>ストリームがシークをサポートしている場合は <see langword="true" />。ストリームが閉じているか、ストリームがパイプまたはコンソールへの出力などのオペレーティング システム ハンドルから構築された場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanWrite">
      <summary>現在のストリームが書き込みをサポートしているかどうかを示す値を取得します。</summary>
      <returns>ストリームが書き込みをサポートしている場合は <see langword="true" />。ストリームが閉じているか、読み取り専用アクセスで開かれた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>現在のバッファー ストリームからバイトを読み取り、別のストリームに書き込みます。</summary>
      <param name="destination">現在のバッファー ストリームの内容のコピー先のストリーム。</param>
      <param name="bufferSize">バッファーのサイズ。 これは、0 より大きい値である必要があります。 既定のサイズは 81920 です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> が負の値またはゼロです。</exception>
      <exception cref="T:System.NotSupportedException">現在のストリームは読み取りをサポートしません。

または -

<paramref name="destination" /> は、書き込みをサポートしません。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> メソッドが呼び出される前に、現在のストリームまたは <paramref name="destination" /> が閉じられました。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>現在のバッファー ストリームからバイトを非同期に読み取り、指定されたバッファー サイズとキャンセル トークンを使用して、別のストリームに書き込みます。</summary>
      <param name="destination">現在のバッファー ストリームの内容のコピー先のストリーム。</param>
      <param name="bufferSize">バッファーのサイズ (バイト数)。 これは、0 より大きい値である必要があります。 既定のサイズは 81920 です。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期のコピー操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.DisposeAsync">
      <summary>バッファー ストリームで使用されているアンマネージ リソースを非同期に解放します。</summary>
      <returns>非同期の破棄操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
      <summary>保留中の非同期の読み取り操作が完了するまで待機します。 (代わりに、<see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> の使用を検討してください。)</summary>
      <param name="asyncResult">待機する保留状態の非同期要求への参照。</param>
      <returns>ストリームから読み取ったバイト数 (0 ～要求したバイト数の数値)。 ストリームの末尾では 0 が返されるだけです、それ以外の場合は、少なくとも 1 バイトが読み込み可能になるまでブロックします。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">この <see cref="T:System.IAsyncResult" /> オブジェクトは、このクラスで <see cref="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> を呼び出すことによって作成されませんでした。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
      <summary>非同期の書き込み操作を終了し、I/O 操作が完了するまでブロックします。 (代わりに、<see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> の使用を検討してください。)</summary>
      <param name="asyncResult">保留中の非同期の要求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">この <see cref="T:System.IAsyncResult" /> オブジェクトは、このクラスで <see cref="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> を呼び出すことによって作成されませんでした。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Flush">
      <summary>このストリームに対応するすべてのバッファーをクリアし、バッファー内のデータを基になるデバイスに書き込みます。</summary>
      <exception cref="T:System.ObjectDisposedException">ストリームは破棄されています。</exception>
      <exception cref="T:System.IO.IOException">データ ソースまたはリポジトリが開いていません。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>ストリームに対応するすべてのバッファーを非同期にクリアし、バッファー内のデータを基になるデバイスに書き込み、キャンセル要求を監視します。</summary>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。</param>
      <returns>非同期のフラッシュ操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">ストリームは破棄されています。</exception>
    </member>
    <member name="P:System.IO.BufferedStream.Length">
      <summary>ストリームの長さ (バイト単位) を取得します。</summary>
      <returns>バイト単位のストリーム長。</returns>
      <exception cref="T:System.IO.IOException">基になるストリームが <see langword="null" /> であるか、閉じています。</exception>
      <exception cref="T:System.NotSupportedException">このストリームはシークをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームが閉じた後でメソッドが呼び出されました。</exception>
    </member>
    <member name="P:System.IO.BufferedStream.Position">
      <summary>現在のストリーム内の位置を取得します。</summary>
      <returns>現在のストリーム内の位置。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)" /> に渡される値が負の値です。</exception>
      <exception cref="T:System.IO.IOException">ストリームが閉じられているなどの I/O エラーが発生しました。</exception>
      <exception cref="T:System.NotSupportedException">このストリームはシークをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームが閉じた後でメソッドが呼び出されました。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>現在のバッファー ストリームから配列にバイトをコピーします。</summary>
      <param name="array">バイトをコピーするバッファー。</param>
      <param name="offset">バイトの読み取りを開始するバッファーのバイト オフセット。</param>
      <param name="count">読み取るバイト数。</param>
      <returns>
        <paramref name="array" /> に読み取る合計バイト数。 要求しただけのバイト数を読み取れなかった場合、この値は要求したバイト数より小さくなります。データを読み取る前にストリームの末尾に到達した場合は 0 になります。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> の長さから <paramref name="offset" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.IO.IOException">ストリームが開いていないか、<see langword="null" /> になっています。</exception>
      <exception cref="T:System.NotSupportedException">ストリームは読み取りをサポートしません。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームが閉じた後でメソッドが呼び出されました。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Read(System.Span{System.Byte})">
      <summary>現在のバッファー ストリームからバイトの範囲にバイトをコピーし、読み取ったバイト数だけバッファー ストリーム内の現在位置を進めます。</summary>
      <param name="destination">メモリの領域。 このメソッドが戻ると、この領域のコンテンツは現在のソースから読み取られたバイトに置き換えられます。</param>
      <returns>バッファーに読み取られた合計バイト数。 要求しただけのバイト数を読み取ることができなかった場合、この値はバッファーに割り当てられているバイト数より小さくなります。ストリームの末尾に到達した場合は 0 (ゼロ) になることがあります。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>現在のストリームからバイト シーケンスを非同期に読み取り、読み取ったバイト数だけストリーム内の位置を進め、キャンセル要求を監視します。</summary>
      <param name="buffer">データを書き込むバッファー。</param>
      <param name="offset">ストリームからのデータの書き込み開始位置を示す <paramref name="buffer" /> 内のバイト オフセット。</param>
      <param name="count">読み取る最大バイト数。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。</param>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。 現在使用できるバイト数が要求した数より小さい場合、結果の値は要求したバイト数より小さくなることがあります。また、ストリームの末尾に到達した場合は 0 になることがあります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> と <paramref name="count" /> の合計が、バッファーの長さよりも大きくなっています。</exception>
      <exception cref="T:System.NotSupportedException">ストリームは読み取りをサポートしません。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">ストリームは、前の読み取り操作によって現在使用されています。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>現在のバッファー ストリームからバイト シーケンスを非同期に読み取り、読み取ったバイト数だけバッファー ストリーム内の位置を進めます。</summary>
      <param name="buffer">データを書き込むメモリの領域。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の読み取り操作を表すタスク。 その <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> プロパティの値には、バッファーに読み取られるバイトの合計数が含まれます。 要求しただけのバイト数を読み取ることができなかった場合、結果の値はバッファーに割り当てられているバイト数より小さくなります。ストリームの末尾に到達した場合は 0 (ゼロ) になることがあります。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.ReadByte">
      <summary>基になるストリームからバイトを読み取り、<see langword="int" /> にキャストしたバイトを返すか、ストリームの末尾から読み取る場合は -1 を返します。</summary>
      <returns>
        <see langword="int" /> にキャストしたバイト。またはストリームの末尾から読み取る場合は -1。</returns>
      <exception cref="T:System.IO.IOException">ストリームが閉じられているなどの I/O エラーが発生しました。</exception>
      <exception cref="T:System.NotSupportedException">ストリームは読み取りをサポートしません。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームが閉じた後でメソッドが呼び出されました。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>現在のバッファー ストリーム内の位置を設定します。</summary>
      <param name="offset">
        <paramref name="origin" /> からのバイト オフセット。</param>
      <param name="origin">新しい位置を取得するための参照ポイントを示す <see cref="T:System.IO.SeekOrigin" /> 型の値。</param>
      <returns>現在のバッファー ストリーム内の新しい位置。</returns>
      <exception cref="T:System.IO.IOException">ストリームが開いていないか、<see langword="null" /> になっています。</exception>
      <exception cref="T:System.NotSupportedException">このストリームはシークをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームが閉じた後でメソッドが呼び出されました。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.SetLength(System.Int64)">
      <summary>バッファー ストリーム長を設定します。</summary>
      <param name="value">必要な現在のバッファー ストリーム長を示す整数 (バイト単位)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> が負の値です。</exception>
      <exception cref="T:System.IO.IOException">ストリームが開いていないか、<see langword="null" /> になっています。</exception>
      <exception cref="T:System.NotSupportedException">ストリームでは、書き込みとシークの両方は使用できません。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームが閉じた後でメソッドが呼び出されました。</exception>
    </member>
    <member name="P:System.IO.BufferedStream.UnderlyingStream">
      <summary>このバッファー ストリームの基になる <see cref="T:System.IO.Stream" /> インスタンスを取得します。</summary>
      <returns>基になるストリームインスタンス。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>バッファー ストリームにバイトをコピーし、書き込んだバイト数だけバッファー ストリーム内の現在位置を進めます。</summary>
      <param name="array">現在のバッファー ストリームに対する <paramref name="count" /> バイトのコピー元のバイト配列。</param>
      <param name="offset">現在のバッファー ストリームへのバイトのコピーを開始する位置のバッファーのオフセット。</param>
      <param name="count">現在のバッファー ストリームに書き込むバイト数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> の長さから <paramref name="offset" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.IO.IOException">ストリームが閉じているか、<see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">ストリームは書き込みをサポートしません。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームが閉じた後でメソッドが呼び出されました。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>現在のバッファー ストリームにバイト シーケンスを書き込み、書き込んだバイト数だけこのバッファー ストリーム内の現在位置を進めます。</summary>
      <param name="buffer">メモリの領域。 このメソッドでは、この領域のコンテンツが現在のバッファー ストリームにコピーされます。</param>
    </member>
    <member name="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>現在のストリームにバイト シーケンスを非同期に書き込み、書き込んだバイト数だけストリーム内の現在位置を進め、キャンセル要求を監視します。</summary>
      <param name="buffer">データの書き込み元となるバッファー。</param>
      <param name="offset">ストリームへのバイトのコピーを開始する位置を示す <paramref name="buffer" /> 内のバイト オフセット。インデックス番号は 0 から始まります。</param>
      <param name="count">書き込む最大バイト数。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> と <paramref name="count" /> の合計が、バッファーの長さよりも大きいです。</exception>
      <exception cref="T:System.NotSupportedException">ストリームは書き込みをサポートしません。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">ストリームは、前の書き込み操作によって現在使用されています。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>現在のバッファー ストリームにバイト シーケンスを非同期に書き込み、書き込んだバイト数だけこのバッファー ストリーム内の現在位置を進め、キャンセル要求を監視します。</summary>
      <param name="buffer">データを書き込む元のメモリの領域。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.WriteByte(System.Byte)">
      <summary>バッファー ストリームの現在位置にバイトを書き込みます。</summary>
      <param name="value">ストリームに書き込むバイト。</param>
      <exception cref="T:System.NotSupportedException">ストリームは書き込みをサポートしません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームが閉じた後でメソッドが呼び出されました。</exception>
    </member>
    <member name="T:System.IO.EndOfStreamException">
      <summary>ストリームの末尾を越えて読み込もうとしたときにスローされる例外。</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor">
      <summary>メッセージ文字列がシステムによって提供されたメッセージに設定され、HRESULT が COR_E_ENDOFSTREAM に設定された <see cref="T:System.IO.EndOfStreamException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定したシリアル化情報とコンテキスト情報を使用して、<see cref="T:System.IO.EndOfStreamException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">転送元または転送先についてのコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext" /> です。</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String)">
      <summary>メッセージ文字列を <paramref name="message" /> に設定し、HRESULT を COR_E_ENDOFSTREAM に設定して、<see cref="T:System.IO.EndOfStreamException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明する文字列。 <paramref name="message" /> の内容は、ユーザーが理解できる内容にします。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.IO.EndOfStreamException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明する文字列。 <paramref name="message" /> の内容は、ユーザーが理解できる内容にします。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>データ ストリームが無効な形式である場合にスローされる例外。</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>
        <see cref="T:System.IO.InvalidDataException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.IO.InvalidDataException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>この例外の原因である内部例外への参照を指定して、<see cref="T:System.IO.InvalidDataException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.IO.MemoryStream">
      <summary>バッキング ストアとしてメモリを使用するストリームを作成します。</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor">
      <summary>
        <see cref="T:System.IO.MemoryStream" /> クラスの新しいインスタンスを、0 に初期化される拡張可能な容量を使用して 初期化します。</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[])">
      <summary>指定したバイト配列に基づいて、サイズを変更できない <see cref="T:System.IO.MemoryStream" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="buffer">現在のストリームを作成する符号なしバイトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
      <summary>
        <see cref="T:System.IO.MemoryStream" /> プロパティを指定どおりに設定し、指定したバイト配列に基づいて、サイズを変更できない <see cref="P:System.IO.MemoryStream.CanWrite" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="buffer">このストリームの作成元の符号なしバイトの配列。</param>
      <param name="writable">ストリームが書き込みをサポートするかどうかを決定する <see cref="P:System.IO.MemoryStream.CanWrite" /> プロパティの設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>バイト配列の指定した領域 (インデックス) に基づいて、サイズを変更できない <see cref="T:System.IO.MemoryStream" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="buffer">このストリームの作成元の符号なしバイトの配列。</param>
      <param name="index">ストリームが開始する位置の <paramref name="buffer" /> のインデックス。</param>
      <param name="count">バイト単位のストリーム長。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <see cref="T:System.IO.MemoryStream" /> プロパティを指定どおりに設定し、バイト配列の指定した領域に基づいて、サイズを変更できない <see cref="P:System.IO.MemoryStream.CanWrite" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="buffer">このストリームの作成元の符号なしバイトの配列。</param>
      <param name="index">ストリームが開始する位置の <paramref name="buffer" /> のインデックス。</param>
      <param name="count">バイト単位のストリーム長。</param>
      <param name="writable">ストリームが書き込みをサポートするかどうかを決定する <see cref="P:System.IO.MemoryStream.CanWrite" /> プロパティの設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:System.IO.MemoryStream" /> プロパティを指定どおりに設定し、<see cref="P:System.IO.MemoryStream.CanWrite" /> を呼び出す機能を指定どおりに設定して、バイト配列の指定した領域に基づき、<see cref="M:System.IO.MemoryStream.GetBuffer" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="buffer">このストリームの作成元の符号なしバイトの配列。</param>
      <param name="index">ストリームが開始する位置の <paramref name="buffer" /> のインデックス。</param>
      <param name="count">バイト単位のストリーム長。</param>
      <param name="writable">ストリームが書き込みをサポートするかどうかを決定する <see cref="P:System.IO.MemoryStream.CanWrite" /> プロパティの設定。</param>
      <param name="publiclyVisible">ストリームが作成した符号なしバイト配列を返す <see cref="M:System.IO.MemoryStream.GetBuffer" /> を有効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
      <summary>
        <see cref="T:System.IO.MemoryStream" /> クラスの新しいインスタンスを、指定に従って初期化される拡張可能な容量を使用して初期化します。</summary>
      <param name="capacity">バイト単位の内部配列の初期サイズ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が負の値です。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>非同期の読み込み動作を開始します。 (代わりに、<see cref="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> の使用を検討してください。)</summary>
      <param name="buffer">データを読み込むバッファー。</param>
      <param name="offset">メモリ ストリームから読み込んだデータの書き込み開始位置を示す <paramref name="buffer" /> 内のバイト オフセット。</param>
      <param name="count">読み取る最大バイト数。</param>
      <param name="callback">読み取り完了時に呼び出されるオプションの非同期コールバック。</param>
      <param name="state">この特定の非同期読み取り要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</param>
      <returns>非同期の読み込みを表す <see cref="T:System.IAsyncResult" />。まだ保留状態の場合もあります。</returns>
      <exception cref="T:System.IO.IOException">メモリ ストリームの末尾を越えて非同期の読み込みを実行しようとしました。または、ディスク エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentException">1 つ以上の引数が無効です。</exception>
      <exception cref="T:System.ObjectDisposedException">メモリ ストリームが閉じられた後にメソッドが呼び出されました。</exception>
      <exception cref="T:System.NotSupportedException">現在のメモリ ストリームの実装では、読み取り操作はサポートされていません。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>非同期の書き込み操作を開始します。 (代わりに、<see cref="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> の使用を検討してください。)</summary>
      <param name="buffer">データの書き込み元となるバッファー。</param>
      <param name="offset">書き込むデータの開始位置を示す <paramref name="buffer" /> 内のバイト オフセット。</param>
      <param name="count">書き込む最大バイト数。</param>
      <param name="callback">書き込みの完了時に呼び出されるオプションの非同期コールバック。</param>
      <param name="state">この特定の非同期書き込み要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</param>
      <returns>非同期の書き込みを表す <see langword="IAsyncResult" />。まだ保留状態の場合もあります。</returns>
      <exception cref="T:System.IO.IOException">メモリ ストリームの末尾を越えて非同期の書き込みを実行しようとしました。または、ディスク エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentException">1 つ以上の引数が無効です。</exception>
      <exception cref="T:System.ObjectDisposedException">メモリ ストリームが閉じられた後にメソッドが呼び出されました。</exception>
      <exception cref="T:System.NotSupportedException">現在のメモリ ストリームの実装では、書き込み操作はサポートされていません。</exception>
    </member>
    <member name="P:System.IO.MemoryStream.CanRead">
      <summary>現在のストリームが読み取りをサポートしているかどうかを示す値を取得します。</summary>
      <returns>ストリームが開いている場合は <see langword="true" />。</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanSeek">
      <summary>現在のストリームがシークをサポートしているかどうかを示す値を取得します。</summary>
      <returns>ストリームが開いている場合は <see langword="true" />。</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanWrite">
      <summary>現在のストリームが書き込みをサポートしているかどうかを示す値を取得します。</summary>
      <returns>ストリームが書き込みをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.MemoryStream.Capacity">
      <summary>ストリームに割り当てられたバイト数を取得または設定します。</summary>
      <returns>ストリームに対してバッファーが使用できる部分の長さ。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">容量が負の値または現在のストリーム長より小さい値に設定されています。</exception>
      <exception cref="T:System.ObjectDisposedException">現在のストリームが閉じられます。</exception>
      <exception cref="T:System.NotSupportedException">容量を変更できないストリームに対して <see langword="set" /> が呼び出されました。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>指定したバッファー サイズを使用して、現在のメモリ ストリームからバイトを読み取り、別のストリームに書き込みます。</summary>
      <param name="destination">現在のメモリ ストリームの内容のコピー先となるストリーム。</param>
      <param name="bufferSize">バッファーのサイズ。 これは、0 より大きい値である必要があります。 既定のサイズは 81920 です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> が正の数ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">基になるメモリ ストリームまたは <paramref name="destination" /> ストリームが閉じられています。</exception>
      <exception cref="T:System.NotSupportedException">基になるメモリ ストリームは読み取り不可です。

または -

<paramref name="destination" /> ストリームは書き込み不可です。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>指定されたバッファー サイズを使用して、現在のストリームからすべてのバイトを非同期に読み取り、指定されたバッファー サイズとキャンセル トークンを使用して、別のストリームに書き込みます。</summary>
      <param name="destination">現在のストリームの内容のコピー先のストリーム。</param>
      <param name="bufferSize">バッファーのサイズ (バイト数)。 これは、0 より大きい値である必要があります。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。</param>
      <returns>非同期のコピー操作を表すタスク。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> が負の値またはゼロです。</exception>
      <exception cref="T:System.ObjectDisposedException">現在のストリームまたはコピー先ストリームは破棄されます。</exception>
      <exception cref="T:System.NotSupportedException">現在のストリームが読み取りをサポートしていないか、コピー先のストリームが書き込みをサポートしていません。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.MemoryStream" /> クラスによって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.MemoryStream.EndRead(System.IAsyncResult)">
      <summary>保留中の非同期読み取りが完了するまで待機します。 (代わりに、<see cref="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> の使用を検討してください。)</summary>
      <param name="asyncResult">終了させる保留状態の非同期リクエストへの参照。</param>
      <returns>メモリ ストリームから読み取ったバイト数 (0 から要求したバイト数の間の数値)。 メモリ ストリームの末尾の場合にのみゼロ (0) を返します。それ以外の場合、少なくとも 1 バイトが使用可能になるまでブロックします。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">保留中の読み取り操作へのハンドルは使用できません。

または -

保留中の操作は読み取りをサポートしていません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> は現在のメモリ ストリームの <see cref="M:System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> メソッドから取得されませんでした。</exception>
      <exception cref="T:System.IO.IOException">ストリームが閉じているか、内部エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.EndWrite(System.IAsyncResult)">
      <summary>非同期書き込み操作を終了します。 (代わりに、<see cref="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> の使用を検討してください。)</summary>
      <param name="asyncResult">保留状態の非同期 I/O リクエストへの参照。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">保留中の書き込み操作へのハンドルは使用できません。

または -

保留中の操作は書き込みをサポートしていません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> は現在のストリームの <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> メソッドから取得されませんでした。</exception>
      <exception cref="T:System.IO.IOException">ストリームが閉じているか、内部エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Flush">
      <summary>アクションが実行されないように、<see cref="M:System.IO.Stream.Flush" /> メソッドをオーバーライドします。</summary>
    </member>
    <member name="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>このストリームのすべてのバッファーを非同期的にクリアし、キャンセル要求を監視します。</summary>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。</param>
      <returns>非同期のフラッシュ操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">ストリームは破棄されています。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.GetBuffer">
      <summary>このストリームの作成元の符号なしバイトの配列を返します。</summary>
      <returns>このストリームの作成に使用したバイト配列。または、現在のインスタンスを構築するときに <see cref="T:System.IO.MemoryStream" /> コンストラクターにバイト配列が提供されなかった場合は、基になる配列。</returns>
      <exception cref="T:System.UnauthorizedAccessException">パブリックに参照できるバッファーを持つ <see langword="MemoryStream" /> インスタンスが作成されませんでした。</exception>
    </member>
    <member name="P:System.IO.MemoryStream.Length">
      <summary>バイト単位のストリーム長を取得します。</summary>
      <returns>バイト単位のストリーム長。</returns>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="P:System.IO.MemoryStream.Position">
      <summary>ストリームの現在位置を取得または設定します。</summary>
      <returns>ストリーム内の現在位置。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">位置が負の値または <see cref="F:System.Int32.MaxValue" /> より大きい値に設定されています。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>現在のストリームからバイトのブロックを読み取り、データをバッファーに書き込みます。</summary>
      <param name="buffer">このメソッドが戻るとき、指定したバイト配列の <paramref name="offset" /> から (<paramref name="offset" /> + <paramref name="count" /> - 1) までの値が、現在のストリームから読み取られた文字に置き換えられています。</param>
      <param name="offset">現在のストリームからのデータの格納を開始する位置を示す <paramref name="buffer" /> 内のバイト オフセット。インデックス番号は 0 から始まります。</param>
      <param name="count">読み取る最大バイト数。</param>
      <returns>バッファーに書き込まれた合計バイト数。 要求しただけのバイト数を読み取ることができなかった場合、この値は要求したバイト数より小さくなります。また、データを読み取る前にストリームの末尾に到達した場合は 0 になります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">バッファー長から <paramref name="offset" /> を差し引いた値が <paramref name="count" /> より小さい値です。</exception>
      <exception cref="T:System.ObjectDisposedException">現在のストリーム インスタンスが閉じています。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Span{System.Byte})">
      <summary>現在のメモリ ストリームからバイト シーケンスを読み取り、読み取ったバイト数だけメモリ ストリーム内の位置を進めます。</summary>
      <param name="destination">メモリの領域。 このメソッドから制御が戻るときに、このスパンの内容は、現在のメモリ ストリーム ソースから読み取られたバイトに置き換えられます。</param>
      <returns>バッファーに読み取られた合計バイト数。 要求しただけのバイト数を読み取ることができなかった場合、この値はバッファーに割り当てられているバイト数より小さくなります。メモリ ストリームの末尾に到達した場合は 0 (ゼロ) になることがあります。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>現在のストリームからバイト シーケンスを非同期に読み取り、読み取ったバイト数だけストリーム内の位置を進め、キャンセル要求を監視します。</summary>
      <param name="buffer">データを書き込むバッファー。</param>
      <param name="offset">ストリームからのデータの書き込み開始位置を示す <paramref name="buffer" /> 内のバイト オフセット。</param>
      <param name="count">読み取る最大バイト数。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。 現在使用できるバイト数が要求した数より小さい場合、結果の値は要求したバイト数より小さくなることがあります。また、ストリームの末尾に到達した場合は 0 になることがあります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> と <paramref name="count" /> の合計が、バッファーの長さよりも大きくなっています。</exception>
      <exception cref="T:System.NotSupportedException">ストリームは読み取りをサポートしません。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">ストリームは、前の読み取り操作によって現在使用されています。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>現在のメモリ ストリームからバイト シーケンスを非同期に読み取り、シーケンスを <paramref name="destination" /> に書き込み、読み取ったバイト数だけメモリ ストリーム内の位置を進め、キャンセル要求を監視します。</summary>
      <param name="destination">データを書き込むメモリの領域。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の読み取り操作を表すタスク。 その <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> プロパティの値には、<paramref name="destination" /> に読み取られたバイトの合計数が含まれます。 要求しただけのバイト数を読み取ることができなかった場合、結果の値は <paramref name="destination" /> に割り当てられているバイト数より小さくなります。メモリ ストリームの末尾に到達した場合は 0 (ゼロ) になることがあります。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.ReadByte">
      <summary>現在のストリームからバイトを読み取ります。</summary>
      <returns>
        <see cref="T:System.Int32" /> にキャストしたバイト。ストリームの末尾に達した場合は -1。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のストリーム インスタンスが閉じています。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>現在のストリーム内の位置を指定した値に設定します。</summary>
      <param name="offset">ストリームの新しい位置。 これは <paramref name="loc" /> パラメーターに対する相対値であり、正または負の値にできます。</param>
      <param name="loc">シーク参照ポイントとして機能する <see cref="T:System.IO.SeekOrigin" /> 型の値。</param>
      <returns>初期参照ポイントとオフセットを組み合わせて計算するストリーム内の新しい位置。</returns>
      <exception cref="T:System.IO.IOException">シークがストリームの開始前に試行されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</exception>
      <exception cref="T:System.ArgumentException">無効な <see cref="T:System.IO.SeekOrigin" /> があります。

または -
<paramref name="offset" /> によって算術オーバーフローが発生しました。</exception>
      <exception cref="T:System.ObjectDisposedException">現在のストリーム インスタンスが閉じています。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
      <summary>現在のストリーム長を指定した値に設定します。</summary>
      <param name="value">長さを設定する値。</param>
      <exception cref="T:System.NotSupportedException">現在のストリームのサイズが変更できません。<paramref name="value" /> が現在の容量を超えています。

または -
現在のストリームが書き込みをサポートしません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> が負または <see cref="T:System.IO.MemoryStream" /> の最大長より大きな値です。最大長は、(<see cref="F:System.Int32.MaxValue" /> - origin) で計算され、origin は、ストリームが開始する位置を示す基になるバッファーのインデックスです。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ToArray">
      <summary>
        <see cref="P:System.IO.MemoryStream.Position" /> プロパティには関係なく、ストリームの内容をバイト配列に書き込みます。</summary>
      <returns>新しいバイト配列。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)">
      <summary>このストリームの作成元の符号なしバイトの配列を返します。 戻り値は、変換が成功したかどうかを示します。</summary>
      <param name="buffer">このストリームの作成元のバイト配列セグメント。</param>
      <returns>変換が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>バッファーから読み取ったデータを使用して、現在のストリームにバイトのブロックを書き込みます。</summary>
      <param name="buffer">データの書き込み元となるバッファー。</param>
      <param name="offset">現在のストリームへのバイトのコピーを開始する位置を示す <paramref name="buffer" /> 内のバイト オフセット。インデックス番号は 0 から始まります。</param>
      <param name="count">書き込む最大バイト数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">ストリームは書き込みをサポートしません。 詳細については、<see cref="P:System.IO.Stream.CanWrite" /> のトピックを参照してください。

または -
現在の位置が、ストリームの末尾に向かって <paramref name="count" /> バイトよりも近い位置にあり、容量を変更できません。</exception>
      <exception cref="T:System.ArgumentException">バッファー長から <paramref name="offset" /> を差し引いた値が <paramref name="count" /> より小さい値です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">現在のストリーム インスタンスが閉じています。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>
        <paramref name="source" /> に含まれるバイト シーケンスを現在のメモリ ストリームに書き込み、書き込まれたバイト数だけ、このメモリ ストリーム内の現在の位置を進めます。</summary>
      <param name="source">メモリの領域。 このメソッドを使うと、この領域の内容が現在のメモリ ストリームにコピーされます。</param>
    </member>
    <member name="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>現在のストリームにバイト シーケンスを非同期に書き込み、書き込んだバイト数だけストリーム内の現在位置を進め、キャンセル要求を監視します。</summary>
      <param name="buffer">データの書き込み元となるバッファー。</param>
      <param name="offset">ストリームへのバイトのコピーを開始する位置を示す <paramref name="buffer" /> 内のバイト オフセット。インデックス番号は 0 から始まります。</param>
      <param name="count">書き込む最大バイト数。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> と <paramref name="count" /> の合計が、バッファーの長さよりも大きいです。</exception>
      <exception cref="T:System.NotSupportedException">ストリームは書き込みをサポートしません。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">ストリームは、前の書き込み操作によって現在使用されています。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>
        <paramref name="source" /> に含まれるバイト シーケンスを現在のメモリ ストリームに非同期で書き込み、書き込まれたバイト数だけ、このメモリ ストリーム内の現在の位置を進め、キャンセル要求を監視します。</summary>
      <param name="source">データを書き込む元のメモリの領域。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
      <summary>現在のストリーム内の現在位置に 1 バイトを書き込みます。</summary>
      <param name="value">書き込むバイト。</param>
      <exception cref="T:System.NotSupportedException">ストリームは書き込みをサポートしません。 詳細については、<see cref="P:System.IO.Stream.CanWrite" /> のトピックを参照してください。

または -
現在の位置がストリームの末尾になっており、容量を変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">現在のストリームが閉じられます。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
      <summary>メモリ ストリームの内容全体を別のストリームに書き込みます。</summary>
      <param name="stream">このメモリ ストリームが書き込まれるストリーム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ObjectDisposedException">現在のストリームまたは対象のストリームは閉じています。</exception>
    </member>
    <member name="T:System.IO.Path">
      <summary>ファイルまたはディレクトリのパス情報を格納する <see cref="T:System.String" /> インスタンスで操作を実行します。 これらの操作は、プラットフォーム間で実行されます。</summary>
    </member>
    <member name="F:System.IO.Path.AltDirectorySeparatorChar">
      <summary>階層ファイル システム編成を反映するパス文字列の、ディレクトリ レベルを区切るために使用する、プラットフォーム固有の代替文字を提供します。</summary>
    </member>
    <member name="M:System.IO.Path.ChangeExtension(System.String,System.String)">
      <summary>パス文字列の拡張子を変更します。</summary>
      <param name="path">変更するパス情報。 パスに、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義された文字を含めることはできません。</param>
      <param name="extension">新しい拡張子 (先行ピリオド付き、またはなし)。 <see langword="null" /> を指定して、<paramref name="path" /> から既存の拡張子を削除します。</param>
      <returns>変更されたパス情報。
Windows ベースのデスクトップ プラットフォームでは、<paramref name="path" /> が <see langword="null" /> または空の文字列 ("") の場合、パス情報は変更されずに返されます。 <paramref name="extension" /> が <see langword="null" /> の場合は、返される文字列に、削除した拡張子が付いた指定したパスが含まれます。 <paramref name="path" /> に拡張子がなく、<paramref name="extension" /> が <see langword="null" /> でない場合は、返されるパス文字列に <paramref name="path" /> の末尾に追加される <paramref name="extension" /> が含まれます。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String)">
      <summary>2 つの文字列を 1 つのパスに結合します。</summary>
      <param name="path1">結合する 1 番目のパス。</param>
      <param name="path2">結合する 2 番目のパス。</param>
      <returns>結合されたパス。 指定したパスの 1 つが長さ 0 の文字列の場合、このメソッドは別のパスを返します。 <paramref name="path2" /> に絶対パスが含まれる場合、このメソッドは <paramref name="path2" /> を返します。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" /> または <paramref name="path2" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" /> または <paramref name="path2" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String)">
      <summary>3 つの文字列を 1 つのパスに結合します。</summary>
      <param name="path1">結合する 1 番目のパス。</param>
      <param name="path2">結合する 2 番目のパス。</param>
      <param name="path3">結合する 3 番目のパス。</param>
      <returns>結合されたパス。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />、<paramref name="path2" />、または <paramref name="path3" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />、<paramref name="path2" />、または <paramref name="path3" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)">
      <summary>4 つの文字列を 1 つのパスに結合します。</summary>
      <param name="path1">結合する 1 番目のパス。</param>
      <param name="path2">結合する 2 番目のパス。</param>
      <param name="path3">結合する 3 番目のパス。</param>
      <param name="path4">結合する 4 番目のパス。</param>
      <returns>結合されたパス。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" />、または <paramref name="path4" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" />、または <paramref name="path4" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String[])">
      <summary>文字列の配列を 1 つのパスに結合します。</summary>
      <param name="paths">パスの構成要素の配列。</param>
      <returns>結合されたパス。</returns>
      <exception cref="T:System.ArgumentException">配列内の文字列の 1 つが、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義された無効な文字を 1 つ以上含んでいます。</exception>
      <exception cref="T:System.ArgumentNullException">配列内の文字列の 1 つが <see langword="null" /> です。</exception>
    </member>
    <member name="F:System.IO.Path.DirectorySeparatorChar">
      <summary>階層ファイル システム編成を反映するパス文字列の、ディレクトリ レベルを区切るために使用する、プラットフォーム固有の文字を提供します。</summary>
    </member>
    <member name="M:System.IO.Path.EndsInDirectorySeparator(System.ReadOnlySpan{System.Char})">
      <summary>読み取り専用スパンとして指定されているパスが、ディレクトリ区切り記号で終了するかどうかを示す値を返します。</summary>
      <param name="path">分析するパス。</param>
      <returns>パスがディレクトリ区切り記号で終わる場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.EndsInDirectorySeparator(System.String)">
      <summary>指定されているパスが、ディレクトリ区切り記号で終了するかどうかを示す値を返します。</summary>
      <param name="path">分析するパス。</param>
      <returns>パスがディレクトリ区切り記号で終わる場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.ReadOnlySpan{System.Char})">
      <summary>文字範囲で表された、指定されたパスのディレクトリ情報を返します。</summary>
      <param name="path">ディレクトリ情報を取得するパス。</param>
      <returns>
        <paramref name="path" /> のディレクトリ情報。<paramref name="path" /> が <see langword="null" />、空の範囲、またはルート (, C:、または \server\share) の場合は空の範囲。</returns>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.String)">
      <summary>指定したパス文字列のディレクトリ情報を返します。</summary>
      <param name="path">ファイルまたはディレクトリのパス。</param>
      <returns>
        <paramref name="path" /> のディレクトリ情報。<paramref name="path" /> がルート ディレクトリを示しているか null である場合は <see langword="null" />。 <paramref name="path" /> にディレクトリ情報が含まれていない場合は、<see cref="F:System.String.Empty" /> を返します。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> パラメーターは正しくない文字を含んでおり、空か、空白のみで構成されています。</exception>
      <exception cref="T:System.IO.PathTooLongException">Windows ストア アプリ用 .NET またはポータブル クラス ライブラリでは、基本クラスの例外である <see cref="T:System.IO.IOException" /> を代わりにキャッチします。  
  

            
  
 <paramref name="path" /> パラメーターは、システムで定義された最大長を超えています。</exception>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.ReadOnlySpan{System.Char})">
      <summary>読み取り専用の文字範囲で表されたファイル パスの拡張子を返します。</summary>
      <param name="path">拡張子の取得元のファイル パス。</param>
      <returns>指定されたパスの拡張子 (ピリオド "." を含む)。<paramref name="path" /> に拡張子情報が含まれていない場合は <see cref="P:System.ReadOnlySpan`1.Empty" />。</returns>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.String)">
      <summary>指定のパス文字列の拡張子 (ピリオド "." を含む) を返します。</summary>
      <param name="path">拡張子の取得元のパス文字列。</param>
      <returns>指定したパスの拡張子 (ピリオド "." を含む)、<see langword="null" />、または <see cref="F:System.String.Empty" />。 <paramref name="path" /> が <see langword="null" /> の場合、<see cref="M:System.IO.Path.GetExtension(System.String)" /> は <see langword="null" /> を返します。 <paramref name="path" /> が拡張子情報を持たない場合、<see cref="M:System.IO.Path.GetExtension(System.String)" /> は <see cref="F:System.String.Empty" /> を返します。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</exception>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})">
      <summary>読み取り専用の文字範囲で表されたファイル パスのファイル名と拡張子を返します。</summary>
      <param name="path">ファイル名と拡張子の取得元のパスを含む読み取り専用の範囲。</param>
      <returns>
        <paramref name="path" /> の最後のディレクトリ区切り文字の後の文字。</returns>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.String)">
      <summary>指定したパス文字列のファイル名と拡張子を返します。</summary>
      <param name="path">ファイル名と拡張子の取得元のパス文字列。</param>
      <returns>
        <paramref name="path" /> の最後のディレクトリ区切り文字の後の文字。 <paramref name="path" /> の最後の文字がディレクトリ区切り記号またはボリューム区切り記号の場合、このメソッドは <see cref="F:System.String.Empty" /> を返します。 <paramref name="path" /> が <see langword="null" /> の場合、このメソッドは <see langword="null" /> を返します。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</exception>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})">
      <summary>読み取り専用の文字範囲で表されたファイル パスの拡張子のないファイル名を返します。</summary>
      <param name="path">拡張子のないファイル名の取得元のパスを含む読み取り専用の範囲。</param>
      <returns>
        <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" /> によって返された読み取り専用の範囲内の文字 (最後のピリオド (.) と、その後に続くすべての文字を除く)。</returns>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.String)">
      <summary>指定したパス文字列のファイル名を拡張子を付けずに返します。</summary>
      <param name="path">ファイルのパス。</param>
      <returns>
        <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" /> によって返された文字列 (最後のピリオド (.) と、その後ろのすべての文字を除く)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String)">
      <summary>指定したパス文字列の絶対パスを返します。</summary>
      <param name="path">絶対パス情報を取得する対象のファイルまたはディレクトリ。</param>
      <returns>"C:\MyFile.txt" など、<paramref name="path" /> の完全修飾位置。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> が、長さが 0 の文字列であるか、空白しか含んでいないか、または <see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。

または -
システムが絶対パスを取得できませんでした。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> に、ボリュームの識別子 ("C:\") の一部ではないコロン (:) が含まれています。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String,System.String)">
      <summary>完全修飾ベース パスと相対パスから絶対パスを返します。</summary>
      <param name="path">
        <paramref name="basePath" /> に連結する相対パス。</param>
      <param name="basePath">完全修飾パスの先頭。</param>
      <returns>絶対パス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> または <paramref name="basePath" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="basePath" /> が完全修飾パスではありません。

または -

<paramref name="path" /> または <paramref name="basePath" /> に無効なパス文字 (U+0000 など) が含まれています。</exception>
    </member>
    <member name="M:System.IO.Path.GetInvalidFileNameChars">
      <summary>ファイル名に使用できない文字を含む配列を取得します。</summary>
      <returns>ファイル名に使用できない文字を含む配列。</returns>
    </member>
    <member name="M:System.IO.Path.GetInvalidPathChars">
      <summary>パス名に使用できない文字を含む配列を取得します。</summary>
      <returns>パス名に使用できない文字を含む配列。</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.ReadOnlySpan{System.Char})">
      <summary>指定した文字範囲に含まれるパスから、ルート ディレクトリ情報を取得します。</summary>
      <param name="path">ルート ディレクトリ情報の取得元のパスを含む文字の読み取り専用スパン。</param>
      <returns>
        <paramref name="path" /> のルート ディレクトリを含む文字の読み取り専用スパン。</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.String)">
      <summary>指定した文字列に含まれるパスから、ルート ディレクトリ情報を取得します。</summary>
      <param name="path">ルート ディレクトリ情報の取得元のパスを含む文字列。</param>
      <returns>ルートである場合は <paramref name="path" /> のルート ディレクトリ。

または -
<paramref name="path" /> にルート ディレクトリ情報が含まれていない場合は <see cref="F:System.String.Empty" />。

または -
<paramref name="path" /> が <see langword="null" /> の場合、またはが実質的に空の場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">.NET Framework のみ: <paramref name="path" /> には <see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字が 1 つ以上含まれています。

または -

.NET Framework のみ: <see cref="F:System.String.Empty" /> が <paramref name="path" /> に渡されました。</exception>
    </member>
    <member name="M:System.IO.Path.GetRandomFileName">
      <summary>ランダムなフォルダー名またはファイル名を返します。</summary>
      <returns>ランダムなフォルダー名またはファイル名。</returns>
    </member>
    <member name="M:System.IO.Path.GetRelativePath(System.String,System.String)">
      <summary>あるパスから別のパスへの相対パスを返します。</summary>
      <param name="relativeTo">結果の基準となるソース パス。 このパスは常にディレクトリと見なされます。</param>
      <param name="path">ターゲット パス。</param>
      <returns>相対パス。パスが同じルートを共有していない場合は <paramref name="path" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relativeTo" /> または <paramref name="path" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Path.GetTempFileName">
      <summary>一意な名前を持つ 0 バイトの一時ファイルをディスク上に作成し、そのファイルの完全パスを返します。</summary>
      <returns>一時ファイルの完全パス。</returns>
      <exception cref="T:System.IO.IOException">I/O エラー（例：一意の一時ファイル名を取得できない）が発生しました

または -

あるいは、このメソッドで一時ファイルを作成できませんでした。</exception>
    </member>
    <member name="M:System.IO.Path.GetTempPath">
      <summary>現在のユーザーの一時フォルダーのパスを返します。</summary>
      <returns>一時フォルダーのパス。バックスラッシュで終わります。</returns>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.ReadOnlySpan{System.Char})">
      <summary>指定された文字範囲で表されたパスにファイル名拡張子が含まれているかどうかを判断します。</summary>
      <param name="path">拡張子を検索するパス。</param>
      <returns>パスの最後のディレクトリ区切り文字またはボリューム区切り記号の後に続く文字にピリオド (".") が含まれ、その後に 1 つ以上の文字が続く場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.String)">
      <summary>パスにファイル名の拡張子が含まれているか判定します。</summary>
      <param name="path">拡張子を検索するパス。</param>
      <returns>パスの最後のディレクトリ区切り記号 (\\ または /) またはボリューム区切り記号 (:) の後に続く文字にピリオド (.) が含まれ、その後に 1 つ以上の文字が続く場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</exception>
    </member>
    <member name="F:System.IO.Path.InvalidPathChars">
      <summary>
        <see cref="T:System.IO.Path" /> クラスのメンバーに渡されるパス文字列引数で指定できないプラットフォーム固有の文字配列を提供します。</summary>
    </member>
    <member name="M:System.IO.Path.IsPathFullyQualified(System.ReadOnlySpan{System.Char})">
      <summary>指定された文字範囲で表されたファイル パスが、特定のドライブまたは UNC パスに固定されているかどうかを示す値を返します。</summary>
      <param name="path">ファイル パス。</param>
      <returns>パスが特定のドライブまたは UNC パスに固定されている場合は <see langword="true" />。パスが現在のドライブまたは作業ディレクトリを基準としている場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.IsPathFullyQualified(System.String)">
      <summary>指定されたファイル パスが特定のドライブまたは UNC パスに固定されているかどうかを示す値を返します。</summary>
      <param name="path">ファイル パス。</param>
      <returns>パスが特定のドライブまたは UNC パスに固定されている場合は <see langword="true" />。パスが現在のドライブまたは作業ディレクトリを基準としている場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.ReadOnlySpan{System.Char})">
      <summary>ファイル パスを表す指定された文字範囲にルートが含まれているかどうかを示す値を返します。</summary>
      <param name="path">テストするパス。</param>
      <returns>
        <paramref name="path" /> にルートが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.String)">
      <summary>指定されたパス文字列にルートが含まれているかどうかを示す値を返します。</summary>
      <param name="path">テストするパス。</param>
      <returns>
        <paramref name="path" /> にルートが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</exception>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>2 つのパス コンポーネントを単一のパスに連結します。</summary>
      <param name="path1">結合する最初のパスを含む文字範囲。</param>
      <param name="path2">結合する 2 番目のパスを含む文字範囲。</param>
      <returns>結合されたパス。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>3 つのパス コンポーネントを単一のパスに連結します。</summary>
      <param name="path1">結合する最初のパスを含む文字範囲。</param>
      <param name="path2">結合する 2 番目のパスを含む文字範囲。</param>
      <param name="path3">結合する 3 番目のパスを含む文字範囲。</param>
      <returns>連結されたパス。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>4 つのパス コンポーネントを単一のパスに連結します。</summary>
      <param name="path1">結合する最初のパスを含む文字範囲。</param>
      <param name="path2">結合する 2 番目のパスを含む文字範囲。</param>
      <param name="path3">結合する 3 番目のパスを含む文字範囲。</param>
      <param name="path4">結合する 4 番目のパスを含む文字範囲。</param>
      <returns>連結されたパス。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String)">
      <summary>2 つのパスを単一のパスに連結します。</summary>
      <param name="path1">結合する 1 番目のパス。</param>
      <param name="path2">結合する 2 番目のパス。</param>
      <returns>連結されたパス。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String,System.String)">
      <summary>3 つのパスを単一のパスに連結します。</summary>
      <param name="path1">結合する 1 番目のパス。</param>
      <param name="path2">結合する 2 番目のパス。</param>
      <param name="path3">結合する 3 番目のパス。</param>
      <returns>連結されたパス。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String,System.String,System.String)">
      <summary>4 つのパスを単一のパスに連結します。</summary>
      <param name="path1">結合する 1 番目のパス。</param>
      <param name="path2">結合する 2 番目のパス。</param>
      <param name="path3">結合する 3 番目のパス。</param>
      <param name="path4">結合する 4 番目のパス。</param>
      <returns>連結されたパス。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String[])">
      <summary>パスの配列を連結して 1 つのパスにします。</summary>
      <param name="paths">パスの配列。</param>
      <returns>連結されたパス。</returns>
    </member>
    <member name="F:System.IO.Path.PathSeparator">
      <summary>環境変数のパス文字列を区切るために使用するプラットフォーム固有の区切り記号。</summary>
    </member>
    <member name="M:System.IO.Path.TrimEndingDirectorySeparator(System.ReadOnlySpan{System.Char})">
      <summary>指定したパスのルート以降の末尾の区切り記号をトリミングします。</summary>
      <param name="path">トリミングするパス。</param>
      <returns>末尾のディレクトリ区切り記号を含まない <paramref name="path" />。</returns>
    </member>
    <member name="M:System.IO.Path.TrimEndingDirectorySeparator(System.String)">
      <summary>指定したパスのルート以降の末尾の区切り記号をトリミングします。</summary>
      <param name="path">トリミングするパス。</param>
      <returns>末尾のディレクトリ区切り記号を含まない <paramref name="path" />。</returns>
    </member>
    <member name="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
      <summary>2 つのパス コンポーネントを事前に割り当てられた単一の文字範囲に連結することを試み、この操作が成功したかどうかを示す値を返します。</summary>
      <param name="path1">結合する最初のパスを含む文字範囲。</param>
      <param name="path2">結合する 2 番目のパスを含む文字範囲。</param>
      <param name="path3">結合する 3 番目のパスを含む文字範囲。</param>
      <param name="destination">連結されたパスを保持する文字範囲。</param>
      <param name="charsWritten">メソッドから制御が戻ったときに、<paramref name="destination" /> に書き込まれた文字数を示す値。</param>
      <returns>連結操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
      <summary>2 つのパス コンポーネントを事前に割り当てられた単一の文字範囲に連結することを試み、この操作が成功したかどうかを示す値を返します。</summary>
      <param name="path1">結合する最初のパスを含む文字範囲。</param>
      <param name="path2">結合する 2 番目のパスを含む文字範囲。</param>
      <param name="destination">連結されたパスを保持する文字範囲。</param>
      <param name="charsWritten">メソッドから制御が戻ったときに、<paramref name="destination" /> に書き込まれた文字数を示す値。</param>
      <returns>連結操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="F:System.IO.Path.VolumeSeparatorChar">
      <summary>プラットフォーム固有のボリューム区切り記号を提供します。</summary>
    </member>
    <member name="T:System.IO.StreamReader">
      <summary>特定のエンコーディングのバイト ストリームから文字を読み込む <see cref="T:System.IO.TextReader" /> を実装します。</summary>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream)">
      <summary>指定したストリーム用の <see cref="T:System.IO.StreamReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">読み込まれるストリーム。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> は読み取りをサポートしていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>バイト順マーク検出オプションを設定して、指定したストリーム用の <see cref="T:System.IO.StreamReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">読み込まれるストリーム。</param>
      <param name="detectEncodingFromByteOrderMarks">ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> は読み取りをサポートしていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>文字エンコーディングを設定して、指定したストリーム用の <see cref="T:System.IO.StreamReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">読み込まれるストリーム。</param>
      <param name="encoding">使用する文字エンコーディング。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> は読み取りをサポートしていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> または <paramref name="encoding" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>文字エンコーディングとバイト順マーク検出オプションを設定して、指定したストリーム用の <see cref="T:System.IO.StreamReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">読み込まれるストリーム。</param>
      <param name="encoding">使用する文字エンコーディング。</param>
      <param name="detectEncodingFromByteOrderMarks">ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> は読み取りをサポートしていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> または <paramref name="encoding" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>文字エンコーディング、バイト順マーク検出オプション、およびバッファー サイズを設定して、指定したストリーム用の <see cref="T:System.IO.StreamReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">読み込まれるストリーム。</param>
      <param name="encoding">使用する文字エンコーディング。</param>
      <param name="detectEncodingFromByteOrderMarks">ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。</param>
      <param name="bufferSize">最小バッファー サイズ。</param>
      <exception cref="T:System.ArgumentException">ストリームは読み取りをサポートしません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> または <paramref name="encoding" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> が 0 以下です。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)">
      <summary>指定した文字エンコーディング、バイト順マーク検出オプション、およびバッファー サイズに基づいて、指定したストリーム用の <see cref="T:System.IO.StreamReader" /> クラスの新しいインスタンスを初期化し、必要に応じて、ストリームを開いたままにします。</summary>
      <param name="stream">読み取るストリーム。</param>
      <param name="encoding">使用する文字エンコーディング。</param>
      <param name="detectEncodingFromByteOrderMarks">ファイルの先頭にあるバイト順序マークを検索する場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</param>
      <param name="bufferSize">最小バッファー サイズ。</param>
      <param name="leaveOpen">
        <see cref="T:System.IO.StreamReader" /> オブジェクトを破棄した後にストリームを開いたままにする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String)">
      <summary>指定したファイル名用の <see cref="T:System.IO.StreamReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="path">読み込まれる完全なファイルパス。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> が空の文字列 ("") です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりません。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">マップされていないドライブにあるなど、指定されたパスが無効です。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> に、ファイル名、ディレクトリ名、またはボリューム ラベルとしては不正または無効な構文が含まれています。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Boolean)">
      <summary>指定したバイト オーダー マーク検出オプションを使用して、指定したファイル名用の <see cref="T:System.IO.StreamReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="path">読み込まれる完全なファイルパス。</param>
      <param name="detectEncodingFromByteOrderMarks">ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> が空の文字列 ("") です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりません。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">マップされていないドライブにあるなど、指定されたパスが無効です。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> に、ファイル名、ディレクトリ名、またはボリューム ラベルとしては不正または無効な構文が含まれています。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding)">
      <summary>文字エンコーディングを設定して、指定したファイル名用の <see cref="T:System.IO.StreamReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="path">読み込まれる完全なファイルパス。</param>
      <param name="encoding">使用する文字エンコーディング。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> が空の文字列 ("") です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> または <paramref name="encoding" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりません。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">マップされていないドライブにあるなど、指定されたパスが無効です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> に、ファイル名、ディレクトリ名、またはボリューム ラベルとしては不正または無効な構文が含まれています。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>文字エンコーディングとバイト順マーク検出オプションを設定して、指定したファイル名用の <see cref="T:System.IO.StreamReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="path">読み込まれる完全なファイルパス。</param>
      <param name="encoding">使用する文字エンコーディング。</param>
      <param name="detectEncodingFromByteOrderMarks">ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> が空の文字列 ("") です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> または <paramref name="encoding" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりません。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">マップされていないドライブにあるなど、指定されたパスが無効です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> に、ファイル名、ディレクトリ名、またはボリューム ラベルとしては不正または無効な構文が含まれています。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>文字エンコーディング、バイト順マーク検出オプション、およびバッファー サイズを設定して、指定したファイル名の <see cref="T:System.IO.StreamReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="path">読み込まれる完全なファイルパス。</param>
      <param name="encoding">使用する文字エンコーディング。</param>
      <param name="detectEncodingFromByteOrderMarks">ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。</param>
      <param name="bufferSize">最小バッファーサイズ。単位は、16 ビット文字数です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> が空の文字列 ("") です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> または <paramref name="encoding" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりません。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">マップされていないドライブにあるなど、指定されたパスが無効です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> に、ファイル名、ディレクトリ名、またはボリューム ラベルの正しくない構文、または使用できない構文が含まれています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> が 0 以下です。</exception>
    </member>
    <member name="P:System.IO.StreamReader.BaseStream">
      <summary>基になるストリームを返します。</summary>
      <returns>基になるストリーム。</returns>
    </member>
    <member name="M:System.IO.StreamReader.Close">
      <summary>
        <see cref="T:System.IO.StreamReader" /> オブジェクトと、その基になるストリームを閉じ、リーダーに関連付けられたすべてのシステム リソースを解放します。</summary>
    </member>
    <member name="P:System.IO.StreamReader.CurrentEncoding">
      <summary>現在の <see cref="T:System.IO.StreamReader" /> オブジェクトが使用している現在の文字エンコーディングを取得します。</summary>
      <returns>現在のリーダーが使用している現在の文字エンコーディング。 <see cref="T:System.IO.StreamReader" /> の <see cref="Overload:System.IO.StreamReader.Read" /> メソッドを最初に呼び出した後、現在の文字エンコーディングを示す値が異なる場合があります。これは、<see cref="Overload:System.IO.StreamReader.Read" /> メソッドの最初の呼び出しまでエンコードの自動検出が実行されないためです。</returns>
    </member>
    <member name="M:System.IO.StreamReader.DiscardBufferedData">
      <summary>内部バッファーをクリアします。</summary>
    </member>
    <member name="M:System.IO.StreamReader.Dispose(System.Boolean)">
      <summary>基になるストリームを閉じ、<see cref="T:System.IO.StreamReader" /> によって使用されているアンマネージド リソースを解放します。任意でマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.IO.StreamReader.EndOfStream">
      <summary>現在のストリームの位置がストリームの末尾かどうかを示す値を取得します。</summary>
      <returns>現在のストリームの位置がストリームの末尾の場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">基になるストリームは破棄されています。</exception>
    </member>
    <member name="F:System.IO.StreamReader.Null">
      <summary>空のストリームの <see cref="T:System.IO.StreamReader" /> オブジェクト。</summary>
    </member>
    <member name="M:System.IO.StreamReader.Peek">
      <summary>読み取り可能な次の文字を返しますが、その文字は使用されません。</summary>
      <returns>読み取り対象の次の文字を表す整数。読み取り対象の文字が存在しない場合またはストリームがシークをサポートしていない場合は -1。</returns>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read">
      <summary>入力ストリームから次の文字を読み込み、1 文字分だけ文字位置を進めます。</summary>
      <returns>入力ストリームの次の文字を <see cref="T:System.Int32" /> オブジェクトで表した値。使用できる文字がない場合は -1。</returns>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>指定したインデックスを開始位置として、現在のストリームから、指定された最大文字数をバッファー内に読み取ります。</summary>
      <param name="buffer">このメソッドが戻るとき、指定した文字配列の <paramref name="index" /> から (<c>index + count - 1</c>) までの値が、現在のソースから読み取られた文字に置き換えられています。</param>
      <param name="index">書き込みの開始位置を示す <paramref name="buffer" /> のインデックス。</param>
      <param name="count">読み取り対象の最大文字数。</param>
      <returns>読み込まれた文字数。ストリームの末尾でデータが読み込まれなかった場合は 0。 この数値は、ストリーム内に使用できるデータがあるかどうかによって異なりますが、<paramref name="count" /> パラメーター以下の数値になります。</returns>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。たとえば、ストリームがクローズされています。</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Span{System.Char})">
      <summary>現在のストリームからスパンに文字を読み込みます。</summary>
      <param name="buffer">このメソッドから制御が戻るときに、指定した文字のスパンが現在のソースから読み取られた文字に置き換えられます。</param>
      <returns>読み込まれた文字数。ストリームの末尾でデータが読み込まれなかった場合は 0。 この数値は、ストリーム内に使用できるデータがあるかどうかによって異なりますが、<paramref name="buffer" /> の長さ以下の数値になります。</returns>
      <exception cref="T:System.IO.IOException">ストリームから読み取った文字数が、<paramref name="buffer" /> の長さを超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>指定した最大文字数を現在のストリームから非同期的に読み取り、バッファーの指定したインデックス位置にそのデータを書き込みます。</summary>
      <param name="buffer">このメソッドが戻るとき、指定した文字配列の <paramref name="index" /> から (<paramref name="index" /> + <paramref name="count" /> - 1) までの値が、現在のソースから読み取られた文字に置き換えられます。</param>
      <param name="index">書き込みを開始する <paramref name="buffer" /> 内の位置。</param>
      <param name="count">読み取り対象の最大文字数。 指定された文字数をバッファーに書き込む前にストリームの末尾に到達した場合は現在のメソッドが返ります。</param>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれる文字の合計数が含まれます。 現在使用できる文字数が要求した数より小さい場合、結果の値は要求した文字数より小さくなることがあります。また、ストリームの末尾に到達した場合は 0 になることがあります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> と <paramref name="count" /> の合計が、バッファーの長さよりも大きくなっています。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">リーダーは、前の読み取り操作によって現在使用されています。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>現在のストリームからメモリ ブロックに文字を非同期に読み取ります。</summary>
      <param name="buffer">このメソッドから制御が戻るときに、指定した文字のメモリ ブロックが現在のソースから読み取られた文字に置き換えられます。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の読み取り操作を表す値タスク。 値タスクの type パラメーターの値には、読み取られた文字数が格納されます。ストリームの末尾でデータが読み取られなかった場合は 0 です。 この数値は、ストリーム内に使用できるデータがあるかどうかによって異なりますが、<paramref name="buffer" /> の長さ以下の数値になります。</returns>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>指定した最大文字数を現在のストリームから読み取り、バッファーの指定したインデックス位置にそのデータを書き込みます。</summary>
      <param name="buffer">このメソッドが戻るとき、指定した文字配列の <paramref name="index" /> から (<c>index + count - 1</c>) までの値が、現在のソースから読み取られた文字に置き換えられています。</param>
      <param name="index">書き込みを開始する <paramref name="buffer" /> 内の位置。</param>
      <param name="count">読み取り対象の最大文字数。</param>
      <returns>読み取られた文字数。 この数値は、すべての入力文字が読み取られたかどうかによって異なりますが、<paramref name="count" /> 以下の数値になります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.StreamReader" /> は閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlock(System.Span{System.Char})">
      <summary>現在のストリームから文字を読み取り、データをバッファーに書き込みます。</summary>
      <param name="buffer">このメソッドから制御が戻るときに、指定した文字のスパンが現在のソースから読み取られた文字に置き換えられます。</param>
      <returns>読み取られた文字数。 この数値は、すべての入力文字が読み取られたかどうかに応じて、<paramref name="buffer" /> の長さより小さいか等しくなります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.StreamReader" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>指定した最大文字数を現在のストリームから非同期的に読み取り、バッファーの指定したインデックス位置にそのデータを書き込みます。</summary>
      <param name="buffer">このメソッドが戻るとき、指定した文字配列の <paramref name="index" /> から (<paramref name="index" /> + <paramref name="count" /> - 1) までの値が、現在のソースから読み取られた文字に置き換えられます。</param>
      <param name="index">書き込みを開始する <paramref name="buffer" /> 内の位置。</param>
      <param name="count">読み取り対象の最大文字数。 指定された文字数をバッファーに書き込む前にストリームの末尾に到達した場合、メソッドは制御を返します。</param>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれる文字の合計数が含まれます。 現在使用できる文字数が要求した数より小さい場合、結果の値は要求した文字数より小さくなることがあります。また、ストリームの末尾に到達した場合は 0 になることがあります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> と <paramref name="count" /> の合計が、バッファーの長さよりも大きくなっています。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">リーダーは、前の読み取り操作によって現在使用されています。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>現在のストリームから非同期に文字を読み取り、データをバッファーに書き込みます。</summary>
      <param name="buffer">このメソッドから制御が戻るときに、指定した文字のメモリ ブロックが現在のソースから読み取られた文字に置き換えられます。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の読み取り操作を表す値タスク。 値タスクの type パラメーターの値には、バッファーに読み込まれた文字の総数が格納されます。 現在使用できる文字数が要求した数より小さい場合、結果の値は要求した文字数より小さくなることがあります。また、ストリームの末尾に到達した場合は 0 になることがあります。</returns>
    </member>
    <member name="M:System.IO.StreamReader.ReadLine">
      <summary>現在のストリームから 1 行分の文字を読み取り、そのデータを文字列として返します。</summary>
      <returns>入力ストリームからの次の行。入力ストリームの末尾に到達した場合は <see langword="null" />。</returns>
      <exception cref="T:System.OutOfMemoryException">返却された文字列にバッファーを割り当てるには、メモリが不足しています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadLineAsync">
      <summary>現在のストリームから非同期的に 1 行分の文字を読み取り、そのデータを文字列として返します。</summary>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、ストリームの次の行が含まれます。または、すべての文字が読み取られた場合は <see langword="null" /> です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">次の行に含まれる文字数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">リーダーは、前の読み取り操作によって現在使用されています。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEnd">
      <summary>すべての文字の現在位置から末尾までを読み込みます。</summary>
      <returns>ストリームの現在位置から末尾までのストリームの残り部分 (文字列)。 現在の位置がストリームの末尾である場合は、空の文字列 ("") が返されます。</returns>
      <exception cref="T:System.OutOfMemoryException">返却された文字列にバッファーを割り当てるには、メモリが不足しています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEndAsync">
      <summary>現在位置からストリームの末尾まですべての文字を非同期的に読み取り、1 つの文字列として返します。</summary>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、現在位置からストリームの末尾までの文字から成る文字列が含まれます。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">文字数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">リーダーは、前の読み取り操作によって現在使用されています。</exception>
    </member>
    <member name="T:System.IO.StreamWriter">
      <summary>文字を特定のエンコーディングでストリームに書き込むための <see cref="T:System.IO.TextWriter" /> を実装しています。</summary>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream)">
      <summary>UTF-8 エンコーディングと既定のバッファー サイズを使用して、指定したストリーム用の <see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">書き込まれるストリーム。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> が書き込み可能ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>指定したエンコーディングと既定のバッファー サイズを使用して、指定したストリーム用の <see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">書き込まれるストリーム。</param>
      <param name="encoding">使用する文字エンコーディング。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> または <paramref name="encoding" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> が書き込み可能ではありません。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
      <summary>指定したエンコーディングとバッファー サイズを使用して、指定したストリーム用の <see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">書き込まれるストリーム。</param>
      <param name="encoding">使用する文字エンコーディング。</param>
      <param name="bufferSize">バイト単位のバッファー サイズ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> または <paramref name="encoding" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> が書き込み可能ではありません。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
      <summary>指定した円コーディングとバッファー サイズを使用して、指定したストリーム用の <see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化し、必要に応じて、ストリームを開いたままにします。</summary>
      <param name="stream">書き込まれるストリーム。</param>
      <param name="encoding">使用する文字エンコーディング。</param>
      <param name="bufferSize">バイト単位のバッファー サイズ。</param>
      <param name="leaveOpen">
        <see cref="T:System.IO.StreamWriter" /> オブジェクトを破棄した後にストリームを開いたままにする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> または <paramref name="encoding" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> が書き込み可能ではありません。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String)">
      <summary>既定のエンコーディングとバッファー サイズを使用して、指定したファイル用の <see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="path">書き込まれる完全なファイルパス。 <paramref name="path" /> はファイル名にすることもできます。</param>
      <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否されました。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> が空の文字列 ("") です。

または -
<paramref name="path" /> には、システム デバイスの名前 (com1、com2 など) が含まれます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> には、ファイル名、ディレクトリ名、またはボリューム ラベルの不正な構文または無効な構文が含まれています。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean)">
      <summary>既定のエンコーディングとバッファー サイズを使用して、指定したファイル用の <see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化します。 ファイルが存在する場合は、ファイルを上書きするか、またはファイルの末尾に追加できます。 ファイルが存在しない場合は、このコンストラクターが新しいファイルを作成します。</summary>
      <param name="path">書き込まれる完全なファイルパス。</param>
      <param name="append">データをファイルに追加する場合は <see langword="true" />、ファイルを上書きする場合は <see langword="false" />。 指定されたファイルが存在しない場合、このパラメーターは無効であり、コンストラクターは新しいファイルを作成します。</param>
      <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否されました。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> が空です。

または -
<paramref name="path" /> には、システム デバイスの名前 (com1、com2 など) が含まれます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> には、ファイル名、ディレクトリ名、またはボリューム ラベルの不正な構文または無効な構文が含まれています。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
      <summary>指定したエンコーディングと既定のバッファー サイズを使用して、指定したファイル用の <see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化します。 ファイルが存在する場合は、ファイルを上書きするか、またはファイルの末尾に追加できます。 ファイルが存在しない場合は、このコンストラクターが新しいファイルを作成します。</summary>
      <param name="path">書き込まれる完全なファイルパス。</param>
      <param name="append">データをファイルに追加する場合は <see langword="true" />、ファイルを上書きする場合は <see langword="false" />。 指定されたファイルが存在しない場合、このパラメーターは無効であり、コンストラクターは新しいファイルを作成します。</param>
      <param name="encoding">使用する文字エンコーディング。</param>
      <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否されました。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> が空です。

または -
<paramref name="path" /> には、システム デバイスの名前 (com1、com2 など) が含まれます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> には、ファイル名、ディレクトリ名、またはボリューム ラベルの不正な構文または無効な構文が含まれています。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
      <summary>指定したエンコーディングとバッファー サイズを使用して、指定したパス上の指定したファイル用の <see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化します。 ファイルが存在する場合は、ファイルを上書きするか、またはファイルの末尾に追加できます。 ファイルが存在しない場合は、このコンストラクターが新しいファイルを作成します。</summary>
      <param name="path">書き込まれる完全なファイルパス。</param>
      <param name="append">データをファイルに追加する場合は <see langword="true" />、ファイルを上書きする場合は <see langword="false" />。 指定されたファイルが存在しない場合、このパラメーターは無効であり、コンストラクターは新しいファイルを作成します。</param>
      <param name="encoding">使用する文字エンコーディング。</param>
      <param name="bufferSize">バイト単位のバッファー サイズ。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> が空の文字列 ("") です。

または -
<paramref name="path" /> には、システム デバイスの名前 (com1、com2 など) が含まれます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> または <paramref name="encoding" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> が負の値です。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> には、ファイル名、ディレクトリ名、またはボリューム ラベルの不正な構文または無効な構文が含まれています。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否されました。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
    </member>
    <member name="P:System.IO.StreamWriter.AutoFlush">
      <summary>
        <see cref="T:System.IO.StreamWriter" /> が呼び出されるたびに、<see cref="M:System.IO.StreamWriter.Write(System.Char)" /> によって基になるストリームに対するバッファーをフラッシュするかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.StreamWriter" /> に強制的にバッファーをフラッシュさせる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.StreamWriter.BaseStream">
      <summary>バッキング ストアと連結する、基になるストリームを取得します。</summary>
      <returns>この <see langword="StreamWriter" /> が書き込むストリーム。</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Close">
      <summary>現在の <see langword="StreamWriter" /> オブジェクトと基になるストリームを閉じます。</summary>
      <exception cref="T:System.Text.EncoderFallbackException">現在のエンコードは、Unicode サロゲート ペアの片方の表示をサポートしていません。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Dispose(System.Boolean)">
      <summary>バッファーに入れられたデータが基になるストリームに書き込まれ、<see cref="T:System.IO.StreamWriter" /> によって使用されているアンマネージド リソースが解放されます。必要に応じてマネージド リソースも解放されます。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
      <exception cref="T:System.Text.EncoderFallbackException">現在のエンコードは、Unicode サロゲート ペアの片方の表示をサポートしていません。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.DisposeAsync">
      <summary>バッファーされたデータを基になるストリームに非同期で書き込み、<see cref="T:System.IO.StreamWriter" /> で使用されるアンマネージド リソースを解放します。</summary>
      <returns>非同期の破棄操作を表すタスク。</returns>
    </member>
    <member name="P:System.IO.StreamWriter.Encoding">
      <summary>出力の書き込みに使用する <see cref="T:System.Text.Encoding" /> を取得します。</summary>
      <returns>現在のインスタンスのコンストラクターで指定した <see cref="T:System.Text.Encoding" />。エンコーディングを指定しなかった場合は、<see cref="T:System.Text.UTF8Encoding" />。</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Flush">
      <summary>現在のライターで使用したすべてのバッファーをクリアし、バッファー内のすべてのデータを基になるストリームに書き込みます。</summary>
      <exception cref="T:System.ObjectDisposedException">現在のライターがクローズされています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">現在のエンコードは、Unicode サロゲート ペアの片方の表示をサポートしていません。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.FlushAsync">
      <summary>このストリームのすべてのバッファーを非同期にクリアし、バッファー内のデータを基になるデバイスに書き込みます。</summary>
      <returns>非同期のフラッシュ操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">ストリームは破棄されています。</exception>
    </member>
    <member name="F:System.IO.StreamWriter.Null">
      <summary>バッキング ストアを持たない書き込み専用の <see langword="StreamWriter" /> を提供します。</summary>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char)">
      <summary>ストリームに文字を書き込みます。</summary>
      <param name="value">ストリームに書き込む文字。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> が true または <see cref="T:System.IO.StreamWriter" /> バッファーがいっぱいで、現在のライターが閉じられています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> が true または <see cref="T:System.IO.StreamWriter" /> バッファーがいっぱいで、<see cref="T:System.IO.StreamWriter" /> がストリームの末尾にあるため、基になる固定サイズのストリームにバッファーの内容を書き込むことができません。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[])">
      <summary>ストリームに文字配列を書き込みます。</summary>
      <param name="buffer">書き込むデータを格納する文字配列。 <paramref name="buffer" /> が <see langword="null" /> の場合は、何も書き込まれません。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> が true または <see cref="T:System.IO.StreamWriter" /> バッファーがいっぱいで、現在のライターが閉じられています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> が true または <see cref="T:System.IO.StreamWriter" /> バッファーがいっぱいで、<see cref="T:System.IO.StreamWriter" /> がストリームの末尾にあるため、基になる固定サイズのストリームにバッファーの内容を書き込むことができません。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>ストリームに文字配列の一部を書き込みます。</summary>
      <param name="buffer">書き込むデータを格納する文字配列。</param>
      <param name="index">データの読み取りを開始する、バッファー内の文字位置。</param>
      <param name="count">書き込む文字の最大数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> が true または <see cref="T:System.IO.StreamWriter" /> バッファーがいっぱいで、現在のライターが閉じられています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> が true または <see cref="T:System.IO.StreamWriter" /> バッファーがいっぱいで、<see cref="T:System.IO.StreamWriter" /> がストリームの末尾にあるため、基になる固定サイズのストリームにバッファーの内容を書き込むことができません。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>文字スパンをストリームに書き込みます。</summary>
      <param name="buffer">書き込む文字スパン。</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String)">
      <summary>ストリームに文字列を書き込みます。</summary>
      <param name="value">ストリームに書き込む文字列。 <paramref name="value" /> が null の場合は、何も書き込まれません。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> が true または <see cref="T:System.IO.StreamWriter" /> バッファーがいっぱいで、現在のライターが閉じられています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> が true または <see cref="T:System.IO.StreamWriter" /> バッファーがいっぱいで、<see cref="T:System.IO.StreamWriter" /> がストリームの末尾にあるため、基になる固定サイズのストリームにバッファーの内容を書き込むことができません。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列をストリームに書き込みます。</summary>
      <param name="format">複合書式設定文字列。</param>
      <param name="arg0">書式設定および書き込みをするオブジェクト。</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列をストリームに書き込みます。</summary>
      <param name="format">複合書式設定文字列。</param>
      <param name="arg0">書式設定および書き込みをする最初のオブジェクト。</param>
      <param name="arg1">書式設定および書き込みをする 2 番目のオブジェクト。</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列をストリームに書き込みます。</summary>
      <param name="format">複合書式設定文字列。</param>
      <param name="arg0">書式設定および書き込みをする最初のオブジェクト。</param>
      <param name="arg1">書式設定および書き込みをする 2 番目のオブジェクト。</param>
      <param name="arg2">書式設定および書き込みをする 3 番目のオブジェクト。</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object[])">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object[])" /> メソッドと同じセマンティクスを使用して、書式設定された文字列をストリームに書き込みます。</summary>
      <param name="format">複合書式設定文字列。</param>
      <param name="arg">書式設定および書き込みをする 0 個以上のオブジェクトを含むオブジェクト配列。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char)">
      <summary>文字を非同期でストリームに書き込みます。</summary>
      <param name="value">ストリームに書き込む文字。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">ストリーム ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">ストリーム ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>文字の部分配列をストリームに非同期で書き込みます。</summary>
      <param name="buffer">書き込むデータを格納する文字配列。</param>
      <param name="index">データの読み取りを開始する、バッファー内の文字位置。</param>
      <param name="count">書き込む文字の最大数。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> に <paramref name="count" /> を加算した値がバッファーの長さを超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリーム ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">ストリーム ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>文字メモリ領域をストリームに非同期で書き込みます。</summary>
      <param name="buffer">ストリームに書き込む文字メモリ領域。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.String)">
      <summary>文字列をストリームに非同期で書き込みます。</summary>
      <param name="value">ストリームに書き込む文字列。 <paramref name="value" /> が <see langword="null" /> の場合は、何も書き込まれません。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">ストリーム ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">ストリーム ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>文字スパンのテキスト表現、続いて行終端記号をストリームに書き込みます。</summary>
      <param name="buffer">ストリームに書き込む文字スパン。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String)">
      <summary>文字列を、続いて行終端記号をストリームに書き込みます。</summary>
      <param name="value">書き込む文字列。 <paramref name="value" /> が <see langword="null" /> の場合は、行終端記号だけを書き込みます。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列と新しい行をストリームに書き込みます。</summary>
      <param name="format">複合書式設定文字列。</param>
      <param name="arg0">書式設定および書き込みをするオブジェクト。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列と新しい行をストリームに書き込みます。</summary>
      <param name="format">複合書式設定文字列。</param>
      <param name="arg0">書式設定および書き込みをする最初のオブジェクト。</param>
      <param name="arg1">書式設定および書き込みをする 2 番目のオブジェクト。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object)" /> と同じセマンティクスを使用して、書式設定された文字列と新しい行をストリームに書き込みます。</summary>
      <param name="format">複合書式設定文字列。</param>
      <param name="arg0">書式設定および書き込みをする最初のオブジェクト。</param>
      <param name="arg1">書式設定および書き込みをする 2 番目のオブジェクト。</param>
      <param name="arg2">書式設定および書き込みをする 3 番目のオブジェクト。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object[])">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object)" /> と同じセマンティクスを使用して、書式設定された文字列と新しい行をストリームに書き込みます。</summary>
      <param name="format">複合書式設定文字列。</param>
      <param name="arg">書式設定および書き込みをする 0 個以上のオブジェクトを含むオブジェクト配列。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync">
      <summary>行終端記号をストリームに非同期で書き込みます。</summary>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">ストリーム ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">ストリーム ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char)">
      <summary>文字を、続いて行終端記号を非同期でストリームに書き込みます。</summary>
      <param name="value">ストリームに書き込む文字。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">ストリーム ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">ストリーム ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>文字の部分配列を、続いて行終端記号を非同期でストリームに書き込みます。</summary>
      <param name="buffer">データの書き込み元の文字配列。</param>
      <param name="index">データの読み取りを開始する、バッファー内の文字位置。</param>
      <param name="count">書き込む文字の最大数。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> に <paramref name="count" /> を加算した値がバッファーの長さを超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリーム ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">ストリーム ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>文字メモリ領域のテキスト表現を、続いて行終端記号を非同期でストリームに書き込みます。</summary>
      <param name="buffer">ストリームに書き込む文字メモリ領域。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.String)">
      <summary>文字列を、続いて行終端記号を非同期でストリームに書き込みます。</summary>
      <param name="value">書き込む文字列。 値が <see langword="null" /> の場合は、行終端記号だけが書き込まれます。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">ストリーム ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">ストリーム ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="T:System.IO.StringReader">
      <summary>文字列から読み取る <see cref="T:System.IO.TextReader" /> を実装します。</summary>
    </member>
    <member name="M:System.IO.StringReader.#ctor(System.String)">
      <summary>指定した文字列から読み取る <see cref="T:System.IO.StringReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="s">
        <see cref="T:System.IO.StringReader" /> を初期化する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.StringReader.Close">
      <summary>
        <see cref="T:System.IO.StringReader" /> を閉じます。</summary>
    </member>
    <member name="M:System.IO.StringReader.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.StringReader" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.StringReader.Peek">
      <summary>使用可能な次の文字を返しますが、その文字は使用されません。</summary>
      <returns>読み取る次の文字を表す整数。使用できる文字がないか、ストリームがシークをサポートしていない場合は-1。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のリーダーは閉じられています。</exception>
    </member>
    <member name="M:System.IO.StringReader.Read">
      <summary>入力文字列から次の文字を読み取り、1文字分だけ文字位置を進めます。</summary>
      <returns>基になる文字列の次の文字。使用できる文字がない場合は-1。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のリーダーは閉じられています。</exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>入力文字列から文字のブロックを読み取り、<paramref name="count" />によって文字位置を進めます。</summary>
      <param name="buffer">このメソッドが戻るとき、指定した文字配列の <paramref name="index" /> から (<paramref name="index" /> + <paramref name="count" /> - 1) までの値が、現在のソースから読み取られた文字に置き換えられます。</param>
      <param name="index">バッファー内の開始インデックス。</param>
      <param name="count">読み取る文字の数。</param>
      <returns>バッファーに読み取られた合計文字数。 要求された文字数を現在使用できない場合、これは要求した文字数より小さくなることがあります。また、基になる文字列の末尾に到達した場合は0になることもあります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ObjectDisposedException">現在のリーダーは閉じられています。</exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Span{System.Char})">
      <summary>現在の位置から開始して、入力文字列のすべての文字を読み取り、現在位置を入力文字列の末尾に進めます。</summary>
      <param name="buffer">このメソッドから制御が戻るときに、現在のソースから読み取られた文字を格納します。 読み取られた合計文字数が0の場合、スパンは変更されません。</param>
      <returns>バッファーに読み取られた合計文字数。</returns>
      <exception cref="T:System.ObjectDisposedException">現在の文字列リーダーインスタンスは閉じられています。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>指定した最大文字数を現在の文字列から非同期的に読み取り、指定したインデックスを開始位置として、バッファーにデータを書き込みます。</summary>
      <param name="buffer">このメソッドが戻るとき、指定した文字配列の <paramref name="index" /> から (<paramref name="index" /> + <paramref name="count" /> - 1) までの値が、現在のソースから読み取られた文字に置き換えられます。</param>
      <param name="index">書き込みを開始する <paramref name="buffer" /> 内の位置。</param>
      <param name="count">読み取る最大文字数。 指定された文字数がバッファーに書き込まれる前に文字列の末尾に到達した場合、メソッドはを返します。</param>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。 現在使用できるバイト数が要求した数より小さい場合、結果の値は要求したバイト数より小さくなることがあります。または、文字列の末尾に到達した場合は0になることがあります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> と <paramref name="count" /> の合計が、バッファーの長さよりも大きいです。</exception>
      <exception cref="T:System.ObjectDisposedException">文字列リーダーが破棄されました。</exception>
      <exception cref="T:System.InvalidOperationException">リーダーは、前の読み取り操作によって現在使用されています。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>現在の位置から開始して、入力文字列のすべての文字を非同期に読み取り、現在位置を入力文字列の末尾に進めます。</summary>
      <param name="buffer">このメソッドから制御が戻るときに、現在のソースから読み取られた文字を格納します。</param>
      <param name="cancellationToken">キャンセル要求を監視するトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれる文字の合計数が含まれます。</returns>
    </member>
    <member name="M:System.IO.StringReader.ReadBlock(System.Span{System.Char})">
      <summary>入力文字列のすべての文字を現在の位置から読み取り、現在位置を入力文字列の末尾に進めます。</summary>
      <param name="buffer">このメソッドから制御が戻るときに、現在のソースから読み取られた文字を格納します。 読み取られた合計文字数が0の場合、スパンは変更されません。</param>
      <returns>バッファーに読み取られた合計文字数。</returns>
      <exception cref="T:System.ObjectDisposedException">現在の文字列リーダーインスタンスは閉じられています。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>指定した最大文字数を現在の文字列から非同期的に読み取り、指定したインデックスを開始位置として、バッファーにデータを書き込みます。</summary>
      <param name="buffer">このメソッドが戻るとき、指定した文字配列の <paramref name="index" /> から (<paramref name="index" /> + <paramref name="count" /> - 1) までの値が、現在のソースから読み取られた文字に置き換えられます。</param>
      <param name="index">書き込みを開始する <paramref name="buffer" /> 内の位置。</param>
      <param name="count">読み取る最大文字数。 指定された文字数がバッファーに書き込まれる前に文字列の末尾に到達した場合、メソッドはを返します。</param>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。 現在使用できるバイト数が要求した数より小さい場合、結果の値は要求したバイト数より小さくなることがあります。または、文字列の末尾に到達した場合は0になることがあります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> と <paramref name="count" /> の合計が、バッファーの長さよりも大きいです。</exception>
      <exception cref="T:System.ObjectDisposedException">文字列リーダーが破棄されました。</exception>
      <exception cref="T:System.InvalidOperationException">リーダーは、前の読み取り操作によって現在使用されています。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>入力文字列から現在の位置を起点として、すべての文字を非同期に読み取り、現在位置を入力文字列の末尾に進めます。</summary>
      <param name="buffer">このメソッドから制御が戻るときに、現在のソースから読み取られた文字を格納します。 読み取られた合計文字数が0の場合、スパンは変更されません。</param>
      <param name="cancellationToken">キャンセル要求を監視するトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれる文字の合計数が含まれます。</returns>
    </member>
    <member name="M:System.IO.StringReader.ReadLine">
      <summary>現在の文字列から1行の文字を読み取り、そのデータを文字列として返します。</summary>
      <returns>現在の文字列の次の行。文字列の末尾に到達した場合は <see langword="null" />。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のリーダーは閉じられています。</exception>
      <exception cref="T:System.OutOfMemoryException">返却された文字列にバッファーを割り当てるには、メモリが不足しています。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadLineAsync">
      <summary>現在の文字列から文字の行を非同期に読み取り、そのデータを文字列として返します。</summary>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、文字列リーダーの次の行が含まれます。または、すべての文字が読み取られている場合は <see langword="null" /> ます。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">次の行に含まれる文字数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
      <exception cref="T:System.ObjectDisposedException">文字列リーダーが破棄されました。</exception>
      <exception cref="T:System.InvalidOperationException">リーダーは、前の読み取り操作によって現在使用されています。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEnd">
      <summary>現在位置から文字列の末尾までのすべての文字を読み取り、1つの文字列として返します。</summary>
      <returns>現在の位置から、基になる文字列の末尾までのコンテンツ。</returns>
      <exception cref="T:System.OutOfMemoryException">返却された文字列にバッファーを割り当てるには、メモリが不足しています。</exception>
      <exception cref="T:System.ObjectDisposedException">現在のリーダーは閉じられています。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEndAsync">
      <summary>現在位置から文字列の末尾まですべての文字を非同期的に読み取り、1つの文字列として返します。</summary>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、現在位置から文字列の末尾までの文字を含む文字列が含まれます。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">文字数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
      <exception cref="T:System.ObjectDisposedException">文字列リーダーが破棄されました。</exception>
      <exception cref="T:System.InvalidOperationException">リーダーは、前の読み取り操作によって現在使用されています。</exception>
    </member>
    <member name="T:System.IO.StringWriter">
      <summary>文字列に情報を書き込む <see cref="T:System.IO.TextWriter" /> を実装します。 情報は、基になる <see cref="T:System.Text.StringBuilder" /> に格納されます。</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor">
      <summary>
        <see cref="T:System.IO.StringWriter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.IFormatProvider)">
      <summary>指定した書式コントロールで <see cref="T:System.IO.StringWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="formatProvider">書式を制御する <see cref="T:System.IFormatProvider" /> オブジェクト。</param>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)">
      <summary>指定した <see cref="T:System.IO.StringWriter" /> への書き込みを行う <see cref="T:System.Text.StringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sb">書き込む <see cref="T:System.Text.StringBuilder" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)">
      <summary>指定した <see cref="T:System.IO.StringWriter" /> に書き込みを行い、指定した書式プロバイダーを持つ <see cref="T:System.Text.StringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sb">書き込む <see cref="T:System.Text.StringBuilder" /> オブジェクト。</param>
      <param name="formatProvider">書式を制御する <see cref="T:System.IFormatProvider" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.IO.StringWriter.Close">
      <summary>現在の <see cref="T:System.IO.StringWriter" />、および基になるストリームを閉じます。</summary>
    </member>
    <member name="M:System.IO.StringWriter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.StringWriter" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.IO.StringWriter.Encoding">
      <summary>出力の書き込みに使用する <see cref="T:System.Text.Encoding" /> を取得します。</summary>
      <returns>出力の書き込み時に適用する <see langword="Encoding" />。</returns>
    </member>
    <member name="M:System.IO.StringWriter.FlushAsync">
      <summary>現在のライターのすべてのバッファーを非同期にクリアし、バッファー内のデータを基になるデバイスに書き込みます。</summary>
      <returns>非同期のフラッシュ操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.StringWriter.GetStringBuilder">
      <summary>基になる <see cref="T:System.Text.StringBuilder" /> を返します。</summary>
      <returns>基になる <see langword="StringBuilder" />。</returns>
    </member>
    <member name="M:System.IO.StringWriter.ToString">
      <summary>現在の <see langword="StringWriter" /> に書き込まれた文字を格納している文字列を返します。</summary>
      <returns>現在の <see langword="StringWriter" /> に書き込まれた文字を格納している文字列。</returns>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char)">
      <summary>文字列に文字を書き込みます。</summary>
      <param name="value">書き込む文字。</param>
      <exception cref="T:System.ObjectDisposedException">ライターが閉じています。</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>文字配列の一部を文字列に書き込みます。</summary>
      <param name="buffer">データの書き込み元の文字配列。</param>
      <param name="index">データの読み取りを開始する、バッファー内の位置。</param>
      <param name="count">書き込む文字の最大数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">(<paramref name="index" /> + <paramref name="count" />)&gt; <paramref name="buffer" />. <see langword="Length" />。</exception>
      <exception cref="T:System.ObjectDisposedException">ライターが閉じています。</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>文字のスパンの文字列形式を現在の文字列に書き込みます。</summary>
      <param name="buffer">文字列に書き込む文字のスパン。</param>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.String)">
      <summary>現在の文字列に文字列を書き込みます。</summary>
      <param name="value">書き込む文字列。</param>
      <exception cref="T:System.ObjectDisposedException">ライターが閉じています。</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Text.StringBuilder)">
      <summary>文字列ビルダーの文字列形式を現在の文字列に書き込みます。</summary>
      <param name="value">文字列に書き込む文字列ビルダー。</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char)">
      <summary>文字列に文字を非同期的に書き込みます。</summary>
      <param name="value">文字列に書き込む文字。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">文字列ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">文字列ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>文字の部分配列を文字列に非同期で書き込みます。</summary>
      <param name="buffer">データの書き込み元の文字配列。</param>
      <param name="index">データの読み取りを開始する、バッファー内の位置。</param>
      <param name="count">書き込む文字の最大数。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> に <paramref name="count" /> を加算した値がバッファーの長さを超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ObjectDisposedException">文字列ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">文字列ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>文字のメモリ領域を文字列に非同期で書き込みます。</summary>
      <param name="buffer">文字列に書き込む文字メモリ領域。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.String)">
      <summary>現在の文字列に文字列を非同期的に書き込みます。</summary>
      <param name="value">書き込む文字列。 <paramref name="value" /> が <see langword="null" /> の場合は、何もテキスト ストリームに書き込みません。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">文字列ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">文字列ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>文字列ビルダーのテキスト表現を文字列に非同期で書き込みます。</summary>
      <param name="value">文字列に書き込む文字列ビルダー。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>テキスト表現、文字のスパンを、続いて行終端記号を文字列に書き込みます。</summary>
      <param name="buffer">文字列に書き込む文字のスパン。</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteLine(System.Text.StringBuilder)">
      <summary>文字列ビルダーのテキスト表現を、続いて行終端記号を文字列に書き込みます。</summary>
      <param name="value">文字列に書き込む、文字列ビルダーとしての文字列。</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char)">
      <summary>文字を、続いて行終端記号を非同期で文字列に書き込みます。</summary>
      <param name="value">文字列に書き込む文字。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">文字列ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">文字列ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>文字列の部分配列を、続いて行終端記号を非同期で文字列に書き込みます。</summary>
      <param name="buffer">データの書き込み元の文字配列。</param>
      <param name="index">データの読み取りを開始する、バッファー内の位置。</param>
      <param name="count">書き込む文字の最大数。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> に <paramref name="count" /> を加算した値がバッファーの長さを超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ObjectDisposedException">文字列ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">文字列ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>文字のメモリ領域の文字列形式を、続いて行終端記号を非同期で現在の文字列に書き込みます。</summary>
      <param name="buffer">文字列に書き込む文字のメモリ領域。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.String)">
      <summary>文字列を、続いて行終端記号を非同期で現在の文字列を書き込みます。</summary>
      <param name="value">書き込む文字列。 値が <see langword="null" /> の場合は、行終端記号だけが書き込まれます。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">文字列ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">文字列ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>文字列ビルダーの文字列形式を、続いて行終端記号を非同期で現在の文字列に書き込みます。</summary>
      <param name="value">文字列に書き込む文字列ビルダー。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="T:System.IO.TextReader">
      <summary>一連の文字を読み取ることができるリーダーを表します。</summary>
    </member>
    <member name="M:System.IO.TextReader.#ctor">
      <summary>
        <see cref="T:System.IO.TextReader" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.IO.TextReader.Close">
      <summary>
        <see cref="T:System.IO.TextReader" /> を閉じ、その <see langword="TextReader" /> と関連付けられているシステム リソースを解放します。</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose">
      <summary>この <see cref="T:System.IO.TextReader" /> オブジェクトによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.TextReader" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="F:System.IO.TextReader.Null">
      <summary>読み取り対象のデータを <see langword="TextReader" /> に提供しません。</summary>
    </member>
    <member name="M:System.IO.TextReader.Peek">
      <summary>リーダーや文字の読み取り元の状態を変更せずに、次の文字を読み取ります。 リーダーから実際に文字を読み取らずに次の文字を返します。</summary>
      <returns>読み取り対象の次の文字を表す整数。使用できる文字がないか、リーダーがシークをサポートしていない場合は -1。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextReader.Read">
      <summary>テキスト リーダーから次の文字を読み取り、1 文字分だけ文字位置を進めます。</summary>
      <returns>テキスト リーダーからの次の文字。それ以上読み取り可能な文字がない場合は -1。 既定の実装では、-1 が返されます。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>指定した最大文字数を現在のリーダーから読み取り、バッファーの指定したインデックス位置にそのデータを書き込みます。</summary>
      <param name="buffer">このメソッドが戻るとき、指定した文字配列の <paramref name="index" /> から (<paramref name="index" /> + <paramref name="count" /> - 1) までの値が、現在のソースから読み取られた文字に置き換えられます。</param>
      <param name="index">書き込みを開始する <paramref name="buffer" /> 内の位置。</param>
      <param name="count">読み取り対象の最大文字数。 指定された文字数をバッファーに読み取る前にリーダーの末尾に到達した場合、メソッドは制御を返します。</param>
      <returns>読み取られた文字数。 この数値は、リーダー内に使用できるデータがあるかどうかによって異なりますが、<paramref name="count" /> 以下の数値になります。 読み取り対象の文字がない場合にこのメソッドを呼び出すと、0 (ゼロ) が返されます。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Span{System.Char})">
      <summary>現在のリーダーから文字を読み取り、指定したバッファーにそのデータを書き込みます。</summary>
      <param name="buffer">このメソッドから制御が戻るときに、指定した文字のスパンが現在のソースから読み取られた文字に置き換えられます。</param>
      <returns>読み取られた文字数。 この数値は、リーダー内に使用できるデータがあるかどうかに応じて、<paramref name="buffer" /> の長さより小さいか等しくなります。 読み取り対象の文字がない場合にこのメソッドを呼び出すと、0 (ゼロ) が返されます。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.IOException">ストリームから読み取った文字数が、<paramref name="buffer" /> の長さを超えています。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>指定した最大文字数を現在のテキスト リーダーから非同期に読み取り、バッファーの指定したインデックス位置にそのデータを書き込みます。</summary>
      <param name="buffer">このメソッドが戻るとき、指定した文字配列の <paramref name="index" /> から (<paramref name="index" /> + <paramref name="count" /> - 1) までの値が、現在のソースから読み取られた文字に置き換えられます。</param>
      <param name="index">書き込みを開始する <paramref name="buffer" /> 内の位置。</param>
      <param name="count">読み取り対象の最大文字数。 指定された文字数をバッファーに読み取る前にテキストの末尾に到達した場合は、現在のメソッドが返ります。</param>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。 現在使用できるバイト数が要求した数より小さい場合、結果の値は要求したバイト数より小さくなることがあります。また、テキストの末尾に到達した場合は 0 になることがあります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> と <paramref name="count" /> の合計が、バッファーの長さよりも大きいです。</exception>
      <exception cref="T:System.ObjectDisposedException">テキスト リーダーは破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">リーダーは、前の読み取り操作によって現在使用されています。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>現在のストリームからメモリ ブロックに文字を非同期に読み取ります。</summary>
      <param name="buffer">このメソッドから制御が戻るときに、指定した文字のメモリ ブロックが現在のソースから読み取られた文字に置き換えられます。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の読み取り操作を表す値タスク。 型パラメーターの値には、読み取られた文字数が格納されます。ストリームの末尾でデータが読み取られなかった場合は 0 です。 この数値は、ストリーム内に使用できるデータがあるかどうかに応じて、<paramref name="buffer" /> の長さより小さいか等しくなります。</returns>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>指定した最大文字数を現在のテキスト リーダーから読み取り、バッファーの指定したインデックス位置にそのデータを書き込みます。</summary>
      <param name="buffer">このメソッドが戻るとき、指定した文字配列の <paramref name="index" /> から (<paramref name="index" /> + <paramref name="count" /> -1) までの値が、現在のソースから読み取られた文字に置き換えられています。</param>
      <param name="index">書き込みを開始する <paramref name="buffer" /> 内の位置。</param>
      <param name="count">読み取り対象の最大文字数。</param>
      <returns>読み取られた文字数。 この数値は、すべての入力文字が読み取られたかどうかによって異なりますが、<paramref name="count" /> 以下の数値になります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Span{System.Char})">
      <summary>現在のストリームから文字を読み取り、データをバッファーに書き込みます。</summary>
      <param name="buffer">このメソッドから制御が戻るときに、指定した文字のスパンが現在のソースから読み取られた文字に置き換えられます。</param>
      <returns>読み取られた文字数。 この数値は、すべての入力文字が読み取られたかどうかに応じて、<paramref name="buffer" /> の長さより小さいか等しくなります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.StreamReader" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>指定した最大文字数を現在のテキスト リーダーから非同期に読み取り、バッファーの指定したインデックス位置にそのデータを書き込みます。</summary>
      <param name="buffer">このメソッドが戻るとき、指定した文字配列の <paramref name="index" /> から (<paramref name="index" /> + <paramref name="count" /> - 1) までの値が、現在のソースから読み取られた文字に置き換えられます。</param>
      <param name="index">書き込みを開始する <paramref name="buffer" /> 内の位置。</param>
      <param name="count">読み取り対象の最大文字数。 指定された文字数をバッファーに読み取る前にテキストの末尾に到達した場合は、現在のメソッドが返ります。</param>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。 現在使用できるバイト数が要求した数より小さい場合、結果の値は要求したバイト数より小さくなることがあります。また、テキストの末尾に到達した場合は 0 になることがあります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> と <paramref name="count" /> の合計が、バッファーの長さよりも大きいです。</exception>
      <exception cref="T:System.ObjectDisposedException">テキスト リーダーは破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">リーダーは、前の読み取り操作によって現在使用されています。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>現在のストリームから非同期に文字を読み取り、データをバッファーに書き込みます。</summary>
      <param name="buffer">このメソッドから制御が戻るときに、指定した文字のメモリ ブロックが現在のソースから読み取られた文字に置き換えられます。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の読み取り操作を表す値タスク。 型パラメーターの値には、バッファーに読み込まれる文字の合計数が含まれます。 現在使用できる文字数が要求した数より小さい場合、結果の値は要求した文字数より小さくなることがあります。また、ストリームの末尾に到達した場合は 0 になることがあります。</returns>
    </member>
    <member name="M:System.IO.TextReader.ReadLine">
      <summary>テキスト リーダーから 1 行分の文字を読み取り、そのデータを文字列として返します。</summary>
      <returns>リーダーの次の行。またはすべての文字が読み取られた場合は <see langword="null" />。</returns>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.OutOfMemoryException">返却された文字列にバッファーを割り当てるには、メモリが不足しています。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> が閉じています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">次の行の文字数が、<see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadLineAsync">
      <summary>1 行分の文字を非同期的に読み取り、そのデータを文字列として返します。</summary>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、テキスト リーダーの次の行が含まれます。または、すべての文字が読み取られた場合は <see langword="null" /> です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">次の行に含まれる文字数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
      <exception cref="T:System.ObjectDisposedException">テキスト リーダーは破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">リーダーは、前の読み取り操作によって現在使用されています。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEnd">
      <summary>テキスト リーダーの現在位置から末尾まですべての文字を読み取り、1 つの文字列として返します。</summary>
      <returns>テキスト リーダーの現在位置から末尾までのすべての文字を含む文字列。</returns>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> が閉じています。</exception>
      <exception cref="T:System.OutOfMemoryException">返却された文字列にバッファーを割り当てるには、メモリが不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">次の行の文字数が、<see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEndAsync">
      <summary>テキスト リーダーの現在位置から末尾まですべての文字を非同期的に読み取り、1 つの文字列として返します。</summary>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、現在位置からテキスト リーダーの末尾までの文字から成る文字列が含まれます。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">文字数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
      <exception cref="T:System.ObjectDisposedException">テキスト リーダーは破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">リーダーは、前の読み取り操作によって現在使用されています。</exception>
    </member>
    <member name="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
      <summary>指定した <see langword="TextReader" /> をラップするスレッド セーフ ラッパーを作成します。</summary>
      <param name="reader">同期する <see langword="TextReader" />。</param>
      <returns>スレッド セーフな <see cref="T:System.IO.TextReader" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.IO.TextWriter">
      <summary>一連の文字を書き込むことができるライターを表します。 このクラスは抽象クラスです。</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor">
      <summary>
        <see cref="T:System.IO.TextWriter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor(System.IFormatProvider)">
      <summary>指定した書式プロバイダーで <see cref="T:System.IO.TextWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="formatProvider">書式を制御する <see cref="T:System.IFormatProvider" /> オブジェクト。</param>
    </member>
    <member name="M:System.IO.TextWriter.Close">
      <summary>現在のライターを終了し、ライターに関連付けられたすべてのシステム リソースを解放します。</summary>
    </member>
    <member name="F:System.IO.TextWriter.CoreNewLine">
      <summary>この <see langword="TextWriter" /> で使用する改行文字を格納します。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose">
      <summary>この <see cref="T:System.IO.TextWriter" /> オブジェクトによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.TextWriter" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.TextWriter.DisposeAsync">
      <summary>
        <see cref="T:System.IO.TextWriter" /> オブジェクトによって使用されるすべてのリソースを非同期でリリースします。</summary>
      <returns>非同期の破棄操作を表すタスク。</returns>
    </member>
    <member name="P:System.IO.TextWriter.Encoding">
      <summary>派生クラスによってオーバーライドされると、出力を書き込む文字エンコーディングを返します。</summary>
      <returns>出力の書き込み時に適用する文字エンコーディング。</returns>
    </member>
    <member name="M:System.IO.TextWriter.Flush">
      <summary>現在のライターのすべてのバッファーをクリアし、バッファー内のデータを基になるデバイスに書き込みます。</summary>
    </member>
    <member name="M:System.IO.TextWriter.FlushAsync">
      <summary>現在のライターのすべてのバッファーを非同期にクリアし、バッファー内のデータを基になるデバイスに書き込みます。</summary>
      <returns>非同期のフラッシュ操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="P:System.IO.TextWriter.FormatProvider">
      <summary>書式を制御するオブジェクトを取得します。</summary>
      <returns>特定のカルチャ設定の <see cref="T:System.IFormatProvider" /> オブジェクト、または他のカルチャ設定が指定されていない場合は現在のカルチャ設定の書式。</returns>
    </member>
    <member name="P:System.IO.TextWriter.NewLine">
      <summary>現在の <see langword="TextWriter" /> で使用される行終端文字列を取得または設定します。</summary>
      <returns>現在の <see langword="TextWriter" /> で使用する行終端文字列。</returns>
    </member>
    <member name="F:System.IO.TextWriter.Null">
      <summary>バッキング ストアを持たない書き込み専用の <see langword="TextWriter" /> を提供します。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Synchronized(System.IO.TextWriter)">
      <summary>指定した <see langword="TextWriter" /> をラップするスレッド セーフ ラッパーを作成します。</summary>
      <param name="writer">同期する <see langword="TextWriter" />。</param>
      <returns>スレッド セーフ ラッパー。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Boolean)">
      <summary>
        <see langword="Boolean" /> 値のテキスト表現をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む <see langword="Boolean" /> 値。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char)">
      <summary>文字をテキスト ストリームに書き込みます。</summary>
      <param name="value">テキスト ストリームに書き込む文字。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[])">
      <summary>文字配列をテキスト ストリームに書き込みます。</summary>
      <param name="buffer">テキスト ストリームに書き込む文字配列。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>文字の部分配列をテキスト ストリームに書き込みます。</summary>
      <param name="buffer">データの書き込み元の文字配列。</param>
      <param name="index">データの取得を開始する、バッファー内の文字位置。</param>
      <param name="count">書き込む文字数。</param>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Decimal)">
      <summary>10 進値のテキスト表現をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 10 進値。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Double)">
      <summary>8 バイト浮動小数点値のテキスト表現をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 8 バイト浮動小数点値。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int32)">
      <summary>4 バイト符号付き整数のテキスト表現をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 4 バイト符号付き整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int64)">
      <summary>8 バイト符号付き整数のテキスト表現をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 8 バイト符号付き整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Object)">
      <summary>オブジェクトで <see langword="ToString" /> メソッドを呼び出して、そのオブジェクトのテキスト表現をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込むオブジェクト。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>文字スパンをテキスト ストリームに書き込みます。</summary>
      <param name="buffer">書き込む文字スパン。</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Single)">
      <summary>4 バイト浮動小数点値のテキスト表現をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 4 バイト浮動小数点値。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String)">
      <summary>文字列をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む文字列。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列をテキスト ストリームに書き込みます。</summary>
      <param name="format">複合書式設定文字列。</param>
      <param name="arg0">書式設定および書き込みをするオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> は有効な復号書式指定文字列ではありません。

または -
書式指定項目のインデックスが、0 (ゼロ) より小さいか、書式設定されるオブジェクトの数 (このメソッド オーバーロードでは 1) 以上です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列をテキスト ストリームに書き込みます。</summary>
      <param name="format">複合書式設定文字列。</param>
      <param name="arg0">書式設定および書き込みをする最初のオブジェクト。</param>
      <param name="arg1">書式設定および書き込みをする 2 番目のオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> は有効な復号書式指定文字列ではありません。

または -
書式指定項目のインデックスが、0 (ゼロ) より小さいか、書式設定されるオブジェクトの数 (このメソッド オーバーロードでは 2) 以上です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列をテキスト ストリームに書き込みます。</summary>
      <param name="format">複合書式設定文字列。</param>
      <param name="arg0">書式設定および書き込みをする最初のオブジェクト。</param>
      <param name="arg1">書式設定および書き込みをする 2 番目のオブジェクト。</param>
      <param name="arg2">書式設定および書き込みをする 3 番目のオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> は有効な復号書式指定文字列ではありません。

または -
書式指定項目のインデックスが、0 (ゼロ) より小さいか、書式設定されるオブジェクトの数 (このメソッド オーバーロードでは 3) 以上です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object[])">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object[])" /> メソッドと同じセマンティクスを使用して、書式設定された文字列をテキスト ストリームに書き込みます。</summary>
      <param name="format">複合書式設定文字列。</param>
      <param name="arg">書式設定および書き込みをする 0 個以上のオブジェクトを含むオブジェクト配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> または <paramref name="arg" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> は有効な復号書式指定文字列ではありません。

または -
書式項目のインデックスが 0 (ゼロ) 未満であるか、<paramref name="arg" /> 配列の長さ以上です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Text.StringBuilder)">
      <summary>文字列ビルダーをテキスト ストリームに書き込みます。</summary>
      <param name="value">テキスト ストリームに書き込む文字列ビルダーとしての文字列。</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt32)">
      <summary>4 バイト符号なし整数のテキスト表現をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 4 バイト符号なし整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt64)">
      <summary>8 バイト符号なし整数のテキスト表現をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 8 バイト符号なし整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char)">
      <summary>文字をテキスト ストリームに非同期で書き込みます。</summary>
      <param name="value">テキスト ストリームに書き込む文字。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">テキスト ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[])">
      <summary>文字配列をテキスト ストリームに非同期で書き込みます。</summary>
      <param name="buffer">テキスト ストリームに書き込む文字配列。 <paramref name="buffer" /> が <see langword="null" /> の場合は、何も書き込まれません。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">テキスト ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>文字の部分配列をテキスト ストリームに非同期で書き込みます。</summary>
      <param name="buffer">データの書き込み元の文字配列。</param>
      <param name="index">データの取得を開始する、バッファー内の文字位置。</param>
      <param name="count">書き込む文字数。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> に <paramref name="count" /> を加算した値がバッファーの長さを超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">テキスト ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>文字メモリ領域をテキスト ストリームに非同期で書き込みます。</summary>
      <param name="buffer">テキスト ストリームに書き込む文字メモリ領域。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.String)">
      <summary>文字列をテキスト ストリームに非同期で書き込みます。</summary>
      <param name="value">書き込む文字列。 <paramref name="value" /> が <see langword="null" /> の場合は、何もテキスト ストリームに書き込みません。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">テキスト ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>文字列ビルダーをテキスト ストリームに非同期で書き込みます。</summary>
      <param name="value">テキスト ストリームに書き込む文字列ビルダーとしての文字列。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine">
      <summary>行終端記号をテキスト ストリームに書き込みます。</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Boolean)">
      <summary>
        <see langword="Boolean" /> 値のテキスト表現を、続いて行終端記号をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む <see langword="Boolean" /> 値。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char)">
      <summary>文字を、続いて行終端記号をテキスト ストリームに書き込みます。</summary>
      <param name="value">テキスト ストリームに書き込む文字。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[])">
      <summary>文字配列を、続いて行終端記号をテキスト ストリームに書き込みます。</summary>
      <param name="buffer">データの読み取り元の文字配列。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>文字の部分配列を、続いて行終端記号をテキスト ストリームに書き込みます。</summary>
      <param name="buffer">データの読み取り元の文字配列。</param>
      <param name="index">データの読み込みを開始する、<paramref name="buffer" /> 内の文字の位置。</param>
      <param name="count">書き込む文字の最大数。</param>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Decimal)">
      <summary>10 進値のテキスト表現を、続いて行終端記号をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 10 進値。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Double)">
      <summary>8 バイト浮動小数点値のテキスト表現を、続いて行終端記号をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 8 バイト浮動小数点値。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int32)">
      <summary>4 バイト符号付き整数のテキスト表現を、続いて行終端記号をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 4 バイト符号付き整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int64)">
      <summary>8 バイト符号付き整数のテキスト表現を、続いて行終端記号をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 8 バイト符号付き整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Object)">
      <summary>オブジェクトで <see langword="ToString" /> メソッドを呼び出して、そのオブジェクトのテキスト表現を、続いて行終端記号をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込むオブジェクト。 <paramref name="value" /> が <see langword="null" /> の場合は、行終端記号だけを書き込みます。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>文字スパンのテキスト表現を、続いて行終端記号をテキスト ストリームに書き込みます。</summary>
      <param name="buffer">テキスト ストリームに書き込む文字スパン値。</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Single)">
      <summary>4 バイト浮動小数点値のテキスト表現を、続いて行終端記号をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 4 バイト浮動小数点値。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String)">
      <summary>文字列を、続いて行終端記号をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む文字列。 <paramref name="value" /> が <see langword="null" /> の場合は、行終端記号だけを書き込みます。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列と新しい行をテキスト ストリームに書き込みます。</summary>
      <param name="format">複合書式設定文字列。</param>
      <param name="arg0">書式設定および書き込みをするオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> は有効な復号書式指定文字列ではありません。

または -
書式指定項目のインデックスが、0 (ゼロ) より小さいか、書式設定されるオブジェクトの数 (このメソッド オーバーロードでは 1) 以上です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列と新しい行をテキスト ストリームに書き込みます。</summary>
      <param name="format">複合書式設定文字列。</param>
      <param name="arg0">書式設定および書き込みをする最初のオブジェクト。</param>
      <param name="arg1">書式設定および書き込みをする 2 番目のオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> は有効な復号書式指定文字列ではありません。

または -
書式指定項目のインデックスが、0 (ゼロ) より小さいか、書式設定されるオブジェクトの数 (このメソッド オーバーロードでは 2) 以上です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object)" /> と同じセマンティクスを使用して、書式設定された文字列と新しい行をテキスト ストリームに書き込みます。</summary>
      <param name="format">複合書式設定文字列。</param>
      <param name="arg0">書式設定および書き込みをする最初のオブジェクト。</param>
      <param name="arg1">書式設定および書き込みをする 2 番目のオブジェクト。</param>
      <param name="arg2">書式設定および書き込みをする 3 番目のオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> は有効な復号書式指定文字列ではありません。

または -
書式指定項目のインデックスが、0 (ゼロ) より小さいか、書式設定されるオブジェクトの数 (このメソッド オーバーロードでは 3) 以上です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object)" /> と同じセマンティクスを使用して、書式設定された文字列と新しい行をテキスト ストリームに書き込みます。</summary>
      <param name="format">複合書式設定文字列。</param>
      <param name="arg">書式設定および書き込みをする 0 個以上のオブジェクトを含むオブジェクト配列。</param>
      <exception cref="T:System.ArgumentNullException">文字列またはオブジェクトが <see langword="null" /> として渡されました。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> は有効な復号書式指定文字列ではありません。

または -
書式項目のインデックスが 0 (ゼロ) 未満であるか、<paramref name="arg" /> 配列の長さ以上です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Text.StringBuilder)">
      <summary>文字列ビルダーのテキスト表現を、続いて行終端記号をテキスト ストリームに書き込みます。</summary>
      <param name="value">テキスト ストリームに書き込む文字列ビルダーとしての文字列。</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt32)">
      <summary>4 バイト符号なし整数のテキスト表現を、続いて行終端記号をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 4 バイト符号なし整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt64)">
      <summary>8 バイト符号なし整数のテキスト表現を、続いて行終端記号をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 8 バイト符号なし整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync">
      <summary>行終端記号をテキスト ストリームに非同期で書き込みます。</summary>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">テキスト ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char)">
      <summary>文字を、続いて行終端記号をテキスト ストリームに非同期で書き込みます。</summary>
      <param name="value">テキスト ストリームに書き込む文字。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">テキスト ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[])">
      <summary>文字配列を、続いて行終端記号をテキスト ストリームに非同期で書き込みます。</summary>
      <param name="buffer">テキスト ストリームに書き込む文字配列。 文字配列が <see langword="null" /> の場合は、行終端記号だけが書き込まれます。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">テキスト ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>文字の部分配列を、続いて行終端記号をテキスト ストリームに非同期で書き込みます。</summary>
      <param name="buffer">データの書き込み元の文字配列。</param>
      <param name="index">データの取得を開始する、バッファー内の文字位置。</param>
      <param name="count">書き込む文字数。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> に <paramref name="count" /> を加算した値がバッファーの長さを超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">テキスト ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>文字メモリ領域のテキスト表現を、続いて行終端記号をテキスト ストリームに非同期で書き込みます。</summary>
      <param name="buffer">テキスト ストリームに書き込む文字メモリ領域。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.String)">
      <summary>文字列を、続いて行終端記号をテキスト ストリームに非同期で書き込みます。</summary>
      <param name="value">書き込む文字列。 値が <see langword="null" /> の場合は、行終端記号だけが書き込まれます。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
      <exception cref="T:System.InvalidOperationException">テキスト ライターは現在、前の書き込み操作で使用中です。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>文字列ビルダーのテキスト表現を、続いて行終端記号をテキスト ストリームに非同期で書き込みます。</summary>
      <param name="value">テキスト ストリームに書き込む文字列ビルダーとしての文字列。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="T:System.LoaderOptimization">
      <summary>実行可能ファイルのローダー最適化を指定する <see cref="T:System.LoaderOptimizationAttribute" /> クラスとともに使用される列挙体。</summary>
    </member>
    <member name="F:System.LoaderOptimization.DisallowBindings">
      <summary>共通言語ランタイムによって無視されます。</summary>
    </member>
    <member name="F:System.LoaderOptimization.DomainMask">
      <summary>使用しないでください。 このマスクは、ドメインに関連した値を選択し、未使用の <see cref="F:System.LoaderOptimization.DisallowBindings" /> フラグは除外します。</summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomain">
      <summary>アプリケーションが、同じコードを使用する多数のドメインを持つ可能性があり、ローダーは、最大の内部リソースをアプリケーション ドメイン間で共有する必要があることを示します。</summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomainHost">
      <summary>アプリケーションが固有のコードを複数のドメインにホストする可能性があり、ローダーは、グローバル アセンブリ キャッシュに追加されているグローバルに使用可能な (厳密な名前の) アセンブリについてのみ、リソースをアプリケーション ドメイン間で共有する必要があることを示します。</summary>
    </member>
    <member name="F:System.LoaderOptimization.NotSpecified">
      <summary>内部リソースの共有の最適化が指定されていないことを示します。 既定のドメインまたはホスト インターフェイスで最適化が指定されている場合は、ローダーはそれを使用します。それ以外の場合は、ローダーは <see cref="F:System.LoaderOptimization.SingleDomain" /> を使用します。</summary>
    </member>
    <member name="F:System.LoaderOptimization.SingleDomain">
      <summary>アプリケーションが単一ドメインを持つ可能性があり、ローダーがアプリケーション ドメイン間で内部リソースを共有してはならないことを示します。</summary>
    </member>
    <member name="T:System.LoaderOptimizationAttribute">
      <summary>実行可能アプリケーションのメイン メソッドに対する既定のローダー最適化処理ポリシーを設定するために使用します。</summary>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.Byte)">
      <summary>
        <see cref="T:System.LoaderOptimizationAttribute" /> クラスの新しいインスタンスを、指定の値に初期化します。</summary>
      <param name="value">
        <see cref="T:System.LoaderOptimization" /> 定数と等価の値。</param>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.LoaderOptimization)">
      <summary>
        <see cref="T:System.LoaderOptimizationAttribute" /> クラスの新しいインスタンスを、指定の値に初期化します。</summary>
      <param name="value">
        <see cref="T:System.LoaderOptimization" /> 定数。</param>
    </member>
    <member name="P:System.LoaderOptimizationAttribute.Value">
      <summary>このインスタンスの現在の <see cref="T:System.LoaderOptimization" /> 値を取得します。</summary>
      <returns>
        <see cref="T:System.LoaderOptimization" /> 定数。</returns>
    </member>
    <member name="T:System.Math">
      <summary>三角関数や対数関数などの一般的な数値関数の定数と静的メソッドを提供します。</summary>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 数値の絶対値を返します。</summary>
      <param name="value">
        <see cref="F:System.Decimal.MinValue" /> 以上で、<see cref="F:System.Decimal.MaxValue" /> 以下の数値。</param>
      <returns>0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" /> の 10 進数 x。</returns>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
      <summary>倍精度浮動小数点数の絶対値を返します。</summary>
      <param name="value">
        <see cref="F:System.Double.MinValue" /> 以上で、<see cref="F:System.Double.MaxValue" /> 以下の数値。</param>
      <returns>0 ≤ x ≤<see cref="F:System.Double.MaxValue" /> の倍精度浮動小数点数 x。</returns>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
      <summary>16 ビット符号付き整数の絶対値を返します。</summary>
      <param name="value">
        <see cref="F:System.Int16.MinValue" /> より大きく、<see cref="F:System.Int16.MaxValue" /> 以下の数値。</param>
      <returns>0 ≤ x ≤<see cref="F:System.Int16.MaxValue" /> である 16 ビット符号付き整数 x。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> と <see cref="F:System.Int16.MinValue" /> は等しい。</exception>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
      <summary>32 ビット符号付き整数の絶対値を返します。</summary>
      <param name="value">
        <see cref="F:System.Int32.MinValue" /> より大きく、<see cref="F:System.Int32.MaxValue" /> 以下の数値。</param>
      <returns>0 ≤ x ≤<see cref="F:System.Int32.MaxValue" /> である 32 ビット符号付き整数 x。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> と <see cref="F:System.Int32.MinValue" /> は等しい。</exception>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
      <summary>64 ビット符号付き整数の絶対値を返します。</summary>
      <param name="value">
        <see cref="F:System.Int64.MinValue" /> より大きく、<see cref="F:System.Int64.MaxValue" /> 以下の数値。</param>
      <returns>0 ≤ x ≤<see cref="F:System.Int64.MaxValue" /> である 64 ビット符号付き整数 x。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> と <see cref="F:System.Int64.MinValue" /> は等しい。</exception>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
      <summary>8 ビット符号付き整数の絶対値を返します。</summary>
      <param name="value">
        <see cref="F:System.SByte.MinValue" /> より大きく、<see cref="F:System.SByte.MaxValue" /> 以下の数値。</param>
      <returns>0 ≤ x ≤<see cref="F:System.SByte.MaxValue" /> である 8 ビット符号付き整数 x。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> と <see cref="F:System.SByte.MinValue" /> は等しい。</exception>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
      <summary>単精度浮動小数点数の絶対値を返します。</summary>
      <param name="value">
        <see cref="F:System.Single.MinValue" /> 以上で、<see cref="F:System.Single.MaxValue" /> 以下の数値。</param>
      <returns>0 ≤ x ≤<see cref="F:System.Single.MaxValue" /> の単精度浮動小数点数 x。</returns>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
      <summary>コサインが指定数となる角度を返します。</summary>
      <param name="d">コサインを表す数で、<paramref name="d" /> が -1 以上 1 以下である必要があります。</param>
      <returns>0 ≤θ≤π の、ラジアンで表した角度 θ。

または -
<paramref name="d" /> &lt; -1 または <paramref name="d" /> &gt; 1、あるいは <paramref name="d" /> が <see cref="F:System.Double.NaN" /> と等しい場合は、<see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Acosh(System.Double)">
      <summary>ハイパーボリック コサインが指定数となる角度を返します。</summary>
      <param name="d">ハイパーボリック コサインを表す数で、<paramref name="d" /> が 1 以上 <see cref="F:System.Double.PositiveInfinity" /> 以下である必要があります。</param>
      <returns>0 ≤ θ ≤ ∞ の、ラジアンで表した角度 θ。

または -
<paramref name="d" /> &lt; 1、または <paramref name="d" /> が <see cref="F:System.Double.NaN" /> と等しい場合は、<see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
      <summary>サインが指定数となる角度を返します。</summary>
      <param name="d">サインを表す数で、<paramref name="d" /> が -1 以上 1 以下である必要があります。</param>
      <returns>-π/2 ≤θ≤π/2 の、ラジアンで表した角度 θ。

または -
<paramref name="d" /> &lt; -1 または <paramref name="d" /> &gt; 1、あるいは <paramref name="d" /> が <see cref="F:System.Double.NaN" /> と等しい場合は、<see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Asinh(System.Double)">
      <summary>ハイパーボリック サインが指定数となる角度を返します。</summary>
      <param name="d">ハイパーボリック サインを表す数で、<paramref name="d" /> が <see cref="F:System.Double.NegativeInfinity" /> 以上 <see cref="F:System.Double.PositiveInfinity" /> 以下である必要があります。</param>
      <returns>-∞ &lt; θ ≤-1 または 1 ≤ θ &lt; ∞ の、ラジアンで表した角度 θ。

または -
<paramref name="d" /> が <see cref="F:System.Double.NaN" /> と等しい場合は <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
      <summary>タンジェントが指定数となる角度を返します。</summary>
      <param name="d">タンジェントを表す数。</param>
      <returns>-π/2 ≤θ≤π/2 の、ラジアンで表した角度 θ。

または -
<paramref name="d" /> が <see cref="F:System.Double.NaN" /> に等しい場合は <see cref="F:System.Double.NaN" />。<paramref name="d" /> が <see cref="F:System.Double.NegativeInfinity" /> に等しい場合は、倍精度に丸めた -π/2 (-1.5707963267949)。<paramref name="d" /> が <see cref="F:System.Double.PositiveInfinity" /> に等しい場合は、倍精度に丸めた π/2 (1.5707963267949)。</returns>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
      <summary>タンジェントが 2 つの指定された数の商である角度を返します。</summary>
      <param name="y">点の y 座標。</param>
      <param name="x">点の x 座標。</param>
      <returns>-π≤θ≤π および tan(θ) = <paramref name="y" /> / <paramref name="x" /> の、ラジアンで示した角度 θ。(<paramref name="x" />, <paramref name="y" />) は、デカルト座標の点を示します。 次の点に注意してください。

クワドラント 1 の (<paramref name="x" />, <paramref name="y" />) の場合は、0 &lt; θ &lt; π/2。

クワドラント 2 の (<paramref name="x" />, <paramref name="y" />) の場合は、π/2 &lt; θ≤π。

クワドラント 3 の (<paramref name="x" />, <paramref name="y" />) の場合は、-π &lt; θ &lt; -π/2。

クワドラント 4 の (<paramref name="x" />, <paramref name="y" />) の場合は、-π/2 &lt; θ &lt; 0。


クワドラント間の境界上にある点の場合は、次の戻り値になります。

y が 0 で x が負数でない場合は、θ = 0。

y が 0 で x が負の場合は、θ = π。

y が正で x が 0 の場合は、θ = π/2。

y が負数で x が 0 の場合は、θ = -π/2。

y が 0 かつ x が 0 の場合は、θ = 0。


<paramref name="x" /> または <paramref name="y" /> が <see cref="F:System.Double.NaN" /> であるか、<paramref name="x" /> または <paramref name="y" /> が <see cref="F:System.Double.PositiveInfinity" /> または <see cref="F:System.Double.NegativeInfinity" /> のいずれである場合、メソッドは <see cref="F:System.Double.NaN" /> を返します。</returns>
    </member>
    <member name="M:System.Math.Atanh(System.Double)">
      <summary>ハイパーボリック タンジェントが指定数となる角度を返します。</summary>
      <param name="d">ハイパーボリック タンジェントを表す数で、<paramref name="d" /> が -1 以上 1 以下である必要があります。</param>
      <returns>-∞ &lt; θ &lt; -1 または 1 &lt; θ &lt; ∞ の、ラジアンで表した角度 θ。

または -
<paramref name="d" /> &lt; -1 または <paramref name="d" /> &gt; 1、あるいは <paramref name="d" /> が <see cref="F:System.Double.NaN" /> と等しい場合は、<see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.BigMul(System.Int32,System.Int32)">
      <summary>2 つの 32 ビット数値の完全な積を生成します。</summary>
      <param name="a">乗算対象の最初の数。</param>
      <param name="b">乗算対象の 2 番目の数。</param>
      <returns>指定した数値の積を含む数。</returns>
    </member>
    <member name="M:System.Math.BitDecrement(System.Double)">
      <summary>
        <paramref name="x" /> 未満を比較する、次に小さい値を返します。</summary>
      <param name="x">デクリメントする値。</param>
      <returns>
        <paramref name="x" /> 未満を比較する、次に小さい値。

または -
<paramref name="x" /> が <see cref="F:System.Double.NegativeInfinity" /> と等しい場合は <see cref="F:System.Double.NegativeInfinity" />。

または -
<paramref name="x" /> が <see cref="F:System.Double.NaN" /> と等しい場合は <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.BitIncrement(System.Double)">
      <summary>
        <paramref name="x" /> を超える比較値の次に大きい値を返します。</summary>
      <param name="x">インクリメントする値。</param>
      <returns>
        <paramref name="x" /> を超える比較値の次に大きい値。

または -
<paramref name="x" /> が <see cref="F:System.Double.PositiveInfinity" /> と等しい場合は <see cref="F:System.Double.PositiveInfinity" />。

または -
<paramref name="x" /> が <see cref="F:System.Double.NaN" /> と等しい場合は <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Cbrt(System.Double)">
      <summary>指定された数値の立方根を返します。</summary>
      <param name="d">立方根を求める対象の数値。</param>
      <returns>
        <paramref name="d" /> の立方根。

または -
<paramref name="x" /> が <see cref="F:System.Double.NaN" /> と等しい場合は <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Decimal)">
      <summary>指定した 10 進数以上の数のうち、最小の整数値を返します。</summary>
      <param name="d">10 進数。</param>
      <returns>
        <paramref name="d" /> 以上の最小の整数値。 このメソッドは、整数型ではなく <see cref="T:System.Decimal" /> を返します。</returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
      <summary>指定した倍精度浮動小数点数以上の数のうち、最小の整数値を返します。</summary>
      <param name="a">倍精度浮動小数点数。</param>
      <returns>
        <paramref name="a" /> 以上の最小の整数値。 <paramref name="a" /> が <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" /> のいずれかに等しい場合は、その値が返されます。 このメソッドは、整数型ではなく <see cref="T:System.Double" /> を返します。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Byte,System.Byte,System.Byte)">
      <summary>
        <paramref name="min" /> 以上 <paramref name="max" /> 以下の範囲に固定される <paramref name="value" /> を返します。</summary>
      <param name="value">固定される値。</param>
      <param name="min">結果の下限。</param>
      <param name="max">結果の上限。</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" /> の場合は <paramref name="value" />。

または -
<paramref name="value" /> &lt; <paramref name="min" /> の場合は <paramref name="min" />。

または -
<paramref name="max" /> &lt; <paramref name="value" /> の場合は <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)">
      <summary>
        <paramref name="min" /> 以上 <paramref name="max" /> 以下の範囲に固定される <paramref name="value" /> を返します。</summary>
      <param name="value">固定される値。</param>
      <param name="min">結果の下限。</param>
      <param name="max">結果の上限。</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" /> の場合は <paramref name="value" />。

または -
<paramref name="value" /> &lt;<paramref name="min" /> の場合は <paramref name="min" />。

または -
<paramref name="max" /> &lt; <paramref name="value" /> の場合は <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Double,System.Double,System.Double)">
      <summary>
        <paramref name="min" /> 以上 <paramref name="max" /> 以下の範囲に固定される <paramref name="value" /> を返します。</summary>
      <param name="value">固定される値。</param>
      <param name="min">結果の下限。</param>
      <param name="max">結果の上限。</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" /> の場合は <paramref name="value" />。

または -
<paramref name="value" /> &lt; <paramref name="min" /> の場合は <paramref name="min" />。

または -
<paramref name="max" /> &lt; <paramref name="value" /> の場合は <paramref name="max" />。``

または -
<paramref name="value" /> が <see cref="F:System.Double.NaN" /> と等しい場合は <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int16,System.Int16,System.Int16)">
      <summary>
        <paramref name="min" /> 以上 <paramref name="max" /> 以下の範囲に固定される <paramref name="value" /> を返します。</summary>
      <param name="value">固定される値。</param>
      <param name="min">結果の下限。</param>
      <param name="max">結果の上限。</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" /> の場合は <paramref name="value" />。

または -
<paramref name="value" /> &lt; <paramref name="min" /> の場合は <paramref name="min" />。

または -
<paramref name="max" /> &lt; <paramref name="value" /> の場合は <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int32,System.Int32,System.Int32)">
      <summary>
        <paramref name="min" /> 以上 <paramref name="max" /> 以下の範囲に固定される <paramref name="value" /> を返します。</summary>
      <param name="value">固定される値。</param>
      <param name="min">結果の下限。</param>
      <param name="max">結果の上限。</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" /> の場合は <paramref name="value" />。

または -
<paramref name="value" /> &lt; <paramref name="min" /> の場合は <paramref name="min" />。

または -
<paramref name="max" /> &lt; <paramref name="value" /> の場合は <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int64,System.Int64,System.Int64)">
      <summary>
        <paramref name="min" /> 以上 <paramref name="max" /> 以下の範囲に固定される <paramref name="value" /> を返します。</summary>
      <param name="value">固定される値。</param>
      <param name="min">結果の下限。</param>
      <param name="max">結果の上限。</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" /> の場合は <paramref name="value" />。

または -
<paramref name="value" /> &lt; <paramref name="min" /> の場合は <paramref name="min" />。

または -
<paramref name="max" /> &lt; <paramref name="value" /> の場合は <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.SByte,System.SByte,System.SByte)">
      <summary>
        <paramref name="min" /> 以上 <paramref name="max" /> 以下の範囲に固定される <paramref name="value" /> を返します。</summary>
      <param name="value">固定される値。</param>
      <param name="min">結果の下限。</param>
      <param name="max">結果の上限。</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" /> の場合は <paramref name="value" />。

または -
<paramref name="value" /> &lt; <paramref name="min" /> の場合は <paramref name="min" />。

または -
<paramref name="max" /> &lt; <paramref name="value" /> の場合は <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Single,System.Single,System.Single)">
      <summary>
        <paramref name="min" /> 以上 <paramref name="max" /> 以下の範囲に固定される <paramref name="value" /> を返します。</summary>
      <param name="value">固定される値。</param>
      <param name="min">結果の下限。</param>
      <param name="max">結果の上限。</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" /> の場合は <paramref name="value" />。

または -
<paramref name="value" /> &lt; <paramref name="min" /> の場合は <paramref name="min" />。

または -
<paramref name="max" /> &lt; <paramref name="value" /> の場合は <paramref name="max" />。

または -
<paramref name="value" /> が <see cref="F:System.Single.NaN" /> と等しい場合は <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)">
      <summary>
        <paramref name="min" /> 以上 <paramref name="max" /> 以下の範囲に固定される <paramref name="value" /> を返します。</summary>
      <param name="value">固定される値。</param>
      <param name="min">結果の下限。</param>
      <param name="max">結果の上限。</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" /> の場合は <paramref name="value" />。

または -
<paramref name="value" /> &lt; <paramref name="min" /> の場合は <paramref name="min" />。

または -
<paramref name="max" /> &lt; <paramref name="value" /> の場合は <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)">
      <summary>
        <paramref name="min" /> 以上 <paramref name="max" /> 以下の範囲に固定される <paramref name="value" /> を返します。</summary>
      <param name="value">固定される値。</param>
      <param name="min">結果の下限。</param>
      <param name="max">結果の上限。</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" /> の場合は <paramref name="value" />。

または -
<paramref name="value" /> &lt; <paramref name="min" /> の場合は <paramref name="min" />。

または -
<paramref name="max" /> &lt; <paramref name="value" /> の場合は <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)">
      <summary>
        <paramref name="min" /> 以上 <paramref name="max" /> 以下の範囲に固定される <paramref name="value" /> を返します。</summary>
      <param name="value">固定される値。</param>
      <param name="min">結果の下限。</param>
      <param name="max">結果の上限。</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" /> の場合は <paramref name="value" />。

または -
<paramref name="value" /> &lt; <paramref name="min" /> の場合は <paramref name="min" />。

または -
<paramref name="max" /> &lt; <paramref name="value" /> の場合は <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.CopySign(System.Double,System.Double)">
      <summary>
        <paramref name="x" /> の絶対値と符号 <paramref name="y" /> の値を返します。</summary>
      <param name="x">結果に絶対値が使用される数値。</param>
      <param name="y">結果に符号が使用される数値。</param>
      <returns>
        <paramref name="x" /> の絶対値と符号 <paramref name="y" /> の値。</returns>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
      <summary>指定された角度のコサインを返します。</summary>
      <param name="d">ラジアンで表した角度。</param>
      <returns>
        <paramref name="d" /> のコサイン。 <paramref name="d" /> が <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" /> のいずれかに等しい場合、このメソッドは <see cref="F:System.Double.NaN" /> を返します。</returns>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
      <summary>指定された角度のハイパーボリック コサインを返します。</summary>
      <param name="value">ラジアンで表した角度。</param>
      <returns>
        <paramref name="value" /> のハイパーボリック コサイン。 <paramref name="value" /> が <see cref="F:System.Double.NegativeInfinity" /> または <see cref="F:System.Double.PositiveInfinity" /> に等しい場合は、<see cref="F:System.Double.PositiveInfinity" /> が返されます。 <paramref name="value" /> が <see cref="F:System.Double.NaN" /> に等しい場合は、<see cref="F:System.Double.NaN" /> が返されます。</returns>
    </member>
    <member name="M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)">
      <summary>2 つの 32 ビット符号付き整数の商を計算し、出力パラメーターの剰余を返します。</summary>
      <param name="a">被除数。</param>
      <param name="b">除数。</param>
      <param name="result">剰余。</param>
      <returns>指定した数値の商。</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="b" /> が 0 です。</exception>
    </member>
    <member name="M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)">
      <summary>2 つの 64 ビット符号付き整数の商を計算し、出力パラメーターの剰余を返します。</summary>
      <param name="a">被除数。</param>
      <param name="b">除数。</param>
      <param name="result">剰余。</param>
      <returns>指定した数値の商。</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="b" /> が 0 です。</exception>
    </member>
    <member name="F:System.Math.E">
      <summary>定数 <see langword="e" /> によって示される、自然対数の底を表します。</summary>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
      <summary>指定した値で <see langword="e" /> を累乗した値を返します。</summary>
      <param name="d">累乗を指定する数値。</param>
      <returns>数値 <see langword="e" /> を <paramref name="d" /> で累乗した値。 <paramref name="d" /> が <see cref="F:System.Double.NaN" /> または <see cref="F:System.Double.PositiveInfinity" /> のいずれかに等しい場合は、その値が返されます。 <paramref name="d" /> が <see cref="F:System.Double.NegativeInfinity" /> に等しい場合は、0 が返されます。</returns>
    </member>
    <member name="M:System.Math.Floor(System.Decimal)">
      <summary>指定した 10 進数以下の数のうち、最大の整数値を返します。</summary>
      <param name="d">10 進数。</param>
      <returns>
        <paramref name="d" /> 以下の最大の整数値。  このメソッドは、<see cref="T:System.Decimal" /> 型の整数値を返すことに注意してください。</returns>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
      <summary>指定した倍精度浮動小数点数以下の数のうち、最大の整数値を返します。</summary>
      <param name="d">倍精度浮動小数点数。</param>
      <returns>
        <paramref name="d" /> 以下の最大の整数値。 <paramref name="d" /> が <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" /> のいずれかに等しい場合は、その値が返されます。</returns>
    </member>
    <member name="M:System.Math.FusedMultiplyAdd(System.Double,System.Double,System.Double)">
      <summary>1 つの三項演算として丸められた、(x * y) + z を返します。</summary>
      <param name="x">
        <paramref name="y" /> と乗算する数値。</param>
      <param name="y">
        <paramref name="x" /> と乗算する数値。</param>
      <param name="z">
        <paramref name="x" /> に <paramref name="y" /> を乗算した結果に加算される数値。</param>
      <returns>1 つの三項演算として丸められた、(x * y) + z。</returns>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
      <summary>指定した数を別の指定数で除算した結果の剰余を返します。</summary>
      <param name="x">被除数。</param>
      <param name="y">除数。</param>
      <returns>
        <paramref name="x" /> - (<paramref name="y" /> Q) に等しい数値。Q は <paramref name="x" /> / <paramref name="y" /> の商を丸めた近似整数を示します。<paramref name="x" /> / <paramref name="y" /> が 2 つの整数の中間に位置する場合は、偶数の整数が返されます。
<paramref name="x" /> - (<paramref name="y" /> Q) がゼロのとき、<paramref name="x" /> が正である場合は値 +0、<paramref name="x" /> が負である場合は -0 が返されます。
<paramref name="y" /> = 0 の場合は、<see cref="F:System.Double.NaN" /> が返されます。</returns>
    </member>
    <member name="M:System.Math.ILogB(System.Double)">
      <summary>指定した数の底 2 の整数の対数を返します。</summary>
      <param name="x">対数を求める対象の数値。</param>
      <returns>次の表に示した値のいずれか
 <paramref name="x" /> パラメーター 
  戻り値 
  既定値 
  <paramref name="x" /> の底 2 の整数の対数。つまり、(int)log2(<paramref name="x" />)。  
  
  0 
 <see cref="F:System.Int32.MinValue" /><see cref="F:System.Double.NaN" /> または <see cref="F:System.Double.PositiveInfinity" /> または <see cref="F:System.Double.NegativeInfinity" /> と等しい<see cref="F:System.Int32.MaxValue" /></returns>
    </member>
    <member name="M:System.Math.Log(System.Double)">
      <summary>指定した数の自然 (底 <see langword="e" />) 対数を返します。</summary>
      <param name="d">対数を求める対象の数値。</param>
      <returns>次の表に示した値のいずれか
 <paramref name="d" /> パラメーター 
  戻り値 
  正 
  <paramref name="d" /> の自然対数。つまり、ln <paramref name="d" /> または log e <paramref name="d" /> 0 
 <see cref="F:System.Double.NegativeInfinity" /> 負 
 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> と等価です。<see cref="F:System.Double.NaN" /><see cref="F:System.Double.PositiveInfinity" /> と等価です。<see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
      <summary>指定した数値の指定した底での対数を返します。</summary>
      <param name="a">対数を求める対象の数値。</param>
      <param name="newBase">対数の底。</param>
      <returns>次の表に示した値のいずれか (+Infinity は <see cref="F:System.Double.PositiveInfinity" />、-Infinity は <see cref="F:System.Double.NegativeInfinity" />、NaN は <see cref="F:System.Double.NaN" /> をそれぞれ示しています。)
 <paramref name="a" /><paramref name="newBase" /> 戻り値 
 <paramref name="a" />&gt; 0 
  (0 &lt;<paramref name="newBase" />&lt; 1) - または -(<paramref name="newBase" />&gt; 1) 
  lognewBase(a) 
 <paramref name="a" />&lt; 0 
  (任意の値) 
  NaN 
  (任意の値) 
 <paramref name="newBase" />&lt; 0 
  NaN 
 <paramref name="a" /> != 1 
 <paramref name="newBase" /> = 0 
  NaN 
 <paramref name="a" /> != 1 
 <paramref name="newBase" /> = +Infinity 
  NaN 
 <paramref name="a" /> = NaN 
  (任意の値) 
  NaN 
  (任意の値) 
 <paramref name="newBase" /> = NaN 
  NaN 
  (任意の値) 
 <paramref name="newBase" /> = 1 
  NaN 
 <paramref name="a" /> = 0 
  0 &lt;<paramref name="newBase" />&lt; 1 
  +Infinity 
 <paramref name="a" /> = 0 
 <paramref name="newBase" />&gt; 1 
  -Infinity 
 <paramref name="a" /> =  +無限大 
  0 &lt;<paramref name="newBase" />&lt; 1 
  -Infinity 
 <paramref name="a" /> =  +無限大 
 <paramref name="newBase" />&gt; 1 
  +Infinity 
 <paramref name="a" /> = 1 
 <paramref name="newBase" /> = 0 
  0 
 <paramref name="a" /> = 1 
 <paramref name="newBase" /> = +Infinity 
  0</returns>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
      <summary>指定した数の底 10 の対数を返します。</summary>
      <param name="d">対数を検索する対象の数値。</param>
      <returns>次の表に示した値のいずれか
 <paramref name="d" /> パラメーター 
  戻り値 
  正 
  <paramref name="d" /> の底 10 の log。つまり、log 10<paramref name="d" />。  
  
  0 
 <see cref="F:System.Double.NegativeInfinity" /> 負 
 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> と等価です。<see cref="F:System.Double.NaN" /><see cref="F:System.Double.PositiveInfinity" /> と等価です。<see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Log2(System.Double)">
      <summary>指定した数の底 2 の対数を返します。</summary>
      <param name="x">対数を検索する対象の数値。</param>
      <returns>次の表に示した値のいずれか
 <paramref name="x" /> パラメーター 
  戻り値 
  正 
  <paramref name="x" /> の底 2 の対数。つまり、log 2<paramref name="x" />。  
  
  0 
 <see cref="F:System.Double.NegativeInfinity" /> 負 
 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> と等価です。<see cref="F:System.Double.NaN" /><see cref="F:System.Double.PositiveInfinity" /> と等価です。<see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
      <summary>2 つの 8 ビット符号なし整数のうち、大きな方を返します。</summary>
      <param name="val1">比較する 2 つの 8 ビット符号なし整数の最初の数値。</param>
      <param name="val2">比較する 2 つの 8 ビット符号なし整数の 2 番目の数値。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</returns>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
      <summary>2 つの 10 進数のうち、大きい方を返します。</summary>
      <param name="val1">比較する 2 つの 10 進数の最初の数。</param>
      <param name="val2">比較する 2 つの 10 進数の 2 番目の数。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</returns>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
      <summary>2 つの倍精度浮動小数点数のうち、大きい方を返します。</summary>
      <param name="val1">比較する 2 つの倍精度浮動小数点数の最初の数。</param>
      <param name="val2">比較する 2 つの倍精度浮動小数点数の 2 番目の数。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。 <paramref name="val1" />、<paramref name="val2" />、または <paramref name="val1" /> と <paramref name="val2" /> の両方が <see cref="F:System.Double.NaN" /> に等しい場合、<see cref="F:System.Double.NaN" /> が返されます。</returns>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
      <summary>2 つの 16 ビット符号付き整数のうち、大きい方を返します。</summary>
      <param name="val1">比較する 2 つの 16 ビット符号付き整数の最初の数値。</param>
      <param name="val2">比較する 2 つの 16 ビット符号付き整数の 2 番目の数値。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</returns>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
      <summary>2 つの 32 ビット符号付き整数のうち、大きい方を返します。</summary>
      <param name="val1">比較する 2 つの 32 ビット符号付き整数の最初の数値。</param>
      <param name="val2">比較する 2 つの 32 ビット符号付き整数の 2 番目の数値。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</returns>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
      <summary>2 つの 64 ビット符号付き整数のうち、大きい方を返します。</summary>
      <param name="val1">比較する 2 つの 64 ビット符号付き整数の最初の数値。</param>
      <param name="val2">比較する 2 つの 64 ビット符号付き整数の 2 番目の数値。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</returns>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
      <summary>2 つの 8 ビット符号付き整数のうち、大きい方を返します。</summary>
      <param name="val1">比較する 2 つの 8 ビット符号付き整数の最初の数値。</param>
      <param name="val2">比較する 2 つの 8 ビット符号付き整数の 2 番目の数値。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</returns>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
      <summary>2 つの単精度浮動小数点数のうち、大きい方を返します。</summary>
      <param name="val1">比較する 2 つの単精度浮動小数点数の最初の数。</param>
      <param name="val2">比較する 2 つの単精度浮動小数点数の 2 番目の数。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。 <paramref name="val1" />、または <paramref name="val2" />、または <paramref name="val1" /> と <paramref name="val2" /> の両方が <see cref="F:System.Single.NaN" /> に等しい場合、<see cref="F:System.Single.NaN" /> が返されます。</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
      <summary>2 つの 16 ビット符号なし整数のうち、大きな方を返します。</summary>
      <param name="val1">比較する 2 つの 16 ビット符号なし整数の最初の数値。</param>
      <param name="val2">比較する 2 つの 16 ビット符号なし整数の 2 番目の数値。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
      <summary>2 つの 32 ビット符号なし整数のうち、大きな方を返します。</summary>
      <param name="val1">比較する 2 つの 32 ビット符号なし整数の最初の数値。</param>
      <param name="val2">比較する 2 つの 32 ビット符号なし整数の 2 番目の数値。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
      <summary>2 つの 64 ビット符号なし整数のうち、大きな方を返します。</summary>
      <param name="val1">比較する 2 つの 64 ビット符号なし整数の最初の数値。</param>
      <param name="val2">比較する 2 つの 64 ビット符号なし整数の 2 番目の数値。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</returns>
    </member>
    <member name="M:System.Math.MaxMagnitude(System.Double,System.Double)">
      <summary>2 つの倍精度浮動小数点数のうち、大きい絶対値を返します。</summary>
      <param name="x">比較する 2 つの倍精度浮動小数点数の最初の数。</param>
      <param name="y">比較する 2 つの倍精度浮動小数点数の 2 番目の数。</param>
      <returns>パラメーター <paramref name="x" /> または <paramref name="y" /> のうち、絶対値が大きい方。 <paramref name="x" />、または <paramref name="y" />、または <paramref name="x" /> と <paramref name="y" /> の両方が <see cref="F:System.Double.NaN" /> に等しい場合、<see cref="F:System.Double.NaN" /> が返されます。</returns>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
      <summary>2 つの 8 ビット符号なし整数のうち、小さい方を返します。</summary>
      <param name="val1">比較する 2 つの 8 ビット符号なし整数の最初の数値。</param>
      <param name="val2">比較する 2 つの 8 ビット符号なし整数の 2 番目の数値。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</returns>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
      <summary>2 つの 10 進数のうち、小さい方を返します。</summary>
      <param name="val1">比較する 2 つの 10 進数の最初の数。</param>
      <param name="val2">比較する 2 つの 10 進数の 2 番目の数。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</returns>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
      <summary>2 つの倍精度浮動小数点数のうち、小さい方を返します。</summary>
      <param name="val1">比較する 2 つの倍精度浮動小数点数の最初の数。</param>
      <param name="val2">比較する 2 つの倍精度浮動小数点数の 2 番目の数。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。 <paramref name="val1" />、<paramref name="val2" />、または <paramref name="val1" /> と <paramref name="val2" /> の両方が <see cref="F:System.Double.NaN" /> に等しい場合、<see cref="F:System.Double.NaN" /> が返されます。</returns>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
      <summary>2 つの 16 ビット符号付き整数のうち、小さい方を返します。</summary>
      <param name="val1">比較する 2 つの 16 ビット符号付き整数の最初の数値。</param>
      <param name="val2">比較する 2 つの 16 ビット符号付き整数の 2 番目の数値。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</returns>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
      <summary>2 つの 32 ビット符号付き整数のうち、小さい方を返します。</summary>
      <param name="val1">比較する 2 つの 32 ビット符号付き整数の最初の数値。</param>
      <param name="val2">比較する 2 つの 32 ビット符号付き整数の 2 番目の数値。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</returns>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
      <summary>2 つの 64 ビット符号付き整数のうち、小さい方を返します。</summary>
      <param name="val1">比較する 2 つの 64 ビット符号付き整数の最初の数値。</param>
      <param name="val2">比較する 2 つの 64 ビット符号付き整数の 2 番目の数値。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</returns>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
      <summary>2 つの 8 ビット符号付き整数のうち、小さい方を返します。</summary>
      <param name="val1">比較する 2 つの 8 ビット符号付き整数の最初の数値。</param>
      <param name="val2">比較する 2 つの 8 ビット符号付き整数の 2 番目の数値。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</returns>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
      <summary>2 つの単精度浮動小数点数のうち、小さい方を返します。</summary>
      <param name="val1">比較する 2 つの単精度浮動小数点数の最初の数。</param>
      <param name="val2">比較する 2 つの単精度浮動小数点数の 2 番目の数。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。 <paramref name="val1" />、<paramref name="val2" />、または <paramref name="val1" /> と <paramref name="val2" /> の両方が <see cref="F:System.Single.NaN" /> に等しい場合、<see cref="F:System.Single.NaN" /> が返されます。</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
      <summary>2 つの 16 ビット符号なし整数のうち、小さい方を返します。</summary>
      <param name="val1">比較する 2 つの 16 ビット符号なし整数の最初の数値。</param>
      <param name="val2">比較する 2 つの 16 ビット符号なし整数の 2 番目の数値。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
      <summary>2 つの 32 ビット符号なし整数のうち、小さい方を返します。</summary>
      <param name="val1">比較する 2 つの 32 ビット符号なし整数の最初の数値。</param>
      <param name="val2">比較する 2 つの 32 ビット符号なし整数の 2 番目の数値。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
      <summary>2 つの 64 ビット符号なし整数のうち、小さい方を返します。</summary>
      <param name="val1">比較する 2 つの 64 ビット符号なし整数の最初の数値。</param>
      <param name="val2">比較する 2 つの 64 ビット符号なし整数の 2 番目の数値。</param>
      <returns>パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</returns>
    </member>
    <member name="M:System.Math.MinMagnitude(System.Double,System.Double)">
      <summary>2 つの倍精度浮動小数点数のうち、小さい絶対値を返します。</summary>
      <param name="x">比較する 2 つの倍精度浮動小数点数の最初の数。</param>
      <param name="y">比較する 2 つの倍精度浮動小数点数の 2 番目の数。</param>
      <returns>パラメーター <paramref name="x" /> または <paramref name="y" /> のうち、絶対値が小さい方。 <paramref name="x" />、または <paramref name="y" />、または <paramref name="x" /> と <paramref name="y" /> の両方が <see cref="F:System.Double.NaN" /> に等しい場合、<see cref="F:System.Double.NaN" /> が返されます。</returns>
    </member>
    <member name="F:System.Math.PI">
      <summary>定数 (π) を指定して、円の直径に対する円周の割合を表します。</summary>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
      <summary>指定の数値を指定した値で累乗した値を返します。</summary>
      <param name="x">累乗対象の倍精度浮動小数点数。</param>
      <param name="y">累乗を指定する倍精度浮動小数点数。</param>
      <returns>数値 <paramref name="x" /> を <paramref name="y" /> で累乗した値。</returns>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
      <summary>10 進数の値は最も近い整数値に丸められ、中間値は最も近い偶数値に丸められます。</summary>
      <param name="d">丸め対象の 10 進数。</param>
      <returns>
        <paramref name="d" /> パラメーターに最も近い整数。 <paramref name="d" /> の小数部が 2 つの整数 (一方が偶数で、もう一方が奇数) の中間にある場合は、偶数が返されます。 このメソッドは、整数型ではなく <see cref="T:System.Decimal" /> を返します。</returns>
      <exception cref="T:System.OverflowException">結果が <see cref="T:System.Decimal" /> の範囲外です。</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
      <summary>10 進数の値は指定した小数部の桁数に丸められ、中間値は最も近い偶数値に丸められます。</summary>
      <param name="d">丸め対象の 10 進数。</param>
      <param name="decimals">戻り値の小数部の桁数。</param>
      <returns>
        <paramref name="d" /> に等しい小数部の桁数を格納する <paramref name="decimals" /> に最も近い数値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> が 0 未満か、28 を超えています。</exception>
      <exception cref="T:System.OverflowException">結果が <see cref="T:System.Decimal" /> の範囲外です。</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)">
      <summary>10 進数の値は指定した小数部の桁数に丸められ、中間値には指定した丸め処理が使用されます。</summary>
      <param name="d">丸め対象の 10 進数。</param>
      <param name="decimals">戻り値の小数部の桁数。</param>
      <param name="mode">
        <paramref name="d" /> が 2 つの数値の中間にある場合に丸める方法を指定します。</param>
      <returns>
        <paramref name="d" /> に等しい小数部の桁数を格納する <paramref name="decimals" /> に最も近い数値。 <paramref name="d" /> の小数部の桁数が <paramref name="decimals" /> よりも少ない場合、<paramref name="d" /> がそのまま返されます。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> が 0 未満か、28 を超えています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> が <see cref="T:System.MidpointRounding" /> の正しい値ではありません。</exception>
      <exception cref="T:System.OverflowException">結果が <see cref="T:System.Decimal" /> の範囲外です。</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.MidpointRounding)">
      <summary>10 進数の値は最も近い整数に丸められ、中間値には指定した丸め処理が使用されます。</summary>
      <param name="d">丸め対象の 10 進数。</param>
      <param name="mode">
        <paramref name="d" /> が 2 つの数値の中間にある場合に丸める方法を指定します。</param>
      <returns>
        <paramref name="d" /> に最も近い整数。 <paramref name="d" /> が 2 つの数値 (一方が偶数でもう一方が奇数) の中間にある場合、<paramref name="mode" /> によって 2 つの数値のどちらが返されるかが決まります。 このメソッドは、整数型ではなく <see cref="T:System.Decimal" /> を返します。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> が <see cref="T:System.MidpointRounding" /> の正しい値ではありません。</exception>
      <exception cref="T:System.OverflowException">結果が <see cref="T:System.Decimal" /> の範囲外です。</exception>
    </member>
    <member name="M:System.Math.Round(System.Double)">
      <summary>倍精度浮動小数点の値は最も近い整数値に丸められ、中間値は最も近い偶数値に丸められます。</summary>
      <param name="a">丸め対象の倍精度浮動小数点数。</param>
      <returns>
        <paramref name="a" /> に最も近い整数。 <paramref name="a" /> の小数部が 2 つの整数 (一方が偶数で、もう一方が奇数) の中間にある場合は、偶数が返されます。 このメソッドは、整数型ではなく <see cref="T:System.Double" /> を返します。</returns>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
      <summary>倍精度浮動小数点の値は指定した小数部の桁数に丸められ、中間値は最も近い偶数値に丸められます。</summary>
      <param name="value">丸め対象の倍精度浮動小数点数。</param>
      <param name="digits">戻り値の小数部の桁数。</param>
      <returns>
        <paramref name="value" /> に等しい小数部の桁数を格納する <paramref name="digits" /> に最も近い数値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> が 0 より小さいか、15 を超えています。</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)">
      <summary>倍精度浮動小数点の値は指定した小数部の桁数に丸められ、中間値には指定した丸め処理が使用されます。</summary>
      <param name="value">丸め対象の倍精度浮動小数点数。</param>
      <param name="digits">戻り値の小数部の桁数。</param>
      <param name="mode">
        <paramref name="value" /> が 2 つの数値の中間にある場合に丸める方法を指定します。</param>
      <returns>
        <paramref name="digits" /> に等しい小数部の桁数を格納する <paramref name="value" /> に最も近い数値。 <paramref name="value" /> の小数部の桁数が <paramref name="digits" /> よりも少ない場合、<paramref name="value" /> がそのまま返されます。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> が 0 より小さいか、15 を超えています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> が <see cref="T:System.MidpointRounding" /> の正しい値ではありません。</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.MidpointRounding)">
      <summary>倍精度浮動小数点の値は最も近い整数に丸められ、中間値には指定した丸め処理が使用されます。</summary>
      <param name="value">丸め対象の倍精度浮動小数点数。</param>
      <param name="mode">
        <paramref name="value" /> が 2 つの数値の中間にある場合に丸める方法を指定します。</param>
      <returns>
        <paramref name="value" /> に最も近い整数。 <paramref name="value" /> が 2 つの整数 (一方が偶数でもう一方が奇数) の中間にある場合、<paramref name="mode" /> によって 2 つの数値のどちらが返されるかが決まります。 このメソッドは、整数型ではなく <see cref="T:System.Double" /> を返します。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> が <see cref="T:System.MidpointRounding" /> の正しい値ではありません。</exception>
    </member>
    <member name="M:System.Math.ScaleB(System.Double,System.Int32)">
      <summary>効率的に計算された x * 2^n を返します。</summary>
      <param name="x">基底値を指定する単精度浮動小数点数。</param>
      <param name="n">累乗を指定する単精度浮動小数点数。</param>
      <returns>効率的に計算された x * 2^n。</returns>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
      <summary>10 進数の符号を示す整数を返します。</summary>
      <param name="value">符号付きの 10 進数。</param>
      <returns>
        <paramref name="value" /> の符号を示す数値 (次の表を参照)。
 戻り値 
 説明 
 -1 
<paramref name="value" /> が 0 未満です。  
  
 0 
<paramref name="value" /> が 0 です。  
  
 1 
<paramref name="value" /> が 0 より大きい値です。</returns>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
      <summary>倍精度浮動小数点数の符号を示す整数を返します。</summary>
      <param name="value">符号付き数値。</param>
      <returns>
        <paramref name="value" /> の符号を示す数値 (次の表を参照)。
 戻り値 
 説明 
 -1 
<paramref name="value" /> が 0 未満です。  
  
 0 
<paramref name="value" /> が 0 です。  
  
 1 
<paramref name="value" /> が 0 より大きい値です。</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> と <see cref="F:System.Double.NaN" /> が等価です。</exception>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
      <summary>16 ビット符号付き整数の符号を示す整数を返します。</summary>
      <param name="value">符号付き数値。</param>
      <returns>
        <paramref name="value" /> の符号を示す数値 (次の表を参照)。
 戻り値 
 説明 
 -1 
<paramref name="value" /> が 0 未満です。  
  
 0 
<paramref name="value" /> が 0 です。  
  
 1 
<paramref name="value" /> が 0 より大きい値です。</returns>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
      <summary>32 ビット符号付き整数の符号を示す整数を返します。</summary>
      <param name="value">符号付き数値。</param>
      <returns>
        <paramref name="value" /> の符号を示す数値 (次の表を参照)。
 戻り値 
 説明 
 -1 
<paramref name="value" /> が 0 未満です。  
  
 0 
<paramref name="value" /> が 0 です。  
  
 1 
<paramref name="value" /> が 0 より大きい値です。</returns>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
      <summary>64 ビット符号付き整数の符号を示す正数を返します。</summary>
      <param name="value">符号付き数値。</param>
      <returns>
        <paramref name="value" /> の符号を示す数値 (次の表を参照)。
 戻り値 
 説明 
 -1 
<paramref name="value" /> が 0 未満です。  
  
 0 
<paramref name="value" /> が 0 です。  
  
 1 
<paramref name="value" /> が 0 より大きい値です。</returns>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
      <summary>8 ビット符号付き整数の符号を示す整数を返します。</summary>
      <param name="value">符号付き数値。</param>
      <returns>
        <paramref name="value" /> の符号を示す数値 (次の表を参照)。
 戻り値 
 説明 
 -1 
<paramref name="value" /> が 0 未満です。  
  
 0 
<paramref name="value" /> が 0 です。  
  
 1 
<paramref name="value" /> が 0 より大きい値です。</returns>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
      <summary>単精度浮動小数点数の符号を示す値を返します。</summary>
      <param name="value">符号付き数値。</param>
      <returns>
        <paramref name="value" /> の符号を示す数値 (次の表を参照)。
 戻り値 
 説明 
 -1 
<paramref name="value" /> が 0 未満です。  
  
 0 
<paramref name="value" /> が 0 です。  
  
 1 
<paramref name="value" /> が 0 より大きい値です。</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> と <see cref="F:System.Single.NaN" /> が等価です。</exception>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
      <summary>指定された角度のサインを返します。</summary>
      <param name="a">ラジアンで表した角度。</param>
      <returns>
        <paramref name="a" /> のサイン。 <paramref name="a" /> が <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" /> のいずれかに等しい場合、このメソッドは <see cref="F:System.Double.NaN" /> を返します。</returns>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
      <summary>指定された角度のハイパーボリック サインを返します。</summary>
      <param name="value">ラジアンで表した角度。</param>
      <returns>
        <paramref name="value" /> のハイパーボリック サイン。 <paramref name="value" /> が <see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" />、または <see cref="F:System.Double.NaN" /> のいずれかに等しい場合、このメソッドは <paramref name="value" /> に等しい <see cref="T:System.Double" /> を返します。</returns>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
      <summary>指定された数値の平方根を返します。</summary>
      <param name="d">平方根を求める対象の数値。</param>
      <returns>次の表に示した値のいずれか
 <paramref name="d" /> パラメーター 
  戻り値 
  0 または正 
  <paramref name="d" /> の正の平方根。  
  
  負 
 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> と等しい<see cref="F:System.Double.NaN" /><see cref="F:System.Double.PositiveInfinity" /> と等しい<see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
      <summary>指定された角度のタンジェントを返します。</summary>
      <param name="a">ラジアンで表した角度。</param>
      <returns>
        <paramref name="a" /> のタンジェント。 <paramref name="a" /> が <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" /> のいずれかに等しい場合、このメソッドは <see cref="F:System.Double.NaN" /> を返します。</returns>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
      <summary>指定された角度のハイパーボリック タンジェントを返します。</summary>
      <param name="value">ラジアンで表した角度。</param>
      <returns>
        <paramref name="value" /> のハイパーボリック タンジェント。 <paramref name="value" /> が <see cref="F:System.Double.NegativeInfinity" /> に等しい場合、このメソッドは -1 を返します。 値が <see cref="F:System.Double.PositiveInfinity" /> に等しい場合、このメソッドは 1 を返します。 <paramref name="value" /> が <see cref="F:System.Double.NaN" /> に等しい場合、このメソッドは <see cref="F:System.Double.NaN" /> を返します。</returns>
    </member>
    <member name="M:System.Math.Truncate(System.Decimal)">
      <summary>指定した 10 進数の整数部を計算します。</summary>
      <param name="d">切り捨て対象の数値。</param>
      <returns>
        <paramref name="d" /> の整数部。つまり、小数部の桁を破棄した後に残る数値。</returns>
    </member>
    <member name="M:System.Math.Truncate(System.Double)">
      <summary>指定した倍精度浮動小数点数の整数部を計算します。</summary>
      <param name="d">切り捨て対象の数値。</param>
      <returns>
        <paramref name="d" /> の整数部。つまり、小数部の桁を破棄した後に残る数値 (次の表にリストされている値のいずれか)。
<paramref name="d" /> 戻り値 
<see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="T:System.MathF">
      <summary>三角関数や対数関数などの一般的な数値関数の定数と静的メソッドを提供します。</summary>
    </member>
    <member name="M:System.MathF.Abs(System.Single)">
      <summary>単精度浮動小数点数の絶対値を返します。</summary>
      <param name="x">
        <see cref="F:System.Single.MinValue" /> 以上で、<see cref="F:System.Single.MaxValue" /> 以下の数値。</param>
      <returns>0 ≤ x ≤ <see cref="F:System.Single.MaxValue" /> の単精度浮動小数点数 x。</returns>
    </member>
    <member name="M:System.MathF.Acos(System.Single)">
      <summary>コサインが指定数となる角度を返します。</summary>
      <param name="x">コサインを表す数で、<paramref name="x" /> が -1 以上 1 以下である必要があります。</param>
      <returns>0 ≤ θ ≤ π の、ラジアンで表した角度 θ。
または
<paramref name="x" /> &lt; -1 または <paramref name="x" /> &gt; 1、あるいは <paramref name="x" /> が <see cref="F:System.Single.NaN" /> と等しい場合は、<see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Acosh(System.Single)">
      <summary>ハイパーボリック コサインが指定数となる角度を返します。</summary>
      <param name="x">ハイパーボリック コサインを表す数で、<paramref name="x" /> が 1 以上 <see cref="F:System.Single.PositiveInfinity" /> 以下である必要があります。</param>
      <returns>0 ≤ θ ≤ ∞ の、ラジアンで表した角度 θ。
または
<paramref name="x" /> &lt; 1、または <paramref name="x" /> が <see cref="F:System.Single.NaN" /> と等しい場合は、<see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Asin(System.Single)">
      <summary>サインが指定数となる角度を返します。</summary>
      <param name="x">サインを表す数で、<paramref name="x" /> が -1 以上 1 以下である必要があります。</param>
      <returns>-π/2 ≤ θ ≤ π/2 の、ラジアンで表した角度 θ。
または
<paramref name="x" /> &lt; -1 または <paramref name="x" /> &gt; 1、あるいは <paramref name="x" /> が <see cref="F:System.Single.NaN" /> と等しい場合は、<see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Asinh(System.Single)">
      <summary>ハイパーボリック サインが指定数となる角度を返します。</summary>
      <param name="x">ハイパーボリック サインを表す数で、<paramref name="x" /> が <see cref="F:System.Single.NegativeInfinity" /> 以上 <see cref="F:System.Single.PositiveInfinity" /> 以下である必要があります。</param>
      <returns>-∞ &lt; θ ≤ -1 または 1 ≤ θ &lt; ∞ の、ラジアンで表した角度 θ。

または -
<paramref name="x" /> が <see cref="F:System.Single.NaN" /> と等しい場合は <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Atan(System.Single)">
      <summary>タンジェントが指定数となる角度を返します。</summary>
      <param name="x">タンジェントを表す数。</param>
      <returns>-π/2 ≤ θ ≤ π/2 の、ラジアンで表した角度 θ。
または
<paramref name="x" /> が <see cref="F:System.Single.NaN" /> に等しい場合は <see cref="F:System.Single.NaN" />。<paramref name="x" /> が <see cref="F:System.Single.NegativeInfinity" /> に等しい場合は、倍精度に丸めた -π/2 (-1.5707963267949)。<paramref name="x" /> が <see cref="F:System.Single.PositiveInfinity" /> に等しい場合は、倍精度に丸めた π/2 (1.5707963267949)。</returns>
    </member>
    <member name="M:System.MathF.Atan2(System.Single,System.Single)">
      <summary>タンジェントが 2 つの指定された数の商である角度を返します。</summary>
      <param name="y">点の y 座標。</param>
      <param name="x">点の x 座標。</param>
      <returns>-π ≤ θ ≤ π および tan(θ) = <paramref name="y" /> / <paramref name="x" /> の、ラジアンで示した角度 θ。(<paramref name="x" />, <paramref name="y" />) は、デカルト座標の点を示します。 次の点に注意してください。

クワドラント 1 の (<paramref name="x" />, <paramref name="y" />) の場合は、0 &lt; θ &lt; π/2。

クワドラント 2 の (<paramref name="x" />, <paramref name="y" />) の場合は、π/2 &lt; θ ≤ π。

クワドラント 3 の (<paramref name="x" />, <paramref name="y" />) の場合は、-π &lt; θ &lt; -π/2。

クワドラント 4 の (<paramref name="x" />, <paramref name="y" />) の場合は、-π/2 &lt; θ &lt; 0。


クワドラント間の境界上にある点の場合は、次の戻り値になります。

y が 0 で x が負数でない場合は、θ = 0。

y が 0 で x が負の場合は、θ = π。

y が正で x が 0 の場合は、θ = π/2。

y が負数で x が 0 の場合は、θ = -π/2。

y が 0 かつ x が 0 の場合は、θ = 0。


<paramref name="x" /> または <paramref name="y" /> が <see cref="F:System.Single.NaN" /> であるか、<paramref name="x" /> または <paramref name="y" /> が <see cref="F:System.Single.PositiveInfinity" /> または <see cref="F:System.Single.NegativeInfinity" /> のいずれである場合、メソッドは <see cref="F:System.Single.NaN" /> を返します。</returns>
    </member>
    <member name="M:System.MathF.Atanh(System.Single)">
      <summary>ハイパーボリック タンジェントが指定数となる角度を返します。</summary>
      <param name="x">ハイパーボリック タンジェントを表す数で、<paramref name="x" /> が -1 以上 1 以下である必要があります。</param>
      <returns>-∞ &lt; θ &lt;-1 または 1 &lt; θ &lt; ∞ の、ラジアンで表した角度 θ。

または -
<paramref name="x" /> &lt; -1 または <paramref name="x" /> &gt; 1、あるいは <paramref name="x" /> が <see cref="F:System.Single.NaN" /> と等しい場合は、<see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.BitDecrement(System.Single)">
      <summary>
        <paramref name="x" /> 未満を比較する、次に小さい値を返します。</summary>
      <param name="x">デクリメントする値。</param>
      <returns>
        <paramref name="x" /> 未満を比較する、次に小さい値。

または -
<paramref name="x" /> が <see cref="F:System.Single.NegativeInfinity" /> と等しい場合は <see cref="F:System.Single.NegativeInfinity" />。

または -
<paramref name="x" /> が <see cref="F:System.Single.NaN" /> と等しい場合は <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.BitIncrement(System.Single)">
      <summary>
        <paramref name="x" /> を超える次に大きい値を返します。</summary>
      <param name="x">インクリメントする値。</param>
      <returns>
        <paramref name="x" /> を超える次に大きい値。
または
<paramref name="x" /> が <see cref="F:System.Single.PositiveInfinity" /> と等しい場合は <see cref="F:System.Single.PositiveInfinity" />。

または -
<paramref name="x" /> が <see cref="F:System.Single.NaN" /> と等しい場合は <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Cbrt(System.Single)">
      <summary>指定された数値の立方根を返します。</summary>
      <param name="x">立方根を求める対象の数値。</param>
      <returns>
        <paramref name="x" /> の立方根。
または
<paramref name="x" /> が <see cref="F:System.Single.NaN" /> と等しい場合は <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Ceiling(System.Single)">
      <summary>指定した単精度浮動小数点数以上の数のうち、最小の整数値を返します。</summary>
      <param name="x">単精度浮動小数点数。</param>
      <returns>
        <paramref name="x" /> 以上の最小の整数値。 <paramref name="x" /> が <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" />、<see cref="F:System.Single.PositiveInfinity" /> のいずれかに等しい場合は、その値が返されます。 このメソッドは、整数型ではなく <see cref="T:System.Single" /> を返します。</returns>
    </member>
    <member name="M:System.MathF.CopySign(System.Single,System.Single)">
      <summary>
        <paramref name="x" /> の絶対値と符号 <paramref name="y" /> の値を返します。</summary>
      <param name="x">結果に絶対値が使用される数値。</param>
      <param name="y">結果に符号が使用される数値。</param>
      <returns>
        <paramref name="x" /> の絶対値と符号 <paramref name="y" /> の値。</returns>
    </member>
    <member name="M:System.MathF.Cos(System.Single)">
      <summary>指定された角度のコサインを返します。</summary>
      <param name="x">ラジアンで表した角度。</param>
      <returns>
        <paramref name="x" /> のコサイン。 <paramref name="x" /> が <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" />、<see cref="F:System.Single.PositiveInfinity" /> のいずれかに等しい場合、このメソッドは <see cref="F:System.Single.NaN" /> を返します。</returns>
    </member>
    <member name="M:System.MathF.Cosh(System.Single)">
      <summary>指定された角度のハイパーボリック コサインを返します。</summary>
      <param name="x">ラジアンで表した角度。</param>
      <returns>
        <paramref name="x" /> のハイパーボリック コサイン。 <paramref name="x" /> が <see cref="F:System.Single.NegativeInfinity" /> または <see cref="F:System.Single.PositiveInfinity" /> に等しい場合は、<see cref="F:System.Single.PositiveInfinity" /> が返されます。 <paramref name="x" /> が <see cref="F:System.Single.NaN" /> に等しい場合は、<see cref="F:System.Single.NaN" /> が返されます。</returns>
    </member>
    <member name="F:System.MathF.E">
      <summary>定数 <see langword="e" /> によって示される、自然対数の底を表します。</summary>
    </member>
    <member name="M:System.MathF.Exp(System.Single)">
      <summary>指定した値で <see langword="e" /> を累乗した値を返します。</summary>
      <param name="x">累乗を指定する数値。</param>
      <returns>数値 <see langword="e" /> を <paramref name="x" /> で累乗した値。 <paramref name="x" /> が <see cref="F:System.Single.NaN" /> または <see cref="F:System.Single.PositiveInfinity" /> のいずれかに等しい場合は、その値が返されます。 <paramref name="x" /> が <see cref="F:System.Single.NegativeInfinity" /> に等しい場合は、0 が返されます。</returns>
    </member>
    <member name="M:System.MathF.Floor(System.Single)">
      <summary>指定した単精度浮動小数点数以下の数のうち、最大の整数値を返します。</summary>
      <param name="x">単精度浮動小数点数。</param>
      <returns>
        <paramref name="x" /> 以下の最大の整数値。 <paramref name="x" /> が <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" />、<see cref="F:System.Single.PositiveInfinity" /> のいずれかに等しい場合は、その値が返されます。</returns>
    </member>
    <member name="M:System.MathF.FusedMultiplyAdd(System.Single,System.Single,System.Single)">
      <summary>1 つの三項演算として丸められた、(x * y) + z を返します。</summary>
      <param name="x">
        <paramref name="y" /> と乗算する数値。</param>
      <param name="y">
        <paramref name="x" /> と乗算する数値。</param>
      <param name="z">
        <paramref name="x" /> に <paramref name="y" /> を乗算した結果に加算される数値。</param>
      <returns>1 つの三項演算として丸められた、(x * y) + z。</returns>
    </member>
    <member name="M:System.MathF.IEEERemainder(System.Single,System.Single)">
      <summary>指定した数を別の指定数で除算した結果の剰余を返します。</summary>
      <param name="x">被除数。</param>
      <param name="y">除数。</param>
      <returns>
        <paramref name="x" /> - (<paramref name="y" /> Q) に等しい数値。Q は <paramref name="x" /> / <paramref name="y" /> の商を丸めた近似整数を示します。<paramref name="x" /> / <paramref name="y" /> が 2 つの整数の中間に位置する場合は、偶数の整数が返されます。
<paramref name="x" /> - (<paramref name="y" /> Q) がゼロのとき、<paramref name="x" /> が正である場合は値 +0、<paramref name="x" /> が負である場合は -0 が返されます。
<paramref name="y" /> = 0 の場合は、<see cref="F:System.Single.NaN" /> が返されます。</returns>
    </member>
    <member name="M:System.MathF.ILogB(System.Single)">
      <summary>指定した数の底 2 の整数の対数を返します。</summary>
      <param name="x">対数を求める対象の数値。</param>
      <returns>次の表に示した値のいずれか
 <paramref name="x" /> パラメーター 
  戻り値 
  既定値 
  <paramref name="x" /> の底 2 の整数の対数。つまり、(int)log2(<paramref name="x" />)。  
  
  0 
 <see cref="F:System.Int32.MinValue" /><see cref="F:System.Single.NaN" /> または <see cref="F:System.Single.PositiveInfinity" /> または <see cref="F:System.Single.NegativeInfinity" /> と等しい<see cref="F:System.Int32.MaxValue" /></returns>
    </member>
    <member name="M:System.MathF.Log(System.Single)">
      <summary>指定した数の自然 (底 <see langword="e" />) 対数を返します。</summary>
      <param name="x">対数を求める対象の数値。</param>
      <returns>次の表に示した値のいずれか
 <paramref name="x" /> パラメーター 
  戻り値 
  正 
  <paramref name="x" /> の自然対数。つまり、ln <paramref name="x" /> または log e <paramref name="x" /> 0 
 <see cref="F:System.Single.NegativeInfinity" /> 負 
 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> と等価です。<see cref="F:System.Single.NaN" /><see cref="F:System.Single.PositiveInfinity" /> と等価です。<see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Log(System.Single,System.Single)">
      <summary>指定した数値の指定した底での対数を返します。</summary>
      <param name="x">対数を求める対象の数値。</param>
      <param name="y">底。</param>
      <returns>次の表に示した値のいずれか (+Infinity は <see cref="F:System.Single.PositiveInfinity" />、-Infinity は <see cref="F:System.Single.NegativeInfinity" />、NaN は <see cref="F:System.Single.NaN" /> をそれぞれ示しています。)
 <paramref name="x" /><paramref name="newBase" /> 戻り値 
 <paramref name="x" />&gt; 0 
  (0 &lt;<paramref name="newBase" />&lt; 1) - または -(<paramref name="newBase" />&gt; 1) 
  lognewBase(a) 
 <paramref name="x" />&lt; 0 
  (任意の値) 
  NaN 
  (任意の値) 
 <paramref name="newBase" />&lt; 0 
  NaN 
 <paramref name="x" /> != 1 
 <paramref name="newBase" /> = 0 
  NaN 
 <paramref name="x" /> != 1 
 <paramref name="newBase" /> = +Infinity 
  NaN 
 <paramref name="x" /> = NaN 
  (任意の値) 
  NaN 
  (任意の値) 
 <paramref name="newBase" /> = NaN 
  NaN 
  (任意の値) 
 <paramref name="newBase" /> = 1 
  NaN 
 <paramref name="x" /> = 0 
  0 &lt;<paramref name="newBase" />&lt; 1 
  +Infinity 
 <paramref name="x" /> = 0 
 <paramref name="newBase" />&gt; 1 
  -Infinity 
 <paramref name="x" /> =  +無限大 
  0 &lt;<paramref name="newBase" />&lt; 1 
  -Infinity 
 <paramref name="x" /> =  +無限大 
 <paramref name="newBase" />&gt; 1 
  +Infinity 
 <paramref name="x" /> = 1 
 <paramref name="newBase" /> = 0 
  0 
 <paramref name="x" /> = 1 
 <paramref name="newBase" /> = +Infinity 
  0</returns>
    </member>
    <member name="M:System.MathF.Log10(System.Single)">
      <summary>指定した数の底 10 の対数を返します。</summary>
      <param name="x">対数を検索する対象の数値。</param>
      <returns>次の表に示した値のいずれか
 <paramref name="x" /> パラメーター 
  戻り値 
  正 
  <paramref name="x" /> の底 10 の log。つまり、log 10<paramref name="x" />。  
  
  0 
 <see cref="F:System.Single.NegativeInfinity" /> 負 
 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> と等価です。<see cref="F:System.Single.NaN" /><see cref="F:System.Single.PositiveInfinity" /> と等価です。<see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Log2(System.Single)">
      <summary>指定した数の底 2 の対数を返します。</summary>
      <param name="x">対数を検索する対象の数値。</param>
      <returns>次の表に示した値のいずれか
 <paramref name="x" /> パラメーター 
  戻り値 
  正 
  <paramref name="x" /> の底 2 の対数。つまり、log 2<paramref name="x" />。  
  
  0 
 <see cref="F:System.Single.NegativeInfinity" /> 負 
 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> と等価です。<see cref="F:System.Single.NaN" /><see cref="F:System.Single.PositiveInfinity" /> と等価です。<see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Max(System.Single,System.Single)">
      <summary>2 つの単精度浮動小数点数のうち、大きい方を返します。</summary>
      <param name="x">比較する 2 つの単精度浮動小数点数の最初の数。</param>
      <param name="y">比較する 2 つの単精度浮動小数点数の 2 番目の数。</param>
      <returns>パラメーター <paramref name="x" /> または <paramref name="y" /> のいずれか大きい方。 <paramref name="x" />、または <paramref name="y" />、または <paramref name="x" /> と <paramref name="y" /> の両方が <see cref="F:System.Single.NaN" /> に等しい場合、<see cref="F:System.Single.NaN" /> が返されます。</returns>
    </member>
    <member name="M:System.MathF.MaxMagnitude(System.Single,System.Single)">
      <summary>2 つの単精度浮動小数点数のうち、大きい絶対値を返します。</summary>
      <param name="x">比較する 2 つの単精度浮動小数点数の最初の数。</param>
      <param name="y">比較する 2 つの単精度浮動小数点数の 2 番目の数。</param>
      <returns>パラメーター <paramref name="x" /> または <paramref name="y" /> のうち、絶対値が大きい方。 <paramref name="x" />、または <paramref name="y" />、または <paramref name="x" /> と <paramref name="y" /> の両方が <see cref="F:System.Single.NaN" /> に等しい場合、<see cref="F:System.Single.NaN" /> が返されます。</returns>
    </member>
    <member name="M:System.MathF.Min(System.Single,System.Single)">
      <summary>2 つの単精度浮動小数点数のうち、小さい方を返します。</summary>
      <param name="x">比較する 2 つの単精度浮動小数点数の最初の数。</param>
      <param name="y">比較する 2 つの単精度浮動小数点数の 2 番目の数。</param>
      <returns>パラメーター <paramref name="x" /> または <paramref name="y" /> のいずれか小さい方。 <paramref name="x" />、<paramref name="y" />、または <paramref name="x" /> と <paramref name="y" /> の両方が <see cref="F:System.Single.NaN" /> に等しい場合、<see cref="F:System.Single.NaN" /> が返されます。</returns>
    </member>
    <member name="M:System.MathF.MinMagnitude(System.Single,System.Single)">
      <summary>2 つの単精度浮動小数点数のうち、小さい絶対値を返します。</summary>
      <param name="x">比較する 2 つの単精度浮動小数点数の最初の数。</param>
      <param name="y">比較する 2 つの単精度浮動小数点数の 2 番目の数。</param>
      <returns>パラメーター <paramref name="x" /> または <paramref name="y" /> のうち、絶対値が小さい方。 <paramref name="x" />、または <paramref name="y" />、または <paramref name="x" /> と <paramref name="y" /> の両方が <see cref="F:System.Single.NaN" /> に等しい場合、<see cref="F:System.Single.NaN" /> が返されます。</returns>
    </member>
    <member name="F:System.MathF.PI">
      <summary>定数 (π) を指定して、円の直径に対する円周の割合を表します。</summary>
    </member>
    <member name="M:System.MathF.Pow(System.Single,System.Single)">
      <summary>指定の数値を指定した値で累乗した値を返します。</summary>
      <param name="x">累乗対象の単精度浮動小数点数。</param>
      <param name="y">累乗を指定する単精度浮動小数点数。</param>
      <returns>数値 <paramref name="x" /> を <paramref name="y" /> で累乗した値。</returns>
    </member>
    <member name="M:System.MathF.Round(System.Single)">
      <summary>単精度浮動小数点の値は最も近い整数値に丸められ、中間値は最も近い偶数値に丸められます。</summary>
      <param name="x">丸め対象の単精度浮動小数点数。</param>
      <returns>
        <paramref name="x" /> に最も近い整数。 <paramref name="x" /> の小数部が 2 つの整数 (一方が偶数で、もう一方が奇数) の中間にある場合は、偶数が返されます。 このメソッドは、整数型ではなく <see cref="T:System.Single" /> を返します。</returns>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.Int32)">
      <summary>単精度浮動小数点の値は指定した小数部の桁数に丸められ、中間値は最も近い偶数値に丸められます。</summary>
      <param name="x">丸め対象の単精度浮動小数点数。</param>
      <param name="digits">戻り値の小数部の桁数。</param>
      <returns>
        <paramref name="x" /> に等しい小数部の桁数を格納する <paramref name="digits" /> に最も近い数値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> が 0 より小さいか、6 を超えています。</exception>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.Int32,System.MidpointRounding)">
      <summary>単精度浮動小数点の値は指定した小数部の桁数に丸められ、中間値には指定した丸め処理が使用されます。</summary>
      <param name="x">丸め対象の単精度浮動小数点数。</param>
      <param name="digits">戻り値の小数部の桁数。</param>
      <param name="mode">
        <paramref name="x" /> が 2 つの数値の中間にある場合に丸める方法を指定します。</param>
      <returns>
        <paramref name="digits" /> に等しい小数部の桁数を格納する <paramref name="x" /> に最も近い数値。 <paramref name="x" /> の小数部の桁数が <paramref name="digits" /> よりも少ない場合、<paramref name="x" /> がそのまま返されます。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> が 0 より小さいか、6 を超えています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> が <see cref="T:System.MidpointRounding" /> の正しい値ではありません。</exception>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.MidpointRounding)">
      <summary>単精度浮動小数点の値は最も近い整数に丸められ、中間値には指定した丸め処理が使用されます。</summary>
      <param name="x">丸め対象の単精度浮動小数点数。</param>
      <param name="mode">
        <paramref name="x" /> が 2 つの数値の中間にある場合に丸める方法を指定します。</param>
      <returns>
        <paramref name="x" /> に最も近い整数。 <paramref name="x" /> が 2 つの整数 (一方が偶数でもう一方が奇数) の中間にある場合、<paramref name="mode" /> によって 2 つの数値のどちらが返されるかが決まります。 このメソッドは、整数型ではなく <see cref="T:System.Single" /> を返します。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> が <see cref="T:System.MidpointRounding" /> の正しい値ではありません。</exception>
    </member>
    <member name="M:System.MathF.ScaleB(System.Single,System.Int32)">
      <summary>効率的に計算された x * 2^n を返します。</summary>
      <param name="x">基底値を指定する単精度浮動小数点数。</param>
      <param name="n">累乗を指定する単精度浮動小数点数。</param>
      <returns>効率的に計算された x * 2^n。</returns>
    </member>
    <member name="M:System.MathF.Sign(System.Single)">
      <summary>単精度浮動小数点数の符号を示す値を返します。</summary>
      <param name="x">符号付き数値。</param>
      <returns>
        <paramref name="x" /> の符号を示す数値 (次の表を参照)。
 戻り値 
 説明 
 -1 
<paramref name="x" /> が 0 未満です。  
  
 0 
<paramref name="x" /> が 0 です。  
  
 1 
<paramref name="x" /> が 0 より大きい値です。</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="x" /> と <see cref="F:System.Single.NaN" /> が等価です。</exception>
    </member>
    <member name="M:System.MathF.Sin(System.Single)">
      <summary>指定された角度のサインを返します。</summary>
      <param name="x">ラジアンで表した角度。</param>
      <returns>
        <paramref name="x" /> のサイン。 <paramref name="x" /> が <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" />、<see cref="F:System.Single.PositiveInfinity" /> のいずれかに等しい場合、このメソッドは <see cref="F:System.Single.NaN" /> を返します。</returns>
    </member>
    <member name="M:System.MathF.Sinh(System.Single)">
      <summary>指定された角度のハイパーボリック サインを返します。</summary>
      <param name="x">ラジアンで表した角度。</param>
      <returns>
        <paramref name="x" /> のハイパーボリック サイン。 <paramref name="x" /> が <see cref="F:System.Single.NegativeInfinity" />、<see cref="F:System.Single.PositiveInfinity" />、または <see cref="F:System.Single.NaN" /> のいずれかに等しい場合、このメソッドは <paramref name="x" /> に等しい <see cref="T:System.Single" /> を返します。</returns>
    </member>
    <member name="M:System.MathF.Sqrt(System.Single)">
      <summary>指定された数値の平方根を返します。</summary>
      <param name="x">平方根を求める対象の数値。</param>
      <returns>次の表に示した値のいずれか
 <paramref name="x" /> パラメーター 
  戻り値 
  0 または正 
  <paramref name="x" /> の正の平方根。  
  
  負 
 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> と等しい<see cref="F:System.Single.NaN" /><see cref="F:System.Single.PositiveInfinity" /> と等しい<see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Tan(System.Single)">
      <summary>指定された角度のタンジェントを返します。</summary>
      <param name="x">ラジアンで表した角度。</param>
      <returns>
        <paramref name="x" /> のタンジェント。 <paramref name="x" /> が <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" />、<see cref="F:System.Single.PositiveInfinity" /> のいずれかに等しい場合、このメソッドは <see cref="F:System.Single.NaN" /> を返します。</returns>
    </member>
    <member name="M:System.MathF.Tanh(System.Single)">
      <summary>指定された角度のハイパーボリック タンジェントを返します。</summary>
      <param name="x">ラジアンで表した角度。</param>
      <returns>
        <paramref name="x" /> のハイパーボリック タンジェント。 <paramref name="x" /> が <see cref="F:System.Single.NegativeInfinity" /> に等しい場合、このメソッドは -1 を返します。 値が <see cref="F:System.Single.PositiveInfinity" /> に等しい場合、このメソッドは 1 を返します。 <paramref name="x" /> が <see cref="F:System.Single.NaN" /> に等しい場合、このメソッドは <see cref="F:System.Single.NaN" /> を返します。</returns>
    </member>
    <member name="M:System.MathF.Truncate(System.Single)">
      <summary>指定した単精度浮動小数点数の整数部を計算します。</summary>
      <param name="x">切り捨て対象の数値。</param>
      <returns>
        <paramref name="x" /> の整数部。つまり、小数部の桁を破棄した後に残る数値 (次の表にリストされている値のいずれか)。
<paramref name="x" /> 戻り値 
<see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /><see cref="F:System.Single.NegativeInfinity" /><see cref="F:System.Single.NegativeInfinity" /><see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="T:System.Net.WebUtility">
      <summary>Web 要求を処理する際、URL のエンコーディングおよびデコーディングのメソッドを提供します。</summary>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String)">
      <summary>HTTP での転送用に HTML でエンコードされた文字列をデコードされた文字列に変換します。</summary>
      <param name="value">デコードする文字列。</param>
      <returns>デコードされた文字列。</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String,System.IO.TextWriter)">
      <summary>HTML エンコードされた文字列をデコードされた文字列に変換し、デコードされた文字列を <see cref="T:System.IO.TextWriter" /> 出力ストリームに送信します。</summary>
      <param name="value">デコードする文字列。</param>
      <param name="output">
        <see cref="T:System.IO.TextWriter" /> 出力ストリーム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> パラメーターが <see langword="null" /> でない場合、<paramref name="value" /> パラメーターは <see langword="null" /> にできません。</exception>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String)">
      <summary>文字列を、HTML エンコードされた文字列に変換します。</summary>
      <param name="value">エンコードする文字列。</param>
      <returns>エンコードされた文字列。</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String,System.IO.TextWriter)">
      <summary>文字列を HTML エンコードされた文字列に変換し、出力の <see cref="T:System.IO.TextWriter" /> ストリームとして出力を返します。</summary>
      <param name="value">エンコードする文字列。</param>
      <param name="output">
        <see cref="T:System.IO.TextWriter" /> 出力ストリーム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> パラメーターが <see langword="null" /> でない場合、<paramref name="value" /> パラメーターは <see langword="null" /> にできません。</exception>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecode(System.String)">
      <summary>URL 伝送用にエンコードされた文字列を、デコードされた文字列に変換します。</summary>
      <param name="encodedValue">デコード対象となる URL エンコードされた文字列。</param>
      <returns>デコードされた文字列。</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>URL 内で伝送する目的でエンコードされたバイト配列を、デコードされたバイト配列に変換します。</summary>
      <param name="encodedValue">デコード対象となる URL エンコードされた <see cref="T:System.Byte" />。</param>
      <param name="offset">デコードする <see cref="T:System.Byte" /> 配列の先頭からのオフセット (バイト単位)。</param>
      <param name="count">
        <see cref="T:System.Byte" /> の配列からデコードするバイト数です。</param>
      <returns>デコードされた <see cref="T:System.Byte" /> 配列。</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncode(System.String)">
      <summary>テキスト文字列を URL エンコードされた文字列に変換します。</summary>
      <param name="value">URL エンコードするテキスト。</param>
      <returns>URL エンコードされた文字列。</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>バイト配列を URL エンコードされたバイト配列に変換します。</summary>
      <param name="value">URL エンコードする <see cref="T:System.Byte" /> 配列。</param>
      <param name="offset">エンコードする <see cref="T:System.Byte" /> 配列の先頭からのオフセット (バイト単位)。</param>
      <param name="count">
        <see cref="T:System.Byte" /> の配列からエンコードするバイト数です。</param>
      <returns>エンコードされた <see cref="T:System.Byte" /> 配列。</returns>
    </member>
    <member name="T:System.Numerics.BitOperations">
      <summary>組み込みのビットの逆転操作のためのユーティリティ メソッドを提供します。 これらのメソッドでは、基になるプラットフォームで使用可能な場合、ハードウェアの組み込みを使用します。それ以外の場合は、最適化されたソフトウェア フォールバックを使用します。</summary>
    </member>
    <member name="M:System.Numerics.BitOperations.LeadingZeroCount(System.UInt32)">
      <summary>符号なし 32 ビット整数マスク内の先頭の 0 ビットの数をカウントします。</summary>
      <param name="value">マスク。</param>
      <returns>マスク内の先頭の 0 ビットの数。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.LeadingZeroCount(System.UInt64)">
      <summary>符号なし 64 ビット整数マスク内の先頭の 0 ビットの数をカウントします。</summary>
      <param name="value">マスク。</param>
      <returns>マスク内の先頭の 0 ビットの数。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.Log2(System.UInt32)">
      <summary>指定された値 (基数 2) の整数 (底値) の対数を返します。</summary>
      <param name="value">対数の取得元の数値。</param>
      <returns>指定された値の対数 (基数 2)。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.Log2(System.UInt64)">
      <summary>指定された値 (基数 2) の整数 (底値) の対数を返します。</summary>
      <param name="value">対数の取得元の数値。</param>
      <returns>指定された値の対数 (基数 2)。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.PopCount(System.UInt32)">
      <summary>マスクの母集団の数 (設定されたビット数) を返します。</summary>
      <param name="value">マスク。</param>
      <returns>マスクの母集団の数。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.PopCount(System.UInt64)">
      <summary>符号なし 64 ビット整数マスクの母集団の数 (設定されたビット数) を返します。</summary>
      <param name="value">マスク。</param>
      <returns>マスクの母集団の数。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateLeft(System.UInt32,System.Int32)">
      <summary>指定した値を指定したビット数だけ左に回転します。</summary>
      <param name="value">回転する値。</param>
      <param name="offset">回転するビット数。 範囲 [0..31] 以外のすべての値は、32 を法として合同として扱われます。</param>
      <returns>回転後の値。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateLeft(System.UInt64,System.Int32)">
      <summary>指定した値を指定したビット数だけ左に回転します。</summary>
      <param name="value">回転する値。</param>
      <param name="offset">回転するビット数。 範囲 [0..63] 以外のすべての値は、64 を法として合同として扱われます。</param>
      <returns>回転後の値。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateRight(System.UInt32,System.Int32)">
      <summary>指定した値を指定したビット数だけ右に回転します。</summary>
      <param name="value">回転する値。</param>
      <param name="offset">回転するビット数。 範囲 [0..31] 以外のすべての値は、32 を法として合同として扱われます。</param>
      <returns>回転後の値。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateRight(System.UInt64,System.Int32)">
      <summary>指定した値を指定したビット数だけ右に回転します。</summary>
      <param name="value">回転する値。</param>
      <param name="offset">回転するビット数。 範囲 [0..63] 以外のすべての値は、64 を法として合同として扱われます。</param>
      <returns>回転後の値。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.Int32)">
      <summary>32 ビット整数値マスクの末尾の 0 ビットの数をカウントします。</summary>
      <param name="value">マスク。</param>
      <returns>整数値の末尾の 0 ビットの数。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.Int64)">
      <summary>64 ビット整数値マスクの末尾の 0 ビットの数をカウントします。</summary>
      <param name="value">マスク。</param>
      <returns>マスクの末尾の 0 ビットの数。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.UInt32)">
      <summary>符号なし 32 ビット整数値マスクの末尾の 0 ビットの数をカウントします。</summary>
      <param name="value">マスク。</param>
      <returns>マスクの末尾の 0 ビットの数。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.UInt64)">
      <summary>符号なし 64 ビット整数値マスクの末尾の 0 ビットの数をカウントします。</summary>
      <param name="value">マスク。</param>
      <returns>マスクの末尾の 0 ビットの数。</returns>
    </member>
    <member name="T:System.OperatingSystem">
      <summary>バージョンやプラットフォーム ID など、オペレーティング システムについての情報を表します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.OperatingSystem.#ctor(System.PlatformID,System.Version)">
      <summary>指定したプラットフォーム ID 値とバージョン オブジェクトを使用し、<see cref="T:System.OperatingSystem" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="platform">オペレーティング システム プラットフォームを示す <see cref="T:System.PlatformID" /> 値のいずれか。</param>
      <param name="version">オペレーティング システムのバージョンを示す <see cref="T:System.Version" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="platform" /> が <see cref="T:System.PlatformID" /> 列挙値ではありません。</exception>
    </member>
    <member name="M:System.OperatingSystem.Clone">
      <summary>このインスタンスと同一の <see cref="T:System.OperatingSystem" /> オブジェクトを作成します。</summary>
      <returns>インスタンスのコピーである <see cref="T:System.OperatingSystem" /> オブジェクト。</returns>
    </member>
    <member name="M:System.OperatingSystem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、このインスタンスを逆シリアル化するために必要なデータを格納します。</summary>
      <param name="info">シリアル化情報が設定されるオブジェクト。</param>
      <param name="context">シリアル化データを格納および取得する場所。 将来使用するために予約されています。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.OperatingSystem.Platform">
      <summary>オペレーティング システム プラットフォームを識別する <see cref="T:System.PlatformID" /> 列挙値を取得します。</summary>
      <returns>
        <see cref="T:System.PlatformID" /> 値のいずれか。</returns>
    </member>
    <member name="P:System.OperatingSystem.ServicePack">
      <summary>この <see cref="T:System.OperatingSystem" /> オブジェクトが表す Service Pack のバージョンを取得します。</summary>
      <returns>複数の Service Pack がサポートされており、少なくとも 1 つがインストールされている場合は、その Service Pack のバージョン。それ以外の場合は空の文字列 ("")。</returns>
    </member>
    <member name="M:System.OperatingSystem.ToString">
      <summary>この <see cref="T:System.OperatingSystem" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
      <returns>
        <see cref="P:System.OperatingSystem.Platform" />、<see cref="P:System.OperatingSystem.Version" />、<see cref="P:System.OperatingSystem.ServicePack" /> の各プロパティによって返される値の文字列形式。</returns>
    </member>
    <member name="P:System.OperatingSystem.Version">
      <summary>オペレーティング システムを識別する <see cref="T:System.Version" /> オブジェクトを取得します。</summary>
      <returns>オペレーティング システムのメジャー バージョン番号、マイナー バージョン番号、ビルド番号、およびリビジョン番号を記述する <see cref="T:System.Version" /> オブジェクト。</returns>
    </member>
    <member name="P:System.OperatingSystem.VersionString">
      <summary>プラットフォーム ID、バージョン、およびオペレーティング システムに現在インストールされている Service Pack の連結された文字列形式を取得します。</summary>
      <returns>
        <see cref="P:System.OperatingSystem.Platform" />、<see cref="P:System.OperatingSystem.Version" />、<see cref="P:System.OperatingSystem.ServicePack" /> の各プロパティによって返される値の文字列形式。</returns>
    </member>
    <member name="T:System.PlatformID">
      <summary>アセンブリでサポートされるオペレーティング システム (プラットフォーム) を識別します。</summary>
    </member>
    <member name="F:System.PlatformID.MacOSX">
      <summary>オペレーティング システムは Macintosh です。 この値は Silverlight から返されました。 その .NET Core での置き換えは Unix です。</summary>
    </member>
    <member name="F:System.PlatformID.Unix">
      <summary>オペレーティング システムは Unix です。</summary>
    </member>
    <member name="F:System.PlatformID.Win32NT">
      <summary>オペレーティング システムは Windows NT 以降です。</summary>
    </member>
    <member name="F:System.PlatformID.Win32S">
      <summary>オペレーティング システムは Win32s です。 この値は使用できなくなりました。</summary>
    </member>
    <member name="F:System.PlatformID.Win32Windows">
      <summary>オペレーティング システムは Windows 95 または Windows 98 です。 この値は使用できなくなりました。</summary>
    </member>
    <member name="F:System.PlatformID.WinCE">
      <summary>オペレーティング システムは Windows CE です。 この値は使用できなくなりました。</summary>
    </member>
    <member name="F:System.PlatformID.Xbox">
      <summary>開発プラットフォームは、Xbox 360 です。 この値は使用できなくなりました。</summary>
    </member>
    <member name="T:System.Progress`1">
      <summary>報告済みの進行状況の各値へのコールバックを呼び出す <see cref="T:System.IProgress`1" /> を提供します。</summary>
      <typeparam name="T">進行状況レポート値の型を指定します。</typeparam>
    </member>
    <member name="M:System.Progress`1.#ctor">
      <summary>
        <see cref="T:System.Progress`1" /> オブジェクトを初期化します。</summary>
    </member>
    <member name="M:System.Progress`1.#ctor(System.Action{`0})">
      <summary>指定したコールバックを使用して <see cref="T:System.Progress`1" /> オブジェクトを初期化します。</summary>
      <param name="handler">報告された各進行状況の値に対して起動するハンドラー。 このハンドラーは、<see cref="E:System.Progress`1.ProgressChanged" /> イベントに登録されている任意のデリゲートに加えて呼び出されます。 構築時に <see cref="T:System.Threading.SynchronizationContext" /> によってキャプチャされる <see cref="T:System.Progress`1" /> インスタンスによっては、このハンドラー インスタンスをそれ自体と同時に呼び出すことができる場合があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> が <see langword="null" /> (Visual Basic の場合は <see langword="Nothing" />) です。</exception>
    </member>
    <member name="M:System.Progress`1.OnReport(`0)">
      <summary>進行状況の変更を報告します。</summary>
      <param name="value">更新の進捗状況の値。</param>
    </member>
    <member name="E:System.Progress`1.ProgressChanged">
      <summary>報告された進行状況を示す各値に対して発生します。</summary>
    </member>
    <member name="M:System.Progress`1.System#IProgress{T}#Report(`0)">
      <summary>進行状況の変更を報告します。</summary>
      <param name="value">更新の進捗状況の値。</param>
    </member>
    <member name="T:System.Random">
      <summary>擬似乱数ジェネレーターを表します。擬似乱数ジェネレーターは、乱数についての統計的な要件を満たす数値系列を生成するデバイスです。</summary>
    </member>
    <member name="M:System.Random.#ctor">
      <summary>時間に応じて決定される既定のシード値を使用し、<see cref="T:System.Random" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Random.#ctor(System.Int32)">
      <summary>指定したシード値を使用して <see cref="T:System.Random" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="Seed">擬似乱数系列の開始値を計算するために使用する数値。 負数を指定した場合、その数値の絶対値が使用されます。</param>
    </member>
    <member name="M:System.Random.Next">
      <summary>0 以上のランダムな整数を返します。</summary>
      <returns>0 以上で <see cref="F:System.Int32.MaxValue" /> より小さい 32 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Random.Next(System.Int32)">
      <summary>指定した最大値より小さい 0 以上のランダムな整数を返します。</summary>
      <param name="maxValue">生成される乱数の排他的上限値。 <paramref name="maxValue" /> は 0 以上にする必要があります。</param>
      <returns>0 以上で <paramref name="maxValue" /> 未満の 32 ビット符号付き整数。つまり、通常は戻り値の範囲に 0 は含まれますが、<paramref name="maxValue" /> は含まれません。 ただし、<paramref name="maxValue" /> が 0 の場合は、<paramref name="maxValue" /> が返されます。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Random.Next(System.Int32,System.Int32)">
      <summary>指定した範囲内のランダムな整数を返します。</summary>
      <param name="minValue">返される乱数の包括的下限値。</param>
      <param name="maxValue">返される乱数の排他的上限値。 <paramref name="maxValue" /> は <paramref name="minValue" /> 以上である必要があります。</param>
      <returns>
        <paramref name="minValue" /> 以上で <paramref name="maxValue" /> 未満の 32 ビット符号付整数。つまり、戻り値の範囲に <paramref name="minValue" /> は含まれますが <paramref name="maxValue" /> は含まれません。 <paramref name="minValue" /> が <paramref name="maxValue" /> と等しい場合は、<paramref name="minValue" /> が返されます。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minValue" /> が <paramref name="maxValue" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Byte[])">
      <summary>指定したバイト配列の要素に乱数を格納します。</summary>
      <param name="buffer">乱数を格納するバイト配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Span{System.Byte})">
      <param name="buffer" />
    </member>
    <member name="M:System.Random.NextDouble">
      <summary>0.0 以上 1.0 未満のランダムな浮動小数点数を返します。</summary>
      <returns>0.0 以上 1.0 未満の倍精度浮動小数点数。</returns>
    </member>
    <member name="M:System.Random.Sample">
      <summary>0.0 と 1.0 の間のランダムな浮動小数点数を返します。</summary>
      <returns>0.0 以上 1.0 未満の倍精度浮動小数点数。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameProxy">
      <summary>
        <see langword="AssemblyName" /> のリモート対応バージョンを提供します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.#ctor">
      <summary>
        <see cref="T:System.Reflection.AssemblyNameProxy" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)">
      <summary>指定したファイルの <see langword="AssemblyName" /> を取得します。</summary>
      <param name="assemblyFile">
        <see langword="AssemblyName" /> を取得する対象となるアセンブリ ファイル。</param>
      <returns>指定したファイルを表す <see langword="AssemblyName" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> が空です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> が見つかりません。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> は正しいアセンブリではありません。</exception>
    </member>
    <member name="T:System.ResolveEventHandler">
      <summary>
        <see cref="E:System.AppDomain.TypeResolve" /> の <see cref="E:System.AppDomain.ResourceResolve" />、<see cref="E:System.AppDomain.AssemblyResolve" />、または <see cref="T:System.AppDomain" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="args">イベントのデータ。</param>
      <returns>型、アセンブリ、またはリソースを解決するアセンブリ。アセンブリを解決できない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.SwitchExpressionException">
      <summary>実行時に、完全一致ではないスイッチ式がその入力に一致しなかったことを示します。 例外には、一致しない値を表すオブジェクトが含まれている場合があります。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.Object)">
      <summary>一致しないスイッチ値を使用し、<see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="unmatchedValue">どのスイッチ ケースにも一致しないスイッチ値。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エンド ユーザーに表示するメッセージ。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.String,System.Exception)">
      <summary>詳細説明と例外を指定して、<see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エンド ユーザーに表示するメッセージ。</param>
      <param name="innerException">この例外の原因である内部例外への参照。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>パラメーター名と追加の例外情報を使用して <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を設定します。</summary>
      <param name="info">
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> がシリアル化または逆シリアル化していたオブジェクトを、シリアル化または逆シリアル化するために使用したデータを格納します。</param>
      <param name="context">例外を生成したストリームの転送元および転送先を記述し、そのコンテキストと追加の呼び出し元定義のコンテキストを保持するためのシリアル化の手段を提供します。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.SwitchExpressionException.Message">
      <summary>例外メッセージを取得します。</summary>
      <returns>完全なメッセージ文字列。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.SwitchExpressionException.UnmatchedValue">
      <summary>例外に関連付けられている一致しないい値を取得します。</summary>
      <returns>例外の原因となった一致しない値。</returns>
    </member>
    <member name="T:System.Runtime.ProfileOptimization">
      <summary>以前のコンパイル中に作成されたプロファイルに基づいて、実行される可能性が高いメソッドをバックグラウンドでコンパイルすることにより、JIT (Just-In-Time) コンパイラを必要とするアプリケーションのアプリケーション ドメインで、起動時のパフォーマンスが向上します。</summary>
    </member>
    <member name="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)">
      <summary>現在のアプリケーション ドメインに対する最適化プロファイルを有効にし、最適化プロファイル ファイルが格納されるフォルダーを設定します。 シングルコア コンピューターでは、メソッドは無視されます。</summary>
      <param name="directoryPath">現在のアプリケーション ドメインのためにプロファイル ファイルが格納されるフォルダーへの完全パス。</param>
    </member>
    <member name="M:System.Runtime.ProfileOptimization.StartProfile(System.String)">
      <summary>バックグラウンド スレッド上で、指定したプロファイル ファイルに前もって記録済みのメソッドの、Just-In-Time (JIT) コンパイラを開始します。 指定したプロファイル ファイルをあとで上書きする、現在のメソッド使用の記録処理を開始します。</summary>
      <param name="profile">使用するプロファイルのファイル名。</param>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesAttribute">
      <summary>複数のバージョンにわたる可能性があるコンポーネント、型、または型メンバーの互換性の保証を定義します。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)">
      <summary>ライブラリ、型、またはメンバーの、複数のバージョン間で保証されている互換性のレベルを示す値を使用して、<see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="guarantees">複数のバージョン間で保証されている互換性のレベルを指定する列挙値の 1 つ。</param>
    </member>
    <member name="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees">
      <summary>複数のバージョンにわたるライブラリ、型、または型メンバーの保証されている互換性のレベルを示す値を取得します。</summary>
      <returns>複数のバージョン間で保証されている互換性のレベルを指定する列挙値の 1 つ。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesOptions">
      <summary>複数のバージョンにわたる可能性があるコンポーネント、型、または型のメンバーの互換性の保証を表します。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange">
      <summary>開発者は、型について複数バージョンの交換の互換性があることを保証します。 その型のコンシューマーは、将来のバージョン間に互換性があることを予想でき、すべてのインターフェイスでその型を使用できます。 バージョン管理の問題は、side-by-side 実行で修正することはできません。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.None">
      <summary>開発者は、バージョン間の互換性を保証しません。 コンポーネント、型、またはメンバーのコンシューマーは、将来のバージョンが既存のクライアントに互換性を提供しなくなることを予想できます。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide">
      <summary>アセンブリの複数のバージョンが同じアプリケーション ドメインに読み込まれる場合、コンポーネントが機能することがテストされています。 将来のバージョンでは互換性がなくなる可能性があります。 ただし、そのような互換性に影響する変更が行われる場合、以前のバージョンは変更されませんが、新しいバージョンと共に引き続き存在します。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable">
      <summary>開発者は、バージョン間の安定した互換性を保証します。 その型のコンシューマーは、将来のバージョンが既存のクライアントに互換性を提供することを予想できます。 ただし、将来のバージョンが既存のクライアントに互換性を提供せず、そのクライアントがそのインターフェイスでその型を使用していなかった場合、side-by-side 実行によって問題を修正できる可能性があります。</summary>
    </member>
    <member name="T:System.Runtime.Versioning.FrameworkName">
      <summary>.NET Framework のバージョンの名前を表します。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)">
      <summary>.NET Framework のバージョンに関する情報を含む文字列から、<see cref="T:System.Runtime.Versioning.FrameworkName" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="frameworkName">.NET Framework のバージョン情報を含んでいる文字列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="frameworkName" /> は <see cref="F:System.String.Empty" />です。

または -
<paramref name="frameworkName" /> の構成要素が 2 よりも少ないか、または 3 よりも多くなっています。

または -
<paramref name="frameworkName" /> にはメジャー バージョン番号およびマイナー バージョン番号が含まれていません。


または
<paramref name="frameworkName" /> には有効なバージョン番号が含まれていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)">
      <summary>.NET Framework のバージョンを識別する文字列および <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクトから、<see cref="T:System.Version" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="identifier">.NET Framework のバージョンを識別する文字列。</param>
      <param name="version">.NET Framework のバージョン情報を格納しているオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" /> は <see cref="F:System.String.Empty" />です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> は <see langword="null" />です。

または -
<paramref name="version" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)">
      <summary>文字列、.NET Framework のバージョンを識別する <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクト、およびプロファイル名から、<see cref="T:System.Version" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="identifier">.NET Framework のバージョンを識別する文字列。</param>
      <param name="version">.NET Framework のバージョン情報を格納しているオブジェクト。</param>
      <param name="profile">プロファイル名。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" /> は <see cref="F:System.String.Empty" />です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> は <see langword="null" />です。

または -
<paramref name="version" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Object)">
      <summary>この <see cref="T:System.Runtime.Versioning.FrameworkName" /> インスタンスが、指定されたオブジェクトと同じ .NET Framework バージョンを表すかどうかを示す値を返します。</summary>
      <param name="obj">現在のインスタンスと比較する対象のオブジェクト。</param>
      <returns>現在の <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクトのすべての構成要素が、<paramref name="obj" /> の対応する構成要素に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)">
      <summary>この <see cref="T:System.Runtime.Versioning.FrameworkName" /> インスタンスが、指定された <see cref="T:System.Runtime.Versioning.FrameworkName" /> インスタンスと同じ .NET Framework バージョンを表すかどうかを示す値を返します。</summary>
      <param name="other">現在のインスタンスと比較する対象のオブジェクト。</param>
      <returns>現在の <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクトのすべての構成要素が、<paramref name="other" /> の対応する構成要素に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.FullName">
      <summary>この <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクトの完全名を取得します。</summary>
      <returns>この <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクトの完全名。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.GetHashCode">
      <summary>
        <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクトのハッシュ コードを返します。</summary>
      <returns>このインスタンスのハッシュ コードを表す 32 ビット符号付き整数。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Identifier">
      <summary>この <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクトの識別子を取得します。</summary>
      <returns>この <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクトの識別子。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>2 つの <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクトが同じ .NET Framework バージョンを表すかどうかを示す値を返します。</summary>
      <param name="left">比較する最初のオブジェクト。</param>
      <param name="right">比較する 2 番目のオブジェクト。</param>
      <returns>
        <paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターが同じ .NET Framework バージョンを表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>2 つの <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクトが異なる .NET Framework バージョンを表すかどうかを示す値を返します。</summary>
      <param name="left">比較する最初のオブジェクト。</param>
      <param name="right">比較する 2 番目のオブジェクト。</param>
      <returns>
        <paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターが異なる .NET Framework バージョンを表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Profile">
      <summary>この <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクトのプロファイル名を取得します。</summary>
      <returns>この <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクトのプロファイル名。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.ToString">
      <summary>この <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクトの文字列表現を返します。</summary>
      <returns>この <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクトを表す文字列。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Version">
      <summary>この <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクトのバージョンを取得します。</summary>
      <returns>この <see cref="T:System.Runtime.Versioning.FrameworkName" /> オブジェクトに関するバージョン情報を格納しているオブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceConsumptionAttribute">
      <summary>クラスのメンバーが消費するリソースを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceConsumptionAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>リソースが消費されるスコープを指定して、<see cref="T:System.Runtime.Versioning.ResourceConsumptionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="resourceScope">リソースが消費される <see cref="T:System.Runtime.Versioning.ResourceScope" />。</param>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceConsumptionAttribute.#ctor(System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>リソースが消費されるスコープとリソースが公開されるスコープを指定して、<see cref="T:System.Runtime.Versioning.ResourceConsumptionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="resourceScope">リソースが消費される <see cref="T:System.Runtime.Versioning.ResourceScope" />。</param>
      <param name="consumptionScope">このメンバーが使用する <see cref="T:System.Runtime.Versioning.ResourceScope" />。</param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceConsumptionAttribute.ConsumptionScope">
      <summary>このメンバーの消費スコープを取得します。</summary>
      <returns>このメンバーが使用するリソース スコープを指定する <see cref="T:System.Runtime.Versioning.ResourceScope" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceConsumptionAttribute.ResourceScope">
      <summary>リソースが消費されているスコープを取得します。</summary>
      <returns>リソースが消費されているスコープを指定する <see cref="T:System.Runtime.Versioning.ResourceScope" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceExposureAttribute">
      <summary>クラスのメンバーに対するリソースの公開を指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceExposureAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>公開レベルを指定して、<see cref="T:System.Runtime.Versioning.ResourceExposureAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exposureLevel">リソースのスコープ。</param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceExposureAttribute.ResourceExposureLevel">
      <summary>リソースの公開スコープを取得します。</summary>
      <returns>
        <see cref="T:System.Runtime.Versioning.ResourceScope" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceScope">
      <summary>共有可能なリソースのスコープを識別します。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.AppDomain">
      <summary>
        <see cref="T:System.AppDomain" /> 内のオブジェクトによって状態が共有されます。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Assembly">
      <summary>アセンブリ スコープでリソースを参照できます。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Library">
      <summary>ライブラリ内のオブジェクトによって状態が共有されます。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Machine">
      <summary>コンピューター内のオブジェクトによって状態が共有されます。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.None">
      <summary>共有される状態は存在しません。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Private">
      <summary>リソースは、型からのみ参照できます。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Process">
      <summary>プロセス内で状態が共有されます。</summary>
    </member>
    <member name="T:System.Runtime.Versioning.VersioningHelper">
      <summary>バージョン セーフなコードの作成を支援するメソッドを提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>指定したリソース名および対象とするリソース消費ソースに基づいて、バージョン セーフな名前を返します。</summary>
      <param name="name">リソースの名前。</param>
      <param name="from">リソースのスコープ。</param>
      <param name="to">目的のリソース消費スコープ。</param>
      <returns>バージョン セーフな名前。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope,System.Type)">
      <summary>指定したリソース名、対象とするリソース消費スコープ、およびリソースを使用する型に基づいて、バージョン セーフな名前を返します。</summary>
      <param name="name">リソースの名前。</param>
      <param name="from">スコープ範囲の先頭。</param>
      <param name="to">スコープ範囲の末尾。</param>
      <param name="type">リソースの <see cref="T:System.Type" />。</param>
      <returns>バージョン セーフな名前。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="from" /> および <paramref name="to" /> の値が無効です。 <see cref="T:System.Runtime.Versioning.ResourceScope" /> 列挙体のリソースの種類を、より制限の大きいリソースの種類から、より汎用的なリソースの種類にしようとしています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Security.IPermission">
      <summary>アクセス許可の種類によって実装されるメソッドを定義します。</summary>
    </member>
    <member name="M:System.Security.IPermission.Copy">
      <summary>現在のアクセス許可の同一のコピーを作成して返します。</summary>
      <returns>現在のアクセス許可のコピー。</returns>
    </member>
    <member name="M:System.Security.IPermission.Demand">
      <summary>セキュリティ要件が満たされない場合、実行時に <see cref="T:System.Security.SecurityException" /> をスローします。</summary>
    </member>
    <member name="M:System.Security.IPermission.Intersect(System.Security.IPermission)">
      <summary>現在のアクセス許可と指定したアクセス許可の積集合となるアクセス許可を作成して返します。</summary>
      <param name="target">現在のアクセス許可との共通部分のあるアクセス許可。 これは、現在のアクセス許可と同じ型であることが必要です。</param>
      <returns>現在のアクセス許可と指定したアクセス許可の共通部分を表す新しいアクセス許可。 積集合が空の場合、この新しいアクセス許可は <see langword="null" /> です。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> パラメーターが <see langword="null" /> ではなく、現在のアクセス許可と同じクラスのインスタンスでもありません。</exception>
    </member>
    <member name="M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>現在のアクセス許可が、指定したアクセス許可のサブセットであるかどうかを判断します。</summary>
      <param name="target">サブセットの関係にあるかどうかをテストするアクセス許可。 このアクセス許可は、現在のアクセス許可と同じ型であることが必要です。</param>
      <returns>現在のアクセス許可が、指定したアクセス許可のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> パラメーターが <see langword="null" /> でなく、また現在のアクセス許可と同じ型でもありません。</exception>
    </member>
    <member name="M:System.Security.IPermission.Union(System.Security.IPermission)">
      <summary>現在のアクセス許可と指定されたアクセス許可の和集合であるアクセス許可を作成します。</summary>
      <param name="target">現在のアクセス許可と結合するアクセス許可。 これは、現在のアクセス許可と同じ型であることが必要です。</param>
      <returns>現在のアクセス許可と指定されたアクセス許可の和集合を表す新しいアクセス許可。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> パラメーターが <see langword="null" /> でなく、また現在のアクセス許可と同じ型でもありません。</exception>
    </member>
    <member name="T:System.Security.ISecurityEncodable">
      <summary>アクセス許可オブジェクトの状態を XML 要素表記に、またはその逆に変換するメソッドを定義します。</summary>
    </member>
    <member name="M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)">
      <summary>XML エンコードから指定された状態で、セキュリティ オブジェクトを再構築します。</summary>
      <param name="e">セキュリティ オブジェクトの再構築に使用する XML エンコード。</param>
    </member>
    <member name="M:System.Security.ISecurityEncodable.ToXml">
      <summary>セキュリティ オブジェクトとその現在の状態の XML エンコードを作成します。</summary>
      <returns>状態情報のすべてを含む、セキュリティ オブジェクトの XML エンコーディング。</returns>
    </member>
    <member name="T:System.Security.IStackWalk">
      <summary>コール スタック内のすべての呼び出し元に、保護されているリソースへのアクセスに必要なアクセス許可が与えられているかどうかを判断するスタック ウォークを管理します。</summary>
    </member>
    <member name="M:System.Security.IStackWalk.Assert">
      <summary>スタック内の上位にある呼び出し元に、現在のアクセス許可オブジェクトによって識別されているリソースへのアクセス許可がない場合でも、呼び出しコードがそのリソースにアクセスできるようにアサートします。</summary>
      <exception cref="T:System.Security.SecurityException">呼び出しコードに <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /> が指定されていません。</exception>
    </member>
    <member name="M:System.Security.IStackWalk.Demand">
      <summary>コール スタック内のすべての呼び出し元に、現在のアクセス許可オブジェクトによって指定されているアクセス許可が与えられているかどうかを実行時に判断します。</summary>
      <exception cref="T:System.Security.SecurityException">コール スタック内の上位にある呼び出し元に、現在のアクセス許可オブジェクトによって指定されているアクセス許可がありません。

または -
コール スタック内の呼び出し元が、現在のアクセス許可オブジェクトに対して <see cref="M:System.Security.IStackWalk.Deny" /> を呼び出しました。</exception>
    </member>
    <member name="M:System.Security.IStackWalk.Deny">
      <summary>呼び出しコードを通過する現在のオブジェクトに対するすべての <see cref="M:System.Security.IStackWalk.Demand" /> を失敗させます。</summary>
    </member>
    <member name="M:System.Security.IStackWalk.PermitOnly">
      <summary>コール スタック内の上位にあるコードに、他のリソースへのアクセス許可が与えられている場合でも、現在のオブジェクトを除き、呼び出しコードを通過するすべてのオブジェクトに対するすべての <see cref="M:System.Security.IStackWalk.Demand" /> を失敗させます。</summary>
    </member>
    <member name="T:System.Security.Permissions.CodeAccessSecurityAttribute">
      <summary>コード アクセス セキュリティの基本属性クラスを指定します。</summary>
    </member>
    <member name="M:System.Security.Permissions.CodeAccessSecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <see cref="T:System.Security.Permissions.SecurityAction" /> を指定して、<see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" /> の新しいインスタンスを初期化します。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="T:System.Security.Permissions.PermissionState">
      <summary>作成時に、アクセス許可がリソースへのすべてのアクセス権を持つか、アクセス権を持たないかを指定します。</summary>
    </member>
    <member name="F:System.Security.Permissions.PermissionState.None">
      <summary>アクセス許可が保護するリソースへのアクセスなし。</summary>
    </member>
    <member name="F:System.Security.Permissions.PermissionState.Unrestricted">
      <summary>アクセス許可が保護するリソースへのフル アクセス。</summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAction">
      <summary>宣言型セキュリティを使用して実行できるセキュリティ アクションを指定します。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Assert">
      <summary>履歴内の上位の呼び出し元がリソースへのアクセス許可を付与されていない場合であっても、呼び出し元のコードは現在のアクセス許可オブジェクトで識別されるリソースにアクセスできます (「Assert メソッドの使用」を参照)。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Demand">
      <summary>呼び出し履歴の上位にあるすべての呼び出し元には、現在のアクセス許可オブジェクトで指定されたアクセス許可が付与されている必要があります。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Deny">
      <summary>リソースへのアクセス許可を付与されている場合であっても、現在のアクセス許可オブジェクトによって指定されるリソースにアクセスする能力は、呼び出し元に対して拒否されます (「Deny メソッドの使用」を参照)。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <summary>クラスを継承する派生クラスやメソッドをオーバーライドする派生クラスに、指定したアクセス許可が与えられている必要があります。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <summary>直接の呼び出し元には、指定したアクセス許可が付与されている必要があります。 .NET Framework 4 では使用しないでください。 完全な信頼の場合、<see cref="T:System.Security.SecurityCriticalAttribute" /> を使用します。部分的な信頼の場合は、代わりに <see cref="F:System.Security.Permissions.SecurityAction.Demand" /> を使用します。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.PermitOnly">
      <summary>他のリソースにアクセスできるアクセス許可がコードに付与されていても、このアクセス許可オブジェクトで指定されたリソースにしかアクセスできません。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestMinimum">
      <summary>コードを実行するのに必要な最小限のアクセス許可の要求。 この操作は、アセンブリのスコープ内でのみ使用できます。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestOptional">
      <summary>省略可能な追加のアクセス許可の要求 (実行には必要ありません)。 この要求は、個別に要求されていない、他のすべてのアクセス許可を暗黙的に拒否します。 この操作は、アセンブリのスコープ内でのみ使用できます。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestRefuse">
      <summary>誤用される可能性のあるアクセス許可が呼び出し元コードに付与されないようにする要求。 この操作は、アセンブリのスコープ内でのみ使用できます。</summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAttribute">
      <summary>宣言セキュリティの基本属性クラスを指定します。このクラスから、<see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" /> クラスが派生します。</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <see cref="T:System.Security.Permissions.SecurityAction" /> を指定して、<see cref="T:System.Security.Permissions.SecurityAttribute" /> の新しいインスタンスを初期化します。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Action">
      <summary>セキュリティ アクションを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.SecurityAction" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.CreatePermission">
      <summary>派生クラス内でオーバーライドされるときに、後からバイナリ形式にシリアル化でき、<see cref="T:System.Security.Permissions.SecurityAction" /> と共にアセンブリのメタデータに永続的に格納できるアクセス許可オブジェクトを作成します。</summary>
      <returns>シリアル化可能な、アクセス許可オブジェクト。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Unrestricted">
      <summary>属性によって保護されているリソースに対して完全な (無制限の) アクセス許可が宣言されているかどうかを示す値を取得または設定します。</summary>
      <returns>保護されているリソースに対して完全なアクセス許可が宣言されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionAttribute">
      <summary>
        <see cref="T:System.Security.Permissions.SecurityPermission" /> のセキュリティ アクションを、宣言セキュリティを使用してコードに適用できるようにします。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>指定した <see cref="T:System.Security.Permissions.SecurityPermissionAttribute" /> を使用して、<see cref="T:System.Security.Permissions.SecurityAction" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> の値の 1 つ。</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Assertion">
      <summary>このコードの呼び出し元すべてに操作に必要なアクセス許可があることをアサートするアクセス許可が宣言されているかどうかを示す値を、取得または設定します。</summary>
      <returns>アサートするアクセス許可が宣言されている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects">
      <summary>アプリケーション構成ファイル内のバインド リダイレクトを実行するためのコードがアクセス許可を持っているかどうかを示す値を取得または設定します。</summary>
      <returns>コードがバインド リダイレクトを実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain">
      <summary>
        <see cref="T:System.AppDomain" /> を操作するためのアクセス許可が宣言されているかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see langword="true" /> を操作するためのアクセス許可が宣言されている場合は <see cref="T:System.AppDomain" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy">
      <summary>ドメイン セキュリティ ポリシーを変更または操作するためのアクセス許可が宣言されているかどうかを示す値を取得または設定します。</summary>
      <returns>アプリケーション ドメインのセキュリティ ポリシーを変更または操作するためのアクセス許可が宣言されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence">
      <summary>証拠を変更または操作するためのアクセス許可が宣言されているかどうかを示す値を取得または設定します。</summary>
      <returns>証拠を変更または操作するための機能が宣言されてい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy">
      <summary>セキュリティ ポリシーを表示して操作するためのアクセス許可が宣言されているかどうかを示す値を取得または設定します。</summary>
      <returns>セキュリティ ポリシーを操作するためのアクセス許可が宣言されている場合は <see langword="true" /> です。それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal">
      <summary>現在のプリンシパルを操作するためのアクセス許可が宣言されているかどうかを示す値を取得または設定します。</summary>
      <returns>現在のプリンシパルを操作するためのアクセス許可が宣言されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlThread">
      <summary>スレッドを操作するためのアクセス許可が宣言されているかどうかを示す値を取得または設定します。</summary>
      <returns>スレッドを操作するためのアクセス許可が宣言されている場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.CreatePermission">
      <summary>新しい <see cref="T:System.Security.Permissions.SecurityPermission" /> を作成して返します。</summary>
      <returns>この属性に対応する <see cref="T:System.Security.Permissions.SecurityPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Execution">
      <summary>コードを実行するためのアクセス許可が宣言されているかどうかを示す値を取得または設定します。</summary>
      <returns>コードを実行するアクセス許可が宣言されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Flags">
      <summary>
        <see cref="T:System.Security.Permissions.SecurityPermission" /> アクセス許可を構成するすべてのアクセス許可フラグを取得または設定します。</summary>
      <returns>ビットごとの OR を使用して結合された 1 つ以上の <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> 値。</returns>
      <exception cref="T:System.ArgumentException">このプロパティを正しくない値に設定しようとしています。 有効な値については、<see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> を参照してください。</exception>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Infrastructure">
      <summary>コードがリモート処理コンテキスト シンク、エンボイ シンク、動的シンクの追加など共通言語ランタイム インフラストラクチャにプラグインできるかどうかを示す値を取得または設定します。</summary>
      <returns>コードが共通言語ランタイム インフラストラクチャにプラグインできる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration">
      <summary>コードがリモート処理の型とチャネルを構成できるかどうかを示す値を取得または設定します。</summary>
      <returns>コードがリモート処理の型とチャネルを構成できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter">
      <summary>コードでシリアル化フォーマッタを使用して、オブジェクトをシリアル化または逆シリアル化できるかどうかを示す値を取得または設定します。</summary>
      <returns>コードがシリアル化フォーマッタを使用してオブジェクトをシリアル化または逆シリアル化できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SkipVerification">
      <summary>コードの検査を省略するためのアクセス許可が宣言されているかどうかを示す値を取得または設定します。</summary>
      <returns>コードの検査を省略するためアクセス許可が宣言されている場合は <see langword="true" />、それ以外の場合、<see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode">
      <summary>アンマネージ コードを呼び出すためのアクセス許可が宣言されているかどうかを示す値を取得または設定します。</summary>
      <returns>アンマネージ コードを呼び出すためのアクセス許可が宣言されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionFlag">
      <summary>セキュリティ アクセス許可オブジェクトのアクセス フラグを指定します。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.AllFlags">
      <summary>アクセス許可の無制限状態。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Assertion">
      <summary>このコードのすべての呼び出し元に操作のために必要なアクセス許可があることをアサートする機能。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.BindingRedirects">
      <summary>アプリケーション構成ファイルで明示的にバインディング リダイレクトを実行するためのアクセス許可。 これには、統合された .NET Framework アセンブリのリダイレクトだけでなく、.NET Framework の外で見つかったアセンブリのリダイレクトも含まれます。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain">
      <summary>
        <see cref="T:System.AppDomain" /> を作成し、操作する機能。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlDomainPolicy">
      <summary>ドメイン ポリシーを指定する機能。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence">
      <summary>証拠を提供する機能。これには、共通言語ランタイムが提供する証拠を変更する機能が含まれます。
これは強力なアクセス許可であり、信頼性の高いコードにのみ付与されるべきです。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy">
      <summary>ポリシーを表示および変更する機能。
これは強力なアクセス許可であり、信頼性の高いコードにのみ付与されるべきです。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal">
      <summary>プリンシパル オブジェクトを操作する機能。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread">
      <summary>スレッドで特定の高度な操作を使用する機能。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Execution">
      <summary>コードを実行するためのアクセス許可。 このアクセス許可がない場合、マネージド コードは実行されません。
<see cref="M:System.Security.CodeAccessPermission.Deny" />、<see cref="M:System.Security.CodeAccessPermission.Assert" />、<see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> などのスタックを変更する機能と共に動的に使用した場合、このフラグの影響はありません。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure">
      <summary>リモート処理コンテキスト シンク、エンボイ シンク、動的シンクの追加など、共通言語ランタイム インフラストラクチャへコードを組み込むためのアクセス許可。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.NoFlags">
      <summary>セキュリティ アクセスがありません。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration">
      <summary>リモート処理の型とチャネルを設定するためのアクセス許可。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter">
      <summary>シリアル化サービスを提供する機能。 シリアル化フォーマッタで使用します。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SkipVerification">
      <summary>このアセンブリでコードの検査をスキップする機能。 このアクセス許可が付与されている場合は、検査できないコードを実行できます。
これは強力なアクセス許可であり、信頼性の高いコードにのみ付与されるべきです。
<see cref="M:System.Security.CodeAccessPermission.Deny" />、<see cref="M:System.Security.CodeAccessPermission.Assert" />、<see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> などのスタックを変更する機能と共に動的に使用した場合、このフラグの影響はありません。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">
      <summary>アンマネージ コードを呼び出す機能。
 アンマネージド コードを使うことで他のアクセス許可がバイパスされる可能性があるため、これは信頼性の高いコードにのみ付与できる危険性の高いアクセス許可です。 これは、PInvoke を使ったり、COM 相互運用を使ったりしてネイティブ コードを呼び出すようなアプリケーションで使用されます。</summary>
    </member>
    <member name="T:System.Security.PermissionSet">
      <summary>数多くの種類のアクセス許可を含めることができるコレクションを表します。</summary>
    </member>
    <member name="M:System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)">
      <summary>指定した <see cref="T:System.Security.PermissionSet" /> を使用して、<see cref="T:System.Security.Permissions.PermissionState" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="state">アクセス許可セットのリソースへのアクセスを指定する列挙値の 1 つ。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> パラメーターが正しい <see cref="T:System.Security.Permissions.PermissionState" /> ではありません。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.#ctor(System.Security.PermissionSet)">
      <summary>
        <see cref="T:System.Security.PermissionSet" /> パラメーターから取得した初期値を使用して、<paramref name="permSet" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="permSet">新しい <see cref="T:System.Security.PermissionSet" /> の値の取得元となるセット。または、空の <see langword="null" /> を作成する場合は <see cref="T:System.Security.PermissionSet" />。</param>
    </member>
    <member name="M:System.Security.PermissionSet.AddPermission(System.Security.IPermission)">
      <summary>指定した権限を <see cref="T:System.Security.PermissionSet" /> に追加します。</summary>
      <param name="perm">追加する権限。</param>
      <returns>追加されるアクセス許可と、<see cref="T:System.Security.PermissionSet" /> に既に存在する同じ型のすべてのアクセス許可の和集合。</returns>
      <exception cref="T:System.InvalidOperationException">メソッドは <see cref="T:System.Security.ReadOnlyPermissionSet" /> から呼び出されます。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)">
      <summary>指定した権限を <see cref="T:System.Security.PermissionSet" /> に追加します。</summary>
      <param name="perm">追加する権限。</param>
      <returns>追加される権限および <see cref="T:System.Security.PermissionSet" /> に既に存在する型と同じ型のすべての権限の和集合。あるいは、<see langword="null" /> が <paramref name="perm" /> の場合には <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">メソッドは <see cref="T:System.Security.ReadOnlyPermissionSet" /> から呼び出されます。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Assert">
      <summary>呼び出し側コードが、このメソッドを呼び出すコードを通じて、アクセス許可要求によって保護されているリソースにアクセス可能であるということ、それも、スタックの中で上位に位置する呼び出し側にリソースへのアクセス許可が付与されていない場合でさえそれが可能であることを宣言します。 <see cref="M:System.Security.PermissionSet.Assert" /> を使用すると、セキュリティ上の脆弱性が発生することがあります。</summary>
      <exception cref="T:System.Security.SecurityException">アサートされる <see cref="T:System.Security.PermissionSet" /> インスタンスがアサート側コードに付与されていません。

または -
現在のフレームにはアクティブな <see cref="M:System.Security.PermissionSet.Assert" /> が既に存在しています。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.ContainsNonCodeAccessPermissions">
      <summary>
        <see cref="T:System.Security.PermissionSet" /> が、<see cref="T:System.Security.CodeAccessPermission" /> から派生していないアクセス許可を含むかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が <see cref="T:System.Security.PermissionSet" /> から派生していないアクセス許可を含む場合は <see cref="T:System.Security.CodeAccessPermission" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)">
      <summary>エンコードされた <see cref="T:System.Security.PermissionSet" /> を、ある XML エンコード形式から別の XML エンコード形式に変換します。</summary>
      <param name="inFormat">ASCII、Unicode、またはバイナリのいずれかのエンコード形式を表す文字列。 使用可能な値は、"XMLASCII" または "XML"、"XMLUNICODE"、"BINARY" です。</param>
      <param name="inData">XML でエンコードされたアクセス許可のセット。</param>
      <param name="outFormat">ASCII、Unicode、またはバイナリのいずれかのエンコード形式を表す文字列。 使用可能な値は、"XMLASCII" または "XML"、"XMLUNICODE"、"BINARY" です。</param>
      <returns>指定した出力形式の暗号化されたアクセス許可のセット。</returns>
      <exception cref="T:System.NotImplementedException">すべての場合。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Copy">
      <summary>
        <see cref="T:System.Security.PermissionSet" /> のコピーを作成します。</summary>
      <returns>
        <see cref="T:System.Security.PermissionSet" /> のコピー。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.CopyTo(System.Array,System.Int32)">
      <summary>アクセス許可セットのオブジェクトを <see cref="T:System.Array" /> の指定された場所にコピーします。</summary>
      <param name="array">コピー先となるターゲット配列。</param>
      <param name="index">コピーを開始する配列内の開始位置 (0 ベース)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> パラメーターに複数のディメンションが指定されています。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> パラメーターは <paramref name="array" /> パラメーターの範囲外です。</exception>
    </member>
    <member name="P:System.Security.PermissionSet.Count">
      <summary>アクセス権限セットに含まれるアクセス権限オブジェクトの数を取得します。</summary>
      <returns>
        <see cref="T:System.Security.PermissionSet" /> に含まれるアクセス権限オブジェクトの数。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Demand">
      <summary>現在のインスタンスによって指定されているアクセス許可が付与されていない呼び出し元が、呼び出し履歴の上流に 1 つでも存在した場合、実行時に <see cref="T:System.Security.SecurityException" /> を強制します。</summary>
      <exception cref="T:System.Security.SecurityException">呼び出しチェーン内の呼び出し元に、要求されたアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Deny">
      <summary>現在の <see cref="M:System.Security.PermissionSet.Demand" /> に含まれる型の権限との交差部分のある権限について呼び出し側コードをパススルーする <see cref="T:System.Security.PermissionSet" /> があれば、それが失敗するようにします。</summary>
      <exception cref="T:System.Security.SecurityException">
        <see cref="M:System.Security.PermissionSet.Deny" /> の前回の呼び出しにより、現在のスタック フレームの権限はすでに制限されています。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Security.PermissionSet" /> または <see cref="T:System.Security.NamedPermissionSet" /> オブジェクトが、現在の <see cref="T:System.Security.PermissionSet" /> と等しいかどうかを判断します。</summary>
      <param name="o">現在の <see cref="T:System.Security.PermissionSet" /> と比較するオブジェクト。</param>
      <returns>指定したオブジェクトが現在の <see langword="true" /> オブジェクトと等しい場合は <see cref="T:System.Security.PermissionSet" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.FromXml(System.Security.SecurityElement)">
      <summary>XML エンコードから指定された状態で、セキュリティ オブジェクトを再構築します。</summary>
      <param name="et">セキュリティ オブジェクトの再構築に使用する XML エンコード。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="et" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="et" /> パラメーターが有効なアクセス許可要素ではありません。

または -
<paramref name="et" /> パラメーターのバージョン番号がサポートされていません。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.GetEnumerator">
      <summary>設定のアクセス許可の列挙子を返します。</summary>
      <returns>設定のアクセス許可の列挙子オブジェクト。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetEnumeratorImpl">
      <summary>設定のアクセス許可の列挙子を返します。</summary>
      <returns>設定のアクセス許可の列挙子オブジェクト。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetHashCode">
      <summary>ハッシュ アルゴリズムや、ハッシュ テーブルのようなデータ構造での使用に適している、<see cref="T:System.Security.PermissionSet" /> オブジェクトのハッシュ コードを取得します。</summary>
      <returns>現在の <see cref="T:System.Security.PermissionSet" /> オブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetPermission(System.Type)">
      <summary>セット内に存在する場合は、指定した型のアクセス許可オブジェクトを取得します。</summary>
      <param name="permClass">目的のアクセス許可オブジェクトの型。</param>
      <returns>
        <paramref name="permClass" /> に含まれている <see cref="T:System.Security.PermissionSet" /> パラメーターで指定された型のアクセス許可オブジェクトのコピー。存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetPermissionImpl(System.Type)">
      <summary>セット内に存在する場合は、指定した型のアクセス許可オブジェクトを取得します。</summary>
      <param name="permClass">アクセス許可オブジェクトの型。</param>
      <returns>アクセス許可オブジェクトのコピー。その型は、<paramref name="permClass" /> パラメーターで指定された型か、<see cref="T:System.Security.PermissionSet" /> に含まれている型か、いずれも存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Intersect(System.Security.PermissionSet)">
      <summary>現在の <see cref="T:System.Security.PermissionSet" /> と指定した <see cref="T:System.Security.PermissionSet" /> の積集合であるアクセス許可セットを作成して返します。</summary>
      <param name="other">現在の <see cref="T:System.Security.PermissionSet" /> と交差するアクセス許可セット。</param>
      <returns>現在の <see cref="T:System.Security.PermissionSet" /> と指定されたターゲットの積集合を表す新しいアクセス許可セット。 積集合が空の場合、このオブジェクトは <see langword="null" /> です。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsEmpty">
      <summary>
        <see cref="T:System.Security.PermissionSet" /> が空かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が空の場合は <see cref="T:System.Security.PermissionSet" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.PermissionSet.IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>常に <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)">
      <summary>現在の <see cref="T:System.Security.PermissionSet" /> が指定した <see cref="T:System.Security.PermissionSet" /> のサブセットであるかどうかを判断します。</summary>
      <param name="target">サブセットの関係をテストするためのアクセス許可セット。 これは <see cref="T:System.Security.PermissionSet" /> か <see cref="T:System.Security.NamedPermissionSet" /> のいずれかである必要があります。</param>
      <returns>現在の <see langword="true" /> が <see cref="T:System.Security.PermissionSet" /> パラメーターのサブセットである場合は <paramref name="target" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.PermissionSet.IsSynchronized">
      <summary>コレクションが確実にスレッド セーフであるかどうかを示す値を取得します。</summary>
      <returns>常に <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsUnrestricted">
      <summary>
        <see cref="T:System.Security.PermissionSet" /> が <see langword="Unrestricted" /> であるかどうかを判断します。</summary>
      <returns>
        <see langword="true" /> が <see cref="T:System.Security.PermissionSet" /> の場合は <see langword="Unrestricted" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.PermitOnly">
      <summary>現在の <see cref="M:System.Security.PermissionSet.Demand" /> のサブセットではない <see cref="T:System.Security.PermissionSet" /> について、呼び出し側コードをパススルーする <see cref="T:System.Security.PermissionSet" /> が失敗するようにします。</summary>
    </member>
    <member name="M:System.Security.PermissionSet.RemovePermission(System.Type)">
      <summary>セットから特定の型のアクセス許可を削除します。</summary>
      <param name="permClass">削除するアクセス許可の種類。</param>
      <returns>セットからアクセス許可が削除されました。</returns>
      <exception cref="T:System.InvalidOperationException">メソッドは <see cref="T:System.Security.ReadOnlyPermissionSet" /> から呼び出されます。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.RemovePermissionImpl(System.Type)">
      <summary>セットから特定の型のアクセス許可を削除します。</summary>
      <param name="permClass">削除するアクセス許可の型。</param>
      <returns>セットからアクセス許可が削除されました。</returns>
      <exception cref="T:System.InvalidOperationException">メソッドは <see cref="T:System.Security.ReadOnlyPermissionSet" /> から呼び出されます。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.RevertAssert">
      <summary>現在のフレームのすべての以前の <see cref="M:System.Security.CodeAccessPermission.Assert" /> が削除され、使用できなくなります。</summary>
      <exception cref="T:System.InvalidOperationException">現在のフレームには以前の <see cref="M:System.Security.CodeAccessPermission.Assert" /> はありません。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.SetPermission(System.Security.IPermission)">
      <summary>
        <see cref="T:System.Security.PermissionSet" /> にアクセス許可を設定し、同じ種類のすべての既存のアクセス権を置換します。</summary>
      <param name="perm">設定するアクセス許可。</param>
      <returns>設定されたアクセス許可。</returns>
      <exception cref="T:System.InvalidOperationException">メソッドは <see cref="T:System.Security.ReadOnlyPermissionSet" /> から呼び出されます。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)">
      <summary>
        <see cref="T:System.Security.PermissionSet" /> にアクセス許可を設定し、同じ種類のすべての既存のアクセス権を置換します。</summary>
      <param name="perm">設定するアクセス許可。</param>
      <returns>設定されたアクセス許可。</returns>
      <exception cref="T:System.InvalidOperationException">メソッドは <see cref="T:System.Security.ReadOnlyPermissionSet" /> から呼び出されます。</exception>
    </member>
    <member name="P:System.Security.PermissionSet.SyncRoot">
      <summary>現在のコレクションのルート オブジェクトを取得します。</summary>
      <returns>現在のコレクションのルート オブジェクト。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>オブジェクト グラフ全体が逆シリアル化された時点で実行します。</summary>
      <param name="sender">コールバックを開始したオブジェクト。 このパラメーターの機能は、現在実装されていません。</param>
    </member>
    <member name="M:System.Security.PermissionSet.ToString">
      <summary>
        <see cref="T:System.Security.PermissionSet" /> の文字列形式を返します。</summary>
      <returns>
        <see cref="T:System.Security.PermissionSet" /> の表現。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.ToXml">
      <summary>セキュリティ オブジェクトとその現在の状態の XML エンコードを作成します。</summary>
      <returns>状態情報のすべてを含む、セキュリティ オブジェクトの XML エンコーディング。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Union(System.Security.PermissionSet)">
      <summary>現在の <see cref="T:System.Security.PermissionSet" /> と指定された <see cref="T:System.Security.PermissionSet" /> の和集合である <see cref="T:System.Security.PermissionSet" /> を作成します。</summary>
      <param name="other">現在の <see cref="T:System.Security.PermissionSet" /> と和集合を形成するアクセス許可セット。</param>
      <returns>現在の <see cref="T:System.Security.PermissionSet" /> と指定された <see cref="T:System.Security.PermissionSet" /> の和集合を表す新しいアクセス許可セット。</returns>
    </member>
    <member name="T:System.Security.SecurityElement">
      <summary>セキュリティ オブジェクトのエンコーディングの XML オブジェクト モデルを表します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String)">
      <summary>タグを指定して、<see cref="T:System.Security.SecurityElement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tag">XML 要素のタグ名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" /> パラメーターが XML で無効です。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Security.SecurityElement" /> クラスの新しいインスタンスを、指定したタグとテキストを使用して初期化します。</summary>
      <param name="tag">XML 要素のタグ名。</param>
      <param name="text">要素内のテキストの内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" /> パラメーターまたは <paramref name="text" /> パラメーターが、XML で無効です。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
      <summary>XML 要素に名前/値属性を追加します。</summary>
      <param name="name">属性の名前。</param>
      <param name="value">属性の値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> パラメーターまたは <paramref name="value" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターまたは <paramref name="value" /> パラメーターが、XML で無効です。

または -
<paramref name="name" /> パラメーターで指定した名前の属性が既に存在しています。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.AddChild(System.Security.SecurityElement)">
      <summary>XML 要素に子要素を追加します。</summary>
      <param name="child">追加する子要素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.Attribute(System.String)">
      <summary>XML 要素で、名前を指定して属性を検索します。</summary>
      <param name="name">検索する属性の名前。</param>
      <returns>名前付き属性と関連付けられた値。または <paramref name="name" /> の属性が存在しない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Attributes">
      <summary>名前/値ペアとして、XML 要素の属性を取得または設定します。</summary>
      <returns>XML 要素の属性値の <see cref="T:System.Collections.Hashtable" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Collections.Hashtable" /> オブジェクトの名前または値が無効です。</exception>
      <exception cref="T:System.ArgumentException">名前は有効な XML 属性名ではありません。</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Children">
      <summary>XML 要素の子要素の配列を取得または設定します。</summary>
      <returns>セキュリティ要素としての XML 要素の順序付けられた子要素。</returns>
      <exception cref="T:System.ArgumentException">XML 親ノードの子が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.Copy">
      <summary>現在の <see cref="T:System.Security.SecurityElement" /> オブジェクトのコピーを作成して返します。</summary>
      <returns>現在の <see cref="T:System.Security.SecurityElement" /> オブジェクトのコピー。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)">
      <summary>2 つの XML 要素オブジェクトが等しいかどうかを比較します。</summary>
      <param name="other">現在の XML 要素オブジェクトと比較する XML 要素オブジェクト。</param>
      <returns>現在の XML 要素のタグ、属性の名前と値、子要素、およびテキスト フィールドが <paramref name="other" /> パラメーターの対応する項目と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.Escape(System.String)">
      <summary>文字列内の無効な XML 文字を等価の有効な XML に置き換えます。</summary>
      <param name="str">エスケープする無効な文字を含む文字列。</param>
      <returns>置き換えられた無効な文字を含む入力文字列。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.FromString(System.String)">
      <summary>XML でエンコードされた文字列からセキュリティ要素を作成します。</summary>
      <param name="xml">セキュリティ要素を作成するための XML でエンコードされた文字列。</param>
      <returns>XML から作成する <see cref="T:System.Security.SecurityElement" />。</returns>
      <exception cref="T:System.Security.XmlSyntaxException">
        <paramref name="xml" /> には、1 つ以上の単一引用符文字が含まれています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeName(System.String)">
      <summary>文字列が有効な属性名かどうかを判断します。</summary>
      <param name="name">有効性をテストする属性名。</param>
      <returns>
        <paramref name="name" /> パラメーターが有効な XML 属性名の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeValue(System.String)">
      <summary>文字列が有効な属性値かどうかを判断します。</summary>
      <param name="value">有効性をテストする属性値。</param>
      <returns>
        <paramref name="value" /> パラメーターが有効な XML 属性値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidTag(System.String)">
      <summary>文字列が有効なタグかどうかを判断します。</summary>
      <param name="tag">有効性をテストするタグ。</param>
      <returns>
        <paramref name="tag" /> パラメーターが有効な XML タグの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidText(System.String)">
      <summary>文字列が XML 要素内のテキストとして有効かどうかを判断します。</summary>
      <param name="text">有効性をテストするテキスト。</param>
      <returns>
        <paramref name="text" /> パラメーターが有効な XML テキスト要素の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForChildByTag(System.String)">
      <summary>タグ名を指定して子要素を検索します。</summary>
      <param name="tag">子要素で検索するタグ。</param>
      <returns>指定したタグ値を持つ最初の XML 子要素。または <paramref name="tag" /> を持つ子要素が存在しない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
      <summary>タグ名を指定して子要素を検索し、格納されているテキストを返します。</summary>
      <param name="tag">子要素で検索するタグ。</param>
      <returns>指定したタグ値を持つ最初の子要素のテキストの内容。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Tag">
      <summary>XML 要素のタグ名を取得または設定します。</summary>
      <returns>XML 要素のタグ名。</returns>
      <exception cref="T:System.ArgumentNullException">タグが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">タグが XML で有効ではありません。</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Text">
      <summary>XML 要素内のテキストを取得または設定します。</summary>
      <returns>XML 要素内のテキストの値。</returns>
      <exception cref="T:System.ArgumentException">テキストが XML で有効ではありません。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.ToString">
      <summary>XML 要素、その構成属性、子要素、およびテキストの文字列形式を生成します。</summary>
      <returns>XML 要素とその内容。</returns>
    </member>
    <member name="T:System.StringComparer">
      <summary>大文字と小文字の区別、およびカルチャ ベースまたは序数ベースの特定の比較規則を使用する文字列比較操作を表します。</summary>
    </member>
    <member name="M:System.StringComparer.#ctor">
      <summary>
        <see cref="T:System.StringComparer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.StringComparer.Compare(System.Object,System.Object)">
      <summary>派生クラスでオーバーライドされた場合、2 つのオブジェクトを比較し、相対的な並べ替え順序を表す値を返します。</summary>
      <param name="x">
        <paramref name="y" /> と比較するオブジェクト。</param>
      <param name="y">
        <paramref name="x" /> と比較するオブジェクト。</param>
      <returns>
        <paramref name="x" /> と <paramref name="y" /> の相対値を示す符号付き整数。次の表を参照してください。
 [値] 
 説明 
 0 より小さい値 
並べ替え順序において <paramref name="x" /> は <paramref name="y" /> の前になります。  
  
- または - 
<paramref name="x" /> が <see langword="null" /> で、<paramref name="y" /> が <see langword="null" /> ではありません。  
  
 0 
<paramref name="x" /> と <paramref name="y" /> が等価です。  
  
- または - 
<paramref name="x" /> と <paramref name="y" /> が両方とも <see langword="null" /> です。  
  
 0 より大きい値 
並べ替え順序において <paramref name="x" /> は <paramref name="y" /> の後ろになります。  
  
- または - 
<paramref name="y" /> が <see langword="null" /> で、<paramref name="x" /> が <see langword="null" /> ではありません。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> と <paramref name="y" /> のどちらも <see cref="T:System.String" /> オブジェクトではありません。また、<paramref name="x" /> と <paramref name="y" /> のどちらも <see cref="T:System.IComparable" /> インターフェイスを実装していません。</exception>
    </member>
    <member name="M:System.StringComparer.Compare(System.String,System.String)">
      <summary>派生クラスでオーバーライドされた場合、2 つの文字列を比較し、相対的な並べ替え順序を表す値を返します。</summary>
      <param name="x">
        <paramref name="y" /> と比較する文字列。</param>
      <param name="y">
        <paramref name="x" /> と比較する文字列。</param>
      <returns>
        <paramref name="x" /> と <paramref name="y" /> の相対値を示す符号付き整数。次の表を参照してください。
 [値] 
 説明 
 0 より小さい値 
並べ替え順序において <paramref name="x" /> は <paramref name="y" /> の前になります。  
  
- または - 
<paramref name="x" /> が <see langword="null" /> で、<paramref name="y" /> が <see langword="null" /> ではありません。  
  
 0 
<paramref name="x" /> と <paramref name="y" /> が等価です。  
  
- または - 
<paramref name="x" /> と <paramref name="y" /> が両方とも <see langword="null" /> です。  
  
 0 より大きい値 
並べ替え順序において <paramref name="x" /> は <paramref name="y" /> の後ろになります。  
  
- または - 
<paramref name="y" /> が <see langword="null" /> で、<paramref name="x" /> が <see langword="null" /> ではありません。</returns>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
      <summary>指定したカルチャの規則に基づいて文字列を比較する <see cref="T:System.StringComparer" /> オブジェクトを作成します。</summary>
      <param name="culture">文字列比較を実行するための言語的な規則を定義したカルチャ。</param>
      <param name="ignoreCase">比較操作で大文字と小文字を区別しない場合は、<see langword="true" /> を指定します。比較操作で大文字と小文字を区別する場合は、<see langword="false" /> を指定します。</param>
      <returns>
        <see cref="T:System.StringComparer" /> パラメーターで使用する比較規則と <paramref name="culture" /> パラメーターで指定する大文字と小文字の区別の規則に基づいて文字列を比較する新しい <paramref name="ignoreCase" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <param name="culture" />
      <param name="options" />
    </member>
    <member name="P:System.StringComparer.CurrentCulture">
      <summary>現在のカルチャの単語ベースの比較規則を使用して、大文字と小文字を区別して文字列を比較する <see cref="T:System.StringComparer" /> オブジェクトを取得します。</summary>
      <returns>新しい <see cref="T:System.StringComparer" /> オブジェクト。</returns>
    </member>
    <member name="P:System.StringComparer.CurrentCultureIgnoreCase">
      <summary>現在のカルチャの単語ベースの比較規則を使用して、大文字と小文字を区別せずに文字列を比較する <see cref="T:System.StringComparer" /> オブジェクトを取得します。</summary>
      <returns>文字列比較用の新しいオブジェクト。</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.Object,System.Object)">
      <summary>派生クラスでオーバーライドされた場合、2 つのオブジェクトが等しいかどうかを示します。</summary>
      <param name="x">
        <paramref name="y" /> と比較するオブジェクト。</param>
      <param name="y">
        <paramref name="x" /> と比較するオブジェクト。</param>
      <returns>
        <paramref name="x" /> と <paramref name="y" /> が同じオブジェクトを参照している場合、または <paramref name="x" /> と <paramref name="y" /> が同じ型のオブジェクトでこれらのオブジェクトが等しい場合、または <paramref name="x" /> と <paramref name="y" /> が両方とも <see langword="null" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.String,System.String)">
      <summary>派生クラスでオーバーライドされた場合、2 つの文字列が等しいかどうかを示します。</summary>
      <param name="x">
        <paramref name="y" /> と比較する文字列。</param>
      <param name="y">
        <paramref name="x" /> と比較する文字列。</param>
      <returns>
        <paramref name="x" /> と <paramref name="y" /> が同じオブジェクトを参照している場合、または <paramref name="x" /> と <paramref name="y" /> が等しい場合、または <paramref name="x" /> と <paramref name="y" /> が <see langword="null" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.StringComparer.FromComparison(System.StringComparison)">
      <param name="comparisonType" />
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.Object)">
      <summary>派生クラスでオーバーライドされた場合、指定したオブジェクトのハッシュ コードを取得します。</summary>
      <param name="obj">オブジェクト。</param>
      <returns>
        <paramref name="obj" /> パラメーターの値から計算された 32 ビットの符号付きハッシュ コード。</returns>
      <exception cref="T:System.ArgumentException">ハッシュ コードを計算するために必要なバッファーに十分なメモリを割り当てることができません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.String)">
      <summary>派生クラスでオーバーライドされた場合、指定した文字列のハッシュ コードを取得します。</summary>
      <param name="obj">文字列。</param>
      <returns>
        <paramref name="obj" /> パラメーターの値から計算された 32 ビットの符号付きハッシュ コード。</returns>
      <exception cref="T:System.ArgumentException">ハッシュ コードを計算するために必要なバッファーに十分なメモリを割り当てることができません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.StringComparer.InvariantCulture">
      <summary>インバリアント カルチャの単語ベースの比較規則を使用して、大文字と小文字を区別して文字列を比較する <see cref="T:System.StringComparer" /> オブジェクトを取得します。</summary>
      <returns>新しい <see cref="T:System.StringComparer" /> オブジェクト。</returns>
    </member>
    <member name="P:System.StringComparer.InvariantCultureIgnoreCase">
      <summary>インバリアント カルチャの単語ベースの比較規則を使用して、大文字と小文字を区別せずに文字列を比較する <see cref="T:System.StringComparer" /> オブジェクトを取得します。</summary>
      <returns>新しい <see cref="T:System.StringComparer" /> オブジェクト。</returns>
    </member>
    <member name="P:System.StringComparer.Ordinal">
      <summary>大文字と小文字を区別して序数の文字列比較を実行する <see cref="T:System.StringComparer" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.StringComparer" /> オブジェクト。</returns>
    </member>
    <member name="P:System.StringComparer.OrdinalIgnoreCase">
      <summary>大文字と小文字を区別せずに序数の文字列比較を実行する <see cref="T:System.StringComparer" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.StringComparer" /> オブジェクト。</returns>
    </member>
    <member name="T:System.StringNormalizationExtensions">
      <summary>文字列の正規化を使用する拡張メソッドを提供します。</summary>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String)">
      <summary>指定された文字列が、Unicode 正規形 C であるかどうかを示します。</summary>
      <param name="value">文字列。</param>
      <returns>
        <paramref name="value" /> が正規形 C である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> に無効な Unicode 文字が含まれています。</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String,System.Text.NormalizationForm)">
      <summary>文字列が指定された Unicode 正規形であるかどうかを示します。</summary>
      <param name="value">文字列。</param>
      <param name="normalizationForm">Unicode 正規形。</param>
      <returns>
        <paramref name="value" /> が正規形 <paramref name="normalizationForm" /> である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> に無効な Unicode 文字が含まれています。</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String)">
      <summary>文字列を Unicode 正規形 C に正規化します。</summary>
      <param name="value">正規化する文字列。</param>
      <returns>
        <paramref name="value" /> と同じテキスト値を持ち、かつ、バイナリ表現が Unicode 正規形 C である新しい文字列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> に無効な Unicode 文字が含まれています。</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String,System.Text.NormalizationForm)">
      <summary>文字列を、指定された Unicode 正規形に正規化します。</summary>
      <param name="value">正規化する文字列。</param>
      <param name="normalizationForm">Unicode 正規形。</param>
      <returns>
        <paramref name="value" /> と同じテキスト値を持ち、かつ、バイナリ表現が正規形 <paramref name="normalizationForm" /> である新しい文字列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> に無効な Unicode 文字が含まれています。</exception>
    </member>
    <member name="T:System.UriBuilder">
      <summary>URI (Uniform Resource Identifier) のカスタム コンストラクターを提供し、<see cref="T:System.Uri" /> クラスの URI を変更します。</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>
        <see cref="T:System.UriBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>指定した URI を使用して、<see cref="T:System.UriBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="uri">URI 文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.UriFormatException">Windows ストア アプリ用 .NET またはポータブル クラス ライブラリでは、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。  
  

          
          <paramref name="uri" /> は長さ 0 の文字列、または空白だけを含みます。  
  
- または - 
解析ルーチンが無効な形式のスキームを検出しました。  
  
- または - 
パーサーが、"file" スキームを使用しない URI で 3 つ以上の連続するスラッシュを検出しました。  
  
- または - 
 <paramref name="uri" /> は有効な URI ではありません。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>指定したスキームとホストを使用して、<see cref="T:System.UriBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="schemeName">インターネット アクセス プロトコル。</param>
      <param name="hostName">DNS スタイルのドメイン名、または IP アドレス。</param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>指定したスキーム、ホスト、およびポートを使用して、<see cref="T:System.UriBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scheme">インターネット アクセス プロトコル。</param>
      <param name="host">DNS スタイルのドメイン名、または IP アドレス。</param>
      <param name="portNumber">このサービスの IP ポート番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="portNumber" /> が -1 より小さいか、65,535 を超えています。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>指定したスキーム、ホスト、ポート番号、およびパスを使用して、<see cref="T:System.UriBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scheme">インターネット アクセス プロトコル。</param>
      <param name="host">DNS スタイルのドメイン名、または IP アドレス。</param>
      <param name="port">このサービスの IP ポート番号。</param>
      <param name="pathValue">インターネット リソースへのパス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> が -1 より小さいか、65,535 を超えています。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>指定したスキーム、ホスト、ポート番号、パス、およびクエリ文字列またはフラグメント識別子を使用して、<see cref="T:System.UriBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scheme">インターネット アクセス プロトコル。</param>
      <param name="host">DNS スタイルのドメイン名、または IP アドレス。</param>
      <param name="port">このサービスの IP ポート番号。</param>
      <param name="path">インターネット リソースへのパス。</param>
      <param name="extraValue">クエリ文字列またはフラグメント識別子。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="extraValue" /> が、<see langword="null" />、<see cref="F:System.String.Empty" />、シャープ記号 (#) で始まる有効なフラグメント識別子、疑問符 (?) で始まる有効なクエリ文字列のいずれでもありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> が -1 より小さいか、65,535 を超えています。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>指定された <see cref="T:System.UriBuilder" /> インスタンスを使用して、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="uri">
        <see cref="T:System.Uri" /> クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>既存の <see cref="T:System.Uri" /> インスタンスと、<see cref="T:System.UriBuilder" /> の内容が等しいかどうかを比較します。</summary>
      <param name="rparam">現在のインスタンスと比較するオブジェクト。</param>
      <returns>
        <paramref name="rparam" /> がこの <see cref="T:System.Uri" /> インスタンスによって構築される <see cref="T:System.Uri" /> と同じ <see cref="T:System.UriBuilder" /> を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>URI のフラグメント部分を取得または設定します。</summary>
      <returns>URI のフラグメント部分。 フラグメント識別子 ("#") がフラグメントの先頭に追加されます。</returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>URI のハッシュ コードを返します。</summary>
      <returns>URI に対して生成されたハッシュ コード。</returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>サーバーの DNS (Domain Name System) ホスト名または IP アドレスを取得または設定します。</summary>
      <returns>サーバーの DNS ホスト名または IP アドレス。</returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>URI へアクセスするユーザーに関連付けられているパスワードを取得または設定します。</summary>
      <returns>URI へアクセスするユーザーのパスワード。</returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>URI によって参照されるリソースのパスを取得または設定します。</summary>
      <returns>URI によって参照されるリソースのパス。</returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>URI のポート番号を取得または設定します。</summary>
      <returns>URI のポート番号。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">ポートは、-1 未満または 65,535 より大きい値に設定できません。</exception>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>URI に含まれているクエリ情報を取得または設定します。</summary>
      <returns>URI に含まれているクエリ情報。</returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>URI のスキーム名を取得または設定します。</summary>
      <returns>URI のスキーム。</returns>
      <exception cref="T:System.ArgumentException">スキームを無効なスキーム名に設定することはできません。</exception>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>指定した <see cref="T:System.UriBuilder" /> インスタンスの表示文字列を返します。</summary>
      <returns>
        <see cref="T:System.UriBuilder" /> のエスケープ解除された表示文字列が含まれている文字列。</returns>
      <exception cref="T:System.UriFormatException">Windows ストア アプリ用 .NET またはポータブル クラス ライブラリでは、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。  
  

            
  
 <see cref="T:System.UriBuilder" /> インスタンスのパスワードが不適切です。</exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>指定された <see cref="T:System.Uri" /> インスタンスによって構築された <see cref="T:System.UriBuilder" /> インスタンスを取得します。</summary>
      <returns>
        <see cref="T:System.UriBuilder" /> によって構築された URI を含む <see cref="T:System.Uri" />。</returns>
      <exception cref="T:System.UriFormatException">Windows ストア アプリ用 .NET またはポータブル クラス ライブラリでは、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。  
  

            
  
 <see cref="T:System.UriBuilder" /> プロパティによって構築された URI が無効です。</exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>URI へアクセスするユーザーに関連付けられているユーザー名。</summary>
      <returns>URI へアクセスするユーザーのユーザー名。</returns>
    </member>
  </members>
</doc>
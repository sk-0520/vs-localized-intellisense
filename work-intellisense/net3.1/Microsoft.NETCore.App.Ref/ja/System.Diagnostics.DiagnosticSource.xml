<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Diagnostics.DiagnosticSource</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.Activity">
      <summary>ログ記録に使用されるコンテキストを使用して、操作を表します。</summary>
    </member>
    <member name="M:System.Diagnostics.Activity.#ctor(System.String)">
      <summary>
        <see cref="T:System.Diagnostics.Activity" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="operationName">操作の名前。</param>
    </member>
    <member name="P:System.Diagnostics.Activity.ActivityTraceFlags">
      <summary>アクティビティに関連付けられている (W3C ID 仕様によって定義された) フラグを取得します。</summary>
      <returns>アクティビティに関連付けられているフラグ。</returns>
    </member>
    <member name="M:System.Diagnostics.Activity.AddBaggage(System.String,System.String)">
      <summary>指定したキーと値の新しい baggage 項目を得られるように <see cref="T:System.Diagnostics.Activity" /> を更新します。</summary>
      <param name="key">baggage キーです。</param>
      <param name="value">baggage 値です。</param>
      <returns>チェーンで役立つ <see langword="this" /> です。</returns>
    </member>
    <member name="M:System.Diagnostics.Activity.AddTag(System.String,System.String)">
      <summary>指定した <see cref="T:System.Diagnostics.Activity" /> と <paramref name="key" /> で新しいタグが得られるように <paramref name="value" /> を更新します。 」を参照してください。</summary>
      <param name="key">タグ キーです。</param>
      <param name="value">タグ値です。</param>
      <returns>チェーンで役立つ <see langword="this" /> です。</returns>
    </member>
    <member name="P:System.Diagnostics.Activity.Baggage">
      <summary>この <see cref="T:System.Diagnostics.Activity" /> の子に渡される情報を表すキーと値のペアのコレクションを取得します。</summary>
      <returns>文字列文字列のキーと値のペアの列挙体。</returns>
    </member>
    <member name="P:System.Diagnostics.Activity.Current">
      <summary>現在のスレッドの現在の操作 (<see cref="T:System.Diagnostics.Activity" />) を取得または設定します。  これは非同期呼び出し間でフローします。</summary>
      <returns>現在のスレッドの現在の操作。</returns>
    </member>
    <member name="P:System.Diagnostics.Activity.DefaultIdFormat">
      <summary>
        <see cref="T:System.Diagnostics.Activity" /> の既定の ID の形式を取得または設定します。</summary>
    </member>
    <member name="P:System.Diagnostics.Activity.Duration">
      <summary>操作の継続時間を取得します。</summary>
      <returns>
        <see cref="T:System.Diagnostics.Activity" /> が終了した場合 (<see cref="M:System.Diagnostics.Activity.Stop" /> または <see cref="M:System.Diagnostics.Activity.SetEndTime(System.DateTime)" /> が呼び出された場合)、<see cref="P:System.Diagnostics.Activity.StartTimeUtc" /> と終了時刻の間の差。 <see cref="F:System.TimeSpan.Zero" /> が終了せず、<see cref="T:System.Diagnostics.Activity" /> が呼び出されなかった場合は <see cref="M:System.Diagnostics.Activity.SetEndTime(System.DateTime)" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Activity.ForceDefaultIdFormat">
      <summary>既定の ID 形式を定義するために <see cref="P:System.Diagnostics.Activity.DefaultIdFormat" /> を常に使用するかどうかを決定する値を取得または設定します。</summary>
      <returns>常に <see cref="P:System.Diagnostics.Activity.DefaultIdFormat" />を使用する <see langword="true" /> ます。それ以外の場合は、<see langword="false" />ます。</returns>
    </member>
    <member name="M:System.Diagnostics.Activity.GetBaggageItem(System.String)">
      <summary>
        <see cref="M:System.Diagnostics.Activity.AddBaggage(System.String,System.String)" /> でアクティビティに追加されたキーと値のペアの値を返します。</summary>
      <param name="key">baggage キーです。</param>
      <returns>存在する場合は、キーと値のペア項目の値で、それ以外の場合は <see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Diagnostics.Activity.Id">
      <summary>特定の要求に固有の識別子を取得します。</summary>
      <returns>アクティビティ ID。</returns>
    </member>
    <member name="P:System.Diagnostics.Activity.IdFormat">
      <summary>
        <see cref="P:System.Diagnostics.Activity.Id" /> の形式を取得します。</summary>
      <returns>
        <see cref="P:System.Diagnostics.Activity.Id" />の形式。</returns>
    </member>
    <member name="P:System.Diagnostics.Activity.OperationName">
      <summary>操作名を取得します。</summary>
      <returns>操作の名前。</returns>
    </member>
    <member name="P:System.Diagnostics.Activity.Parent">
      <summary>このアクティビティを作成した親 <see cref="T:System.Diagnostics.Activity" /> を取得します。</summary>
      <returns>この <see cref="T:System.Diagnostics.Activity" />の親が同じプロセスからのものである場合、またはこのインスタンスに親がない場合 (ルートアクティビティの場合)、または親がプロセスの外部からのものである場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Activity.ParentId">
      <summary>このアクティビティの親の ID を取得します。</summary>
      <returns>親 ID (存在する場合)。存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Activity.ParentSpanId">
      <summary>親の <see cref="P:System.Diagnostics.Activity.SpanId" /> を取得します。</summary>
      <returns>親の <see cref="P:System.Diagnostics.Activity.SpanId" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Activity.Recorded">
      <summary>W3CIdFlags.Recorded フラグが設定されているかどうかを示す値を取得します。</summary>
      <returns>W3CIdFlags フラグが設定されている場合は <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</returns>
    </member>
    <member name="P:System.Diagnostics.Activity.RootId">
      <summary>この <see cref="T:System.Diagnostics.Activity" /> のルート ID を取得します。</summary>
      <returns>ルート ID。現在のインスタンスが <see cref="P:System.Diagnostics.Activity.ParentId" /> または <see cref="P:System.Diagnostics.Activity.Id" />のいずれかである場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Diagnostics.Activity.SetEndTime(System.DateTime)">
      <summary>
        <see cref="T:System.Diagnostics.Activity" /> を更新して、その <see cref="P:System.Diagnostics.Activity.Duration" /> を <see cref="P:System.Diagnostics.Activity.StartTimeUtc" /> と指定した停止時間の差に設定します。</summary>
      <param name="endTimeUtc">UTC の停止時刻です。</param>
      <returns>チェーンで役立つ <see langword="this" /> です。</returns>
    </member>
    <member name="M:System.Diagnostics.Activity.SetIdFormat(System.Diagnostics.ActivityIdFormat)">
      <summary>開始される前に、この <see cref="T:System.Diagnostics.Activity" /> で ID 形式を設定します。</summary>
      <param name="format">
        <see cref="P:System.Diagnostics.Activity.Id" /> プロパティの形式を指定する列挙値の 1 つ。</param>
      <returns>チェーンで役立つ <see langword="this" /> です。</returns>
    </member>
    <member name="M:System.Diagnostics.Activity.SetParentId(System.Diagnostics.ActivityTraceId,System.Diagnostics.ActivitySpanId,System.Diagnostics.ActivityTraceFlags)">
      <summary>TraceId および SpanId の W3C 規約を使用して、親 ID を設定します。</summary>
      <param name="traceId">親アクティビティの TraceId。</param>
      <param name="spanId">親アクティビティの SpanId。</param>
      <param name="activityTraceFlags">アクティビティに関連付けられている、W3C 標準で定義されたフラグを指定する列挙値の 1 つ。</param>
      <returns>チェーンで役立つ <see langword="this" /> です。</returns>
    </member>
    <member name="M:System.Diagnostics.Activity.SetParentId(System.String)">
      <summary>この <see cref="T:System.Diagnostics.Activity" /> を更新して、<see cref="T:System.Diagnostics.Activity" /> の ID の <paramref name="parentId" /> がこの <see cref="T:System.Diagnostics.Activity" /> を発生させたことを示します。</summary>
      <param name="parentId">親操作の ID です。</param>
      <returns>チェーンで役立つ <see langword="this" /> です。</returns>
    </member>
    <member name="M:System.Diagnostics.Activity.SetStartTime(System.DateTime)">
      <summary>この <see cref="T:System.Diagnostics.Activity" /> の開始時間を設定します。</summary>
      <param name="startTimeUtc">UTC での <see cref="T:System.Diagnostics.Activity" /> の開始時間です。</param>
      <returns>チェーンで役立つ <see langword="this" /> です。</returns>
    </member>
    <member name="P:System.Diagnostics.Activity.SpanId">
      <summary>
        <see cref="P:System.Diagnostics.Activity.Id" /> の SPAN 部分を取得します。</summary>
      <returns>
        <see cref="T:System.Diagnostics.Activity" /> が W3C 形式の場合、<see cref="P:System.Diagnostics.Activity.Id" />の SPAN 部分の ID。それ以外の場合は、0 <see langword="SpanId" />になります。</returns>
    </member>
    <member name="M:System.Diagnostics.Activity.Start">
      <summary>アクティビティを開始します。</summary>
      <returns>チェーンで役立つ <see langword="this" /> です。</returns>
    </member>
    <member name="P:System.Diagnostics.Activity.StartTimeUtc">
      <summary>操作が開始された時間を取得します。</summary>
      <returns>操作が開始された UTC 時刻。</returns>
    </member>
    <member name="M:System.Diagnostics.Activity.Stop">
      <summary>アクティビティを停止します。</summary>
    </member>
    <member name="P:System.Diagnostics.Activity.Tags">
      <summary>ログ システムに <see cref="T:System.Diagnostics.Activity" /> と共に書き込まれる情報を表すキーと値のペアのコレクションを取得します。</summary>
      <returns>文字列文字列のキーと値のペアの列挙体。</returns>
    </member>
    <member name="P:System.Diagnostics.Activity.TraceId">
      <summary>
        <see cref="P:System.Diagnostics.Activity.Id" /> の TraceId 部分を取得します。</summary>
      <returns>ID が W3C 形式の場合、<see cref="P:System.Diagnostics.Activity.Id" />の TraceId 部分の ID。それ以外の場合は、0 TraceId です。</returns>
    </member>
    <member name="P:System.Diagnostics.Activity.TraceStateString">
      <summary>W3C <see langword="tracestate" /> ヘッダーを取得します。</summary>
      <returns>W3C <see langword="tracestate" /> ヘッダー。</returns>
    </member>
    <member name="T:System.Diagnostics.ActivityIdFormat">
      <summary>
        <see cref="P:System.Diagnostics.Activity.Id" /> プロパティの形式を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.ActivityIdFormat.Hierarchical">
      <summary>階層的形式。</summary>
    </member>
    <member name="F:System.Diagnostics.ActivityIdFormat.Unknown">
      <summary>不明な形式。</summary>
    </member>
    <member name="F:System.Diagnostics.ActivityIdFormat.W3C">
      <summary>W3C 形式。</summary>
    </member>
    <member name="T:System.Diagnostics.ActivitySpanId">
      <summary>W3C 標準に基づいて書式設定された <see cref="P:System.Diagnostics.Activity.SpanId" /> を表します。</summary>
    </member>
    <member name="M:System.Diagnostics.ActivitySpanId.CopyTo(System.Span{System.Byte})">
      <summary>現在の <see cref="T:System.Diagnostics.ActivitySpanId" /> の 8 バイトを指定のスパンにコピーします。</summary>
      <param name="destination">SpanID の 8 バイトがコピーされるスパン。</param>
    </member>
    <member name="M:System.Diagnostics.ActivitySpanId.CreateFromBytes(System.ReadOnlySpan{System.Byte})">
      <summary>8 バイトの読み取り専用スパンから新しい <see cref="T:System.Diagnostics.ActivitySpanId" /> 値を作成します。</summary>
      <param name="idData">8 バイトの読み取り専用スパン。</param>
      <returns>新しいスパン ID。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="idData" /> には 8 バイトは含まれません。</exception>
    </member>
    <member name="M:System.Diagnostics.ActivitySpanId.CreateFromString(System.ReadOnlySpan{System.Char})">
      <summary>16 個の 16 進数文字の読み取り専用スパンから新しい <see cref="T:System.Diagnostics.ActivitySpanId" /> 値を作成します。</summary>
      <param name="idData">16 個の 16 進数文字を含むスパン。</param>
      <returns>新しいスパン ID。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="idData" /> には、16 個の 16 進数文字は含まれていません。

または -
<paramref name="idData" /> の文字は、すべて小文字の 16 進数文字でもすべてゼロでもありません。</exception>
    </member>
    <member name="M:System.Diagnostics.ActivitySpanId.CreateFromUtf8String(System.ReadOnlySpan{System.Byte})">
      <summary>UTF8 でエンコードされたバイトの読み取り専用スパンから新しい <see cref="T:System.Diagnostics.ActivitySpanId" /> 値を作成します。</summary>
      <param name="idData">UTF8 でエンコードされたバイトの読み取り専用スパン。</param>
      <returns>新しいスパン ID。</returns>
    </member>
    <member name="M:System.Diagnostics.ActivitySpanId.CreateRandom">
      <summary>ランダムな数 (一意となる可能性が非常に高い) に基づいて新しい <see cref="T:System.Diagnostics.ActivitySpanId" /> を作成します。</summary>
      <returns>新しいスパン ID。</returns>
    </member>
    <member name="M:System.Diagnostics.ActivitySpanId.Equals(System.Diagnostics.ActivitySpanId)">
      <summary>このインスタンスと、指定した <see cref="T:System.Diagnostics.ActivitySpanId" /> インスタンスの値が同一かどうかを判断します。</summary>
      <param name="spanId">比較対象のインスタンス。</param>
      <returns>
        <paramref name="spanId" /> が現在のインスタンスと同じ 16 進数値の場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.ActivitySpanId.Equals(System.Object)">
      <summary>現在のインスタンスと指定したオブジェクト (やはり <see cref="T:System.Diagnostics.ActivitySpanId" /> インスタンスである必要があります) が同じ値です。</summary>
      <param name="obj">比較対象のオブジェクト。</param>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.Diagnostics.ActivitySpanId" /> のインスタンスで、現在のインスタンスと同じ 16 進値の場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.ActivitySpanId.GetHashCode">
      <summary>SpanId のハッシュ コードを返します。</summary>
      <returns>SpanId のハッシュ コード。</returns>
    </member>
    <member name="M:System.Diagnostics.ActivitySpanId.op_Equality(System.Diagnostics.ActivitySpanId,System.Diagnostics.ActivitySpanId)">
      <summary>指定した 2 つの <see cref="T:System.Diagnostics.ActivitySpanId" /> インスタンスの値が同一かどうかを判断します。</summary>
      <param name="spanId1">比較する 1 番目のインスタンス。</param>
      <param name="spandId2">比較する 2 番目のインスタンス。</param>
      <returns>
        <paramref name="spanId1" /> の SpanId が <paramref name="spandId2" /> の SpanId と同じ場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.ActivitySpanId.op_Inequality(System.Diagnostics.ActivitySpanId,System.Diagnostics.ActivitySpanId)">
      <summary>指定した 2 つの <see cref="T:System.Diagnostics.ActivitySpanId" /> インスタンスの値が異なるかどうかを判断します。</summary>
      <param name="spanId1">比較する 1 番目のインスタンス。</param>
      <param name="spandId2">比較する 2 番目のインスタンス。</param>
      <returns>
        <paramref name="spanId1" /> の SpanId が <paramref name="spandId2" /> の SpanId と異なる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.ActivitySpanId.ToHexString">
      <summary>このスパン ID を表す 16 文字からなる 16 進数文字列を返します。</summary>
      <returns>このスパン ID を 16 文字からなる 16 進数文字列で表現したもの。</returns>
    </member>
    <member name="M:System.Diagnostics.ActivitySpanId.ToString">
      <summary>このスパン ID を表す 16 文字からなる 16 進数文字列を返します。</summary>
      <returns>このスパン ID を 16 文字からなる 16 進数文字列で表現したもの。</returns>
    </member>
    <member name="T:System.Diagnostics.ActivityTraceFlags">
      <summary>アクティビティに関連付けられている、W3C 標準で定義されたフラグを指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.ActivityTraceFlags.None">
      <summary>アクティビティはマークされていません。</summary>
    </member>
    <member name="F:System.Diagnostics.ActivityTraceFlags.Recorded">
      <summary>アクティビティ (または多くの場合、その親) は、記録するのに役立つものとしてマークされています。</summary>
    </member>
    <member name="T:System.Diagnostics.ActivityTraceId">
      <summary>形式が W3C 標準に基づく <see cref="P:System.Diagnostics.Activity.TraceId" /> を表します。</summary>
    </member>
    <member name="M:System.Diagnostics.ActivityTraceId.CopyTo(System.Span{System.Byte})">
      <summary>現在の <see cref="T:System.Diagnostics.ActivityTraceId" /> の 16 バイトを指定のスパンにコピーします。</summary>
      <param name="destination">トレース ID の 16 バイトがコピーされるスパン。</param>
    </member>
    <member name="M:System.Diagnostics.ActivityTraceId.CreateFromBytes(System.ReadOnlySpan{System.Byte})">
      <summary>16 バイトの読み取り専用スパンから新しい <see cref="T:System.Diagnostics.ActivityTraceId" /> 値を作成します。</summary>
      <param name="idData">16 バイトの読み取り専用スパン。</param>
      <returns>新しいトレース ID。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="idData" /> には 8 バイトは含まれません。</exception>
    </member>
    <member name="M:System.Diagnostics.ActivityTraceId.CreateFromString(System.ReadOnlySpan{System.Char})">
      <summary>32 個の 16 進数文字の読み取り専用スパンから新しい <see cref="T:System.Diagnostics.ActivityTraceId" /> 値を作成します。</summary>
      <param name="idData">32 個の 16 進数文字を含むスパン。</param>
      <returns>新しいトレース ID。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="idData" /> には、16 個の 16 進数文字は含まれていません。

または -

<paramref name="idData" /> の文字は、すべて小文字の 16 進数文字でもすべてゼロでもありません。</exception>
    </member>
    <member name="M:System.Diagnostics.ActivityTraceId.CreateFromUtf8String(System.ReadOnlySpan{System.Byte})">
      <summary>UTF8 でエンコードされたバイトの読み取り専用スパンから新しい <see cref="T:System.Diagnostics.ActivityTraceId" /> 値を作成します。</summary>
      <param name="idData">UTF8 でエンコードされたバイトの読み取り専用スパン。</param>
      <returns>新しいトレース ID。</returns>
    </member>
    <member name="M:System.Diagnostics.ActivityTraceId.CreateRandom">
      <summary>ランダムな数 (一意となる可能性が非常に高い) に基づいて新しい <see cref="T:System.Diagnostics.ActivitySpanId" /> を作成します。</summary>
      <returns>新しいスパン ID。</returns>
    </member>
    <member name="M:System.Diagnostics.ActivityTraceId.Equals(System.Diagnostics.ActivityTraceId)">
      <summary>現在のインスタンスと指定した <see cref="T:System.Diagnostics.ActivityTraceId" /> が、等しいかどうかを判断します。</summary>
      <param name="traceId">比較対象のインスタンス。</param>
      <returns>
        <paramref name="traceId" /> が現在のインスタンスと同じ 16 進数値の場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.ActivityTraceId.Equals(System.Object)">
      <summary>このインスタンスと、指定したオブジェクトの値が同一かどうかを判断します。<see cref="T:System.Diagnostics.ActivityTraceId" /> インスタンスを指定する必要があります。</summary>
      <param name="obj">比較対象のオブジェクト。</param>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.Diagnostics.ActivityTraceId" /> のインスタンスで、現在のインスタンスと同じ 16 進値の場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.ActivityTraceId.GetHashCode">
      <summary>TraceId のハッシュ コードを返します。</summary>
      <returns>TraceId のハッシュ コード。</returns>
    </member>
    <member name="M:System.Diagnostics.ActivityTraceId.op_Equality(System.Diagnostics.ActivityTraceId,System.Diagnostics.ActivityTraceId)">
      <summary>指定した 2 つの <see cref="T:System.Diagnostics.ActivityTraceId" /> インスタンスの値が同一かどうかを判断します。</summary>
      <param name="traceId1">比較する 1 番目のインスタンス。</param>
      <param name="traceId2">比較する 2 番目のインスタンス。</param>
      <returns>
        <paramref name="traceId1" /> の TraceId が <paramref name="traceId2" /> の TraceId と同じである場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.ActivityTraceId.op_Inequality(System.Diagnostics.ActivityTraceId,System.Diagnostics.ActivityTraceId)">
      <summary>指定した 2 つの <see cref="T:System.Diagnostics.ActivityTraceId" /> インスタンスの値が同一かどうかを判断します。</summary>
      <param name="traceId1">比較する 1 番目のインスタンス。</param>
      <param name="traceId2">比較する 2 番目のインスタンス。</param>
      <returns>
        <paramref name="traceId1" /> の TraceId が <paramref name="traceId2" /> の TraceId と異なる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.ActivityTraceId.ToHexString">
      <summary>このスパン ID を表す 16 文字からなる 16 進数文字列を返します。</summary>
      <returns>このトレース ID を 32 文字からなる 16 進数文字列で表現したもの。</returns>
    </member>
    <member name="M:System.Diagnostics.ActivityTraceId.ToString">
      <summary>このトレース ID を表す 32 文字からなる 16 進数文字列を返します。</summary>
      <returns>このトレース ID を 32 文字からなる 16 進数文字列で表現したもの。</returns>
    </member>
    <member name="T:System.Diagnostics.DiagnosticListener">
      <summary>ソースがその情報を送信する (イベント) 名前付きの場所を表す抽象 <see cref="T:System.Diagnostics.DiagnosticSource" /> クラスの実装を提供します。</summary>
    </member>
    <member name="M:System.Diagnostics.DiagnosticListener.#ctor(System.String)">
      <summary>新しい <see cref="T:System.Diagnostics.DiagnosticListener" /> を作成します。</summary>
      <param name="name">この <see cref="T:System.Diagnostics.DiagnosticListener" /> の名前。</param>
    </member>
    <member name="P:System.Diagnostics.DiagnosticListener.AllListeners">
      <summary>この <see cref="T:System.Diagnostics.DiagnosticListener" /> のリスナーのコレクションを取得します。</summary>
    </member>
    <member name="M:System.Diagnostics.DiagnosticListener.Dispose">
      <summary>NotificationListeners を破棄します。</summary>
    </member>
    <member name="M:System.Diagnostics.DiagnosticListener.IsEnabled">
      <summary>登録されているサブスクライバーが存在するかどうかを判断します。</summary>
      <returns>登録されているサブスクライバーがいる場合は <see langword="true" /> で、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)">
      <summary>
        <see cref="T:System.Diagnostics.DiagnosticListener" /> が有効かどうかを確認します。</summary>
      <param name="name" />
      <returns>通知が有効になっている場合は <see langword="true" /> で、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Diagnostics.DiagnosticListener.IsEnabled(System.String,System.Object,System.Object)">
      <summary>診断イベントに対するいずれかのサブスクライバーが、この名前のイベントの受信に関心があるかどうかを確認します。 サブスクライバーは、<see cref="Overload:System.Diagnostics.DiagnosticListener.Subscribe" /> で提供されるデリゲートを使用して関心を示します。</summary>
      <param name="name">確認するイベントの名前。</param>
      <param name="arg1">コンテキストを表すオブジェクト。</param>
      <param name="arg2">コンテキストを表すオブジェクト。</param>
      <returns>有効な場合は <see langword="true" /> で、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Diagnostics.DiagnosticListener.Name">
      <summary>この <see cref="T:System.Diagnostics.DiagnosticListener" /> の名前を取得します。</summary>
      <returns>
        <see cref="T:System.Diagnostics.DiagnosticListener" /> の名前。</returns>
    </member>
    <member name="M:System.Diagnostics.DiagnosticListener.OnActivityExport(System.Diagnostics.Activity,System.Object)">
      <summary>すべてのサブスクライバーの OnActivityExport メソッドを呼び出します。</summary>
      <param name="activity">外部イベントの影響を受けるアクティビティ。</param>
      <param name="payload">送信要求を表すオブジェクト。</param>
    </member>
    <member name="M:System.Diagnostics.DiagnosticListener.OnActivityImport(System.Diagnostics.Activity,System.Object)">
      <summary>すべてのサブスクライバーの OnActivityImport メソッドを呼び出します。</summary>
      <param name="activity">外部イベントの影響を受けるアクティビティ。</param>
      <param name="payload">受信要求を表すオブジェクト。</param>
    </member>
    <member name="M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>サブスクライバーを追加します。</summary>
      <param name="observer">サブスクライバーです。</param>
      <returns>
        <see cref="T:System.Diagnostics.DiagnosticSource" /> が通知の送信を完了する前に、リスナーが通知の受信を停止できるインターフェイスへの参照。</returns>
    </member>
    <member name="M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Func{System.String,System.Object,System.Object,System.Boolean})">
      <summary>サブスクライバーを追加し、任意で、その名前と最大 2 つのコンテキスト オブジェクトに基づいてイベントをフィルタリングします。</summary>
      <param name="observer">サブスクライバーです。</param>
      <param name="isEnabled">その名前と最大 2 つのコンテキスト オブジェクト (<see langword="null" /> が可能) に基づいてイベントをフィルタリングするデリゲートです。あるいは、イベント フィルターが望ましくない場合、<see langword="null" />。</param>
      <returns>
        <see cref="T:System.Diagnostics.DiagnosticSource" /> が通知の送信を完了する前に、リスナーが通知の受信を停止できるインターフェイスへの参照。</returns>
    </member>
    <member name="M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Func{System.String,System.Object,System.Object,System.Boolean},System.Action{System.Diagnostics.Activity,System.Object},System.Action{System.Diagnostics.Activity,System.Object})">
      <summary>サブスクライバーを追加し、任意で、その名前と最大 2 つのコンテキスト オブジェクトに基づいてイベントをフィルタリングし、プロバイダーがプロセスの外からアクティビティをインポートまたはエクスポートするときに呼び出すメソッドを指定します。</summary>
      <param name="observer">サブスクライバーです。</param>
      <param name="isEnabled">その名前と最大 2 つのコンテキスト オブジェクト (<see langword="null" /> が可能) に基づいてイベントをフィルタリングするデリゲートです。あるいは、イベント フィルターが望ましくない場合、<see langword="null" />。</param>
      <param name="onActivityImport">外部イベントの影響を受けるアクティビティを受け取るアクション デリゲートおよび受信要求を表すオブジェクトです。</param>
      <param name="onActivityExport">外部イベントの影響を受けるアクティビティを受け取るアクション デリゲートおよび送信要求を表すオブジェクトです。</param>
      <returns>
        <see cref="T:System.Diagnostics.DiagnosticSource" /> が通知の送信を完了する前に、リスナーが通知の受信を停止できるインターフェイスへの参照。</returns>
    </member>
    <member name="M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Predicate{System.String})">
      <summary>サブスクライバーを追加し、任意で、その名前に基づいてイベントをフィルタリングします。</summary>
      <param name="observer">サブスクライバーです。</param>
      <param name="isEnabled">その名前 (<see cref="T:System.String" />) に基づいてイベントをフィルタリングするデリゲートです。 イベントが有効な場合、このデリゲートは <see langword="true" /> を返します。</param>
      <returns>
        <see cref="T:System.Diagnostics.DiagnosticSource" /> が通知の送信を完了する前に、リスナーが通知の受信を停止できるインターフェイスへの参照。</returns>
    </member>
    <member name="M:System.Diagnostics.DiagnosticListener.ToString">
      <summary>この DiagnosticListener の名前と共に文字列を返します。</summary>
      <returns>この DiagnosticListener の名前です。</returns>
    </member>
    <member name="M:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)">
      <summary>通知をログ記録します。</summary>
      <param name="name">ログ記録するイベントの名前。</param>
      <param name="value">イベントのペイロードを表すオブジェクト。</param>
    </member>
    <member name="T:System.Diagnostics.DiagnosticSource">
      <summary>コードが、インストルメント化されたプロセスで使用されるために、リッチ データのペイロードの生産時間のログ記録に使用されるのをインストルメント化する抽象クラスです。</summary>
    </member>
    <member name="M:System.Diagnostics.DiagnosticSource.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.DiagnosticSource" /> クラスのインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String)">
      <summary>通知イベントが有効になったかどうかを確認します。</summary>
      <param name="name">書き込まれるイベントの名前です。</param>
      <returns>通知イベントが有効な場合は <see langword="true" /> で、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String,System.Object,System.Object)">
      <summary>通知イベントが有効になったかどうかを確認します。</summary>
      <param name="name">書き込まれるイベントの名前です。</param>
      <param name="arg1">IsEnabled の追加のコンテキストを表すオブジェクトです。 コンシューマーは <see langword="null" /> を受け取ります。これは、プロデューサーが純粋な IsEnabled(string) を呼び出し、コンシューマーがそのようなイベントの通知をそもそも受け取りたいかを確認したことを示している場合があります。 これに基づいて、プロデューサーが非 <see langword="null" /> コンテキストを使用して再度 IsEnabled(string, object, object) を呼び出す場合があります。</param>
      <param name="arg2">任意。 IsEnabled の追加のコンテキストを表すオブジェクトです。 既定では <see langword="null" /> です。 コンシューマーは <see langword="null" /> を受け取ります。これは、プロデューサーが純粋な IsEnabled(string) を呼び出したか、プロデューサーが必要なすべてのコンテキストを <paramref name="arg1" /> で渡していることを示している場合があります。</param>
      <returns>通知イベントが有効な場合は <see langword="true" /> で、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Diagnostics.DiagnosticSource.OnActivityExport(System.Diagnostics.Activity,System.Object)">
      <summary>送信される HTTP 要求など、プロセスの外で発生するイベントまたは操作にアクティビティから状態を転送します。</summary>
      <param name="activity">外部イベントの影響を受けるアクティビティ。</param>
      <param name="payload">送信要求を表すオブジェクト。</param>
    </member>
    <member name="M:System.Diagnostics.DiagnosticSource.OnActivityImport(System.Diagnostics.Activity,System.Object)">
      <summary>プロセスの外で発生した、受信要求など、イベントまたは操作からアクティビティに状態を転送します。</summary>
      <param name="activity">外部イベントの影響を受けるアクティビティ。</param>
      <param name="payload">受信した要求を表すペイロード。</param>
    </member>
    <member name="M:System.Diagnostics.DiagnosticSource.StartActivity(System.Diagnostics.Activity,System.Object)">
      <summary>
        <see cref="T:System.Diagnostics.Activity" /> を開始し、開始イベントを書き込みます。</summary>
      <param name="activity">開始する <see cref="T:System.Diagnostics.Activity" /> です。</param>
      <param name="args">イベントのペイロードとして渡される値を表すオブジェクトです。</param>
      <returns>チェーンで役立つために開始されたアクティビティです。</returns>
    </member>
    <member name="M:System.Diagnostics.DiagnosticSource.StopActivity(System.Diagnostics.Activity,System.Object)">
      <summary>指定した <see cref="T:System.Diagnostics.Activity" /> を停止し、グローバルな <see cref="P:System.Diagnostics.Activity.Current" /> アクティビティを維持し、コンシューマーに <see cref="T:System.Diagnostics.Activity" /> が停止されたことを通知します。</summary>
      <param name="activity">停止するアクティビティです。</param>
      <param name="args">イベントのペイロードとして渡される値を表すオブジェクトです。</param>
    </member>
    <member name="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)">
      <summary>複雑なペイロードのログを記録する汎用的な方法です。</summary>
      <param name="name">書き込まれるイベントの名前です。</param>
      <param name="value">イベントのペイロードとして渡される値を表すオブジェクトです。 これは通常、いくつかのサブ値を含む匿名型です。</param>
    </member>
  </members>
</doc>
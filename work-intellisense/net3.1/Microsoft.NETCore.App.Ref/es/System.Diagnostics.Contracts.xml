<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.Contracts</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.Contracts.Contract">
      <summary vsli:raw="Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.">Contiene métodos estáticos para representar contratos del programa como condiciones previas, condiciones posteriores y objetos invariables.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set for the analyzer.">Comprueba una condición; si es <see langword="false" />, sigue la directiva de elevación establecida para el analizador.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expresión condicional que se va a probar.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set by the analyzer and displays the specified message.">Comprueba una condición; si es <see langword="false" />, sigue la directiva de elevación establecida por el analizador y muestra el mensaje especificado.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expresión condicional que se va a probar.</param>
      <param name="userMessage" vsli:raw="A message to display if the condition is not met.">Mensaje para mostrar si no se cumple la condición.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
      <summary vsli:raw="Instructs code analysis tools to assume that the specified condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;.">Indica a las herramientas de análisis de código que supongan que la condición especificada es <see langword="true" />, aun cuando no se pueda demostrar estáticamente que siempre sea <see langword="true" />.</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">Expresión condicional que se supone que es <see langword="true" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
      <summary vsli:raw="Instructs code analysis tools to assume that a condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;, and displays a message if the assumption fails.">Indica a las herramientas de análisis de código que supongan que una condición es <see langword="true" />, aun cuando no se puede demostrar estáticamente que siempre es <see langword="true" />, y muestra un mensaje si la hipótesis es errónea.</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">Expresión condicional que se supone que es <see langword="true" />.</param>
      <param name="userMessage" vsli:raw="The message to post if the assumption fails.">Mensaje que se muestra si se produce un error en la suposición.</param>
    </member>
    <member name="E:System.Diagnostics.Contracts.Contract.ContractFailed">
      <summary vsli:raw="Occurs when a contract fails.">Se produce cuando un contrato da error.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
      <summary vsli:raw="Marks the end of the contract section when a method's contracts contain only preconditions in the &lt;see langword=&quot;if&quot; /&gt;-&lt;see langword=&quot;then&quot; /&gt;-&lt;see langword=&quot;throw&quot; /&gt; form.">Marca el final de la sección de contrato cuando los contratos de un método solo contienen condiciones previas con el formato <see langword="if" />-<see langword="then" />-<see langword="throw" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property.">Especifica un contrato de condición posterior para el método o la propiedad envolvente.</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">Expresión condicional que se va a probar. La expresión puede incluir los valores <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" />, <see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" /> y <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract for a provided exit condition and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Especifica un contrato de condición posterior para una condición de salida proporcionada y un mensaje para mostrar si la condición es <see langword="false" />.</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">Expresión condicional que se va a probar. La expresión puede incluir los valores <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /> y <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" />.</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is not &lt;see langword=&quot;true&quot; /&gt;.">Mensaje para mostrar si la expresión no es <see langword="true" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.">Especifica un contrato de condición posterior para el método o la propiedad envolvente, a partir de la excepción y condición proporcionadas.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expresión condicional que se va a probar.</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">El tipo de excepción que invoca la comprobación de la condición posterior.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt; for the enclosing method or property, based on the provided exception and condition.">Especifica un contrato de condición posterior para el método o la propiedad envolvente, y un mensaje para mostrar si la condición es <see langword="false" />, a partir de la excepción y condición proporcionadas.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expresión condicional que se va a probar.</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is &lt;see langword=&quot;false&quot; /&gt;.">Mensaje para mostrar si la expresión es <see langword="false" />.</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">El tipo de excepción que invoca la comprobación de la condición posterior.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a specified test is true for any integer within a range of integers.">Determina si una prueba especificada es true para cualquier entero dentro de un intervalo de enteros.</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Primer entero que se pasa a <paramref name="predicate" />.</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Uno más que el último entero que se pasa a <paramref name="predicate" />.</param>
      <param name="predicate" vsli:raw="The function to evaluate for any value of the integer in the specified range.">Función que se evalúa para cualquier valor del entero en el intervalo especificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any integer starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">Es <see langword="true" /> si <paramref name="predicate" /> devuelve <see langword="true" /> para cualquier entero entre <paramref name="fromInclusive" /> y <paramref name="toExclusive" /> - 1.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" /> es menor que <paramref name="fromInclusive" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether an element within a collection of elements exists within a function.">Determina si un elemento de una colección de elementos existe dentro de una función.</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Colección de la que se extraen elementos de tipo <c>T</c> para pasar a <paramref name="predicate" />.</param>
      <param name="predicate" vsli:raw="The function to evaluate for an element in &lt;paramref name=&quot;collection&quot; /&gt;.">Función para evaluar un elemento en <paramref name="collection" />.</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">Tipo que está contenido en <paramref name="collection" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any element of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">Es <see langword="true" /> si y solo si <paramref name="predicate" /> devuelve <see langword="true" /> para cualquier elemento de tipo <paramref name="T" /> en <paramref name="collection" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a particular condition is valid for all integers in a specified range.">Determina si una condición determinada es válida para todos los enteros de un intervalo especificado.</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Primer entero que se pasa a <paramref name="predicate" />.</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Uno más que el último entero que se pasa a <paramref name="predicate" />.</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of the integers in the specified range.">Función que se evalúa para comprobar la existencia de enteros en el rango especificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all integers starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">Es <see langword="true" /> si <paramref name="predicate" /> devuelve <see langword="true" /> para todos los enteros entre <paramref name="fromInclusive" /> y <paramref name="toExclusive" /> - 1.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" /> es menor que <paramref name="fromInclusive" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether all the elements in a collection exist within a function.">Determina si todos los elementos de una colección existen dentro de una función.</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Colección de la que se extraen elementos de tipo <c>T</c> para pasar a <paramref name="predicate" />.</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of all the elements in &lt;paramref name=&quot;collection&quot; /&gt;.">Función que se evalúa para comprobar la existencia de todos los elementos en <paramref name="collection" />.</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">Tipo que está contenido en <paramref name="collection" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all elements of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">Es <see langword="true" /> si y solo si <paramref name="predicate" /> devuelve <see langword="true" /> para todos los elementos de tipo <paramref name="T" /> en <paramref name="collection" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property.">Especifica un contrato invariable para el método o propiedad envolvente.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expresión condicional que se va a probar.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.">Especifica un contrato invariable para el método o propiedad envolvente, y muestra un mensaje si la condición del contrato da error.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expresión condicional que se va a probar.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Mensaje que se va a mostrar si la condición es <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
      <summary vsli:raw="Represents values as they were at the start of a method or property.">Representa los valores como eran al principio de un método o propiedad.</summary>
      <param name="value" vsli:raw="The value to represent (field or parameter).">Valor que se va a representar (campo o parámetro).</param>
      <typeparam name="T" vsli:raw="The type of value.">Tipo del valor.</typeparam>
      <returns vsli:raw="The value of the parameter or field at the start of a method or property.">El valor del parámetro o del campo del inicio de un método o propiedad.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property.">Especifica un contrato de condición previa para el método o propiedad envolvente.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expresión condicional que se va a probar.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.">Especifica un contrato de condición previa para el método o propiedad envolvente, y muestra un mensaje si la condición del contrato da error.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expresión condicional que se va a probar.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Mensaje que se va a mostrar si la condición es <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.">Especifica un contrato de condición previa para el método o propiedad envolvente, y produce una excepción si no se cumple la condición del contrato.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expresión condicional que se va a probar.</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Excepción que se produce si la condición es <see langword="false" />.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.">Especifica un contrato de condición previa para el método o propiedad envolvente, y produce una excepción con el mensaje proporcionado si no se cumple la condición del contrato.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expresión condicional que se va a probar.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Mensaje que se va a mostrar si la condición es <see langword="false" />.</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Excepción que se produce si la condición es <see langword="false" />.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
      <summary vsli:raw="Represents the return value of a method or property.">Representa el valor devuelto de un método o propiedad.</summary>
      <typeparam name="T" vsli:raw="Type of return value of the enclosing method or property.">Tipo del valor devuelto del método o propiedad envolvente.</typeparam>
      <returns vsli:raw="Return value of the enclosing method or property.">Valor devuelto del método o propiedad envolvente.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
      <summary vsli:raw="Represents the final (output) value of an &lt;see langword=&quot;out&quot; /&gt; parameter when returning from a method.">Representa el valor final (resultado) de un parámetro <see langword="out" /> cuando devuelve de un método.</summary>
      <param name="value" vsli:raw="The &lt;see langword=&quot;out&quot; /&gt; parameter.">Parámetro <see langword="out" />.</param>
      <typeparam name="T" vsli:raw="The type of the &lt;see langword=&quot;out&quot; /&gt; parameter.">Tipo del parámetro <see langword="out" />.</typeparam>
      <returns vsli:raw="The output value of the &lt;see langword=&quot;out&quot; /&gt; parameter.">Valor de salida del parámetro <see langword="out" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
      <summary vsli:raw="Defines abbreviations that you can use in place of the full contract syntax.">Define las abreviaturas que puede usar en lugar de la sintaxis completa de contrato.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
      <summary vsli:raw="Enables the factoring of legacy &lt;see langword=&quot;if-then-throw&quot; /&gt; code into separate methods for reuse, and provides full control over thrown exceptions and arguments.">Habilita la factorización de código <see langword="if-then-throw" /> heredado en métodos independientes para su reutilización, y proporciona el control completo sobre los argumentos y excepciones producidas.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
      <summary vsli:raw="Specifies that a separate type contains the code contracts for this type.">Especifica que un tipo independiente contiene los contratos de código para este tipo.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute" />.</summary>
      <param name="typeContainingContracts" vsli:raw="The type that contains the code contracts for this type.">Tipo que contiene los contratos de código para este tipo.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
      <summary vsli:raw="Gets the type that contains the code contracts for this type.">Obtiene el tipo que contiene los contratos de código para este tipo.</summary>
      <returns vsli:raw="The type that contains the code contracts for this type.">Tipo que contiene los contratos de código para este tipo.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
      <summary vsli:raw="Specifies that a class is a contract for a type.">Especifica que una clase es un contrato para un tipo.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassForAttribute&quot; /&gt; class, specifying the type the current class is a contract for.">Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute" />, especificando el tipo para el cual la clase actual es un contrato.</summary>
      <param name="typeContractsAreFor" vsli:raw="The type the current class is a contract for.">Tipo para el cual la clase actual es un contrato.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
      <summary vsli:raw="Gets the type that this code contract applies to.">Obtiene el tipo al que se aplica este contrato de código.</summary>
      <returns vsli:raw="The type that this contract applies to.">Tipo al que se aplica este contrato.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailedEventArgs">
      <summary vsli:raw="Provides methods and data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Proporciona métodos y datos para el evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Proporciona datos para el evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the contract that failed.">Uno de los valores de enumeración que especifica el contrato que produjo el error.</param>
      <param name="message" vsli:raw="The message for the event.">El mensaje del evento.</param>
      <param name="condition" vsli:raw="The condition for the event.">Condición para el evento.</param>
      <param name="originalException" vsli:raw="The exception that caused the event.">Excepción que ha producido el evento.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition">
      <summary vsli:raw="Gets the condition for the failure of the contract.">Obtiene la condición para el error del contrato.</summary>
      <returns vsli:raw="The condition for the failure.">La condición para el error.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind">
      <summary vsli:raw="Gets the type of contract that failed.">Obtiene el tipo de contrato que produjo el error.</summary>
      <returns vsli:raw="One of the enumeration values that specifies the type of contract that failed.">Uno de los valores de enumeración que especifica el tipo de contrato que produjo el error.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event has been handled.">Indica si el evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> se ha controlado.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si se ha controlado el evento; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message">
      <summary vsli:raw="Gets the message that describes the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Obtiene el mensaje que describe el evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <returns vsli:raw="The message that describes the event.">El mensaje que describe el evento.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException">
      <summary vsli:raw="Gets the original exception that caused the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Obtiene la excepción original que produjo el evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <returns vsli:raw="The exception that caused the event.">Excepción que ha producido el evento.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">Establece la propiedad <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled" /> como <see langword="true" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">Establece la propiedad <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind" /> como <see langword="true" />.</summary>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind">
      <summary vsli:raw="Indicates whether the code contract escalation policy should be applied.">Indica si se debe aplicar la directiva de elevación de contrato de código.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to apply the escalation policy; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para aplicar la directiva de elevación; de lo contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
      <summary vsli:raw="Specifies the type of contract that failed.">Especifica el tipo de contrato en el que se produjo un error.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assert&quot; /&gt; contract failed.">Se produjo un error en un contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert" />.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assume&quot; /&gt; contract failed.">Se produjo un error en un contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume" />.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Invariant&quot; /&gt; contract failed.">Se produjo un error en un contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant" />.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Ensures&quot; /&gt; contract failed.">Se produjo un error en un contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures" />.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow&quot; /&gt; contract failed.">Se produjo un error en un contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow" />.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
      <summary vsli:raw="A &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Requires&quot; /&gt; contract failed.">Se produjo un error en un contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
      <summary vsli:raw="Marks a method as being the invariant method for a class.">Marca un método como método invariable de una clase.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
      <summary vsli:raw="Enables you to set contract and tool options at assembly, type, or method granularity.">Permite establecer opciones de contrato y herramienta en el ensamblado, tipo o granularidad del método.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and enable/disable value.">Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> usando la categoría, configuración y valor para habilitar/deshabilitar especificados.</summary>
      <param name="category" vsli:raw="The category for the option to be set.">La categoría para establecer la opción.</param>
      <param name="setting" vsli:raw="The option setting.">El valor de la opción.</param>
      <param name="enabled" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enable the option; &lt;see langword=&quot;false&quot; /&gt; to disable the option.">
        <see langword="true" /> para habilitar la opción; <see langword="false" /> para deshabilitar la opción.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and value.">Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> usando la categoría, configuración y valor especificados.</summary>
      <param name="category" vsli:raw="The category of the option to be set.">La categoría de la opción que se va a establecer.</param>
      <param name="setting" vsli:raw="The option setting.">El valor de la opción.</param>
      <param name="value" vsli:raw="The value for the setting.">Valor para la configuración.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Category">
      <summary vsli:raw="Gets the category of the option.">Obtiene la categoría de la opción.</summary>
      <returns vsli:raw="The category of the option.">La categoría de la opción.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Enabled">
      <summary vsli:raw="Determines if an option is enabled.">Determina si se habilita una opción.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the option is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la opción está habilitada; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Setting">
      <summary vsli:raw="Gets the setting for the option.">Obtiene el valor de la opción.</summary>
      <returns vsli:raw="The setting for the option.">El valor de la opción.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Value">
      <summary vsli:raw="Gets the value for the option.">Obtiene el valor de la opción.</summary>
      <returns vsli:raw="The value for the option.">Valor de la opción.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
      <summary vsli:raw="Specifies that a field can be used in method contracts when the field has less visibility than the method.">Especifica que se puede usar un campo en contratos de método cuando el campo tiene menos visibilidad que el método.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute" />.</summary>
      <param name="name" vsli:raw="The property name to apply to the field.">El nombre de la propiedad que se va a aplicar al campo.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the property name to be applied to the field.">Obtiene el nombre de la propiedad que se va a aplicar al campo.</summary>
      <returns vsli:raw="The property name to be applied to the field.">Nombre de la propiedad que se aplica al campo.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
      <summary vsli:raw="Specifies that an assembly is a reference assembly that contains contracts.">Especifica que un ensamblado es un ensamblado de referencia que contiene contratos.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
      <summary vsli:raw="Identifies a member that has no run-time behavior.">Identifica un miembro que no tenga ningún comportamiento en tiempo de ejecución.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
      <summary vsli:raw="Instructs analysis tools to assume the correctness of an assembly, type, or member without performing static verification.">Indica a las herramientas de análisis que asuman la exactitud de un ensamblado, un tipo o un miembro sin realizar la comprobación estática.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractVerificationAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute" />.</summary>
      <param name="value" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to require verification; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para requerir la comprobación; de lo contrario, <see langword="false" />.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
      <summary vsli:raw="Gets the value that indicates whether to verify the contract of the target.">Obtiene el valor que indica si se va a comprobar el contrato del destino.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if verification is required; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la comprobación es necesaria; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
      <summary vsli:raw="Indicates that a type or method is pure, that is, it does not make any visible state changes.">Indica que un tipo o un método son puros, es decir, no provocan cambios visibles en el estado.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.PureAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.Contracts.PureAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ContractHelper">
      <summary vsli:raw="Provides methods that the binary rewriter uses to handle contract failures.">Proporciona métodos que usa el sistema de reescritura binario para administrar errores de contrato.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Used by the binary rewriter to activate the default failure behavior.">Es empleado por el sistema de reescritura binario para activar el comportamiento de error predeterminado.</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the type of failure.">Uno de los valores de enumeración que especifica el nivel de error.</param>
      <param name="userMessage" vsli:raw="Additional user information.">Información de usuario adicional.</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">Descripción de la condición que provocó el error.</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">Excepción interna que provocó la excepción actual.</param>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) if the event was handled and should not trigger a failure; otherwise, returns the localized failure message.">Referencia null (<see langword="Nothing" /> en Visual Basic) si el evento se controló y no debería desencadenar un error; de lo contrario, devuelve el mensaje de error localizado.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;failureKind&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractFailureKind&quot; /&gt; value.">
        <paramref name="failureKind" /> no es un valor <see cref="T:System.Diagnostics.Contracts.ContractFailureKind" /> válido.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
      <summary vsli:raw="Triggers the default failure behavior.">Desencadena el comportamiento de error predeterminado.</summary>
      <param name="kind" vsli:raw="One of the enumeration values that specifies the type of failure.">Uno de los valores de enumeración que especifica el nivel de error.</param>
      <param name="displayMessage" vsli:raw="The message to display.">Mensaje que se va a mostrar.</param>
      <param name="userMessage" vsli:raw="Additional user information.">Información de usuario adicional.</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">Descripción de la condición que provocó el error.</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">Excepción interna que provocó la excepción actual.</param>
    </member>
  </members>
</doc>
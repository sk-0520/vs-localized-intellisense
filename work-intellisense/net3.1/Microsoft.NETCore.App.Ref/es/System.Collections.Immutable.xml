<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable collection of key/value pairs.  &#xA;&#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa una colección inmutable de pares de clave y valor.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Tipo de claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Tipo de valores del diccionario.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the dictionary.">Agrega un elemento con la clave y el valor especificados al diccionario.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clave del elemento que se va a agregar.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valor del elemento que se va a agregar.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">Nuevo diccionario inmutable que contiene el par de clave-valor adicional.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">La clave especificada ya existe en el diccionario, pero tiene un valor diferente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the dictionary.">Agrega los pares clave-valor especificados al diccionario.</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">Pares clave-valor que se va a agregar.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Nuevo diccionario inmutable que contiene los pares clave-valor adicionales.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Una de las claves especificadas ya existe en el diccionario, pero tiene un valor diferente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Recupera un diccionario vacío que tiene el mismo orden y reglas de comparación de clave-valor que esta instancia del diccionario.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Diccionario vacío con orden y reglas de comparación de clave y valor equivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains the specified key/value pair.">Determina si el diccionario inmutable contiene el par de clave-valor especificado.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">Par clave-valor que se va a localizar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el par clave-valor especificado se encuentra en el diccionario; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Quita el elemento con la clave especificada del diccionario inmutable.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clave del elemento que se va a quitar.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">Un nuevo diccionario inmutable con el elemento especificado eliminado; o bien esta instancia si no se encuentra la clave especificada en el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">Quita los elementos con la clave especificada del diccionario inmutable.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">Claves de los elementos que se van a quitar.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Nuevo diccionario inmutable con las claves especificadas eliminados; o bien esta instancia si no se encuentran en el diccionario las claves especificadas.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">Establece la clave y valor especificados en el diccionario inmutable, posiblemente sobrescribiendo un valor existente de la clave.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Clave de la entrada que se va a agregar.</param>
      <param name="value" vsli:raw="The key value to set.">Valor de clave que se va a establecer.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">Nuevo diccionario inmutable que contiene el par de clave-valor especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">Establece los pares de clave-valor especificados en el diccionario inmutable, posiblemente sobrescribiendo valores existentes de las claves.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Pares de clave-valor que se van a establecer en el diccionario. Si ya existe alguna de las claves en el diccionario, este método sobrescribirá los valores anteriores.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">Nuevo diccionario inmutable que contiene pares de clave-valor especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Determina si el diccionario contiene una clave específica.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Clave que se va a buscar.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Clave correspondiente ubicada en el diccionario si se encuentra, o <c>equalkey</c> si no se encuentra ninguna coincidencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se encuentra una coincidencia para <paramref name="equalKey" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary vsli:raw="Represents a list of elements that cannot be modified.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa una lista de elementos que no se puede modificar.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y el procedimiento de instalación)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">Tipo de elementos en la lista.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary vsli:raw="Makes a copy of the list, and adds the specified object to the end of the copied list.">Realiza una copia de la lista y agrega el objeto especificado al final de la lista copiada.</summary>
      <param name="value" vsli:raw="The object to add to the list.">Objeto que se va a agregar a la lista.</param>
      <returns vsli:raw="A new list with the object added.">Una nueva lista con el objeto agregado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Makes a copy of the list and adds the specified objects to the end of the copied list.">Realiza una copia de la lista y agrega los objetos especificados al final de la lista copiada.</summary>
      <param name="items" vsli:raw="The objects to add to the list.">Objetos que se va a agregar a la lista.</param>
      <returns vsli:raw="A new list with the elements added.">Una nueba lista con los elementos agregados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary vsli:raw="Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.">Crea una lista con todos los elementos eliminados, pero con la misma ordenación y semántica del orden que esta lista.</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">Lista vacía que tiene la misma ordenación y semántica de orden que esta instancia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que comienza en el índice especificado y contiene el número especificado de elementos.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;. This value can be null for reference types.">Objeto que se va a buscar en <see cref="T:System.Collections.Immutable.IImmutableList`1" />. Este valor puede ser null para los tipos de referencia.</param>
      <param name="index" vsli:raw="The zero-based starting indexes of the search. 0 (zero) is valid in an empty list.">Índices iniciales de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;item&quot; /&gt;.">Comparador de igualdad que se va a usar para localizar <paramref name="item" />.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements if found; otherwise -1.">Índice de base cero de la primera aparición de <paramref name="item" /> dentro del intervalo de elementos de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que comienza en <paramref name="index" /> y contiene el número de elementos de <paramref name="count" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">Inserta el elemento especificado en el índice especificado en la lista inmutable.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the value.">Índice de base cero donde se inserta el valor.</param>
      <param name="element" vsli:raw="The object to insert.">Objeto que se va a insertar.</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">Nueva lista inmutable que incluye el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">Inserta los elementos especificados en el índice especificado en la lista inmutable.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">Índice de base cero donde se deben insertar los nuevos elementos.</param>
      <param name="items" vsli:raw="The elements to insert.">Elementos que van a insertarse.</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">Nueva lista inmutable que incluye los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que contiene el número de elementos especificado y termina en el índice determinado.</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en la lista. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to match &lt;paramref name=&quot;item&quot; /&gt;.">Comparador de igualdad para hallar la coincidencia con <paramref name="item" />.</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Devuelva <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of a specified object from this immutable list.">Quita la primera repetición de un objeto especificado de esta lista inmutable.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">Objeto que se va a quitar de la lista.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;value&quot; /&gt;.">Comparador de igualdad que se va a usar para localizar <paramref name="value" />.</param>
      <returns vsli:raw="A new list with the specified object removed.">Nueva lista con el objeto especificado eliminado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Quita todos los elementos que cumplen las condiciones definidas por el predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Delegado que define las condiciones de los elementos que se van a quitar.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Nueva lista inmutable con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">Quita el elemento del índice especificado de la lista inmutable.</summary>
      <param name="index" vsli:raw="The index of the element to remove.">Índice del elemento que se va a quitar.</param>
      <returns vsli:raw="A new list with the element removed.">Lista nueva con el elemento eliminado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified object from the list.">Quita el objeto especificado de la lista.</summary>
      <param name="items" vsli:raw="The objects to remove from the list.">Objetos que se van a quitar de la lista.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to determine if &lt;paramref name=&quot;items&quot; /&gt; match any objects in the list.">Comparador de igualdad que se utiliza para determinar si <paramref name="items" /> coinciden con los objetos de la lista.</param>
      <returns vsli:raw="A new immutable list with the specified objects removed, if &lt;paramref name=&quot;items&quot; /&gt; matched objects in the list.">Nueva lista inmutable con los objetos especificados eliminada, si <paramref name="items" /> halló objetos coincidentes en la lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements from the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;.">Quita todos los elementos de <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range of elements to remove.">Índice inicial de base cero del intervalo de elementos que se va a quitar.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Número de elementos que se va a quitar.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Nueva lista inmutable con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns a new list with the first matching element in the list replaced with the specified element.">Devuelve una nueva lista con el primer elemento coincidente de la lista sustituido por el elemento especificado.</summary>
      <param name="oldValue" vsli:raw="The element to be replaced.">Elemento a sustituir.</param>
      <param name="newValue" vsli:raw="The element to replace the first occurrence of &lt;paramref name=&quot;oldValue&quot; /&gt; with.">Elemento que se usará para sustituir la primera aparición de <paramref name="oldValue" /></param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use for matching &lt;paramref name=&quot;oldValue&quot; /&gt;.">Comparador de igualdad que se va a usar para hallar la coincidencia con <paramref name="oldValue" />.</param>
      <returns vsli:raw="A new list that contains &lt;paramref name=&quot;newValue&quot; /&gt;, even if &lt;paramref name=&quot;oldvalue&quot; /&gt; is the same as &lt;paramref name=&quot;newValue&quot; /&gt;.">Lista nueva que contiene <paramref name="newValue" />, incluso si <paramref name="oldvalue" /> coincide con <paramref name="newValue" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">
        <paramref name="oldValue" /> no existe en la lista.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">Reemplaza un elemento de la lista en una posición determinada por el elemento especificado.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">Posición en la lista del elemento que se va a reemplazar.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">Elemento por el que se va a reemplazar el elemento antiguo.</param>
      <returns vsli:raw="A new list that contains the new element, even if the element at the specified location is the same as the new element.">Nueva lista que contiene el elemento nuevo, incluso si el elemento situado en la ubicación especificada es igual que el nuevo elemento.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary vsli:raw="Represents an immutable first-in, first-out collection of objects.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa una colección de objetos de tipo primero en entrar, primero en salir inmutable.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">Tipo de elementos en la cola.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary vsli:raw="Returns a new queue with all the elements removed.">Devuelve una nueva cola con todos los elementos eliminados.</summary>
      <returns vsli:raw="An empty immutable queue.">Cola inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the first element in the immutable queue, and returns the new queue.">Quita el primer elemento situado en la cola inmutable y devuelve la nueva cola.</summary>
      <returns vsli:raw="The new immutable queue with the first element removed. This value is never &lt;see langword=&quot;null&quot; /&gt;.">Nueva cola inmutable con el primer elemento eliminado. Este valor nunca es <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La cola está vacía.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Agrega un elemento situado al final de la cola inmutable y devuelve la nueva cola.</summary>
      <param name="value" vsli:raw="The element to add.">Elemento que se va a agregar.</param>
      <returns vsli:raw="The new immutable queue with the specified element added.">Nueva cola inmutable con el elemento especificado agregado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.">Obtiene un valor que indica si esta cola inmutable está vacía.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la cola está vacía; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">Devuelve el elemento situado al principio de la cola inmutable sin eliminarlo.</summary>
      <returns vsli:raw="The element at the beginning of the queue.">Elemento situado al principio de la cola.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La cola está vacía.</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary vsli:raw="Represents a set of elements that can only be modified by creating a new instance of the set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa un conjunto de elementos que solo pueden modificarse mediante la creación de una nueva instancia del conjunto.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" vsli:raw="The type of element stored in the set.">Tipo de elemento almacenado en el conjunto.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Agrega el elemento especificado a este conjunto inmutable.</summary>
      <param name="value" vsli:raw="The element to add.">Elemento que se va a agregar.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Nuevo conjunto con el elemento agregado o este conjunto si el elemento ya está en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">Recupera un conjunto inmutable vacío que tiene la misma ordenación y semántica de orden que esta instancia.</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">Conjunto vacío que tiene la misma ordenación y semántica de orden que esta instancia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable set contains a specified element.">Determina si este conjunto inmutable contiene un elemento especificado.</summary>
      <param name="value" vsli:raw="The element to locate in the set.">Elemento que se debe buscar en el conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el conjunto contiene el valor especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">Quita del conjunto inmutable actual los elementos de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">Colección de elementos que se van a quitar de este conjunto.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Nuevo conjunto con los elementos que se han quitado; o el conjunto original si no se encontraba ninguno de los elementos en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that exist in this set and the specified set.">Crea un conjunto inmutable que contiene solo elementos que existen en este conjunto y en el conjunto especificado.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableSet`1&quot; /&gt;.">Colección que se va a comparar con el <see cref="T:System.Collections.Immutable.IImmutableSet`1" /> actual.</param>
      <returns vsli:raw="A new immutable set that contains elements that exist in both sets.">Nuevo conjunto inmutable que contiene elementos que existen en ambos conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) subset of the specified collection.">Determina si el conjunto inmutable actual es un subconjunto apropiado (estricto) de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un subconjunto apropiado de la colección especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) superset of the specified collection.">Determina si el conjunto inmutable actual es un supraconjunto apropiado (estricto) de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un supraconjunto apropiado de la colección especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a subset of a specified collection.">Determina si el conjunto inmutable actual es un subconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un subconjunto de la colección especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a superset of a specified collection.">Determina si el conjunto inmutable actual es un supraconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un supraconjunto de la colección especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set overlaps with the specified collection.">Determina si el conjunto inmutable actual se superpone a la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual y la colección especificada comparten al menos un elemento común; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Elimina el elemento especificado de este conjunto inmutable.</summary>
      <param name="value" vsli:raw="The element to remove.">Elemento que se va a quitar.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Nuevo conjunto con el elemento especificado eliminado o el conjunto actual si no se encuentra el elemento en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set and the specified collection contain the same elements.">Determina si el conjunto inmutable actual y la colección especificada contienen los mismos elementos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si los conjuntos son iguales; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Crea un conjunto inmutable que únicamente contiene elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Conjunto nuevo que únicamente contiene elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Determines whether the set contains a specified value.">Determina si el conjunto contiene un valor específico.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">Valor que se va a buscar.</param>
      <param name="actualValue" vsli:raw="The matching value from the set, if found, or &lt;c&gt;equalvalue&lt;/c&gt; if there are no matches.">Valor coincidente del conjunto, si se encuentra, o <c>equalvalue</c> si no hay ninguna coincidencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching value was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se encuentra un valor coincidente; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Crea un conjunto inmutable que contiene todos los elementos que están presentes en el conjunto actual o en la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Colección de la que se van a agregar elementos.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Nuevo conjunto inmutable con los elementos agregados; o conjunto original si ya estaban todos los elementos en el conjunto.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary vsli:raw="Represents an immutable last-in-first-out (LIFO) collection.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa una colección de objetos LIFO (último en entrar, primero en salir).
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the stack.">Tipo de elementos de la pila.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">Elimina todos los objetos de la pila inmutable.</summary>
      <returns vsli:raw="An empty immutable stack.">Pila inmutable vacía.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable stack is empty.">Obtiene un valor que indica si esta pila inmutable está vacía.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this stack is empty; otherwise,&lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si esta pila está vacía; de lo contrario, será <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary vsli:raw="Returns the element at the top of the immutable stack without removing it.">Devuelve el elemento situado al principio de la pila inmutable sin eliminarlo.</summary>
      <returns vsli:raw="The element at the top of the stack.">Elemento situado al principio de la pila.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">La pila está vacía.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">Elimina el elemento de la parte superior de la pila inmutable y devuelve la nueva pila.</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">Nueva pila; nunca <see langword="null" /></returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">La pila está vacía.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">Inserta un elemento en la parte superior de la pila inmutable y devuelve la nueva pila.</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">Elemento a insertar en la pila.</param>
      <returns vsli:raw="The new stack.">Pila nueva.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary vsli:raw="Provides methods for creating an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Proporciona métodos para crear una matriz que es inmutable, lo que significa que no se puede cambiar una vez que se crea.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary vsli:raw="Searches the sorted immutable array for a specified element using the default comparer and returns the zero-based index of the element, if it's found.">Busca un elemento especificado en la matriz inmutable ordenada mediante el comparador predeterminado y devuelve el índice de base cero del elemento, si lo encuentra.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Matriz ordenada que se va a buscar.</param>
      <param name="value" vsli:raw="The object to search for.">Objeto que se va a buscar.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Tipo de elemento almacenado en la matriz.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Índice de base cero del elemento de la matriz, si se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="value" /> o, si no hay ningún elemento mayor, el complemento bit a bit de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> no implementa <see cref="T:System.IComparable" /> o la búsqueda detecta un elemento que no implementa <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">Busca un elemento especificado en una matriz inmutable ordenada y devuelve el índice de base cero del elemento, si lo encuentra.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Matriz ordenada que se va a buscar.</param>
      <param name="value" vsli:raw="The object to search for.">Objeto que se va a buscar.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or null to use the default comparer.">Implementación del comparador que se va a utilizar al comparar elementos, o null para utilizar el comparador predeterminado.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Tipo de elemento almacenado en la matriz.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Índice de base cero del elemento de la matriz, si se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="value" /> o, si no hay ningún elemento mayor, el complemento bit a bit de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> es null y <paramref name="value" /> no implementa <see cref="T:System.IComparable" /> o la búsqueda detecta un elemento que no implementa <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">Busca un elemento especificado en una matriz inmutable ordenada y devuelve el índice de base cero del elemento, si lo encuentra.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Matriz ordenada que se va a buscar.</param>
      <param name="index" vsli:raw="The starting index of the range to search.">Índice inicial del intervalo en el que se va a buscar.</param>
      <param name="length" vsli:raw="The length of the range to search.">Longitud del intervalo en el que se va a buscar.</param>
      <param name="value" vsli:raw="The object to search for.">Objeto que se va a buscar.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Tipo de elemento almacenado en la matriz.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Índice de base cero del elemento de la matriz, si se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="value" /> o, si no hay ningún elemento mayor, el complemento bit a bit de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> no implementa <see cref="T:System.IComparable" /> o la búsqueda detecta un elemento que no implementa <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido en <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="array" />.
o bien
<paramref name="length" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element.">Busca una matriz inmutable ordenada para un elemento especificado y devuelve el índice basado en cero del elemento.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Matriz ordenada que se va a buscar.</param>
      <param name="index" vsli:raw="The starting index of the range to search.">Índice inicial del intervalo en el que se va a buscar.</param>
      <param name="length" vsli:raw="The length of the range to search.">Longitud del intervalo en el que se va a buscar.</param>
      <param name="value" vsli:raw="The object to search for.">Objeto que se va a buscar.</param>
      <param name="comparer" vsli:raw="The comparer to use when comparing elements for equality or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Comparador que se va a usar al comparar elementos para la igualdad, o <see langword="null" /> para usar el comparador predeterminado.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Tipo de elemento almacenado en la matriz.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Índice de base cero del elemento de la matriz, si se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="value" /> o, si no hay ningún elemento mayor, el complemento bit a bit de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> es null y <paramref name="value" /> no implementa <see cref="T:System.IComparable" /> o la búsqueda detecta un elemento que no implementa <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not compatible with the elements of &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido en <paramref name="array" />.
o bien
<paramref name="comparer" /> es <see langword="null" /> y <paramref name="value" /> es de un tipo que no es compatible con los elementos de <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="array" />.
o bien
<paramref name="length" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary vsli:raw="Creates an empty immutable array.">Crea una matriz inmutable vacía.</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Tipo de  elementos almacenados en la matriz.</typeparam>
      <returns vsli:raw="An empty immutable array.">Matriz inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified object.">Crea una matriz inmutable que contiene el objeto especificado.</summary>
      <param name="item" vsli:raw="The object to store in the array.">Objeto para almacenar en la matriz.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Tipo de  elementos almacenados en la matriz.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified object.">Matriz inmutable que contiene el objeto especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Crea una matriz inmutable que contiene los objetos especificados.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">Primer objeto para almacenar en la matriz.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">Segundo objeto para almacenar en la matriz.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Tipo de  elementos almacenados en la matriz.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Matriz inmutable que contiene los objetos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Crea una matriz inmutable que contiene los objetos especificados.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">Primer objeto para almacenar en la matriz.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">Segundo objeto para almacenar en la matriz.</param>
      <param name="item3" vsli:raw="The third object to store in the array.">Tercer objeto a almacenar en la matriz.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Tipo de  elementos almacenados en la matriz.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Matriz inmutable que contiene los objetos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Crea una matriz inmutable que contiene los objetos especificados.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">Primer objeto para almacenar en la matriz.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">Segundo objeto para almacenar en la matriz.</param>
      <param name="item3" vsli:raw="The third object to store in the array.">Tercer objeto a almacenar en la matriz.</param>
      <param name="item4" vsli:raw="The fourth object to store in the array.">Cuarto objeto a almacenar en la matriz.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Tipo de  elementos almacenados en la matriz.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Matriz inmutable que contiene los objetos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary vsli:raw="Creates an immutable array from the specified array of objects.">Crea una matriz inmutable de la matriz especificada de objetos.</summary>
      <param name="items" vsli:raw="The array of objects to populate the array with.">Matriz de objetos con la que se va a rellenar la matriz.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Tipo de  elementos almacenados en la matriz.</typeparam>
      <returns vsli:raw="An immutable array that contains the array of items.">Matriz inmutable que contiene la matriz de elementos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with specified objects from another array.">Crea una matriz inmutable con los objetos especificados de otra matriz.</summary>
      <param name="items" vsli:raw="The source array of objects.">Matriz de origen de objetos.</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">Índice del primer elemento desde el que efectuar la copia <paramref name="items" />.</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">Número de elementos de <paramref name="items" /> para incluir en esta matriz inmutable.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Tipo de  elementos almacenados en la matriz.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">Matriz inmutable que contiene los objetos especificados de la matriz de origen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with the specified objects from another immutable array.">Crea una matriz inmutable con los objetos especificados de otra matriz inmutable.</summary>
      <param name="items" vsli:raw="The source array of objects.">Matriz de origen de objetos.</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">Índice del primer elemento desde el que efectuar la copia <paramref name="items" />.</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">Número de elementos de <paramref name="items" /> para incluir en esta matriz inmutable.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Tipo de  elementos almacenados en la matriz.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">Matriz inmutable que contiene los objetos especificados de la matriz de origen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">Crea una matriz mutable que puede convertirse en un <see cref="T:System.Collections.Immutable.ImmutableArray" /> sin asignar nueva memoria.</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">Tipo de elementos almacenados en el generador.</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">Matriz de mutable del tipo especificado que se puede convertir eficazmente en una matriz inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">Crea una matriz mutable que puede convertirse en un <see cref="T:System.Collections.Immutable.ImmutableArray" /> sin asignar nueva memoria.</summary>
      <param name="initialCapacity" vsli:raw="The initial capacity of the builder.">Capacidad inicial del generador.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">Tipo de elementos almacenados en el generador.</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">Matriz de mutable del tipo especificado que se puede convertir eficazmente en una matriz inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; populated with the specified items.">Crea un nuevo <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> rellenado con los elementos especificados.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Elementos que se van a agregar la matriz.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Tipo de elemento almacenado en la matriz.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified items.">Matriz inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Inicializa una nueva instancia del struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Matriz de origen con la que se va a inicializar la matriz resultante.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">Función que se va a aplicar a cada elemento de la matriz de origen.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Inicializa una nueva instancia del struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Matriz de origen con la que se va a inicializar la matriz resultante.</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">Índice del primer elemento de la matriz de origen que se va a incluir en la matriz resultante.</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">Número de elementos de la matriz de origen a incluir en la matriz resultante.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">Función que se va a aplicar a cada elemento de la matriz de origen incluido en la matriz resultante.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Inicializa una nueva instancia del struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Matriz de origen con la que se va a inicializar la matriz resultante.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">Función que se va a aplicar a cada elemento de la matriz de origen.</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">Argumento que se va a pasar a la función de asignación de selector.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to pass to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Inicializa una nueva instancia del struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Matriz de origen con la que se va a inicializar la matriz resultante.</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">Índice del primer elemento de la matriz de origen que se va a incluir en la matriz resultante.</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">Número de elementos de la matriz de origen a incluir en la matriz resultante.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">Función que se va a aplicar a cada elemento de la matriz de origen incluido en la matriz resultante.</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">Argumento que se va a pasar a la función de asignación de selector.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to be passed to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to be stored in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates an immutable array from the specified collection.">Crea una matriz inmutable a partir de la colección especificada.</summary>
      <param name="items" vsli:raw="The collection of objects to copy to the immutable array.">Colección de objetos que se copiarán en la matriz inmutable.</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in &lt;paramref name=&quot;items&quot; /&gt;.">Tipo de elementos contenidos en <paramref name="items" />.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified collection of objects.">Matriz inmutable que contiene la colección especificada de objetos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Creates an immutable array from the current contents of the builder's array.">Crea una matriz inmutable a partir del contenido de la matriz del generador.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable array from.">Generador desde el que se va a crear la matriz inmutable.</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in the immutable array.">Tipo de elementos contenidos en la matriz inmutable.</typeparam>
      <returns vsli:raw="An immutable array that contains the current contents of the builder's array.">Matriz inmutable que incluye el contenido actual de la matriz del generador.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary vsli:raw="Represents an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa una matriz que es inmutable, lo que significa que no se puede cambiar una vez que se crea.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y el procedimiento de instalación)</summary>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Tipo de elemento almacenado por la matriz.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">Devuelve una copia de la matriz original con el elemento especificado que se agrega al final.</summary>
      <param name="item" vsli:raw="The item to be added to the end of the array.">Elemento que se va a agregar al final de la matriz.</param>
      <returns vsli:raw="A new array with the specified item added to the end.">Nueva matriz con el elemento especificado agregado al final.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Devuelve una copia de la matriz original con los elementos especificados agregados al final de la matriz.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Elementos que se van a agregar la matriz.</param>
      <returns vsli:raw="A new array with the elements added.">Nueva matriz con los elementos agregados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Devuelve una copia de la matriz original con los elementos especificados agregados al final de la matriz.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Elementos que se van a agregar la matriz.</param>
      <returns vsli:raw="A new array with the elements added.">Nueva matriz con los elementos agregados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary vsli:raw="Returns a new immutable array that contains the elements of this array cast to a different type.">Devuelve una nueva matriz inmutable que contiene los elementos de esta matriz convertidos en un tipo diferente.</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return.">Tipo de elemento de matriz para devolver.</typeparam>
      <returns vsli:raw="An immutable array that contains the elements of this array, cast to a different type. If the cast fails, returns an array whose &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Matriz inmutable que contiene los elementos de esta matriz convertidos en un tipo diferente. Si la conversión falla, devuelve una matriz cuya propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary vsli:raw="Creates a new read-only memory region over this immutable array.">Crea una nueva región de memoria de solo lectura en esta matriz inmutable.</summary>
      <returns vsli:raw="The read-only memory representation of this immutable array.">Representación de memoria de solo lectura de esta matriz inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary vsli:raw="Creates a new read-only span over this immutable array.">Crea un nuevo intervalo de solo lectura en esta matriz inmutable.</summary>
      <returns vsli:raw="The read-only span representation of this immutable array.">Intervalo de solo lectura de esta matriz inmutable.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary vsli:raw="A writable array accessor that can be converted into an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; instance without allocating extra memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Descriptor de acceso de escritura de matriz que se puede convertir en una instancia <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> sin asignar memoria adicional.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y el procedimiento de instalación)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the array.">Agrega el elemento especificado a la matriz.</summary>
      <param name="item" vsli:raw="The object to add to the array.">Objeto que se agrega a la matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary vsli:raw="Adds the specified items to the end of the array.">Agrega los elementos especificados al final de la matriz.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Elementos que van a agregarse a la matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Agrega los elementos especificados al final de la matriz.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Elementos que van a agregarse a la matriz.</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">Número de elementos de la matriz de origen para agregar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">Agrega los elementos especificados al final de la matriz.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Elementos que van a agregarse a la matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">Agrega los elementos especificados al final de la matriz.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Elementos que van a agregarse a la matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Agrega los elementos especificados al final de la matriz.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Elementos que van a agregarse a la matriz.</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">Número de elementos de la matriz de origen para agregar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Agrega los elementos especificados al final de la matriz.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Elementos que van a agregarse a la matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Agrega los elementos especificados que se derivan del tipo que se encuentra actualmente en la matriz, al final de la matriz.</summary>
      <param name="items" vsli:raw="The items to add to end of the array.">Elementos que van a agregarse al final de la matriz.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">Tipo que se deriva el tipo de elemento ya está en la matriz.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Agrega los elementos especificados que se derivan del tipo que se encuentra actualmente en la matriz, al final de la matriz.</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">Elementos que se van a agregar al final de la matriz.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">Tipo que se deriva el tipo de elemento ya está en la matriz.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Agrega los elementos especificados que se derivan del tipo que se encuentra actualmente en la matriz, al final de la matriz.</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">Elementos que se van a agregar al final de la matriz.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">Tipo que se deriva el tipo de elemento ya está en la matriz.</typeparam>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary vsli:raw="Gets or sets the length of the internal array. When set, the internal array is reallocated to the given capacity if it is not already the specified length.">Obtiene o establece la longitud de la matriz interna. Cuando se establece, la matriz interna se vuelve a asignar a la capacidad determinada si aún no tiene la longitud especificada.</summary>
      <returns vsli:raw="The length of the internal array.">Longitud de la matriz interna.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the array.">Quita todos los elementos de la matriz.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the array contains a specific value.">Determina si la matriz contiene un valor específico.</summary>
      <param name="item" vsli:raw="The object to locate in the array.">Objeto que se va a buscar en la matriz.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se encuentra el objeto; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the current contents to the specified array.">Copia el contenido actual en la matriz especificada.</summary>
      <param name="array" vsli:raw="The array to copy to.">Matriz en la que se va a copiar.</param>
      <param name="index" vsli:raw="The index to start the copy operation.">Índice en el que iniciar la operación de copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary vsli:raw="Gets or sets the number of items in the array.">Obtiene o establece el número de elementos de la matriz.</summary>
      <returns vsli:raw="The number of items in the array.">Número de elementos de la matriz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary vsli:raw="Gets an object that can be used to iterate through the collection.">Obtiene un objeto que puede usarse para recorrer en iteración la colección.</summary>
      <returns vsli:raw="An object that can be used to iterate through the collection.">Objeto que puede usarse para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Determines the index of a specific item in the array.">Determina el índice de un elemento específico de la matriz.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Elemento que va a buscarse en la matriz.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Índice de <paramref name="item" />, si se encuentra en la lista; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">Determina el índice del elemento especificado.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Elemento que va a buscarse en la matriz.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Posición inicial de la búsqueda.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Índice de <paramref name="item" />, si se encuentra en la lista; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">Determina el índice del elemento especificado.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Elemento que va a buscarse en la matriz.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Posición inicial de la búsqueda.</param>
      <param name="count" vsli:raw="The number of elements to search.">Número de elementos que se van a buscar.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Índice de <paramref name="item" />, si se encuentra en la lista; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the index for the specified item.">Determina el índice del elemento especificado.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Elemento que va a buscarse en la matriz.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">El índice en el que se va a comenzar la búsqueda.</param>
      <param name="count" vsli:raw="The starting position of the search.">Posición inicial de la búsqueda.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Índice de <paramref name="item" />, si se encuentra en la lista; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the array at the specified index.">Inserta un elemento en la matriz en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">Índice de base cero donde se inserta el elemento.</param>
      <param name="item" vsli:raw="The object to insert into the array.">Objeto que se va a insertar en la matriz.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the item at the specified index.">Obtiene o establece el elemento en el índice especificado.</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">Índice del elemento que se va a obtener o establecer.</param>
      <returns vsli:raw="The item at the specified index.">Elemento que se encuentra en el índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The specified index is not in the array.">El índice especificado no está en la matriz.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified index.">Obtiene una referencia de solo lectura al elemento en el índice especificado.</summary>
      <param name="index" vsli:raw="The item index.">Índice del elemento.</param>
      <returns vsli:raw="The read-only reference to the element at the specified index.">Referencia de solo lectura al elemento en el índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is greater or equal to the array count.">
        <paramref name="index" /> es mayor o igual que el número de la matriz.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Determina el índice de base cero de la última aparición del elemento especificado en esta matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento que se va a buscar.</param>
      <returns vsli:raw="The 0-based index where the item was found; or -1 if it could not be found.">Índice de base cero de la matriz donde se encontró el elemento; o -1 si no se encontró.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Determina el índice de base cero de la última aparición del elemento especificado en esta matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento que se va a buscar.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Posición inicial de la búsqueda.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Índice de base cero de la matriz donde se encontró el elemento; o -1 si no se encontró.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Determina el índice de base cero de la última aparición del elemento especificado en esta matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento que se va a buscar.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Posición inicial de la búsqueda.</param>
      <param name="count" vsli:raw="The number of elements to search.">Número de elementos que se van a buscar.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Índice de base cero de la matriz donde se encontró el elemento; o -1 si no se encontró.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Determina el índice de base cero de la última aparición del elemento especificado en esta matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento que se va a buscar.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Posición inicial de la búsqueda.</param>
      <param name="count" vsli:raw="The number of elements to search.">Número de elementos que se van a buscar.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Índice de base cero de la matriz donde se encontró el elemento; o -1 si no se encontró.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary vsli:raw="Extracts the internal array as an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; and replaces it              with a zero length array.">Extrae la matriz interna como <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> y la reemplaza por una matriz de longitud cero.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="When &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Count&quot; /&gt; doesn't              equal &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity&quot; /&gt;.">Cuando <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> no es igual que <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the specified element.">Quita el elemento especificado.</summary>
      <param name="element" vsli:raw="The item to remove.">Elemento que se va a quitar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;element&quot; /&gt; was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="element" /> se ha encontrado y eliminado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index from the array.">Quita de la matriz el elemento situado en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Índice de base cero del elemento que se va a quitar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of elements in the collection.">Invierte el orden de los elementos de la colección.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary vsli:raw="Sorts the contents of the array.">Ordena el contenido de la matriz.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">Ordena el contenido de la matriz.</summary>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">Comparador que se va a utilizar para ordenar. Si el comparador es <see langword="null" />, se usa el comparador predeterminado para el tipo de elementos de la matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire array using the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">Ordena los elementos de toda la matriz con el elemento <see cref="T:System.Comparison`1" /> especificado.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">
        <see cref="T:System.Comparison`1" /> que se va a utilizar al comparar elementos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">Ordena el contenido de la matriz.</summary>
      <param name="index" vsli:raw="The starting index for the sort.">Índice inicial para la ordenación.</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">Número de elementos que se va a incluir en la ordenación.</param>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">Comparador que se va a utilizar para ordenar. Si el comparador es <see langword="null" />, se usa el comparador predeterminado para el tipo de elementos de la matriz.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Devuelve un enumerador que itera a través de la matriz.</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">Enumerador que recorre en iteración la matriz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Devuelve un enumerador que itera a través de la matriz.</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">Enumerador que recorre en iteración la matriz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary vsli:raw="Creates a new array with the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Crea una nueva matriz con el contenido actual de este <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns vsli:raw="A new array with the contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Crea una nueva matriz con el contenido de este <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary vsli:raw="Returns an immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Devuelve una matriz inmutable que contiene el contenido actual de este <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns vsli:raw="An immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Matriz inmutable que contiene el contenido actual de este <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct by casting the underlying array to an array of type &lt;typeparamref name=&quot;TOther&quot; /&gt;.">Inicializa una instancia nueva de la estructura <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> al convertir la matriz subyacente en una matriz de tipo <typeparamref name="TOther" />.</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return." />
      <exception cref="T:System.InvalidCastException" vsli:raw="The cast is illegal.">Se produce si la conversión no es válida.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct based on the contents of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.">Inicializa una nueva instancia de la estructura <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> basada en el contenido de una instancia existente, lo que permite que una conversión estática covariante vuelva a usar eficazmente la matriz existente.</summary>
      <param name="items" vsli:raw="The array to initialize the array with. No copy is made.">Matriz con la que inicializar la matriz. No se realiza ninguna copia.</param>
      <typeparam name="TDerived" vsli:raw="The type of array element to return." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">Devuelve una matriz con todos los elementos eliminados.</summary>
      <returns vsli:raw="An array with all of the elements removed.">Matriz con todos los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary vsli:raw="Determines whether the specified item exists in the array.">Determina si el elemento especificado existe en la matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento que se va a buscar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified item was found in the array; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se encontró el elemento especificado; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the contents of this array to the specified array.">Copia el contenido de esta matriz en la matriz especificada.</summary>
      <param name="destination" vsli:raw="The array to copy to.">Matriz en la que se va a copiar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the contents of this array to the specified array starting at the specified destination index.">Copia el contenido de la matriz en la matriz especificada, empezando por el índice de destino especificado.</summary>
      <param name="destination" vsli:raw="The array to copy to.">Matriz en la que se va a copiar.</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">Índice de <paramref name="array" /> donde se inicia la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the specified items in this array to the specified array at the specified starting index.">Copia los elementos especificados en esta matriz en la matriz especificada en el índice de inicio especificado.</summary>
      <param name="sourceIndex" vsli:raw="The index of this array where copying begins.">Índice de la matriz en que se inicia la copia.</param>
      <param name="destination" vsli:raw="The array to copy to.">Matriz en la que se va a copiar.</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">Índice de <paramref name="array" /> donde se inicia la copia.</param>
      <param name="length" vsli:raw="The number of elements to copy from this array.">Número de elementos que se van a copiar desde esta matriz.</param>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary vsli:raw="Gets an empty immutable array.">Obtiene una matriz inmutable vacía.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary vsli:raw="An array enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumerador de matriz.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y el procedimiento de instalación)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary vsli:raw="Gets the current item.">Obtiene el elemento actual.</summary>
      <returns vsli:raw="The current item.">Elemento actual.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances to the next value in the array.">Avanza hasta el siguiente valor de la matriz.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if another item exists in the array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si existe otro elemento de la matriz; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Indicates whether specified array is equal to this array.">Indica si la matriz especificada es igual a esta matriz.</summary>
      <param name="other" vsli:raw="An object to compare with this object.">Objeto que se va a comparar con este objeto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; is equal to this array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="other" /> es igual a esta matriz; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary vsli:raw="Determines if this array is equal to the specified object.">Determina si esta matriz es igual al objeto especificado.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this array.">
        <see cref="T:System.Object" /> que se compara con esta matriz.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this array is equal to &lt;paramref name=&quot;obj&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si esta matriz es igual a <paramref name="obj" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the contents of the array.">Devuelve un enumerador que recorre en iteración el contenido de la matriz.</summary>
      <returns vsli:raw="An enumerator.">Enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary vsli:raw="Returns a hash code for this instance.">Devuelve un código hash para esta instancia.</summary>
      <returns vsli:raw="A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.">Un código hash para esta instancia adecuado para utilizarlo en algoritmos de hash y estructuras de datos como una tabla hash.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item.">Busca el elemento especificado en la matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento que se va a buscar.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Devuelve la posición de índice de base cero del elemento si se encuentra; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">Busca el elemento especificado en la matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento que se va a buscar.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">El índice en el que se va a comenzar la búsqueda.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Devuelve la posición de índice de base cero del elemento si se encuentra; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">Busca el elemento especificado en la matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento que se va a buscar.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">El índice en el que se va a comenzar la búsqueda.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Devuelve la posición de índice de base cero del elemento si se encuentra; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">Busca el elemento especificado en la matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento que se va a buscar.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">El índice en el que se va a comenzar la búsqueda.</param>
      <param name="count" vsli:raw="The number of elements to search.">Número de elementos que se van a buscar.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Devuelve la posición de índice de base cero del elemento si se encuentra; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">Busca el elemento especificado en la matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento que se va a buscar.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">El índice en el que se va a comenzar la búsqueda.</param>
      <param name="count" vsli:raw="The number of elements to search.">Número de elementos que se van a buscar.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Devuelve la posición de índice de base cero del elemento si se encuentra; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">Devuelve una nueva matriz con el valor especificado insertado en la posición especificada.</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">Índice de base cero en la matriz en la que se debe agregar el nuevo elemento.</param>
      <param name="item" vsli:raw="The item to insert at the start of the array.">Elemento que se va a insertar al principio de la matriz.</param>
      <returns vsli:raw="A new array with the item inserted at the specified index.">Nueva matriz con el elemento insertado en el índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Inserta los valores especificados en el índice especificado.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Índice en el que se va a insertar el valor.</param>
      <param name="items" vsli:raw="The elements to insert.">Elementos que van a insertarse.</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">Nueva matriz inmutable con los elementos insertados en el índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Inserta los valores especificados en el índice especificado.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Índice en el que se va a insertar el valor.</param>
      <param name="items" vsli:raw="The elements to insert.">Elementos que van a insertarse.</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">Nueva matriz inmutable con los elementos insertados en el índice especificado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary vsli:raw="Gets a value indicating whether this array was declared but not initialized.">Obtiene un valor que indica si esta matriz se ha declarado pero no se ha inicializado.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> es <see langword="null" />; si no, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty or is not initialized.">Obtiene un valor que indica si esta <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> está vacía o no se ha inicializado.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.Collections.Immutable.ImmutableArray`1.Empty&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> es <see langword="null" /> o <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty.">Obtiene un valor que indica si esta <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> está vacía.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> está vacío, en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index in the immutable array.">Obtiene el elemento en el índice especificado en la matriz inmutable.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">Índice de base cero del elemento que se va a obtener.</param>
      <returns vsli:raw="The element at the specified index in the immutable array.">Elemento del índice especificado en la matriz inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">Obtiene una referencia de solo lectura al elemento en el elemento <paramref name="index" /> especificado en la lista de solo lectura.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get a reference to.">Índice de base cero del elemento del que se va a obtener una referencia.</param>
      <returns vsli:raw="A read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">Referencia de solo lectura al elemento en el valor <paramref name="index" /> especificado en la lista de solo lectura.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Busca el elemento especificado en la matriz, empezando por el final de la matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento que se va a buscar.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Índice de base cero de la matriz donde se encontró el elemento; o -1 si no se encontró.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Busca el elemento especificado en la matriz, empezando por el final de la matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento que se va a buscar.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">El índice en el que se va a comenzar la búsqueda.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Índice de base cero de la matriz donde se encontró el elemento; o -1 si no se encontró.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Busca el elemento especificado en la matriz, empezando por el final de la matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento que se va a buscar.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">El índice en el que se va a comenzar la búsqueda.</param>
      <param name="count" vsli:raw="The number of elements to search.">Número de elementos que se van a buscar.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Índice de base cero de la matriz donde se encontró el elemento; o -1 si no se encontró.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Busca el elemento especificado en la matriz, empezando por el final de la matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento que se va a buscar.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">El índice en el que se va a comenzar la búsqueda.</param>
      <param name="count" vsli:raw="The number of elements to search.">Número de elementos que se van a buscar.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Índice de base cero de la matriz donde se encontró el elemento; o -1 si no se encontró.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary vsli:raw="Gets the number of elements in the array.">Obtiene el número de elementos de la matriz.</summary>
      <returns vsli:raw="The number of elements in the array.">Número de elementos de la matriz</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary vsli:raw="Filters the elements of this array to those assignable to the specified type.">Filtra los elementos de esta matriz a los asignables al tipo especificado.</summary>
      <typeparam name="TResult" vsli:raw="The type to filter the elements of the sequence on.">El tipo según el cual se van a filtrar los elementos de la secuencia.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; that contains elements from the input sequence of type of &lt;paramref name=&quot;TResult&quot; /&gt;.">Una interfaz <see cref="T:System.Collections.IEnumerable" /> que contiene los elementos de la secuencia de entrada de tipo <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">Devuelve un valor que indica si dos matrices son iguales.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">Matriz situada a la izquierda del operador.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">Matriz situada a la derecha del operador.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si las matrices son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">Devuelve un valor que indica si dos matrices son iguales.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">Matriz situada a la izquierda del operador.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">Matriz situada a la derecha del operador.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si las matrices son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates whether two arrays are not equal.">Devuelve un valor que indica si dos matrices no son iguales.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">Matriz situada a la izquierda del operador.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">Matriz situada a la derecha del operador.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si las matrices no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Checks for inequality between two array.">Comprueba si hay desigualdades entre dos matrices.</summary>
      <param name="left" vsli:raw="The object to the left of the operator.">Objeto situado a la izquierda del operador.</param>
      <param name="right" vsli:raw="The object to the right of the operator.">Objeto situado a la derecha del operador.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si las dos matrices no son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array. If no match is found, the current array is returned.">Devuelve una matriz con la primera aparición del elemento especificado que se quita de la matriz. Si no se encuentra ninguna coincidencia, se devuelve la matriz actual.</summary>
      <param name="item" vsli:raw="The item to remove.">Elemento que se va a quitar.</param>
      <returns vsli:raw="A new array with the item removed.">Nueva matriz con el elemento quitado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array.  &#xA;  &#xA; If no match is found, the current array is returned.">Devuelve una matriz con la primera aparición del elemento especificado que se quita de la matriz.
Si no se encuentra ninguna coincidencia, se devuelve la matriz actual.</summary>
      <param name="item" vsli:raw="The item to remove.">Elemento que se va a quitar.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns vsli:raw="A new array with the specified item removed.">Nueva matriz con el elemento especificado quitado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">Quita todos los elementos de la matriz que cumplen la condición especificada.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Delegado que define las condiciones de los elementos que se van a quitar.</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">Nueva matriz con los elementos que cumplen la condición especificada quitados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">Devuelve una matriz con el elemento de la posición especificada quitado.</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">Índice de base 0 del elemento a quitar de la matriz devuelta.</param>
      <returns vsli:raw="A new array with the item at the specified index removed.">Nueva matriz con el elemento del índice especificado quitado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Quita los elementos especificados de esta matriz.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Elementos a quitar si se encuentran coincidencias en esta lista.</param>
      <returns vsli:raw="A new array with the elements removed.">Nueva matriz con los elementos quitados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Quita los elementos especificados de esta matriz.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Elementos a quitar si se encuentran coincidencias en esta lista.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns vsli:raw="A new array with the elements removed.">Nueva matriz con los elementos quitados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Removes the specified values from this list.">Quita los valores especificados de esta lista.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Elementos a quitar si se encuentran coincidencias en esta lista.</param>
      <returns vsli:raw="A new list with the elements removed.">Lista nueva con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this list.">Quita los elementos especificados de esta lista.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Elementos a quitar si se encuentran coincidencias en esta lista.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns vsli:raw="A new array with the elements removed.">Nueva matriz con los elementos quitados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">Devuelve una matriz con los elementos de la posición especificada quitados.</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">Índice de base 0 del elemento de inicio a quitar de la matriz.</param>
      <param name="length" vsli:raw="The number of elements to remove from the array.">Número de elementos que se va a quitar de la matriz.</param>
      <returns vsli:raw="The new array with the specified elements removed.">Nueva matriz con los elemento especificados quitados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Busca el primer elemento de la matriz igual al valor especificado y reemplaza el valor por el nuevo valor especificado.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">Valor para buscar y reemplazar en la matriz.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">Valor con el que se va a reemplazar <c>oldvalue</c>.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Una nueva matriz que contiene <paramref name="newValue" /> incluso si los valores nuevos y antiguos son los mismos.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> no se encuentra en la matriz.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Busca el primer elemento de la matriz igual al valor especificado y reemplaza el valor por el nuevo valor especificado.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">Valor para buscar y reemplazar en la matriz.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">Valor con el que se va a reemplazar <c>oldvalue</c>.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">Comparador de igualdad a usar para comparar los valores.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Una nueva matriz que contiene <paramref name="newValue" /> incluso si los valores nuevos y antiguos son los mismos.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> no se encuentra en la matriz.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Reemplaza el elemento situado en el índice determinado con el elemento especificado.</summary>
      <param name="index" vsli:raw="The index of the item to replace.">Índice del elemento que se va a reemplazar.</param>
      <param name="item" vsli:raw="The item to add to the list.">Elemento que va a agregarse a la lista.</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">Nueva matriz que contiene <paramref name="item" /> en el índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary vsli:raw="Sorts the elements in the immutable array using the default comparer.">Ordena los elementos de la matriz inmutable utilizando el comparador predeterminado.</summary>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Nueva matriz inmutable que contiene los elementos de esta matriz, en orden alfabético.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the immutable array using the specified comparer.">Ordena los elementos de la matriz inmutable usando el comparador especificado.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Implementación que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Nueva matriz inmutable que contiene los elementos de esta matriz, en orden alfabético.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; using             the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">Ordena los elementos de todo el elemento <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> con el elemento <see cref="T:System.Comparison`1" /> especificado.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">
        <see cref="T:System.Comparison`1" /> que se va a utilizar al comparar elementos.</param>
      <returns vsli:raw="The sorted list.">Lista ordenada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the specified elements in the immutable array using the specified comparer.">Ordena los elementos especificados de la matriz inmutable usando el comparador especificado.</summary>
      <param name="index" vsli:raw="The index of the first element to sort.">Índice del primer elemento que se va a ordenar.</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">Número de elementos que se va a incluir en la ordenación.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Implementación que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Nueva matriz inmutable que contiene los elementos de esta matriz, en orden alfabético.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="item" vsli:raw="The item to add to the end of the array.">Texto que se va a agregar al final de la matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">Obtiene el número de matrices de la colección.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Se inicia si la propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">Obtiene un valor que indica si esta instancia es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si esta instancia es de solo lectura; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="item" vsli:raw="The object to remove from the array.">Objeto que se va a quitar de la matriz.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Devuelve un enumerador que itera a través de la matriz.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">Un enumerador que se puede usar para iterar por la matriz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="index" vsli:raw="The index of the location to insert the item.">Índice de la ubicación donde se va a insertar el elemento.</param>
      <param name="item" vsli:raw="The item to insert.">Elemento que se va a insertar.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index in the read-only list.">Obtiene o establece el elemento en el índice especificado de la lista de solo lectura.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">Índice de base cero del elemento que se va a obtener.</param>
      <returns vsli:raw="The element at the specified index in the read-only list.">Elemento en el índice especificado en la lista de solo lectura.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Siempre se produce desde el establecedor.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Se inicia si la propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="index" vsli:raw="The index.">Índice.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">Obtiene el número de matrices de la colección.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Se inicia si la propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index.">Obtiene el elemento en el índice especificado.</summary>
      <param name="index" vsli:raw="The index.">Índice.</param>
      <returns vsli:raw="The element.">El elemento.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Se inicia si la propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies this array to another array starting at the specified index.">Copia esta matriz en otra matriz, empezando por el índice especificado.</summary>
      <param name="array" vsli:raw="The array to copy this array to.">Matriz en la que se copiará esta matriz.</param>
      <param name="index" vsli:raw="The index in the destination array to start the copy operation.">Índice de la matriz de destino por el que va a comenzar la operación de copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the size of the array.">Obtiene el tamaño de la matriz.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Se inicia si la propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface. Always returns &lt;see langword=&quot;true&quot; /&gt; since since immutable collections are thread-safe.">Vea la interfaz <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the sync root.">Obtiene la raíz para la sincronización.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable array.">Devuelve un enumerador que recorre en iteración la matriz inmutable.</summary>
      <returns vsli:raw="An enumerator that iterates through the immutable array.">Enumerador que recorre en iteración la matriz inmutable.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">La propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve <see langword="true" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="value" vsli:raw="The value to add to the array.">Valor que se va a agregar a la matriz.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Se produce en todos los casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Se produce en todos los casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="value" vsli:raw="The value to check for.">Valor que se va a comprobar.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Gets the value at the specified index.">Obtiene el valor en el índice especificado.</summary>
      <param name="value" vsli:raw="The value to return the index of.">Valor cuyo índice se va a devolver.</param>
      <returns vsli:raw="The value of the element at the specified index.">Valor del elemento en el índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="index" vsli:raw="Index that indicates where to insert the item.">Índice que indica dónde se va a insertar el elemento.</param>
      <param name="value" vsli:raw="The value to insert.">Valor que se va a insertar.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Se produce en todos los casos.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether this instance is fixed size.">Obtiene un valor que indica si esta instancia tiene un tamaño fijo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si esta instancia tiene un tamaño fijo; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">Obtiene un valor que indica si esta instancia es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si esta instancia es de solo lectura; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Obtiene o establece la clase <see cref="T:System.Object" /> en el índice especificado.</summary>
      <param name="index" vsli:raw="The index.">Índice.</param>
      <returns vsli:raw="The object at the specified index.">Objeto en el índice especificado.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Siempre se produce desde el establecedor.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Se inicia si la propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="value" vsli:raw="The value to remove from the array.">Valor que se va a quitar de la matriz.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Se produce en todos los casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="index" vsli:raw="The index of the item to remove.">El índice del elemento que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Se produce en todos los casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">Devuelve una copia de la matriz original con el elemento especificado que se agrega al final.</summary>
      <param name="value" vsli:raw="The value to add to the end of the array.">Valor que se va a agregar al final de la matriz.</param>
      <returns vsli:raw="A new array with the specified item added to the end.">Nueva matriz con el elemento especificado agregado al final.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Devuelve una copia de la matriz original con los elementos especificados agregados al final de la matriz.</summary>
      <param name="items" vsli:raw="The elements to add to the end of the array.">Elementos que se van a agregar al final de la matriz.</param>
      <returns vsli:raw="A new array with the elements added to the end.">Nueva matriz con los elementos agregados al final.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">Devuelve una matriz con todos los elementos eliminados.</summary>
      <returns vsli:raw="An array with all the elements removed.">Matriz con todos los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">Devuelve una nueva matriz con el valor especificado insertado en la posición especificada.</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">Índice de base cero en la matriz en la que se debe agregar el nuevo elemento.</param>
      <param name="element" vsli:raw="The item to insert at the start of the array.">Elemento que se va a insertar al principio de la matriz.</param>
      <returns vsli:raw="A new array with the specified value inserted.">Nueva matriz con el valor especificado insertado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Inserta los valores especificados en el índice especificado.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Índice en el que se va a insertar el valor.</param>
      <param name="items" vsli:raw="The elements to insert.">Elementos que van a insertarse.</param>
      <returns vsli:raw="A new array with the specified values inserted.">Nueva matriz con los valores especificados insertados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array; if no match is found, the current array is returned.">Devuelve una matriz con la primera aparición del elemento especificado que se quita de la matriz; si no se encuentra ninguna coincidencia, se devuelve la matriz actual.</summary>
      <param name="value" vsli:raw="The value to remove from the array.">Valor que se va a quitar de la matriz.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns vsli:raw="A new array with the value removed.">Nueva matriz con el valor quitado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">Quita todos los elementos de la matriz que cumplen la condición especificada.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Delegado que define las condiciones de los elementos que se van a quitar.</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">Nueva matriz con los elementos que cumplen la condición especificada quitados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">Devuelve una matriz con el elemento de la posición especificada quitado.</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">Índice de base 0 del elemento a quitar de la matriz devuelta.</param>
      <returns vsli:raw="A new array with the specified item removed.">Nueva matriz con el elemento especificado quitado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Quita los elementos especificados de esta matriz.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Elementos a quitar si se encuentran coincidencias en esta lista.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns vsli:raw="A new array with the elements removed.">Nueva matriz con los elementos quitados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">Devuelve una matriz con los elementos de la posición especificada quitados.</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">Índice de base 0 del elemento de inicio a quitar de la matriz.</param>
      <param name="count" vsli:raw="The number of elements to remove from the array.">Número de elementos que se va a quitar de la matriz.</param>
      <returns vsli:raw="The new array with the specified elements removed.">Nueva matriz con los elemento especificados quitados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Busca el primer elemento de la matriz igual al valor especificado y reemplaza el valor por el nuevo valor especificado.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">Valor para buscar y reemplazar en la matriz.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">Valor con el que se va a reemplazar <c>oldvalue</c>.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">Comparador de igualdad a usar para comparar los valores.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Una nueva matriz que contiene <paramref name="newValue" /> incluso si los valores nuevos y antiguos son los mismos.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> no se encuentra en la matriz.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Reemplaza el elemento situado en el índice determinado con el elemento especificado.</summary>
      <param name="index" vsli:raw="The index of the item to replace.">Índice del elemento que se va a reemplazar.</param>
      <param name="value" vsli:raw="The value to add to the list.">Valor que se va a agregar a la lista.</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">Nueva matriz que contiene <paramref name="item" /> en el índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary vsli:raw="Determines whether the current collection element precedes, occurs in the same position as, or follows another element in the sort order.">Determina si el elemento de colección actual precede o sigue a otro elemento en el criterio de ordenación, o aparece en la misma posición que él.</summary>
      <param name="other" vsli:raw="The element to compare with the current instance.">Elemento que se va a comparar con la instancia actual.</param>
      <param name="comparer" vsli:raw="The object used to compare members of the current array with the corresponding members of other array.">Objeto que se utiliza para comparar a los miembros de la matriz actual con los miembros correspondientes de otra matriz.</param>
      <returns vsli:raw="An integer that indicates whether the current element precedes, is in the same position or follows the other element.">Número entero que indica si el elemento actual va previamente, si está en la misma posición o si sigue al otro elemento.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The arrays are not the same length.">Las matrices no tienen la misma longitud.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary vsli:raw="Determines whether this array is structurally equal to the specified array.">Determina si esta matriz equivale estructuralmente a la matriz especificada.</summary>
      <param name="other" vsli:raw="The array to compare with the current instance.">Matriz que se va a comparar con la instancia actual.</param>
      <param name="comparer" vsli:raw="An object that determines whether the current instance and other are structurally equal.">Objeto que determina si la instancia actual y otra son iguales estructuralmente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are structurally equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si las dos matrices son estructuralmente iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary vsli:raw="Returns a hash code for the current instance.">Devuelve un código hash de la instancia actual.</summary>
      <param name="comparer" vsli:raw="An object that computes the hash code of the current object.">Objeto que calcula el código hash del objeto actual.</param>
      <returns vsli:raw="The hash code for the current instance.">Código hash de la instancia actual.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary vsli:raw="Creates a mutable array that has the same contents as this array and can be efficiently mutated across multiple operations using standard mutable interfaces.">Crea una matriz inmutable con el mismo contenido que esta matriz y que puede transformarse eficazmente en varias operaciones mediante interfaces mutables estándar.</summary>
      <returns vsli:raw="The new builder with the same contents as this array.">Nuevo generador con el mismo contenido que esta matriz.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Proporciona un conjunto de métodos de inicialización para las instancias de la clase <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" />.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Determines whether the specified immutable dictionary contains the specified key/value pair.">Determina si el diccionario inmutable especificado contiene el par de clave-valor especificado.</summary>
      <param name="map" vsli:raw="The immutable dictionary to search.">Diccionario inmutable para buscar.</param>
      <param name="key" vsli:raw="The key to locate in the immutable dictionary.">Clave que se va a buscar en el diccionario inmutable.</param>
      <param name="value" vsli:raw="The value to locate on the specified key, if the key is found.">Valor para buscar en la clave especificada, si se encuentra la clave.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the immutable dictionary.">Tipo de las claves del diccionario inmutable.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the immutable dictionary.">Tipo de los valores del diccionario inmutable.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this map contains the specified key/value pair; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si esta asignación contiene el par clave-valor especificado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable dictionary.">Crea un nuevo diccionario inmutable vacío.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Diccionario inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key comparer.">Crea un diccionario inmutable vacío que usa el comparador de claves especificado.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Implementación a utilizar para determinar la igualdad de claves en el diccionario.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Diccionario inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key and value comparers.">Crea un diccionario inmutable vacío que usa los comparadores de claves y valores especificados.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Implementación a utilizar para determinar la igualdad de claves en el diccionario.</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">Implementación a utilizar para determinar la igualdad de valores en el diccionario.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Diccionario inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Crea un nuevo generador de diccionarios inmutable.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns vsli:raw="The new builder.">Generador nuevo.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Crea un nuevo generador de diccionarios inmutable.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Comparador de claves.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns vsli:raw="The new builder.">Generador nuevo.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Crea un nuevo generador de diccionarios inmutable.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Comparador de claves.</param>
      <param name="valueComparer" vsli:raw="The value comparer.">Comparador de claves.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns vsli:raw="The new builder.">Generador nuevo.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items.">Crea un nuevo diccionario inmutable que contiene los elementos especificados.</summary>
      <param name="items" vsli:raw="The items used to populate the dictionary before it's immutable.">Elementos que se usan para rellenar el diccionario antes de que se convierta en inmutable.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Tipo de claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Tipo de valores del diccionario.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items.">Nuevo diccionario inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">Crea un nuevo diccionario inmutable que contiene los elementos especificados y usa el comparador de claves especificado.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">Implementación de comparador que se va a utilizar para comparar las claves para la igualdad.</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">Elementos que se van a agregar al diccionario antes de que se convierta en inmutable.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Tipo de claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Tipo de valores del diccionario.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">Nuevo diccionario inmutable que contiene los elementos especificados y usa el comparador especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">Crea un nuevo diccionario inmutable que contiene los elementos especificados y usa el comparador de claves especificado.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">Implementación de comparador que se va a utilizar para comparar las claves para la igualdad.</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">Implementación de comparador que se va a utilizar para comparar los valores para la igualdad.</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">Elementos que se van a agregar al diccionario antes de que se convierta en inmutable.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Tipo de claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Tipo de valores del diccionario.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">Nuevo diccionario inmutable que contiene los elementos especificados y usa el comparador especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Obtiene el valor de una clave determinada si existe una clave coincidente en el diccionario.</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">Diccionario del que recuperar el valor.</param>
      <param name="key" vsli:raw="The key to search for.">Clave que se va a buscar.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo de la clave.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">Tipo del valor.</typeparam>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">Valor de la clave o <c>default(TValue)</c> si no se ha encontrado ninguna clave coincidente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Obtiene el valor de una clave determinada si existe una clave coincidente en el diccionario.</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">Diccionario del que recuperar el valor.</param>
      <param name="key" vsli:raw="The key to search for.">Clave que se va a buscar.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">Valor predeterminado para devolver si no se detecta ninguna clave coincidente en el diccionario.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo de la clave.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">Tipo del valor.</typeparam>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">El valor de la clave, o <paramref name="defaultValue" /> si no se ha encontrado ninguna clave coincidente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Constructs an immutable dictionary from an existing collection of elements, applying a transformation function to the source keys.">Crea un diccionario inmutable de una colección de elementos existente, aplicando una función de transformación en las claves de origen.</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">Colección de origen que se usa para generar el diccionario inmutable.</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">Función que se utiliza para transformar las claves para el diccionario inmutable.</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">Tipo de elemento de la colección de origen.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">Tipo de clave del diccionario inmutable resultante.</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">Diccionario inmutable que contiene los elementos de <paramref name="source" />, con claves transformadas aplicando <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Constructs an immutable dictionary based on some transformation of a sequence.">Crea un diccionario inmutable basado en alguna transformación de una secuencia.</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">Colección de origen que se usa para generar el diccionario inmutable.</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">Función que se utiliza para transformar las claves para el diccionario inmutable.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Comparador de claves que se utilizará para el diccionario.</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">Tipo de elemento de la colección de origen.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">Tipo de clave del diccionario inmutable resultante.</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">Diccionario inmutable que contiene los elementos de <paramref name="source" />, con claves transformadas aplicando <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents.">Enumera una secuencia de pares de clave/valor y genera un diccionario ordenado inmutable de su contenido.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Secuencia de pares clave-valor a enumerar.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo de los valores del diccionario.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Diccionario inmutable que contiene los pares clave-valor en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">Enumera una secuencia de pares de clave-valor y genera un diccionario inmutable de su contenido mediante el comparador de claves especificado.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Secuencia de pares clave-valor a enumerar.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Comparador de claves a utilizar al crear el diccionario inmutable.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo de los valores del diccionario.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Diccionario inmutable que contiene los pares clave-valor en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key and value comparers.">Enumera una secuencia de pares de clave-valor y genera un diccionario inmutable de su contenido mediante el comparador de claves y valores especificado.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Secuencia de pares clave-valor a enumerar.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Comparador de claves a utilizar al crear el diccionario inmutable.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">Comparador de valor que se usará para el diccionario inmutable.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo de los valores del diccionario.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Diccionario inmutable que contiene los pares clave-valor en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable dictionary from the current contents of the builder's dictionary.">Crea un diccionario inmutable a partir del contenido actual del diccionario del generador.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable dictionary from.">Generador desde el que se va a crear el diccionario inmutable.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo de los valores del diccionario.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the current contents in the builder's dictionary.">Diccionario inmutable que incluye el contenido actual del diccionario del generador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents.">Enumera y transforma una secuencia y genera un diccionario inmutable de su contenido.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Secuencia a enumerar para generar el diccionario.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Función que generará la clave del diccionario desde cada elemento de la secuencia.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Función que generará el valor del diccionario desde cada elemento de la secuencia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo de los elementos de la secuencia.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Tipo de las claves del diccionario resultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Tipo de los valores del diccionario resultante.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Diccionario inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key comparer.">Enumera y transforma una secuencia y genera un diccionario inmutable de su contenido mediante el comparador de claves especificado.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Secuencia a enumerar para generar el diccionario.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Función que generará la clave del diccionario desde cada elemento de la secuencia.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Función que generará el valor del diccionario desde cada elemento de la secuencia.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Comparador de claves que se utilizará para el diccionario.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo de los elementos de la secuencia.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Tipo de las claves del diccionario resultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Tipo de los valores del diccionario resultante.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Diccionario inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key and value comparers.">Enumera y transforma una secuencia y genera un diccionario inmutable de su contenido mediante el comparador de claves y valores especificado.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Secuencia a enumerar para generar el diccionario.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Función que generará la clave del diccionario desde cada elemento de la secuencia.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Función que generará el valor del diccionario desde cada elemento de la secuencia.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Comparador de claves que se utilizará para el diccionario.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">Comparador de valor que se usará para el diccionario.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo de los elementos de la secuencia.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Tipo de las claves del diccionario resultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Tipo de los valores del diccionario resultante.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Diccionario inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable, unordered collection of keys and values.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa una colección inmutable y no ordenada de claves y valores.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y el procedimiento de instalación)</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo de los valores del diccionario.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable dictionary.">Agrega un elemento con la clave y el valor especificados en el diccionario inmutable.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clave del elemento que se va a agregar.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valor del elemento que se va a agregar.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">Nuevo diccionario inmutable que contiene el par de clave-valor adicional.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">La clave especificada ya existe en el diccionario, pero tiene un valor diferente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the immutable dictionary.">Agrega los pares clave-valor especificados al diccionario inmutable.</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">Pares clave-valor que se va a agregar.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Nuevo diccionario inmutable que contiene los pares clave-valor adicionales.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Una de las claves especificadas ya existe en el diccionario, pero tiene un valor diferente.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary vsli:raw="Represents a hash map that mutates with little or no memory allocations and that can produce or build on immutable hash map instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa un mapa hash que transforma con poca o ninguna asignación de memoria y que puede generar o compilar instancias de mapa hash inmutables muy eficazmente.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable dictionary.">Agrega un elemento que dispone de la clave y el valor especificados al diccionario inmutable.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clave del elemento que se va a agregar.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valor del elemento que se va a agregar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> es null.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the dictionary.">Ya existe un elemento con la misma clave en el diccionario.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">El diccionario es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable dictionary.">Agrega el elemento especificado al diccionario.</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">Objeto que se agrega al diccionario.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">El diccionario es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to this collection.">Agrega una secuencia de valores a esta colección.</summary>
      <param name="items" vsli:raw="The items to add to this collection.">Elementos que se van a agregar a esta colección.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable dictionary.">Elimina todos los elementos del diccionario inmutable.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">El diccionario es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains a specific value.">Determina si el diccionario inmutable contiene un valor específico.</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">Objeto que se va a buscar en el diccionario.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el objeto <paramref name="item" /> está en el diccionario; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified key.">Determina si el diccionario inmutable contiene un elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">Clave que se debe buscar en el diccionario.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el diccionario contiene un elemento con la clave; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified value.">Determina si el diccionario contiene un elemento con el valor especificado.</summary>
      <param name="value" vsli:raw="The value to locate in the immutable dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valor que se va a buscar en el diccionario inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el diccionario contiene un elemento con el valor especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable dictionary.">Obtiene el número de elementos contenido en el diccionario inmutable.</summary>
      <returns vsli:raw="The number of elements contained in the immutable dictionary.">Número de elementos contenido en el diccionario inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">Devuelve un enumerador que recorre en iteración el diccionario inmutable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Obtiene el valor de una clave determinada si existe una clave coincidente en el diccionario.</summary>
      <param name="key" vsli:raw="The key to search for.">Clave que se va a buscar.</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">Valor de la clave o <c>default(TValue)</c> si no se ha encontrado ninguna clave coincidente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Obtiene el valor de una clave determinada si existe una clave coincidente en el diccionario.</summary>
      <param name="key" vsli:raw="The key to search for.">Clave que se va a buscar.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">Valor predeterminado para devolver si no se detecta ninguna clave coincidente en el diccionario.</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">El valor de la clave, o <paramref name="defaultValue" /> si no se ha encontrado ninguna clave coincidente.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtiene o establece el elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The element to get or set.">Elemento que se obtiene o establece.</param>
      <returns vsli:raw="The element that has the specified key.">Elemento que tiene la clave especificada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is being retrieved, and &lt;paramref name=&quot;key&quot; /&gt; is not found.">La propiedad se recuperará y no se encuentra <paramref name="key" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The property is being set, and the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">La propiedad se establece y <see cref="T:System.Collections.Generic.IDictionary`2" /> es de solo lectura.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Obtiene o establece el comparador de claves.</summary>
      <returns vsli:raw="The key comparer.">Comparador de claves.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a collection that contains the keys of the immutable dictionary.">Obtiene una colección que contiene las claves del diccionario inmutable.</summary>
      <returns vsli:raw="A collection that contains the keys of the object that implements the immutable dictionary.">Colección que contiene las claves del objeto que implementa el diccionario inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Quita el elemento con la clave especificada del diccionario inmutable.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clave del elemento que se va a quitar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the dictionary.">Es <see langword="true" /> si el elemento se quita correctamente; en caso contrario, es <see langword="false" />.  Este método también devuelve <see langword="false" /> si no se encontró <paramref name="key" /> en el diccionario.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> es null.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">El diccionario es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable dictionary.">Quita la primera repetición de un objeto específico del diccionario inmutable.</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">Objeto que se va a quitar del diccionario.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns false if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">
        <see langword="true" /> si <paramref name="item" /> se ha quitado correctamente de ; en caso contrario, <see langword="false" />. Este método también devuelve false si <paramref name="item" /> no se encontró en el diccionario.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">El diccionario es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable dictionary.">Quita todas las entradas con claves que coinciden con las que se encuentran en la secuencia especificada del diccionario inmutable.</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">Claves para las entradas que se quitarán del diccionario.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, starting at the specified array index.">Copia los elementos del diccionario en una matriz de tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" />, comenzando en el índice especificado de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Matriz unidimensional de tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que constituye el destino de los elementos copiados desde el diccionario. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Agrega un elemento con la clave y el valor proporcionados al objeto del diccionario.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clave del elemento que se va a agregar.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valor del elemento que se va a agregar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">Determina si el objeto del diccionario contiene un elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key to locate.">Clave que se va a localizar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el diccionario contiene un elemento con la clave; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Devuelve un objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para el diccionario.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para el diccionario.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Obtiene un valor que indica si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtiene o establece el elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key.">Clave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves del objeto que implementa el <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">Quita el elemento con la clave especificada del diccionario.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clave del elemento que se va a quitar.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores del objeto que implementa el <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Objeto de enumerador que puede usarse para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable dictionary based on the contents of this instance.">Crea un diccionario inmutable basado en el contenido de esta instancia.</summary>
      <returns vsli:raw="An immutable dictionary.">Diccionario inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Determina si el diccionario contiene una clave específica.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Clave que se va a buscar.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Clave correspondiente ubicada en el diccionario si se encuentra, o <c>equalkey</c> si no se encuentra ninguna coincidencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se encuentra una coincidencia para <paramref name="equalKey" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Returns the value associated with the specified key.">Devuelve el valor asociado a la clave especificada.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Clave cuyo valor se va a recuperar.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, returns the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Valor asociado a la clave especificada cuando el método devuelve, si se encuentra la clave; en caso contrario, devuelve el valor predeterminado para el tipo del parámetro <paramref name="value" />. Este parámetro se pasa sin inicializar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el objeto que implementa el diccionario inmutable contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> es null.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">Obtiene o establece el comparador de valores.</summary>
      <returns vsli:raw="The value comparer.">Comparador de claves.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable dictionary.">Obtiene una colección que contiene los valores del diccionario inmutable.</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">Colección que contiene los valores del objeto que implementa el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Recupera un diccionario inmutable vacío que tiene el mismo orden y reglas de comparación de clave-valor que esta instancia del diccionario.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Diccionario vacío con orden y reglas de comparación de clave y valor equivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable dictionary contains the specified key/value pair.">Determina si el diccionario inmutable contiene el par de clave-valor especificado.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">Par clave-valor que se va a localizar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el par clave-valor especificado se encuentra en el diccionario; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified key.">Determina si el diccionario inmutable contiene un elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key to locate.">Clave que se va a localizar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el diccionario inmutable contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified value.">Determina si el diccionario inmutable contiene un elemento con el valor especificado.</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valor que se va a buscar. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el diccionario contiene un elemento con el valor especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable dictionary.">Obtiene el número de pares de clave-valor incluido en el diccionario inmutable.</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">Número de pares de clave-valor del diccionario.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable dictionary.">Obtiene un diccionario inmutable vacío.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable dictionary without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera el contenido del diccionario inmutable sin asignar memoria.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element in the dictionary at the current position of the enumerator.">Elemento del diccionario en la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator&quot; /&gt; class.">Libera los recursos utilizados por la instancia actual de la clase <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable dictionary.">Desplaza el enumerador al siguiente elemento del diccionario inmutable.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the dictionary.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final del diccionario.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">Se ha modificado el diccionario después de la creación del enumerador.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the dictionary.">Establece el enumerador en su posición inicial (antes del primer elemento del diccionario).</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">Se ha modificado el diccionario después de la creación del enumerador.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">Obtiene el elemento actual.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">Devuelve un enumerador que recorre en iteración el diccionario inmutable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Enumerador que puede usarse para recorrer en iteración el diccionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable dictionary is empty.">Obtiene un valor que indica si esta instancia del dicionario inmutable está vacía.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si esta instancia está vacía; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">Obtiene el <paramref name="TValue" /> asociado con la clave especificada.</summary>
      <param name="key" vsli:raw="The type of the key.">Tipo de la clave.</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">Valor asociado a la clave especificada. Si no se encuentra ningún resultado, la operación produce una excepción.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable dictionary.">Obtiene el comparador de claves del diccionario inmutable.</summary>
      <returns vsli:raw="The key comparer.">Comparador de claves.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable dictionary.">Obtiene las claves en el diccionario inmutable.</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">Claves del diccionario inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Quita el elemento con la clave especificada del diccionario inmutable.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clave del elemento que se va a quitar.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">Un nuevo diccionario inmutable con el elemento especificado eliminado; o bien esta instancia si no se encuentra la clave especificada en el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">Quita los elementos con la clave especificada del diccionario inmutable.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">Claves de los elementos que se van a quitar.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Nuevo diccionario inmutable con las claves especificadas eliminados; o bien esta instancia si no se encuentran en el diccionario las claves especificadas.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">Establece la clave y valor especificados en el diccionario inmutable, posiblemente sobrescribiendo un valor existente de la clave.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Clave de la entrada que se va a agregar.</param>
      <param name="value" vsli:raw="The key value to set.">Valor de clave que se va a establecer.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">Nuevo diccionario inmutable que contiene el par de clave-valor especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">Establece los pares de clave-valor especificados en el diccionario inmutable, posiblemente sobrescribiendo valores existentes de las claves.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Pares de clave-valor que se van a establecer en el diccionario. Si ya existe alguna de las claves en el diccionario, este método sobrescribirá los valores anteriores.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">Nuevo diccionario inmutable que contiene pares de clave-valor especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The type of the key." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">Copia los elementos del diccionario en una matriz, empezando por un índice de matriz concreto.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde el diccionario. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the immutable dictionary object.">Agrega un elemento con la clave y el valor proporcionados al objeto de diccionario inmutable.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">Objeto que se va a utilizar como clave del elemento que se va a agregar.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">El objeto que se va a usar como valor del elemento que se va a agregar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">Borra esta instancia.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">El objeto de diccionario es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">Determina si el objeto de diccionario inmutable contiene un elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">Clave que se debe buscar en el objeto del diccionario.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el diccionario contiene un elemento con la clave; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">Devuelve un objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para el objeto de diccionario inmutable.</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">Objeto de enumerador para el objeto de diccionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Obtiene un valor que indica si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtiene o establece el elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key.">Clave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves del objeto que implementa el <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">Quita el elemento con la clave especificada del objeto de diccionario inmutable.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clave del elemento que se va a quitar.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores del objeto que implementa el <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Objeto de enumerador que puede usarse para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added to the dictionary." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of the entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="The key-value pairs to set on the map. Any keys that conflict with existing keys will replace the previous values." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Crea un diccionario inmutable con el mismo contenido que este diccionario que puede transformarse eficazmente en varias operaciones mediante interfaces mutables estándar.</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Colección con el mismo contenido que este diccionario que puede transformarse eficazmente en varias operaciones mediante interfaces mutables estándar.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Determina si el diccionario contiene una clave específica.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Clave que se va a buscar.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Clave correspondiente ubicada en el diccionario si se encuentra, o <c>equalkey</c> si no se encuentra ninguna coincidencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se encuentra una coincidencia para <paramref name="equalKey" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Obtiene el valor asociado a la clave especificada.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Clave cuyo valor se va a recuperar.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Si se encuentra la clave, cuando este método devuelve un resultado, contiene el valor asociado a la clave especificada; en caso contrario, contiene el valor predeterminado para el tipo del parámetro <paramref name="value" />. Este parámetro se pasa sin inicializar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el objeto que implementa el diccionario contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> es null.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">Obtiene el comparador de valor que se utiliza para determinar si los valores son iguales.</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">Comparador de valor que se utiliza para determinar si los valores son iguales.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable dictionary.">Obtiene los valores del diccionario inmutable.</summary>
      <returns vsli:raw="The values in the immutable dictionary.">Valores del diccionario inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key comparer.">Obtiene una instancia del diccionario inmutable que usa el comparador de claves especificado.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Comparador de claves a utilizar.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">Instancia del diccionario inmutable que usa el comparador especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key and value comparers.">Obtiene una instancia del diccionario inmutable que usa los comparadores de clave y valor especificados.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Comparador de claves a utilizar.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">Comparador de claves a utilizar.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">Instancia del diccionario inmutable que usa los comparadores especificados.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Proporciona un conjunto de métodos de inicialización para las instancias de la clase <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary vsli:raw="Creates an empty immutable hash set.">Crea un conjunto hash inmutable vacío.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable hash set.">Tipo de elementos que se almacenará en el conjunto hash inmutable.</typeparam>
      <returns vsli:raw="An empty immutable hash set.">Conjunto hash inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item.">Crea un nuevo conjunto hash inmutable que contiene el elemento especificado.</summary>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">Elemento con el que rellenar el conjunto hash.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Tipo de elementos del conjunto hash inmutable.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">Nuevo conjunto hash inmutable que contiene el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified array of items.">Crea un nuevo conjunto hash inmutable que contiene la matriz especificada de elementos.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">Matriz que contiene los elementos con los que rellenar el conjunto hash.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Tipo de elementos del conjunto hash inmutable.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">Nuevo conjunto hash inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable hash set that uses the specified equality comparer.">Crea un conjunto hash inmutable vacío que usa el comparador de igualdad especificado.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Objeto que se va a utilizar para comparar la igualdad de los objetos del conjunto.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Tipo de elementos del conjunto hash inmutable.</typeparam>
      <returns vsli:raw="An empty immutable hash set.">Conjunto hash inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item and uses the specified equality comparer for the set type.">Crea un nuevo conjunto hash inmutable que contiene el elemento especificado y usa el comparador de igualdad especificado para el tipo de conjunto.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Objeto que se va a utilizar para comparar la igualdad de los objetos del conjunto.</param>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">Elemento con el que rellenar el conjunto hash.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Tipo de elementos del conjunto hash inmutable.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">Nuevo conjunto hash inmutable que contiene el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the items in the specified collection and uses the specified equality comparer for the set type.">Crea un nuevo conjunto hash inmutable que contiene los elementos de la colección especificada y usa el comparador de igualdad especificado para el tipo de conjunto.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Objeto que se va a utilizar para comparar la igualdad de los objetos del conjunto.</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">Matriz que contiene los elementos con los que rellenar el conjunto hash.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable hash set.">Tipo de elementos almacenados en el conjunto hash inmutable.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">Nuevo conjunto hash inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable hash set builder.">Crea un nuevo generador de conjuntos hash inmutables.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Tipo de elementos ordenados por colección.</typeparam>
      <returns vsli:raw="The immutable hash set builder.">Generador de conjuntos hash inmutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable hash set builder.">Crea un nuevo generador de conjuntos hash inmutables.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Objeto que se va a utilizar para comparar la igualdad de los objetos del conjunto.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Tipo de elementos ordenados por colección.</typeparam>
      <returns vsli:raw="The new immutable hash set builder.">Nuevo generador de conjuntos hash inmutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set prefilled with the specified items.">Crea un nuevo conjunto hash inmutable completado con los elementos especificados.</summary>
      <param name="items" vsli:raw="The items to add to the hash set.">Elementos a agregar al conjunto hash.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Tipo de elementos ordenados por colección.</typeparam>
      <returns vsli:raw="The new immutable hash set that contains the specified items.">Nuevo conjunto hash inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified items and uses the specified equality comparer for the set type.">Crea un nuevo conjunto hash inmutable que contiene los elementos especificados y usa el comparador de igualdad especificado para el tipo de conjunto.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Objeto que se va a utilizar para comparar la igualdad de los objetos del conjunto.</param>
      <param name="items" vsli:raw="The items add to the collection before immutability is applied.">Los elementos se agregan a la colección antes de que se aplique la inmutabilidad.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the collection.">Tipo de elementos almacenados en la colección.</typeparam>
      <returns vsli:raw="The new immutable hash set.">Nuevo conjunto hash inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable hash set of its contents.">Enumera una secuencia y genera un conjunto hash inmutable de su contenido.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Secuencia que se va a enumerar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo de los elementos de la secuencia.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence.">Conjunto hash inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable hash set of its contents, and uses the specified equality comparer for the set type.">Enumera una secuencia, genera un conjunto hash inmutable de su contenido y usa el comparador de igualdad especificado para este tipo de conjunto.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Secuencia que se va a enumerar.</param>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Objeto que se va a utilizar para comparar la igualdad de los objetos del conjunto.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo de los elementos de la secuencia.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence and uses the specified equality comparer.">Conjunto hash inmutable que contiene los elementos en la secuencia especificada y usa el comparador de igualdad especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable hash set from the current contents of the builder's set.">Crea un conjunto hash inmutable a partir del contenido del conjunto del generador.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable hash set from.">Generador desde el que se va a crear el conjunto hash inmutable.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the hash set.">Tipo de los elementos del conjunto hash.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the current contents in the builder's set.">Conjunto hash inmutable que incluye el contenido actual del conjunto del generador.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary vsli:raw="Represents an immutable, unordered hash set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa un conjunto hash inmutable y sin ordenar.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the hash set.">Tipo de los elementos del conjunto hash.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to the hash set.">Agrega el elemento especificado al conjunto hash.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Elemento que se va a agregar al conjunto.</param>
      <returns vsli:raw="A hash set that contains the added value and any values previously held by the  &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; object.">Conjunto hash que contiene el valor agregado y todos los valores retenidos previamente por el objeto <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary vsli:raw="Represents a hash set that mutates with little or no memory allocations and that can produce or build on immutable hash set instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa un conjunto de hash que transforma con poca o ninguna asignación de memoria y que puede generar o compilar instancias de conjunto hash inmutables muy eficazmente.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y el procedimiento de instalación)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable hash set.">Agrega el elemento especificado al conjunto hash inmutable.</summary>
      <param name="item" vsli:raw="The item to add.">Elemento que se va a agregar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item did not already belong to the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el elemento no pertenecía ya a la colección; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable hash set.">Elimina todos los elementos del conjunto hash inmutable.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The hash set is read-only.">El conjunto hash es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable hash set contains a specific value.">Determina si eI conjunto hash inmutable contiene un valor específico.</summary>
      <param name="item" vsli:raw="The object to locate in the hash set.">Objeto que se va a buscar en el conjunto hash.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the hash set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> se encuentra en el conjunto hash; de lo contrario, <see langword="false" /></returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable hash set.">Obtiene el número de elementos contenido en el conjunto hash inmutable.</summary>
      <returns vsli:raw="The number of elements contained in the immutable hash set.">Número de elementos contenido en el conjunto hash inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current hash set.">Quita del conjunto actual todos los elementos de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">Colección de elementos que se van a quitar del conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable hash set.">Devuelve un enumerador que recorre en iteración el conjunto hash inmutable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Enumerador que se puede usar para recorrer en iteración el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Modifica el conjunto actual para que solo contenga elementos que también estén en una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">Determina si el conjunto actual es un subconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un subconjunto apropiado de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">Determina si el conjunto actual es un supraconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un supraconjunto apropiado de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">Determina si el conjunto actual es un subconjunto de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un subconjunto de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">Determina si el conjunto actual es un supraconjunto de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un supraconjunto de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Obtiene o establece el comparador de claves.</summary>
      <returns vsli:raw="The key comparer.">Comparador de claves.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">Determina si el conjunto actual se superpone a la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual y <paramref name="other" /> comparten al menos un elemento común; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable hash set.">Quita la primera repetición de un objeto específico del conjunto hash inmutable.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">Objeto que se va a quitar del conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original set.">
        <see langword="true" /> si <paramref name="item" /> se ha quitado correctamente del conjunto; en caso contrario, <see langword="false" />. Este método también devuelve <see langword="false" /> si <paramref name="item" /> no se encuentra en el conjunto original.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">El conjunto es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">Determina si el conjunto actual y la colección especificada contienen los mismos elementos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es igual a <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Modifica el conjunto actual para que únicamente contenga elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the hash set.">Agrega un elemento al conjunto hash.</summary>
      <param name="item" vsli:raw="The object to add to the set.">Objeto que se va a agregar al conjunto.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">El conjunto es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the hash set to an array, starting at a particular array index.">Copia los elementos del conjunto hash en una matriz, comenzando en un índice concreto de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the hash set. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde el conjunto hash. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable hash set based on the contents of this instance.">Crea un conjunto hash inmutable basado en el contenido de esta instancia.</summary>
      <returns vsli:raw="An immutable set.">Conjunto inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">Modifica el conjunto actual para que contenga todos los elementos que están presentes en el conjunto actual en la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable hash set that has the same sorting and ordering semantics as this instance.">Recupera un conjunto hash inmutable vacío que tiene la misma ordenación y semántica de orden que esta instancia.</summary>
      <returns vsli:raw="An empty hash set that has the same sorting and ordering semantics as this instance.">Conjunto hash vacío que tiene la misma ordenación y semántica de orden que esta instancia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable hash set contains the specified element.">Determina si este conjunto hash inmutable contiene el elemento especificado.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable hash set.">Objeto que se va a buscar en el conjunto hash inmutable.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> se encuentra en la matriz <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable hash set.">Obtiene el número de elementos contenido en el conjunto hash inmutable.</summary>
      <returns vsli:raw="The number of elements in the hash set.">Número de elementos del conjunto hash.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary vsli:raw="Gets an immutable hash set for this type that uses the default &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Obtiene un conjunto hash inmutable establecido para este tipo que utiliza el <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> predeterminado.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable hash set without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera el contenido del conjunto hash inmutable sin asignar memoria.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Elemento de la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator&quot; /&gt; class.">Libera los recursos utilizados por la instancia actual de la clase <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable hash set.">Desplaza el enumerador al siguiente elemento del conjunto hash inmutable.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the hash set.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final del conjunto hash.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">El conjunto hash se ha modificado después de la creación del enumerador.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the hash set.">Establece el enumerador en su posición inicial (antes del primer elemento del conjunto hash).</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">El conjunto hash se ha modificado después de la creación del enumerador.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">Obtiene el elemento actual.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable hash set.">Quita del conjunto hash inmutable actual los elementos de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">Colección de elementos que se van a quitar de este conjunto.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Nuevo conjunto con los elementos que se han quitado; o el conjunto original si no se encontraba ninguno de los elementos en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains elements that exist in both this set and the specified set.">Crea un conjunto hash inmutable que contiene los elementos que existen en este conjunto y en el conjunto especificado.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Nuevo conjunto inmutable que contiene los elementos que existen en ambos conjuntos.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the current immutable hash set is empty.">Obtiene un valor que indica si el conjunto hash inmutable actual está vacío.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si esta instancia está vacía; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) subset of a specified collection.">Determina si el conjunto hash inmutable actual es un subconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un subconjunto apropiado de la colección especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) superset of a specified collection.">Determina si el conjunto actual es un subconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un supraconjunto apropiado de la colección especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a subset of a specified collection.">Determina si el conjunto hash inmutable actual es un subconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un subconjunto de la colección especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a superset of a specified collection.">Determina si el conjunto hash actual es un supraconjunto de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un supraconjunto de la colección especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary vsli:raw="Gets the object that is used to obtain hash codes for the keys and to check the equality of values in the immutable hash set.">Obtiene el objeto que se utiliza para obtener los códigos hash para las claves y para comprobar la igualdad de valores en el conjunto hash inmutable.</summary>
      <returns vsli:raw="The comparer used to obtain hash codes for the keys and check equality.">Comparador que se utiliza para obtener códigos hash para las claves y comprobar la igualdad.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set overlaps with the specified collection.">Determina si el conjunto hash inmutable actual se superpone a la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual y la colección especificada comparten al menos un elemento común; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable hash set.">Elimina el elemento especificado de este conjunto hash inmutable.</summary>
      <param name="item" vsli:raw="The element to remove.">Elemento que se va a quitar.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Nuevo conjunto con el elemento especificado eliminado o el conjunto actual si no se encuentra el elemento en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set and the specified collection contain the same elements.">Determina si el conjunto hash inmutable actual y la colección especificada contienen los mismos elementos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si los conjuntos son iguales; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains only elements that are present either in the current set or in the specified collection, but not both.">Crea un conjunto hash inmutable que únicamente contiene elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Conjunto nuevo que únicamente contiene elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the set.">Agrega un elemento al conjunto.</summary>
      <param name="item" vsli:raw="The object to add to the set.">Objeto que se va a agregar al conjunto.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">El conjunto es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from this set.">Quita todos los elementos de este conjunto.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">El conjunto es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">Copia los elementos del conjunto en una matriz, comenzando en un índice concreto.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde el conjunto. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">Vea la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">Quita la primera aparición de un objeto específico del conjunto.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">Objeto que se va a quitar del conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el elemento se quita correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An enumerator that iterates through the collection.">Enumerador que recorre en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value that indicates whether the element was successfully added.">Agrega un elemento al conjunto actual y devuelve un valor que indica si el elemento se ha agregado correctamente.</summary>
      <param name="item" vsli:raw="The element to add to the collection.">Elemento que se agregará a la colección.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">
        <see langword="true" /> si el elemento se ha agregado al conjunto; <see langword="false" /> si el elemento ya está en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">Quita del conjunto actual todos los elementos de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection of items to remove.">Colección de elementos que se van a eliminar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Modifica el conjunto actual para que solo contenga elementos que también estén en una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current collection.">Colección que se va a comparar con la colección actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Modifica el conjunto actual para que únicamente contenga elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or in the specified collection.">Modifica el conjunto actual para que contenga todos los elementos que están presentes en el conjunto actual o en la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">Copia los elementos del conjunto en una matriz, comenzando en un índice concreto.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde el conjunto. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">Vea la interfaz <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Vea <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a set.">Devuelve un enumerador que recorre en iteración un conjunto.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Enumerador que se puede usar para recorrer en iteración el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Agrega el elemento especificado a este conjunto inmutable.</summary>
      <param name="item" vsli:raw="The element to add.">Elemento que se va a agregar.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Nuevo conjunto con el elemento agregado o este conjunto si el elemento ya está en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty set that has the same sorting and ordering semantics as this instance.">Recupera un conjunto vacío que tiene la misma ordenación y semántica de orden que esta instancia.</summary>
      <returns vsli:raw="An empty set that has the same sorting or ordering semantics as this instance.">Conjunto vacío que tiene la misma ordenación o semántica de orden que esta instancia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current set.">Quita del conjunto actual los elementos de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">Colección de elementos que se van a quitar de este conjunto.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Nuevo conjunto con los elementos que se han quitado; o el conjunto original si no se encontraba ninguno de los elementos en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">Crea un conjunto inmutable que contiene los elementos que existen en este conjunto y en el conjunto especificado.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Nuevo conjunto inmutable que contiene los elementos que existen en ambos conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Elimina el elemento especificado de este conjunto inmutable.</summary>
      <param name="item" vsli:raw="The element to remove.">Elemento que se va a quitar.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Nuevo conjunto con el elemento especificado eliminado o el conjunto actual si no se encuentra el elemento en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Crea un conjunto inmutable que únicamente contiene elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Conjunto nuevo que únicamente contiene elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Crea un conjunto inmutable que contiene todos los elementos que están presentes en el conjunto actual o en la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Colección de la que se van a agregar elementos.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Nuevo conjunto inmutable con los elementos agregados; o conjunto original si ya estaban todos los elementos en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary vsli:raw="Creates an immutable hash set that has the same contents as this set and can be efficiently mutated across multiple operations by using standard mutable interfaces.">Crea un conjunto hash inmutable con el mismo contenido que este conjunto y que puede transformarse eficazmente en varias operaciones mediante interfaces mutables estándar.</summary>
      <returns vsli:raw="A set with the same contents as this set that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Conjunto con el mismo contenido que este conjunto que puede transformarse eficazmente en varias operaciones mediante interfaces mutables estándar.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Busca en el conjunto un valor determinado y devuelve un valor igual al que encuentra, si encuentra alguno.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">Valor que se va a buscar.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">Valor del conjunto encontrado por la búsqueda, o valor original si la búsqueda no produjo ninguna coincidencia.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Valor que indica si la búsqueda se ha realizado correctamente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable hash set that contains all elements that are present in either the current set or in the specified collection.">Crea un nuevo conjunto hash inmutable que contiene todos los elementos que están presentes en el conjunto actual o en la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Colección de la que se van a agregar elementos.</param>
      <returns vsli:raw="A new immutable hash set with the items added; or the original set if all the items were already in the set.">Nuevo conjunto hash inmutable con los elementos agregados; o conjunto original si ya estaban todos los elementos en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable hash set that uses the specified equality comparer for its search methods.">Obtiene una instancia del conjunto hash inmutable que utiliza al comparador de igualdad especificado para sus métodos de búsqueda.</summary>
      <param name="equalityComparer" vsli:raw="The equality comparer to use.">Comparador de igualdad que se va a usar.</param>
      <returns vsli:raw="An instance of this immutable hash set that uses the given comparer.">Instancia de este conjunto hash inmutable que usa el comparador especificado.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary vsli:raw="Contains interlocked exchange mechanisms for immutable collections.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Contiene mecanismos de intercambio interbloqueados para colecciones inmutables.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">Obtiene el valor de un diccionario después de agregarlo o de actualizar una entrada existente.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">Variable o campo para actualizar de manera atomática si el  especificado no se encuentra en el diccionario.</param>
      <param name="key" vsli:raw="The key for the value to add or update.">Clave del valor a agregar o actualizar.</param>
      <param name="addValue" vsli:raw="The value to use if no previous value exists.">Valor a utilizar si no existe ningún valor anterior.</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">Función que recibe la clave y el valor anterior y devuelve el nuevo valor con el que se va a actualizar el diccionario.</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">Tipo de clave almacenada por el diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">El tipo de valor almacenado por el diccionario.</typeparam>
      <returns vsli:raw="The added or updated value.">Valor agregado o actualizado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">Obtiene el valor de un diccionario después de agregarlo o de actualizar una entrada existente.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">Variable o campo para actualizar de manera atomática si el  especificado no se encuentra en el diccionario.</param>
      <param name="key" vsli:raw="The key for the value to add or update.">Clave del valor a agregar o actualizar.</param>
      <param name="addValueFactory" vsli:raw="The function that receives the key and returns a new value to add to the dictionary when no value previously exists.">Función que recibe la clave y devuelve un nuevo valor para agregar al diccionario cuando no existe ningún valor anteriormente.</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">Función que recibe la clave y el valor anterior y devuelve el nuevo valor con el que se va a actualizar el diccionario.</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">Tipo de clave almacenada por el diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">El tipo de valor almacenado por el diccionario.</typeparam>
      <returns vsli:raw="The added or updated value.">Valor agregado o actualizado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary vsli:raw="Atomically enqueues an element to the end of a queue.">Pone en cola un elemento al final de una cola automáticamente.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">Variable o campo para actualizar de manera automática.</param>
      <param name="value" vsli:raw="The value to enqueue.">Valor que se va a poner en cola.</param>
      <typeparam name="T" vsli:raw="The type of items contained in the collection.">Tipo de elementos contenidos en la colección.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Obtiene el valor de la clave especificada del diccionario, o si no se encontró la clave, se agrega un nuevo valor al diccionario.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified key is not in the dictionary.">Variable o campo para actualizar de manera automática si la clave especificada no se encuentra en el diccionario.</param>
      <param name="key" vsli:raw="The key for the value to get or add.">Clave del valor que se va a obtener o agregar.</param>
      <param name="value" vsli:raw="The value to add to the dictionary the key is not found.">Valor que se va a agregar al diccionario si no se encuentra la clave.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Tipo de claves contenidas en la colección.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Tipo de valores contenidos en la colección.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">Valor de la clave especificada o <paramref name="valueFactory" /> si la clave no estaba presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Obtiene el valor de la clave especificada del diccionario, o si no se encontró la clave, se agrega un nuevo valor al diccionario.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">Variable o campo para actualizar de manera atomática si el  especificado no se encuentra en el diccionario.</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">Clave del valor que se va a recuperar o agregar.</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found. This delegate will not be invoked more than once.">Función que se va a ejecutar para obtener el valor que se va a insertar en el diccionario si no se encuentra la clave. Este delegado no se invocará más de una vez.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Tipo de claves contenidas en la colección.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Tipo de valores contenidos en la colección.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">Valor de la clave especificada o <paramref name="valueFactory" /> si la clave no estaba presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Obtiene el valor de la clave especificada del diccionario, o si no se encontró la clave, se agrega un nuevo valor al diccionario.</summary>
      <param name="location" vsli:raw="The variable or field to update if the specified is not in the dictionary.">Variable o campo para actualizar si el especificado no se encuentra en el diccionario.</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">Clave del valor que se va a recuperar o agregar.</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found.">Función que se va a ejecutar para obtener el valor que se va a insertar en el diccionario si no se encuentra la clave.</param>
      <param name="factoryArgument" vsli:raw="The argument to pass to the value factory.">Argumento que se va a pasar al generador de valores.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Tipo de claves contenidas en la colección.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Tipo de valores contenidos en la colección.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of the argument supplied to the value factory.">Tipo del argumento proporcionado al generador de valores.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">Valor de la clave especificada o <paramref name="valueFactory" /> si la clave no estaba presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.">Compara dos matrices inmutables para comprobar si son iguales y, si lo son, reemplaza una de las matrices.</summary>
      <param name="location" vsli:raw="The destination, whose value is compared with &lt;paramref name=&quot;comparand&quot; /&gt; and possibly replaced.">Destino, cuyo valor se compara con <paramref name="comparand" /> y que posiblemente se reemplace.</param>
      <param name="value" vsli:raw="The value that replaces the destination value if the comparison results in equality.">Valor que reemplaza el valor de destino si la comparación da como resultado una igualdad.</param>
      <param name="comparand" vsli:raw="The value that is compared to the value at &lt;paramref name=&quot;location&quot; /&gt;.">Valor que se compara con el valor que hay en <paramref name="location" />.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Tipo de elemento almacenado por la matriz.</typeparam>
      <returns vsli:raw="The original value in &lt;paramref name=&quot;location&quot; /&gt;.">Valor original de <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array and returns a reference to the original array, as an atomic operation.">Establece una matriz en el valor especificado y devuelve una referencia a la matriz original, como una operación atómica.</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">Matriz que se va a establecer en el valor especificado.</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set.">Valor en el que está establecido el parámetro <paramref name="location" />.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Tipo de elemento almacenado por la matriz.</typeparam>
      <returns vsli:raw="The original value of &lt;paramref name=&quot;location&quot; /&gt;.">Valor original de <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array if the array has not been initialized.">Si no se ha inicializado la matriz se establece una matriz en la matriz especificada.</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">Matriz que se va a establecer en el valor especificado.</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set, if it's not initialized.">Valor en el que está establecido el parámetro <paramref name="location" />, si no se ha inicializado.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Tipo de elemento almacenado por la matriz.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array was assigned the specified value;  otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se le asignó el valor especificado a la matriz; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary vsli:raw="Pushes a new element onto the stack.">Inserta un nuevo elemento en la pila.</summary>
      <param name="location" vsli:raw="The stack to update.">Pila para actualizar.</param>
      <param name="value" vsli:raw="The value to push on the stack.">Valor que se va a insertar en la pila.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">Tipo de elementos de la pila.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Adds the specified key and value to the dictionary if the key is not in the dictionary.">Agrega la clave y el valor especificados al diccionario si la clave no está en el diccionario.</summary>
      <param name="location" vsli:raw="The dictionary to update with the specified key and value.">Diccionario para actualizar con la clave y el valor especificados.</param>
      <param name="key" vsli:raw="The key to add, if is not already defined in the dictionary.">Clave para agregar, si no se ha definido en el diccionario.</param>
      <param name="value" vsli:raw="The value to add.">El valor que se va a agregar.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Tipo de claves contenidas en la colección.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Tipo de valores contenidos en la colección.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is not in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, si la clave no está en el diccionario; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary vsli:raw="Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.">Quita de forma atómica y devuelve el elemento especificado en el encabezado de la cola, si la cola no está vacía.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">Variable o campo para actualizar de manera automática.</param>
      <param name="value" vsli:raw="Set to the value from the head of the queue, if the queue not empty.">Se establece en el valor del encabezado de la cola, si la cola no está vacía.</param>
      <typeparam name="T" vsli:raw="The type of items in the queue.">Tipo de elementos de la cola.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the queue is not empty and the head element is removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la cola no está vacía y se quita el elemento del encabezado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary vsli:raw="Removes an element from the top of the stack, if there is an element to remove.">Quita un elemento de la parte superior de la pila, si hay un elemento para quitar.</summary>
      <param name="location" vsli:raw="The stack to update.">Pila para actualizar.</param>
      <param name="value" vsli:raw="Receives the value removed from the stack, if the stack is not empty.">Recibe el valor quitado de la pila, si la pila no está vacía.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">Tipo de elementos de la pila.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element is removed from the stack; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un elemento se quita de la pila; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary vsli:raw="Removes the element with the specified key, if the key exists.">Quita el elemento con la clave especificada si la clave existe.</summary>
      <param name="location" vsli:raw="The dictionary to update.">Diccionario que se va a actualizar.</param>
      <param name="key" vsli:raw="The key to remove.">Clave que se va a quitar.</param>
      <param name="value" vsli:raw="Receives the value of the removed item, if the dictionary is not empty.">Recibe el valor del elemento quitado, si el diccionario no está vacío.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Tipo de claves contenidas en la colección.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Tipo de valores contenidos en la colección.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se ha encontrado y eliminado la clave; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary vsli:raw="Sets the specified key to the specified value if the specified key already is set to a specific value.">Establece la clave especificada en el valor especificado si la clave especificada ya está establecida en un valor específico.</summary>
      <param name="location" vsli:raw="The dictionary to update.">Diccionario que se va a actualizar.</param>
      <param name="key" vsli:raw="The key to update.">Clave a actualizar.</param>
      <param name="newValue" vsli:raw="The new value to set.">Nuevo valor que se va establecer.</param>
      <param name="comparisonValue" vsli:raw="The current value for &lt;paramref name=&quot;key&quot; /&gt; in order for the update to succeed.">Valor actual de <paramref name="key" /> en orden para que la actualización tenga éxito.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Tipo de claves contenidas en la colección.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Tipo de valores contenidos en la colección.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; and &lt;paramref name=&quot;comparisonValue&quot; /&gt; are present in the dictionary and comparison was updated to &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="key" /> y <paramref name="comparisonValue" /> están presentes en el diccionario y se ha actualizado la comparación a <paramref name="newValue" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">Transforma un valor local con semántica de transacción de bloqueo optimista mediante una función de transformación especificada.             La transformación se vuelve a intentar tantas veces como sea necesario para ganar la carrera de bloqueo optimista.</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">Variable o campo que se va a modificar, al que pueden acceder varios subprocesos.</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">Función que transforma el valor. Esta función no debe tener efectos secundarios, ya que se puede ejecutar varias veces cuando se producen carreras con otros subprocesos.</param>
      <typeparam name="T" vsli:raw="The type of data.">El tipo de datos.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">Es <see langword="true" /> si se modifica el valor de la ubicación al aplicar el resultado de la función <paramref name="transformer" />; es <see langword="false" /> si el valor de la ubicación es el mismo porque la última invocación de <paramref name="transformer" /> ha devuelto el valor existente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">Transforma un valor local con semántica de transacción de bloqueo optimista mediante una función de transformación especificada.             La transformación se vuelve a intentar tantas veces como sea necesario para ganar la carrera de bloqueo optimista.</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">Variable o campo que se va a modificar, al que pueden acceder varios subprocesos.</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">Función que transforma el valor. Esta función no debe tener efectos secundarios, ya que se puede ejecutar varias veces cuando se producen carreras con otros subprocesos.</param>
      <param name="transformerArgument" vsli:raw="The argument to pass to &lt;paramref name=&quot;transformer&quot; /&gt;.">El argumento que se va a pasar a <paramref name="transformer" />.</param>
      <typeparam name="T" vsli:raw="The type of data.">El tipo de datos.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of argument passed to the &lt;paramref name=&quot;transformer&quot; /&gt;.">Tipo de argumento pasado a la <paramref name="transformer" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">Es <see langword="true" /> si se modifica el valor de la ubicación al aplicar el resultado de la función <paramref name="transformer" />; es <see langword="false" /> si el valor de la ubicación es el mismo porque la última invocación de <paramref name="transformer" /> ha devuelto el valor existente.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Proporciona un conjunto de métodos de inicialización para las instancias de la clase <see cref="T:System.Collections.Immutable.ImmutableList`1" />.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary vsli:raw="Creates an empty immutable list.">Crea una lista inmutable vacía.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the .">Tipo de elementos a almacenar en el .</typeparam>
      <returns vsli:raw="An empty immutable list.">Lista inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable list that contains the specified item.">Crea una nueva lista inmutable que contiene el elemento especificado.</summary>
      <param name="item" vsli:raw="The item to prepopulate the list with.">Elemento con el que rellenar la lista.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">Tipo de elementos del .</typeparam>
      <returns vsli:raw="A new  that contains the specified item.">Nuevo  que contiene el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable list that contains the specified array of items.">Crea una nueva lista que contiene la matriz especificada de elementos.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the list with.">Matriz que contiene los elementos con los que rellenar la lista.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">Tipo de elementos del .</typeparam>
      <returns vsli:raw="A new immutable list that contains the specified items.">Nueva lista inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable list builder.">Crea un nuevo generador de listas inmutable.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Tipo de elementos ordenados por colección.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Generador de colecciones inmutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable list that contains the specified items.">Crea una nueva lista inmutable que contiene los elementos especificados.</summary>
      <param name="items" vsli:raw="The items to add to the list.">Elementos que van a agregarse a la lista.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">Tipo de elementos del .</typeparam>
      <returns vsli:raw="An immutable list that contains the specified items.">Lista inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">Busca el objeto especificado y devuelve el índice de base cero de la primera aparición en la lista.</summary>
      <param name="list" vsli:raw="The list to search.">Lista en la que buscar.</param>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">Objeto que se va a buscar en la lista. El valor puede ser null para los tipos de referencia.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo de elementos de la lista.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that extends from index to the last element, if found; otherwise, -1.">Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista que abarca desde el índice hasta el último elemento, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">Busca el objeto especificado y devuelve el índice de base cero de la primera aparición en la lista.</summary>
      <param name="list" vsli:raw="The list to search.">Lista en la que buscar.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Objeto que se va a buscar en la lista inmutable. El valor puede ser null para los tipos de referencia.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo de elementos de la lista.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from index to the last element, if found; otherwise, -1.">Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista inmutable que abarca desde el índice hasta el último elemento, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de la lista inmutable que abarca desde el índice especificado hasta el último elemento.</summary>
      <param name="list" vsli:raw="The list to search.">Lista en la que buscar.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Objeto que se va a buscar en la lista inmutable. El valor puede ser null para los tipos de referencia.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo de elementos de la lista.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista inmutable que abarca desde el índice hasta el último elemento, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de la lista inmutable que abarca desde el índice especificado hasta el último elemento.</summary>
      <param name="list" vsli:raw="The list to search.">Lista en la que buscar.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Objeto que se va a buscar en la lista inmutable. El valor puede ser null para los tipos de referencia.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo de elementos de la lista.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista inmutable que abarca desde el índice hasta el último elemento, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Busca el objeto especificado y devuelve el índice de base cero de la última aparición en toda la lista inmutable.</summary>
      <param name="list" vsli:raw="The list to search.">Lista en la que buscar.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Objeto que se va a buscar en la lista inmutable. El valor puede ser null para los tipos de referencia.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo de elementos de la lista.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">Índice de base cero de la última aparición del elemento en toda la lista inmutable, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Busca el objeto especificado y devuelve el índice de base cero de la última aparición en toda la lista inmutable.</summary>
      <param name="list" vsli:raw="The list to search.">Lista en la que buscar.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Objeto que se va a buscar en la lista inmutable. El valor puede ser null para los tipos de referencia.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo de elementos de la lista.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">Índice de base cero de la última aparición del elemento en toda la lista inmutable, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de la lista inmutable que abarca desde el primer elemento hasta el índice especificado.</summary>
      <param name="list" vsli:raw="The list to search.">Lista en la que buscar.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Objeto que se va a buscar en la lista inmutable. El valor puede ser null para los tipos de referencia.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo de elementos de la lista.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">Índice de base cero de la última aparición del elemento dentro del intervalo de elementos de la lista inmutable que abarca desde el primer elemento hasta el índice, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de la lista inmutable que abarca desde el primer elemento hasta el índice especificado.</summary>
      <param name="list" vsli:raw="The list to search.">Lista en la que buscar.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Objeto que se va a buscar en la lista inmutable. El valor puede ser null para los tipos de referencia.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo de elementos de la lista.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">Índice de base cero de la última aparición del elemento dentro del intervalo de elementos de la lista inmutable que abarca desde el primer elemento hasta el índice, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Removes the specified value from this list.">Quita el valor especificado de la lista.</summary>
      <param name="list" vsli:raw="The list to search.">Lista en la que buscar.</param>
      <param name="value" vsli:raw="The value to remove.">Valor que se va a quitar.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo de elementos de la lista.</typeparam>
      <returns vsli:raw="A new immutable list with the element removed, or this list if the element is not in this list.">Nueva lista inmutable con el elemento quitado o esta lista si el elemento no está en esta lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Removes the specified values from this list.">Quita los valores especificados de esta lista.</summary>
      <param name="list" vsli:raw="The list to search.">Lista en la que buscar.</param>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Elementos a quitar si se encuentran coincidencias en esta lista.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo de elementos de la lista.</typeparam>
      <returns vsli:raw="A new immutable list with the elements removed.">Nueva lista inmutable con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary vsli:raw="Replaces the first equal element in the list with the specified element.">Reemplaza el primer elemento igual de la lista por el elemento especificado.</summary>
      <param name="list" vsli:raw="The list to search.">Lista en la que buscar.</param>
      <param name="oldValue" vsli:raw="The element to replace.">Elemento que se va a reemplazar.</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">Elemento por el que se va a reemplazar el elemento antiguo.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo de elementos de la lista.</typeparam>
      <returns vsli:raw="The new list -- even if the value being replaced is equal to the new value for that position.">Nueva lista (incluso si el valor que se va a reemplazar es igual que el nuevo valor para esa posición).</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">Se produce cuando el valor antiguo no existe en la lista.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable list of its contents.">Enumera una secuencia y genera una lista inmutable de su contenido.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Secuencia que se va a enumerar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo de los elementos de la secuencia.</typeparam>
      <returns vsli:raw="An immutable list that contains the items in the specified sequence.">Lista inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary vsli:raw="Creates an immutable list from the current contents of the builder's collection.">Crea una lista inmutable a partir del contenido de la colección del generador.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable list from.">Generador desde el que se va a crear la lista inmutable.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the list.">Tipo de los elementos de la lista.</typeparam>
      <returns vsli:raw="An immutable list that contains the current contents in the builder's collection.">Lista inmutable que incluye el contenido actual de la colección del generador.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary vsli:raw="Represents an immutable list, which is a strongly typed list of objects that can be accessed by index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa una lista de objetos fuertemente tipados inmutable a la que se puede obtener acceso por índice.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">Tipo de elementos en la lista.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary vsli:raw="Adds the specified object to the end of the immutable list.">Agrega el objeto especificado al final de la lista inmutable.</summary>
      <param name="value" vsli:raw="The object to add.">Objeto que se va a agregar.</param>
      <returns vsli:raw="A new immutable list with the object added.">Una nueva lista inmutable con el objeto agregado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the elements of the specified collection to the end of the immutable list.">Agrega los elementos de la colección especificada al final de la lista inmutable.</summary>
      <param name="items" vsli:raw="The collection whose elements will be added to the end of the list.">Colección cuyos elementos se agregarán al final de la lista.</param>
      <returns vsli:raw="A new immutable list with the elements added.">Una nueva lista inmutable con los elementos agregados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element.">Busca la lista ordenada completa de un elemento usando el comparador predeterminado y devuelve el índice de base cero del elemento.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">Índice de base cero del elemento en la lista ordenada, si es que se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que el elemento o, si no hay ningún elemento mayor, el complemento bit a bit de <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer cannot find a comparer implementation of the for type T.">El comparador predeterminado no puede encontrar una implementación de comparador para el tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire sorted list for an element using the specified comparer and returns the zero-based index of the element.">Busca en la lista completa ordenada un elemento usando el comparador especificado y devuelve el índice de base cero del elemento.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">Objeto que se va a buscar. El valor puede ser null para los tipos de referencia.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements or null to use the default comparer.">Implementación del comparador que se va a utilizar al comparar elementos, o null para utilizar el comparador predeterminado.</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">Índice de base cero del elemento en la lista ordenada, si es que se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que el elemento o, si no hay ningún elemento mayor, el complemento bit a bit de <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="comparer is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">El comparador es <see langword="null" />, y el comparador predeterminado no puede encontrar una implementación de comparador para el tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches a range of elements in the sorted list for an element using the specified comparer and returns the zero-based index of the element.">Busca un intervalo de elementos en la lista ordenada para obtener un elemento usando el comparador especificado y devuelve el índice de base cero del elemento.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">Índice inicial de base cero del intervalo que se va a buscar.</param>
      <param name="count" vsli:raw="The length of the range to search.">Longitud del intervalo en el que se va a buscar.</param>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">Objeto que se va a buscar. El valor puede ser null para los tipos de referencia.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Implementación de comparador que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado.</param>
      <returns vsli:raw="The zero-based index of item in the sorted list, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;paramref name=&quot;count&quot; /&gt;.">Índice de base cero del elemento en la lista ordenada, si es que se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que el elemento o, si no hay ningún elemento mayor, el complemento bit a bit de <paramref name="count" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="index is less than 0 or &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">El índice es menor que 0 o <paramref name="count" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="index and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the list.">El índice y <paramref name="count" /> no denotan un intervalo válido en la lista.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">
        <paramref name="comparer" /> es <see langword="null" />, y el comparador predeterminado no puede encontrar una implementación de comparador para el tipo T.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary vsli:raw="Represents a list that mutates with little or no memory allocations and that can produce or build on immutable list instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa una lista que se transforma con poca o ninguna asignación de memoria y que puede generar o compilar instancias de lista inmutables muy eficazmente.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an item to the immutable list.">Agrega un elemento a la lista inmutable.</summary>
      <param name="item" vsli:raw="The item to add to the list.">Elemento que va a agregarse a la lista.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a series of elements to the end of this list.">Agrega una serie de elementos al final de esta lista.</summary>
      <param name="items" vsli:raw="The elements to add to the end of the list.">Elementos que se agregan al final de la lista.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the default comparer and returns the zero-based index of the element.">Busca en toda la <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> un elemento usando el comparador predeterminado y devuelve el índice de base cero del elemento.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">Objeto que se va a buscar. El valor puede ser null para los tipos de referencia.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">Índice de base cero del elemento de la <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, si se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">El comparador predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default" /> no puede encontrar una implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> o de la interfaz <see cref="T:System.IComparable" /> para el tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">Busca la <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> completa para un elemento usando el comparador especificado y devuelve el índice de base cero del elemento.</summary>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">Objeto que se va a buscar. Este valor puede ser null para los tipos de referencia.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">Implementación que se va a utilizar al comparar elementos, o <see langword="null" /> para el comparador predeterminado.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">Índice de base cero del elemento de la <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, si se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> es <see langword="null" /> y el comparador predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default" /> no puede encontrar una implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> o la interfaz <see cref="T:System.IComparable" /> del tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the specified range of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">Busca en el rango especificado de <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> un elemento usando el comparador especificado y devuelve el índice de base cero del elemento.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">Índice inicial de base cero del intervalo que se va a buscar.</param>
      <param name="count" vsli:raw="The length of the range to search.">Longitud del intervalo en el que se va a buscar.</param>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">Objeto que se va a buscar. Este valor puede ser null para los tipos de referencia.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">Implementación que se va a utilizar al comparar elementos, o <see langword="null" /> para el comparador predeterminado.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">Índice de base cero del elemento de la <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, si se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> es menor que 0.
O bien
<paramref name="count" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> y <paramref name="count" /> no denotan un intervalo válido en <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> es <see langword="null" /> y el comparador predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default" /> no puede encontrar una implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> o la interfaz <see cref="T:System.IComparable" /> del tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Elimina todos los elementos de la lista inmutable.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">Determina si la lista inmutable contiene un valor específico.</summary>
      <param name="item" vsli:raw="The object to locate in the list.">Objeto que se va a buscar en la lista.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el elemento se encuentra en la lista; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Creates a new immutable list from the list represented by this builder by using the converter function.">Crea una nueva lista inmutable de la lista representada por este generador con la función de conversión.</summary>
      <param name="converter" vsli:raw="The converter function.">Función de conversión.</param>
      <typeparam name="TOutput" vsli:raw="The type of the output of the delegate converter function.">Tipo del resultado de la función de conversión de delegado.</typeparam>
      <returns vsli:raw="A new immutable list from the list represented by this builder.">Nueva lista inmutable de la lista representada por este generador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">Copia toda la lista inmutable en una matriz unidimensional compatible, empezando en el principio de la matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde la lista inmutable. La matriz debe tener una indización de base cero.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Copia la lista inmutable completa en una matriz unidimensional compatible, empezando por el índice especificado de la matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde la lista inmutable. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">Índice de base cero de la matriz donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Copia la lista inmutable completa en una matriz unidimensional compatible, empezando por el índice especificado de la matriz de destino.</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">Índice de base cero de la lista inmutable de origen donde comienza la copia.</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde la lista inmutable. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <param name="count" vsli:raw="The number of elements to copy.">Número de elementos que se van a copiar.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable list.">Obtiene el número de elementos de esta lista inmutable.</summary>
      <returns vsli:raw="The number of elements in this list.">Número de elementos de esta lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">Determina si la lista inmutable contiene elementos que cumplen las condiciones definidas por el predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Delegado que define las condiciones de los elementos que se van a buscar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la lista inmutable contiene uno o varios elementos que cumplen las condiciones definidas por el predicado especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve la primera aparición en toda la lista inmutable.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Primer elemento que coincide con las condiciones definidas por el predicado especificado, si se encuentra; de lo contrario, valor predeterminado para el tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">Recupera todos los elementos que coinciden con las condiciones definidas por el predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Delegado que define las condiciones de los elementos que se van a buscar.</param>
      <returns vsli:raw="An immutable list containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">Lista inmutable que contiene todos los elementos que cumplen las condiciones definidas por el predicado especificado, si se encuentran; en caso contrario, devuelve una lista inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en el intervalo de elementos de la lista inmutable que comienza en el índice especificado y contiene el número especificado de elementos.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Índice inicial de base cero de la búsqueda.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en el intervalo de elementos de la lista inmutable que va desde el índice especificado hasta el último elemento.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Índice inicial de base cero de la búsqueda.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en toda la lista inmutable.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve la última aparición en toda la lista inmutable.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Último elemento que coincide con las condiciones definidas por el predicado especificado, si se encuentra; de lo contrario, valor predeterminado para el tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en el intervalo de elementos de la lista inmutable que contiene el número especificado de elementos y termina en el índice especificado.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en el intervalo de elementos de la lista inmutable que va desde el primer elemento hasta el índice especificado.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en toda la lista inmutable.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the list.">Realiza la acción especificada en cada elemento de la lista.</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the list.">Delegado para realizar la acción en cada elemento de la lista.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Un enumerador que se puede utilizar para recorrer en iteración la lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">Crea una copia superficial de un intervalo de elementos en la lista inmutable de origen.</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">Índice de base cero en el que empieza el intervalo.</param>
      <param name="count" vsli:raw="The number of elements in the range.">Número de elementos del intervalo.</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">Copia superficial de un intervalo de elementos en la lista inmutable de origen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list.">Busca el objeto especificado y devuelve el índice de base cero de la primera aparición en el rango de elementos de la lista inmutable.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list, if found; otherwise, -1.">Índice de base cero de la primera aparición de <paramref name="item" /> dentro del intervalo de elementos de la lista inmutable, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de la lista inmutable que abarca desde el índice especificado hasta el último elemento.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from &lt;paramref name=&quot;index&quot; /&gt; to the last element, if found; otherwise, -1.">Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista inmutable que abarca desde <paramref name="index" /> hasta el último elemento, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de la lista inmutable que comienza en el índice especificado y contiene el número especificado de elementos.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1.">Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista inmutable que comienza en <paramref name="index" /> y contiene el número de elementos de <paramref name="count" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; that starts at the specified index and contains the specified number of elements.">Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> que comienza en el índice especificado y contiene el número especificado de elementos.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <param name="count" vsli:raw="The number of elements to search.">Número de elementos que se van a buscar.</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">Comparador de valores que se utilizará para comparar la igualdad de elementos.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista inmutable que comienza en <paramref name="index" /> y contiene el número de elementos de <paramref name="count" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item to the immutable list at the specified index.">Inserta un elemento en la lista inmutable en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Índice basado en cero en el que debe insertarse <paramref name="item" />.</param>
      <param name="item" vsli:raw="The object to insert into the immutable list.">Objeto que se va a insertar en la lista inmutable.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">Inserta los elementos de una colección en la lista inmutable en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">Índice de base cero donde se deben insertar los nuevos elementos.</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted into the immutable list. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are null, if type &lt;c&gt;T&lt;/c&gt; is a reference type.">Colección cuyos elementos se deben insertar en la lista inmutable. La propia colección no puede ser <see langword="null" />, pero puede contener elementos null si el tipo <c>T</c> es un tipo de referencia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value for a given index in the list.">Obtiene o establece el valor de un índice determinado de la lista.</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">Índice del elemento que se va a obtener o establecer.</param>
      <returns vsli:raw="The value at the specified index.">Valor en el índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the value for a given &lt;paramref name=&quot;index&quot; /&gt; into the list.">Obtiene una referencia de solo lectura al valor de un elemento <paramref name="index" /> determinado en la lista.</summary>
      <param name="index" vsli:raw="The index of the desired element.">Índice del elemento elegido.</param>
      <returns vsli:raw="A read-only reference to the value at the specified &lt;paramref name=&quot;index&quot; /&gt;.">Referencia de solo lectura al valor en el elemento <paramref name="index" /> especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Busca el objeto especificado y devuelve el índice de base cero de la última aparición en toda la lista inmutable.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire immutable list, if found; otherwise, -1.">Índice de base cero de la última aparición de <paramref name="item" /> en toda la lista inmutable, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de la lista inmutable que abarca desde el primer elemento hasta el índice especificado.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that extends from the first element to &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la última aparición de <paramref name="item" /> dentro del intervalo de elementos de la lista inmutable que abarca desde el primer elemento hasta <paramref name="index" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de la lista inmutable que contiene el número de elementos especificado y termina en el índice determinado.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that contains &lt;paramref name=&quot;count&quot; /&gt; number of elements and ends at &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la última aparición de <paramref name="item" /> dentro del intervalo de elementos de la lista inmutable que contiene el número de elementos de <paramref name="count" /> y termina en <paramref name="index" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de la lista inmutable que contiene el número de elementos especificado y termina en el índice determinado.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <param name="count" vsli:raw="The number of elements to search.">Número de elementos que se van a buscar.</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">Comparador de valores que se utilizará para comparar la igualdad de elementos.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista inmutable que comienza en <paramref name="index" /> y contiene el número de elementos de <paramref name="count" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Quita la primera repetición de un objeto específico de la lista inmutable.</summary>
      <param name="item" vsli:raw="The object to remove from the list.">Objeto que se va a quitar de la lista.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item is not found in the list.">
        <see langword="true" /> si el elemento se ha quitado correctamente de la lista; de lo contrario, <see langword="false" />. Este método también devuelve <see langword="false" /> si no se encuentra el elemento en la lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Quita todos los elementos que cumplen las condiciones definidas por el predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Delegado que define las condiciones de los elementos que se van a quitar.</param>
      <returns vsli:raw="The number of elements removed from the immutable list.">Número de elementos que se han quitado de la lista inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">Quita el elemento del índice especificado de la lista inmutable.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove from the list.">Índice de base cero del elemento que se va a quitar de la lista.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">Invierte el orden de los elementos de la lista inmutable completa.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">Invierte el orden de los elementos del intervalo especificado de la lista inmutable.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">Índice inicial de base cero del intervalo que se va a invertir.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">Número de elementos del intervalo que se va a invertir.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the default comparer.">Ordena los elementos de toda la lista inmutable utilizando el comparador predeterminado.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparer.">Ordena los elementos de la lista inmutable completa usando el comparador especificado.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Implementación que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparison object.">Ordena los elementos de la lista inmutable completa usando el objeto de comparación especificado.</summary>
      <param name="comparison" vsli:raw="The object to use when comparing elements.">Objeto ue se va a utilizar al comparar elementos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in a range of elements in the immutable list  by using the specified comparer.">Ordena los elementos en un intervalo de elementos de la lista inmutable usando el comparador especificado.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">Índice inicial de base cero del intervalo que se va a ordenar.</param>
      <param name="count" vsli:raw="The length of the range to sort.">Longitud del intervalo que se va a ordenar.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Implementación que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">Obtiene un valor que indica si esta instancia es de solo lectura.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">Siempre es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the list to an array, starting at a particular array index.">Copia los elementos de la lista en una matriz, comenzando por un índice concreto de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the list. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde la lista. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the list.">Agrega un elemento a la lista.</summary>
      <param name="value" vsli:raw="The object to add to the list.">Objeto que se va a agregar a la lista.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">La posición en la que se insertó el nuevo elemento o -1 para indicar que el elemento no se insertó en la colección.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the list.">Quita todos los elementos de la lista.</summary>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the list contains a specific value.">Determina si la lista contiene un valor específico.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Objeto que se va a buscar en la lista.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Object" /> se encuentra en la lista; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the list.">Determina el índice de un elemento específico de la lista.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Objeto que se va a buscar en la lista.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Devuelve el índice de <paramref name="value" /> si se encuentra en la lista; de lo contrario, devuelve -1.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the list at the specified index.">Inserta un elemento en la lista del índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value" vsli:raw="The object to insert into the list.">Objeto que se va a insertar en la lista.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Obtiene un valor que indica si el objeto <see cref="T:System.Collections.IList" /> tiene un tamaño fijo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Obtiene o establece la clase <see cref="T:System.Object" /> en el índice especificado.</summary>
      <param name="index" vsli:raw="The index.">Índice.</param>
      <returns vsli:raw="The object at the specified index.">Objeto en el índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the list.">Quita la primera aparición de un objeto específico de la lista.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">Objeto que se va a quitar de la lista.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable list based on the contents of this instance.">Crea una lista inmutable basada en el contenido de esta instancia.</summary>
      <returns vsli:raw="An immutable list.">Lista inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">Determina si cada elemento de la lista inmutable cumple las condiciones definidas por el predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">Delegado que define las condiciones que los elementos deben cumplir.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si cada elemento de la lista inmutable cumple las condiciones definidas por el predicado especificado; en caso contrario, es <see langword="false" />. Si la lista no tiene ningún elemento, el valor devuelto es <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable list.">Quita todos los elementos de la lista inmutable.</summary>
      <returns vsli:raw="An empty list that retains the same sort or unordered semantics that this instance has.">Lista vacía que conserva el mismo tipo o semántica desordenada que esta instancia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable list contains the specified value.">Determina si esta lista inmutable contiene el valor especificado.</summary>
      <param name="value" vsli:raw="The value to locate.">Valor que se va a buscar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la lista contiene el valor especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Converts the elements in the current immutable list to another type, and returns a list containing the converted elements.">Convierte en otro tipo los elementos incluidos en la lista inmutable actual y devuelve una lista que contiene los elementos convertidos.</summary>
      <param name="converter" vsli:raw="A delegate that converts each element from one type to another type.">Delegado que convierte cada elemento de un tipo en otro tipo.</param>
      <typeparam name="TOutput" vsli:raw="The type of the elements of the target array.">Tipo de los elementos de la matriz de destino.</typeparam>
      <returns vsli:raw="A list of the target type containing the converted elements from the current &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt;.">Una lista del tipo de destino que contiene los elementos convertidos del elemento <see cref="T:System.Collections.Immutable.ImmutableList`1" /> actual.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">Copia toda la lista inmutable en una matriz unidimensional compatible, empezando en el principio de la matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde la lista inmutable. La matriz debe tener una indización de base cero.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Copia la lista inmutable completa en una matriz unidimensional compatible, empezando por el índice especificado de la matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde la lista inmutable. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a range of elements from the immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Copia un intervalo de elementos de la lista inmutable en una matriz unidimensional compatible, empezando en el índice especificado de la matriz de destino.</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">Índice de base cero de la lista inmutable de origen donde comienza la copia.</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde la lista inmutable. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">Índice de base cero de la matriz donde comienza la copia.</param>
      <param name="count" vsli:raw="The number of elements to copy.">Número de elementos que se van a copiar.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the list.">Obtiene el número de elementos incluidos en la lista.</summary>
      <returns vsli:raw="The number of elements in the list.">Número de elementos de la lista.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary vsli:raw="Gets an empty immutable list.">Obtiene un conjunto vacío con el comparador de ordenación predeterminado.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera el contenido de un árbol binario.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y el procedimiento de instalación)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Elemento de la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Enumerator&quot; /&gt; class.">Libera los recursos utilizados por la instancia actual de la clase <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances enumeration to the next element of the immutable list.">Desplaza la enumeración al siguiente elemento de la lista inmutable.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the list.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable list.">Establece el enumerador en su posición inicial (antes del primer elemento de la lista inmutable).</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">Elemento actual.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">Determina si la lista inmutable contiene elementos que cumplen las condiciones definidas por el predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Delegado que define las condiciones de los elementos que se van a buscar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la lista inmutable contiene uno o varios elementos que cumplen las condiciones definidas por el predicado especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve la primera aparición en toda la lista inmutable.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Primer elemento que coincide con las condiciones definidas por el predicado especificado, si se encuentra; de lo contrario, valor predeterminado para el tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">Recupera todos los elementos que coinciden con las condiciones definidas por el predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Delegado que define las condiciones de los elementos que se van a buscar.</param>
      <returns vsli:raw="An immutable list that contains all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">Lista inmutable que contiene todos los elementos que cumplen las condiciones definidas por el predicado especificado, si se encuentran; en caso contrario, devuelve una lista inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en el intervalo de elementos de la lista inmutable que comienza en el índice especificado y contiene el número especificado de elementos.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Índice inicial de base cero de la búsqueda.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por coincidencia, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en el intervalo de elementos de la lista inmutable que va desde el índice especificado hasta el último elemento.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Índice inicial de base cero de la búsqueda.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por coincidencia, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en toda la lista inmutable.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, -1.">Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por coincidencia, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve la última aparición en toda la lista inmutable.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Último elemento que coincide con las condiciones definidas por el predicado especificado, si se encuentra; de lo contrario, valor predeterminado para el tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en el intervalo de elementos de la lista inmutable que contiene el número especificado de elementos y termina en el índice especificado.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en el intervalo de elementos de la lista inmutable que va desde el primer elemento hasta el índice especificado.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en toda la lista inmutable.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the immutable list.">Realiza la acción especificada en cada elemento de la lista inmutable.</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the immutable list.">Delegado para realizar en cada elemento de la lista inmutable.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Devuelve un enumerador que recorre en iteración la lista inmutable.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the immutable list.">Enumerador que se puede usar para recorrer en iteración la lista inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">Crea una copia superficial de un intervalo de elementos en la lista inmutable de origen.</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">Índice de base cero en el que empieza el intervalo.</param>
      <param name="count" vsli:raw="The number of elements in the range.">Número de elementos del intervalo.</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">Copia superficial de un intervalo de elementos en la lista inmutable de origen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the entire immutable list.">Busca el objeto especificado y devuelve el índice de base cero de la primera aparición en toda la lista inmutable.</summary>
      <param name="value" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;value&quot; /&gt; within the entire immutable list, if found; otherwise, ?1.">Índice de base cero de la primera aparición de <paramref name="value" /> en la totalidad de la lista inmutable, si se encuentra; en caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the list that starts at the specified index and contains the specified number of elements.">Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de la lista que comienza en el índice especificado y contiene el número especificado de elementos.</summary>
      <param name="item" vsli:raw="The object to locate in the list The value can be null for reference types.">Objeto que se va a buscar en la lista. Valor puede ser null para los tipos de referencia.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that starts at index and contains count number of elements, if found; otherwise, -1.">Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista que comienza por el índice y contiene el número de elementos, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified object into the immutable list at the specified index.">Inserta el objeto especificado en la lista inmutable en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the object.">Índice de base cero en el que se inserta el objeto.</param>
      <param name="item" vsli:raw="The object to insert.">Objeto que se va a insertar.</param>
      <returns vsli:raw="The new immutable list after the object is inserted.">Lista inmutable nueva posterior a la inserción del objeto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">Inserta los elementos de una colección en la lista inmutable en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the elements.">Índice de base cero en el que se insertan los elementos.</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted.">Colección cuyos elementos se deben insertar.</param>
      <returns vsli:raw="The new immutable list after the elements are inserted.">Lista inmutable nueva posterior a la inserción de los elementos.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this list is empty.">Obtiene un valor que indica si esta lista está vacía.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la lista está vacía; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index of the list.">Obtiene el elemento situado en el índice especificado de la lista.</summary>
      <param name="index" vsli:raw="The index of the element to retrieve.">El índice del elemento que se va a recuperar.</param>
      <returns vsli:raw="The element at the specified index.">Elemento en el índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="In a get operation, &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">En una operación Get, <paramref name="index" /> es negativo o no es menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Obtiene una referencia de solo lectura al elemento del conjunto en el elemento <paramref name="index" /> especificado.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Índice de base 0 del elemento en el conjunto que se va a devolver.</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">Referencia de solo lectura al elemento en la posición especificada.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">
        <paramref name="index" /> es negativo o no es menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the list that contains the specified number of elements and ends at the specified index.">Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de la lista que contiene el número de elementos especificado y termina en el índice determinado.</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">Objeto que se va a buscar en la lista. El valor puede ser null para los tipos de referencia.</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the list that contains count number of elements and ends at index, if found; otherwise, -1.">Índice de base cero de la última aparición del elemento dentro del intervalo de elementos de la lista que contiene el número de elementos y finaliza en el índice, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from this immutable list.">Quita la primera repetición de un objeto especificado de esta lista inmutable.</summary>
      <param name="value" vsli:raw="The object to remove.">Objeto que se va a quitar.</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">Lista nueva con el objeto eliminado, o esta lista si el objeto especificado no está en esta lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of the object that matches the specified value from this immutable list.">Quita la primera repetición del objeto que coincide con el valor especificado de esta lista inmutable.</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">Valor del elemento que se va a quitar de la lista.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">Lista nueva con el objeto eliminado, o esta lista si el objeto especificado no está en esta lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Quita todos los elementos que cumplen las condiciones definidas por el predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Delegado que define las condiciones de los elementos que se van a quitar.</param>
      <returns vsli:raw="The new list with the elements removed.">Lista nueva con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index.">Quita el elemento en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">Índice de base cero del elemento que se va a quitar.</param>
      <returns vsli:raw="A new list with the element removed.">Lista nueva con el elemento eliminado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list.">Quita un intervalo de elementos de esta lista inmutable.</summary>
      <param name="items" vsli:raw="The collection whose elements should be removed if matches are found in this list.">Colección cuyos elementos deben quitarse si se encuentran coincidencias en esta lista.</param>
      <returns vsli:raw="A new list with the elements removed.">Lista nueva con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified values from this list.">Quita los valores especificados de esta lista.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Elementos a quitar si se encuentran coincidencias en esta lista.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns vsli:raw="A new list with the elements removed.">Lista nueva con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements, starting from the specified index and containing the specified number of elements, from this immutable list.">Quita un intervalo de elementos, empezando por el índice especificado y que contiene el número especificado de elementos de esta lista inmutable.</summary>
      <param name="index" vsli:raw="The starting index to begin removal.">Índice de inicio para comenzar la eliminación.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Número de elementos que se va a quitar.</param>
      <returns vsli:raw="A new list with the elements removed.">Lista nueva con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">Reemplaza el elemento especificado de la lista inmutable por un elemento nuevo.</summary>
      <param name="oldValue" vsli:raw="The element to replace.">Elemento que se va a reemplazar.</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">Elemento con el que se va a reemplazar <paramref name="oldValue" />.</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element.">Nueva lista con el elemento reemplazado, aunque sea igual que el elemento anterior.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the immutable list.">
        <paramref name="oldValue" /> no existe en la lista inmutable.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">Reemplaza el elemento especificado de la lista inmutable por un elemento nuevo.</summary>
      <param name="oldValue" vsli:raw="The element to replace in the list.">Elemento a reemplazar en la lista.</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">Elemento con el que se va a reemplazar <paramref name="oldValue" />.</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to check for equality.">Comparador que se va a utilizar para comprobar la igualdad.</param>
      <returns vsli:raw="A new list with the object replaced, or this list if the specified object is not in this list.">Lista nueva con el objeto sustituido, o esta lista si el objeto especificado no está en esta lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">Invierte el orden de los elementos de la lista inmutable completa.</summary>
      <returns vsli:raw="The reversed list.">Lista invertida.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">Invierte el orden de los elementos del intervalo especificado de la lista inmutable.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">Índice inicial de base cero del intervalo que se va a invertir.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">Número de elementos del intervalo que se va a invertir.</param>
      <returns vsli:raw="The reversed list.">Lista invertida.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element at a given position in the immutable list with the specified element.">Reemplaza un elemento en una posición determinada en la lista inmutable por el elemento especificado.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">Posición en la lista del elemento que se va a reemplazar.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">Elemento por el que se va a reemplazar el elemento antiguo.</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element at that position.">Nueva lista con el elemento reemplazado, aunque sea igual que el elemento anterior de esa posición.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the default comparer.">Ordena los elementos de toda la lista inmutable utilizando el comparador predeterminado.</summary>
      <returns vsli:raw="The sorted list.">Lista ordenada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">Ordena los elementos de toda la lista inmutable utilizando el comparador predeterminado.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Implementación de  que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns vsli:raw="The sorted list.">Lista ordenada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">Ordena los elementos de toda la lista inmutable utilizando el comparador predeterminado.</summary>
      <param name="comparison" vsli:raw="The delegate to use when comparing elements.">Delegado que se va a utilizar al comparar elementos.</param>
      <returns vsli:raw="The sorted list.">Lista ordenada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts a range of elements in the immutable list using the specified comparer.">Ordena un intervalo de elementos de la lista inmutable utilizando el comparador especificado.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">Índice inicial de base cero del intervalo que se va a ordenar.</param>
      <param name="count" vsli:raw="The length of the range to sort.">Longitud del intervalo que se va a ordenar.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Implementación que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns vsli:raw="The sorted list.">Lista ordenada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable list.">Agrega el elemento especificado a la lista inmutable.</summary>
      <param name="item" vsli:raw="The item to add.">Elemento que se va a agregar.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Elimina todos los elementos de la lista inmutable.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Quita la primera repetición de un objeto específico de la lista inmutable.</summary>
      <param name="item" vsli:raw="The object to remove.">Objeto que se va a quitar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original list.">
        <see langword="true" /> si <paramref name="item" /> se ha quitado correctamente de la lista; en caso contrario, <see langword="false" />. Este método también devuelve <see langword="false" /> si <paramref name="item" /> no se encuentra en la lista original.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Devuelve un enumerador que recorre en iteración la lista inmutable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Un enumerador que se puede utilizar para recorrer en iteración la lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an object in the immutable list at the specified index.">Inserta un objeto en la lista inmutable en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Índice basado en cero en el que debe insertarse <paramref name="item" />.</param>
      <param name="item" vsli:raw="The object to insert.">Objeto que se va a insertar.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value at the specified index.">Obtiene o establece el valor en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">Se produce desde el captador cuando <paramref name="index" /> es negativo o no es menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Siempre se produce desde el establecedor.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the value at the specified index.">Elimina el valor en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified array index.">Copia la lista inmutable completa en una matriz unidimensional compatible, empezando por el índice especificado de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from immutable list.">Matriz unidimensional que constituye el destino de los elementos copiados de la lista inmutable.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="This type is immutable, so it is always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">Vea la interfaz <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Vea <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Devuelve un enumerador que recorre en iteración la lista inmutable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Un enumerador que se puede utilizar para recorrer en iteración la lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the immutable list.">Agrega un elemento a la lista inmutable.</summary>
      <param name="value" vsli:raw="The object to add to the list.">Objeto que se va a agregar a la lista.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the list.">La posición en la que se insertó el nuevo elemento o -1 para indicar que el elemento no se insertó en la lista.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Siempre se produce.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Elimina todos los elementos de la lista inmutable.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Siempre se produce.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">Determina si la lista inmutable contiene un valor específico.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Objeto que se va a buscar en la lista.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si se ha encontrado el objeto en la lista; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the immutable list.">Determina el índice de un elemento específico de la lista inmutable.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Objeto que se va a buscar en la lista.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Devuelve el índice de <paramref name="value" /> si se encuentra en la lista; de lo contrario, devuelve -1.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the immutable list at the specified index.">Inserta un elemento en la lista inmutable en el índice específico.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value" vsli:raw="The object to insert into the list.">Objeto que se va a insertar en la lista.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Siempre se produce.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Obtiene un valor que indica si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Obtiene o establece la clase <see cref="T:System.Object" /> en el índice especificado.</summary>
      <param name="index" vsli:raw="The index.">Índice.</param>
      <returns vsli:raw="The value at the specified index.">Valor en el índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">Se produce desde el captador cuando <paramref name="index" /> es negativo o no es menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Siempre se produce desde el establecedor.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Quita la primera repetición de un objeto específico de la lista inmutable.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">Objeto que se va a quitar de la lista.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Siempre se produce.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">Quita el elemento del índice especificado de la lista inmutable.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Siempre se produce.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable list.">Agrega el valor especificado a esta lista inmutable.</summary>
      <param name="value" vsli:raw="The value to add.">El valor que se va a agregar.</param>
      <returns vsli:raw="A new list with the element added.">Una nueva lista con el elemento agregado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified values to this immutable list.">Agrega los valores especificados a esta lista inmutable.</summary>
      <param name="items" vsli:raw="The values to add.">Valores que se van a agregar.</param>
      <returns vsli:raw="A new list with the elements added.">Una nueba lista con los elementos agregados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Retrieves an empty list that has the same sorting and ordering semantics as this instance.">Recupera una lista vacía que tiene la misma ordenación y semántica de orden que esta instancia.</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">Lista vacía que tiene la misma ordenación y semántica de orden que esta instancia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">Inserta el elemento especificado en el índice especificado en la lista inmutable.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Índice en el que se va a insertar el valor.</param>
      <param name="item" vsli:raw="The element to insert.">Elemento que se va a insertar.</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">Nueva lista inmutable que incluye el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">Inserta los elementos especificados en el índice especificado en la lista inmutable.</summary>
      <param name="index" vsli:raw="The index at which to insert the elements.">Índice en el que se van a insertar los elementos.</param>
      <param name="items" vsli:raw="The elements to insert.">Elementos que van a insertarse.</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">Nueva lista inmutable que incluye los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the element with the specified value from the list.">Quita el elemento con el valor especificado de la lista.</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">Valor del elemento que se va a quitar de la lista.</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to compare elements for equality.">Comparador que se va a utilizar para comparar la igualdad de los elementos.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; with the specified element removed.">Nuevo elemento <see cref="T:System.Collections.Immutable.ImmutableList`1" /> con el elemento especificado eliminado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Quita todos los elementos que cumplen las condiciones definidas por el predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Delegado que define las condiciones de los elementos que se van a quitar.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Nueva lista inmutable con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">Quita el elemento del índice especificado de la lista inmutable.</summary>
      <param name="index" vsli:raw="The index of the element to remove.">Índice del elemento que se va a quitar.</param>
      <returns vsli:raw="A new list with the element removed.">Lista nueva con el elemento eliminado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list that match the items specified.">Quita un intervalo de elementos de esta lista inmutable que coincide con los elementos especificados.</summary>
      <param name="items" vsli:raw="The range of items to remove from the list, if found.">Intervalo de elementos para quitar de la lista, si se encuentra.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare elements.">Comparador de igualdad a usar para comparar los elementos.</param>
      <returns vsli:raw="An immutable list with the items removed.">Lista inmutable con los elementos eliminados.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; or &lt;paramref name=&quot;equalityComparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="items" /> o <paramref name="equalityComparer" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the specified number of elements at the specified location from this list.">Quita el número especificado de elementos en la ubicación especificada de esta lista.</summary>
      <param name="index" vsli:raw="The starting index of the range of elements to remove.">Índice inicial del intervalo de elementos que se va a quitar.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Número de elementos que se va a quitar.</param>
      <returns vsli:raw="A new list with the elements removed.">Lista nueva con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces an element in the list with the specified element.">Reemplaza un elemento de la lista por el elemento especificado.</summary>
      <param name="oldValue" vsli:raw="The element to replace.">Elemento que se va a reemplazar.</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">Elemento por el que se va a reemplazar el elemento antiguo.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns vsli:raw="The new list.">La nueva lista.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">Se produce cuando el valor antiguo no existe en la lista.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">Reemplaza un elemento de la lista en una posición determinada por el elemento especificado.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">Posición en la lista del elemento que se va a reemplazar.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">Elemento por el que se va a reemplazar el elemento antiguo.</param>
      <returns vsli:raw="The new list.">La nueva lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary vsli:raw="Creates a list that has the same contents as this list and can be efficiently mutated across multiple operations using standard mutable interfaces.">Crea una lista con el mismo contenido que esta lista y que puede transformarse eficazmente en varias operaciones mediante interfaces mutables estándar.</summary>
      <returns vsli:raw="The created list with the same contents as this list.">Lista creada con el mismo contenido que esta lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">Determina si cada elemento de la lista inmutable cumple las condiciones definidas por el predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">Delegado que define las condiciones que los elementos deben cumplir.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si cada elemento de la lista inmutable cumple las condiciones definidas por el predicado especificado; en caso contrario, es <see langword="false" />. Si la lista no tiene ningún elemento, el valor devuelto es <see langword="true" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableQueue`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Proporciona un conjunto de métodos de inicialización para las instancias de la clase <see cref="T:System.Collections.Immutable.ImmutableQueue`1" />.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary vsli:raw="Creates an empty immutable queue.">Crea una cola inmutable vacía.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable queue.">Tipo de elementos que se almacenará en la cola inmutable.</typeparam>
      <returns vsli:raw="An empty immutable queue.">Cola inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable queue that contains the specified item.">Crea una nueva cola inmutable que contiene el elemento especificado.</summary>
      <param name="item" vsli:raw="The item to prepopulate the queue with.">Elemento con el que rellenar la cola.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">Tipo de elementos de la cola inmutable.</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified item.">Nueva cola inmutable que contiene el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable queue that contains the specified array of items.">Crea una nueva cola que contiene la matriz especificada de elementos.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the queue with.">Matriz que contiene los elementos con los que rellenar la cola.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">Tipo de elementos de la cola inmutable.</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified items.">Nueva cola inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable queue that contains the specified items.">Crea una nueva cola inmutable que contiene los elementos especificados.</summary>
      <param name="items" vsli:raw="The items to add to the queue before immutability is applied.">Elementos a agregar a la cola antes de que se aplique la inmutabilidad.</param>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">Tipo de elementos en la cola.</typeparam>
      <returns vsli:raw="An immutable queue that contains the specified items.">Cola inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">Quita el elemento situado al principio de la cola inmutable y devuelve la nueva cola.</summary>
      <param name="queue" vsli:raw="The queue to remove the item from.">Cola de la que quitar el elemento.</param>
      <param name="value" vsli:raw="When this method returns, contains the item from the beginning of the queue.">Cuando este método vuelve, contiene el elemento desde el principio de la cola.</param>
      <typeparam name="T" vsli:raw="The type of elements in the immutable queue.">Tipo de elementos de la cola inmutable.</typeparam>
      <returns vsli:raw="The new queue with the item removed.">La nueva cola con el elemento quitado.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">La pila está vacía.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary vsli:raw="Represents an immutable queue.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa una cola inmutable.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">Tipo de elementos en la cola.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable queue.">Elimina todos los objetos de la cola inmutable.</summary>
      <returns vsli:raw="The empty immutable queue.">Cola inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">Quita el elemento situado al principio de la cola inmutable y devuelve la nueva cola.</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">Nueva cola inmutable; nunca <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La cola está vacía.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">Quita el elemento situado al principio de la cola inmutable y devuelve la nueva cola.</summary>
      <param name="value" vsli:raw="When this method returns, contains the element from the beginning of the queue.">Cuando este método vuelve, contiene el elemento desde el principio de la cola.</param>
      <returns vsli:raw="The new immutable queue with the beginning element removed.">Nueva cola inmutable sin el elemento inicial.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La cola está vacía.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary vsli:raw="Gets an empty immutable queue.">Obtiene una cola inmutable vacía.</summary>
      <returns vsli:raw="An empty immutable queue.">Cola inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Agrega un elemento situado al final de la cola inmutable y devuelve la nueva cola.</summary>
      <param name="value" vsli:raw="The element to add.">Elemento que se va a agregar.</param>
      <returns vsli:raw="The new immutable queue.">Nueva cola inmutable.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable queue without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera el contenido de una cola inmutable sin asignar memoria.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Elemento de la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable queue.">Desplaza el enumerador al siguiente elemento de la cola inmutable.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the queue.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la cola.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable queue.">Devuelve un enumerador que recorre en iteración la cola inmutable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the queue.">Un enumerador que se puede usar para recorrer en iteración la cola.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Obtiene un valor que indica si esta cola inmutable está vacía.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la cola está vacía; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">Devuelve el elemento situado al principio de la cola inmutable sin eliminarlo.</summary>
      <returns vsli:raw="The element at the beginning of the queue.">Elemento situado al principio de la cola.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La cola está vacía.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element at the front of the queue.">Obtiene una referencia de solo lectura al elemento del conjunto en la parte delantera de la cola.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La cola está vacía.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">Objeto <see cref="T:System.Collections.IEnumerator" /> que puede usarse para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable queue.">Elimina todos los elementos de la cola inmutable.</summary>
      <returns vsli:raw="The empty immutable queue.">Cola inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">Quita el elemento situado al principio de la cola inmutable y devuelve la nueva cola.</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">Nueva cola inmutable; nunca <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Agrega un elemento situado al final de la cola inmutable y devuelve la nueva cola.</summary>
      <param name="value" vsli:raw="The element to add.">Elemento que se va a agregar.</param>
      <returns vsli:raw="The new immutable queue.">Nueva cola inmutable.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Proporciona un conjunto de métodos de inicialización para las instancias de la clase <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" />.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable sorted dictionary.">Crea un diccionario ordenado inmutable vacío.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Diccionario ordenado inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key comparer.">Crea un diccionario ordenado inmutable vacío que usa el comparador de claves especificado.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Implementación a utilizar para determinar la igualdad de claves en el diccionario.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Diccionario ordenado inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key and value comparers.">Crea un diccionario ordenado inmutable vacío que usa los comparadores de claves y valores especificado.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Implementación a utilizar para determinar la igualdad de claves en el diccionario.</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">Implementación a utilizar para determinar la igualdad de valores en el diccionario.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Diccionario ordenado inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Crea un nuevo generador de diccionarios ordenados inmutables.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Generador de colecciones inmutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Crea un nuevo generador de diccionarios ordenados inmutables.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Comparador de claves.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Generador de colecciones inmutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Crea un nuevo generador de diccionarios ordenados inmutables.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Comparador de claves.</param>
      <param name="valueComparer" vsli:raw="The value comparer.">Comparador de claves.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Generador de colecciones inmutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key comparer.">Crea un nuevo diccionario ordenado inmutable desde el intervalo especificado de elementos con el comparador de claves especificado.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to evaluate keys for equality and sorting.">Implementación de comparador que se va a utilizar para evaluar las claves para la igualdad y la ordenación.</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary.">Elementos a agregar al diccionario ordenado.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">Tipo de claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">Tipo de valores del diccionario.</typeparam>
      <returns vsli:raw="The new immutable sorted dictionary that contains the specified items and uses the specified key comparer.">El nuevo diccionario ordenado inmutable que contiene los elementos especificados y usa el comparador de claves especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key and value comparers.">Crea un nuevo diccionario ordenado inmutable desde el intervalo especificado de elementos con el comparador de claves y valores especificado.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality and sorting.">Implementación de comparador que se va a utilizar para comparar las claves para la igualdad y la ordenación.</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">Implementación de comparador que se va a utilizar para comparar los valores para la igualdad y la ordenación.</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">Elementos que se van a agregar al diccionario ordenado antes de que se convierta en inmutable.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">Tipo de claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">Tipo de valores del diccionario.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items and uses the specified comparers.">Diccionario ordenado inmutable que contiene los elementos especificados y usa los comparadores especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates an immutable sorted dictionary that contains the specified items and uses the default comparer.">Crea un diccionario ordenado inmutable que contiene los elementos especificados y usa el comparador especificado.</summary>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">Elementos que se van a agregar al diccionario ordenado antes de que se convierta en inmutable.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">Tipo de claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">Tipo de valores del diccionario.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items.">Diccionario ordenado inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents.">Enumera una secuencia de pares de clave/valor y genera un diccionario ordenado inmutable de su contenido.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Secuencia de pares clave-valor a enumerar.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo de los valores del diccionario.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Diccionario ordenado inmutable que contiene los pares clave-valor en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">Enumera una secuencia de pares de clave-valor y genera un diccionario inmutable de su contenido mediante el comparador de claves especificado.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Secuencia de pares clave-valor a enumerar.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Comparador de claves a utilizar al crear el diccionario inmutable.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo de los valores del diccionario.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Diccionario ordenado inmutable que contiene los pares clave-valor en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">Enumera una secuencia de pares de clave-valor y genera un diccionario ordenado inmutable de su contenido mediante el comparador de claves y valores especificado.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Secuencia de pares clave-valor a enumerar.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Comparador de claves a utilizar al crear el diccionario inmutable.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">Comparador de valor que se usará para el diccionario inmutable.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo de los valores del diccionario.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Diccionario ordenado inmutable que contiene los pares clave-valor en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable sorted dictionary from the current contents of the builder's dictionary.">Crea un diccionario ordenado inmutable a partir del contenido actual del diccionario del generador.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted dictionary from.">Generador desde el que se va a crear el diccionario ordenado inmutable.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo de los valores del diccionario.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the current contents in the builder's dictionary.">Diccionario ordenado inmutable que incluye el contenido actual del diccionario del generador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents.">Enumera y transforma una secuencia y genera un diccionario ordenado inmutable de su contenido.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Secuencia a enumerar para generar el diccionario.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Función que generará la clave del diccionario desde cada elemento de la secuencia.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Función que generará el valor del diccionario desde cada elemento de la secuencia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo de los elementos de la secuencia.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Tipo de las claves del diccionario resultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Tipo de los valores del diccionario resultante.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">Diccionario ordenado inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key comparer.">Enumera y transforma una secuencia y genera un diccionario ordenado inmutable de su contenido mediante el comparador de claves especificado.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Secuencia a enumerar para generar el diccionario.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Función que generará la clave del diccionario desde cada elemento de la secuencia.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Función que generará el valor del diccionario desde cada elemento de la secuencia.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Comparador de claves que se utilizará para el diccionario.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo de los elementos de la secuencia.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Tipo de las claves del diccionario resultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Tipo de los valores del diccionario resultante.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Diccionario inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">Enumera y transforma una secuencia y genera un diccionario ordenador inmutable de su contenido mediante el comparador de claves y valores especificado.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Secuencia a enumerar para generar el diccionario.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Función que generará la clave del diccionario desde cada elemento de la secuencia.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Función que generará el valor del diccionario desde cada elemento de la secuencia.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Comparador de claves que se utilizará para el diccionario.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">Comparador de valor que se usará para el diccionario.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo de los elementos de la secuencia.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Tipo de las claves del diccionario resultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Tipo de los valores del diccionario resultante.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">Diccionario ordenado inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary vsli:raw="Represents an immutable sorted dictionary.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa un diccionario ordenado inmutable.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="TKey" vsli:raw="The type of the key contained in the dictionary.">Tipo de claves contenidas en el diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value contained in the dictionary.">Tipo de valores contenidos en el diccionario.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable sorted dictionary.">Agrega un elemento con la clave y el valor especificados en el diccionario ordenado inmutable.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Clave de la entrada que se va a agregar.</param>
      <param name="value" vsli:raw="The value of entry to add.">Valor de la entrada que se va a agregar.</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the additional key/value pair.">Nuevo diccionario ordenado inmutable que contiene el par de clave-valor adicional.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">La clave especificada ya existe en el diccionario, pero tiene un valor diferente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specific key/value pairs to the immutable sorted dictionary.">Agrega los pares clave-valor específicos al diccionario ordenado inmutable.</summary>
      <param name="items" vsli:raw="The key/value pairs to add.">Pares clave-valor que se va a agregar.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Nuevo diccionario inmutable que contiene los pares clave-valor adicionales.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Una de las claves especificadas ya existe en el diccionario, pero tiene un valor diferente.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary vsli:raw="Represents a sorted dictionary that mutates with little or no memory allocations and that can produce or build on immutable sorted dictionary instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa un diccionario ordenado que se transforma con poca o ninguna asignación de memoria y que puede generar o compilar instancias de diccionario ordenado inmutable muy eficazmente.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable sorted dictionary.">Agrega un elemento que dispone de la clave y el valor especificados al diccionario ordenado inmutable.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clave del elemento que se va a agregar.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valor del elemento que se va a agregar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable sorted dictionary.">Agrega el elemento especificado al diccionario ordenado inmutable.</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">Objeto que se agrega al diccionario.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to the immutable sorted dictionary.">Agrega una secuencia de valores al diccionario ordenado inmutable.</summary>
      <param name="items" vsli:raw="The items to add to the dictionary.">Elementos que se agregarán al diccionario.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable sorted dictionary.">Elimina todos los elementos del diccionario ordenado inmutable.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains a specific value.">Determina si el diccionario ordenado inmutable contiene un valor específico.</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">Objeto que se va a buscar en el diccionario.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el objeto <paramref name="item" /> está en el diccionario; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified key.">Determina si el diccionario ordenado inmutable contiene un elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">Clave que se debe buscar en el diccionario.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el diccionario contiene un elemento con la clave; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">Determina si el diccionario ordenado inmutable contiene un elemento con el valor especificado.</summary>
      <param name="value" vsli:raw="The value to locate in the dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valor que se va a buscar en el diccionario. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable sorted dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el diccionario ordenado inmutable contiene un elemento con el valor especificado; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable sorted dictionary.">Obtiene el número de elementos de este diccionario ordenado inmutable.</summary>
      <returns vsli:raw="The number of elements in this dictionary.">Número de elementos de este diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">Devuelve un enumerador que recorre en iteración el diccionario ordenado inmutable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Enumerador que puede usarse para recorrer en iteración el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">Obtiene el valor de una clave determinada si existe una clave coincidente en el diccionario; de lo contrario, obtiene el valor predeterminado.</summary>
      <param name="key" vsli:raw="The key to search for.">Clave que se va a buscar.</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">Valor de la clave o <c>default(TValue)</c> si no se ha encontrado ninguna clave coincidente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">Obtiene el valor de una clave determinada si existe una clave coincidente en el diccionario; de lo contrario, obtiene el valor predeterminado.</summary>
      <param name="key" vsli:raw="The key to search for.">Clave que se va a buscar.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">Valor predeterminado para devolver si no se detecta ninguna clave coincidente en el diccionario.</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">El valor de la clave, o <paramref name="defaultValue" /> si no se ha encontrado ninguna clave coincidente.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the value for a specified key in the immutable sorted dictionary.">Obtiene o establece el valor de una clave especificada en el diccionario ordenado inmutable.</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">Clave de la que se debe recuperar el valor.</param>
      <returns vsli:raw="The value associated with the given key.">Valor asociado a la clave facilitada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Obtiene o establece el comparador de claves.</summary>
      <returns vsli:raw="The key comparer.">Comparador de claves.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a strongly typed, read-only collection of elements.">Obtiene una colección fuertemente tipada, de sólo lectura de elementos.</summary>
      <returns vsli:raw="A strongly typed, read-only collection of elements.">Colección de elementos fuertemente tipada y de solo lectura.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable sorted dictionary.">Quita el elemento con la clave especificada del diccionario ordenado inmutable.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clave del elemento que se va a quitar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original dictionary.">Es <see langword="true" /> si el elemento se quita correctamente; en caso contrario, es <see langword="false" />. Este método también devuelve <see langword="false" /> si <paramref name="key" /> no se encontró en el diccionario original.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable sorted dictionary.">Quita la primera repetición de un objeto específico del diccionario ordenado inmutable.</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">Objeto que se va a quitar del diccionario.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">
        <see langword="true" /> si <paramref name="item" /> se ha quitado correctamente de ; en caso contrario, <see langword="false" />. Este método también devuelve <see langword="false" /> si <paramref name="item" /> no se encuentra en el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable sorted dictionary.">Quita todas las entradas con claves que coinciden con las que se encuentran en la secuencia especificada del diccionario ordenado inmutable.</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">Claves para las entradas que se quitarán del diccionario.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Copia los elementos del diccionario en una matriz, empezando por un índice de matriz concreto.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde el diccionario. La matriz debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Agrega un elemento con la clave y el valor proporcionados al objeto del diccionario.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clave del elemento que se va a agregar.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valor del elemento que se va a agregar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">Determina si el objeto del diccionario contiene un elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key to locate.">Clave que se va a localizar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el diccionario contiene un elemento con la clave; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Devuelve un objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para el diccionario.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para el diccionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Obtiene un valor que indica si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtiene o establece el elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key.">Clave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves del objeto que implementa el <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">Quita el elemento con la clave especificada del diccionario.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clave del elemento que se va a quitar.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores del objeto que implementa el <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Objeto de enumerador que puede usarse para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted dictionary based on the contents of this instance.">Crea un diccionario ordenado inmutable basado en el contenido de esta instancia.</summary>
      <returns vsli:raw="An immutable sorted dictionary.">Diccionario ordenado inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Determina si el diccionario contiene una clave específica.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Clave que se va a buscar.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Clave correspondiente ubicada en el diccionario si se encuentra, o <c>equalkey</c> si no se encuentra ninguna coincidencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se encuentra una coincidencia para <paramref name="equalKey" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Obtiene el valor asociado a la clave especificada.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Clave cuyo valor se va a recuperar.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Si se encuentra la clave, cuando este método devuelve un resultado, contiene el valor asociado a la clave especificada; en caso contrario, contiene el valor predeterminado para el tipo del parámetro <paramref name="value" />. Este parámetro se pasa sin inicializar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el objeto que implementa el diccionario contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">Obtiene o establece el comparador de valores.</summary>
      <returns vsli:raw="The value comparer.">Comparador de claves.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">Devuelve una referencia de solo lectura al valor asociado con el elemento <paramref name="key" /> proporcionado.</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">El elemento <paramref name="key" /> no está presente.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable sorted dictionary.">Obtiene una colección que contiene los valores del diccionario ordenado inmutable.</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">Colección que contiene los valores del objeto que implementa el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable sorted dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Recupera un diccionario ordenado inmutable vacío que tiene el mismo orden y reglas de comparación de clave-valor que esta instancia del diccionario.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Diccionario vacío con orden y reglas de comparación de clave y valor equivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable sorted dictionary contains the specified key/value pair.">Determina si el diccionario ordenado inmutable contiene el par de clave-valor especificado.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">Par clave-valor que se va a localizar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el par clave-valor especificado se encuentra en el diccionario; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether this immutable sorted map contains the specified key.">Determina si este mapa ordenado inmutable contiene la clave especificada.</summary>
      <param name="key" vsli:raw="The key to locate.">Clave que se va a localizar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el diccionario inmutable contiene la clave especificada; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">Determina si el diccionario ordenado inmutable contiene un elemento con el valor especificado.</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valor que se va a buscar. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el diccionario contiene un elemento con el valor especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable sorted dictionary.">Obtiene el número de pares de clave-valor incluido en el diccionario ordenado inmutable.</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">Número de pares de clave-valor del diccionario.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable sorted dictionary.">Obtiene un diccionario ordenado inmutable vacío.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera el contenido de un árbol binario.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y el procedimiento de instalación)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Elemento de la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator&quot; /&gt; class.">Libera los recursos utilizados por la instancia actual de la clase <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted dictionary.">Desplaza el enumerador al siguiente elemento del diccionario ordenado inmutable.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted dictionary.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final del diccionario ordenado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted dictionary.">Establece el enumerador en su posición inicial (antes del primer elemento del diccionario ordenado inmutable).</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">Elemento actual.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">Devuelve un enumerador que recorre en iteración el diccionario ordenado inmutable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Enumerador que puede usarse para recorrer en iteración el diccionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable sorted dictionary is empty.">Obtiene un valor que indica si esta instancia del dicionario ordenado inmutable está vacía.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si esta instancia está vacía; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">Obtiene el <paramref name="TValue" /> asociado con la clave especificada.</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">Clave de la que se debe recuperar el valor.</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">Valor asociado a la clave especificada. Si no se encuentra ningún resultado, la operación produce una excepción.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable sorted dictionary.">Obtiene el comparador de claves del diccionario ordenado inmutable.</summary>
      <returns vsli:raw="The key comparer for the dictionary.">Comparador de claves para el diccionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable sorted dictionary.">Obtiene las claves del diccionario ordenado inmutable.</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">Claves del diccionario inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified value from the immutable sorted dictionary.">Quita el elemento con el valor especificado del diccionario ordenado inmutable.</summary>
      <param name="value" vsli:raw="The value of the element to remove.">Valor del elemento que se va a quitar.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified value cannot be found in the dictionary.">Un nuevo diccionario inmutable con el elemento especificado eliminado; o bien esta instancia si no se encuentra el valor especificado en el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable sorted dictionary.">Quita los elementos con la clave especificada del diccionario ordenado inmutable.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">Claves de los elementos que se van a quitar.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Nuevo diccionario inmutable con las claves especificadas eliminados; o bien esta instancia si no se encuentran en el diccionario las claves especificadas.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable sorted dictionary, possibly overwriting an existing value for the given key.">Establece la clave y valor especificados en el diccionario ordenado inmutable, posiblemente sobrescribiendo un valor existente de la clave facilitada.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Clave de la entrada que se va a agregar.</param>
      <param name="value" vsli:raw="The key value to set.">Valor de clave que se va a establecer.</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the specified key/value pair.">Nuevo diccionario ordenado inmutable que contiene el par de clave-valor especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable sorted dictionary, possibly overwriting existing values for the keys.">Establece los pares de clave-valor especificados en el diccionario ordenado inmutable, posiblemente sobrescribiendo valores existentes de las claves.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Pares de clave-valor que se van a establecer en el diccionario. Si ya existe alguna de las claves en el diccionario, este método sobrescribirá los valores anteriores.</param>
      <returns vsli:raw="An immutable dictionary that contains the specified key/value pairs.">Diccionario inmutable que contiene pares de clave-valor especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The object to use as the key of the element to access." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">Copia los elementos del diccionario en una matriz, empezando por un índice de matriz concreto.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde el diccionario. La matriz debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el acceso al <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Agrega un elemento con la clave y el valor proporcionados al objeto del diccionario.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">Objeto que se va a utilizar como clave del elemento que se va a agregar.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">El objeto que se va a usar como valor del elemento que se va a agregar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">Borra esta instancia.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">El objeto de diccionario es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">Determina si el objeto de diccionario inmutable contiene un elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">Clave que se debe buscar en el objeto del diccionario.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el diccionario contiene un elemento con la clave; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">Devuelve un objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para el objeto de diccionario inmutable.</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">Objeto de enumerador para el objeto de diccionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Obtiene un valor que indica si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtiene o establece el elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key of the element to be accessed.">Clave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves del objeto que implementa el <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">Quita el elemento con la clave especificada del objeto de diccionario inmutable.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clave del elemento que se va a quitar.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores del objeto que implementa el <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Objeto de enumerador que puede usarse para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be updated." />
      <param name="value" vsli:raw="Value of entry to be updated." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="A set of key-value pairs to set on the map." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable sorted dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Crea un diccionario ordenado inmutable con el mismo contenido que este diccionario que puede transformarse eficazmente en varias operaciones mediante interfaces mutables estándar.</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary.">Colección con el mismo contenido que este diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Determina si el diccionario contiene una clave específica.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Clave que se va a buscar.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Clave correspondiente ubicada en el diccionario si se encuentra, o <c>equalkey</c> si no se encuentra ninguna coincidencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se encuentra una coincidencia para <paramref name="equalKey" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Obtiene el valor asociado a la clave especificada.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Clave cuyo valor se va a recuperar.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Si se encuentra la clave, cuando este método devuelve un resultado, contiene el valor asociado a la clave especificada; en caso contrario, contiene el valor predeterminado para el tipo del parámetro <paramref name="value" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el diccionario contiene un elemento con la clave especificada; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">Obtiene el comparador de valor que se utiliza para determinar si los valores son iguales.</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">Comparador de valor que se utiliza para determinar si los valores son iguales.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">Devuelve una referencia de solo lectura al valor asociado con el elemento <paramref name="key" /> proporcionado.</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">El elemento <paramref name="key" /> no está presente.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable sorted dictionary.">Obtiene los valores del diccionario ordenado inmutable.</summary>
      <returns vsli:raw="The values in the dictionary.">Valores del diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key comparer.">Obtiene una instancia del diccionario ordenado inmutable que usa los comparadores de claves especificados.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Comparador de claves a utilizar.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">Instancia del diccionario inmutable que usa el comparador especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key and value comparers.">Obtiene una instancia del diccionario ordenado inmutable que usa los comparadores de claves y valores especificados.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Comparador de claves a utilizar.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">Comparador de claves a utilizar.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">Instancia del diccionario inmutable que usa los comparadores especificados.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Proporciona un conjunto de métodos de inicialización para las instancias de la clase <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" />.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary vsli:raw="Creates an empty immutable sorted set.">Crea un nuevo conjunto ordenado inmutable vacío.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable set.">Tipo de elementos que se almacenará en el conjunto inmutable.</typeparam>
      <returns vsli:raw="An empty immutable sorted set.">Conjunto ordenado inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item.">Crea un nuevo conjunto ordenado inmutable que contiene el elemento especificado.</summary>
      <param name="item" vsli:raw="The item to prepopulate the set with.">Elemento con el que rellenar el conjunto.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Tipo de elementos del conjunto inmutable.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">Nuevo conjunto inmutable que contiene el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items.">Crea un nuevo conjunto ordenado inmutable que contiene la matriz especificada de elementos.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">Matriz que contiene los elementos con los que rellenar el conjunto.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Tipo de elementos del conjunto inmutable.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">Nuevo conjunto inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted set that uses the specified comparer.">Crea un conjunto ordenado inmutable vacío que usa el comparador especificado.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">Implementación que se va a usar al comparar los elementos del conjunto.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Tipo de elementos del conjunto inmutable.</typeparam>
      <returns vsli:raw="An empty immutable set.">Conjunto inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item and uses the specified comparer.">Crea un nuevo conjunto ordenado inmutable que contiene el elemento especificado y usa el comparador especificado.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">Implementación que se va a usar al comparar los elementos del conjunto.</param>
      <param name="item" vsli:raw="The item to prepopulate the set with.">Elemento con el que rellenar el conjunto.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable set.">Tipo de elementos almacenado en el conjunto inmutable.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">Nuevo conjunto inmutable que contiene el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items and uses the specified comparer.">Crea un nuevo conjunto ordenado inmutable que contiene la matriz especificada de elementos y usa el comparador especificado.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">Implementación que se va a usar al comparar los elementos del conjunto.</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">Matriz que contiene los elementos con los que rellenar el conjunto.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Tipo de elementos del conjunto inmutable.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">Nuevo conjunto inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">Devuelve una colección que puede utilizarse para crear un conjunto ordenado inmutable.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Tipo de elementos ordenados por colección.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Generador de colecciones inmutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">Devuelve una colección que puede utilizarse para crear un conjunto ordenado inmutable.</summary>
      <param name="comparer" vsli:raw="The comparer used to compare items in the set for equality.">Comparador que se utiliza para comparar elementos del conjunto en cuanto a igualdad.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Tipo de elementos ordenados por colección.</typeparam>
      <returns vsli:raw="The immutable collection.">Colección inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">Crea una nueva colección inmutable que contiene los elementos especificados.</summary>
      <param name="comparer" vsli:raw="The comparer to use to compare elements in this set.">Comparador que se va a utilizar para comparar elementos de este conjunto.</param>
      <param name="items" vsli:raw="The items to add to the set before it's immutable.">Elementos que se van a agregar al conjunto antes de que se convierta en inmutable.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Tipo de elementos ordenados por colección.</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">Nuevo conjunto inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">Crea una nueva colección inmutable que contiene los elementos especificados.</summary>
      <param name="items" vsli:raw="The items to add to the set with before it's immutable.">Elementos que se van a agregar al conjunto antes de que se convierta en inmutable.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Tipo de elementos ordenados por colección.</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">Nuevo conjunto inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable sorted set of its contents.">Enumera una secuencia y genera un conjunto ordenado inmutable de su contenido.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Secuencia que se va a enumerar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo de los elementos de la secuencia.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">Conjunto ordenado inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable sorted set of its contents, and uses the specified comparer.">Enumera una secuencia, genera un conjunto ordenado inmutable de su contenido y usa el comparador especificado.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Secuencia que se va a enumerar.</param>
      <param name="comparer" vsli:raw="The comparer to use for initializing and adding members to the sorted set.">Comparador que se va a utilizar para inicializar y agregar miembros al conjunto ordenado.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo de los elementos de la secuencia.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">Conjunto ordenado inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable sorted set from the current contents of the builder's set.">Crea un conjunto ordenado inmutable a partir del contenido del conjunto del generador.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted set from.">Generador desde el que se va a crear el conjunto ordenado inmutable.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the immutable sorted set.">Tipo de los elementos del conjunto ordenado inmutable.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the current contents in the builder's set.">Conjunto ordenado inmutable que incluye el contenido actual del conjunto del generador.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary vsli:raw="Represents an immutable sorted set implementation.&#xA;&#xA;NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa una implementación de un conjunto ordenado inmutable.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y el procedimiento de instalación)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the set.">Tipo de elementos del conjunto.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable sorted set.">Agrega el valor especificado a este conjunto ordenado inmutable.</summary>
      <param name="value" vsli:raw="The value to add.">El valor que se va a agregar.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in this set.">Nuevo conjunto con el elemento agregado o este conjunto si el elemento ya está en este conjunto.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary vsli:raw="Represents a sorted set that enables changes with little or no memory allocations, and efficiently manipulates or builds immutable sorted sets.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa un conjunto ordenado que permite cambios con poca o ninguna asignación de memoria y manipula o crea eficazmente conjuntos ordenados inmutables.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">Agrega un elemento al conjunto actual y devuelve un valor que indica si el elemento se ha agregado correctamente.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Elemento que se va a agregar al conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">
        <see langword="true" /> si el elemento se ha agregado al conjunto; <see langword="false" /> si el elemento ya está en el conjunto</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary vsli:raw="Removes all elements from this set.">Quita todos los elementos de este conjunto.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the set contains the specified object.">Determina si el conjunto contiene el objeto especificado.</summary>
      <param name="item" vsli:raw="The object to locate in the set.">Objeto que se va a ubicar en el conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> se encuentra en el conjunto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">Obtiene el número de elementos contenido en el conjunto ordenado inmutable.</summary>
      <returns vsli:raw="The number of elements in this set.">Número de elementos del conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified set of items from the current set.">Quita el conjunto especificado de elementos del conjunto actual.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">Colección de elementos que se van a quitar del conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the set.">Devuelve un enumerador que recorre en iteración a través del conjunto.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the set.">Enumerador que se puede utilizar para recorrer en iteración el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Modifica el conjunto actual para que solo contenga elementos que también estén en una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">Determina si el conjunto actual es un subconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un subconjunto apropiado de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">Determina si el conjunto actual es un supraconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un supraconjunto apropiado de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">Determina si el conjunto actual es un subconjunto de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection is compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un subconjunto de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">Determina si el conjunto actual es un supraconjunto de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un supraconjunto de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the set at the given index.">Obtiene el elemento del conjunto en el índice especificado.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Índice de base 0 del elemento en el conjunto que se va a devolver.</param>
      <returns vsli:raw="The element at the given position.">Elemento situado en la posición especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Obtiene una referencia de solo lectura al elemento del conjunto en el elemento <paramref name="index" /> especificado.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Índice de base 0 del elemento en el conjunto que se va a devolver.</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">Referencia de solo lectura al elemento en la posición especificada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the object that is used to determine equality for the values in the immutable sorted set.">Obtiene o establece el objeto que se utiliza para determinar la igualdad de los valores del conjunto ordenado inmutable.</summary>
      <returns vsli:raw="The comparer that is used to determine equality for the values in the set.">Comparador que se usa para determinar la igualdad de los valores del conjunto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">Obtiene el valor máximo del conjunto ordenado inmutable, tal y como define el comparador.</summary>
      <returns vsli:raw="The maximum value in the set.">Valor máximo del conjunto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">Obtiene el valor mínimo del conjunto ordenado inmutable, tal y como define el comparador.</summary>
      <returns vsli:raw="The minimum value in the set.">Valor mínimo del conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">Determina si el conjunto actual se superpone a la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual y <paramref name="other" /> comparten al menos un elemento común; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from the set.">Quita la primera aparición del objeto especificado del conjunto.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">Objeto que se va a quitar del conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was removed from the set; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the set.">
        <see langword="true" /> si <paramref name="item" /> se ha quitado del conjunto; <see langword="false" /> si <paramref name="item" /> no se encontró en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary vsli:raw="Returns an enumerator that iterates over the immutable sorted set in reverse order.">Devuelve un enumerador que recorre en iteración el conjunto ordenado inmutable en orden inverso.</summary>
      <returns vsli:raw="An enumerator that iterates over the set in reverse order.">Enumerador que recorre en iteración el conjunto en orden inverso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">Determina si el conjunto actual y la colección especificada contienen los mismos elementos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es igual a <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Modifica el conjunto actual para que únicamente contenga elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">Agrega un elemento al conjunto actual y devuelve un valor que indica si el elemento se ha agregado correctamente.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Elemento que se va a agregar al conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">Copia los elementos de la colección en una matriz a partir de un índice de matriz concreto.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">Matriz unidimensional que es el destino de los elementos copiados de la colección. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">Obtiene un valor que indica si esta instancia es de solo lectura.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">Siempre es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">Copia los elementos del conjunto en una matriz, comenzando en un índice concreto de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde el conjunto. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe).">Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el acceso al <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted set based on the contents of this instance.">Crea un conjunto ordenado inmutable basado en el contenido de esta instancia.</summary>
      <returns vsli:raw="An immutable set.">Conjunto inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">Modifica el conjunto actual para que contenga todos los elementos que están presentes en el conjunto actual en la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current state.">Colección que se va a comparar con el estado actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable sorted set.">Elimina todos los elementos del conjunto ordenado inmutable.</summary>
      <returns vsli:raw="An empty set with the elements removed.">Conjunto vacío con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable sorted set contains the specified value.">Determina si este conjunto ordenador inmutable contiene el valor especificado.</summary>
      <param name="value" vsli:raw="The value to check for.">Valor que se va a comprobar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el conjunto contiene el valor especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">Obtiene el número de elementos contenido en el conjunto ordenado inmutable.</summary>
      <returns vsli:raw="The number of elements in the immutable sorted set.">Número de elementos contenido en el conjunto ordenado inmutable.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary vsli:raw="Gets an empty immutable sorted set.">Obtiene un conjunto ordenado inmutable vacío.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera el contenido de un árbol binario.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y el procedimiento de instalación)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Obtiene el elemento en la posición actual del enumerador.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y el procedimiento de instalación)</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Elemento de la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Libera los recursos utilizados por la instancia actual de la clase <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" />.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y el procedimiento de instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Desplaza el enumerador al siguiente elemento del conjunto ordenado inmutable.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y el procedimiento de instalación)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted set.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final del conjunto ordenado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Establece el enumerador en su posición inicial (antes del primer elemento del conjunto ordenado inmutable).
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y el procedimiento de instalación)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">Elemento actual.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a specified set of items from this immutable sorted set.">Quita un conjunto especificado de elementos de este conjunto ordenado inmutable.</summary>
      <param name="other" vsli:raw="The items to remove from this set.">Elementos que se van a quitar de este conjunto.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Nuevo conjunto con los elementos que se han quitado; o el conjunto original si no se encontraba ninguno de los elementos en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted set.">Devuelve un enumerador que recorre en iteración el conjunto ordenado inmutable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Enumerador que se puede usar para recorrer en iteración el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary vsli:raw="Gets the position within this immutable sorted set that the specified value appears in.">Obtiene la posición dentro de este conjunto ordenado inmutable en el que aparece el valor especificado.</summary>
      <param name="item" vsli:raw="The value whose position is being sought.">Valor cuya posición se está buscando.</param>
      <returns vsli:raw="The index of the specified &lt;paramref name=&quot;item&quot; /&gt; in the sorted set, if &lt;paramref name=&quot;item&quot; /&gt; is found. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1.">Índice del <paramref name="item" /> especificado en el conjunto ordenado, si se encuentra <paramref name="item" />. Si no se encuentra <paramref name="item" /> y es menor que uno o varios elementos de este conjunto, este método devuelve un número negativo que es el complemento bit a bit del índice del primer elemento que sea mayor que el valor. Si no se encuentra <paramref name="item" /> y es mayor que cualquiera de los elementos del conjunto, este método devuelve un número negativo que es el complemento bit a bit del índice del último elemento más 1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist both in this set and in the specified set.">Crea un conjunto ordenado inmutable que contiene los elementos que existen en este conjunto y en el conjunto especificado.</summary>
      <param name="other" vsli:raw="The set to intersect with this one.">Conjunto que va a formar una intersección con este</param>
      <returns vsli:raw="A new immutable sorted set that contains any elements that exist in both sets.">Nuevo conjunto ordenado inmutable que incluye todos los elementos que existen en ambos conjuntos.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable sorted set is empty.">Obtiene un valor que indica si este conjunto ordenado inmutable está vacío.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this set is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si este conjunto está vacío; de lo contrario, será <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection.">Determina si el conjunto ordenado inmutable actual es un subconjunto apropiado (estricto) de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un subconjunto apropiado de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper superset of a specified collection.">Determina si el conjunto ordenado inmutable actual es un supraconjunto apropiado de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un supraconjunto apropiado de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a subset of a specified collection.">Determina si el conjunto ordenado inmutable actual es un subconjunto apropiado de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un subconjunto de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a superset of a specified collection.">Determina si el conjunto actual es un subconjunto de una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual es un supraconjunto de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the immutable sorted set at the given index.">Obtiene el elemento del conjunto ordenado inmutable en el índice especificado.</summary>
      <param name="index" vsli:raw="The index of the element to retrieve from the sorted set.">Índice del elemento a recuperar del conjunto ordenado.</param>
      <returns vsli:raw="The element at the given index.">Elemento del índice facilitado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference of the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Obtiene una referencia de solo lectura del elemento del conjunto en el elemento <paramref name="index" /> especificado.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Índice de base 0 del elemento en el conjunto que se va a devolver.</param>
      <returns vsli:raw="A read-only reference of the element at the given position.">Referencia de solo lectura del elemento en la posición especificada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary vsli:raw="Gets the comparer used to sort keys in the immutable sorted set.">Obtiene al comparador que se utiliza para ordenar claves en el conjunto ordenado inmutable.</summary>
      <returns vsli:raw="The comparer used to sort keys.">Comparador que se utiliza para ordenar claves.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">Obtiene el valor máximo del conjunto ordenado inmutable, tal y como define el comparador.</summary>
      <returns vsli:raw="The maximum value in the set.">Valor máximo del conjunto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">Obtiene el valor mínimo del conjunto ordenado inmutable, tal y como define el comparador.</summary>
      <returns vsli:raw="The minimum value in the set.">Valor mínimo del conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and a specified collection share common elements.">Determina si el conjunto ordenado inmutable actual y una colección especificada comparten elementos comunes.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el conjunto actual y <paramref name="other" /> comparten al menos un elemento común; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified value from this immutable sorted set.">Elimina el valor especificado de este conjunto ordenado inmutable.</summary>
      <param name="value" vsli:raw="The element to remove.">Elemento que se va a quitar.</param>
      <returns vsli:raw="A new immutable sorted set with the element removed, or this set if the element was not found in the set.">Nuevo conjunto ordenado inmutable con el elemento eliminado, o este conjunto si el elemento no se encontró en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that iterates over this immutable sorted set in reverse order.">Devuelve un <see cref="T:System.Collections.Generic.IEnumerable`1" /> que itera este conjunto ordenado inmutable en orden inverso.</summary>
      <returns vsli:raw="An enumerator that iterates over the immutable sorted set in reverse order.">Enumerador que itera el conjunto ordenado inmutable en orden inverso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and the specified collection contain the same elements.">Determina si el conjunto ordenado inmutable actual y la colección especificada contienen los mismos elementos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si los conjuntos son iguales; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both.">Crea un conjunto ordenado inmutable que contiene elementos que existen en este conjunto o en una secuencia determinada, pero no en ambos.</summary>
      <param name="other" vsli:raw="The other sequence of items.">La otra secuencia de elementos.</param>
      <returns vsli:raw="The new immutable sorted set.">Nuevo conjunto ordenado inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to the collection.">Agrega el valor especificado a la colección.</summary>
      <param name="item" vsli:raw="The value to add.">El valor que se va a agregar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all the items from the collection.">Quita todos los elementos de la colección.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">Copia los elementos de la colección en una matriz a partir de un índice de matriz concreto.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">Matriz unidimensional que es el destino de los elementos copiados de la colección. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Returns true, since immutable collections are always read-only. See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">Vea la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">Quita la primera aparición de un objeto concreto de la colección.</summary>
      <param name="item" vsli:raw="The object to remove from the collection.">Objeto que se quitará de la colección.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="item" /> se quitó correctamente de la colección; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the set at the specified index.">Inserta un elemento en el conjunto del índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Índice basado en cero en el que debe insertarse <paramref name="item" />.</param>
      <param name="item" vsli:raw="The object to insert into the set.">Objeto que se va a insertar en el conjunto.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; interface.">Vea la interfaz <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Quita el elemento en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Índice de base cero del elemento que se va a quitar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate if the element was successfully added.">Agrega un elemento al conjunto actual y devuelve un valor que indica si el elemento se ha agregado correctamente.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Elemento que se va a agregar al conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">
        <see langword="false" /> si el elemento se ha agregado al conjunto; <see langword="true" /> si el elemento ya está en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">Quita del conjunto actual todos los elementos de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">Colección de elementos que se van a quitar del conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Modifica el conjunto actual para que solo contenga elementos que también estén en una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Modifica el conjunto actual para que únicamente contenga elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or the specified collection.">Modifica el conjunto actual para que contenga todos los elementos que están presentes en el conjunto actual o en la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">Copia los elementos del conjunto en una matriz, comenzando en un índice concreto de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde el conjunto. La matriz debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Returns true, since immutable collections are always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">Vea la interfaz <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Vea <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Objeto de enumerador que puede usarse para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the set.">Agrega un elemento al conjunto.</summary>
      <param name="value" vsli:raw="The object to add to the set.">Objeto que se va a agregar al conjunto.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">La posición en la que se insertó el nuevo elemento o -1 para indicar que el elemento no se insertó en la colección.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">El conjunto es de solo lectura o tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the set.">Quita todos los elementos del conjunto.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Se produce en todos los casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the set contains a specific value.">Determina si el conjunto contiene un valor específico.</summary>
      <param name="value" vsli:raw="The object to locate in the set.">Objeto que se va a ubicar en el conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el objeto se encuentra en el conjunto, de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the set.">Determina el índice de un elemento específico del conjunto.</summary>
      <param name="value" vsli:raw="The object to locate in the set.">Objeto que se va a ubicar en el conjunto.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Devuelve el índice de <paramref name="value" /> si se encuentra en la lista; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the set at the specified index.">Inserta un elemento en el conjunto en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value" vsli:raw="The object to insert into the set.">Objeto que se va a insertar en el conjunto.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">El conjunto es de solo lectura o tiene un tamaño fijo.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Obtiene un valor que indica si el objeto <see cref="T:System.Collections.IList" /> tiene un tamaño fijo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Obtiene o establece la clase <see cref="T:System.Object" /> en el índice especificado.</summary>
      <param name="index" vsli:raw="The index.">Índice.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">Quita la primera aparición de un objeto específico del conjunto.</summary>
      <param name="value" vsli:raw="The object to remove from the set.">Objeto que se va a quitar del conjunto.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">El conjunto es de solo lectura o tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the set.">Quita del conjunto el elemento situado en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">El conjunto es de solo lectura o tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Agrega el elemento especificado a este conjunto inmutable.</summary>
      <param name="value" vsli:raw="The element to add.">Elemento que se va a agregar.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Nuevo conjunto con el elemento agregado o este conjunto si el elemento ya está en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">Recupera un conjunto inmutable vacío que tiene la misma ordenación y semántica de orden que esta instancia.</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">Conjunto vacío que tiene la misma ordenación y semántica de orden que esta instancia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">Quita del conjunto inmutable actual los elementos de la colección especificada.</summary>
      <param name="other" vsli:raw="The items to remove from this set.">Elementos que se van a quitar de este conjunto.</param>
      <returns vsli:raw="The new set with the items removed; or the original set if none of the items were in the set.">Nuevo conjunto con los elementos que se han quitado; o el conjunto original si no se encontraba ninguno de los elementos en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">Crea un conjunto inmutable que contiene los elementos que existen en este conjunto y en el conjunto especificado.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Nuevo conjunto inmutable que contiene los elementos que existen en ambos conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Elimina el elemento especificado de este conjunto inmutable.</summary>
      <param name="value" vsli:raw="The element to remove.">Elemento que se va a quitar.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Nuevo conjunto con el elemento especificado eliminado o el conjunto actual si no se encuentra el elemento en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Crea un conjunto inmutable que únicamente contiene elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Colección que se va a comparar con el conjunto actual.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Conjunto nuevo que únicamente contiene elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Crea un conjunto inmutable que contiene todos los elementos que están presentes en el conjunto actual o en la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Colección de la que se van a agregar elementos.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Nuevo conjunto inmutable con los elementos agregados; o conjunto original si ya estaban todos los elementos en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary vsli:raw="Creates a collection that has the same contents as this immutable sorted set that can be efficiently manipulated by using standard mutable interfaces.">Crea una colección que tiene el mismo contenido que este conjunto ordenado inmutable que puede manipularse eficazmente mediante interfaces estándar mutables.</summary>
      <returns vsli:raw="The sorted set builder.">Generador de conjuntos ordenados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Busca en el conjunto un valor determinado y devuelve un valor igual al que encuentra, si encuentra alguno.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">Valor que se va a buscar.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">Valor del conjunto encontrado por la búsqueda, o valor original si la búsqueda no produjo ninguna coincidencia.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Valor que indica si la búsqueda se ha realizado correctamente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a given set of items to this immutable sorted set.">Agrega un conjunto determinado de elementos a este conjunto ordenado inmutable.</summary>
      <param name="other" vsli:raw="The items to add.">Los elementos que se van a agregar.</param>
      <returns vsli:raw="The new set with the items added; or the original set if all the items were already in the set.">Nuevo conjunto con elementos agregados; o conjunto original si todos los elementos ya se encontraban en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Returns the immutable sorted set that has the specified key comparer.">Devuelve el conjunto ordenado inmutable que dispone del comparador de claves especificado.</summary>
      <param name="comparer" vsli:raw="The comparer to check for.">Comparador que se va buscar.</param>
      <returns vsli:raw="The immutable sorted set that has the specified key comparer.">Conjunto ordenado inmutable que dispone del comparador de claves especificado.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableStack`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Proporciona un conjunto de métodos de inicialización para las instancias de la clase <see cref="T:System.Collections.Immutable.ImmutableStack`1" />.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary vsli:raw="Creates an empty immutable stack.">Crea una pila inmutable vacía.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable stack.">Tipo de elementos que se almacenará en la pila inmutable.</typeparam>
      <returns vsli:raw="An empty immutable stack.">Pila inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable stack that contains the specified item.">Crea una nueva pila inmutable que contiene el elemento especificado.</summary>
      <param name="item" vsli:raw="The item to prepopulate the stack with.">Elemento con el que rellenar la pila.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">Tipo de elementos de la pila inmutable.</typeparam>
      <returns vsli:raw="A new immutable collection that contains the specified item.">Nueva colección inmutable que contiene el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable stack that contains the specified array of items.">Crea una nueva pila inmutable que contiene la matriz especificada de elementos.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the stack with.">Matriz que contiene los elementos con los que rellenar la pila.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">Tipo de elementos de la pila inmutable.</typeparam>
      <returns vsli:raw="A new immutable stack that contains the specified items.">Nueva pila inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable stack that contains the specified items.">Crea una nueva pila inmutable que contiene los elementos especificados.</summary>
      <param name="items" vsli:raw="The items to add to the stack before it's immutable.">Elementos que se van a agregar a la pila antes de que se convierta en inmutable.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">Tipo de elementos de la pila.</typeparam>
      <returns vsli:raw="An immutable stack that contains the specified items.">Pila inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary vsli:raw="Removes the specified item from an immutable stack.">Quita de la pila el elemento especificado.</summary>
      <param name="stack" vsli:raw="The stack to modify.">Pila para modificar.</param>
      <param name="value" vsli:raw="The item to remove from the stack.">Elemento que se va a quitar de la pila.</param>
      <typeparam name="T" vsli:raw="The type of items contained in the stack.">Tipo de elementos que se incluyen en la pila.</typeparam>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Una pila; nunca <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">La pila está vacía.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary vsli:raw="Represents an immutable stack.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa una pila inmutable.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" vsli:raw="The type of element on the stack.">Tipo de elemento de la pila.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">Elimina todos los objetos de la pila inmutable.</summary>
      <returns vsli:raw="An empty immutable stack.">Pila inmutable vacía.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary vsli:raw="Gets an empty immutable stack.">Obtiene una pila inmutable vacía.</summary>
      <returns vsli:raw="An empty immutable stack.">Pila inmutable vacía.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable stack without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera el contenido de una pila inmutable sin asignar memoria.
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Elemento de la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable stack.">Desplaza el enumerador al siguiente elemento de la pila inmutable.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the stack.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la pila.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable stack.">Devuelve un enumerador que recorre en iteración la pila inmutable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the stack.">Enumerador que se puede utilizar para recorrer en iteración la pila.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable stack is empty.">Obtiene un valor que indica si esta instancia de la pila inmutable está vacía.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si esta instancia está vacía; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary vsli:raw="Returns the object at the top of the stack without removing it.">Devuelve el objeto situado al principio de la pila sin eliminarlo.</summary>
      <returns vsli:raw="The object at the top of the stack.">Objeto situado al principio de la pila.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">La pila está vacía.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element on the top of the stack.">Obtiene una referencia de solo lectura al elemento en la parte superior de la pila.</summary>
      <returns vsli:raw="A read-only reference to the element on the top of the stack.">Referencia de solo lectura al elemento en la parte superior de la pila.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Se produce cuando la pila está vacía.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the stack after the removal.">Elimina el elemento de la parte superior de la pila inmutable y devuelve la pila después de la eliminación.</summary>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Una pila; nunca <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">La pila está vacía.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary vsli:raw="Removes the specified element from the immutable stack and returns the stack after the removal.">Elimina el elemento especificado de la pila inmutable y devuelve la pila después de la eliminación.</summary>
      <param name="value" vsli:raw="The value to remove from the stack.">Valor que se va a quitar de la pila.</param>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Una pila; nunca <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the immutable stack and returns the new stack.">Inserta un objeto en la parte superior de la pila inmutable y devuelve la nueva pila.</summary>
      <param name="value" vsli:raw="The object to push onto the stack.">Objeto que se va a insertar en la pila.</param>
      <returns vsli:raw="The new stack.">Pila nueva.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">Objeto <see cref="T:System.Collections.IEnumerator" /> que puede usarse para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable stack.">Elimina todos los elementos de la pila inmutable.</summary>
      <returns vsli:raw="The empty immutable stack.">Pila inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">Elimina el elemento de la parte superior de la pila inmutable y devuelve la nueva pila.</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">Nueva pila; nunca <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">Inserta un elemento en la parte superior de la pila inmutable y devuelve la nueva pila.</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">Elemento a insertar en la pila.</param>
      <returns vsli:raw="The new stack.">Pila nueva.</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary vsli:raw="LINQ extension method overrides that offer greater efficiency for &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; than the standard LINQ methods  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Invalidaciones de método de extensión LINQ que ofrecen una mayor eficiencia para <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> que los métodos estándar de LINQ
Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Aplica una función a una secuencia de elementos de forma acumulativa.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">Colección a la que se va a aplicar la función.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Función que se va a invocar en cada elemento de manera acumulativa.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The final value after the cumulative function has been applied to all elements.">Valor final después de aplicar la función acumulativa a todos los elementos.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Aplica una función a una secuencia de elementos de forma acumulativa.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">Colección a la que se va a aplicar la función.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Valor de inicio del acumulador.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Función que se va a invocar en cada elemento de manera acumulativa.</param>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">Tipo del valor acumulado.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The final accumulator value.">Valor final del acumulador.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Aplica una función a una secuencia de elementos de forma acumulativa.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">Colección a la que se va a aplicar la función.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Valor de inicio del acumulador.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Función que se va a invocar en cada elemento de manera acumulativa.</param>
      <param name="resultSelector" vsli:raw="A function to transform the final accumulator value into the result type." />
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">Tipo del valor acumulado.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of result returned by the result selector.">Tipo de resultado devuelto por el selector de resultados.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The final accumulator value.">Valor final del acumulador.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether all elements in this array match a given condition.">Obtiene un valor que indica si todos los elementos de esta matriz coinciden con una condición determinada.</summary>
      <param name="immutableArray" vsli:raw="The array to check for matches.">Matriz para buscar coincidencias.</param>
      <param name="predicate" vsli:raw="The predicate.">Predicado.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element of the source sequence passes the test in the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todos los elementos de la secuencia de origen pasan la prueba en el predicado especificado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements.">Obtiene un valor que indica si la matriz contiene elementos.</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">Matriz para buscar elementos.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array contains an elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la matriz contiene un elemento; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements that match a specified condition.">Obtiene un valor que indica si la matriz contiene elementos que coinciden con una condición especificada.</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">Matriz para buscar elementos.</param>
      <param name="predicate" vsli:raw="The delegate that defines the condition to match to an element.">Delegado que define las condiciones que deben coincidir con los elementos.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element matches the specified condition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un elemento coincide con la condición especificada; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns a value indicating whether this collection contains any elements.">Devuelve un valor que indica si la colección contiene elementos.</summary>
      <param name="builder" vsli:raw="The builder to check for matches.">Generador para buscar coincidencias.</param>
      <typeparam name="T" vsli:raw="The type of elements in the array.">Tipo de los elementos de la matriz.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array builder contains any elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el generador de matrices contiene elementos; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in the array.">Devuelve el elemento situado en un índice especificado de la matriz.</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">Matriz en la que buscar un elemento.</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">Índice del elemento que se va a recuperar.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The item at the specified index.">Elemento que se encuentra en el índice especificado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence or a default value if the index is out of range.">Devuelve el elemento situado en un índice especificado de una secuencia o un valor predeterminado si el índice está fuera del intervalo.</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">Matriz en la que buscar un elemento.</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">Índice del elemento que se va a recuperar.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The item at the specified index, or the default value if the index is not found.">Elemento del índice especificado, o el valor predeterminado si no se encuentra el índice.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element in an array.">Devuelve el primer elemento de una matriz.</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">Matriz de la que obtener un elemento.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The first item in the array.">Primer elemento de la matriz.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Si la matriz está vacía.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element in a sequence that satisfies a specified condition.">Devuelve el primer elemento de una secuencia que satisface una condición especificada.</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">Matriz de la que obtener un elemento.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The first item in the list if it meets the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Primer elemento de la lista si cumple la condición especificada por <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Si la matriz está vacía.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection.">Devuelve el primer elemento de la colección.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an item from.">Generador del que recuperar un elemento.</param>
      <typeparam name="T" vsli:raw="The type of items in the array.">Tipo de elementos de la matriz.</typeparam>
      <returns vsli:raw="The first item in the list.">Primer elemento de la lista.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Si la matriz está vacía.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element of a sequence, or a default value if the sequence contains no elements.">Devuelve el primer elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">Matriz del que recuperar elementos.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">Primer elemento de la lista, si se encuentra; de lo contrario, valor predeterminado para el tipo de elemento.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.">Devuelve el primer elemento de la secuencia que satisface una condición o un valor predeterminado si no se encuentra dicho elemento.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">Matriz de la que recuperar elementos.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">Primer elemento de la lista, si se encuentra; de lo contrario, valor predeterminado para el tipo de elemento.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection, or the default value if the collection is empty.">Devuelve el primer elemento de la colección o el valor predeterminado si la colección está vacía.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">Generador del que recuperar un elemento.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">Tipo del elemento del generador.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">Primer elemento de la lista, si se encuentra; de lo contrario, valor predeterminado para el tipo de elemento.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of the array.">Devuelve el último elemento de la secuencia.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">Matriz del que recuperar elementos.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the array.">Tipo de elemento incluido en la matriz.</typeparam>
      <returns vsli:raw="The last element in the array.">Último elemento de la matriz.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Se produce si la colección está vacía.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a specified condition.">Devuelve el último elemento de una secuencia que satisface una condición especificada.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">Matriz de la que recuperar elementos.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to retrieve.">Delegado que define las condiciones del elemento que se va a recuperar.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The last element of the array that satisfies the &lt;paramref name=&quot;predicate&quot; /&gt; condition.">Último elemento de la matriz que satisface la condición <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Se produce si la colección está vacía.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection.">Devuelve el último elemento de la colección.</summary>
      <param name="builder" vsli:raw="The builder to retrieve elements from.">Generador del que recuperar elementos.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">Tipo del elemento del generador.</typeparam>
      <returns vsli:raw="The last element in the builder.">Último elemento del generador.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Se produce si la colección está vacía.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of a sequence, or a default value if the sequence contains no elements.">Devuelve el último elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">Matriz del que recuperar elementos.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">Último elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.">Devuelve el último elemento de una secuencia que satisface una condición o un valor predeterminado si no se encuentra dicho elemento.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve an element from.">Matriz de la que recuperar un elemento.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">Último elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection, or the default value if the collection is empty.">Devuelve el último elemento de la colección o el valor predeterminado si la colección está vacía.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">Generador del que recuperar un elemento.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">Tipo del elemento del generador.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">Último elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Projects each element of a sequence into a new form.">Proyecta cada elemento de una secuencia a un nuevo formulario.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to select items from.">Matriz inmutable de la que seleccionar elementos.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result element.">Tipo del elemento del resultado.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the transform function on each element of source.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos son el resultado de invocar una función de transformación en cada elemento del origen.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;,             flattens the resulting sequences into one sequence, and invokes a result             selector function on each element therein.">Proyecta cada elemento de una secuencia en <see cref="T:System.Collections.Generic.IEnumerable`1" />, reduce las secuencias resultantes en una única secuencia e invoca una función del selector de resultados en cada elemento.</summary>
      <param name="immutableArray" vsli:raw="The immutable array.">La matriz inmutable.</param>
      <param name="collectionSelector" vsli:raw="A transform function to apply to each element of the input sequence.">Una función de transformación que se va a aplicar a cada elemento de la secuencia de entrada.</param>
      <param name="resultSelector" vsli:raw="A transform function to apply to each element of the intermediate sequence.">Una función de transformación que se va a aplicar a cada elemento de la secuencia intermedia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;immutableArray&quot; /&gt;.">Tipo de los elementos de <paramref name="immutableArray" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">Tipo de los elementos intermedios recopilados por <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">Tipo de los elementos de la secuencia resultante.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result             of invoking the one-to-many transform function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each             element of &lt;paramref name=&quot;immutableArray&quot; /&gt; and then mapping each of those sequence elements and their             corresponding source element to a result element.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos son el resultado de invocar la función de transformación uno a varios <paramref name="collectionSelector" /> en cada elemento de <paramref name="immutableArray" /> y de asignar a continuación cada uno de los elementos de la secuencia y sus elementos de origen correspondientes a un elemento de resultado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Determina si dos secuencias son iguales según un comparador de igualdad.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">Matriz que se va a utilizar para la comparación.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Elementos que se van a utilizar para la comparación.</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">Comparador que se va a utilizar para comprobar la igualdad.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">Tipo de elemento de la matriz comparada.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que las secuencias son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Determina si dos secuencias son iguales según un comparador de igualdad.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">Matriz que se va a utilizar para la comparación.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Elementos que se van a utilizar para la comparación.</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">Comparador que se va a utilizar para comprobar la igualdad.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">Tipo de elemento de la matriz comparada.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que las secuencias son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Determina si dos secuencias son iguales según un comparador de igualdad.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">Matriz que se va a utilizar para la comparación.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Elementos que se van a utilizar para la comparación.</param>
      <param name="predicate" vsli:raw="The comparer to use to check for equality.">Comparador que se va a utilizar para comprobar la igualdad.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">Tipo de elemento de la matriz comparada.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que las secuencias son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.">Devuelve el único elemento de una secuencia y produce una excepción si no hay exactamente un elemento en la secuencia.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve the element from.">Matriz de la que se recupera el elemento.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The element in the sequence.">Elemento de la secuencia.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.">Devuelve el único elemento de una secuencia que cumpla una condición especificada y produce una excepción si existe más de un elemento de este tipo.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to return a single element from." />
      <param name="predicate" vsli:raw="The function to test whether an element should be returned." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Devuelve <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of the array, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.">Devuelve el único elemento de la matriz o un valor predeterminado si la secuencia está vacía; este método produce una excepción si hay más de un elemento en la secuencia.</summary>
      <param name="immutableArray" vsli:raw="The array.">Matriz.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The element in the array, or the default value if the array is empty.">Elemento de la matriz o valor predeterminado si la matriz está vacía.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains more than one element.">
        <paramref name="source" /> contiene más de un elemento.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.">Devuelve el único elemento de una secuencia que cumpla la condición especificada, o bien, un valor predeterminado si ese elemento no existe; este método produce una excepción si varios elementos cumplen la condición.</summary>
      <param name="immutableArray" vsli:raw="The array to get the element from.">Matriz de la que se obtiene el elemento.</param>
      <param name="predicate" vsli:raw="The condition the element must satisfy.">Condición que debe satisfacer el elemento.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The element if it satisfies the specified condition; otherwise the default element.">Elemento si cumple la condición especificada; en caso contrario, el elemento predeterminado.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">Varios elementos satisfacen la condición de <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Copies the contents of this array to a mutable array.">Copia el contenido de la matriz en una matriz mutable.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to copy into a mutable one." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The newly instantiated array.">Matriz de la instancia recién creada.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Crea un diccionario basado en el contenido de esta matriz.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Matriz desde la que crear un diccionario.</param>
      <param name="keySelector" vsli:raw="The key selector.">Selector de claves.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo de la clave.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Diccionario recién inicializado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Crea un diccionario basado en el contenido de esta matriz.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Matriz desde la que crear un diccionario.</param>
      <param name="keySelector" vsli:raw="The key selector.">Selector de claves.</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">Comparador con el que inicializar el diccionario.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo de la clave.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Diccionario recién inicializado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Crea un diccionario basado en el contenido de esta matriz.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Matriz desde la que crear un diccionario.</param>
      <param name="keySelector" vsli:raw="The key selector.">Selector de claves.</param>
      <param name="elementSelector" vsli:raw="The element selector.">Selector de elementos.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo de la clave.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">Tipo de elemento.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Diccionario recién inicializado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Crea un diccionario basado en el contenido de esta matriz.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Matriz desde la que crear un diccionario.</param>
      <param name="keySelector" vsli:raw="The key selector.">Selector de claves.</param>
      <param name="elementSelector" vsli:raw="The element selector.">Selector de elementos.</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">Comparador con el que inicializar el diccionario.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo de la clave.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">Tipo de elemento.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Diccionario recién inicializado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Filters a sequence of values based on a predicate.">Filtra una secuencia de valores en función de un predicado.</summary>
      <param name="immutableArray" vsli:raw="The array to filter.">Matriz que se va a filtrar.</param>
      <param name="predicate" vsli:raw="The condition to use for filtering the array content.">Condición que se va a utilizar para filtrar el contenido de la matriz.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo de elemento incluido en la colección.</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements that meet the condition.">Devuelve <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos que cumplen la condición.</returns>
    </member>
  </members>
</doc>
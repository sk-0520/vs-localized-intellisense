<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit.ILGeneration</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.CustomAttributeBuilder">
      <summary vsli:raw="Helps build custom attributes.">Ayuda a compilar atributos personalizados.</summary>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute and the arguments to the constructor.">Inicializa una instancia de la clase <see langword="CustomAttributeBuilder" /> dado el constructor del atributo personalizado y los argumentos para el constructor.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Constructor para el atributo personalizado.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">Argumentos del constructor del atributo personalizado.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="con" /> es estático o privado.
O bien
El número de argumentos proporcionados no coincide con el número de parámetros del constructor que exige la convención de llamada del constructor.
o bien
El tipo de argumento proporcionado no coincide con el tipo del parámetro declarado en el constructor.
O bien
Un argumento proporcionado es un tipo de referencia distinto de <see cref="T:System.String" /> o <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;constructorArgs&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> o <paramref name="constructorArgs" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, and a set of named field/value pairs.">Inicializa una instancia de la clase <see langword="CustomAttributeBuilder" />, dados el constructor del atributo personalizado, los argumentos para el constructor y un conjunto de pares de campo/valor con nombre.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Constructor para el atributo personalizado.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">Argumentos del constructor del atributo personalizado.</param>
      <param name="namedFields" vsli:raw="Named fields of the custom attribute.">Campos con nombre del atributo personalizado.</param>
      <param name="fieldValues" vsli:raw="Values for the named fields of the custom attribute.">Valores de los campos con nombre del atributo personalizado.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedFields&quot; /&gt; and &lt;paramref name=&quot;fieldValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the field values do not match the types of the named fields.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument or named field is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">La longitud de las matrices <paramref name="namedFields" /> y <paramref name="fieldValues" /> es diferente.
o bien
<paramref name="con" /> es estático o privado.
O bien
El número de argumentos proporcionados no coincide con el número de parámetros del constructor que exige la convención de llamada del constructor.
O bien
El tipo de argumento proporcionado no coincide con el tipo del parámetro declarado en el constructor.
O bien
Los tipos de los valores de campo no coinciden con los tipos de los campos con nombre.
O bien
El campo no pertenece a la misma clase o clase base que el constructor.
O bien
Un argumento proporcionado o un campo con nombre es un tipo de referencia distinto de <see cref="T:System.String" /> o <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Uno de los parámetros es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, and a set of named property or value pairs.">Inicializa una instancia de la clase <see langword="CustomAttributeBuilder" />, dados el constructor del atributo personalizado, los argumentos para el constructor y un conjunto de pares de propiedad o valor con nombre.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Constructor para el atributo personalizado.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">Argumentos del constructor del atributo personalizado.</param>
      <param name="namedProperties" vsli:raw="Named properties of the custom attribute.">Propiedades con nombre del atributo personalizado.</param>
      <param name="propertyValues" vsli:raw="Values for the named properties of the custom attribute.">Valores de las propiedades con nombre del atributo personalizado.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedProperties&quot; /&gt; and &lt;paramref name=&quot;propertyValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the property values do not match the types of the named properties.  &#xA;  &#xA; -or-  &#xA;  &#xA; A property has no setter method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument or named property is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">La longitud de las matrices <paramref name="namedProperties" /> y <paramref name="propertyValues" /> es diferente.
O bien
<paramref name="con" /> es estático o privado.
O bien
El número de argumentos proporcionados no coincide con el número de parámetros del constructor que exige la convención de llamada del constructor.
O bien
El tipo de argumento proporcionado no coincide con el tipo del parámetro declarado en el constructor.
O bien
Los tipos de los valores de propiedad no coinciden con los tipos de las propiedades con nombre.
o bien
Una propiedad no tiene método Set.
O bien
La propiedad no pertenece a la misma clase o clase base que el constructor.
o bien
Un argumento proporcionado o una propiedad con nombre es un tipo de referencia distinto de <see cref="T:System.String" /> o <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Uno de los parámetros es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, a set of named property or value pairs, and a set of named field or value pairs.">Inicializa una instancia de la clase <see langword="CustomAttributeBuilder" />, dados el constructor del atributo personalizado, los argumentos para el constructor, un conjunto de pares de propiedad o valor con nombre, y un conjunto de pares de campo o valor con nombre.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Constructor para el atributo personalizado.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">Argumentos del constructor del atributo personalizado.</param>
      <param name="namedProperties" vsli:raw="Named properties of the custom attribute.">Propiedades con nombre del atributo personalizado.</param>
      <param name="propertyValues" vsli:raw="Values for the named properties of the custom attribute.">Valores de las propiedades con nombre del atributo personalizado.</param>
      <param name="namedFields" vsli:raw="Named fields of the custom attribute.">Campos con nombre del atributo personalizado.</param>
      <param name="fieldValues" vsli:raw="Values for the named fields of the custom attribute.">Valores de los campos con nombre del atributo personalizado.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedProperties&quot; /&gt; and &lt;paramref name=&quot;propertyValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; The lengths of the &lt;paramref name=&quot;namedFields&quot; /&gt; and &lt;paramref name=&quot;fieldValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the property values do not match the types of the named properties.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the field values do not match the types of the corresponding field types.  &#xA;  &#xA; -or-  &#xA;  &#xA; A property has no setter.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property or field does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument, named property, or named field is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">La longitud de las matrices <paramref name="namedProperties" /> y <paramref name="propertyValues" /> es diferente.
O bien
La longitud de las matrices <paramref name="namedFields" /> y <paramref name="fieldValues" /> es diferente.
o bien
<paramref name="con" /> es estático o privado.
o bien
El número de argumentos proporcionados no coincide con el número de parámetros del constructor que exige la convención de llamada del constructor.
o bien
El tipo de argumento proporcionado no coincide con el tipo del parámetro declarado en el constructor.
o bien
Los tipos de los valores de propiedad no coinciden con los tipos de las propiedades con nombre.
o bien
Los tipos de los valores de campo no coinciden con los tipos de los correspondientes tipos de campo.
O bien
Una propiedad no tiene método Set.
O bien
La propiedad o el campo no pertenece a la misma clase o clase base que el constructor.
O bien
Un argumento proporcionado, una propiedad con nombre o un campo con nombre es un tipo de referencia distinto de <see cref="T:System.String" /> o <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Uno de los parámetros es <see langword="null" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.ILGenerator">
      <summary vsli:raw="Generates Microsoft intermediate language (MSIL) instructions.">Genera instrucciones máquina del Lenguaje intermedio de Microsoft (MSIL).</summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
      <summary vsli:raw="Begins a catch block.">Inicia un bloque catch.</summary>
      <param name="exceptionType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the exception.">Objeto <see cref="T:System.Type" /> que representa la excepción.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The catch block is within a filtered exception.">El bloque catch está incluido en una excepción filtrada.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;exceptionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located.">
        <paramref name="exceptionType" /> es <see langword="null" /> y el bloque de filtro de excepciones no ha devuelto un valor que indique que deben ejecutarse los bloques finally hasta que se localice este bloque catch.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.">El Lenguaje intermedio de Microsoft (MSIL) que se está generando no está incluido actualmente en un bloque de excepción.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
      <summary vsli:raw="Begins an exception block for a filtered exception.">Inicia un bloque de excepción para una excepción filtrada.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.  &#xA;  &#xA; -or-  &#xA;  &#xA; This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">El Lenguaje intermedio de Microsoft (MSIL) que se está generando no está incluido actualmente en un bloque de excepción.
o bien
Este <see cref="T:System.Reflection.Emit.ILGenerator" /> pertenece a un <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
      <summary vsli:raw="Begins an exception block for a non-filtered exception.">Inicia un bloque de excepción para una excepción no filtrada.</summary>
      <returns vsli:raw="The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.">Etiqueta correspondiente al final del bloque. Le situará en el lugar correcto para ejecutar bloques finally o para finalizar el bloque try.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
      <summary vsli:raw="Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.">Inicia un bloque de errores de excepción en la secuencia del Lenguaje intermedio de Microsoft (MSIL).</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The MSIL being generated is not currently in an exception block.  &#xA;  &#xA; -or-  &#xA;  &#xA; This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">El MSIL que se está generando no se encuentra en un bloque de excepción.
O bien
Este <see cref="T:System.Reflection.Emit.ILGenerator" /> pertenece a un <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
      <summary vsli:raw="Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.">Inicia un bloque finally en la secuencia de instrucciones máquina del Lenguaje intermedio de Microsoft (MSIL).</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The MSIL being generated is not currently in an exception block.">El MSIL que se está generando no se encuentra en un bloque de excepción.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginScope">
      <summary vsli:raw="Begins a lexical scope.">Inicia un ámbito léxico.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Este <see cref="T:System.Reflection.Emit.ILGenerator" /> pertenece a un <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
      <summary vsli:raw="Declares a local variable of the specified type.">Declara una variable local del tipo especificado.</summary>
      <param name="localType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of the local variable.">Objeto <see cref="T:System.Type" /> que representa el tipo de la variable local.</param>
      <returns vsli:raw="The declared local variable.">Variable local declarada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">El método <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> ha creado el tipo contenedor.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
      <summary vsli:raw="Declares a local variable of the specified type, optionally pinning the object referred to by the variable.">Declara una variable local del tipo especificado, y ancla opcionalmente el objeto al que hace referencia la variable.</summary>
      <param name="localType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of the local variable.">Objeto <see cref="T:System.Type" /> que representa el tipo de la variable local.</param>
      <param name="pinned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to pin the object in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para anclar el objeto en memoria; de lo contrario, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.LocalBuilder&quot; /&gt; object that represents the local variable.">Objeto <see cref="T:System.Reflection.Emit.LocalBuilder" /> que representa la variable local.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method body of the enclosing method has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)&quot; /&gt; method.">El método <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> ha creado el tipo contenedor.
o bien
El método <see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" /> ha creado el cuerpo del método contenedor.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The method with which this &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; is associated is not represented by a &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">El método al que se encuentra asociado este objeto <see cref="T:System.Reflection.Emit.ILGenerator" /> no está representado por un objeto <see cref="T:System.Reflection.Emit.MethodBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DefineLabel">
      <summary vsli:raw="Declares a new label.">Declara una nueva etiqueta.</summary>
      <returns vsli:raw="A new label that can be used as a token for branching.">Nueva etiqueta que se puede utilizar como símbolo (token) para la bifurcación.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Puts the specified instruction onto the stream of instructions.">Coloca la instrucción máquina especificada en la secuencia de instrucciones máquina.</summary>
      <param name="opcode" vsli:raw="The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.">Instrucción máquina del Lenguaje intermedio de Microsoft (MSIL) que se va a colocar en la secuencia.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
      <summary vsli:raw="Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Coloca la instrucción máquina y el argumento de carácter especificados en la secuencia de instrucciones máquina del Lenguaje intermedio de Microsoft (MSIL).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Instrucción máquina MSIL que se va a colocar en la secuencia.</param>
      <param name="arg" vsli:raw="The character argument pushed onto the stream immediately after the instruction.">Argumento de carácter insertado en la secuencia inmediatamente después de la instrucción máquina.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Coloca la instrucción máquina y el argumento numérico especificados en la secuencia de instrucciones máquina del Lenguaje intermedio de Microsoft (MSIL).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream. Defined in the &lt;see langword=&quot;OpCodes&quot; /&gt; enumeration.">Instrucción máquina MSIL que se va a colocar en la secuencia. Se define en la enumeración <see langword="OpCodes" />.</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">Argumento numérico que se inserta en la secuencia inmediatamente después de la instrucción máquina.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Coloca la instrucción máquina y el argumento numérico especificados en la secuencia de instrucciones máquina del Lenguaje intermedio de Microsoft (MSIL).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">La instrucción MSIL que se emiten en la secuencia.</param>
      <param name="arg" vsli:raw="The &lt;see langword=&quot;Int&quot; /&gt; argument pushed onto the stream immediately after the instruction.">Argumento <see langword="Int" /> que se inserta en la secuencia inmediatamente después de la instrucción máquina.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Coloca la instrucción máquina y el argumento numérico especificados en la secuencia de instrucciones máquina del Lenguaje intermedio de Microsoft (MSIL).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Instrucción máquina MSIL que se va a colocar en la secuencia.</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">Argumento numérico que se inserta en la secuencia inmediatamente después de la instrucción máquina.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Coloca la instrucción máquina y el argumento numérico especificados en la secuencia de instrucciones máquina del Lenguaje intermedio de Microsoft (MSIL).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Instrucción máquina MSIL que se va a colocar en la secuencia.</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">Argumento numérico que se inserta en la secuencia inmediatamente después de la instrucción máquina.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.">Coloca la instrucción máquina y el símbolo (token) de metadatos especificados del constructor especificado en la secuencia de instrucciones máquina del Lenguaje intermedio de Microsoft (MSIL).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">La instrucción MSIL que se emiten en la secuencia.</param>
      <param name="con" vsli:raw="A &lt;see langword=&quot;ConstructorInfo&quot; /&gt; representing a constructor.">
        <see langword="ConstructorInfo" /> que representa un constructor.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This exception is new in the .NET Framework 4.">
        <paramref name="con" /> es <see langword="null" />. Esta excepción es nueva en .NET Framework 4.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.">Coloca la instrucción máquina especificada en la secuencia del Lenguaje intermedio de Microsoft (MSIL) y deja espacio para incluir una etiqueta cuando se efectúen correcciones.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">La instrucción MSIL que se emiten en la secuencia.</param>
      <param name="label" vsli:raw="The label to which to branch from this location.">Etiqueta a la que se va a saltar desde esta posición.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.">Coloca la instrucción máquina especificada en la secuencia del Lenguaje intermedio de Microsoft (MSIL) y deja espacio para incluir una etiqueta cuando se efectúen correcciones.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">La instrucción MSIL que se emiten en la secuencia.</param>
      <param name="labels" vsli:raw="The array of label objects to which to branch from this location. All of the labels will be used.">Matriz de objetos de etiqueta en la que se va a realizar la bifurcación desde esta posición. Se utilizan todas las etiquetas.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This exception is new in the .NET Framework 4.">
        <paramref name="con" /> es <see langword="null" />. Esta excepción es nueva en .NET Framework 4.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.">Coloca la instrucción máquina especificada en la secuencia del Lenguaje intermedio de Microsoft (MSIL) seguida del índice de la variable local indicada.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">La instrucción MSIL que se emiten en la secuencia.</param>
      <param name="local" vsli:raw="A local variable.">Variable local.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The parent method of the &lt;paramref name=&quot;local&quot; /&gt; parameter does not match the method associated with this &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;.">El método primario de <paramref name="local" /> no coincide con el método asociado a este <see cref="T:System.Reflection.Emit.ILGenerator" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;local&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="local" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;opcode&quot; /&gt; is a single-byte instruction, and &lt;paramref name=&quot;local&quot; /&gt; represents a local variable with an index greater than &lt;see langword=&quot;Byte.MaxValue&quot; /&gt;.">
        <paramref name="opcode" /> es una instrucción máquina de un solo byte y <paramref name="local" /> representa una variable local con un índice mayor que <see langword="Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
      <summary vsli:raw="Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.">Coloca la instrucción máquina especificada y un símbolo (token) de firma en la secuencia de instrucciones máquina del Lenguaje intermedio de Microsoft (MSIL).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">La instrucción MSIL que se emiten en la secuencia.</param>
      <param name="signature" vsli:raw="A helper for constructing a signature token.">Asistente para crear un símbolo (token) de firma.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;signature&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="signature" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
      <summary vsli:raw="Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.">Coloca la instrucción máquina y el símbolo (token) de metadatos especificados del campo especificado en la secuencia de instrucciones máquina del Lenguaje intermedio de Microsoft (MSIL).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">La instrucción MSIL que se emiten en la secuencia.</param>
      <param name="field" vsli:raw="A &lt;see langword=&quot;FieldInfo&quot; /&gt; representing a field.">
        <see langword="FieldInfo" /> que representa un campo.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.">Coloca la instrucción máquina especificada en la secuencia del Lenguaje intermedio de Microsoft (MSIL) seguida del símbolo (token) de metadatos del método indicado.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">La instrucción MSIL que se emiten en la secuencia.</param>
      <param name="meth" vsli:raw="A &lt;see langword=&quot;MethodInfo&quot; /&gt; representing a method.">
        <see langword="MethodInfo" /> que representa un método.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;meth&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="meth" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;meth&quot; /&gt; is a generic method for which the &lt;see cref=&quot;P:System.Reflection.MethodBase.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="meth" /> es un método genérico para el que la propiedad <see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /> es <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
      <summary vsli:raw="Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Coloca la instrucción máquina y el argumento de carácter especificados en la secuencia de instrucciones máquina del Lenguaje intermedio de Microsoft (MSIL).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Instrucción máquina MSIL que se va a colocar en la secuencia.</param>
      <param name="arg" vsli:raw="The character argument pushed onto the stream immediately after the instruction.">Argumento de carácter insertado en la secuencia inmediatamente después de la instrucción máquina.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Coloca la instrucción máquina y el argumento numérico especificados en la secuencia de instrucciones máquina del Lenguaje intermedio de Microsoft (MSIL).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Instrucción máquina MSIL que se va a colocar en la secuencia.</param>
      <param name="arg" vsli:raw="The &lt;see cref=&quot;T:System.Single&quot; /&gt; argument pushed onto the stream immediately after the instruction.">Argumento <see langword="Single" /> que se inserta en la secuencia inmediatamente después de la instrucción máquina.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.">Coloca la instrucción máquina especificada en la secuencia del Lenguaje intermedio de Microsoft (MSIL) seguida del símbolo (token) de metadatos de la cadena indicada.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">La instrucción MSIL que se emiten en la secuencia.</param>
      <param name="str" vsli:raw="The &lt;see langword=&quot;String&quot; /&gt; to be emitted.">
        <see langword="String" /> que se va a emitir.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.">Coloca la instrucción máquina especificada en la secuencia del Lenguaje intermedio de Microsoft (MSIL) seguida del símbolo (token) de metadatos del tipo indicado.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Instrucción máquina MSIL que se va a colocar en la secuencia.</param>
      <param name="cls" vsli:raw="A &lt;see langword=&quot;Type&quot; /&gt;.">Objeto <see langword="Type" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;cls&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="cls" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
      <summary vsli:raw="Puts a &lt;see langword=&quot;call&quot; /&gt; or &lt;see langword=&quot;callvirt&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream to call a &lt;see langword=&quot;varargs&quot; /&gt; method.">Coloca una instrucción <see langword="call" /> o <see langword="callvirt" /> en la secuencia de Lenguaje Intermedio de Microsoft (MSIL) para llamar a un método <see langword="varargs" />.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Call&quot; /&gt;, &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Callvirt&quot; /&gt;, or &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Newobj&quot; /&gt;.">La instrucción MSIL que se emiten en la secuencia. Debe ser <see cref="F:System.Reflection.Emit.OpCodes.Call" />, <see cref="F:System.Reflection.Emit.OpCodes.Callvirt" /> o <see cref="F:System.Reflection.Emit.OpCodes.Newobj" />.</param>
      <param name="methodInfo" vsli:raw="The &lt;see langword=&quot;varargs&quot; /&gt; method to be called.">Método <see langword="varargs" /> al que se va a llamar.</param>
      <param name="optionalParameterTypes" vsli:raw="The types of the optional arguments if the method is a &lt;see langword=&quot;varargs&quot; /&gt; method; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Tipos de los argumentos opcionales si se trata de un método <see langword="varargs" />; de lo contrario, <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;opcode&quot; /&gt; does not specify a method call.">
        <paramref name="opcode" /> no especifica una llamada de método.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;methodInfo&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="methodInfo" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The calling convention for the method is not &lt;see langword=&quot;varargs&quot; /&gt;, but optional parameter types are supplied. This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.">La convención de llamada del método no es <see langword="varargs" />, pero se proporcionan tipos de parámetro opcionales. Esta excepción se inicia en las versiones 1.0 y 1.1 de .NET Framework. En versiones posteriores, no se inicia ninguna excepción.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
      <summary vsli:raw="Puts a &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.">Coloca una instrucción máquina <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> en la secuencia del Lenguaje intermedio de Microsoft (MSIL), especificando una convención de llamada administrada para la llamada indirecta.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt;.">La instrucción MSIL que se emiten en la secuencia. Debe ser <see cref="F:System.Reflection.Emit.OpCodes.Calli" />.</param>
      <param name="callingConvention" vsli:raw="The managed calling convention to be used.">Convención de llamada administrada que se va a utilizar.</param>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the result.">
        <see cref="T:System.Type" /> del resultado.</param>
      <param name="parameterTypes" vsli:raw="The types of the required arguments to the instruction.">Tipos de los argumentos requeridos de la instrucción máquina.</param>
      <param name="optionalParameterTypes" vsli:raw="The types of the optional arguments for &lt;see langword=&quot;varargs&quot; /&gt; calls.">Tipos de los argumentos opcionales para las llamadas <see langword="varargs" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;optionalParameterTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, but &lt;paramref name=&quot;callingConvention&quot; /&gt; does not include the &lt;see cref=&quot;F:System.Reflection.CallingConventions.VarArgs&quot; /&gt; flag.">
        <paramref name="optionalParameterTypes" /> no es <see langword="null" />, pero <paramref name="callingConvention" /> no incluye el marcador <see cref="F:System.Reflection.CallingConventions.VarArgs" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
      <summary vsli:raw="Puts a &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.">Coloca una instrucción máquina <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> en la secuencia del Lenguaje intermedio de Microsoft (MSIL), especificando una convención de llamada no administrada para la llamada indirecta.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt;.">La instrucción MSIL que se emiten en la secuencia. Debe ser <see cref="F:System.Reflection.Emit.OpCodes.Calli" />.</param>
      <param name="unmanagedCallConv" vsli:raw="The unmanaged calling convention to be used.">Convención de llamada no administrada que se va a utilizar.</param>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the result.">
        <see cref="T:System.Type" /> del resultado.</param>
      <param name="parameterTypes" vsli:raw="The types of the required arguments to the instruction.">Tipos de los argumentos requeridos de la instrucción máquina.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) necessary to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with the given local variable.">Emite el Lenguaje Intermedio de Microsoft (MSIL) necesario para llamar a <see cref="Overload:System.Console.WriteLine" /> con la variable local dada.</summary>
      <param name="localBuilder" vsli:raw="The local variable whose value is to be written to the console.">La variable local cuyo valor se va a escribir en la consola.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The type of &lt;paramref name=&quot;localBuilder&quot; /&gt; is &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;, which are not supported.  &#xA;  &#xA; -or-  &#xA;  &#xA; There is no overload of &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; that accepts the type of &lt;paramref name=&quot;localBuilder&quot; /&gt;.">El tipo de <paramref name="localBuilder" /> es <see cref="T:System.Reflection.Emit.TypeBuilder" /> o <see cref="T:System.Reflection.Emit.EnumBuilder" />, que no son compatibles.
o bien
No hay ninguna sobrecarga de <see cref="Overload:System.Console.WriteLine" /> que acepta el tipo de <paramref name="localBuilder" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localBuilder" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) necessary to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with the given field.">Emite el Lenguaje intermedio de Microsoft (MSIL) necesario para llamar a <see cref="Overload:System.Console.WriteLine" /> con el campo especificado.</summary>
      <param name="fld" vsli:raw="The field whose value is to be written to the console.">Campo cuyo valor se va a escribir en la consola.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There is no overload of the &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; method that accepts the type of the specified field.">No existe ninguna sobrecarga del método <see cref="Overload:System.Console.WriteLine" /> que acepte el tipo del campo especificado.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fld&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fld" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The type of the field is &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;, which are not supported.">El tipo del campo es <see cref="T:System.Reflection.Emit.TypeBuilder" /> o <see cref="T:System.Reflection.Emit.EnumBuilder" />, los cuales no se admiten.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with a string.">Emite el Lenguaje intermedio de Microsoft (MSIL) necesario para llamar a <see cref="Overload:System.Console.WriteLine" /> con una cadena.</summary>
      <param name="value" vsli:raw="The string to be printed.">Cadena que se va a imprimir.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
      <summary vsli:raw="Ends an exception block.">Finaliza un bloque de excepción.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The end exception block occurs in an unexpected place in the code stream.">El bloque de excepción final se produce en una posición inesperada de la secuencia de código.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.">El Lenguaje intermedio de Microsoft (MSIL) que se está generando no está incluido actualmente en un bloque de excepción.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndScope">
      <summary vsli:raw="Ends a lexical scope.">Finaliza un ámbito léxico.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Este <see cref="T:System.Reflection.Emit.ILGenerator" /> pertenece a un <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ILGenerator.ILOffset">
      <summary vsli:raw="Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;.">Obtiene el desplazamiento actual, en bytes, de la secuencia del Lenguaje intermedio de Microsoft (MSIL) que emite el objeto <see cref="T:System.Reflection.Emit.ILGenerator" />.</summary>
      <returns vsli:raw="The offset in the MSIL stream at which the next instruction will be emitted.">Desplazamiento de la secuencia de MSIL en la que se va a emitir la siguiente instrucción.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
      <summary vsli:raw="Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.">Marca la posición actual de la secuencia del Lenguaje intermedio de Microsoft (MSIL) con la etiqueta especificada.</summary>
      <param name="loc" vsli:raw="The label for which to set an index.">Etiqueta para la que se va a establecer un índice.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;loc&quot; /&gt; represents an invalid index into the label array.  &#xA;  &#xA; -or-  &#xA;  &#xA; An index for &lt;paramref name=&quot;loc&quot; /&gt; has already been defined.">
        <paramref name="loc" /> representa un índice no válido en la matriz de etiquetas.
o bien
Ya se ha definido un índice para <paramref name="loc" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
      <summary vsli:raw="Emits an instruction to throw an exception.">Emite una instrucción máquina para producir una excepción.</summary>
      <param name="excType" vsli:raw="The class of the type of exception to throw.">Clase del tipo de excepción que se va a producir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;excType&quot; /&gt; is not the &lt;see cref=&quot;T:System.Exception&quot; /&gt; class or a derived class of &lt;see cref=&quot;T:System.Exception&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type does not have a parameterless constructor.">
        <paramref name="excType" /> no es la clase <see cref="T:System.Exception" /> ni una clase derivada de <see cref="T:System.Exception" />.
o bien
El tipo no tiene ningún constructor sin parámetros.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;excType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="excType" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
      <summary vsli:raw="Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.">Especifica el espacio de nombres que se va a utilizar para evaluar las variables locales e inspecciones del actual ámbito léxico activo.</summary>
      <param name="usingNamespace" vsli:raw="The namespace to be used in evaluating locals and watches for the current active lexical scope.">Espacio de nombres que se va a utilizar para evaluar las variables locales e inspecciones del actual ámbito léxico activo.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;usingNamespace&quot; /&gt; is zero.">La longitud de <paramref name="usingNamespace" /> es cero.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;usingNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="usingNamespace" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Este <see cref="T:System.Reflection.Emit.ILGenerator" /> pertenece a un <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.Label">
      <summary vsli:raw="Represents a label in the instruction stream. &lt;see langword=&quot;Label&quot; /&gt; is used in conjunction with the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; class.">Representa una etiqueta en la secuencia de instrucciones. La interfaz <see langword="Label" /> se utiliza junto con la clase <see cref="T:System.Reflection.Emit.ILGenerator" />.</summary>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Object)">
      <summary vsli:raw="Checks if the given object is an instance of &lt;see langword=&quot;Label&quot; /&gt; and is equal to this instance.">Comprueba si el objeto dado es una instancia de <see langword="Label" /> y si es igual a esta.</summary>
      <param name="obj" vsli:raw="The object to compare with this &lt;see langword=&quot;Label&quot; /&gt; instance.">Objeto que se va a comparar con la instancia <see langword="Label" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;Label&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="obj" /> es una instancia de <see langword="Label" /> y es igual a este objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether the current instance is equal to the specified &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt;.">Indica si la instancia actual es igual al <see cref="T:System.Reflection.Emit.Label" /> especificado.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to the current instance.">
        <see cref="T:System.Reflection.Emit.Label" /> que se va a comparar con la instancia actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;obj&quot; /&gt; is equal to the value of the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el valor de <paramref name="obj" /> es igual al de la instancia actual; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.GetHashCode">
      <summary vsli:raw="Generates a hash code for this instance.">Genera un código hash para esta instancia.</summary>
      <returns vsli:raw="A hash code for this instance.">Código hash para esta instancia.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; structures are equal.">Indica si dos estructuras de <see cref="T:System.Reflection.Emit.Label" /> son iguales.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.Label" /> que se compara con <paramref name="b" />.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.Label" /> que se compara con <paramref name="a" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="a" /> es igual a <paramref name="b" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; structures are not equal.">Indica si dos estructuras de <see cref="T:System.Reflection.Emit.Label" /> no son iguales.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.Label" /> que se compara con <paramref name="b" />.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.Label" /> que se compara con <paramref name="a" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is not equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="a" /> no es igual a <paramref name="b" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.Emit.LocalBuilder">
      <summary vsli:raw="Represents a local variable within a method or constructor.">Representa una variable local en un método o constructor.</summary>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.IsPinned">
      <summary vsli:raw="Gets a value indicating whether the object referred to by the local variable is pinned in memory.">Obtiene un valor que indica si el objeto al que hace referencia la variable local está anclado en memoria.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object referred to by the local variable is pinned in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el objeto al que hace referencia la variable local está anclado en memoria; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalIndex">
      <summary vsli:raw="Gets the zero-based index of the local variable within the method body.">Obtiene el índice de base cero de la variable local dentro del cuerpo del método.</summary>
      <returns vsli:raw="An integer value that represents the order of declaration of the local variable within the method body.">Valor entero que representa el orden de declaración de la variable local en el cuerpo del método.</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalType">
      <summary vsli:raw="Gets the type of the local variable.">Obtiene el tipo de la variable local.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the local variable.">
        <see cref="T:System.Type" /> de la variable local.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ParameterBuilder">
      <summary vsli:raw="Creates or associates parameter information.">Crea o asocia información de parámetros.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Attributes">
      <summary vsli:raw="Retrieves the attributes for this parameter.">Recupera los atributos para este parámetro.</summary>
      <returns vsli:raw="Read-only. Retrieves the attributes for this parameter.">Sólo lectura. Recupera los atributos para este parámetro.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsIn">
      <summary vsli:raw="Retrieves whether this is an input parameter.">Recupera si este parámetro es de entrada.</summary>
      <returns vsli:raw="Read-only. Retrieves whether this is an input parameter.">Sólo lectura. Recupera si este parámetro es de entrada.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOptional">
      <summary vsli:raw="Retrieves whether this parameter is optional.">Recupera si este parámetro es opcional.</summary>
      <returns vsli:raw="Read-only. Specifies whether this parameter is optional.">Sólo lectura. Especifica si este parámetro es opcional.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOut">
      <summary vsli:raw="Retrieves whether this parameter is an output parameter.">Recupera si este parámetro es de salida.</summary>
      <returns vsli:raw="Read-only. Retrieves whether this parameter is an output parameter.">Sólo lectura. Recupera si este parámetro es de salida.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Name">
      <summary vsli:raw="Retrieves the name of this parameter.">Recupera el nombre de este parámetro.</summary>
      <returns vsli:raw="Read-only. Retrieves the name of this parameter.">Sólo lectura. Recupera el nombre de este parámetro.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Position">
      <summary vsli:raw="Retrieves the signature position for this parameter.">Recupera la posición de firma para este parámetro.</summary>
      <returns vsli:raw="Read-only. Retrieves the signature position for this parameter.">Sólo lectura. Recupera la posición de firma para este parámetro.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of the parameter.">Establece el valor predeterminado del parámetro.</summary>
      <param name="defaultValue" vsli:raw="The default value of this parameter.">Valor predeterminado de este parámetro.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The parameter is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the parameter.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parameter is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">El parámetro no pertenece a ningún tipo compatible.
O bien
El tipo de <paramref name="defaultValue" /> no coincide con el tipo del parámetro.
o bien
El parámetro es de tipo <see cref="T:System.Object" /> o de otro tipo de referencia, el valor de <paramref name="defaultValue" /> no es <see langword="null" /> y el valor no se puede asignar al tipo de referencia.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">Establece un atributo personalizado mediante un blob de atributo personalizado especificado.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Constructor para el atributo personalizado.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Blob de bytes que representa los atributos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">Establece un atributo personalizado mediante un generador de atributos personalizado.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Instancia de una clase del asistente para definir el atributo personalizado.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.SignatureHelper">
      <summary vsli:raw="Provides methods for building signatures.">Proporciona métodos para compilar firmas.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)">
      <summary vsli:raw="Adds an argument to the signature.">Agrega un argumento a la firma.</summary>
      <param name="clsArgument" vsli:raw="The type of the argument.">Tipo del argumento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.">La firma ya ha finalizado.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;clsArgument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="clsArgument" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)">
      <summary vsli:raw="Adds an argument of the specified type to the signature, specifying whether the argument is pinned.">Agrega un argumento del tipo especificado a la firma, indicando si el argumento está o no anclado.</summary>
      <param name="argument" vsli:raw="The argument type.">Tipo de argumento.</param>
      <param name="pinned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the argument is pinned; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el argumento está anclado; en caso contrario, es <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;argument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argument" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])">
      <summary vsli:raw="Adds an argument to the signature, with the specified custom modifiers.">Agrega un argumento a la firma, con los modificadores personalizados especificados.</summary>
      <param name="argument" vsli:raw="The argument type.">Tipo de argumento.</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matriz de tipos que representa los modificadores personalizados obligatorios para el argumento, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si el argumento no tiene modificadores personalizados obligatorios, especifique <see langword="null" />.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matriz de tipos que representa los modificadores personalizados opcionales para el argumento, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si el argumento no tiene modificadores personalizados opcionales, especifique <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;argument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argument" /> es <see langword="null" />.
o bien
Un elemento de <paramref name="requiredCustomModifiers" /> u <paramref name="optionalCustomModifiers" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.">La firma ya ha finalizado.
O bien
Uno de los modificadores personalizados especificados es un tipo de matriz.
o bien
Uno de los modificadores personalizados especificados es un tipo genérico abierto. Es decir, la propiedad <see cref="P:System.Type.ContainsGenericParameters" /> es <see langword="true" /> para el modificador personalizado.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a set of arguments to the signature, with the specified custom modifiers.">Agrega un conjunto de argumentos a la firma, con los modificadores personalizados especificados.</summary>
      <param name="arguments" vsli:raw="The types of the arguments to be added.">Tipos de los argumentos que se van a agregar.</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matriz de matrices de tipos. Cada matriz de tipos representa los modificadores personalizados obligatorios para el argumento correspondiente, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si un argumento concreto no tiene modificadores personalizados obligatorios, especifique <see langword="null" /> en lugar de una matriz de tipos. Si ningún argumento tiene modificadores personalizados obligatorios, especifique <see langword="null" /> en lugar de una matriz de matrices.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matriz de matrices de tipos. Cada matriz de tipos representa los modificadores personalizados opcionales para el argumento correspondiente, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si un argumento concreto no tiene modificadores personalizados opcionales, especifique <see langword="null" /> en lugar de una matriz de tipos. Si ningún argumento tiene modificadores personalizados opcionales, especifique <see langword="null" /> en lugar de una matriz de matrices.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">Un elemento de <paramref name="arguments" /> es <see langword="null" />.
O bien
Uno de los modificadores personalizados especificados es <see langword="null" />. (Sin embargo, se puede especificar <see langword="null" /> para la matriz de modificadores personalizados para cualquier argumento).</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;arguments&quot; /&gt;.">La firma ya ha finalizado.
O bien
Uno de los modificadores personalizados especificados es un tipo de matriz.
O bien
Uno de los modificadores personalizados especificados es un tipo genérico abierto. Es decir, la propiedad <see cref="P:System.Type.ContainsGenericParameters" /> es <see langword="true" /> para el modificador personalizado.
o bien
El tamaño de <paramref name="requiredCustomModifiers" /> o <paramref name="optionalCustomModifiers" /> no es igual al tamaño de <paramref name="arguments" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddSentinel">
      <summary vsli:raw="Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.">Marca el final de la parte corregida de un vararg. Sólo se utiliza si el llamador crea un lugar de llamadas de firma vararg.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)">
      <summary vsli:raw="Checks if this instance is equal to the given object.">Comprueba si esta instancia es igual al objeto especificado.</summary>
      <param name="obj" vsli:raw="The object with which this instance should be compared.">Objeto con el que se debe comparar esta instancia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given object is a &lt;see langword=&quot;SignatureHelper&quot; /&gt; and represents the same signature; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el objeto especificado es un objeto <see langword="SignatureHelper" /> y representa la misma firma; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)">
      <summary vsli:raw="Returns a signature helper for a field.">Devuelve un asistente para las firmas de un campo.</summary>
      <param name="mod" vsli:raw="The dynamic module that contains the field for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">Módulo dinámico que contiene el campo para el que se solicita el objeto <see langword="SignatureHelper" />.</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a field.">Objeto <see langword="SignatureHelper" /> de un campo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetHashCode">
      <summary vsli:raw="Creates and returns a hash code for this instance.">Crea y devuelve un código hash para esta instancia.</summary>
      <returns vsli:raw="The hash code based on the name.">Código hash basado en el nombre.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper">
      <summary vsli:raw="Returns a signature helper for a local variable.">Devuelve un asistente para las firmas de una variable local.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; for a local variable.">
        <see cref="T:System.Reflection.Emit.SignatureHelper" /> para una variable local.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)">
      <summary vsli:raw="Returns a signature helper for a local variable.">Devuelve un asistente para las firmas de una variable local.</summary>
      <param name="mod" vsli:raw="The dynamic module that contains the local variable for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">Módulo dinámico que contiene la variable local para la que se solicita el objeto <see langword="SignatureHelper" />.</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a local variable.">Objeto <see langword="SignatureHelper" /> de una variable local.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)">
      <summary vsli:raw="Returns a signature helper for a method given the method's calling convention and return type.">Devuelve un asistente para las firmas de un método a partir del módulo, la convención de llamada y el tipo de valor devuelto del método.</summary>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Convención de llamada del método.</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">Tipo de valor devuelto del método, o <see langword="null" /> para un tipo de valor devuelto void (procedimiento <see langword="Sub" /> en Visual Basic).</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">El objeto <see langword="SignatureHelper" /> de un método.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)">
      <summary vsli:raw="Returns a signature helper for a method given the method's module, calling convention, and return type.">Devuelve un asistente de firma para un método dado el módulo del método, la convención de llamada y tipo de valor devuelto.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the method for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" /> que contiene el método para el que se solicita el objeto <see langword="SignatureHelper" />.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Convención de llamada del método.</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">Tipo de valor devuelto del método, o <see langword="null" /> para un tipo de valor devuelto void (procedimiento <see langword="Sub" /> en Visual Basic).</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">El objeto <see langword="SignatureHelper" /> de un método.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> no es un <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary vsli:raw="Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.">Devuelve un asistente para las firmas de un método con una convención de llamada estándar, a partir del módulo, el tipo de valor devuelto y los tipos de argumento del método.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the method for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" /> que contiene el método para el que se solicita el objeto <see langword="SignatureHelper" />.</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">Tipo de valor devuelto del método, o <see langword="null" /> para un tipo de valor devuelto void (procedimiento <see langword="Sub" /> en Visual Basic).</param>
      <param name="parameterTypes" vsli:raw="The types of the arguments of the method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no arguments.">Los tipos de los argumentos del método, o <see langword="null" /> si el método no tiene ningún argumento.</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">El objeto <see langword="SignatureHelper" /> de un método.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> es <see langword="null" />.
O bien
Un elemento de <paramref name="parameterTypes" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> no es un <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.">Devuelve un asistente para las firmas de una propiedad, a partir del módulo dinámico que contiene la propiedad, la convención de llamada, el tipo de propiedad, los argumentos de la propiedad y los modificadores personalizados para los argumentos y el tipo de valor devuelto.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" /> que contiene la propiedad para la que se solicita el objeto <see cref="T:System.Reflection.Emit.SignatureHelper" />.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">Convención de llamada de los descriptores de acceso de la propiedad.</param>
      <param name="returnType" vsli:raw="The property type.">Tipo de propiedad.</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matriz de tipos que representa los modificadores personalizados obligatorios para el tipo de valor devuelto, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si el tipo de valor devuelto no tiene ningún modificador personalizado requerido, especifique <see langword="null" />.</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matriz de tipos que representa los modificadores personalizados opcionales para el tipo de valor devuelto, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si el tipo de valor devuelto no tiene ningún modificador personalizados opcional, especifique <see langword="null" />.</param>
      <param name="parameterTypes" vsli:raw="The types of the property's arguments, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">Tipos de los argumentos de la propiedad o <see langword="null" /> si la propiedad no tiene ningún argumento.</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matriz de matrices de tipos. Cada matriz de tipos representa los modificadores personalizados obligatorios para el argumento correspondiente de la propiedad. Si un argumento concreto no tiene modificadores personalizados obligatorios, especifique <see langword="null" /> en lugar de una matriz de tipos. Si la propiedad no tiene ningún argumento o si ninguno de los argumentos tiene modificadores personalizados obligatorios, especifique <see langword="null" /> en lugar de una matriz de matrices.</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matriz de matrices de tipos. Cada matriz de tipos representa los modificadores personalizados opcionales para el argumento correspondiente de la propiedad. Si un argumento concreto no tiene modificadores personalizados opcionales, especifique <see langword="null" /> en lugar de una matriz de tipos. Si la propiedad no tiene ningún argumento o si ninguno de los argumentos tiene modificadores personalizados opcionales, especifique <see langword="null" /> en lugar de una matriz de matrices.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">Objeto <see cref="T:System.Reflection.Emit.SignatureHelper" /> de una propiedad.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="mod" /> es <see langword="null" />.
o bien
Un elemento de <paramref name="parameterTypes" /> es <see langword="null" />.
O bien
Uno de los modificadores personalizados especificados es <see langword="null" />. (Sin embargo, se puede especificar <see langword="null" /> para la matriz de modificadores personalizados para cualquier argumento).</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredParameterTypeCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalParameterTypeCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">La firma ya ha finalizado.
O bien
<paramref name="mod" /> no es un <see cref="T:System.Reflection.Emit.ModuleBuilder" />.
o bien
Uno de los modificadores personalizados especificados es un tipo de matriz.
o bien
Uno de los modificadores personalizados especificados es un tipo genérico abierto. Es decir, la propiedad <see cref="P:System.Type.ContainsGenericParameters" /> es <see langword="true" /> para el modificador personalizado.
o bien
El tamaño de <paramref name="requiredParameterTypeCustomModifiers" /> o <paramref name="optionalParameterTypeCustomModifiers" /> no es igual al tamaño de <paramref name="parameterTypes" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.">Devuelve un asistente para las firmas de una propiedad, a partir del módulo dinámico que contiene la propiedad, el tipo de propiedad y los argumentos de la propiedad.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" /> que contiene la propiedad para la que se solicita el objeto <see cref="T:System.Reflection.Emit.SignatureHelper" />.</param>
      <param name="returnType" vsli:raw="The property type.">Tipo de propiedad.</param>
      <param name="parameterTypes" vsli:raw="The argument types, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">Tipos de argumento, o <see langword="null" /> si la propiedad no tiene ningún argumento.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">Objeto <see cref="T:System.Reflection.Emit.SignatureHelper" /> de una propiedad.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> es <see langword="null" />.
O bien
Un elemento de <paramref name="parameterTypes" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> no es un <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.">Devuelve un asistente para las firmas de una propiedad, a partir del módulo dinámico que contiene la propiedad, el tipo de propiedad, los argumentos de la propiedad, y los modificadores personalizados para los argumentos y el tipo de valor devuelto.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" /> que contiene la propiedad para la que se solicita el objeto <see cref="T:System.Reflection.Emit.SignatureHelper" />.</param>
      <param name="returnType" vsli:raw="The property type.">Tipo de propiedad.</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matriz de tipos que representa los modificadores personalizados obligatorios para el tipo de valor devuelto, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si el tipo de valor devuelto no tiene ningún modificador personalizado requerido, especifique <see langword="null" />.</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matriz de tipos que representa los modificadores personalizados opcionales para el tipo de valor devuelto, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si el tipo de valor devuelto no tiene ningún modificador personalizados opcional, especifique <see langword="null" />.</param>
      <param name="parameterTypes" vsli:raw="The types of the property's arguments, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">Tipos de los argumentos de la propiedad o <see langword="null" /> si la propiedad no tiene ningún argumento.</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matriz de matrices de tipos. Cada matriz de tipos representa los modificadores personalizados obligatorios para el argumento correspondiente de la propiedad. Si un argumento concreto no tiene modificadores personalizados obligatorios, especifique <see langword="null" /> en lugar de una matriz de tipos. Si la propiedad no tiene ningún argumento o si ninguno de los argumentos tiene modificadores personalizados obligatorios, especifique <see langword="null" /> en lugar de una matriz de matrices.</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matriz de matrices de tipos. Cada matriz de tipos representa los modificadores personalizados opcionales para el argumento correspondiente de la propiedad. Si un argumento concreto no tiene modificadores personalizados opcionales, especifique <see langword="null" /> en lugar de una matriz de tipos. Si la propiedad no tiene ningún argumento o si ninguno de los argumentos tiene modificadores personalizados opcionales, especifique <see langword="null" /> en lugar de una matriz de matrices.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">Objeto <see cref="T:System.Reflection.Emit.SignatureHelper" /> de una propiedad.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="mod" /> es <see langword="null" />.
o bien
Un elemento de <paramref name="parameterTypes" /> es <see langword="null" />.
o bien
Uno de los modificadores personalizados especificados es <see langword="null" />. (Sin embargo, se puede especificar <see langword="null" /> para la matriz de modificadores personalizados para cualquier argumento).</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredParameterTypeCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalParameterTypeCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">La firma ya ha finalizado.
O bien
<paramref name="mod" /> no es un <see cref="T:System.Reflection.Emit.ModuleBuilder" />.
O bien
Uno de los modificadores personalizados especificados es un tipo de matriz.
O bien
Uno de los modificadores personalizados especificados es un tipo genérico abierto. Es decir, la propiedad <see cref="P:System.Type.ContainsGenericParameters" /> es <see langword="true" /> para el modificador personalizado.
O bien
El tamaño de <paramref name="requiredParameterTypeCustomModifiers" /> o <paramref name="optionalParameterTypeCustomModifiers" /> no es igual al tamaño de <paramref name="parameterTypes" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetSignature">
      <summary vsli:raw="Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.">Agrega el símbolo (token) de finalización a la firma y marca la firma como terminada para que no se puedan agregar más símbolos.</summary>
      <returns vsli:raw="A byte array made up of the full signature.">Matriz de bytes formada por la firma completa.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.ToString">
      <summary vsli:raw="Returns a string representing the signature arguments.">Devuelve una cadena que representa los argumentos de firma.</summary>
      <returns vsli:raw="A string representing the arguments of this signature.">Cadena que representa los argumentos de esta firma.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct handles comments.">Define cómo controla los comentarios la estructura <see cref="T:System.Text.Json.Utf8JsonReader" />.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary vsli:raw="Allows comments within the JSON input and treats them as valid tokens. While reading, the caller can access the comment values.">Permite comentarios dentro de la entrada JSON y los trata como tokens válidos. Durante la lectura, el autor de la llamada puede acceder a los valores de comentario.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary vsli:raw="Doesn't allow comments within the JSON input. Comments are treated as invalid JSON if found, and a &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; is thrown. This is the default value.">No permite comentarios dentro de la entrada JSON. Si se encuentran comentarios, se tratan como JSON no válido y se inicia una excepción <see cref="T:System.Text.Json.JsonException" />. Este es el valor predeterminado.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary vsli:raw="Allows comments within the JSON input and ignores them. The &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; behaves as if no comments are present.">Permite comentarios dentro de la entrada JSON y los ignora. <see cref="T:System.Text.Json.Utf8JsonReader" /> se comporta como si no hubiera comentarios.</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary vsli:raw="Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values.">Ofrece un mecanismo de examen del contenido estructural de un valor JSON sin crear automáticamente instancias de valores de datos.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonDocument&quot;&gt;&lt;/xref&gt; instance.">Libera los recursos que usa la instancia <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a sequence as UTF-8-encoded text representing a single JSON value into a JsonDocument.">Analiza una secuencia como texto codificado con UTF-8 que representa un único valor de byte JSON en un objeto JsonDocument.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Texto JSON que se va a analizar.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opciones para controlar el comportamiento de los lectores durante el análisis.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Representación JsonDocument del valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> no representa un único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contiene opciones no compatibles.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">Analiza un objeto <see cref="T:System.IO.Stream" /> como datos codificados con UTF-8 que representan un único valor JSON en un objeto JsonDocument. La secuencia se lee hasta su finalización.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Datos JSON que se van a analizar.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opciones para controlar el comportamiento de los lectores durante el análisis.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Representación JsonDocument del valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> no representa un único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contiene opciones no compatibles.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses memory as UTF-8-encoded text representing a single JSON value into a JsonDocument.">Analiza la memoria como texto codificado con UTF-8 que representa un valor de byte JSON único en un objeto JsonDocument.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Texto JSON que se va a analizar.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opciones para controlar el comportamiento de los lectores durante el análisis.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Representación JsonDocument del valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> no representa un único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contiene opciones no compatibles.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON value into a JsonDocument.">Analiza texto que representa un único valor de carácter JSON en un objeto JsonDocument.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Texto JSON que se va a analizar.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opciones para controlar el comportamiento de los lectores durante el análisis.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Representación JsonDocument del valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> no representa un único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contiene opciones no compatibles.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON string value into a JsonDocument.">Analiza texto que representa un único valor de cadena JSON en un objeto JsonDocument.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Texto JSON que se va a analizar.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opciones para controlar el comportamiento de los lectores durante el análisis.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Representación JsonDocument del valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> no representa un único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contiene opciones no compatibles.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">Analiza un objeto <see cref="T:System.IO.Stream" /> como datos codificados con UTF-8 que representan un único valor JSON en un objeto JsonDocument. La secuencia se lee hasta su finalización.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Datos JSON que se van a analizar.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opciones para controlar el comportamiento de los lectores durante el análisis.</param>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests.">Token para supervisar solicitudes de cancelación.</param>
      <returns vsli:raw="A task to produce a JsonDocument representation of the JSON value.">Tarea que genera una representación JsonDocument del valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> no representa un único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contiene opciones no compatibles.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary vsli:raw="Parses one JSON value (including objects or arrays) from the provided reader.">Analiza un valor JSON (incluidos objetos o matrices) del lector proporcionado.</summary>
      <param name="reader" vsli:raw="The reader to read.">El lector que se va a leer.</param>
      <returns vsli:raw="A JsonDocument representing the value (and nested values) read from the reader.">Lee un objeto JsonDocument que representa el valor (y los valores anidados) del lector.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> contiene opciones no compatibles.
o bien
El token <paramref name="reader" /> actual no inicia o representa un valor.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">No se pudo leer un valor del lector.</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary vsli:raw="Gets the root element of this JSON document.">Obtiene el elemento raíz del documento JSON.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the document.">
        <see cref="T:System.Text.Json.JsonElement" /> que representa el valor del documento.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary vsli:raw="Attempts to parse one JSON value (including objects or arrays) from the provided reader.">Intenta analizar un valor JSON (incluidos objetos o matrices) del lector proporcionado.</summary>
      <param name="reader" vsli:raw="The reader to read.">El lector que se va a leer.</param>
      <param name="document" vsli:raw="When the method returns, contains the parsed document.">Cuando este método devuelve un resultado, contiene el valor analizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a value was read and parsed into a JsonDocument; &lt;see langword=&quot;false&quot; /&gt; if the reader ran out of data while parsing. All other situations result in an exception being thrown.">
        <see langword="true" /> si un valor se leyó y analizó en un objeto JsonDocument; <see langword="false" /> si el lector se quedó sin datos durante el análisis. Las demás situaciones dan como resultado una excepción.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> contiene opciones no compatibles.
o bien
El token <paramref name="reader" /> actual no inicia o representa un valor.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">No se pudo leer un valor del lector.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the document to the provided writer as a JSON value.">Escribe el documento en el escritor proporcionado como un valor JSON.</summary>
      <param name="writer" vsli:raw="The writer to which to write the document.">Escritor en el que se va a escribir el documento.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="writer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this &lt;see cref=&quot;P:System.Text.Json.JsonDocument.RootElement&quot; /&gt; would result in invalid JSON.">El <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este <see cref="P:System.Text.Json.JsonDocument.RootElement" /> daría como resultado un JSON no válido.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when parsing JSON to create a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Proporciona la capacidad de que el usuario defina el comportamiento personalizado al analizar JSON para crear <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">Obtiene o establece un valor que indica si se permite (y se ignora) una coma adicional al final de una lista de valores JSON en un objeto o una matriz dentro de la carga de JSON que se lee.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. Default is &lt;see langword=&quot;false&quot; /&gt;">
        <see langword="true" /> si se permite una coma adicional al final de una lista de valores JSON en un objeto o matriz; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" /></returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; handles comments when reading through the JSON data.">Obtiene o establece un valor que determina cómo <see cref="T:System.Text.Json.JsonDocument" /> controla los comentarios al leer los datos JSON.</summary>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">Uno de los valores de enumeración que indica cómo se controlan los comentarios.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">La enumeración de control de comentarios se establece en un valor que no se admite (o que no se encuentra dentro del rango de enumeración <see cref="T:System.Text.Json.JsonCommentHandling" />).</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when parsing JSON data, with the default (that is, 0) indicating a maximum depth of 64.">Obtiene o establece la profundidad máxima permitida al analizar datos JSON, y el valor predeterminado (es decir, 0) indica una profundidad máxima de 64.</summary>
      <returns vsli:raw="The maximum depth allowed when parsing JSON data.">La profundidad máxima permitida al analizar datos JSON.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">La profundidad máxima está establecida en un valor negativo.</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary vsli:raw="Represents a specific JSON value within a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Representa un valor JSON específico en un objeto <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary vsli:raw="Represents an enumerator for the contents of a JSON array.">Representa un enumerador del contenido de una matriz JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Obtiene el elemento de la colección situado en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ArrayEnumerator&quot;&gt;&lt;/xref&gt; instance.">Libera los recursos que usa la instancia <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">Un enumerador que se puede usar para iterar por la matriz.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">Desplaza el enumerador al siguiente elemento de la colección.</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Un enumerado de una matriz de <see cref="T:System.Text.Json.JsonElement" /> que se puede usar para iterar a través de la colección.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Obtiene el elemento de la colección situado en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary vsli:raw="Gets a JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Obtiene un objeto JsonElement que se puede almacenar de forma segura más allá de la duración del <see cref="T:System.Text.Json.JsonDocument" /> original.</summary>
      <returns vsli:raw="A JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Objeto JsonElement que se puede almacenar de forma segura más allá de la duración del <see cref="T:System.Text.Json.JsonDocument" /> original.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary vsli:raw="Gets an enumerator to enumerate the values in the JSON array represented by this JsonElement.">Obtiene un enumerador que enumera los valores de la matriz JSON representados por este JsonElement.</summary>
      <returns vsli:raw="An enumerator to enumerate the values in the JSON array represented by this JsonElement.">Enumerador que enumera los valores de la matriz JSON representados por este JsonElement.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary vsli:raw="Gets an enumerator to enumerate the properties in the JSON object represented by this JsonElement.">Obtiene un enumerador que enumera las propiedades del objeto JSON representadas por este JsonElement.</summary>
      <returns vsli:raw="An enumerator to enumerate the properties in the JSON object represented by this JsonElement.">Enumerador que enumera las propiedades del objeto JSON representadas por este JsonElement.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary vsli:raw="Gets the number of values contained within the current array value.">Obtiene el número de valores incluidos en el valor de matriz actual.</summary>
      <returns vsli:raw="The number of values contained within the current array value.">Número de valores incluidos en el valor de matriz actual.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Obtiene el valor del elemento como <see cref="T:System.Boolean" />.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Valor del elemento como <see cref="T:System.Boolean" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.True&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.False&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.True" /> ni <see cref="F:System.Text.Json.JsonValueKind.False" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Obtiene el número JSON actual como <see cref="T:System.Byte" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Número JSON actual como <see cref="T:System.Byte" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">El valor no se puede representar como <see cref="T:System.Byte" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary vsli:raw="Gets the value of the element as a byte array.">Obtiene el valor del elemento como matriz de bytes.</summary>
      <returns vsli:raw="The value decoded as a byte array.">Valor descodificado como matriz de bytes.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text and hence cannot be decoded to bytes.">El valor no está codificado como texto Base64 y, por tanto, no se puede descodificar en bytes.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Obtiene el valor del elemento como <see cref="T:System.DateTime" />.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Valor del elemento como <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">El valor no se puede leer como <see cref="T:System.DateTime" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Obtiene el valor del elemento como <see cref="T:System.DateTimeOffset" />.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Valor del elemento como <see cref="T:System.DateTimeOffset" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">El valor no se puede leer como <see cref="T:System.DateTimeOffset" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Obtiene el número JSON actual como <see cref="T:System.Decimal" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Número JSON actual como <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">El valor no se puede representar como <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Obtiene el número JSON actual como <see cref="T:System.Double" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Número JSON actual como <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">El valor no se puede representar como <see cref="T:System.Double" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Obtiene el valor del elemento como <see cref="T:System.Guid" />.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Valor del elemento como <see cref="T:System.Guid" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">El valor no se puede representar como <see cref="T:System.Guid" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Obtiene el número JSON actual como <see cref="T:System.Int16" />.</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Número JSON actual como <see cref="T:System.Int16" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">El valor no se puede representar como <see cref="T:System.Int16" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Obtiene el número JSON actual como <see cref="T:System.Int32" />.</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Número JSON actual como <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">El valor no se puede representar como <see cref="T:System.Int32" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Obtiene el número JSON actual como <see cref="T:System.Int64" />.</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Número JSON actual como <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">El valor no se puede representar como <see cref="T:System.Int64" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;utf8PropertyName&quot; /&gt;.">Obtiene un objeto <see cref="T:System.Text.Json.JsonElement" /> que representa el valor de una propiedad obligatoria identificada por <paramref name="utf8PropertyName" />.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 representation (with no Byte-Order-Mark (BOM)) of the name of the property to return.">Representación UTF-8 (sin marca de orden de bytes [BOM]) del nombre de la propiedad que se va a devolver.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">Objeto <see cref="T:System.Text.Json.JsonElement" /> que representa el valor de la propiedad solicitada.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">No se encontró ninguna propiedad con el nombre solicitado.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">Obtiene un objeto <see cref="T:System.Text.Json.JsonElement" /> que representa el valor de una propiedad obligatoria identificada por <paramref name="propertyName" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">Nombre de la propiedad cuyo valor se va a devolver.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">Objeto <see cref="T:System.Text.Json.JsonElement" /> que representa el valor de la propiedad solicitada.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">No se encontró ninguna propiedad con el nombre solicitado.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">Obtiene un objeto <see cref="T:System.Text.Json.JsonElement" /> que representa el valor de una propiedad obligatoria identificada por <paramref name="propertyName" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">Nombre de la propiedad cuyo valor se va a devolver.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">Objeto <see cref="T:System.Text.Json.JsonElement" /> que representa el valor de la propiedad solicitada.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">No se encontró ninguna propiedad con el nombre solicitado.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary vsli:raw="Gets a string that represents the original input data backing this value.">Obtiene una cadena que representa los datos de entrada originales que respaldan este valor.</summary>
      <returns vsli:raw="The original input data backing this value.">Datos de entrada originales que respaldan este valor.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Obtiene el número JSON actual como <see cref="T:System.SByte" />.</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Número JSON actual como <see cref="T:System.SByte" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">El valor no se puede representar como <see cref="T:System.SByte" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Obtiene el número JSON actual como <see cref="T:System.Single" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Número JSON actual como <see cref="T:System.Single" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">El valor no se puede representar como <see cref="T:System.Single" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Obtiene el valor del elemento como <see cref="T:System.String" />.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Valor del elemento como <see cref="T:System.String" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.String" /> ni <see cref="F:System.Text.Json.JsonValueKind.Null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Obtiene el número JSON actual como <see cref="T:System.UInt16" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Número JSON actual como <see cref="T:System.UInt16" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">El valor no se puede representar como <see cref="T:System.UInt16" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Obtiene el número JSON actual como <see cref="T:System.UInt32" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Número JSON actual como <see cref="T:System.UInt32" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">El valor no se puede representar como <see cref="T:System.UInt32" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Obtiene el número JSON actual como <see cref="T:System.UInt64" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Número JSON actual como <see cref="T:System.UInt64" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">El valor no se puede representar como <see cref="T:System.UInt64" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary vsli:raw="Gets the value at the specified index if the current value is an &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">Obtiene el valor en el índice especificado si el valor actual es un objeto <see cref="F:System.Text.Json.JsonValueKind.Array" />.</summary>
      <param name="index" vsli:raw="The item index.">Índice del elemento.</param>
      <returns vsli:raw="The value at the specified index.">Valor en el índice especificado.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not in the range [0, &lt;see cref=&quot;M:System.Text.Json.JsonElement.GetArrayLength&quot; /&gt;()).">
        <paramref name="index" /> no está en el rango [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()).</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary vsli:raw="Represents an enumerator for the properties of a JSON object.">Representa un enumerador de las propiedades de un objeto JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Obtiene el elemento de la colección situado en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ObjectEnumerator&quot;&gt;&lt;/xref&gt; instance.">Libera los recursos que usa la instancia <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates the properties of an object.">Devuelve un enumerador que itera las propiedades de un objeto.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the object.">Enumerador que se puede utilizar para iterar el objeto.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">Desplaza el enumerador al siguiente elemento de la colección.</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Enumerador de objetos <see cref="T:System.Text.Json.JsonProperty" /> que se puede usar para iterar por la colección.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Obtiene el elemento de la colección situado en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary vsli:raw="Gets a string representation for the current value appropriate to the value type.">Obtiene una representación de cadena del valor actual correspondiente al tipo de valor.</summary>
      <returns vsli:raw="A string representation for the current value appropriate to the value type.">Representación de cadena del valor actual correspondiente al tipo de valor.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Número de intentos para representar el número JSON actual como <see cref="T:System.Byte" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando el método devuelve un valor, contiene el equivalente en bytes del número JSON actual si la conversión se realizó correctamente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el número puede representarse como <see cref="T:System.Byte" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a byte array, assuming that it is Base64 encoded.">Intenta representar la cadena JSON actual como matriz de bytes, suponiendo que se trata de una codificación en Base64.</summary>
      <param name="value" vsli:raw="If the method succeeds, contains the decoded binary representation of the Base64 text.">Si el método se ejecuta correctamente, contiene la representación binaria descodificada del texto en Base64.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el valor del token completo está codificado como texto válido Base64 y se puede descodificar correctamente en bytes; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Número de intentos para representar la cadena JSON actual como <see cref="T:System.DateTime" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">Cuando este método devuelve un resultado, contiene el valor de fecha y hora equivalente a la cadena JSON actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la cadena puede representarse como <see cref="T:System.DateTime" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Número de intentos para representar la cadena JSON actual como <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">Cuando este método devuelve un resultado, contiene la fecha y hora equivalente a la cadena JSON actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la cadena puede representarse como <see cref="T:System.DateTimeOffset" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Número de intentos para representar el número JSON actual como <see cref="T:System.Decimal" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene el decimal equivalente del número JSON actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el número puede representarse como <see cref="T:System.Decimal" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Número de intentos para representar el número JSON actual como <see cref="T:System.Double" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene un valor de número de punto flotante de doble precisión equivalente a la cadena JSON actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el número puede representarse como <see cref="T:System.Double" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Número de intentos para representar la cadena JSON actual como <see cref="T:System.Guid" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">Cuando este método devuelve un resultado, contiene el GUID equivalente a la cadena JSON actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la cadena puede representarse como <see cref="T:System.Guid" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Número de intentos para representar el número JSON actual como <see cref="T:System.Int16" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando el método devuelve un valor, contiene el equivalente en enteros de 16 bits del número JSON actual si la conversión se realizó correctamente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el número puede representarse como <see cref="T:System.Int16" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Número de intentos para representar el número JSON actual como <see cref="T:System.Int32" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene un valor entero de 32 bits equivalente a la cadena JSON actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el número puede representarse como <see cref="T:System.Int32" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Número de intentos para representar el número JSON actual como <see cref="T:System.Int64" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene un valor entero de 64 bits equivalente a la cadena JSON actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el número puede representarse como <see cref="T:System.Int64" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;utf8PropertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Busca una propiedad denominada <paramref name="utf8PropertyName" /> en el objeto actual y devuelve un valor que indica si dicha propiedad existe o no. Cuando la propiedad existe, el método asigna su valor al argumento <paramref name="value" />.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.">Representación UTF-8 (sin marca de orden de bytes [BOM]) del nombre de la propiedad que se va a devolver.</param>
      <param name="value" vsli:raw="Receives the value of the located property.">Recibe el valor de la propiedad encontrada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se encuentra la propiedad; de lo contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Busca una propiedad denominada <paramref name="propertyName" /> en el objeto actual y devuelve un valor que indica si dicha propiedad existe o no. Cuando la propiedad existe, el método asigna su valor al argumento <paramref name="value" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">Nombre de la propiedad que se va a buscar.</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">Cuando este método devuelve un resultado, contiene el valor de la propiedad especificada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se encuentra la propiedad; de lo contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, its value is assigned to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Busca una propiedad denominada <paramref name="propertyName" /> en el objeto actual y devuelve un valor que indica si dicha propiedad existe o no. Cuando la propiedad existe, su valor se asigna al argumento <paramref name="value" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">Nombre de la propiedad que se va a buscar.</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">Cuando este método devuelve un resultado, contiene el valor de la propiedad especificada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se encuentra la propiedad; de lo contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Número de intentos para representar el número JSON actual como <see cref="T:System.SByte" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando el método devuelve un valor, contiene el equivalente en bytes firmados del número JSON actual si la conversión se realizó correctamente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el número puede representarse como <see cref="T:System.SByte" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Número de intentos para representar el número JSON actual como <see cref="T:System.Single" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene un valor de número de punto flotante de precisión sencilla equivalente a la cadena JSON actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el número puede representarse como <see cref="T:System.Single" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Número de intentos para representar el número JSON actual como <see cref="T:System.UInt16" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando el método devuelve un valor, contiene el equivalente en enteros de 16 bits sin firmar del número JSON actual si la conversión se realizó correctamente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el número puede representarse como <see cref="T:System.UInt16" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Número de intentos para representar el número JSON actual como <see cref="T:System.UInt32" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene un valor entero de 32 bits sin signo equivalente al número JSON actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el número puede representarse como <see cref="T:System.UInt32" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Número de intentos para representar el número JSON actual como <see cref="T:System.UInt64" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene un valor entero de 64 bits sin signo equivalente al número JSON actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el número puede representarse como <see cref="T:System.UInt64" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the text represented by a UTF8-encoded byte span to the string value of this element.">Compara el texto representado por un intervalo de bytes codificado en UTF8 con el valor de cadena de este elemento.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">El texto con codificación UTF-8 con el que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element has the same UTF-8 encoding as&#xA;              &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el valor de cadena de este elemento tiene la misma codificación UTF-8 que <paramref name="utf8Text" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares a specified read-only character span to the string value of this element.">Compara un intervalo de cadena de solo lectura especificado con el valor de cadena de este elemento.</summary>
      <param name="text" vsli:raw="The text to compare against.">El texto que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el valor de cadena de este elemento coincide con <paramref name="text" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary vsli:raw="Compares a specified string to the string value of this element.">Compara una cadena especificada con el valor de cadena de este elemento.</summary>
      <param name="text" vsli:raw="The text to compare against.">El texto que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el valor de cadena de este elemento coincide con <paramref name="text" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">El elemento <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor no es <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary vsli:raw="Gets the type of the current JSON value.">Obtiene el tipo del valor JSON actual.</summary>
      <returns vsli:raw="The type of the current JSON value.">Tipo del valor JSON actual.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the element to the specified writer as a JSON value.">Escribe el elemento en el escritor especificado como un valor JSON.</summary>
      <param name="writer" vsli:raw="The writer to which to write the element.">Escritor en el que se va a escribir el elemento.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="writer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this value is &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Undefined&quot; /&gt;.">El <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de este valor es <see cref="F:System.Text.Json.JsonValueKind.Undefined" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary vsli:raw="Provides methods to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON.">Proporciona métodos para transformar el texto con codificación UTF-8 o UTF-16 en un formato adecuado para JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a UTF-8 text value as a JSON string.">Codifica un valor de texto UTF-8 como cadena JSON.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded text to convert to JSON encoded text.">Texto codificado en UTF-8 que se va a convertir en texto codificado en JSON.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">El codificador que se va a utilizar al escapar la cadena, o bien <see langword="null" /> para usar el codificador predeterminado.</param>
      <returns vsli:raw="The encoded JSON text.">Texto JSON codificado.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;utf8Value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains invalid UTF-8 bytes.">
        <paramref name="utf8Value" /> es demasiado grande.
O bien
<paramref name="utf8Value" /> contiene bytes UTF-8 no válidos.</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a specified text value as a JSON string.">Codifica un valor de texto especificado como cadena JSON.</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">Valor que se va a convertir en texto codificado en JSON.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">El codificador que se va a utilizar al escapar la cadena, o bien <see langword="null" /> para usar el codificador predeterminado.</param>
      <returns vsli:raw="The encoded JSON text.">Texto JSON codificado.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> es demasiado grande.
O bien
<paramref name="value" /> contiene caracteres UTF-16 no válidos.</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes the string text value as a JSON string.">Codifica el valor del texto de cadena como cadena JSON.</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">Valor que se va a convertir en texto codificado en JSON.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">El codificador que se va a utilizar al escapar la cadena, o bien <see langword="null" /> para usar el codificador predeterminado.</param>
      <returns vsli:raw="The encoded JSON text.">Texto JSON codificado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> es demasiado grande.
o bien
<paramref name="value" /> contiene caracteres UTF-16 no válidos.</exception>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary vsli:raw="Gets the UTF-8 encoded representation of the pre-encoded JSON text.">Obtiene la representación codificada en UTF-8 del texto JSON codificado previamente.</summary>
      <returns vsli:raw="The UTF-8 encoded representation of the pre-encoded JSON text.">Representación codificada en UTF-8 del texto JSON codificado previamente.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance and a specified object, which must also be a &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance, have the same value.">Determina si esta instancia y un objeto especificado, que también debe ser una instancia <see cref="T:System.Text.Json.JsonEncodedText" />, tienen el mismo valor.</summary>
      <param name="obj" vsli:raw="The object to compare to this instance.">Objeto que se va a comparar con esta instancia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Determines whether this instance and another specified &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance have the same value.">Determina si esta instancia y otra instancia <see cref="T:System.Text.Json.JsonEncodedText" /> especificada tienen el mismo valor.</summary>
      <param name="other" vsli:raw="The object to compare to this instance.">Objeto que se va a comparar con esta instancia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance and &lt;paramref name=&quot;other&quot; /&gt; have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si esta instancia <paramref name="other" /> tienen el mismo valor; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt;.">Devuelve el código hash para esta estructura <see cref="T:System.Text.Json.JsonEncodedText" />.</summary>
      <returns vsli:raw="The hash code for this instance.">Código hash de esta instancia.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary vsli:raw="Converts the value of this instance to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Convierte el valor de la instancia en un objeto <see cref="T:System.String" />.</summary>
      <returns vsli:raw="The underlying UTF-16 encoded string.">Cadena con codificación UTF-16 subyacente.</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary vsli:raw="Defines a custom exception object that is thrown when invalid JSON text is encountered, the defined maximum depth is passed, or the JSON text is not compatible with the type of a property on an object.">Define un objeto de excepción personalizado que se produce cuando se encuentra texto JSON no válido, cuando se pasa la profundidad máxima definida o el texto JSON no es compatible con el tipo de una propiedad en un objeto.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Text.Json.JsonException" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Creates a new exception object with serialized data.">Crea un nuevo objeto de excepción con datos serializados.</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">Datos serializados del objeto sobre la excepción producida.</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">Un objeto que contiene información contextual sobre el origen o el destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class with a specified error message.">Inicializa una nueva instancia de la clase <see cref="T:System.Text.Json.JsonException" /> con el mensaje de error especificado.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Mensaje de error específico del contexto.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class, with a specified error message and a reference to the inner exception that is the cause of this exception.">Inicializa una nueva instancia de la clase <see cref="T:System.Text.Json.JsonException" />, con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Mensaje de error específico del contexto.</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">Excepción que ha producido la excepción actual.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary vsli:raw="Creates a new exception object to relay error information to the user.">Crea un objeto de excepción para retransmitir información de error al usuario.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Mensaje de error específico del contexto.</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">La ruta de acceso donde se encontró el JSON no válido.</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">Número de línea (a partir de 0) en el que se ha encontrado el código JSON no válido al deserializar.</param>
      <param name="bytePositionInLine" vsli:raw="The byte count within the current line (starting at 0) where the invalid JSON was encountered.">Recuento de bytes en la línea actual (a partir de 0) donde se ha detectado el código JSON no válido.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary vsli:raw="Creates a new exception object to relay error information to the user that includes a specified inner exception.">Crea un objeto de excepción para retransmitir información de error al usuario, incluida una excepción interna especificada.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Mensaje de error específico del contexto.</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">La ruta de acceso donde se encontró el JSON no válido.</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">Número de línea (a partir de 0) en el que se ha encontrado el código JSON no válido al deserializar.</param>
      <param name="bytePositionInLine" vsli:raw="The byte count (starting at 0) within the current line where the invalid JSON was encountered.">Recuento de bytes (a partir de 0) en la línea actual donde se ha detectado el código JSON no válido.</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">Excepción que ha producido la excepción actual.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary vsli:raw="Gets the zero-based number of bytes read within the current line before the exception.">Obtiene el número de base cero de bytes leídos en la línea actual antes de la excepción.</summary>
      <returns vsli:raw="The zero-based number of bytes read within the current line before the exception.">Número de bytes de base cero leídos en la línea actual antes de la excepción.</returns>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">Establece el objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con información sobre la excepción.</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">Datos serializados del objeto sobre la excepción producida.</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">Un objeto que contiene información contextual sobre el origen o el destino.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary vsli:raw="Gets the zero-based number of lines read before the exception.">Obtiene el número de base cero de líneas leídas antes de la excepción.</summary>
      <returns vsli:raw="The zero-based number of lines read before the exception.">Número de líneas de base cero leídas antes de la excepción.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary vsli:raw="Gets a message that describes the current exception.">Obtiene un mensaje que describe la excepción actual.</summary>
      <returns vsli:raw="The error message that describes the current exception.">Mensaje de error que describe la excepción actual.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary vsli:raw="Gets The path within the JSON where the exception was encountered.">Obtiene la ruta de acceso dentro del código JSON donde se encontró la excepción.</summary>
      <returns vsli:raw="The path within the JSON where the exception was encountered.">Ruta de acceso dentro del código JSON donde se encontró la excepción.</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary vsli:raw="Determines the naming policy used to convert a string-based name to another format, such as a camel-casing format.">Determina la directiva de nomenclatura que se usa para convertir un nombre basado en cadena a otro formato, como, por ejemplo, un formato en notación camello.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary vsli:raw="Gets the naming policy for camel-casing.">Obtiene la directiva de nomenclatura para la notación camello.</summary>
      <returns vsli:raw="The naming policy for camel-casing.">La Directiva de nomenclatura para las mayúsculas y minúsculas Camel.</returns>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary vsli:raw="When overridden in a derived class, converts the specified name according to the policy.">Si se reemplaza en una clase derivada, convierte el nombre especificado de acuerdo con la directiva.</summary>
      <param name="name" vsli:raw="The name to convert.">El nombre que se va a convertir.</param>
      <returns vsli:raw="The converted name.">El nombre convertido.</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary vsli:raw="Represents a single property for a JSON object.">Representa una sola propiedad de un objeto JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary vsli:raw="Gets the name of this property.">Obtiene el nombre de esta propiedad.</summary>
      <returns vsli:raw="The name of this property.">Nombre de esta propiedad.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the specified UTF-8 encoded text to the name of this property.">Compara el texto con codificación UTF-8 especificado con el nombre de esta propiedad.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">El texto con codificación UTF-8 con el que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property has the same UTF-8 encoding as &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el nombre de esta propiedad tiene la misma codificación UTF-8 que <paramref name="utf8Text" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">El elemento <see cref="T:System.Type" /> de este valor no es <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the specified text as a character span to the name of this property.">Compara el texto especificado como un intervalo de caracteres con el nombre de esta propiedad.</summary>
      <param name="text" vsli:raw="The text to compare against.">El texto que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el nombre de esta propiedad coincide con <paramref name="text" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">El elemento <see cref="T:System.Type" /> de este valor no es <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary vsli:raw="Compares the specified string to the name of this property.">Compara la cadena especificada con el nombre de esta propiedad.</summary>
      <param name="text" vsli:raw="The text to compare against.">El texto que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el nombre de esta propiedad coincide con <paramref name="text" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">El elemento <see cref="T:System.Type" /> de este valor no es <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary vsli:raw="Provides a string representation of the property for debugging purposes.">Proporciona una representación de cadena de la propiedad con fines de depuración.</summary>
      <returns vsli:raw="A string containing the uninterpreted value of the property, beginning at the declaring open-quote and ending at the last character that is part of the value.">Cadena que contiene el valor no interpretado de la propiedad, que comienza por el tipo declarativo open-quote y termina en el último carácter que forma parte del valor.</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary vsli:raw="Gets the value of this property.">Obtiene el valor de esta propiedad.</summary>
      <returns vsli:raw="The value of this property.">Valor de esta propiedad.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the property to the provided writer as a named JSON object property.">Escribe la propiedad en el escritor proporcionado como una propiedad de objeto JSON con nombre.</summary>
      <param name="writer" vsli:raw="The writer to which to write the property.">Escritor en el que se va a escribir la propiedad.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;see cref=&quot;P:System.Text.Json.JsonProperty.Name&quot; /&gt; is too large to be a JSON object property.">
        <see cref="P:System.Text.Json.JsonProperty.Name" /> es demasiado grande para ser una propiedad de objeto JSON.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this JSON property's &lt;see cref=&quot;P:System.Text.Json.JsonProperty.Value&quot; /&gt; would result in invalid JSON.">El <see cref="P:System.Text.Json.JsonElement.ValueKind" /> del valor <see cref="P:System.Text.Json.JsonProperty.Value" /> de esta propiedad JSON daría como resultado un JSON no válido.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Se ha eliminado el elemento primario <see cref="T:System.Text.Json.JsonDocument" />.</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when reading JSON.">Proporciona la capacidad de que el usuario defina el comportamiento personalizado al leer JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that defines whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">Obtiene o establece un valor que define si se permite (y se ignora) una coma adicional al final de una lista de valores JSON en un objeto o una matriz dentro de la carga de JSON que se lee.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se permite una coma adicional; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; handles comments when reading through the JSON data.">Obtiene o establece un valor que determina cómo <see cref="T:System.Text.Json.Utf8JsonReader" /> controla los comentarios al leer los datos JSON.</summary>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">Uno de los valores de enumeración que indica cómo se controlan los comentarios.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The property is being set to a value that is not a member of the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enumeration.">La propiedad se establece en un valor que no es miembro de la enumeración <see cref="T:System.Text.Json.JsonCommentHandling" />.</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when reading JSON, with the default (that is, 0) indicating a maximum depth of 64.">Obtiene o establece la profundidad máxima permitida al leer JSON, y el valor predeterminado (es decir, 0) indica una profundidad máxima de 64.</summary>
      <returns vsli:raw="The maximum depth allowed when reading JSON.">Profundidad máxima permitida al leer JSON.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The maximum depth is being set to a negative value.">La profundidad máxima se establece en un valor negativo.</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary vsli:raw="Defines an opaque type that holds and saves all the relevant state information, which must be provided to the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; to continue reading after processing incomplete data.">Define un tipo opaco que contiene y guarda toda la información de estado relevante, que se debe proporcionar a <see cref="T:System.Text.Json.Utf8JsonReader" /> para continuar leyendo después de procesar los datos incompletos.</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Text.Json.JsonReaderState&quot; /&gt; instance.">Crea una instancia de <see cref="T:System.Text.Json.JsonReaderState" />.</summary>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that is different from the JSON RFC (for example how to handle comments, or the maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly (comments within the JSON are invalid) and reads up to a maximum depth of 64.">Define el comportamiento personalizado de la <see cref="T:System.Text.Json.Utf8JsonReader" /> que es diferente de la JSON RFC (por ejemplo, cómo controlar los comentarios o la profundidad máxima permitida durante la lectura). De forma predeterminada, la <see cref="T:System.Text.Json.Utf8JsonReader" /> sigue estrictamente la JSON RFC (los comentarios en JSON no son válidos) y lee hasta una profundidad máxima de 64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The maximum depth is set to a non-positive value (&amp;lt; 0).">La profundidad máxima se establece en un valor no positivo (&lt; 0).</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary vsli:raw="Gets the custom behavior to use when reading JSON data using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct that may deviate from strict adherence to the JSON specification, which is the default behavior.">Obtiene el comportamiento personalizado que se va a usar cuando la lectura de datos JSON mediante la estructura <see cref="T:System.Text.Json.Utf8JsonReader" /> pueda desviarse del cumplimiento estricto de la especificación de JSON, que es el comportamiento predeterminado.</summary>
      <returns vsli:raw="The custom behavior to use when reading JSON data.">Comportamiento personalizado que se va a usar al leer datos JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary vsli:raw="Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.">Proporciona funcionalidad para serializar objetos o tipos de valor en JSON y para deserializar JSON en objetos o tipos de valor.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.">Analiza el texto con codificación UTF-8 que representa un único valor JSON en una instancia de un tipo especificado.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Texto JSON que se va a analizar.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Tipo del objeto al que se va a convertir y devolver.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Opciones para controlar el comportamiento durante el análisis.</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Representación <paramref name="returnType" /> del valor JSON.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">El JSON no es válido.
o bien
<typeparamref name="returnType" /> no es compatible con el JSON.
o bien
Hay datos restantes en el intervalo más allá de un único valor JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of a specified type.">Analiza el texto que representa un único valor JSON en una instancia de un tipo especificado.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Texto JSON que se va a analizar.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Tipo del objeto al que se va a convertir y devolver.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Opciones para controlar el comportamiento durante el análisis.</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Representación <paramref name="returnType" /> del valor JSON.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="json" /> o <paramref name="returnType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">El JSON no es válido.
o bien
<typeparamref name="TValue" /> no es compatible con el JSON.
o bien
Hay datos restantes en el intervalo más allá de un único valor JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.">Lee un valor JSON (incluidos objetos o matrices) desde el lector proporcionado y lo convierte en una instancia del tipo especificado.</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">Lector desde el que se va a leer el JSON.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Tipo del objeto al que se va a convertir y devolver.</param>
      <param name="options" vsli:raw="Options to control the serializer behavior during reading.">Opciones para controlar el comportamiento del serializador durante la lectura.</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Representación <paramref name="returnType" /> del valor JSON.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">El JSON no es válido.
o bien
<typeparamref name="returnType" /> no es compatible con el JSON.
o bien
No se pudo leer un valor del lector.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is using unsupported options.">
        <paramref name="reader" /> usa opciones no compatibles.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.">Analiza el texto con codificación UTF-8 que representa un único valor JSON en una instancia del tipo especificado por un parámetro de tipo genérico.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Texto JSON que se va a analizar.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Opciones para controlar el comportamiento durante el análisis.</param>
      <typeparam name="TValue" vsli:raw="The target type of the UTF-8 encoded text.">Tipo de destino del texto con codificación UTF-8.</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Representación <typeparamref name="TValue" /> del valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">El JSON no es válido.
o bien
<typeparamref name="TValue" /> no es compatible con el JSON.
o bien
Hay datos restantes en el intervalo más allá de un único valor JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.">Analiza el texto que representa un único valor JSON en una instancia del tipo especificado por un parámetro de tipo genérico.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Texto JSON que se va a analizar.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Opciones para controlar el comportamiento durante el análisis.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">Tipo de destino del valor JSON.</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Representación <typeparamref name="TValue" /> del valor JSON.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">El JSON no es válido.
o bien
<typeparamref name="TValue" /> no es compatible con el JSON.
o bien
Hay datos restantes en el intervalo más allá de un único valor JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.">Lee un valor JSON (incluidos objetos o matrices) desde el lector proporcionado en una instancia del tipo especificado por un parámetro de tipo genérico.</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">Lector desde el que se va a leer el JSON.</param>
      <param name="options" vsli:raw="Options to control serializer behavior during reading.">Opciones para controlar el comportamiento del serializador durante la lectura.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">Tipo de destino del valor JSON.</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Representación <typeparamref name="TValue" /> del valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">El JSON no es válido.
o bien
<typeparamref name="TValue" /> no es compatible con el JSON.
o bien
No se pudo leer un valor del lector.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; uses unsupported options.">
        <paramref name="reader" /> usa opciones no compatibles.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type. The stream will be read to completion.">Lee asincrónicamente el texto con codificación UTF-8 que representa un único valor JSON en una instancia de un tipo especificado. La secuencia se lee hasta su finalización.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Datos JSON que se van a analizar.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Tipo del objeto al que se va a convertir y devolver.</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">Opciones para controlar el comportamiento durante la lectura.</param>
      <param name="cancellationToken" vsli:raw="A cancellation token that may be used to cancel the read operation.">Token de cancelación que puede usarse para cancelar la operación de lectura.</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Representación <paramref name="returnType" /> del valor JSON.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="utf8Json" /> o <paramref name="returnType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">El JSON no es válido.
o bien
<typeparamref name="TValue" /> no es compatible con el JSON.
o bien
Hay datos restantes en la secuencia.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter. The stream will be read to completion.">Lee asincrónicamente el texto con codificación UTF-8 que representa un único valor JSON en una instancia de un tipo especificado por un parámetro de tipo genérico. La secuencia se lee hasta su finalización.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Datos JSON que se van a analizar.</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">Opciones para controlar el comportamiento durante la lectura.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the read operation.">Token que puede usarse para cancelar la operación de lectura.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">Tipo de destino del valor JSON.</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Representación <typeparamref name="TValue" /> del valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">El JSON no es válido.
o bien
<typeparamref name="TValue" /> no es compatible con el JSON.
o bien
Hay datos restantes en la secuencia.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a specified type into a JSON string.">Convierte el valor de un tipo especificado en una cadena JSON.</summary>
      <param name="value" vsli:raw="The value to convert.">Valor al que se va a convertir.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Tipo de <paramref name="value" /> que se va a convertir.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Opciones para controlar el comportamiento de la conversión.</param>
      <returns vsli:raw="The JSON string representation of the value.">Representación de cadena JSON del valor.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of the specified type to the provided writer.">Escribe la representación JSON del tipo especificado en el sistema de escritura proporcionado.</summary>
      <param name="writer" vsli:raw="The JSON writer to write to.">Sistema de escritura JSON en el que se va a escribir.</param>
      <param name="value" vsli:raw="The value to convert and write.">Valor que se va a convertir y leer.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Tipo de <paramref name="value" /> que se va a convertir.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Opciones para controlar el comportamiento de la serialización.</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string.">Convierte el valor de un tipo especificado por un parámetro de tipo genérico en una cadena JSON.</summary>
      <param name="value" vsli:raw="The value to convert.">Valor al que se va a convertir.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Opciones para controlar el comportamiento de la serialización.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Tipo del valor que se va a serializar.</typeparam>
      <returns vsli:raw="A JSON string representation of the value.">Una representación de cadena JSON del valor.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of a type specified by a generic type parameter to the provided writer.">Escribe la representación JSON de un tipo especificado por un parámetro de tipo genérico en el sistema de escritura proporcionado.</summary>
      <param name="writer" vsli:raw="A JSON writer to write to.">Un sistema de escritura JSON en el que se va a escribir.</param>
      <param name="value" vsli:raw="The value to convert and write.">Valor que se va a convertir y leer.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Opciones para controlar el comportamiento de la serialización.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Tipo del valor que se va a serializar.</typeparam>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.">Convierte de forma asincrónica el valor de un tipo especificado en texto JSON con codificación UTF-8 y lo escribe en la secuencia especificada.</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">Secuencia con codificación UTF-8 en la que se va a escribir.</param>
      <param name="value" vsli:raw="The value to convert.">Valor al que se va a convertir.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Tipo de <paramref name="value" /> que se va a convertir.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Opciones para controlar el comportamiento de la serialización.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">Token que puede usarse para cancelar la operación de escritura.</param>
      <returns vsli:raw="A task that represents the asynchronous write operation.">Tarea que representa la operación de escritura asincrónica.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.">Convierte de forma asincrónica un valor de un tipo especificado por un parámetro de tipo genérico a texto JSON con codificación UTF-8 y lo escribe en una secuencia.</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">Secuencia con codificación UTF-8 en la que se va a escribir.</param>
      <param name="value" vsli:raw="The value to convert.">Valor al que se va a convertir.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Opciones para controlar el comportamiento de la serialización.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">Token que puede usarse para cancelar la operación de escritura.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Tipo del valor que se va a serializar.</typeparam>
      <returns vsli:raw="A task that represents the asynchronous write operation.">Tarea que representa la operación de escritura asincrónica.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.">Convierte un valor del tipo especificado en una cadena JSON, codificada como bytes UTF-8.</summary>
      <param name="value" vsli:raw="The value to convert.">Valor al que se va a convertir.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Tipo de <paramref name="value" /> que se va a convertir.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Opciones para controlar el comportamiento de la conversión.</param>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">Una representación de cadena JSON del valor, codificada como bytes UTF-8.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.">Convierte el valor de un tipo especificado por un parámetro de tipo genérico en una cadena JSON, codificada como bytes UTF-8.</summary>
      <param name="value" vsli:raw="The value to convert.">Valor al que se va a convertir.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Opciones para controlar el comportamiento de la conversión.</param>
      <typeparam name="TValue" vsli:raw="The type of the value.">Tipo del valor.</typeparam>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">Una representación de cadena JSON del valor, codificada como bytes UTF-8.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary vsli:raw="Provides options to be used with &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt;.">Proporciona las opciones que se usarán con <see cref="T:System.Text.Json.JsonSerializer" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Text.Json.JsonSerializerOptions" /> .</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary vsli:raw="Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized.">Obtiene o establece un valor que indica si se permite (y se ignora) una coma adicional al final de una lista de valores JSON en un objeto o una matriz dentro de la carga de JSON que se deserializa.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored); &lt;see langword=&quot;false&quot; /&gt; otherwise.">
        <see langword="true" /> si se permite (y se omite) una coma adicional al final de una lista de valores JSON de un objeto o una matriz. de lo contrario <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Esta propiedad se estableció una vez que se completó la serialización o la deserialización.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary vsli:raw="Gets the list of user-defined converters that were registered.">Obtiene la lista de convertidores definidos por el usuario que se registraron.</summary>
      <returns vsli:raw="The list of custom converters.">Lista de convertidores personalizados.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary vsli:raw="Gets or sets the default buffer size, in bytes, to use when creating temporary buffers.">Obtiene o establece el tamaño de búfer predeterminado, en bytes, que se usará al crear búferes temporales.</summary>
      <returns vsli:raw="The default buffer size in bytes.">Tamaño de búfer predeterminado en bytes.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The buffer size is less than 1.">El tamaño de búfer es menor que 1.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Esta propiedad se estableció una vez que se completó la serialización o la deserialización.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary vsli:raw="Gets or sets the policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format, such as camel-casing.">Obtiene o establece la directiva que se usa para convertir el nombre de una clave <see cref="T:System.Collections.IDictionary" /> en otro formato, como la grafía Camel.</summary>
      <returns vsli:raw="The policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format.">La Directiva que se usa para convertir el nombre de una clave de <see cref="T:System.Collections.IDictionary" /> en otro formato.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Obtiene o establece el codificador que se va a usar al escapar cadenas, o bien <see langword="null" /> para usar el codificador predeterminado.</summary>
      <returns vsli:raw="The JavaScript character encoding.">Codificación de caracteres de JavaScript.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary vsli:raw="Returns the converter for the specified type.">Devuelve el convertidor para el tipo especificado.</summary>
      <param name="typeToConvert" vsli:raw="The type to return a converter for.">El tipo para el que se va a devolver un convertidor.</param>
      <returns vsli:raw="The first converter that supports the given type.">El primer convertidor que admite el tipo especificado o <see langword="null" />, si no hay convertidor.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary vsli:raw="Gets or sets a value that indicates whether &lt;see langword=&quot;null&quot; /&gt; values are ignored during serialization and deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Obtiene o establece un valor que determina si los valores <see langword="null" /> se omiten durante la serialización y la deserialización. El valor predeterminado es <see langword="false" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if null values are ignored during serialization and deserialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para omitir los valores NULL durante la serialización y deserialización; en caso contrario, consulte langword = "false"/&gt;.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.&#xA;&#xA;-or-&#xA;&#xA;&lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition&quot; /&gt; has been set to a non-default value. These properties cannot be used together.">Esta propiedad se estableció una vez que se completó la serialización o la deserialización.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary vsli:raw="Gets a value that indicates whether read-only properties are ignored during serialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Obtiene un valor que determina si las propiedades de solo lectura se omiten durante la serialización. El valor predeterminado es <see langword="false" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if read-only properties are ignored during serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para omitir las propiedades de solo lectura durante la serialización; de lo contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Esta propiedad se estableció una vez que se completó la serialización o la deserialización.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64.">Obtiene o establece la profundidad máxima permitida al serializar o deserializar JSON, con el valor predeterminado de 0 que indica una profundidad máxima de 64.</summary>
      <returns vsli:raw="The maximum depth allowed when serializing or deserializing JSON.">La profundidad máxima permitida al serializar o deserializar JSON.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Esta propiedad se estableció una vez que se completó la serialización o la deserialización.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">La profundidad máxima está establecida en un valor negativo.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary vsli:raw="Gets or sets a value that indicates whether a property's name uses a case-insensitive comparison during deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Obtiene o establece un valor que determina si el nombre de una propiedad usa una comparación que no distingue entre mayúsculas y minúsculas durante la deserialización. El valor predeterminado es <see langword="false" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if property names are compared case-insensitively; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para comparar nombres de propiedad mediante la comparación sin distinción entre mayúsculas y minúsculas; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary vsli:raw="Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">Obtiene o establece un valor que especifica la directiva usada para convertir el nombre de una propiedad de un objeto en otro formato, como la grafía Camel, o <see langword="null" /> para no modificar los nombres de propiedad.</summary>
      <returns vsli:raw="A property naming policy, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">Una directiva de nomenclatura de propiedades o <see langword="null" /> para dejar los nombres de propiedad sin cambios.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary vsli:raw="Gets or sets a value that defines how comments are handled during deserialization.">Obtiene o establece un valor que define cómo se administran los comentarios durante la deserialización.</summary>
      <returns vsli:raw="A value that indicates whether comments are allowed, disallowed, or skipped.">Valor que indica si se permiten los comentarios, si no se permiten o se omiten.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Esta propiedad se estableció una vez que se completó la serialización o la deserialización.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">La enumeración de control de comentarios se establece en un valor que no se admite (o que no se encuentra dentro del rango de enumeración <see cref="T:System.Text.Json.JsonCommentHandling" />).</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary vsli:raw="Gets or sets a value that indicates whether JSON should use pretty printing. By default, JSON is serialized without any extra white space.">Obtiene o establece un valor que define si JSON debe usar la impresión con sangría. De manera predeterminada, JSON se serializa sin ningún espacio en blanco adicional.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if JSON is pretty printed on serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si JSON debe imprimirse en la serialización; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Esta propiedad se estableció una vez que se completó la serialización o la deserialización.</exception>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary vsli:raw="Defines the various JSON tokens that make up a JSON text.">Define los distintos tokens de JSON que componen un texto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary vsli:raw="The token type is a comment string.">El tipo de token es una cadena de comentario.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary vsli:raw="The token type is the end of a JSON array.">El tipo de token es el final de una matriz JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary vsli:raw="The token type is the end of a JSON object.">El tipo de token es el final de un objeto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary vsli:raw="The token type is the JSON literal false.">El tipo de token es el literal JSON false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;). This is the default token type if no data has been read by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">No hay ningún valor (a diferencia de <see cref="F:System.Text.Json.JsonTokenType.Null" />).</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary vsli:raw="The token type is the JSON literal null.">El tipo de token es el literal JSON null.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary vsli:raw="The token type is a JSON number.">El tipo de token es un número JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary vsli:raw="The token type is a JSON property name.">El tipo de token es un nombre de propiedad JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary vsli:raw="The token type is the start of a JSON array.">El tipo de token es el comienzo de una matriz JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary vsli:raw="The token type is the start of a JSON object.">El tipo de token es el comienzo de un objeto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary vsli:raw="The token type is a JSON string.">El tipo de token es una cadena JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary vsli:raw="The token type is the JSON literal true.">El tipo de token es el literal JSON true.</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary vsli:raw="Specifies the data type of a JSON value.">Especifica el tipo de datos de un valor JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary vsli:raw="A JSON array.">Matriz de JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary vsli:raw="The JSON value false.">Valor de JSON false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary vsli:raw="The JSON value null.">Valor de JSON null.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary vsli:raw="A JSON number.">Número de JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary vsli:raw="A JSON object.">Objeto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary vsli:raw="A JSON string.">Cadena JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary vsli:raw="The JSON value true.">Valor de JSON true.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;).">No hay ningún valor (a diferencia de <see cref="F:System.Text.Json.JsonValueKind.Null" />).</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary vsli:raw="Allows the user to define custom behavior when writing JSON using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;.">Permite al usuario definir el comportamiento personalizado al escribir JSON mediante <see cref="T:System.Text.Json.Utf8JsonWriter" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Obtiene o establece el codificador que se va a usar al escapar cadenas, o bien <see langword="null" /> para usar el codificador predeterminado.</summary>
      <returns vsli:raw="The JavaScript character encoder used to override the escaping behavior.">Codificador de caracteres de JavaScript que se usa para invalidar el comportamiento de escape.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.">Obtiene o establece un valor que indica si <see cref="T:System.Text.Json.Utf8JsonWriter" /> debe dar formato a la salida JSON, lo que incluye la aplicación de sangría a tokens de JSON anidados, la adición de nuevas líneas y la adición de espacio en blanco entre los nombres y valores de propiedades.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON output is formatted; &lt;see langword=&quot;false&quot; /&gt; if the JSON is written without any extra white space. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para dar formato a la salida JSON; <see langword="false" /> que se va a escribir sin ningún espacio en blanco adicional. El valor predeterminado es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should skip structural validation and allow the user to write invalid JSON.">Obtiene o establece un valor que indica si <see cref="T:System.Text.Json.Utf8JsonWriter" /> debe omitir la validación estructural y permitir que el usuario escriba JSON no válido.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if structural validation is skipped and invalid JSON is allowed; &lt;see langword=&quot;false&quot; /&gt; if an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown on any attempt to write invalid JSON.">
        <see langword="true" /> omitir la validación estructural y permitir JSON no válido; <see langword="false" /> iniciar una <see cref="T:System.InvalidOperationException" /> en cualquier intento de escribir JSON no válido.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary vsli:raw="Provides the base class for serialization attributes.">Proporciona la clase base para los atributos de serialización.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonAttribute&quot; /&gt;.">Crea una nueva instancia de <see cref="T:System.Text.Json.Serialization.JsonAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary vsli:raw="Converts an object or value to or from JSON.">Convierte un objeto o un valor en JSON o desde JSON.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary vsli:raw="When overridden in a derived class, determines whether the converter instance can convert the specified object type.">Cuando se reemplaza en una clase derivada, determina si la instancia del convertidor puede convertir el tipo de objeto especificado.</summary>
      <param name="typeToConvert" vsli:raw="The type of the object to check whether it can be converted by this converter instance.">El tipo del objeto que se comprobará si se puede convertir por esta instancia del convertidor.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance can convert the specified object type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la instancia puede convertir el tipo de objeto especificado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary vsli:raw="Converts an object or value to or from JSON.">Convierte un objeto o un valor en JSON o desde JSON.</summary>
      <typeparam name="T" vsli:raw="The type of object or value handled by the converter.">Tipo de objeto o valor controlado por el convertidor.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter`1&quot; /&gt; instance.">Inicializa una nueva instancia de <see cref="T:System.Text.Json.Serialization.JsonConverter`1" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted.">Determina si el tipo especificado se puede convertir.</summary>
      <param name="typeToConvert" vsli:raw="The type to compare against.">El tipo con el que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si se puede convertir el tipo; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads and converts the JSON to type &lt;typeparamref name=&quot;T&quot; /&gt;.">Lee y convierte el JSON en el tipo <typeparamref name="T" />.</summary>
      <param name="reader" vsli:raw="The reader.">Lector.</param>
      <param name="typeToConvert" vsli:raw="The type to convert.">Tipo que se va a convertir.</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">Objeto que especifica las opciones de serialización que se van a utilizar.</param>
      <returns vsli:raw="The converted value.">El valor convertido.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes a specified value as JSON.">Escribe un valor especificado como JSON.</summary>
      <param name="writer" vsli:raw="The writer to write to.">El sistema de escritura en el que se va a escribir.</param>
      <param name="value" vsli:raw="The value to convert to JSON.">Valor que se va a convertir en JSON.</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">Objeto que especifica las opciones de serialización que se van a utilizar.</param>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary vsli:raw="When placed on a property or type, specifies the converter type to use.">Cuando se coloca en una propiedad o tipo, especifica el tipo de convertidor que se usará.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt; with the specified converter type.">Inicializa una nueva instancia de <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> con el tipo de convertidor especificado.</summary>
      <param name="converterType" vsli:raw="The type of the converter.">Tipo de convertidor.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary vsli:raw="Gets the type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">Obtiene el tipo de <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />, o bien <see langword="null" /> si se ha creado sin un tipo.</summary>
      <returns vsli:raw="The type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">Tipo del <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />, o <see langword="null" /> si se creó sin un tipo.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary vsli:raw="When overridden in a derived class and &lt;see cref=&quot;P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, allows the derived class to create a &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter&quot; /&gt; in order to pass additional state.">Cuando se reemplaza en una clase derivada y <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" /> es <see langword="null" />, permite que la clase derivada cree un <see cref="T:System.Text.Json.Serialization.JsonConverter" /> para pasar el estado adicional.</summary>
      <param name="typeToConvert" vsli:raw="The type of the converter.">Tipo de convertidor.</param>
      <returns vsli:raw="The custom converter.">Convertidor personalizado.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary vsli:raw="Supports converting several types by using a factory pattern.">Admite la conversión de varios tipos mediante el uso de un patrón factory.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary vsli:raw="When overridden in a derived class, initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterFactory&quot; /&gt; class.">Cuando se invalida en una clase derivada, inicializa una nueva instancia de la clase <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for a specified type.">Crea un convertidor para un tipo especificado.</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">Tipo controlado por el convertidor.</param>
      <param name="options" vsli:raw="The serialization options to use.">Opciones de serialización que se van a utilizar.</param>
      <returns vsli:raw="A converter for which &lt;typeparamref name=&quot;T&quot; /&gt; is compatible with &lt;paramref name=&quot;typeToConvert&quot; /&gt;.">Convertidor para el que <typeparamref name="T" /> es compatible con <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary vsli:raw="When placed on a property of type &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, any properties that do not have a matching member are added to that dictionary during deserialization and written during serialization.">Cuando se coloca en una propiedad de tipo <see cref="T:System.Collections.Generic.IDictionary`2" />, las propiedades que no tengan un miembro coincidente se agregan a ese diccionario durante la deserialización y se escriben durante la serialización.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonExtensionDataAttribute&quot; /&gt; class.">Crea una nueva instancia de la clase <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary vsli:raw="Prevents a property from being serialized or deserialized.">Impide la serialización o deserialización de una propiedad.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIgnoreAttribute&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary vsli:raw="Specifies the property name that is present in the JSON when serializing and deserializing. This overrides any naming policy specified by &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">Especifica el nombre de la propiedad que se encuentra en el código JSON al serializar y deserializar. Esto invalida cualquier directiva de nomenclatura especificada por <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonPropertyNameAttribute&quot; /&gt; with the specified property name.">Inicializa una nueva instancia de <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> con el nombre de propiedad especificado.</summary>
      <param name="name" vsli:raw="The name of the property.">Nombre de la propiedad.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the name of the property.">Obtiene el nombre de la propiedad.</summary>
      <returns vsli:raw="The name of the property.">Nombre de la propiedad.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary vsli:raw="Converts enumeration values to and from strings.">Convierte los valores de enumeración en cadenas y a partir de cadenas.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with the default naming policy that allows integer values.">Inicializa una instancia de la clase <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> con la directiva de nomenclatura predeterminada que permite valores enteros.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with a specified naming policy and a value that indicates whether undefined enumeration values are allowed.">Inicializa una instancia de la clase <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> con una directiva de nomenclatura especificada y un valor que indica si se permiten valores de enumeración no definidos.</summary>
      <param name="namingPolicy" vsli:raw="The optional naming policy for writing enum values.">Directiva de nomenclatura opcional para escribir valores de enumeración.</param>
      <param name="allowIntegerValues" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow undefined enum values; otherwise, &lt;see langword=&quot;false&quot; /&gt;. When &lt;see langword=&quot;true&quot; /&gt;, if an enum value isn't defined, it will output as a number rather than a string.">
        <see langword="true" /> para permitir valores de enumeración no definidos; en caso contrario, <see langword="false" />. Cuando es <see langword="true" />, si no se define un valor de enumeración, se generará como un número en lugar de como cadena.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted to an enum.">Determina si el tipo especificado puede convertirse en una enumeración.</summary>
      <param name="typeToConvert" vsli:raw="The type to be checked.">Tipo que se va a comprobar.</param>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the type can be converted; otherwise, &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt;.">Es <see langword="true" /> si se puede convertir el tipo; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for the specified type.">Crea un convertidor para el tipo especificado.</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">Tipo controlado por el convertidor.</param>
      <param name="options" vsli:raw="The serialization options to use.">Opciones de serialización que se van a utilizar.</param>
      <returns vsli:raw="A converter for which &lt;code data-dev-comment-type=&quot;typeparamref&quot;&gt;T&lt;/code&gt; is compatible with &lt;code data-dev-comment-type=&quot;paramref&quot;&gt;typeToConvert&lt;/code&gt;.">Convertidor para el que <typeparamref name="T" /> es compatible con <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary vsli:raw="Provides a high-performance API for forward-only, read-only access to UTF-8 encoded JSON text.">Proporciona una API de alto rendimiento para acceso de solo avance y solo lectura a texto JSON con codificación UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text and indicates whether the input contains all the text to process.">Inicializa una nueva instancia de la estructura <see cref="T:System.Text.Json.Utf8JsonReader" /> que procesa una secuencia de solo lectura de texto con codificación UTF-8 e indica si la entrada contiene todo el texto que se va a procesar.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Texto JSON con codificación UTF-8 que se va a procesar.</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">
        <see langword="true" /> para indicar que la secuencia de entrada contiene todos los datos que se van a procesar; <see langword="false" /> para indicar que el intervalo de entrada contiene datos parciales con más datos a continuación.</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Objeto que contiene el estado del lector. Si esta es la primera llamada al constructor, pase el estado predeterminado; de lo contrario, pase el valor de la propiedad <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> desde la instancia anterior de <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text using the specified options.">Inicializa una nueva instancia de la estructura <see cref="T:System.Text.Json.Utf8JsonReader" /> que procesa una secuencia de solo lectura de texto con codificación UTF-8 mediante las opciones especificadas.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Texto JSON con codificación UTF-8 que se va a procesar.</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">Define el comportamiento personalizado de <see cref="T:System.Text.Json.Utf8JsonReader" />, que es diferente de la RFC de JSON (por ejemplo, cómo controlar los comentarios o la profundidad máxima permitida durante la lectura). De forma predeterminada, el <see cref="T:System.Text.Json.Utf8JsonReader" /> sigue estrictamente RFC de JSON; los comentarios en JSON no son válidos y la profundidad máxima es 64.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text and indicates whether the input contains all the text to process.">Inicializa una nueva instancia de la estructura <see cref="T:System.Text.Json.Utf8JsonReader" /> que procesa un intervalo de solo lectura de texto con codificación UTF-8 e indica si la entrada contiene todo el texto que se va a procesar.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Texto JSON con codificación UTF-8 que se va a procesar.</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">
        <see langword="true" /> para indicar que la secuencia de entrada contiene todos los datos que se van a procesar; <see langword="false" /> para indicar que el intervalo de entrada contiene datos parciales con más datos a continuación.</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Objeto que contiene el estado del lector. Si esta es la primera llamada al constructor, pase el estado predeterminado; de lo contrario, pase el valor de la propiedad <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> desde la instancia anterior de <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text using the specified options.">Inicializa una nueva instancia de la estructura <see cref="T:System.Text.Json.Utf8JsonReader" /> que procesa un intervalo de solo lectura de texto con codificación UTF-8 mediante las opciones especificadas.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Texto JSON con codificación UTF-8 que se va a procesar.</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">Define el comportamiento personalizado de <see cref="T:System.Text.Json.Utf8JsonReader" />, que es diferente de la RFC de JSON (por ejemplo, cómo controlar los comentarios o la profundidad máxima permitida durante la lectura). De forma predeterminada, el <see cref="T:System.Text.Json.Utf8JsonReader" /> sigue estrictamente RFC de JSON; los comentarios en JSON no son válidos y la profundidad máxima es 64.</param>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary vsli:raw="Gets the total number of bytes consumed so far by this instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Obtiene el número total de bytes consumidos hasta ahora por esta instancia del <see cref="T:System.Text.Json.Utf8JsonReader" />.</summary>
      <returns vsli:raw="The total number of bytes consumed so far.">Número total de bytes consumidos hasta ahora.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">Obtiene la profundidad del token actual.</summary>
      <returns vsli:raw="The depth of the current token.">Profundidad del token actual.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; state to pass to a &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; constructor with more data.">Obtiene el estado actual del <see cref="T:System.Text.Json.Utf8JsonReader" /> que se va a pasar a un constructor del <see cref="T:System.Text.Json.Utf8JsonReader" /> con más datos.</summary>
      <returns vsli:raw="The current reader state.">Estado actual del lector.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary vsli:raw="Reads the next JSON token value from the source as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Lee el valor del token de JSON siguiente del origen como un valor <see cref="T:System.Boolean" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;.">
        <see langword="true" /> si <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> es <see cref="F:System.Text.Json.JsonTokenType.True" />; <see langword="false" /> si <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> es <see cref="F:System.Text.Json.JsonTokenType.False" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a Boolean value (that is, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;).">El valor del token de JSON no es un valor booleano (es decir, <see cref="F:System.Text.Json.JsonTokenType.True" /> o <see cref="F:System.Text.Json.JsonTokenType.False" />).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Analiza el valor del token JSON actual del origen como un <see cref="T:System.Byte" />.</summary>
      <returns vsli:raw="The value of the UTF-8 encoded token.">Valor del token con codificación UTF-8.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token JSON no es un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Byte.MinValue&quot;&gt;Byte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Byte.MaxValue&quot;&gt;Byte.MaxValue&lt;/see&gt;.">El formato numérico del valor del token JSON es incorrecto (por ejemplo, contiene un valor fraccionario o está escrito en notación científica).
o bien
El valor del token de JSON representa un número menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary vsli:raw="Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array.">Analiza el valor del token JSON actual del origen y descodifica la cadena JSON con codificación Base64 como una matriz de bytes.</summary>
      <returns vsli:raw="The byte array that represents the current JSON token value.">Matriz de bytes que representa el valor del token JSON actual.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">El tipo del token JSON no es <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text, so it can't be decoded to bytes.&#xA;&#xA;-or-&#xA;&#xA;The value contains invalid or more than two padding characters.&#xA;&#xA;-or-&#xA;&#xA;The value is incomplete. That is, the JSON string length is not a multiple of 4.">El valor no está codificado como texto en Base64 y, por tanto, no se puede descodificar en bytes.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary vsli:raw="Parses the current JSON token value from the source as a comment and transcodes it as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Analiza el valor del token JSON actual del origen como comentario, transcodificado como <see cref="T:System.String" />.</summary>
      <returns vsli:raw="The comment that represents the current JSON token value.">Comentario que representa el valor del token JSON actual.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a comment.">El token JSON no es un comentario.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Lee el valor del token de JSON siguiente del origen y lo analiza en <see cref="T:System.DateTime" />.</summary>
      <returns vsli:raw="The date and time value, if the entire UTF-8 encoded token value can be successfully parsed.">El valor de fecha y hora, si todo el valor del token con codificación UTF-8 se puede analizar correctamente.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">El valor del token JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.&#xA;        &#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">El valor del token de JSON no se puede leer como <see cref="T:System.DateTime" />.
o bien
El valor entero del token con codificación UTF-8 no se puede analizar en un valor <see cref="T:System.DateTime" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Lee el valor del token de JSON siguiente del origen y lo analiza en <see cref="T:System.DateTimeOffset" />.</summary>
      <returns vsli:raw="The date and time offset, if the entire UTF-8 encoded token value can be successfully parsed.">El desplazamiento de fecha y hora, si el valor entero del token con codificación UTF-8 se puede analizar correctamente.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">El valor del token JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.&#xA;&#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">El valor del token de JSON no se puede leer como <see cref="T:System.DateTimeOffset" />.
o bien
El valor entero del token con codificación UTF-8 no se puede analizar en un valor <see cref="T:System.DateTimeOffset" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Lee el valor del token de JSON siguiente del origen y lo analiza en <see cref="T:System.Decimal" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Valor del token con codificación UTF-8 que se analiza en <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Decimal.MinValue&quot;&gt;Decimal.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">El valor del token de JSON representa un número menor que <see cref="F:System.Decimal.MinValue" /> o mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Lee el valor del token de JSON siguiente del origen y lo analiza en <see cref="T:System.Double" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Valor del token con codificación UTF-8 que se analiza en <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Double.MinValue&quot;&gt;Double.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Double.MaxValue&quot;&gt;Double.MaxValue&lt;/see&gt;.">El valor del token de JSON representa un número menor que <see cref="F:System.Double.MinValue" /> o mayor que <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Lee el valor del token de JSON siguiente del origen y lo analiza en <see cref="T:System.Guid" />.</summary>
      <returns vsli:raw="The GUID value, if the entire UTF-8 encoded token value can be successfully parsed.">El valor de GUID, si todo el valor del token con codificación UTF-8 se puede analizar correctamente.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">El valor del token JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is in an unsupported format for a Guid.&#xA;        &#xA;-or-&#xA;&#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value.">El valor del token JSON está en un formato no admitido para un GUID.
o bien
El valor entero del token con codificación UTF-8 no se puede analizar en un valor <see cref="T:System.Guid" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Analiza el valor del token JSON actual del origen como un <see cref="T:System.Int16" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Valor del token con codificación UTF-8 que se analiza en <see cref="T:System.Int16" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token JSON no es un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int16.MinValue&quot;&gt;Int16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int16.MaxValue&quot;&gt;Int16.MaxValue&lt;/see&gt;.">El formato numérico del valor del token JSON es incorrecto (por ejemplo, contiene un valor fraccionario o está escrito en notación científica).
o bien
El valor del token de JSON representa un número menor que <see cref="F:System.Int16.MinValue" /> o mayor que <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Lee el valor del token de JSON siguiente del origen y lo analiza en <see cref="T:System.Int32" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Valor del token con codificación UTF-8 que se analiza en <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int32.MinValue&quot;&gt;Int32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">El valor del token de JSON tiene el formato numérico incorrecto. Por ejemplo, contiene un valor decimal o se escribe en notación científica.
o bien
El valor del token de JSON representa un número menor que <see cref="F:System.Int32.MinValue" /> o mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Lee el valor del token de JSON siguiente del origen y lo analiza en <see cref="T:System.Int64" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Valor del token con codificación UTF-8 que se analiza en <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int64.MinValue&quot;&gt;Int64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">El valor del token de JSON tiene el formato numérico incorrecto. Por ejemplo, contiene un valor decimal o se escribe en notación científica.
o bien
El valor del token de JSON representa un número menor que <see cref="F:System.Int64.MinValue" /> o mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary vsli:raw="Parses the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Analiza el valor del token JSON actual del origen como un <see cref="T:System.SByte" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Valor del token con codificación UTF-8 que se analiza en <see cref="T:System.SByte" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token JSON no es un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.SByte.MinValue&quot;&gt;SByte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.SByte.MaxValue&quot;&gt;SByte.MaxValue&lt;/see&gt;.">El formato numérico del valor del token JSON es incorrecto (por ejemplo, contiene un valor fraccionario o está escrito en notación científica).
o bien
El valor del token de JSON representa un número menor que <see cref="F:System.SByte.MinValue" /> o mayor que <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Lee el valor del token de JSON siguiente del origen y lo analiza en <see cref="T:System.Single" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Valor del token con codificación UTF-8 que se analiza en <see cref="T:System.Single" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Single.MinValue&quot;&gt;Single.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Single.MaxValue&quot;&gt;Single.MaxValue&lt;/see&gt;.">El valor del token de JSON representa un número menor que <see cref="F:System.Single.MinValue" /> o mayor que <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary vsli:raw="Reads the next JSON token value from the source unescaped and transcodes it as a string.">Lee el valor del token JSON siguiente del origen, sin escape, y transcodificado como una cadena.</summary>
      <returns vsli:raw="The token value parsed to a string, or &lt;see langword=&quot;null&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;.">Valor del token analizado en una cadena, o <see langword="null" /> si <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> es <see cref="F:System.Text.Json.JsonTokenType.Null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a string (that is, not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;, or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;).&#xA;&#xA;-or-&#xA;&#xA;The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates.">El valor del token de JSON no es una cadena (es decir, no es <see cref="F:System.Text.Json.JsonTokenType.String" />, <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ni <see cref="F:System.Text.Json.JsonTokenType.Null" />).
o bien
La cadena JSON contiene bytes UTF-8 no válidos o suplentes UTF-16 no válidos.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Analiza el valor del token JSON actual del origen como un <see cref="T:System.UInt16" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Valor del token con codificación UTF-8 que se analiza en <see cref="T:System.UInt16" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token JSON no es un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt16.MinValue&quot;&gt;UInt16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt16.MaxValue&quot;&gt;UInt16.MaxValue&lt;/see&gt;.">El formato numérico del valor del token JSON es incorrecto (por ejemplo, contiene un valor fraccionario o está escrito en notación científica).
o bien
El valor del token de JSON representa un número menor que <see cref="F:System.UInt16.MinValue" /> o mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Lee el valor del token de JSON siguiente del origen y lo analiza en <see cref="T:System.UInt32" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Valor del token con codificación UTF-8 que se analiza en <see cref="T:System.UInt32" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt32.MinValue&quot;&gt;UInt32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt32.MaxValue&quot;&gt;UInt32.MaxValue&lt;/see&gt;.">El valor del token de JSON tiene el formato numérico incorrecto. Por ejemplo, contiene un valor decimal o se escribe en notación científica.
o bien
El valor del token de JSON representa un número menor que <see cref="F:System.UInt32.MinValue" /> o mayor que <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Lee el valor del token de JSON siguiente del origen y lo analiza en <see cref="T:System.UInt64" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Valor del token con codificación UTF-8 que se analiza en <see cref="T:System.UInt64" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt64.MinValue&quot;&gt;UInt64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt64.MaxValue&quot;&gt;UInt64.MaxValue&lt;/see&gt;.">El valor del token de JSON tiene el formato numérico incorrecto. Por ejemplo, contiene un valor decimal o se escribe en notación científica.
o bien
El valor del token de JSON representa un número menor que <see cref="F:System.UInt64.MinValue" /> o mayor que <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary vsli:raw="Gets a value that indicates which &lt;c&gt;Value&lt;/c&gt; property to use to get the token value.">Obtiene un valor que indica qué propiedad <c>Value</c> se va a usar para obtener el valor del token.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSequence&quot; /&gt; should be used to get the token value; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSpan&quot; /&gt; should be used instead.">
        <see langword="true" /> si se debe utilizar <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> para obtener el valor del token; <see langword="false" /> si se debe usar <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> en su lugar.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary vsli:raw="Gets a value that indicates whether all the JSON data was provided or there is more data to come.">Obtiene el modo de esta instancia de <see cref="T:System.Text.Json.Utf8JsonReader" />, que indica si se han proporcionado todos los datos JSON o si hay más datos por venir.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader was constructed with the input span or sequence containing the entire JSON data to process; &lt;see langword=&quot;false&quot; /&gt; if the reader was constructed with an input span or sequence that may contain partial JSON data with more data to follow.">
        <see langword="true" /> si el lector se construyó con el intervalo de entrada o la secuencia que contiene los datos JSON completos que se van a procesar; <see langword="false" /> si el lector se construyó con un intervalo de entrada o una secuencia que puede contener datos JSON parciales con más datos para seguir.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">Obtiene el valor <see cref="T:System.SequencePosition" /> actual dentro del ReadOnlySequence&lt;byte&gt; de entrada con codificación UTF-8 proporcionado, o bien un valor <see cref="T:System.SequencePosition" /> predeterminado si la estructura <see cref="T:System.Text.Json.Utf8JsonReader" /> se ha construido con un ReadOnlySpan&lt;byte&gt;.</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">El <see cref="T:System.SequencePosition" /> actual dentro del&gt; de entrada con codificación UTF-8 proporcionado ReadOnlySequence&lt;byte o un <see cref="T:System.SequencePosition" /> predeterminado si la <see cref="T:System.Text.Json.Utf8JsonReader" /> struct se construyó con un&lt;de&gt;byte de ReadOnlySpan.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary vsli:raw="Reads the next JSON token from the input source.">Lee el token JSON siguiente del origen de entrada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the token was read successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el token se ha leído correctamente; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token according to the JSON RFC is encountered.&#xA;        &#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">Se ha encontrado un token JSON no válido según la RFC de JSON.
o bien
La profundidad actual supera el límite recursivo establecido por la profundidad máxima.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary vsli:raw="Skips the children of the current JSON token.">Omite los elementos secundarios del token JSON actual.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The reader was given partial data with more data to follow (that is, &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.IsFinalBlock&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;).">Se entregaron datos parciales al lector, más datos seguirán (es decir, <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> es <see langword="false" />).</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;&#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">Se ha encontrado un token JSON no válido durante la omisión, según la RFC de JSON.
o bien
La profundidad actual supera el límite recursivo establecido por la profundidad máxima.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary vsli:raw="Gets the index that the last processed JSON token starts at (within the given UTF-8 encoded input text), skipping any white space.">Obtiene el índice en el que comienza el último token JSON procesado (dentro del texto de entrada codificado en UTF-8 proporcionado), y omite los espacios en blanco.</summary>
      <returns vsli:raw="The starting index of the last processed JSON token within the given UTF-8 encoded input text.">Índice inicial del último token JSON procesado en el texto de entrada codificado en UTF-8 proporcionado.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary vsli:raw="Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.">Obtiene el tipo del último token de JSON procesado en el texto JSON con codificación UTF-8.</summary>
      <returns vsli:raw="The type of the last processed JSON token.">Tipo del último token JSON procesado.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Intenta analizar el valor del token JSON actual del origen como <see cref="T:System.Byte" /> y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene el valor analizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Byte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todo el valor del token con codificación UTF-8 se puede analizar correctamente en un valor <see cref="T:System.Byte" />; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array and returns a value that indicates whether the operation succeeded.">Intenta analizar el valor del token JSON actual del origen, descodifica la cadena JSON con codificación Base64 como una matriz de bytes y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decoded binary representation of the Base64 text.">Cuando el método finaliza, contiene la representación binaria descodificada del texto Base64.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el valor del token completo está codificado como texto válido Base64 y se puede descodificar correctamente en bytes; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">El token JSON no es <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Intenta analizar el valor del token JSON actual del origen como <see cref="T:System.DateTime" /> y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">Cuando este método devuelve un resultado, contiene el valor analizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todo el valor del token con codificación UTF-8 se puede analizar correctamente en un valor <see cref="T:System.DateTime" />; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">El valor del token JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Intenta analizar el valor del token JSON actual del origen como <see cref="T:System.DateTimeOffset" /> y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">Cuando este método devuelve un resultado, contiene el valor analizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todo el valor del token con codificación UTF-8 se puede analizar correctamente en un valor <see cref="T:System.DateTimeOffset" />; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">El valor del token JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Intenta analizar el valor del token JSON actual del origen como <see cref="T:System.Decimal" /> y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene el valor analizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todo el valor del token con codificación UTF-8 se puede analizar correctamente en un valor <see cref="T:System.Decimal" />; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Double&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Intenta analizar el valor del token JSON actual del origen como <see cref="T:System.Double" /> y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene el valor analizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todo el valor del token con codificación UTF-8 se puede analizar correctamente en un valor <see cref="T:System.Double" />; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Guid&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Intenta analizar el valor del token JSON actual del origen como <see cref="T:System.Guid" /> y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">Cuando este método devuelve un resultado, contiene el valor analizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todo el valor del token con codificación UTF-8 se puede analizar correctamente en un valor <see cref="T:System.Guid" />; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">El valor del token JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Intenta analizar el valor del token JSON actual del origen como <see cref="T:System.Int16" /> y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene el valor analizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Int16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todo el valor del token con codificación UTF-8 se puede analizar correctamente en un valor <see cref="T:System.Int16" />; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Intenta analizar el valor del token JSON actual del origen como <see cref="T:System.Int32" /> y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene el valor analizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todo el valor del token con codificación UTF-8 se puede analizar correctamente en un valor <see cref="T:System.Int32" />; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Intenta analizar el valor del token JSON actual del origen como <see cref="T:System.Int64" /> y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene el valor analizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todo el valor del token con codificación UTF-8 se puede analizar correctamente en un valor <see cref="T:System.Int64" />; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Intenta analizar el valor del token JSON actual del origen como <see cref="T:System.SByte" /> y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene el valor analizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todo el valor del token con codificación UTF-8 se puede analizar correctamente en un valor <see cref="T:System.SByte" />; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Single&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Intenta analizar el valor del token JSON actual del origen como <see cref="T:System.Single" /> y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene el valor analizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Single&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todo el valor del token con codificación UTF-8 se puede analizar correctamente en un valor <see cref="T:System.Single" />; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Intenta analizar el valor del token JSON actual del origen como <see cref="T:System.UInt16" /> y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene el valor analizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todo el valor del token con codificación UTF-8 se puede analizar correctamente en un valor <see cref="T:System.UInt16" />; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Intenta analizar el valor del token JSON actual del origen como <see cref="T:System.UInt32" /> y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene el valor analizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todo el valor del token con codificación UTF-8 se puede analizar correctamente en un valor <see cref="T:System.UInt32" />; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Intenta analizar el valor del token JSON actual del origen como <see cref="T:System.UInt64" /> y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Cuando este método devuelve un resultado, contiene el valor analizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todo el valor del token con codificación UTF-8 se puede analizar correctamente en un valor <see cref="T:System.UInt64" />; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">El valor del token de JSON no es un objeto <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary vsli:raw="Tries to skip the children of the current JSON token.">Intenta omitir los elementos secundarios del token JSON actual.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there was enough data for the children to be skipped successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si había suficientes datos para que los elementos secundarios se omitieran correctamente; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;          &#xA;-or -&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">Se ha encontrado un token JSON no válido durante la omisión, según la RFC de JSON.
O bien
La profundidad actual supera el límite recursivo establecido por la profundidad máxima.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySequence&amp;lt;byte&amp;gt; slice of the input payload, only if the token is contained within multiple segments.">Obtiene el valor sin procesar del último token procesado como un segmento ReadOnlySequence&lt;byte&gt; de la carga de entrada, solo si el token está contenido en muchos segmentos.</summary>
      <returns vsli:raw="A byte read-only sequence.">Secuencia de solo lectura de bytes.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySpan&amp;lt;byte&amp;gt; slice of the input payload, if the token fits in a single segment or if the reader was constructed with a JSON payload contained in a ReadOnlySpan&amp;lt;byte&amp;gt;.">Obtiene el valor sin procesar del último token procesado como un segmento ReadOnlySpan&lt;byte&gt; de la carga de entrada, si el token se adapta a un único segmento o si el lector se construyó con una carga JSON contenida en ReadOnlySpan&lt;byte&gt;.</summary>
      <returns vsli:raw="A read-only span of bytes.">Un intervalo de bytes de solo lectura.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the UTF-8 encoded text in a read-only byte span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Compara el texto con codificación UTF-8 de un intervalo de bytes de solo lectura con el valor del token JSON sin escape del origen y devuelve un valor que indica si coinciden.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">El texto con codificación UTF-8 con el que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the UTF-8 encoded lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el valor del token JSON en el origen coincide con el texto de búsqueda con codificación UTF-8; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">El token JSON no es una cadena (es decir, no es <see cref="F:System.Text.Json.JsonTokenType.String" /> ni <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the text in a read-only character span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Compara el texto de un intervalo de caracteres de solo lectura con el valor del token JSON sin escape del origen y devuelve un valor que indica si coinciden.</summary>
      <param name="text" vsli:raw="The text to compare against.">El texto que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el valor del token JSON del origen coincide con el texto de búsqueda; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">El token JSON no es una cadena (es decir, no es <see cref="F:System.Text.Json.JsonTokenType.String" /> ni <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary vsli:raw="Compares the string text to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Compara el texto de la cadena con el valor del token JSON sin escape del origen y devuelve un valor que indica si coinciden.</summary>
      <param name="text" vsli:raw="The text to compare against.">El texto que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el valor del token JSON del origen coincide con el texto de búsqueda; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">El token JSON no es una cadena (es decir, no es <see cref="F:System.Text.Json.JsonTokenType.String" /> ni <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary vsli:raw="Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.">Proporciona una API de alto rendimiento para la escritura de solo avance sin almacenamiento en caché de texto JSON con codificación UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; to write the output to and customization options.">Inicializa una nueva instancia de la clase <see cref="T:System.Text.Json.Utf8JsonWriter" /> mediante el <see cref="T:System.Buffers.IBufferWriter`1" /> especificado para escribir la salida y las opciones de personalización.</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">Destino de la escritura de texto JSON.</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">Define el comportamiento personalizado de <see cref="T:System.Text.Json.Utf8JsonWriter" />. De forma predeterminada, escribe JSON minimizado (sin espacios en blanco adicionales) y valida que el JSON que se escribe es estructuralmente válido según la RFC de JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified stream to write the output to and customization options.">Inicializa una nueva instancia de la clase <see cref="T:System.Text.Json.Utf8JsonWriter" /> mediante el flujo especificado para escribir la salida y las opciones de personalización.</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">Destino de la escritura de texto JSON.</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">Define el comportamiento personalizado de <see cref="T:System.Text.Json.Utf8JsonWriter" />. De forma predeterminada, escribe JSON minimizado (sin espacios en blanco adicionales) y valida que el JSON que se escribe es estructuralmente válido según la RFC de JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary vsli:raw="Gets the total number of bytes committed to the output by the current instance so far.">Obtiene el número total de bytes confirmados en la salida por la instancia actual hasta el momento.</summary>
      <returns vsli:raw="The total number of bytes committed to the output by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far.">Número total de bytes confirmados en la salida por el <see cref="T:System.Text.Json.Utf8JsonWriter" /> hasta el momento.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary vsli:raw="Gets the number of bytes written by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far that have not yet been flushed to the output and committed.">Obtiene el número de bytes escritos por el objeto <see cref="T:System.Text.Json.Utf8JsonWriter" /> hasta el momento que aún no se han vaciado en la salida y confirmado.</summary>
      <returns vsli:raw="The number of bytes written so far by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; that have not yet been flushed to the output and committed.">Número de bytes escritos hasta el momento por el <see cref="T:System.Text.Json.Utf8JsonWriter" /> que todavía no se han vaciado en la salida y se han confirmado.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">Obtiene la profundidad del token actual.</summary>
      <returns vsli:raw="The depth of the current token.">Profundidad del token actual.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary vsli:raw="Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">Confirma el texto JSON restante que aún no se ha vaciado y libera todos los recursos utilizados por la instancia actual.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary vsli:raw="Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">Confirma asincrónicamente el texto JSON restante que aún no se ha vaciado y libera todos los recursos utilizados por la instancia actual.</summary>
      <returns vsli:raw="A task representing the asynchronous dispose operation.">Tarea que representa la operación de eliminación asincrónica.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary vsli:raw="Commits the JSON text written so far, which makes it visible to the output destination.">Confirma el texto JSON escrito hasta el momento, lo que hace que sea visible en el destino de salida.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">Esta instancia se ha eliminado.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously commits the JSON text written so far, which makes it visible to the output destination.">Confirma asincrónicamente el texto JSON escrito hasta el momento, lo que hace que sea visible en el destino de salida.</summary>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests. The default value is &lt;see cref=&quot;P:System.Threading.CancellationToken.None&quot; /&gt;.">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns vsli:raw="A task representing the asynchronous flush operation.">Tarea que representa la operación de vaciado asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">Esta instancia se ha eliminado.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary vsli:raw="Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.">Obtiene el comportamiento personalizado al escribir JSON con esta instancia, lo que indica si se debe dar formato a la salida mientras se escribe, si se debe omitir la validación JSON estructural y qué caracteres se deben escapar.</summary>
      <returns vsli:raw="The custom behavior of this instance of the writer for formatting, validating, and escaping.">Comportamiento personalizado de esta instancia del escritor para dar formato, validar y escapar.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused.">Restablece el estado interno de esta instancia para que se pueda reutilizar.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">Esta instancia se ha eliminado.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt;.">Restablece el estado interno de esta instancia para que se pueda reutilizar con una nueva instancia de <see cref="T:System.Buffers.IBufferWriter`1" />.</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">Destino de la escritura de texto JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">Esta instancia se ha eliminado.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">Restablece el estado interno de esta instancia para que se pueda reutilizar con una nueva instancia de <see cref="T:System.IO.Stream" />.</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">Destino de la escritura de texto JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">Esta instancia se ha eliminado.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de la propiedad y el valor de bytes sin procesar (como cadena JSON codificada en base 64) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded name of the property to write.">Nombre codificado en UTF-8 de la propiedad que se va a escribir.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Datos binarios que se van a escribir como texto codificado en Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">El valor o nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de la propiedad y el valor de bytes sin procesar (como cadena JSON codificada en base 64) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Datos binarios que se van a escribir como texto codificado en Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">El valor o nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de la propiedad y el valor de bytes sin procesar (como cadena JSON codificada en base 64) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Datos binarios que se van a escribir como texto codificado en Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">El valor o nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de la propiedad y el valor de bytes sin procesar codificados previamente (como una cadena JSON codificada en Base64) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON-encoded name of the property to write.">Nombre codificado en JSON de la propiedad que se va a escribir.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Datos binarios que se van a escribir como texto codificado en Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">El valor especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.">Escribe el valor de bytes sin procesar como una cadena JSON codificada en Base64 como un elemento de una matriz JSON.</summary>
      <param name="bytes" vsli:raw="The binary data to be written as a Base64 encoded JSON string element of a JSON array.">Los datos binarios que se van a escribir como un elemento de la cadena JSON codificado en Base64 de una matriz JSON.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">El valor especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Escribe el nombre de una propiedad especificado como intervalo de bytes de solo lectura y el valor <see cref="T:System.Boolean" /> (como literal JSON true o false) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Valor que se va escribir como literal JSON true o false como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Escribe el nombre de una propiedad especificado como intervalo de caracteres de solo lectura y el valor <see cref="T:System.Boolean" /> (como literal JSON true o false) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Valor que se va escribir como literal JSON true o false como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Escribe el nombre de una propiedad especificado como cadena y el valor <see cref="T:System.Boolean" /> (como literal JSON true o false) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Valor que se va escribir como literal JSON true o false como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Escribe el nombre de la propiedad y el valor <see cref="T:System.Boolean" /> codificados previamente (como literal JSON true o false) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Valor que se va escribir como literal JSON true o false como parte del par nombre-valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as an element of a JSON array.">Escribe un valor <see cref="T:System.Boolean" /> (como literal JSON true o false) como elemento de una matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as an element of a JSON array.">Valor que se va a escribir como literal JSON true o false como elemento de una matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value as a JSON comment.">Escribe el valor de texto UTF-8 como comentario JSON.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">Valor con codificación UTF-8 que se va escribir como comentario de JSON en /*..*/.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">El valor especificado es demasiado grande.
o bien
<paramref name="utf8Value" /> contiene un delimitador de comentario (es decir, */).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value as a JSON comment.">Escribe el valor de texto UTF-16 como comentario JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">Valor con codificación UTF-16 que se va escribir como comentario de JSON transcodificado a UTF-8 en /*..*/.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">El valor especificado es demasiado grande.
o bien
<paramref name="value" /> contiene un delimitador de comentario (es decir, */).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary vsli:raw="Writes a string text value as a JSON comment.">Escribe el valor de texto de cadena como comentario JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">Valor con codificación UTF-16 que se va escribir como comentario de JSON transcodificado a UTF-8 en /*..*/.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">El valor especificado es demasiado grande.
o bien
<paramref name="value" /> contiene un delimitador de comentario (es decir, */).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;value&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary vsli:raw="Writes the end of a JSON array.">Escribe el final de una matriz de JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary vsli:raw="Writes the end of a JSON object.">Escribe el final de un objeto de JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and the JSON literal null as part of a name/value pair of a JSON object.">Escribe el nombre de una propiedad especificado como intervalo de bytes de solo lectura y el literal JSON null como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a read-only character span and the JSON literal null as part of a name/value pair of a JSON object.">Escribe el nombre de una propiedad especificado como intervalo de caracteres de solo lectura y el literal JSON null como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary vsli:raw="Writes a property name specified as a string and the JSON literal null as part of a name/value pair of a JSON object.">Escribe el nombre de una propiedad especificado como cadena y el literal JSON null como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and the JSON literal null as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el literal JSON null codificados previamente como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary vsli:raw="Writes the JSON literal null as an element of a JSON array.">Escribe el literal JSON null como un elemento de una matriz JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de bytes de solo lectura y el valor <see cref="T:System.Decimal" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de bytes de solo lectura y el valor <see cref="T:System.Double" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de bytes de solo lectura y el valor <see cref="T:System.Int32" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de bytes de solo lectura y el valor <see cref="T:System.Int64" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de bytes de solo lectura y el valor <see cref="T:System.Single" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de bytes de solo lectura y el valor <see cref="T:System.UInt32" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de bytes de solo lectura y el valor <see cref="T:System.UInt64" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de caracteres de solo lectura y el valor <see cref="T:System.Decimal" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de caracteres de solo lectura y el valor <see cref="T:System.Double" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de caracteres de solo lectura y el valor <see cref="T:System.Int32" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de caracteres de solo lectura y el valor <see cref="T:System.Int64" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de caracteres de solo lectura y el valor <see cref="T:System.Single" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de caracteres de solo lectura y el valor <see cref="T:System.UInt32" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de caracteres de solo lectura y el valor <see cref="T:System.UInt64" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como cadena y el valor <see cref="T:System.Decimal" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como cadena y el valor <see cref="T:System.Double" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como cadena y el valor <see cref="T:System.Int32" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como cadena y el valor <see cref="T:System.Int64" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como cadena y el valor <see cref="T:System.Single" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como cadena y el valor <see cref="T:System.UInt32" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como cadena y el valor <see cref="T:System.UInt64" /> (como un número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el valor <see cref="T:System.Decimal" /> codificados previamente (como número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el valor <see cref="T:System.Double" /> codificados previamente (como número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el valor <see cref="T:System.Int32" /> codificados previamente (como número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el valor <see cref="T:System.Int64" /> codificados previamente (como número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el valor <see cref="T:System.Single" /> codificados previamente (como número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el valor <see cref="T:System.UInt32" /> codificados previamente (como número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el valor <see cref="T:System.UInt64" /> codificados previamente (como número JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Escribe el valor <see cref="T:System.Decimal" /> (como un número JSON) como elemento de una matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valor que se va a escribir como un número de JSON como un elemento de una matriz de JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Escribe el valor <see cref="T:System.Double" /> (como un número JSON) como elemento de una matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valor que se va a escribir como un número de JSON como un elemento de una matriz de JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Escribe el valor <see cref="T:System.Int32" /> (como un número JSON) como elemento de una matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valor que se va a escribir como un número de JSON como un elemento de una matriz de JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Escribe el valor <see cref="T:System.Int64" /> (como un número JSON) como elemento de una matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valor que se va a escribir como un número de JSON como un elemento de una matriz de JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Escribe el valor <see cref="T:System.Single" /> (como un número JSON) como elemento de una matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valor que se va a escribir como un número de JSON como un elemento de una matriz de JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Escribe el valor <see cref="T:System.UInt32" /> (como un número JSON) como elemento de una matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valor que se va a escribir como un número de JSON como un elemento de una matriz de JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Escribe el valor <see cref="T:System.UInt64" /> (como un número JSON) como elemento de una matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valor que se va a escribir como un número de JSON como un elemento de una matriz de JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Escribe el nombre de propiedad UTF-8 (como una cadena JSON) como primera parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">La validación está habilitada y esta operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Escribe el nombre de propiedad (como una cadena JSON) como primera parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">La validación está habilitada y esta operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Escribe el nombre de propiedad (como una cadena JSON) como primera parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">La validación está habilitada y esta operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Escribe el nombre de propiedad codificado previamente (como cadena JSON) como primera parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">La validación está habilitada y esta operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary vsli:raw="Writes the beginning of a JSON array.">Escribe el principio de una matriz de JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profundidad del archivo JSON supera la profundidad máxima de 1000.
o bien
La validación está habilitada y esta operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.">Escribe el principio de una matriz JSON con un nombre de propiedad especificado como intervalo de bytes de solo lectura como la clave.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON array to be written.">Nombre de propiedad con codificación UTF-8 de la matriz JSON que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profundidad del archivo JSON supera la profundidad máxima de 1000.
o bien
La validación está habilitada y esta operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.">Escribe el principio de una matriz JSON con un nombre de propiedad especificado como intervalo de caracteres de solo lectura como la clave.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 de la matriz de JSON que se va a transcodificar y escribir como UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profundidad del archivo JSON supera la profundidad máxima de 1000.
o bien
La validación está habilitada y esta operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a string as the key.">Escribe el principio de una matriz JSON con un nombre de propiedad especificado como cadena como la clave.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 de la matriz de JSON que se va a transcodificar y escribir como UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profundidad del archivo JSON supera la profundidad máxima de 1000.
o bien
La validación está habilitada y esta operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON array with a pre-encoded property name as the key.">Escribe el principio de una matriz JSON con un nombre de propiedad codificado previamente como clave.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.">Nombre de propiedad con codificación JSON de la matriz JSON que se va a transcodificar y escribir como UTF-8.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;    &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">La profundidad del código de JSON ha superado la profundidad máxima de 1000.
o bien
La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary vsli:raw="Writes the beginning of a JSON object.">Escribe el principio de un objeto de JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and the operation would result in writing invalid JSON.">La profundidad del archivo JSON supera la profundidad máxima de 1000.
o bien
La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.">Escribe el principio de un objeto JSON con un nombre de propiedad especificado como intervalo de bytes de solo lectura como la clave.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profundidad del archivo JSON supera la profundidad máxima de 1000.
o bien
La validación está habilitada y esta operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only character span as the key.">Escribe el principio de un objeto JSON con un nombre de propiedad especificado como intervalo de caracteres de solo lectura como la clave.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profundidad del archivo JSON supera la profundidad máxima de 1000.
o bien
La validación está habilitada y esta operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a string as the key.">Escribe el principio de un objeto JSON con un nombre de propiedad especificado como cadena como la clave.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profundidad del archivo JSON supera la profundidad máxima de 1000.
o bien
La validación está habilitada y esta operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON object with a pre-encoded property name as the key.">Escribe el principio de un objeto JSON con un nombre de propiedad codificado previamente como clave.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;          &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">La profundidad del código de JSON ha superado la profundidad máxima de 1000.
o bien
La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad UTF-8 y el valor <see cref="T:System.DateTime" /> (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad UTF-8 y el valor <see cref="T:System.DateTimeOffset" /> (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad UTF-8 y el valor <see cref="T:System.Guid" /> (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad UTF-8 y el valor de texto UTF-8 (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Valor con codificación UTF-8 que se va escribir como una cadena de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">El valor o nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad UTF-8 y el valor de texto UTF-16 (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valor con codificación UTF-16 que se va escribir como una cadena de JSON transcodificada a UTF-8 como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">El valor o nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary vsli:raw="Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad UTF-8 y el valor de texto de cadena (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valor con codificación UTF-16 que se va escribir como una cadena de JSON transcodificada a UTF-8 como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">El valor o nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad UTF-8 y el valor codificado previamente (como cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valor con codificación JSON que se va escribir como cadena JSON transcodificada a UTF-8 como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validación está habilitada y este método daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de caracteres de solo lectura y el valor <see cref="T:System.DateTime" /> (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de caracteres de solo lectura y el valor <see cref="T:System.DateTimeOffset" /> (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como intervalo de caracteres de solo lectura y el valor <see cref="T:System.Guid" /> (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad UTF-16 y el valor de texto UTF-8 (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Valor con codificación UTF-8 que se va escribir como una cadena de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">El valor o nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad UTF-16 y el valor de texto UTF-16 (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valor con codificación UTF-16 que se va escribir como una cadena de JSON transcodificada a UTF-8 como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">El valor o nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary vsli:raw="Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad UTF-16 y el valor de texto de cadena (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valor con codificación UTF-16 que se va escribir como una cadena de JSON transcodificada a UTF-8 como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">El valor o nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el valor codificado previamente (como cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valor con codificación JSON que se va escribir como cadena JSON transcodificada a UTF-8 como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como cadena y el valor <see cref="T:System.DateTime" /> (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como cadena y el valor <see cref="T:System.DateTimeOffset" /> (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como cadena y el valor <see cref="T:System.Guid" /> (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como cadena y el valor de texto UTF-8 (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Valor con codificación UTF-8 que se va escribir como una cadena de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">El valor o nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como cadena y el valor de texto UTF-16 (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valor con codificación UTF-16 que se va escribir como una cadena de JSON transcodificada a UTF-8 como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">El valor o nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary vsli:raw="Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad especificado como cadena y el valor de texto de cadena (como una cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valor con codificación UTF-16 que se va escribir como una cadena de JSON transcodificada a UTF-8 como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">El valor o nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el valor codificado previamente (como cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nombre de propiedad del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valor con codificación JSON que se va escribir como cadena JSON transcodificada a UTF-8 como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">El nombre de propiedad especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el valor <see cref="T:System.DateTime" /> codificados previamente (como cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el valor <see cref="T:System.DateTimeOffset" /> codificados previamente (como cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el valor <see cref="T:System.Guid" /> codificados previamente (como cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el valor de texto UTF-8 codificados previamente (como cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Valor con codificación UTF-8 que se va escribir como una cadena de JSON como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">El valor especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el valor de texto codificados previamente (como cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valor que se va escribir como cadena JSON transcodificada a UTF-8 como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">El valor especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary vsli:raw="Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el valor de texto de cadena codificados previamente (como cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valor que se va escribir como cadena JSON transcodificada a UTF-8 como parte del par nombre-valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">El valor especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Escribe el nombre de propiedad y el valor codificado previamente (como cadena JSON) como parte de un par nombre-valor de un objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nombre de la propiedad con codificación JSON del objeto JSON que se va a transcodificar y escribir como UTF-8.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valor con codificación JSON que se va escribir como cadena JSON transcodificada a UTF-8 como parte del par nombre-valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Escribe el valor <see cref="T:System.DateTime" /> (como una cadena JSON) como elemento de una matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">Valor que se va a escribir como una cadena de JSON como un elemento de una matriz de JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Escribe el valor <see cref="T:System.DateTimeOffset" /> (como una cadena JSON) como elemento de una matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">Valor que se va a escribir como una cadena de JSON como un elemento de una matriz de JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Escribe el valor <see cref="T:System.Guid" /> (como una cadena JSON) como elemento de una matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">Valor que se va a escribir como una cadena de JSON como un elemento de una matriz de JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validación está habilitada y la operación daría lugar a la escritura de JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.">Escribe el valor de texto UTF-8 (como una cadena JSON) como elemento de una matriz JSON.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string element of a JSON array.">El valor con codificación UTF-8 que se va a escribir como un elemento de cadena de JSON de una matriz de JSON.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">El valor especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.">Escribe el valor de texto UTF-16 (como una cadena JSON) como elemento de una matriz JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">Valor con codificación UTF-16 que se va a escribir como un elemento de cadena de JSON transcodificado a UTF-8 de una matriz de JSON.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">El valor especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary vsli:raw="Writes a string text value (as a JSON string) as an element of a JSON array.">Escribe el valor de texto de cadena (como una cadena JSON) como elemento de una matriz JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">Valor con codificación UTF-16 que se va a escribir como un elemento de cadena de JSON transcodificado a UTF-8 de una matriz de JSON.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">El valor especificado es demasiado grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.">Escribe el valor de texto codificado previamente (como cadena JSON) como elemento de una matriz JSON.</summary>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">Valor con codificación JSON que se va a escribir como elemento de cadena JSON transcodificado a UTF-8 de una matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validación está habilitada y la operación de escritura generaría un JSON no válido.</exception>
    </member>
  </members>
</doc>
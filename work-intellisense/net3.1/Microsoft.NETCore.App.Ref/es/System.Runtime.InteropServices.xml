<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Runtime.InteropServices</name>
  </assembly>
  <members>
    <member name="T:System.DataMisalignedException">
      <summary vsli:raw="The exception that is thrown when a unit of data is read from or written to an address that is not a multiple of the data size. This class cannot be inherited.">La excepción que se produce cuando una unidad de datos se lee de una dirección, o se escribe en ella, que no es múltiplo del tamaño de los datos. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.DataMisalignedException" />.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class using the specified error message.">Inicializa una nueva instancia de la clase <see cref="T:System.DataMisalignedException" /> mediante el mensaje de error especificado.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; object that describes the error. The content of &lt;paramref name=&quot;message&quot; /&gt; is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">
        <see cref="T:System.String" /> que describe el error. Se pretende que el contenido de <paramref name="message" /> sea inteligible. El autor de llamada de este constructor debe asegurarse de que la cadena se haya adaptado para la referencia cultural actual del sistema.</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class using the specified error message and underlying exception.">Inicializa una nueva instancia de la clase <see cref="T:System.DataMisalignedException" /> mediante el mensaje de error y la excepción subyacente especificados.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; object that describes the error. The content of &lt;paramref name=&quot;message&quot; /&gt; is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">
        <see cref="T:System.String" /> que describe el error. Se pretende que el contenido de <paramref name="message" /> sea inteligible. El autor de llamada de este constructor debe asegurarse de que la cadena se haya adaptado para la referencia cultural actual del sistema.</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt;. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">La excepción que es la causa de la <see cref="T:System.DataMisalignedException" /> actual. Si el parámetro <paramref name="innerException" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary vsli:raw="The exception that is thrown when a DLL specified in a DLL import cannot be found.">Excepción que se produce cuando no se encuentra el archivo DLL especificado en una importación de DLL.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with default properties.">Inicializa una nueva instancia de la clase <see cref="T:System.DllNotFoundException" /> con propiedades predeterminadas.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with serialized data.">Inicializa una nueva instancia de la clase <see cref="T:System.DllNotFoundException" /> con datos serializados.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; that holds the serialized object data about the exception being thrown.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene los datos serializados del objeto que hacen referencia a la excepción que se va a producir.</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; that contains contextual information about the source or destination.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene información contextual sobre el origen o el destino.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with a specified error message.">Inicializa una nueva instancia de la clase <see cref="T:System.DllNotFoundException" /> con el mensaje de error especificado.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Mensaje de error que explica el motivo de la excepción.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Inicializa una nueva instancia de la clase <see cref="T:System.DllNotFoundException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="inner" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="T:System.IO.UnmanagedMemoryAccessor">
      <summary vsli:raw="Provides random access to unmanaged blocks of memory from managed code.">Proporciona acceso aleatorio a bloques de memoria no administrada desde código administrado.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.IO.UnmanagedMemoryAccessor" />.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class with a specified buffer, offset, and capacity.">Inicializa una nueva instancia de la clase <see cref="T:System.IO.UnmanagedMemoryAccessor" /> con un búfer, un desplazamiento y una capacidad especificados.</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">Búfer que va a contener el descriptor de acceso.</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">Byte en el que se va a iniciar el descriptor de acceso.</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">Tamaño, en bytes, de la memoria que se va a asignar.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> más <paramref name="capacity" /> es mayor que <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="offset" /> o <paramref name="capacity" /> es menor que cero.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> más <paramref name="capacity" /> se ajustaría alrededor del extremo final del espacio de direcciones.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class with a specified buffer, offset, capacity, and access right.">Inicializa una nueva instancia de la clase <see cref="T:System.IO.UnmanagedMemoryAccessor" /> con un búfer, un desplazamiento, una capacidad y un derecho de acceso especificados.</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">Búfer que va a contener el descriptor de acceso.</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">Byte en el que se va a iniciar el descriptor de acceso.</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">Tamaño, en bytes, de la memoria que se va a asignar.</param>
      <param name="access" vsli:raw="The type of access allowed to the memory. The default is &lt;see cref=&quot;F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite&quot; /&gt;.">Tipo de acceso permitido a la memoria. De manera predeterminada, es <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> más <paramref name="capacity" /> es mayor que <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;access&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot; /&gt; enumeration value.">
        <paramref name="offset" /> o <paramref name="capacity" /> es menor que cero.
o bien
<paramref name="access" /> no es un valor de enumeración <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> válido.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> más <paramref name="capacity" /> se ajustaría alrededor del extremo final del espacio de direcciones.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanRead">
      <summary vsli:raw="Determines whether the accessor is readable.">Determina si el descriptor de acceso es legible.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is readable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el descriptor de acceso es legible; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanWrite">
      <summary vsli:raw="Determines whether the accessory is writable.">Determina si el descriptor de acceso es grabable.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is writable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el descriptor de acceso es grabable; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.Capacity">
      <summary vsli:raw="Gets the capacity of the accessor.">Obtiene la capacidad del descriptor de acceso.</summary>
      <returns vsli:raw="The capacity of the accessor.">Capacidad del descriptor de acceso.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt;.">Libera todos los recursos que usa <see cref="T:System.IO.UnmanagedMemoryAccessor" />.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; and optionally releases the managed resources.">Libera los recursos no administrados que usa <see cref="T:System.IO.UnmanagedMemoryAccessor" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary vsli:raw="Sets the initial values for the accessor.">Establece los valores iniciales para el descriptor de acceso.</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">Búfer que va a contener el descriptor de acceso.</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">Byte en el que se va a iniciar el descriptor de acceso.</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">Tamaño, en bytes, de la memoria que se va a asignar.</param>
      <param name="access" vsli:raw="The type of access allowed to the memory. The default is &lt;see cref=&quot;F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite&quot; /&gt;.">Tipo de acceso permitido a la memoria. De manera predeterminada, es <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> más <paramref name="capacity" /> es mayor que <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;access&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot; /&gt; enumeration value.">
        <paramref name="offset" /> o <paramref name="capacity" /> es menor que cero.
O bien
<paramref name="access" /> no es un valor de enumeración <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> válido.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> más <paramref name="capacity" /> se ajustaría alrededor del extremo final del espacio de direcciones.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.IsOpen">
      <summary vsli:raw="Determines whether the accessor is currently open by a process.">Determina si el descriptor de acceso está abierto actualmente por un proceso.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is open; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el descriptor de acceso está abierto; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)">
      <summary vsli:raw="Reads a structure of type &lt;paramref name=&quot;T&quot; /&gt; from the accessor into a provided reference.">Lee una estructura de tipo <paramref name="T" /> del descriptor de acceso en una referencia proporcionada.</summary>
      <param name="position" vsli:raw="The position in the accessor at which to begin reading.">Posición en el descriptor de acceso en la que va a comenzar la lectura.</param>
      <param name="structure" vsli:raw="The structure to contain the read data.">Estructura que va a contener los datos de la lectura.</param>
      <typeparam name="T" vsli:raw="The type of structure.">Tipo de estructura.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read in a structure of type &lt;paramref name=&quot;T&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;T&quot; /&gt; is a value type that contains one or more reference types.">No hay suficientes bytes después de <paramref name="position" /> para leer en una estructura de tipo <paramref name="T" />.
o bien
<see langword="T" /> es un tipo de valor que contiene uno o más tipos de referencia.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">El descriptor de acceso no admite la lectura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads structures of type &lt;paramref name=&quot;T&quot; /&gt; from the accessor into an array of type &lt;paramref name=&quot;T&quot; /&gt;.">Lee estructuras de tipo <paramref name="T" /> del descriptor de acceso en una matriz de tipo <paramref name="T" />.</summary>
      <param name="position" vsli:raw="The number of bytes in the accessor at which to begin reading.">Número de bytes del descriptor de acceso en el que va a comenzar la lectura.</param>
      <param name="array" vsli:raw="The array to contain the structures read from the accessor.">Matriz que va a contener las estructuras leídas del descriptor de acceso.</param>
      <param name="offset" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; in which to place the first copied structure.">Índice de <paramref name="array" /> en el que se va a colocar la primera estructura copiada.</param>
      <param name="count" vsli:raw="The number of structures of type &lt;c&gt;T&lt;/c&gt; to read from the accessor.">Número de estructuras de tipo <c>T</c> que se van a leer del descriptor de acceso.</param>
      <typeparam name="T" vsli:raw="The type of structure.">Tipo de estructura.</typeparam>
      <returns vsli:raw="The number of structures read into &lt;paramref name=&quot;array&quot; /&gt;. This value can be less than &lt;paramref name=&quot;count&quot; /&gt; if there are fewer structures available, or zero if the end of the accessor is reached.">Número de estructuras leídas en <paramref name="array" />. Este valor puede ser menor que <paramref name="count" /> si hay menos estructuras disponibles, o cero si se llega al final del descriptor de acceso.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is not large enough to contain &lt;paramref name=&quot;count&quot; /&gt; of structures (starting from &lt;paramref name=&quot;position&quot; /&gt;).">
        <paramref name="array" /> no es bastante grande para contener <paramref name="count" /> de estructuras (empezando por <paramref name="position" />).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">El descriptor de acceso no admite la lectura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)">
      <summary vsli:raw="Reads a Boolean value from the accessor.">Lee un valor booleano del descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Número de bytes del descriptor de acceso en el que va a comenzar la lectura.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> o <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">No hay bastantes bytes después de <paramref name="position" /> para leer un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">El descriptor de acceso no admite la lectura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)">
      <summary vsli:raw="Reads a byte value from the accessor.">Lee un valor de byte del descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Número de bytes del descriptor de acceso en el que va a comenzar la lectura.</param>
      <returns vsli:raw="The value that was read.">Valor que se leyó.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">No hay bastantes bytes después de <paramref name="position" /> para leer un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">El descriptor de acceso no admite la lectura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)">
      <summary vsli:raw="Reads a character from the accessor.">Lee un carácter del descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Número de bytes del descriptor de acceso en el que va a comenzar la lectura.</param>
      <returns vsli:raw="The value that was read.">Valor que se leyó.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">No hay bastantes bytes después de <paramref name="position" /> para leer un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">El descriptor de acceso no admite la lectura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)">
      <summary vsli:raw="Reads a decimal value from the accessor.">Lee un valor decimal del descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Número de bytes del descriptor de acceso en el que va a comenzar la lectura.</param>
      <returns vsli:raw="The value that was read.">Valor que se leyó.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.  &#xA;  &#xA; -or-  &#xA;  &#xA; The decimal to read is invalid.">No hay bastantes bytes después de <paramref name="position" /> para leer un valor.
o bien
El decimal que se desea leer no es válido.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">El descriptor de acceso no admite la lectura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)">
      <summary vsli:raw="Reads a double-precision floating-point value from the accessor.">Lee un valor de punto flotante de precisión doble del descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Número de bytes del descriptor de acceso en el que va a comenzar la lectura.</param>
      <returns vsli:raw="The value that was read.">Valor que se leyó.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">No hay bastantes bytes después de <paramref name="position" /> para leer un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">El descriptor de acceso no admite la lectura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)">
      <summary vsli:raw="Reads a 16-bit integer from the accessor.">Lee un entero de 16 bits del descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Número de bytes del descriptor de acceso en el que va a comenzar la lectura.</param>
      <returns vsli:raw="The value that was read.">Valor que se leyó.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">No hay bastantes bytes después de <paramref name="position" /> para leer un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">El descriptor de acceso no admite la lectura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)">
      <summary vsli:raw="Reads a 32-bit integer from the accessor.">Lee un entero de 32 bits del descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Número de bytes del descriptor de acceso en el que va a comenzar la lectura.</param>
      <returns vsli:raw="The value that was read.">Valor que se leyó.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">No hay bastantes bytes después de <paramref name="position" /> para leer un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">El descriptor de acceso no admite la lectura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)">
      <summary vsli:raw="Reads a 64-bit integer from the accessor.">Lee un entero de 64 bits del descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Número de bytes del descriptor de acceso en el que va a comenzar la lectura.</param>
      <returns vsli:raw="The value that was read.">Valor que se leyó.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">No hay bastantes bytes después de <paramref name="position" /> para leer un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">El descriptor de acceso no admite la lectura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)">
      <summary vsli:raw="Reads an 8-bit signed integer from the accessor.">Lee un entero de 8 bits con signo del descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Número de bytes del descriptor de acceso en el que va a comenzar la lectura.</param>
      <returns vsli:raw="The value that was read.">Valor que se leyó.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">No hay bastantes bytes después de <paramref name="position" /> para leer un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">El descriptor de acceso no admite la lectura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)">
      <summary vsli:raw="Reads a single-precision floating-point value from the accessor.">Lee un valor de punto flotante de precisión sencilla del descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Número de bytes del descriptor de acceso en el que va a comenzar la lectura.</param>
      <returns vsli:raw="The value that was read.">Valor que se leyó.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">No hay bastantes bytes después de <paramref name="position" /> para leer un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">El descriptor de acceso no admite la lectura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)">
      <summary vsli:raw="Reads an unsigned 16-bit integer from the accessor.">Lee un entero de 16 bits sin signo del descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Número de bytes del descriptor de acceso en el que va a comenzar la lectura.</param>
      <returns vsli:raw="The value that was read.">Valor que se leyó.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">No hay bastantes bytes después de <paramref name="position" /> para leer un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">El descriptor de acceso no admite la lectura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)">
      <summary vsli:raw="Reads an unsigned 32-bit integer from the accessor.">Lee un entero de 32 bits sin signo del descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Número de bytes del descriptor de acceso en el que va a comenzar la lectura.</param>
      <returns vsli:raw="The value that was read.">Valor que se leyó.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">No hay bastantes bytes después de <paramref name="position" /> para leer un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">El descriptor de acceso no admite la lectura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)">
      <summary vsli:raw="Reads an unsigned 64-bit integer from the accessor.">Lee un entero de 64 bits sin signo del descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Número de bytes del descriptor de acceso en el que va a comenzar la lectura.</param>
      <returns vsli:raw="The value that was read.">Valor que se leyó.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">No hay bastantes bytes después de <paramref name="position" /> para leer un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">El descriptor de acceso no admite la lectura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)">
      <summary vsli:raw="Writes a Boolean value into the accessor.">Escribe un valor booleano en el descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Número de bytes del descriptor de acceso en el que va a comenzar la escritura.</param>
      <param name="value" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">No hay bastantes bytes después de <paramref name="position" /> para escribir un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">El descriptor de acceso no admite la escritura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)">
      <summary vsli:raw="Writes a byte value into the accessor.">Escribe un valor de byte en el descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Número de bytes del descriptor de acceso en el que va a comenzar la escritura.</param>
      <param name="value" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">No hay bastantes bytes después de <paramref name="position" /> para escribir un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">El descriptor de acceso no admite la escritura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)">
      <summary vsli:raw="Writes a character into the accessor.">Escribe un carácter en el descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Número de bytes del descriptor de acceso en el que va a comenzar la escritura.</param>
      <param name="value" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">No hay bastantes bytes después de <paramref name="position" /> para escribir un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">El descriptor de acceso no admite la escritura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)">
      <summary vsli:raw="Writes a decimal value into the accessor.">Escribe un valor decimal en el descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Número de bytes del descriptor de acceso en el que va a comenzar la escritura.</param>
      <param name="value" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.  &#xA;  &#xA; -or-  &#xA;  &#xA; The decimal is invalid.">No hay bastantes bytes después de <paramref name="position" /> para escribir un valor.
o bien
El decimal no es válido.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">El descriptor de acceso no admite la escritura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value into the accessor.">Escribe un valor <see langword="Double" /> en el descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Número de bytes del descriptor de acceso en el que va a comenzar la escritura.</param>
      <param name="value" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">No hay bastantes bytes después de <paramref name="position" /> para escribir un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">El descriptor de acceso no admite la escritura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)">
      <summary vsli:raw="Writes a 16-bit integer into the accessor.">Escribe un entero de 16 bits en el descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Número de bytes del descriptor de acceso en el que va a comenzar la escritura.</param>
      <param name="value" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">No hay bastantes bytes después de <paramref name="position" /> para escribir un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">El descriptor de acceso no admite la escritura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)">
      <summary vsli:raw="Writes a 32-bit integer into the accessor.">Escribe un entero de 32 bits en el descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Número de bytes del descriptor de acceso en el que va a comenzar la escritura.</param>
      <param name="value" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">No hay bastantes bytes después de <paramref name="position" /> para escribir un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">El descriptor de acceso no admite la escritura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)">
      <summary vsli:raw="Writes a 64-bit integer into the accessor.">Escribe un entero de 64 bits en el descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Número de bytes del descriptor de acceso en el que va a comenzar la escritura.</param>
      <param name="value" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after position to write a value.">No hay suficientes bytes después de la posición para escribir un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">El descriptor de acceso no admite la escritura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)">
      <summary vsli:raw="Writes an 8-bit integer into the accessor.">Escribe un entero de 8 bits en el descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Número de bytes del descriptor de acceso en el que va a comenzar la escritura.</param>
      <param name="value" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">No hay bastantes bytes después de <paramref name="position" /> para escribir un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">El descriptor de acceso no admite la escritura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; into the accessor.">Escribe un valor <see langword="Single" /> en el descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Número de bytes del descriptor de acceso en el que va a comenzar la escritura.</param>
      <param name="value" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">No hay bastantes bytes después de <paramref name="position" /> para escribir un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">El descriptor de acceso no admite la escritura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)">
      <summary vsli:raw="Writes an unsigned 16-bit integer into the accessor.">Escribe un entero de 16 bits sin signo en el descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Número de bytes del descriptor de acceso en el que va a comenzar la escritura.</param>
      <param name="value" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">No hay bastantes bytes después de <paramref name="position" /> para escribir un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">El descriptor de acceso no admite la escritura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)">
      <summary vsli:raw="Writes an unsigned 32-bit integer into the accessor.">Escribe un entero de 32 bits sin signo en el descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Número de bytes del descriptor de acceso en el que va a comenzar la escritura.</param>
      <param name="value" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">No hay bastantes bytes después de <paramref name="position" /> para escribir un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">El descriptor de acceso no admite la escritura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)">
      <summary vsli:raw="Writes an unsigned 64-bit integer into the accessor.">Escribe un entero de 64 bits sin signo en el descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Número de bytes del descriptor de acceso en el que va a comenzar la escritura.</param>
      <param name="value" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">No hay bastantes bytes después de <paramref name="position" /> para escribir un valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">El descriptor de acceso no admite la escritura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)">
      <summary vsli:raw="Writes a structure into the accessor.">Escribe una estructura en el descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Número de bytes del descriptor de acceso en el que va a comenzar la escritura.</param>
      <param name="structure" vsli:raw="The structure to write.">Estructura que se va a escribir.</param>
      <typeparam name="T" vsli:raw="The type of structure.">Tipo de estructura.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes in the accessor after &lt;paramref name=&quot;position&quot; /&gt; to write a structure of type &lt;paramref name=&quot;T&quot; /&gt;.">No hay suficientes bytes en el descriptor de acceso después de <paramref name="position" /> para escribir una estructura de tipo <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">El descriptor de acceso no admite la escritura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes structures from an array of type &lt;paramref name=&quot;T&quot; /&gt; into the accessor.">Escribe estructuras de una matriz de tipo <paramref name="T" /> en el descriptor de acceso.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Número de bytes del descriptor de acceso en el que va a comenzar la escritura.</param>
      <param name="array" vsli:raw="The array to write into the accessor.">Matriz que se va a escribir en el descriptor de acceso.</param>
      <param name="offset" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; to start writing from.">El índice de <paramref name="array" /> a partir del cual se iniciará la escritura.</param>
      <param name="count" vsli:raw="The number of structures in &lt;paramref name=&quot;array&quot; /&gt; to write.">Número de estructuras de <paramref name="array" /> que se van a escribir.</param>
      <typeparam name="T" vsli:raw="The type of structure.">Tipo de estructura.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes in the accessor after &lt;paramref name=&quot;position&quot; /&gt; to write the number of structures specified by &lt;paramref name=&quot;count&quot; /&gt;.">No hay suficientes bytes en el descriptor de acceso después de <paramref name="position" /> para escribir el número de estructuras especificado por <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="position" /> es menor que cero o mayor que la capacidad del descriptor de acceso.
O bien
<paramref name="offset" /> o <paramref name="count" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">El descriptor de acceso no admite la escritura.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Se ha eliminado el descriptor de acceso.</exception>
    </member>
    <member name="T:System.IO.UnmanagedMemoryStream">
      <summary>Proporciona acceso a los bloques de memoria no administrada desde el código administrado.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.UnmanagedMemoryStream" />.</summary>
      <exception cref="T:System.Security.SecurityException">El usuario no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.IO.UnmanagedMemoryStream" /> utilizando la ubicación y la longitud de memoria especificadas.</summary>
      <param name="pointer">Puntero a una ubicación de memoria no administrada.</param>
      <param name="length">Longitud de la memoria que se va a utilizar.</param>
      <exception cref="T:System.Security.SecurityException">El usuario no dispone del permiso requerido.</exception>
      <exception cref="T:System.ArgumentNullException">El valor <paramref name="pointer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="length" /> es menor que cero.
o bien
El valor de <paramref name="length" /> es suficientemente alto como para causar un desbordamiento.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.IO.UnmanagedMemoryStream" /> utilizando los valores especificados de ubicación, longitud de memoria, cantidad total de memoria y acceso a archivos.</summary>
      <param name="pointer">Puntero a una ubicación de memoria no administrada.</param>
      <param name="length">Longitud de la memoria que se va a utilizar.</param>
      <param name="capacity">Cantidad total de memoria asignada a la secuencia.</param>
      <param name="access">Uno de los valores de <see cref="T:System.IO.FileAccess" />.</param>
      <exception cref="T:System.Security.SecurityException">El usuario no dispone del permiso requerido.</exception>
      <exception cref="T:System.ArgumentNullException">El valor <paramref name="pointer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="length" /> es menor que cero.
O bien
El valor de <paramref name="capacity" /> es menor que cero.
o bien
El valor de <paramref name="length" /> es mayor que el valor de <paramref name="capacity" />.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.UnmanagedMemoryStream" /> en un búfer seguro con un desplazamiento y una longitud especificados.</summary>
      <param name="buffer">Búfer que va a contener la secuencia de memoria no administrada.</param>
      <param name="offset">Posición de byte del búfer en la que va a comenzar la secuencia de memoria no administrada.</param>
      <param name="length">Longitud de la secuencia de memoria no administrada.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.UnmanagedMemoryStream" /> en un búfer seguro con un desplazamiento, una longitud y un acceso a archivo especificados.</summary>
      <param name="buffer">Búfer que va a contener la secuencia de memoria no administrada.</param>
      <param name="offset">Posición de byte del búfer en la que va a comenzar la secuencia de memoria no administrada.</param>
      <param name="length">Longitud de la secuencia de memoria no administrada.</param>
      <param name="access">Modo de acceso a archivos para la secuencia de memoria no administrada.</param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanRead">
      <summary>Obtiene un valor que indica si una secuencia admite operaciones de lectura.</summary>
      <returns>
        <see langword="false" /> si un constructor creó el objeto con un parámetro <paramref name="access" /> que no incluía la lectura de la secuencia y si la secuencia está cerrada; en caso contrario, <see langword="true" />.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanSeek">
      <summary>Obtiene un valor que indica si una secuencia admite búsquedas.</summary>
      <returns>
        <see langword="false" /> si la secuencia está cerrada; en caso contrario, <see langword="true" />.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanWrite">
      <summary>Obtiene un valor que indica si una secuencia admite operaciones de escritura.</summary>
      <returns>
        <see langword="false" /> si el objeto fue creado por un constructor con un valor del parámetro <paramref name="access" /> que admite la escritura o fue creado por un constructor que no tenía ningún parámetro, o si la secuencia está cerrada; en caso contrario, <see langword="true" />.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Capacity">
      <summary>Obtiene la longitud de la secuencia (tamaño) o la cantidad total de memoria asignada a una secuencia (capacidad).</summary>
      <returns>El tamaño o la capacidad de la secuencia.</returns>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.IO.UnmanagedMemoryStream" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Flush">
      <summary>Reemplaza el método <see cref="M:System.IO.Stream.Flush" /> de modo que no se realice ninguna acción.</summary>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>Invalida el método <see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" /> para que la operación se cancele si se especifica, pero no se realiza ninguna otra acción.</summary>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de vaciado asincrónico.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.UnmanagedMemoryStream" /> utilizando un puntero a una ubicación de memoria no administrada.</summary>
      <param name="pointer">Puntero a una ubicación de memoria no administrada.</param>
      <param name="length">Longitud de la memoria que se va a utilizar.</param>
      <param name="capacity">Cantidad total de memoria asignada a la secuencia.</param>
      <param name="access">Uno de los valores de <see cref="T:System.IO.FileAccess" />.</param>
      <exception cref="T:System.Security.SecurityException">El usuario no dispone del permiso requerido.</exception>
      <exception cref="T:System.ArgumentNullException">El valor <paramref name="pointer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="length" /> es menor que cero.
o bien
El valor de <paramref name="capacity" /> es menor que cero.
o bien
El valor de <paramref name="length" /> es suficientemente alto como para causar un desbordamiento.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.UnmanagedMemoryStream" /> en un búfer seguro con un desplazamiento, una longitud y un acceso a archivo especificados.</summary>
      <param name="buffer">Búfer que va a contener la secuencia de memoria no administrada.</param>
      <param name="offset">Posición de byte del búfer en la que va a comenzar la secuencia de memoria no administrada.</param>
      <param name="length">Longitud de la secuencia de memoria no administrada.</param>
      <param name="access">Modo de acceso a archivos para la secuencia de memoria no administrada.</param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Length">
      <summary>Obtiene la longitud de los datos de una secuencia.</summary>
      <returns>La longitud de los datos de la secuencia.</returns>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Position">
      <summary>Obtiene o establece la posición actual en una secuencia.</summary>
      <returns>La posición actual en la secuencia.</returns>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La posición tiene un valor menor que cero, es mayor que <see cref="F:System.Int32.MaxValue" /> o genera un desbordamiento cuando se agrega al puntero actual.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.PositionPointer">
      <summary>Obtiene o establece un puntero de byte a una secuencia basándose en la posición actual en la secuencia.</summary>
      <returns>Un puntero de byte.</returns>
      <exception cref="T:System.IndexOutOfRangeException">La posición actual es mayor que la capacidad de la secuencia.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La posición que se establece no es una posición válida en la secuencia actual.</exception>
      <exception cref="T:System.IO.IOException">El puntero se establece en un valor menor que la posición inicial de la secuencia.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia se inicializó para su uso con <see cref="T:System.Runtime.InteropServices.SafeBuffer" />. La propiedad <see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /> es válida únicamente para secuencias que se inicializan con un puntero de <see cref="T:System.Byte" />.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Lee el número especificado de bytes y los introduce en la matriz especificada.</summary>
      <param name="buffer">Cuando este método devuelve un valor, contiene la matriz de bytes especificada con los valores entre <paramref name="offset" /> y (<paramref name="offset" /> + <paramref name="count" /> - 1) reemplazados por los bytes leídos desde el origen actual. Este parámetro se pasa sin inicializar.</param>
      <param name="offset">Posición de desplazamiento en bytes de base cero de <paramref name="buffer" /> donde se comienza a almacenar los datos leídos de la secuencia actual.</param>
      <param name="count">Número máximo de bytes que se van a leer de la secuencia actual.</param>
      <returns>Número total de bytes leídos en el búfer. Puede ser menor que el número de bytes solicitado si dicho número no está disponible, o puede ser cero (0) si se alcanza el final de la secuencia.</returns>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.NotSupportedException">La memoria subyacente no admite operaciones de lectura.
O bien
La propiedad <see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /> se establece en <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="buffer" /> debe establecerse en <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="offset" /> es menor que cero.
o bien
El parámetro <paramref name="count" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">La longitud de la matriz de búferes menos el parámetro <paramref name="offset" /> es menor que el parámetro <paramref name="count" />.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Span{System.Byte})">
      <summary>Lee todos los bytes de esta secuencia de memoria no administrada en el intervalo de bytes especificado.</summary>
      <param name="destination">Cuando este método finaliza, este intervalo contiene todos los bytes de la secuencia de memoria no administrada.</param>
      <returns>Número total de bytes leídos en el destino.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Lee de manera asincrónica el número especificado de bytes y los introduce en la matriz especificada.</summary>
      <param name="buffer">El búfer en el que se escriben los datos.</param>
      <param name="offset">Posición de desplazamiento en bytes de <paramref name="buffer" /> donde se comienza a escribir los datos del flujo.</param>
      <param name="count">Número máximo de bytes que se pueden leer.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de lectura asincrónica. El valor del parámetro <paramref name="TResult" /> contiene el número total de bytes leídos en el búfer. El valor del resultado puede ser menor que el número de bytes solicitados si el número de bytes disponibles actualmente es menor que el número solicitado o puede ser 0 (cero) si se ha llegado al final de la secuencia.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>Lee de forma asincrónica los bytes de la secuencia de memoria no administrada en la región de memoria.</summary>
      <param name="buffer">Cuando el método asincrónico finaliza, esta región de memoria contiene todos los bytes leídos de la secuencia de memoria no administrada.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de lectura asincrónica y ajusta el número total de bytes leídos en el búfer.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadByte">
      <summary>Lee un byte de una secuencia y hace avanzar la posición dentro de la secuencia en un byte, o devuelve -1 si está al final de la secuencia.</summary>
      <returns>Byte sin signo convertido en un objeto <see cref="T:System.Int32" />, o -1 si está al final de la secuencia.</returns>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.NotSupportedException">La memoria subyacente no admite operaciones de lectura.
o bien
La posición actual está al final de la secuencia.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Establece la posición actual de la secuencia actual en el valor especificado.</summary>
      <param name="offset">Punto, con respecto a <c>origin</c>, a partir del que se va a empezar a buscar.</param>
      <param name="loc">Especifica el comienzo, el final o la posición actual como un punto de referencia para <c>origin</c>, con un valor de tipo <see cref="T:System.IO.SeekOrigin" />.</param>
      <returns>Nueva posición en la secuencia.</returns>
      <exception cref="T:System.IO.IOException">Se realizó un intento de búsqueda antes del principio de la secuencia.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="offset" /> es mayor que el tamaño máximo de la secuencia.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="loc" /> no es válido.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
      <summary>Establece la longitud de una secuencia en un valor especificado.</summary>
      <param name="value">Longitud de la secuencia.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.NotSupportedException">La memoria subyacente no admite operaciones de escritura.
o bien
Se realiza un intento de escritura en la secuencia y el valor de la propiedad <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> es <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor especificado del parámetro <paramref name="value" /> supera la capacidad de la secuencia.
o bien
El valor especificado del parámetro <paramref name="value" /> es negativo.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Escribe un bloque de bytes en la secuencia actual utilizando los datos de un búfer.</summary>
      <param name="buffer">Matriz de bytes de la que se copian bytes a la secuencia actual.</param>
      <param name="offset">Posición de desplazamiento en el búfer donde se comienzan a copiar bytes a la secuencia actual.</param>
      <param name="count">Número de bytes que se van a escribir en la secuencia actual.</param>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.NotSupportedException">La memoria subyacente no admite operaciones de escritura.
o bien
Se realiza un intento de escritura en la secuencia y el valor de la propiedad <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> es <see langword="false" />.
O bien
El valor de <paramref name="count" /> es mayor que la capacidad de la secuencia.
O bien
La posición está al final de la capacidad de la secuencia.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de uno de los parámetros especificados es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">El valor del parámetro <paramref name="offset" /> menos la longitud del parámetro <paramref name="buffer" /> es menor que el valor del parámetro <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="buffer" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>Escribe un bloque de bytes en la secuencia de memoria no administrada actual usando datos del intervalo de bytes proporcionado.</summary>
      <param name="source">Intervalo de bytes desde el que se copian los bytes en la secuencia de memoria no administrada actual.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Escribe de forma asincrónica una secuencia de bytes en la secuencia actual, se hace avanzar la posición actual dentro de la secuencia el número de bytes escritos y controla las solicitudes de cancelación.</summary>
      <param name="buffer">Búfer del que se van a escribir datos.</param>
      <param name="offset">Desplazamiento en bytes de base cero de <paramref name="buffer" /> desde donde se comienzan a copiar los bytes en la secuencia.</param>
      <param name="count">Número máximo de bytes que se pueden escribir.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>Escribe de forma asincrónica un intervalo de bytes en la secuencia actual, avanza la posición actual dentro de la secuencia el número de bytes escritos y controla las solicitudes de cancelación.</summary>
      <param name="buffer">Búfer del que se van a escribir datos.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
      <summary>Escribe un byte en la posición actual de la secuencia de archivo.</summary>
      <param name="value">Valor de byte que se escribe en la secuencia.</param>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.NotSupportedException">La memoria subyacente no admite operaciones de escritura.
o bien
Se realiza un intento de escritura en la secuencia y el valor de la propiedad <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> es <see langword="false" />.
O bien
La posición actual está al final de la capacidad de la secuencia.</exception>
      <exception cref="T:System.IO.IOException">El parámetro <paramref name="value" /> proporcionado hace que la secuencia supere su capacidad máxima.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IDispatchConstantAttribute">
      <summary vsli:raw="Indicates that the default value for the attributed field or parameter is an instance of &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;, where the &lt;see cref=&quot;P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Indica que el valor predeterminado para el parámetro o campo con atributos es una instancia de <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />, donde <see cref="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject" /> es <see langword="null" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.IDispatchConstantAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.IDispatchConstantAttribute" />.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IDispatchConstantAttribute.Value">
      <summary vsli:raw="Gets the &lt;see langword=&quot;IDispatch&quot; /&gt; constant stored in this attribute.">Obtiene la constante <see langword="IDispatch" /> almacenada en este atributo.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;IDispatch&quot; /&gt; constant stored in this attribute. Only &lt;see langword=&quot;null&quot; /&gt; is allowed for an &lt;see langword=&quot;IDispatch&quot; /&gt; constant value.">Constante <see langword="IDispatch" /> almacenada en este atributo. Sólo se permite <see langword="null" /> para un valor constante <see langword="IDispatch" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary vsli:raw="Indicates that the default value for the attributed field or parameter is an instance of &lt;see cref=&quot;T:System.Runtime.InteropServices.UnknownWrapper&quot; /&gt;, where the &lt;see cref=&quot;P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This class cannot be inherited.">Indica que el valor predeterminado para el parámetro o campo con atributos es una instancia de <see cref="T:System.Runtime.InteropServices.UnknownWrapper" />, donde <see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" /> es <see langword="null" />. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.IUnknownConstantAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" />.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary vsli:raw="Gets the &lt;see langword=&quot;IUnknown&quot; /&gt; constant stored in this attribute.">Obtiene la constante <see langword="IUnknown" /> almacenada en este atributo.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;IUnknown&quot; /&gt; constant stored in this attribute. Only &lt;see langword=&quot;null&quot; /&gt; is allowed for an &lt;see langword=&quot;IUnknown&quot; /&gt; constant value.">Constante <see langword="IUnknown" /> almacenada en este atributo. Sólo se permite <see langword="null" /> para un valor constante <see langword="IUnknown" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary vsli:raw="Allows an unmanaged method to call a managed method.">Permite que un método no administrado llame a un método administrado.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary vsli:raw="Encapsulates an array and an offset within the specified array.">Encapsula una matriz y un desplazamiento dentro de la matriz especificada.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; structure.">Inicializa una nueva instancia de la estructura <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</summary>
      <param name="array" vsli:raw="A managed array.">Matriz administrada.</param>
      <param name="offset" vsli:raw="The offset in bytes, of the element to be passed through platform invoke.">Desplazamiento en bytes del elemento que se va a pasar a través de una invocación de plataforma.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The array is larger than 2 gigabytes (GB).">La matriz es mayor de 2 gigabytes (GB).</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the specified object matches the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object.">Indica si el objeto especificado coincide con el objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> actual.</summary>
      <param name="obj" vsli:raw="Object to compare with this instance.">Objeto que se va a comparar con esta instancia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object matches this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto coincide con <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Indicates whether the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object matches the current instance.">Indica si el objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> especificado coincide con la instancia actual.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with this instance.">Un objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> que se va a comparar con esta instancia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object matches the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> especificado coincide con la instancia actual; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary vsli:raw="Returns the managed array referenced by this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt;.">Devuelve la matriz administrada a la que hace referencia este <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</summary>
      <returns vsli:raw="The managed array this instance references.">Matriz administrada a la que hace referencia esta instancia.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary vsli:raw="Returns a hash code for this value type.">Devuelve un código hash para este tipo de valor.</summary>
      <returns vsli:raw="The hash code for this instance.">Código hash de esta instancia.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary vsli:raw="Returns the offset provided when this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; was constructed.">Devuelve el desplazamiento proporcionado cuando se construyó este <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</summary>
      <returns vsli:raw="The offset for this instance.">Desplazamiento para esta instancia.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; objects have the same value.">Determina si dos objetos <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> especificados tienen el mismo valor.</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;b&quot; /&gt; parameter.">Objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> que se va a comparar con el parámetro <paramref name="b" />.</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;a&quot; /&gt; parameter.">Objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> que se va a comparar con el parámetro <paramref name="a" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;a&quot; /&gt; is the same as the value of &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el valor de <paramref name="a" /> es el mismo que el valor de <paramref name="b" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; objects no not have the same value.">Determina si dos objetos <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> especificados tienen valores distintos.</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;b&quot; /&gt; parameter.">Objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> que se va a comparar con el parámetro <paramref name="b" />.</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;a&quot; /&gt; parameter.">Objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> que se va a comparar con el parámetro <paramref name="a" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;a&quot; /&gt; is not the same as the value of &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el valor de <paramref name="a" /> no es igual al valor de <paramref name="b" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary vsli:raw="Specifies whether the type should be marshaled using the Automation marshaler or a custom proxy and stub.">Especifica si el tipo debe serializarse mediante el contador de referencias de Automation o un proxy personalizado y código auxiliar.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.AutomationProxyAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute" />.</summary>
      <param name="val" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class should be marshaled using the Automation Marshaler; &lt;see langword=&quot;false&quot; /&gt; if a proxy stub marshaler should be used.">Es <see langword="true" /> si las referencias de la clase deben calcularse utilizando Automation Marshaler; es <see langword="false" /> si debe utilizarse un contador de referencias de código auxiliar del proxy.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary vsli:raw="Gets a value indicating the type of marshaler to use.">Obtiene un valor que indica el tipo de contador de referencias que se debe utilizar.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class should be marshaled using the Automation Marshaler; &lt;see langword=&quot;false&quot; /&gt; if a proxy stub marshaler should be used.">Es <see langword="true" /> si las referencias de la clase deben calcularse utilizando Automation Marshaler; es <see langword="false" /> si debe utilizarse un contador de referencias de código auxiliar del proxy.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary vsli:raw="Controls whether Unicode characters are converted to the closest matching ANSI characters.">Controla si los caracteres Unicode se convierten en los caracteres ANSI coincidentes más cercanos.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BestFitMappingAttribute&quot; /&gt; class set to the value of the &lt;see cref=&quot;P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping&quot; /&gt; property.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> con el valor de la propiedad <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" />.</summary>
      <param name="BestFitMapping" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that best-fit mapping is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">Es <see langword="true" /> para indicar que la asignación de ajuste perfecto está habilitada; en caso contrario, es <see langword="false" />. De manera predeterminada, es <see langword="true" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary vsli:raw="Gets the best-fit mapping behavior when converting Unicode characters to ANSI characters.">Obtiene el comportamiento de la asignación de ajuste perfecto a la hora de convertir caracteres Unicode en caracteres ANSI.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if best-fit mapping is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">Es <see langword="true" /> si la asignación de ajuste perfecto está habilitada; en caso contrario, es <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI '?' character.">Habilita o deshabilita el inicio de una excepción cuando un carácter Unicode que no se puede asignar se convierte en un carácter ANSI "?".</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary vsli:raw="Marshals data of type &lt;see langword=&quot;VT_BSTR&quot; /&gt; from managed to unmanaged code. This class cannot be inherited.">Calcula las referencias de datos de tipo <see langword="VT_BSTR" /> de código administrado a no administrado. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; object.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> con el objeto <see cref="T:System.Object" /> especificado.</summary>
      <param name="value" vsli:raw="The object to wrap and marshal as &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">Objeto que se va a ajustar y para el que se van a calcular las referencias como <see langword="VT_BSTR" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.String&quot; /&gt; object.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> con el objeto <see cref="T:System.String" /> especificado.</summary>
      <param name="value" vsli:raw="The object to wrap and marshal as &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">Objeto que se va a ajustar y para el que se van a calcular las referencias como <see langword="VT_BSTR" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary vsli:raw="Gets the wrapped &lt;see cref=&quot;T:System.String&quot; /&gt; object to marshal as type &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">Obtiene el objeto <see cref="T:System.String" /> encapsulado cuyas referencias se van a calcular como de tipo <see langword="VT_BSTR" />.</summary>
      <returns vsli:raw="The object that is wrapped by &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt;.">Objeto ajustado por <see cref="T:System.Runtime.InteropServices.BStrWrapper" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary vsli:raw="Specifies the calling convention required to call methods implemented in unmanaged code.">Especifica la convención de llamada necesaria para llamar a métodos implementados en código no administrado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary vsli:raw="The caller cleans the stack. This enables calling functions with &lt;see langword=&quot;varargs&quot; /&gt;, which makes it appropriate to use for methods that accept a variable number of parameters, such as &lt;see langword=&quot;Printf&quot; /&gt;.">El llamador limpia la pila. Esto permite llamar a funciones con <see langword="varargs" />, que resulta apropiado para métodos que aceptan un número variable de parámetros, como <see langword="Printf" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary vsli:raw="This calling convention is not supported.">No se admite esta convención de llamada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary vsli:raw="The callee cleans the stack.">El destinatario de la llamada limpia la pila. Esta es la convención predeterminada para la llamada a funciones no administradas con invocación de plataforma.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary vsli:raw="The first parameter is the &lt;see langword=&quot;this&quot; /&gt; pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.">El primer parámetro es el puntero <see langword="this" /> y se almacena en ECX de registro. Los demás parámetros se insertan en la pila. Esta convención de llamada se utiliza para llamar a métodos en clases exportadas desde un archivo DLL no administrado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary vsli:raw="This member is not actually a calling convention, but instead uses the default platform calling convention.">Este miembro no es una convención de llamada en realidad, sino que utiliza la convención de llamada de plataforma predeterminada. Por ejemplo, en Windows la convención de llamada predeterminada es <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" /> y en Windows CE.NET es <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary vsli:raw="Indicates the type of class interface to be generated for a class exposed to COM, if an interface is generated at all.">Indica el tipo de interfaz de clase que se generará para una clase expuesta a COM si no se genera una interfaz.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; enumeration value.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> con el valor de enumeración <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> especificado.</summary>
      <param name="classInterfaceType" vsli:raw="Describes the type of interface that is generated for a class.">Describe el tipo de interfaz que se genera para una clase.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; enumeration member.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> con el miembro de enumeración <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> especificado.</summary>
      <param name="classInterfaceType" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; values that describes the type of interface that is generated for a class.">Uno de los valores de <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> que describe el tipo de interfaz que se genera para una clase.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; value that describes which type of interface should be generated for the class.">Obtiene el valor de <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> que describe qué tipo de interfaz debe generarse para la clase.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; value that describes which type of interface should be generated for the class.">Valor de <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> que describe qué tipo de interfaz debe generarse para la clase.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary vsli:raw="Identifies the type of class interface that is generated for a class.">Identifica el tipo de interfaz de clase que se genera para una clase.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary vsli:raw="&lt;para&gt;Indicates that the class only supports late binding for COM clients. A &lt;see langword=&quot;dispinterface&quot; /&gt; for the class is automatically exposed to COM clients on request. The type library produced by Tlbexp.exe (Type Library Exporter) does not contain type information for the &lt;see langword=&quot;dispinterface&quot; /&gt; in order to prevent clients from caching the DISPIDs of the interface. The &lt;see langword=&quot;dispinterface&quot; /&gt; does not exhibit the versioning problems described in &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; because clients can only late-bind to the interface.&lt;/para&gt;&lt;para&gt;This is the default setting for &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;.&lt;/para&gt;">Indica que la clase sólo admite enlaces en tiempo de ejecución para los clientes COM. Si se solicita, se expone automáticamente a los clientes COM una interfaz <see langword="dispinterface" /> para la clase. La biblioteca de tipos creada por Tlbexp.exe (exportador de la biblioteca de tipos) no contiene información de tipos para la interfaz <see langword="dispinterface" /> con el fin de impedir que los clientes almacenen en memoria caché los DISPID de la interfaz. La interfaz <see langword="dispinterface" /> no presenta los problemas de control de versiones descritos en <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />, ya que los clientes solo se pueden enlazar a la interfaz en tiempo de ejecución.
Esta es la configuración predeterminada de <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary vsli:raw="Indicates that a dual class interface is automatically generated for the class and exposed to COM. Type information is produced for the class interface and published in the type library. Using &lt;see langword=&quot;AutoDual&quot; /&gt; is strongly discouraged because of the versioning limitations described in &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;.">Indica que se genera una interfaz de clase dual para la clase y se expone a COM automáticamente. Se genera la información de tipos para la interfaz de clase y se publica en la biblioteca de tipos. Se desaconseja el uso de <see langword="AutoDual" /> debido a las limitaciones de las versiones descritas en <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary vsli:raw="&lt;para&gt;Indicates that no class interface is generated for the class. If no interfaces are implemented explicitly, the class can only provide late-bound access through the &lt;see langword=&quot;IDispatch&quot; /&gt; interface. This is the recommended setting for &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;. Using &lt;see langword=&quot;ClassInterfaceType.None&quot; /&gt; is the only way to expose functionality through interfaces implemented explicitly by the class.&lt;/para&gt;&lt;para&gt;Tlbexp.exe (Type Library Exporter) exposes the first public, COM-visible interface implemented by the class as the default interface of the coclass. In .NET Framework 2.0 and later versions, you can specify the default interface exposed to COM by using the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute&quot; /&gt; attribute. If the class implements no interfaces, the first public, COM-visible interface implemented by a base class becomes the default interface (starting with the most recently derived base class and working backward). Tlbexp.exe exposes &lt;see langword=&quot;_Object&quot; /&gt; as the default interface if neither the class nor its base classes implement interfaces.&lt;/para&gt;">Indica que no se genera ninguna interfaz de clase para la clase. Si no se implementan interfaces explícitamente, la clase solo proporcionará acceso de enlace en tiempo de ejecución a través de la interfaz <see langword="IDispatch" />. Éste es el valor recomendado para <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />. La utilización de <see langword="ClassInterfaceType.None" /> es la única manera de exponer funcionalidad a través de interfaces implementadas explícitamente por la clase.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary vsli:raw="Specifies the class identifier of a coclass imported from a type library.">Especifica el identificador de clase de una coclase importada de una biblioteca de tipos.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CoClassAttribute&quot; /&gt; with the class identifier of the original coclass.">Inicializa una nueva instancia de <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> con el identificador de clase de la coclase original.</summary>
      <param name="coClass" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class identifier of the original coclass.">Un objeto <see cref="T:System.Type" /> que contiene el identificador de clase de la coclase original.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary vsli:raw="Gets the class identifier of the original coclass.">Obtiene el identificador de clase de la coclase original.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the class identifier of the original coclass.">Un objeto <see cref="T:System.Type" /> que contiene el identificador de clase de la coclase original.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary vsli:raw="Indicates the COM alias for a parameter or field type.">Indica el alias COM de un parámetro o tipo de campo.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAliasNameAttribute&quot; /&gt; class with the alias for the attributed field or parameter.">Inicializa una instancia nueva de la clase <see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute" /> con el alias del campo o parámetro al que se aplicó el atributo.</summary>
      <param name="alias" vsli:raw="The alias for the field or parameter as found in the type library when it was imported.">Alias del campo o parámetro tal y como se encontraba en la biblioteca de tipos cuando se importó.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary vsli:raw="Gets the alias for the field or parameter as found in the type library when it was imported.">Obtiene el alias del campo o parámetro tal y como se encontraba en la biblioteca de tipos cuando se importó.</summary>
      <returns vsli:raw="The alias for the field or parameter as found in the type library when it was imported.">Alias del campo o parámetro tal y como se encontraba en la biblioteca de tipos cuando se importó.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary vsli:raw="Permits late-bound registration of an event handler.">Permite el registro enlazado en tiempo de ejecución de un controlador de eventos.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; class by using the specified type and a name of the event on the type.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> utilizando el tipo especificado y un nombre del evento en el tipo.</summary>
      <param name="type" vsli:raw="The type of object.">Tipo del objeto.</param>
      <param name="eventName" vsli:raw="The name of an event on &lt;paramref name=&quot;type&quot; /&gt;.">El nombre de un evento en <paramref name="type" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Attaches an event handler to a COM object.">Asocia un controlador de eventos a un objeto COM.</summary>
      <param name="target" vsli:raw="The target object that the event delegate should bind to.">El objeto de destino con que el delegado de eventos debería enlazar.</param>
      <param name="handler" vsli:raw="The event delegate.">El delegado de eventos.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary vsli:raw="Gets the attributes for this event.">Obtiene los atributos de este evento.</summary>
      <returns vsli:raw="The read-only attributes for this event.">Atributos de sólo lectura de este evento.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary vsli:raw="Gets the class that declares this member.">Obtiene la clase que declara este miembro.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the class that declares this member.">Objeto <see cref="T:System.Type" /> de la clase que declara este miembro.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary vsli:raw="Gets the method that was used to add an event handler delegate to the event source.">Obtiene el método que se usó para agregar un delegado del controlador de eventos al origen de eventos.</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para devolver los métodos no públicos; de lo contrario, <see langword="false" />.</param>
      <returns vsli:raw="The method that was used to add an event handler delegate to the event source.">Método que se usó para agregar un delegado del controlador de eventos al origen de eventos.</returns>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> es <see langword="true" /> y el método usado para agregar un delegado de controlador de eventos no es público, pero el llamador no tiene permiso para reflejar métodos que no sean públicos.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets an array that contains all the custom attributes that are applied to this member.">Cuando se invalida en una clase derivada, obtiene una matriz que contiene todos los atributos personalizados que se aplican a este miembro.</summary>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para buscar la cadena de herencia de este miembro para encontrar los atributos; en caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="An array that contains all the custom attributes, or an array that has no elements if no attributes were defined.">Matriz que contiene todos los atributos personalizados, o matriz sin elementos si no se definieron atributos.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.">Este miembro pertenece a un tipo que se carga en el contexto de solo reflexión. Vea Cómo: Cargar ensamblados en el contexto de solo reflexión.</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="A custom attribute type cannot be loaded.">No se puede cargar un tipo de atributo personalizado.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets an array that contains all the custom attributes of the specified type that are applied to this member.">Cuando se invalida en una clase derivada, obtiene una matriz que contiene todos los atributos personalizados del tipo especificado que se aplican a este miembro.</summary>
      <param name="attributeType" vsli:raw="The attribute type to search for. Only attributes that are assignable to this type can be returned.">El tipo de atributo que va a buscarse. Solo se devuelven los atributos que se pueden asignar a este tipo.</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para buscar la cadena de herencia de este miembro para encontrar los atributos; en caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="An array that contains all the custom attributes of the specified type, or an array that has no elements if no attributes were defined.">Matriz que contiene todos los atributos personalizados del tipo especificado o una matriz sin elementos si no se definieron atributos.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context">Este miembro pertenece a un tipo que se carga en el contexto de solo reflexión. Vea Cómo: Cargar ensamblados en el contexto de solo reflexión</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="A custom attribute type cannot be loaded.">No se puede cargar un tipo de atributo personalizado.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributesData">
      <summary vsli:raw="Returns a list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects for the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt;.">Proporciona una lista de objetos <see cref="T:System.Reflection.CustomAttributeData" /> para el elemento <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> actual.</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt;.">Lista genérica de objetos <see cref="T:System.Reflection.CustomAttributeData" /> que representan datos sobre los atributos que se aplicaron al elemento <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> actual.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetOtherMethods(System.Boolean)">
      <summary vsli:raw="Returns the public or non-public methods that have been associated with an event in metadata.">Devuelve los métodos públicos o no públicos que se han asociado a un evento en los metadatos.</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para incluir métodos no públicos; en caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="An array representing the methods that have been associated with the event in metadata. If there are no such methods, an empty array is returned.">Matriz que representa los métodos que se han asociado al evento en los metadatos. Si no existe ningún método de ese tipo, se devolverá una matriz vacía.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, returns the method that was called when the event was raised.">Cuando se invalida en una clase derivada, devuelve el método al que se llamó cuando se provocó el evento.</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para devolver los métodos no públicos; de lo contrario, <see langword="false" />.</param>
      <returns vsli:raw="The object that was called when the event was raised.">Objeto al que se llamó cuando se provocó el evento.</returns>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> es <see langword="true" /> y el método usado para agregar un delegado de controlador de eventos no es público, pero el llamador no tiene permiso para reflejar métodos que no sean públicos.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, retrieves the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object for removing a method of the event.">Cuando se reemplaza en una clase derivada, recupera el objeto <see cref="T:System.Reflection.MethodInfo" /> para quitar un método del evento.</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para devolver los métodos no públicos; de lo contrario, <see langword="false" />.</param>
      <returns vsli:raw="The method that was used to remove an event handler delegate from the event source.">El método utilizado para quitar un delegado de controlador de eventos del origen de eventos.</returns>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> es <see langword="true" /> y el método usado para agregar un delegado de controlador de eventos no es público, pero el llamador no tiene permiso para reflejar métodos que no sean públicos.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether one or more instances of the specified attribute are applied to this member.">Indica si a este miembro se aplica una o más instancias del atributo especificado.</summary>
      <param name="attributeType" vsli:raw="The attribute type to search for.">El tipo de atributo que va a buscarse.</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para buscar la cadena de herencia de este miembro para encontrar los atributos; en caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified attribute has been applied to this member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el atributo especificado se ha aplicado a este miembro; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.MetadataToken">
      <summary vsli:raw="Gets the metadata token associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">Obtiene el token de metadatos asociado al objeto <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> actual.</summary>
      <returns vsli:raw="A 32-bit Integer that represents the metadata token.">Entero de 32 bits que representa el símbolo (token) de metadatos.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Module">
      <summary vsli:raw="Gets the module associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">Obtiene el modulo asociado al objeto <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> actual.</summary>
      <returns vsli:raw="The module associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">Módulo asociado al objeto actual <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> .</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary vsli:raw="Gets the name of the current member.">Obtiene el nombre del miembro actual.</summary>
      <returns vsli:raw="The name of this member.">Nombre de este miembro.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary vsli:raw="Gets the class object that was used to initialize this instance.">Obtiene el objeto de clase utilizado para inicializar esta instancia.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to initialize the current object.">Objeto <see cref="T:System.Type" /> utilizado para inicializar el objeto actual.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Detaches an event handler from a COM object.">Desasocia un controlador de eventos de un objeto COM.</summary>
      <param name="target" vsli:raw="The target object that the event delegate is bound to.">Objeto de destino al que está enlazado el delegado de eventos.</param>
      <param name="handler" vsli:raw="The event delegate.">El delegado de eventos.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The event does not have a public &lt;see langword=&quot;remove&quot; /&gt; accessor.">El evento no posee un descriptor de acceso <see langword="remove" /> público.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The handler that was passed in cannot be used.">No se puede usar el controlador que se pasó.</exception>
      <exception cref="T:System.Reflection.TargetException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt; and the event is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; is not declared on the target.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch &lt;see cref=&quot;T:System.Exception&quot; /&gt; instead.">En .NET para aplicaciones de la Tienda Windows o la Biblioteca de clases portable, capture <see cref="T:System.Exception" /> en su lugar.  
  

            
  
 El parámetro <paramref name="target" /> es <see langword="null" /> y el evento no es estático.  
  
o bien 
<see cref="T:System.Reflection.EventInfo" /> no se ha declarado en el destino.</exception>
      <exception cref="T:System.MethodAccessException" vsli:raw="The caller does not have access permission to the member.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch the base class exception, &lt;see cref=&quot;T:System.MemberAccessException&quot; /&gt;, instead.">En .NET para aplicaciones de la Tienda Windows o la Biblioteca de clases portable, capture en su lugar la excepción de clase base, <see cref="T:System.MemberAccessException" />.  
  

            
  
 El autor de la llamada no tiene permiso para acceder al miembro.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary vsli:raw="Indicates to a COM client that all classes in the current version of an assembly are compatible with classes in an earlier version of the assembly.">Indica a un cliente COM que todas las clases de la versión actual de un ensamblado son compatibles con las clases de una versión anterior del ensamblado.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComCompatibleVersionAttribute&quot; /&gt; class with the major version, minor version, build, and revision numbers of the assembly.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute" /> con los números especificados de versión principal, versión secundaria, versión de compilación y revisión del ensamblado.</summary>
      <param name="major" vsli:raw="The major version number of the assembly.">Número de versión principal del ensamblado.</param>
      <param name="minor" vsli:raw="The minor version number of the assembly.">Número de versión secundaria del ensamblado.</param>
      <param name="build" vsli:raw="The build number of the assembly.">Número de compilación del ensamblado.</param>
      <param name="revision" vsli:raw="The revision number of the assembly.">Número de revisión del ensamblado.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary vsli:raw="Gets the build number of the assembly.">Obtiene el número de compilación del ensamblado.</summary>
      <returns vsli:raw="The build number of the assembly.">Número de compilación del ensamblado.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the assembly.">Obtiene el número de versión principal del ensamblado.</summary>
      <returns vsli:raw="The major version number of the assembly.">Número de versión principal del ensamblado.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the assembly.">Obtiene el número de versión secundaria del ensamblado.</summary>
      <returns vsli:raw="The minor version number of the assembly.">Número de versión secundaria del ensamblado.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary vsli:raw="Gets the revision number of the assembly.">Obtiene el número de revisión del ensamblado.</summary>
      <returns vsli:raw="The revision number of the assembly.">Número de revisión del ensamblado.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary vsli:raw="Indicates that information was lost about a class or interface when it was imported from a type library to an assembly.">Indica que se perdió información de una clase o interfaz al importarla desde una biblioteca de tipos a un ensamblado.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ComConversionLossAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see langword="ComConversionLossAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary vsli:raw="Specifies a default interface to expose to COM. This class cannot be inherited.">Especifica una interfaz predeterminada que se va a exponer a COM. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Type&quot; /&gt; object as the default interface exposed to COM.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> con el objeto <see cref="T:System.Type" /> especificado como la interfaz predeterminada expuesta a COM.</summary>
      <param name="defaultInterface" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; value indicating the default interface to expose to COM.">Valor <see cref="T:System.Type" /> que indica la interfaz predeterminada que se va a exponer a COM.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the default interface to expose to COM.">Obtiene el objeto <see cref="T:System.Type" /> que especifica la interfaz predeterminada que se va a exponer a COM.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the default interface to expose to COM.">Objeto <see cref="T:System.Type" /> que especifica la interfaz predeterminada que se va a exponer a COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary vsli:raw="Identifies the source interface and the class that implements the methods of the event interface that is generated when a coclass is imported from a COM type library.">Identifica la interfaz de origen y la clase que implementa los métodos de la interfaz de evento que se genera cuando se importa una coclase de una biblioteca de tipos COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComEventInterfaceAttribute&quot; /&gt; class with the source interface and event provider class.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> con la interfaz de origen y la clase proveedora de eventos.</summary>
      <param name="SourceInterface" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the original source interface from the type library. COM uses this interface to call back to the managed class.">
        <see cref="T:System.Type" /> que contiene la interfaz de origen inicial de la biblioteca de tipos. COM utiliza esta interfaz para volver a llamar a la clase administrada.</param>
      <param name="EventProvider" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class that implements the methods of the event interface.">
        <see cref="T:System.Type" /> que contiene la clase que implementa los métodos de la interfaz de eventos.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary vsli:raw="Gets the class that implements the methods of the event interface.">Obtiene la clase que implementa los métodos de la interfaz de eventos.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class that implements the methods of the event interface.">
        <see cref="T:System.Type" /> que contiene la clase que implementa los métodos de la interfaz de eventos.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary vsli:raw="Gets the original source interface from the type library.">Obtiene la interfaz de origen inicial de la biblioteca de tipos.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the source interface.">
        <see cref="T:System.Type" /> que contiene la interfaz de origen.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary vsli:raw="Provides methods that enable .NET delegates that handle events to be added and removed from COM objects.">Proporciona métodos que permiten agregar y eliminar los delegados de .NET Framework que controlan los eventos de los objetos COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary vsli:raw="Adds a delegate to the invocation list of events originating from a COM object.">Agrega un delegado a la lista de invocación de eventos que se originan en un objeto COM.</summary>
      <param name="rcw" vsli:raw="The COM object that triggers the events the caller would like to respond to.">Objeto COM que desencadena los eventos al que al llamador le gustaría responder.</param>
      <param name="iid" vsli:raw="The identifier of the source interface used by the COM object to trigger events.">Identificador de la interfaz de origen utilizado por el objeto COM para desencadenar eventos.</param>
      <param name="dispid" vsli:raw="The dispatch identifier of the method on the source interface.">Identificador de envío del método en la interfaz de origen.</param>
      <param name="d" vsli:raw="The delegate to invoke when the COM event is fired.">Delegado al que se va a invocar cuando se active el evento COM.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary vsli:raw="Removes a delegate from the invocation list of events originating from a COM object.">Quita un delegado de la lista de invocación de eventos que se originan en un objeto COM.</summary>
      <param name="rcw" vsli:raw="The COM object the delegate is attached to.">Objeto COM al que está adjunto el delegado.</param>
      <param name="iid" vsli:raw="The identifier of the source interface used by the COM object to trigger events.">Identificador de la interfaz de origen utilizado por el objeto COM para desencadenar eventos.</param>
      <param name="dispid" vsli:raw="The dispatch identifier of the method on the source interface.">Identificador de envío del método en la interfaz de origen.</param>
      <param name="d" vsli:raw="The delegate to remove from the invocation list.">Delegado que se va a quitar de la lista de invocación.</param>
      <returns vsli:raw="The delegate that was removed from the invocation list.">Delegado que se quitó de la lista de invocación.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary vsli:raw="The exception that is thrown when an unrecognized HRESULT is returned from a COM method call.">Excepción que se produce cuando una llamada al método COM devuelve un resultado HRESULT desconocido.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with default values.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.COMException" /> con valores predeterminados.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class from serialization data.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.COMException" /> a partir de los datos de serialización.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that holds the serialized object data.">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene los datos del objeto serializados.</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that supplies the contextual information about the source or destination.">Objeto <see cref="T:System.Runtime.Serialization.StreamingContext" /> que proporciona la información contextual sobre el origen o el destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified message.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.COMException" /> con el mensaje especificado.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Mensaje que indica el motivo de la excepción.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.COMException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="inner" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified message and error code.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.COMException" /> con un mensaje y un código de error especificados.</summary>
      <param name="message" vsli:raw="The message that indicates the reason the exception occurred.">El mensaje que indica la causa de que se haya producido la excepción.</param>
      <param name="errorCode" vsli:raw="The error code (HRESULT) value associated with this exception.">Valor del código de error (HRESULT) asociado a esta excepción.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary vsli:raw="Converts the contents of the exception to a string.">Convierte el contenido de la excepción en una cadena.</summary>
      <returns vsli:raw="A string containing the &lt;see cref=&quot;P:System.Exception.HResult&quot; /&gt;, &lt;see cref=&quot;P:System.Exception.Message&quot; /&gt;, &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt;, and &lt;see cref=&quot;P:System.Exception.StackTrace&quot; /&gt; properties of the exception.">Cadena que contiene las propiedades de la excepción <see cref="P:System.Exception.HResult" />, <see cref="P:System.Exception.Message" />, <see cref="P:System.Exception.InnerException" />, y <see cref="P:System.Exception.StackTrace" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary vsli:raw="Indicates that the attributed type was previously defined in COM.">Indica que el tipo con atributos estaba previamente definido en COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComImportAttribute&quot; /&gt;.">Inicializa una nueva instancia de <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary vsli:raw="Identifies how to expose an interface to COM.">Indica cómo exponer una interfaz a COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary vsli:raw="Indicates that the interface is exposed to COM as a dual interface, which enables both early and late binding. &lt;see cref=&quot;F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual&quot; /&gt; is the default value.">Indica que una interfaz se expone a COM como una interfaz dual, que permite tanto el enlace anticipado como el enlace en tiempo de ejecución. El valor predeterminado es <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary vsli:raw="Indicates that an interface is exposed to COM as a dispinterface, which enables late binding only.">Indica que una interfaz se expone a COM como una interfaz dinpinterface, que permite solo el enlace en tiempo de ejecución.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary vsli:raw="Indicates that an interface is exposed to COM as a Windows Runtime interface.">Indica que una interfaz se expone a COM como una interfaz de Windows en tiempo de ejecución.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary vsli:raw="Indicates that an interface is exposed to COM as an interface that is derived from IUnknown, which enables only early binding.">Indica que una interfaz se expone a COM como una interfaz que deriva de IUnknown, lo que permite solo el enlace anticipado.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary vsli:raw="Describes the type of a COM member.">Describe el tipo de un miembro COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary vsli:raw="The member is a normal method.">El miembro es un método normal.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary vsli:raw="The member gets properties.">El miembro obtiene propiedades.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary vsli:raw="The member sets properties.">El miembro establece propiedades.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary vsli:raw="Specifies the method to call when you register an assembly for use from COM; this enables the execution of user-written code during the registration process.">Especifica el método al que se debe llamar cuando se registre un ensamblado para utilizarlo desde COM; de esta manera, se permite la ejecución de código escrito por el usuario durante el proceso de registro.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComRegisterFunctionAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary vsli:raw="Identifies a list of interfaces that are exposed as COM event sources for the attributed class.">Identifica una lista de interfaces que se exponen como orígenes de eventos COM para la clase con atributos.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the name of the event source interface.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> con el nombre de la interfaz de origen de los eventos.</summary>
      <param name="sourceInterfaces" vsli:raw="A null-delimited list of fully qualified event source interface names.">Lista delimitada por valores null de nombres completos de interfaces de origen de eventos.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the type to use as a source interface.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> con el tipo que se va a utilizar como interfaz de origen.</summary>
      <param name="sourceInterface" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source interface.">
        <see cref="T:System.Type" /> de la interfaz de origen.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> con los tipos que se van a utilizar como interfaces de origen.</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">
        <see cref="T:System.Type" /> de la interfaz de origen predeterminada.</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">
        <see cref="T:System.Type" /> de una interfaz de origen.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">Inicializa una nueva instancia de la clase <see langword="ComSourceInterfacesAttribute" /> con los tipos que se van a utilizar como interfaces de origen.</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">
        <see cref="T:System.Type" /> de la interfaz de origen predeterminada.</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">
        <see cref="T:System.Type" /> de una interfaz de origen.</param>
      <param name="sourceInterface3" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">
        <see cref="T:System.Type" /> de una interfaz de origen.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> con los tipos que se van a utilizar como interfaces de origen.</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">
        <see cref="T:System.Type" /> de la interfaz de origen predeterminada.</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">
        <see cref="T:System.Type" /> de una interfaz de origen.</param>
      <param name="sourceInterface3" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">
        <see cref="T:System.Type" /> de una interfaz de origen.</param>
      <param name="sourceInterface4" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">
        <see cref="T:System.Type" /> de una interfaz de origen.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary vsli:raw="Gets the fully qualified name of the event source interface.">Obtiene el nombre completo de la interfaz de origen de los eventos.</summary>
      <returns vsli:raw="The fully qualified name of the event source interface.">Nombre completo de la interfaz de origen de los eventos.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary vsli:raw="Specifies the requested behavior when setting up an advise sink or a caching connection with an object.">Especifica el comportamiento solicitado al configurar un receptor con notificación o una conexión de almacenamiento en caché con un objeto.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary vsli:raw="For data advisory connections, assures accessibility to data.">Asegura la accesibilidad a los datos en las conexiones de consulta.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary vsli:raw="For data advisory connections (&lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt;), this flag requests the data object not to send data when it calls &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;.">Por lo que respecta a los datos de las conexiones de consulta (<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> o <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />), este marcador solicita del objeto de datos que no envíe datos al llamar a <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary vsli:raw="Requests that the object make only one change notification or cache update before deleting the connection.">Solicita que el objeto sólo haga una notificación de cambios o una actualización de la caché antes de eliminar la conexión.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary vsli:raw="Requests that the object not wait for the data or view to change before making an initial call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; (for data or view advisory connections) or updating the cache (for cache connections).">Solicita que el objeto no espere a que los datos o la vista cambien antes de realizar la llamada inicial a <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> (en las conexiones de consultas de vistas o datos) ni a que se actualice la caché (en las conexiones de caché).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary vsli:raw="This value is used by DLL object applications and object handlers that perform the drawing of their objects.">Las aplicaciones del objeto DLL y los controladores de objetos que dibujan sus objetos utilizan este valor.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary vsli:raw="Synonym for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN&quot; /&gt;, which is used more often.">Sinónimo de <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN" />, que se utiliza más a menudo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary vsli:raw="For cache connections, this flag updates the cached representation only when the object containing the cache is saved.">En las conexiones de caché, este marcador actualiza la representación almacenada en la memoria caché, pero sólo cuando se guarda el objeto que contiene la caché.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary vsli:raw="Stores the parameters that are used during a moniker binding operation.">Almacena los parámetros que se usan durante una operación de enlace de moniker.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary vsli:raw="Specifies the size, in bytes, of the &lt;see langword=&quot;BIND_OPTS&quot; /&gt; structure.">Especifica el tamaño en bytes de la estructura <see langword="BIND_OPTS" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary vsli:raw="Indicates the amount of time (clock time in milliseconds, as returned by the &lt;see langword=&quot;GetTickCount&quot; /&gt; function) that the caller specified to complete the binding operation.">Indica la cantidad de tiempo (tiempo de reloj en milisegundos, tal y como lo devuelve la función <see langword="GetTickCount" />) que el llamador especificó para completar la operación de enlace.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary vsli:raw="Controls aspects of moniker binding operations.">Controla algunos aspectos de las operaciones de enlace de moniker.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary vsli:raw="Represents flags that should be used when opening the file that contains the object identified by the moniker.">Representa los marcadores que deben utilizarse al abrir el archivo que contiene el objeto identificado por el moniker.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary vsli:raw="Contains a pointer to a bound-to &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure, &lt;see cref=&quot;T:System.Runtime.InteropServices.VARDESC&quot; /&gt; structure, or an &lt;see langword=&quot;ITypeComp&quot; /&gt; interface.">Contiene un puntero a una estructura <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> o <see cref="T:System.Runtime.InteropServices.VARDESC" />, a las que está enlazado, o a una interfaz <see langword="ITypeComp" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary vsli:raw="Represents a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure.">Representa un puntero a una estructura <see cref="T:System.Runtime.InteropServices.FUNCDESC" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary vsli:raw="Represents a pointer to an &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ITypeComp&quot; /&gt; interface.">Representa un puntero a una interfaz <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary vsli:raw="Represents a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.VARDESC&quot; /&gt; structure.">Representa un puntero a una estructura <see cref="T:System.Runtime.InteropServices.VARDESC" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary vsli:raw="Identifies the calling convention used by a method described in a METHODDATA structure.">Identifica la convención de llamada usada por un método descrito en una estructura METHODDATA.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary vsli:raw="Indicates that the C declaration (CDECL) calling convention is used for a method.">Indica que la convención de llamada de la declaración C (CDECL) se usa para un método.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary vsli:raw="Indicates that the Macintosh Pascal (MACPASCAL) calling convention is used for a method.">Indica que la convención de llamada de Macintosh Pascal (MACPASCAL) se usa para un método.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary vsli:raw="Indicates the end of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.CALLCONV&quot; /&gt; enumeration.">Indica el final de la enumeración <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" /> .</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary vsli:raw="Indicates that the Macintosh Programmers' Workbench (MPW) CDECL calling convention is used for a method.">Indica que la convención de llamada CDECL de Macintosh Programmers' Workbench (MPW) se usa para un método.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary vsli:raw="Indicates that the Macintosh Programmers' Workbench (MPW) PASCAL calling convention is used for a method.">Indica que la convención de llamada PASCAL de Macintosh Programmers' Workbench (MPW) se usa para un método.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary vsli:raw="Indicates that the MSC Pascal (MSCPASCAL) calling convention is used for a method.">Indica que la convención de llamada de MSC Pascal (MSCPASCAL) se usa para un método.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary vsli:raw="Indicates that the Pascal calling convention is used for a method.">Indica que la convención de llamada de Pascal se usa para un método.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary vsli:raw="This value is reserved for future use.">Este valor está reservado para uso futuro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary vsli:raw="Indicates that the standard calling convention (STDCALL) is used for a method.">Indica que la convención de llamada estándar (STDCALL) se usa para un método.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary vsli:raw="Indicates that the standard SYSCALL calling convention is used for a method.">Indica que la convención de llamada SYSCALL se usa para un método.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary vsli:raw="Describes a connection that exists to a given connection point.">Describe una conexión existente con un punto de conexión determinado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary vsli:raw="Represents a connection token that is returned from a call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt;.">Representa un símbolo (token) de conexión que se devuelve desde una llamada a <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary vsli:raw="Represents a pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface on a connected advisory sink. The caller must call &lt;see langword=&quot;IUnknown::Release&quot; /&gt; on this pointer when the &lt;see langword=&quot;CONNECTDATA&quot; /&gt; structure is no longer needed.">Representa un puntero a la interfaz <see langword="IUnknown" /> en un receptor de consulta conectado. El llamador debe llamar a <see langword="IUnknown::Release" /> en este puntero cuando la estructura <see langword="CONNECTDATA" /> deja de ser necesaria.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary vsli:raw="Specifies the direction of the data flow in the &lt;paramref name=&quot;dwDirection&quot; /&gt; parameter of the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; method. This determines the formats that the resulting enumerator can enumerate.">Especifica la dirección del flujo de datos del parámetro <paramref name="dwDirection" /> del método <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" />. Esto último determina los formatos que el enumerador resultante puede utilizar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary vsli:raw="Requests that &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; supply an enumerator for the formats that can be specified in &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;.">Solicita que el método <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> proporcione un enumerador para los formatos que pueden especificarse en el método <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary vsli:raw="Requests that &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; supply an enumerator for the formats that can be specified in &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;.">Solicita que el método <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> proporcione un enumerador para los formatos que pueden especificarse en el método <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary vsli:raw="Identifies the type description being bound to.">Identifica la descripción del tipo a la que se realiza el enlace.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary vsli:raw="Indicates that a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure was returned.">Indica que se devolvió una estructura <see cref="T:System.Runtime.InteropServices.FUNCDESC" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary vsli:raw="Indicates that an &lt;see langword=&quot;IMPLICITAPPOBJ&quot; /&gt; was returned.">Indica que se devolvió un <see langword="IMPLICITAPPOBJ" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary vsli:raw="Indicates an end-of-enumeration marker.">Indica un marcador de fin de enumeración.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary vsli:raw="Indicates that no match was found.">Indica que no se encontró ninguna coincidencia.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary vsli:raw="Indicates that a &lt;see langword=&quot;TYPECOMP&quot; /&gt; was returned.">Indica que se devolvió un objeto <see langword="TYPECOMP" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary vsli:raw="Indicates that a &lt;see langword=&quot;VARDESC&quot; /&gt; was returned.">Indica que se devolvió un objeto <see langword="VARDESC" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary vsli:raw="Contains the arguments passed to a method or property by &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">Contiene los argumentos que se pasaron a un método o una propiedad mediante <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary vsli:raw="Represents the count of arguments.">Representa el recuento de argumentos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary vsli:raw="Represents the count of named arguments.">Representa el recuento de argumentos con nombre.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary vsli:raw="Represents the dispatch IDs of named arguments.">Representa los identificadores de envío de argumentos con nombre.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary vsli:raw="Represents a reference to the array of arguments.">Representa una referencia a la matriz de argumentos.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary vsli:raw="Specifies the desired data or view aspect of the object when drawing or getting data.">Especifica el aspecto deseado de la vista o los datos del objeto al dibujar u obtener los datos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary vsli:raw="A representation of an object that lets that object be displayed as an embedded object inside a container. This value is typically specified for compound document objects. The presentation can be provided for the screen or printer.">Una representación de un objeto que permite mostrarlo como objeto incrustado dentro de un contenedor. Este valor se suele especificar para los objetos de documento compuesto. La presentación se puede proporcionar para la pantalla o la impresora.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary vsli:raw="A representation of an object on the screen as though it were printed to a printer using the Print command from the File menu. The described data may represent a sequence of pages.">Representación de un objeto en pantalla como si se imprimiera utilizando el comando Imprimir del menú Archivo. Los datos descritos pueden representar una secuencia de páginas.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary vsli:raw="An iconic representation of an object.">Representación icónica de un objeto.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary vsli:raw="A thumbnail representation of an object that lets that object be displayed in a browsing tool. The thumbnail is approximately a 120 by 120 pixel, 16-color (recommended), device-independent bitmap potentially wrapped in a metafile.">Representación en miniatura de un objeto que permite éste se muestre en una herramienta de exploración. La miniatura es un bitmap de 16 colores (se recomienda) independiente del dispositivo que puede estar contenido en un metarchivo y que tiene un tamaño aproximado de 120 x 120 píxeles.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary vsli:raw="Contains the type description and process transfer information for a variable, function, or a function parameter.">Contiene la descripción del tipo y la información de transferencia de proceso de una variable, una función o un parámetro de función.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary vsli:raw="Contains information about an element.">Contiene información sobre un elemento.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary vsli:raw="Contains information about an element.">Contiene información sobre un elemento.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary vsli:raw="Contains information for remoting the element.">Contiene información para la comunicación remota del elemento.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary vsli:raw="Contains information about the parameter.">Contiene información del parámetro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary vsli:raw="Identifies the type of the element.">Identifica el tipo del elemento.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary vsli:raw="Describes the exceptions that occur during &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">Describe las excepciones que ocurren durante <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary vsli:raw="Describes the error intended for the customer.">Describe el error destinado al cliente.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary vsli:raw="Contains the fully-qualified drive, path, and file name of a Help file that contains more information about the error.">Contiene la unidad, la ruta de acceso y el nombre de archivo completos de un archivo de la Ayuda con más información acerca del error.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary vsli:raw="Indicates the name of the source of the exception. Typically, this is an application name.">Indica el nombre del origen de la excepción. Normalmente se trata del nombre de una aplicación.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary vsli:raw="Indicates the Help context ID of the topic within the Help file.">Indica el identificador de contexto del tema de Ayuda dentro del archivo de Ayuda.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary vsli:raw="Represents a pointer to a function that takes an &lt;see cref=&quot;T:System.Runtime.InteropServices.EXCEPINFO&quot; /&gt; structure as an argument and returns an HRESULT value. If deferred fill-in is not desired, this field is set to &lt;see langword=&quot;null&quot; /&gt;.">Representa un puntero a una función que toma una estructura <see cref="T:System.Runtime.InteropServices.EXCEPINFO" /> como argumento y devuelve un valor HRESULT. Si no se desea un relleno aplazado, este campo se establece en <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary vsli:raw="This field is reserved; it must be set to &lt;see langword=&quot;null&quot; /&gt;.">Este campo está reservado; se debe establecer en <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary vsli:raw="A return value describing the error.">Valor devuelto que describe el error.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary vsli:raw="Represents an error code identifying the error.">Representa un código de error que identifica el error.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary vsli:raw="This field is reserved; it must be set to 0.">Este campo está reservado; se debe establecer en 0.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary vsli:raw="Represents the number of 100-nanosecond intervals since January 1, 1601. This structure is a 64-bit value.">Representa el número de intervalos de 100 nanosegundos desde el 1 de enero de 1601. Esta estructura es un valor de 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary vsli:raw="Specifies the high 32 bits of the &lt;see langword=&quot;FILETIME&quot; /&gt;.">Especifica los 32 bits superiores de <see langword="FILETIME" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary vsli:raw="Specifies the low 32 bits of the &lt;see langword=&quot;FILETIME&quot; /&gt;.">Especifica los 32 bits superiores de <see langword="FILETIME" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary vsli:raw="Represents a generalized Clipboard format.">Representa un formato generalizado del Portapapeles.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary vsli:raw="Specifies the particular clipboard format of interest.">Especifica el formato de interés en concreto del portapapeles.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary vsli:raw="Specifies one of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DVASPECT&quot; /&gt; enumeration constants that indicates how much detail should be contained in the rendering.">Especifica una de las constantes de la enumeración <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> que indica el nivel de detalle que debe contener la representación.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary vsli:raw="Specifies part of the aspect when the data must be split across page boundaries.">Especifica una parte del aspecto cuando los datos se deben dividir en los límites de páginas.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary vsli:raw="Specifies a pointer to a &lt;see langword=&quot;DVTARGETDEVICE&quot; /&gt; structure containing information about the target device that the data is being composed for.">Especifica un puntero a una estructura <see langword="DVTARGETDEVICE" /> que contiene información sobre el dispositivo de destino para el que se están creando los datos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary vsli:raw="Specifies one of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; enumeration constants, which indicates the type of storage medium used to transfer the object's data.">Especifica una de las constantes de la enumeración <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />, que indican el tipo de medio de almacenamiento utilizado para transferir los datos del objeto.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary vsli:raw="Defines a function description.">Define una descripción de la función.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary vsli:raw="Specifies the calling convention of a function.">Especifica la convención de llamada de una función.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary vsli:raw="Counts the total number of parameters.">Cuenta el número total de parámetros.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary vsli:raw="Counts the optional parameters.">Cuenta los parámetros opcionales.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary vsli:raw="Counts the permitted return values.">Cuenta los valores devueltos permitidos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary vsli:raw="Contains the return type of the function.">Contiene el tipo devuelto de la función.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary vsli:raw="Specifies whether the function is virtual, static, or dispatch-only.">Especifica si la función es virtual, estática o de sólo distribución.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary vsli:raw="Specifies the type of a property function.">Especifica el tipo de una función de propiedad.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary vsli:raw="Indicates the array of &lt;see cref=&quot;F:System.Runtime.InteropServices.ELEMDESC&quot; /&gt;.">Indica el tamaño de <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary vsli:raw="Stores the count of errors a function can return on a 16-bit system.">Almacena el número de errores que una función puede devolver en un sistema de 16 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary vsli:raw="Identifies the function member ID.">Identifica el identificador del miembro de función.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary vsli:raw="Specifies the offset in the VTBL for &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL&quot; /&gt;.">Especifica el desplazamiento en la VTBL para <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary vsli:raw="Indicates the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCFLAGS&quot; /&gt; of a function.">Indica el <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> de una función.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary vsli:raw="Identifies the constants that define the properties of a function.">Identifica las constantes que definen las propiedades de una función.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary vsli:raw="The function that supports data binding.">Función que admite el enlace de datos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary vsli:raw="The function that best represents the object. Only one function in a type can have this attribute.">Función que mejor representa al objeto. Sólo una función de un tipo puede tener este atributo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type of &quot;abc&quot;. If such a member is found, and is flagged as an accessor function for an element of the default collection, a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.">Permite llevar a cabo una optimización en la que el compilador busca un miembro denominado "xyz" en el tipo "abc". Si se encuentra un miembro de este tipo y se marca como función de descriptor de acceso para un elemento de la colección predeterminada, entonces se genera una llamada a dicha función miembro. Se permite en miembros de interfaces y de interfaces Dispinterface. No se permite en módulos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary vsli:raw="The function that is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE&quot; /&gt; must also be set.">Función que se muestra al usuario como enlazable. <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" /> también debe establecerse.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary vsli:raw="The function should not be displayed to the user, although it exists and is bindable.">No debe mostrarse la función al usuario, aunque exista y sea enlazable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary vsli:raw="Mapped as individual bindable properties.">Asignadas como propiedades enlazables individuales.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary vsli:raw="The property appears in an object browser, but not in a properties browser.">La propiedad aparece en un examinador de objetos, pero no en un examinador de propiedades.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary vsli:raw="Tags the interface as having default behaviors.">Etiqueta la interfaz indicando que tiene comportamientos predeterminados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary vsli:raw="When set, any call to a method that sets the property results first in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;. The implementation of &lt;see langword=&quot;OnRequestEdit&quot; /&gt; determines if the call is allowed to set the property.">Cuando se establece, cualquier llamada a un método que establezca la propiedad dará como resultado, en primer lugar, una llamada a <see langword="IPropertyNotifySink::OnRequestEdit" />. La implementación de <see langword="OnRequestEdit" /> determina si está permitido que la llamada establezca la propiedad.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary vsli:raw="The function should not be accessible from macro languages. This flag is intended for system-level functions or functions that type browsers should not display.">No se debe permitir el acceso a la función desde lenguajes de macros. El marcador está destinado a funciones en el nivel del sistema o a funciones que los exploradores de tipos no deben mostrar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary vsli:raw="The function returns an object that is a source of events.">La función devuelve un objeto que es un origen de eventos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary vsli:raw="The type information member is the default member for display in the user interface.">El miembro de la información de tipos es el miembro predeterminado que se mostrará en la interfaz de usuario.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary vsli:raw="The function supports &lt;see langword=&quot;GetLastError&quot; /&gt;. If an error occurs during the function, the caller can call &lt;see langword=&quot;GetLastError&quot; /&gt; to retrieve the error code.">La función admite <see langword="GetLastError" />. Si ocurre un error durante la función, el llamador puede llamar a <see langword="GetLastError" /> para recuperar el código de error.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary vsli:raw="Defines how to access a function.">Define cómo acceder a una función.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary vsli:raw="The function can be accessed only through &lt;see langword=&quot;IDispatch&quot; /&gt;.">Sólo se puede tener acceso a la función a través de <see langword="IDispatch" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary vsli:raw="The function is accessed by &lt;see langword=&quot;static&quot; /&gt; address and takes an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">La dirección <see langword="static" /> obtiene acceso a la función y toma un puntero <see langword="this" /> implícito.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary vsli:raw="The function is accessed through the virtual function table (VTBL), and takes an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">Se obtiene acceso a la función mediante la tabla de función virtual (VTBL) y utilizando un puntero implícito <see langword="this" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary vsli:raw="The function is accessed by &lt;see langword=&quot;static&quot; /&gt; address and does not take an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">La dirección <see langword="static" /> obtiene acceso a la función y no toma un puntero <see langword="this" /> implícito.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary vsli:raw="The function is accessed in the same way as &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL&quot; /&gt;, except the function has an implementation.">Se obtiene acceso a la función de la misma forma que <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" />, excepto que la función tiene una implementación.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary vsli:raw="Provides a managed definition of the &lt;see langword=&quot;IAdviseSink&quot; /&gt; interface.">Proporciona una definición administrada de la interfaz <see langword="IAdviseSink" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has changed from the running state to the loaded state.  This method is called by a server.">Notifica a todos los receptores de consultas registrados que el objeto ha pasado del estado de ejecución al estado de carga.  Este método es invocado por un servidor.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Notifies all data objects currently registered advisory sinks that data in the object has changed.">Notifica a todos los receptores de consulta registrados de los objetos de datos que los datos del objeto han cambiado.</summary>
      <param name="format" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt;, passed by reference, which describes the format, target device, rendering, and storage information of the calling data object.">Estructura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, pasada mediante referencia, que describe la información de almacenamiento, representación, dispositivo de destino y formato del objeto de datos de llamada.</param>
      <param name="stgmedium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;, passed by reference, which defines the storage medium (global memory, disk file, storage object, stream object, Graphics Device Interface (GDI) object, or undefined) and ownership of that medium for the calling data object.">Estructura <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, pasada mediante referencia, que define el medio de almacenamiento (memoria global, archivo de disco, objeto de almacenamiento, objeto de secuencia, interfaz de dispositivo gráfico (GDI) o indefinido) y la propiedad de ese medio para el objeto de datos de llamada.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has been renamed. This method is called by a server.">Notifica a todos los receptores de consultas registrados que el nombre del objeto ha cambiado. Este método es invocado por un servidor.</summary>
      <param name="moniker" vsli:raw="A pointer to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on the new full moniker of the object.">Puntero a la interfaz <see langword="IMoniker" /> en el nuevo moniker completo del objeto.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has been saved. This method is called by a server.">Notifica a todos los receptores de consultas registrados que se ha guardado el objeto. Este método es invocado por un servidor.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary vsli:raw="Notifies an object's registered advisory sinks that its view has changed. This method is called by a server.">Notifica a los receptores de consultas registrados de un objeto que su vista ha cambiado. Este método es invocado por un servidor.</summary>
      <param name="aspect" vsli:raw="The aspect, or view, of the object. Contains a value taken from the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DVASPECT&quot; /&gt; enumeration.">Aspecto, o vista, del objeto. Contiene un valor tomado de la enumeración <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" />.</param>
      <param name="index" vsli:raw="The portion of the view that has changed. Currently, only -1 is valid.">Parte de la vista que ha cambiado. Actualmente, sólo -1 es válido.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface.">Proporciona la definición administrada de la interfaz <see langword="IBindCtx" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary vsli:raw="Enumerates the strings that are the keys of the internally maintained table of contextual object parameters.">Enumera las cadenas que constituyen las claves de la tabla de parámetros de objetos contextuales mantenida internamente.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the object parameter enumerator. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al enumerador de parámetros de objetos. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary vsli:raw="Returns the current binding options stored in the current bind context.">Devuelve las opciones de enlace actuales almacenadas en el contexto actual del enlace.</summary>
      <param name="pbindopts" vsli:raw="A pointer to the structure to receive the binding options.">Puntero a la estructura que recibirá las opciones de enlace.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary vsli:raw="Looks up the given key in the internally maintained table of contextual object parameters and returns the corresponding object, if one exists.">Busca una clave determinada en la tabla de parámetros de objetos contextuales mantenida internamente y devuelve el objeto correspondiente, si es que existe.</summary>
      <param name="pszKey" vsli:raw="The name of the object to search for.">Nombre del objeto que se va a buscar.</param>
      <param name="ppunk" vsli:raw="When this method returns, contains the object interface pointer. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el puntero de interfaz del objeto. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary vsli:raw="Returns access to the Running Object Table (ROT) relevant to this binding process.">Devuelve el acceso a la Tabla de objetos en ejecución (ROT) que se aplica a este proceso de enlace.</summary>
      <param name="pprot" vsli:raw="When this method returns, contains a reference to the Running Object Table (ROT). This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la Tabla de objetos en ejecución (ROT). Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary vsli:raw="Registers the passed object as one of the objects that has been bound during a moniker operation and that should be released when the operation is complete.">Registra el objeto que se ha pasado como uno de los objetos enlazados durante una operación de moniker y que se debería liberar cuando ésta finalice.</summary>
      <param name="punk" vsli:raw="The object to register for release.">Objeto que se va a registrar para su liberación.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary vsli:raw="Registers the specified object pointer under the specified name in the internally maintained table of object pointers.">Registra el puntero de un objeto determinado con el nombre especificado en la tabla de punteros de objetos mantenida internamente.</summary>
      <param name="pszKey" vsli:raw="The name to register &lt;paramref name=&quot;punk&quot; /&gt; with.">Nombre con el que se va a registrar <paramref name="punk" />.</param>
      <param name="punk" vsli:raw="The object to register.">Objeto que se va a registrar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary vsli:raw="Releases all the objects currently registered with the bind context by using the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)&quot; /&gt; method.">Libera todos los objetos registrados actualmente con el contexto de enlace mediante el método <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary vsli:raw="Removes the object from the set of registered objects that need to be released.">Quita del conjunto de objetos registrados el objeto que debe ser liberado.</summary>
      <param name="punk" vsli:raw="The object to unregister for release.">Objeto cuyo registro se va a anular para su liberación.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary vsli:raw="Revokes the registration of the object currently found under the specified key in the internally maintained table of contextual object parameters, if that key is currently registered.">Revoca el registro del objeto que se encuentra actualmente bajo la clave especificada en la tabla de parámetros de objetos contextuales mantenida internamente, si dicha clave está registrada en ese momento.</summary>
      <param name="pszKey" vsli:raw="The key to unregister.">Clave cuyo registro se va a anular.</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the specified key was successfully removed from the table; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">Devuelve un valor <see langword="S_OK" /><see langword="HRESULT" /> si la clave especificada se ha quitado correctamente de la tabla; de lo contrario, devuelve un valor <see langword="S_FALSE" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary vsli:raw="Stores a block of parameters in the bind context. These parameters will apply to later &lt;see langword=&quot;UCOMIMoniker&quot; /&gt; operations that use this bind context.">Almacena un bloque de parámetros en el contexto del enlace. Estos parámetros se aplicarán a operaciones <see langword="UCOMIMoniker" /> posteriores que utilicen este contexto de enlace.</summary>
      <param name="pbindopts" vsli:raw="The structure containing the binding options to set.">Estructura que contiene las opciones de enlace que se van a establecer.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IConnectionPoint&quot; /&gt; interface.">Proporciona la definición administrada de la interfaz <see langword="IConnectionPoint" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary vsli:raw="Establishes an advisory connection between the connection point and the caller's sink object.">Establece una conexión de consulta entre el punto de conexión y el objeto receptor del llamador.</summary>
      <param name="pUnkSink" vsli:raw="A reference to the sink to receive calls for the outgoing interface managed by this connection point.">Referencia al receptor para que reciba las llamadas para la interfaz de salida administrada por este punto de conexión.</param>
      <param name="pdwCookie" vsli:raw="When this method returns, contains the connection cookie. This parameter is passed uninitialized.">El resultado que devuelve este método contiene la cookie de la conexión. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary vsli:raw="Creates an enumerator object for iteration through the connections that exist to this connection point.">Crea un objeto enumerador para recorrer en iteración las conexiones que existen a este punto de conexión.</summary>
      <param name="ppEnum" vsli:raw="When this method returns, contains the newly created enumerator. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el enumerador recién creado. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary vsli:raw="Returns the IID of the outgoing interface managed by this connection point.">Devuelve el IID de la interfaz de salida administrada por este punto de conexión.</summary>
      <param name="pIID" vsli:raw="When this parameter returns, contains the IID of the outgoing interface managed by this connection point. This parameter is passed uninitialized.">El resultado que devuelve este parámetro contiene el IID de la interfaz de salida administrada por este punto de conexión. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface pointer to the connectable object that conceptually owns this connection point.">Recupera el puntero de interfaz <see langword="IConnectionPointContainer" /> al objeto conectable que, conceptualmente, posee este punto de conexión.</summary>
      <param name="ppCPC" vsli:raw="When this parameter returns, contains the connectable object's &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface. This parameter is passed uninitialized.">El resultado que contiene este parámetro contiene la interfaz <see langword="IConnectionPointContainer" /> del objeto conectable. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary vsli:raw="Terminates an advisory connection previously established through the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt; method.">Finaliza una conexión de consulta previamente establecida mediante el método <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />.</summary>
      <param name="dwCookie" vsli:raw="The connection cookie previously returned from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt; method.">Cookie de conexión previamente devuelta por el método <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface.">Proporciona la definición administrada de la interfaz <see langword="IConnectionPointContainer" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary vsli:raw="Creates an enumerator of all the connection points supported in the connectable object, one connection point per IID.">Crea un enumerador de todos los puntos de conexión que admite el objeto conectable, un punto de conexión por cada IID.</summary>
      <param name="ppEnum" vsli:raw="When this method returns, contains the interface pointer of the enumerator. This parameter is passed uninitialized.">El resultado de este método contiene el nombre del puntero de interfaz del enumerador. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary vsli:raw="Asks the connectable object if it has a connection point for a particular IID, and if so, returns the &lt;see langword=&quot;IConnectionPoint&quot; /&gt; interface pointer to that connection point.">Solicita al objeto conectable si tiene un punto de conexión para un IID determinado y, en caso afirmativo, devuelve el puntero de interfaz <see langword="IConnectionPoint" /> a ese punto de conexión.</summary>
      <param name="riid" vsli:raw="A reference to the outgoing interface IID whose connection point is being requested.">Referencia al IDD de la interfaz de salida cuyo punto de conexión se solicita.</param>
      <param name="ppCP" vsli:raw="When this method returns, contains the connection point that manages the outgoing interface &lt;paramref name=&quot;riid&quot; /&gt;. This parameter is passed uninitialized.">El resultado de este método contiene el punto de conexión que administra la interfaz de salida <paramref name="riid" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IDataObject&quot; /&gt; interface.">Proporciona la definición administrada de la interfaz <see langword="IDataObject" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary vsli:raw="Creates a connection between a data object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.">Crea una conexión entre un objeto de datos y un receptor de consulta. Este método es invocado por un objeto que admite un receptor de consulta y permite que a dicho receptor se le notifiquen los cambios realizados en los datos del objeto.</summary>
      <param name="pFormatetc" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.">Estructura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, pasada por referencia, que define el formato, dispositivo de destino, aspecto y medio que se utilizarán para las notificaciones futuras.</param>
      <param name="advf" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ADVF&quot; /&gt; values that specifies a group of flags for controlling the advisory connection.">Uno de los valores de <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> que especifica un grupo de marcadores para controlar la conexión de consulta.</param>
      <param name="adviseSink" vsli:raw="A pointer to the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IAdviseSink&quot; /&gt; interface on the advisory sink that will receive the change notification.">Puntero a la interfaz <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> en el receptor de consulta que recibirá la notificación de cambios.</param>
      <param name="connection" vsli:raw="When this method returns, contains a pointer to a DWORD token that identifies this connection. You can use this token later to delete the advisory connection by passing it to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)&quot; /&gt;. If this value is zero, the connection was not established. This parameter is passed uninitialized.">El resultado que devuelve este método contiene un puntero a un símbolo (token) de DWORD que identifica esta conexión. Puede utilizar este símbolo (token) posteriormente para eliminar la conexión de consulta pasándolo a <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" />. Si este valor es cero, indicará que no se estableció la conexión. Este parámetro se pasa sin inicializar.</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The advisory connection was created.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; E_NOTIMPL&lt;/term&gt;&lt;description&gt; This method is not implemented on the data object.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; There is an invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; There is an invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_ADVISENOTSUPPORTED&lt;/term&gt;&lt;description&gt; The data object does not support change notification.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Este método admite los valores devueltos estándar E_INVALIDARG, E_UNEXPECTED y E_OUTOFMEMORY, así como los valores siguientes:
  Valor 
  Descripción 
  S_OK 
  Se creó la conexión de consulta.  
  
  E_NOTIMPL 
  Este método no se implementa en el objeto de datos.  
  
  DV_E_LINDEX 
  Hay un valor no válido para <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; actualmente, sólo se admite -1.  
  
  DV_E_FORMATETC 
  Hay un valor no válido para el parámetro <paramref name="pFormatetc" />.  
  
  OLE_E_ADVISENOTSUPPORTED 
  El objeto de datos no admite la notificación de cambios.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary vsli:raw="Destroys a notification connection that had been previously established.">Destruye una conexión de notificación que se había establecido previamente.</summary>
      <param name="connection" vsli:raw="A DWORD token that specifies the connection to remove. Use the value returned by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)&quot; /&gt; when the connection was originally established.">Símbolo (token) de DWORD que especifica la conexión que se ha de quitar. Utilice el valor devuelto por <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> cuando se estableció la conexión originalmente.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary vsli:raw="Creates an object that can be used to enumerate the current advisory connections.">Crea un objeto que se puede utilizar para enumerar las conexiones de consulta actuales.</summary>
      <param name="enumAdvise" vsli:raw="When this method returns, contains an &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA&quot; /&gt; that receives the interface pointer to the new enumerator object. If the implementation sets &lt;paramref name=&quot;enumAdvise&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;, there are no connections to advisory sinks at this time. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una interfaz <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" /> que recibe el puntero de interfaz al nuevo objeto de enumerador. Si la implementación establece <paramref name="enumAdvise" /> en <see langword="null" />, no hay ninguna conexión con los receptores de consulta en este momento. Este parámetro se pasa sin inicializar.</param>
      <returns vsli:raw="This method supports the standard return value E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The enumerator object is successfully instantiated or there are no connections.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_ADVISENOTSUPPORTED&lt;/term&gt;&lt;description&gt; This object does not support advisory notifications.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Este método admite el valor devuelto estándar E_OUTOFMEMORY, así como los valores siguientes:
  Valor  
  
  Descripción  
  
  S_OK  
  
  Las instancias del objeto de enumerador se han creado correctamente o no hay ninguna conexión.  
  
  OLE_E_ADVISENOTSUPPORTED  
  
  Este objeto no admite las notificaciones de consulta.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary vsli:raw="Creates an object for enumerating the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures for a data object. These structures are used in calls to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;.">Crea un objeto para enumerar las estructuras <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> para un objeto de datos. Estas estructuras se utilizan en llamadas a los métodos <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> o <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />.</summary>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DATADIR&quot; /&gt; values that specifies the direction of the data.">Uno de los valores de <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> que especifica la dirección de los datos.</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The enumerator object was successfully created.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; E_NOTIMPL&lt;/term&gt;&lt;description&gt; The direction specified by the &lt;paramref name=&quot;direction&quot; /&gt; parameter is not supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_S_USEREG&lt;/term&gt;&lt;description&gt; Requests that OLE enumerate the formats from the registry.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Este método admite los valores devueltos estándar E_INVALIDARG y E_OUTOFMEMORY, así como los valores siguientes:
  Valor 
  Descripción 
  S_OK 
  El objeto de enumerador se ha creado correctamente.  
  
  E_NOTIMPL 
  No se admite la dirección especificada por el parámetro <paramref name="direction" />.  
  
  OLE_S_USEREG 
  Solicita que OLE enumere los formatos del Registro.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary vsli:raw="Provides a standard &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure that is logically equivalent to a more complex structure. Use this method to determine whether two different &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures would return the same data, removing the need for duplicate rendering.">Proporciona una estructura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> estándar que equivale lógicamente a una estructura más compleja. Utilice este método para determinar si dos estructuras <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> diferentes devolverían los mismos datos, eliminando la necesidad de una representación duplicada.</summary>
      <param name="formatIn" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; member is not significant in this case and should be ignored.">Puntero a una estructura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, pasada por referencia, que define el formato, medio y dispositivo de destino que el llamador desearía utilizar para recuperar los datos en una llamada subsiguiente como <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. El miembro <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> no es importante en este caso y se debe omitir.</param>
      <param name="formatOut" vsli:raw="When this method returns, contains a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure that contains the most general information possible for a specific rendering, making it canonically equivalent to &lt;c&gt;formatetcIn&lt;/c&gt;. The caller must allocate this structure and the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)&quot; /&gt; method must fill in the data. To retrieve data in a subsequent call such as &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;, the caller uses the supplied value of &lt;paramref name=&quot;formatOut&quot; /&gt;, unless the value supplied is &lt;see langword=&quot;null&quot; /&gt;. This value is &lt;see langword=&quot;null&quot; /&gt; if the method returns &lt;see langword=&quot;DATA_S_SAMEFORMATETC&quot; /&gt;. The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; member is not significant in this case and should be ignored. This parameter is passed uninitialized.">El resultado que devuelve este método incluye un puntero a una estructura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> que contiene la información más genérica posible de una representación concreta, haciendo que tenga una equivalencia canónica con <c>formatetcIn</c>. El llamador debe asignar esta estructura y el método <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> debe rellenar los datos. Para recuperar los datos en una llamada subsiguiente como <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />, el llamador utiliza el valor proporcionado de <paramref name="formatOut" />, a menos que el valor proporcionado sea <see langword="null" />. Este valor es <see langword="null" /> si el método devuelve <see langword="DATA_S_SAMEFORMATETC" />. El miembro <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> no es importante en este caso y se debe omitir. Este parámetro se pasa sin inicializar.</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The returned &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure is different from the one that was passed.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DATA_S_SAMEFORMATETC&lt;/term&gt;&lt;description&gt; The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures are the same and &lt;see langword=&quot;null&quot; /&gt; is returned in the &lt;paramref name=&quot;formatOut&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; There is an invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; There is an invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_NOTRUNNING&lt;/term&gt;&lt;description&gt; The application is not running.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Este método admite los valores devueltos estándar E_INVALIDARG, E_UNEXPECTED y E_OUTOFMEMORY, así como los valores siguientes:
  Valor 
  Descripción 
  S_OK 
  La estructura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> devuelta es diferente de la que se ha pasado.  
  
  DATA_S_SAMEFORMATETC 
  Las estructuras <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> son iguales y se devuelve <see langword="null" /> en el parámetro <paramref name="formatOut" />.  
  
  DV_E_LINDEX 
  Hay un valor no válido para <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; actualmente, sólo se admite -1.  
  
  DV_E_FORMATETC 
  Hay un valor no válido para el parámetro <paramref name="pFormatetc" />.  
  
  OLE_E_NOTRUNNING 
  La aplicación no se está ejecutando.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Obtains data from a source data object. The &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; method, which is called by a data consumer, renders the data described in the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure and transfers it through the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure. The caller then assumes responsibility for releasing the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure.">Obtiene los datos de un objeto de datos de origen. El método <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />, que es invocado por un consumidor de datos, representa los datos descritos en la estructura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> especificada y los transfiere a través de la estructura <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> especificada. A continuación, el llamador asume la responsabilidad de liberar la estructura <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />.</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.">Puntero a una estructura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, pasada por referencia, que define el formato, medio y dispositivo de destino que debe utilizarse al pasar los datos. Es posible especificar más de un medio utilizando el operador booleano OR, lo que permite al método elegir el mejor medio entre los especificados.</param>
      <param name="medium" vsli:raw="When this method returns, contains a pointer to the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure that indicates the storage medium containing the returned data through its &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed&quot; /&gt; member, and the responsibility for releasing the medium through the value of its &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member. If &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the receiver of the medium is responsible for releasing it; otherwise, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; points to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface on the appropriate object so its &lt;see langword=&quot;Release&quot; /&gt; method can be called. The medium must be allocated and filled in by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. This parameter is passed uninitialized.">El resultado que devuelve este método contiene un puntero a la estructura <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> que indica el medio de almacenamiento que contiene los datos devueltos a través de su miembro <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> y la responsabilidad para liberar el medio a través del valor de su miembro <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" />. Si <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> es <see langword="null" />, el receptor del medio es el responsable de liberarlo; de lo contrario, <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> señala a la interfaz <see langword="IUnknown" /> en el objeto adecuado de modo que se pueda llamar a su método <see langword="Release" />. El medio debe ser asignado y rellenado por <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Obtains data from a source data object. This method, which is called by a data consumer, differs from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; method in that the caller must allocate and free the specified storage medium.">Obtiene los datos de un objeto de datos de origen. Este método, que es invocado por un consumidor de datos, se diferencia del método <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> en que el llamador debe asignar y liberar el medio de almacenamiento especificado.</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt;, and only the following &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; values are valid: &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE&quot; /&gt;, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM&quot; /&gt;, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL&quot; /&gt;, or &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE&quot; /&gt;.">Puntero a una estructura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, pasada por referencia, que define el formato, medio y dispositivo de destino que debe utilizarse al pasar los datos. Sólo se puede especificar un medio en <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> y sólo son válidos los siguientes valores de <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />: <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" /> o <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" />.</param>
      <param name="medium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;, passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. The caller must also free the medium. The implementation of this method must always supply a value of &lt;see langword=&quot;null&quot; /&gt; for the &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure that this parameter points to.">Estructura <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, pasada por referencia, que define el medio de almacenamiento que contiene los datos transferidos. El medio debe ser asignado por el llamador y rellenado por <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. El llamador también debe liberar el medio. La implementación de este método siempre debe proporcionar un valor <see langword="null" /> al miembro <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> de la estructura <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> a la que señala este parámetro.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary vsli:raw="Determines whether the data object is capable of rendering the data described in the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure. Objects attempting a paste or drop operation can call this method before calling &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; to get an indication of whether the operation may be successful.">Determina si el objeto de datos es capaz de representar los datos descritos en la estructura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />. Los objetos que intentan una operación de pegar o colocar pueden llamar a este método antes de llamar a <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> para obtener una indicación de si la operación puede tener éxito.</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use for the query.">Puntero a una estructura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, pasada por referencia, que define el formato, medio y dispositivo de destino que debe utilizarse para la consulta.</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; A subsequent call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; would probably be successful.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; An invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; An invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_TYMED&lt;/term&gt;&lt;description&gt; An invalid &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed&quot; /&gt; value.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_DVASPECT&lt;/term&gt;&lt;description&gt; An invalid &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect&quot; /&gt; value.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_NOTRUNNING&lt;/term&gt;&lt;description&gt; The application is not running.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Este método admite los valores devueltos estándar E_INVALIDARG, E_UNEXPECTED y E_OUTOFMEMORY, así como los valores siguientes:
  Valor 
  Descripción 
  S_OK 
  Es probable que una llamada subsiguiente a <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> se realice correctamente.  
  
  DV_E_LINDEX 
  Hay un valor no válido para <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; actualmente, sólo se admite -1.  
  
  DV_E_FORMATETC 
  Hay un valor no válido para el parámetro <paramref name="pFormatetc" />.  
  
  DV_E_TYMED 
  Hay un valor de <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> no válido.  
  
  DV_E_DVASPECT 
  Hay un valor de <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> no válido.  
  
  OLE_E_NOTRUNNING 
  La aplicación no se está ejecutando.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary vsli:raw="Transfers data to the object that implements this method. This method is called by an object that contains a data source.">Transfiere los datos al objeto que implementa este método. Este método es invocado por un objeto que contiene un origen de datos.</summary>
      <param name="formatIn" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.">Estructura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, pasada por referencia, que define el formato utilizado por el objeto de datos al interpretar los datos contenidos en el medio de almacenamiento.</param>
      <param name="medium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure, passed by reference, that defines the storage medium in which the data is being passed.">Estructura <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, pasada por referencia, que define el medio de almacenamiento en el que se pasan los datos.</param>
      <param name="release" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that the data object called, which implements &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; function. &lt;see langword=&quot;false&quot; /&gt; to specify that the caller retains ownership of the storage medium, and the data object called uses the storage medium for the duration of the call only.">
        <see langword="true" /> para especificar que el objeto de datos invocado, que implementa <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />, posee el medio de almacenamiento una vez devuelta la llamada. Esto significa que el objeto de datos debe liberar el medio tras haber sido utilizado llamando a la función <see langword="ReleaseStgMedium" />. <see langword="false" /> para especificar que el llamador conserva la propiedad del medio de almacenamiento y el objeto de datos invocado utiliza dicho medio durante la duración de la llamada solamente.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary vsli:raw="Contains information needed for transferring a structure element, parameter, or function return value between processes.">Contiene información necesaria para transferir un elemento de estructura, un parámetro o un valor devuelto de función entre los procesos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary vsli:raw="Reserved; set to &lt;see langword=&quot;null&quot; /&gt;.">Reservado; se establece en <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary vsli:raw="Indicates an &lt;see cref=&quot;T:System.Runtime.InteropServices.IDLFLAG&quot; /&gt; value describing the type.">Indica un valor <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> que describe el tipo.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary vsli:raw="Describes how to transfer a structure element, parameter, or function return value between processes.">Describe cómo transferir un elemento de estructura, un parámetro o un valor devuelto de función entre los procesos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary vsli:raw="The parameter passes information from the caller to the callee.">El parámetro pasa información del que llama al llamado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary vsli:raw="The parameter is the local identifier of a client application.">El parámetro es el identificador local de una aplicación cliente.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary vsli:raw="The parameter returns information from the callee to the caller.">El parámetro devuelve información del llamado al que llama.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary vsli:raw="The parameter is the return value of the member.">El parámetro es el valor devuelto del miembro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary vsli:raw="Does not specify whether the parameter passes or receives information.">No especifica si el parámetro pasa o recibe información.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumConnectionPoints&quot; /&gt; interface.">Administra la definición de la interfaz <see langword="IEnumConnectionPoints" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">Crea otro enumerador que contiene el mismo estado de enumeración que el actual.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al enumerador recién creado. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Recupera un número especificado de elementos en la secuencia de enumeración.</summary>
      <param name="celt" vsli:raw="The number of &lt;see langword=&quot;IConnectionPoint&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Número de referencias a <see langword="IConnectionPoint" /> que se van a devolver en <paramref name="rgelt" />.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a las conexiones enumeradas. Este parámetro se pasa sin inicializar.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of connections enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">El resultado que devuelve este método contiene una referencia al número real de conexiones enumeradas en <paramref name="rgelt" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">Es <see langword="S_OK" /> si el parámetro <paramref name="pceltFetched" /> es igual al parámetro <paramref name="celt" />; en caso contrario, es <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Restablece la secuencia de enumeración al principio.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Omite un número especificado de elementos en la secuencia de enumeración.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Número de elementos de la enumeración que se van a omitir.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">Es <see langword="S_OK" /> si el número de elementos omitidos es igual al parámetro <paramref name="celt" />; en caso contrario, es <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumConnections&quot; /&gt; interface.">Administra la definición de la interfaz <see langword="IEnumConnections" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">Crea otro enumerador que contiene el mismo estado de enumeración que el actual.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al enumerador recién creado. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Recupera un número especificado de elementos en la secuencia de enumeración.</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.CONNECTDATA&quot; /&gt; structures to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Número de estructuras <see cref="T:System.Runtime.InteropServices.CONNECTDATA" /> que se van a devolver en <paramref name="rgelt" />.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a las conexiones enumeradas. Este parámetro se pasa sin inicializar.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of connections enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">El resultado que devuelve este método contiene una referencia al número real de conexiones enumeradas en <paramref name="rgelt" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">Es <see langword="S_OK" /> si el parámetro <paramref name="pceltFetched" /> es igual al parámetro <paramref name="celt" />; en caso contrario, es <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Restablece la secuencia de enumeración al principio.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Omite un número especificado de elementos en la secuencia de enumeración.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Número de elementos de la enumeración que se van a omitir.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">Es <see langword="S_OK" /> si el número de elementos omitidos es igual al parámetro <paramref name="celt" />; en caso contrario, es <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IEnumFORMATETC&quot; /&gt; interface.">Proporciona la definición administrada de la interfaz <see langword="IEnumFORMATETC" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current enumerator.">Crea otro enumerador que contiene el mismo estado de enumeración que el enumerador actual.</summary>
      <param name="newEnum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al enumerador recién creado. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Recupera un número especificado de elementos en la secuencia de enumeración.</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Número de referencias a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> que se van a devolver en <paramref name="rgelt" />.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; references. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a las referencias enumeradas <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />. Este parámetro se pasa sin inicializar.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of references enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al número real de referencias enumeradas en <paramref name="rgelt" />. Este parámetro se pasa sin inicializar.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">Es <see langword="S_OK" /> si el parámetro <paramref name="pceltFetched" /> es igual al parámetro <paramref name="celt" />; en caso contrario, es <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Restablece la secuencia de enumeración al principio.</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">HRESULT con el valor <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Omite un número especificado de elementos en la secuencia de enumeración.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Número de elementos de la enumeración que se van a omitir.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">Es <see langword="S_OK" /> si el número de elementos omitidos es igual al parámetro <paramref name="celt" />; en caso contrario, es <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumMoniker&quot; /&gt; interface.">Administra la definición de la interfaz <see langword="IEnumMoniker" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">Crea otro enumerador que contiene el mismo estado de enumeración que el actual.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al enumerador recién creado. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Recupera un número especificado de elementos en la secuencia de enumeración.</summary>
      <param name="celt" vsli:raw="The number of monikers to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Número de monikers que se van a devolver en <paramref name="rgelt" />.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated monikers. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a los monikers enumeradas. Este parámetro se pasa sin inicializar.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of monikers enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">El resultado que devuelve este método contiene una referencia al número real de monikers enumeradas en <paramref name="rgelt" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">Es <see langword="S_OK" /> si el parámetro <paramref name="pceltFetched" /> es igual al parámetro <paramref name="celt" />; en caso contrario, es <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Restablece la secuencia de enumeración al principio.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Omite un número especificado de elementos en la secuencia de enumeración.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Número de elementos de la enumeración que se van a omitir.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">Es <see langword="S_OK" /> si el número de elementos omitidos es igual al parámetro <paramref name="celt" />; en caso contrario, es <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IEnumSTATDATA&quot; /&gt; interface.">Proporciona la definición administrada de la interfaz <see langword="IEnumSTATDATA" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current enumerator.">Crea otro enumerador que contiene el mismo estado de enumeración que el enumerador actual.</summary>
      <param name="newEnum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al enumerador recién creado. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Recupera un número especificado de elementos en la secuencia de enumeración.</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STATDATA&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Número de referencias a <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> que se van a devolver en <paramref name="rgelt" />.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STATDATA&quot; /&gt; references. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a las referencias enumeradas <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" />. Este parámetro se pasa sin inicializar.</param>
      <param name="pceltFetched" vsli:raw="When this parameter returns, contains a reference to the actual number of references enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;. This parameter is passed uninitialized.">El resultado que devuelve este parámetro contiene una referencia al número real de referencias enumeradas en <paramref name="rgelt" />. Este parámetro se pasa sin inicializar.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">Es <see langword="S_OK" /> si el parámetro <paramref name="pceltFetched" /> es igual al parámetro <paramref name="celt" />; en caso contrario, es <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Restablece la secuencia de enumeración al principio.</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">HRESULT con el valor <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Omite un número especificado de elementos en la secuencia de enumeración.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Número de elementos de la enumeración que se van a omitir.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">Es <see langword="S_OK" /> si el número de elementos omitidos es igual al parámetro <paramref name="celt" />; en caso contrario, es <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumString&quot; /&gt; interface.">Administra la definición de la interfaz <see langword="IEnumString" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">Crea otro enumerador que contiene el mismo estado de enumeración que el actual.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al enumerador recién creado. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Recupera un número especificado de elementos en la secuencia de enumeración.</summary>
      <param name="celt" vsli:raw="The number of strings to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Número de cadenas que se van a devolver en <paramref name="rgelt" />.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated strings. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a las cadenas enumeradas. Este parámetro se pasa sin inicializar.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of strings enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">El resultado que devuelve este método contiene una referencia al número real de cadenas enumeradas en <paramref name="rgelt" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">Es <see langword="S_OK" /> si el parámetro <paramref name="pceltFetched" /> es igual al parámetro <paramref name="celt" />; en caso contrario, es <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Restablece la secuencia de enumeración al principio.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Omite un número especificado de elementos en la secuencia de enumeración.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Número de elementos de la enumeración que se van a omitir.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">Es <see langword="S_OK" /> si el número de elementos omitidos es igual al parámetro <paramref name="celt" />; en caso contrario, es <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumVARIANT&quot; /&gt; interface.">Administra la definición de la interfaz <see langword="IEnumVARIANT" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">Crea otro enumerador que contiene el mismo estado de enumeración que el actual.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT&quot; /&gt; reference to the newly created enumerator.">Referencia de <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" /> al enumerador recién creado.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Recupera un número especificado de elementos en la secuencia de enumeración.</summary>
      <param name="celt" vsli:raw="The number of elements to return in &lt;c&gt;rgelt&lt;/c&gt;.">Número de elementos que se van a devolver en <c>rgelt</c>.</param>
      <param name="rgVar" vsli:raw="When this method returns, contains a reference to the enumerated elements. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a elementos enumerados. Este parámetro se pasa sin inicializar.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of elements enumerated in &lt;c&gt;rgelt&lt;/c&gt;.">El resultado que devuelve este método contiene una referencia al número real de elementos enumerados en <c>rgelt</c>.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">Es <see langword="S_OK" /> si el parámetro <paramref name="pceltFetched" /> es igual al parámetro <paramref name="celt" />; en caso contrario, es <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Restablece la secuencia de enumeración al principio.</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">HRESULT con el valor <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Omite un número especificado de elementos en la secuencia de enumeración.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Número de elementos de la enumeración que se van a omitir.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">Es <see langword="S_OK" /> si el número de elementos omitidos es igual al parámetro <paramref name="celt" />; en caso contrario, es <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IMoniker&quot; /&gt; interface, with COM functionality from &lt;see langword=&quot;IPersist&quot; /&gt; and &lt;see langword=&quot;IPersistStream&quot; /&gt;.">Proporciona la definición administrada de la interfaz <see langword="IMoniker" />, con funcionalidad COM de <see langword="IPersist" /> e <see langword="IPersistStream" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary vsli:raw="Uses the moniker to bind to the object that it identifies.">Utiliza el moniker para enlazar el objeto que identifica.</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context object used in this binding operation.">Referencia a la interfaz <see langword="IBindCtx" /> en el objeto de contexto de enlace utilizado en esta operación de enlace.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">Referencia al moniker a la izquierda del actual, si es que forma parte de un moniker compuesto.</param>
      <param name="riidResult" vsli:raw="The interface identifier (IID) of the interface that the client intends to use to communicate with the object that the moniker identifies.">Identificador (IID) de la interfaz que intenta utilizar el cliente para comunicar con el objeto identificado por el moniker.</param>
      <param name="ppvResult" vsli:raw="When this method returns, contains a reference to the interface requested by &lt;paramref name=&quot;riidResult&quot; /&gt;. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la interfaz solicitada por <paramref name="riidResult" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary vsli:raw="Retrieves an interface pointer to the storage that contains the object identified by the moniker.">Recupera un puntero de interfaz al almacenamiento que contiene el objeto identificado por el moniker.</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context object used during this binding operation.">Referencia a la interfaz <see langword="IBindCtx" /> en el objeto de contexto de enlace utilizado durante esta operación de enlace.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">Referencia al moniker a la izquierda del actual, si es que forma parte de un moniker compuesto.</param>
      <param name="riid" vsli:raw="The interface identifier (IID) of the storage interface requested.">Identificador de interfaz (IID) de la interfaz de almacenamiento solicitada.</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the interface requested by &lt;paramref name=&quot;riid&quot; /&gt;. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la interfaz solicitada por <paramref name="riid" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Creates a new moniker based on the common prefix that this moniker shares with another moniker.">Crea un nuevo moniker basado en el prefijo común que el moniker comparte con otro moniker.</summary>
      <param name="pmkOther" vsli:raw="A reference to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on another moniker to compare with the current moniker for a common prefix.">Referencia a la interfaz <see langword="IMoniker" /> en otro moniker para comparar la presencia de algún prefijo común en el moniker actual.</param>
      <param name="ppmkPrefix" vsli:raw="When this method returns, contains the moniker that is the common prefix of the current moniker and &lt;paramref name=&quot;pmkOther&quot; /&gt;. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el moniker que es prefijo común del moniker actual y <paramref name="pmkOther" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Combines the current moniker with another moniker, creating a new composite moniker.">Combina el moniker actual con otro moniker, creando un nuevo moniker compuesto.</summary>
      <param name="pmkRight" vsli:raw="A reference to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on a moniker to append to the end of the current moniker.">Referencia a la interfaz <see langword="IMoniker" /> en un moniker para anexar al final del moniker actual.</param>
      <param name="fOnlyIfNotGeneric" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the caller requires a nongeneric composition. The operation proceeds only if &lt;paramref name=&quot;pmkRight&quot; /&gt; is a moniker class that the current moniker can combine with in some way other than forming a generic composite. &lt;see langword=&quot;false&quot; /&gt; to indicate that the method can create a generic composite if necessary.">
        <see langword="true" /> para indicar que el llamador requiere una composición no genérica. La operación continúa solo si <paramref name="pmkRight" /> es una clase moniker con la que se puede combinar el moniker actual de alguna forma que no sea la de crear un compuesto genérico. <see langword="false" /> para indicar que el método puede crear un compuesto genérico si es necesario.</param>
      <param name="ppmkComposite" vsli:raw="When this method returns, contains a reference to the resulting composite moniker. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al moniker compuesto resultante. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Supplies a pointer to an enumerator that can enumerate the components of a composite moniker.">Proporciona un puntero a un enumerador que puede enumerar los componentes de un moniker compuesto.</summary>
      <param name="fForward" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enumerate the monikers from left to right. &lt;see langword=&quot;false&quot; /&gt; to enumerate from right to left.">
        <see langword="true" /> para enumerar los monikers de izquierda a derecha. <see langword="false" /> para enumerarlos de derecha a izquierda.</param>
      <param name="ppenumMoniker" vsli:raw="When this method returns, contains a reference to the enumerator object for the moniker. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al objeto enumerador del moniker. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary vsli:raw="Retrieves the class identifier (CLSID) of an object.">Recupera el identificador de clase (CLSID) de un objeto.</summary>
      <param name="pClassID" vsli:raw="When this method returns, contains the CLSID. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el CLSID. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary vsli:raw="Gets the display name, which is a user-readable representation of the current moniker.">Obtiene el nombre para mostrar, que es una representación del moniker actual que puede leer el usuario.</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this operation.">Referencia al contexto de enlace que se utiliza en esta operación.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">Referencia al moniker a la izquierda del actual, si es que forma parte de un moniker compuesto.</param>
      <param name="ppszDisplayName" vsli:raw="When this method returns, contains the display name string. This parameter is passed uninitialized.">El resultado que devuelve este método contiene la cadena del nombre para mostrar. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary vsli:raw="Returns the size, in bytes, of the stream needed to save the object.">Devuelve el tamaño en bytes de la secuencia necesaria para guardar el objeto.</summary>
      <param name="pcbSize" vsli:raw="When this method returns, contains a &lt;see langword=&quot;long&quot; /&gt; value indicating the size, in bytes, of the stream needed to save this object. This parameter is passed uninitialized.">El resultado que devuelve este método contiene un valor <see langword="long" /> que indica el tamaño en bytes de la secuencia necesaria para guardar el objeto. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Provides a number representing the time that the object identified by the current moniker was last changed.">Proporciona un número que representa la hora en que se modificó por última vez el objeto identificado por el moniker actual.</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">Referencia al contexto que se utiliza en esta operación de enlace.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">Referencia al moniker a la izquierda del actual, si es que forma parte de un moniker compuesto.</param>
      <param name="pFileTime" vsli:raw="When this method returns, contains the time of the last change. This parameter is passed uninitialized.">El resultado que devuelve este método contiene la hora de la última modificación. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary vsli:raw="Calculates a 32-bit integer using the internal state of the moniker.">Calcula un entero de 32 bits utilizando el estado interno del moniker.</summary>
      <param name="pdwHash" vsli:raw="When this method returns, contains the hash value for this moniker. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el valor hash de este moniker. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Provides a moniker that, when composed to the right of the current moniker or one of similar structure, composes to nothing.">Proporciona un moniker que, al unirse a la derecha del actual o de uno de estructura similar, no crea un moniker compuesto.</summary>
      <param name="ppmk" vsli:raw="When this method returns, contains a moniker that is the inverse of the current moniker. This parameter is passed uninitialized.">El resultado que devuelve este método contiene un moniker que es el inverso del actual. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary vsli:raw="Checks the object for changes since it was last saved.">Comprueba si el objeto ha sufrido cambios desde la última vez que se guardó.</summary>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the object has changed; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">Devuelve un valor <see langword="S_OK" /><see langword="HRESULT" /> si el objeto ha cambiado; de lo contrario, devuelve un valor <see langword="S_FALSE" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Compares the current moniker with a specified moniker and indicates whether they are identical.">Compara el moniker actual con otro especificado e indica si son iguales.</summary>
      <param name="pmkOtherMoniker" vsli:raw="A reference to the moniker to use for comparison.">Referencia al moniker utilizado para la comparación.</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the monikers are identical; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">Devuelve un valor <see langword="S_OK" /><see langword="HRESULT" /> si los monikers son idénticos; de lo contrario, devuelve un valor <see langword="S_FALSE" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Determines whether the object that is identified by the current moniker is currently loaded and running.">Determina si el objeto identificado por este moniker está actualmente cargado y en ejecución.</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">Referencia al contexto que se utiliza en esta operación de enlace.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker if the current moniker is part of a composite.">Referencia al moniker a la izquierda del actual, si es que éste forma parte de un moniker compuesto.</param>
      <param name="pmkNewlyRunning" vsli:raw="A reference to the moniker most recently added to the Running Object Table (ROT).">Referencia al último moniker agregado a la tabla de objetos en ejecución (ROT).</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is running; an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is not running; or an &lt;see langword=&quot;E_UNEXPECTED&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">Devuelve un valor <see langword="S_OK" /><see langword="HRESULT" /> si el moniker se está ejecutando; devuelve un valor <see langword="S_FALSE" /><see langword="HRESULT" /> si el moniker no se está ejecutando; o bien, devuelve un valor <see langword="E_UNEXPECTED" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary vsli:raw="Indicates whether this moniker is of one of the system-supplied moniker classes.">Indica si este moniker es de una de las clases moniker suministradas por el sistema.</summary>
      <param name="pdwMksys" vsli:raw="When this method returns, contains a pointer to an integer that is one of the values from the &lt;see langword=&quot;MKSYS&quot; /&gt; enumeration, and refers to one of the COM moniker classes. This parameter is passed uninitialized.">El resultado que devuelve este método contiene un puntero a un entero que es uno de los valores de la enumeración <see langword="MKSYS" /> y hace referencia a una de las clases moniker COM. Este parámetro se pasa sin inicializar.</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is a system moniker; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">Devuelve un valor <see langword="S_OK" /><see langword="HRESULT" /> si el moniker es del sistema; de lo contrario, devuelve un valor <see langword="S_FALSE" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary vsli:raw="Initializes an object from the stream where it was previously saved.">Inicializa un objeto desde la secuencia donde se guardó previamente.</summary>
      <param name="pStm" vsli:raw="The stream that the object is loaded from.">Secuencia desde donde se carga el objeto.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Reads as many characters of the specified display name as the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)&quot; /&gt; understands and builds a moniker corresponding to the portion read.">Lee todos los caracteres del nombre para mostrar que es capaz de entender <see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)" /> y crea un moniker correspondiente a la parte leída.</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">Referencia al contexto que se utiliza en esta operación de enlace.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker that has been built from the display name up to this point.">Referencia al moniker creado hasta este punto a partir del nombre para mostrar.</param>
      <param name="pszDisplayName" vsli:raw="A reference to the string containing the remaining display name to parse.">Referencia a la cadena que contiene el resto del nombre de presentación que se va a analizar.</param>
      <param name="pchEaten" vsli:raw="When this method returns, contains the number of characters that were consumed in parsing &lt;paramref name=&quot;pszDisplayName&quot; /&gt;. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el número de caracteres consumidos al analizar <paramref name="pszDisplayName" />. Este parámetro se pasa sin inicializar.</param>
      <param name="ppmkOut" vsli:raw="When this method returns, contains a reference to the moniker that was built from &lt;paramref name=&quot;pszDisplayName&quot; /&gt;. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al moniker creado a partir de <paramref name="pszDisplayName" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Returns a reduced moniker, which is another moniker that refers to the same object as the current moniker but can be bound with equal or greater efficiency.">Devuelve un moniker reducido, es decir, un moniker que, haciendo referencia al mismo objeto que el moniker actual, puede enlazarse con igual o más eficiencia.</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context to use in this binding operation.">Referencia a la interfaz <see langword="IBindCtx" /> en el objeto de contexto que se ha de utilizar en esta operación de enlace.</param>
      <param name="dwReduceHowFar" vsli:raw="A value that specifies how far the current moniker should be reduced.">Valor que especifica en qué medida ha de reducirse el moniker actual.</param>
      <param name="ppmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker.">Referencia al moniker a la izquierda del actual.</param>
      <param name="ppmkReduced" vsli:raw="When this method returns, contains a reference to the reduced form of the current moniker, which can be &lt;see langword=&quot;null&quot; /&gt; if an error occurs or if the current moniker is reduced to nothing. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la forma reducida del moniker actual; ésta podría ser <see langword="null" /> en caso de que se produzca un error o de que el moniker quede reducido a nada. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Supplies a moniker that, when appended to the current moniker (or one with a similar structure), yields the specified moniker.">Proporciona un moniker que, al anexarse al actual (o a uno de estructura similar), ofrece el moniker especificado.</summary>
      <param name="pmkOther" vsli:raw="A reference to the moniker to which a relative path should be taken.">Referencia al moniker del que se debería obtener la ruta relativa.</param>
      <param name="ppmkRelPath" vsli:raw="When this method returns, contains a reference to the relative moniker. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al moniker relativo. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary vsli:raw="Saves an object to the specified stream.">Guarda un objeto en la secuencia especificada.</summary>
      <param name="pStm" vsli:raw="The stream to which the object is saved.">Secuencia en la que se guarda el objeto.</param>
      <param name="fClearDirty" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to clear the modified flag after the save is complete; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para borrar la marca modificada una vez guardado el objeto; de lo contrario, <see langword="false" /></param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary vsli:raw="Defines the attributes of an implemented or inherited interface of a type.">Define los atributos de una interfaz implementada o heredada de un tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary vsli:raw="The interface or dispinterface represents the default for the source or sink.">La interfaz o la interfaz dispinterface representa el valor predeterminado para el origen o el receptor.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary vsli:raw="Sinks receive events through the virtual function table (VTBL).">Los receptores reciben eventos a través de la tabla de función virtual (VTBL).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary vsli:raw="The member should not be displayed or programmable by users.">Los usuarios no deben mostrar ni programar los miembros.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary vsli:raw="This member of a coclass is called rather than implemented.">Este miembro de una coclase es llamado y no implementado.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary vsli:raw="Specifies how to invoke a function by &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">Especifica cómo invocar una función mediante <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary vsli:raw="The member is called using a normal function invocation syntax.">Se llama al miembro mediante una sintaxis normal de llamada a una función.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary vsli:raw="The function is invoked using a normal property access syntax.">Se invoca la función mediante una sintaxis normal de acceso a la propiedad.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary vsli:raw="The function is invoked using a property value assignment syntax.">Se invoca la función mediante una sintaxis de asignación de valor de propiedad.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary vsli:raw="The function is invoked using a property reference assignment syntax.">Se invoca la función mediante una sintaxis de asignación de referencia de propiedad.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IPersistFile&quot; /&gt; interface, with functionality from &lt;see langword=&quot;IPersist&quot; /&gt;.">Proporciona la definición administrada de la interfaz <see langword="IPersistFile" />, con funcionalidad desde <see langword="IPersist" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary vsli:raw="Retrieves the class identifier (CLSID) of an object.">Recupera el identificador de clase (CLSID) de un objeto.</summary>
      <param name="pClassID" vsli:raw="When this method returns, contains a reference to the CLSID. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al CLSID. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary vsli:raw="Retrieves either the absolute path to the current working file of the object or, if there is no current working file, the default file name prompt of the object.">Recupera la ruta absoluta del archivo de trabajo actual del objeto o, si no existe ningún archivo de trabajo, la extensión del nombre de archivo predeterminado del objeto.</summary>
      <param name="ppszFileName" vsli:raw="When this method returns, contains the address of a pointer to a zero-terminated string containing the path for the current file, or the default file name prompt (such as *.txt). This parameter is passed uninitialized.">El resultado que devuelve este método contiene la dirección de un puntero a una cadena terminada en cero con la ruta del archivo actual o la extensión del nombre de archivo predeterminado (por ejemplo, *.txt). Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary vsli:raw="Checks an object for changes since it was last saved to its current file.">Comprueba si un objeto se ha modificado desde la última vez que se guardó en el archivo actual.</summary>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the file has changed since it was last saved; &lt;see langword=&quot;S_FALSE&quot; /&gt; if the file has not changed since it was last saved.">
        <see langword="S_OK" /> si el archivo se ha modificado desde que se guardó por última vez; <see langword="S_FALSE" /> en caso contrario.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary vsli:raw="Opens the specified file and initializes an object from the file contents.">Abre el archivo especificado e inicializa un objeto del contenido del archivo.</summary>
      <param name="pszFileName" vsli:raw="A zero-terminated string containing the absolute path of the file to open.">Cadena terminada en cero que contiene la ruta de acceso absoluta al archivo que se va a abrir.</param>
      <param name="dwMode" vsli:raw="A combination of values from the &lt;see langword=&quot;STGM&quot; /&gt; enumeration to indicate the access mode in which to open &lt;paramref name=&quot;pszFileName&quot; /&gt;.">Combinación de valores de la enumeración <see langword="STGM" /> para indicar el modo de acceso para abrir <paramref name="pszFileName" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary vsli:raw="Saves a copy of the object into the specified file.">Guarda una copia del objeto en el archivo especificado.</summary>
      <param name="pszFileName" vsli:raw="A zero-terminated string containing the absolute path of the file to which the object is saved.">Cadena terminada en cero que contiene la ruta de acceso absoluta del archivo en el que se va a guardar el objeto.</param>
      <param name="fRemember" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to used the &lt;paramref name=&quot;pszFileName&quot; /&gt; parameter as the current working file; otherwise &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> para utilizar el parámetro <paramref name="pszFileName" /> como el archivo de trabajo actual; de lo contrario es <see langword="false" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary vsli:raw="Notifies the object that it can write to its file.">Notifica al objeto que puede escribir en el archivo.</summary>
      <param name="pszFileName" vsli:raw="The absolute path of the file where the object was previously saved.">Ruta de acceso absoluta del archivo donde se guardó anteriormente el objeto.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IRunningObjectTable&quot; /&gt; interface.">Proporciona la definición administrada de la interfaz <see langword="IRunningObjectTable" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Enumerates the objects currently registered as running.">Enumera los objetos actualmente registrados como en ejecución.</summary>
      <param name="ppenumMoniker" vsli:raw="When this method returns, contains the new enumerator for the Running Object Table (ROT). This parameter is passed uninitialized.">El resultado que devuelve este método contiene el nuevo enumerador de la Tabla de objetos en ejecución (ROT). Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary vsli:raw="Returns the registered object if the supplied object name is registered as running.">Devuelve el objeto registrado si el nombre de objeto suministrado está registrado como en ejecución.</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">Referencia al moniker que se va a buscar en la Tabla de objetos en ejecución (ROT).</param>
      <param name="ppunkObject" vsli:raw="When this method returns, contains the requested running object. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el objeto en ejecución solicitado. Este parámetro se pasa sin inicializar.</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">Valor <see langword="HRESULT" /> que indica si la operación se ha realizado correctamente o con errores.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Searches for this moniker in the Running Object Table (ROT) and reports the recorded time of change, if present.">Busca este moniker en la Tabla de objetos en ejecución (ROT) y notifica la hora de modificación registrada, si existe.</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">Referencia al moniker que se va a buscar en la Tabla de objetos en ejecución (ROT).</param>
      <param name="pfiletime" vsli:raw="When this object returns, contains the objects last change time. This parameter is passed uninitialized.">El resultado que devuelve este objeto contiene la hora del último cambio aplicado a los objetos. Este parámetro se pasa sin inicializar.</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">Valor <see langword="HRESULT" /> que indica si la operación se ha realizado correctamente o con errores.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Determines whether the specified moniker is currently registered in the Running Object Table (ROT).">Determina si el moniker especificado está actualmente registrado en la Tabla de objetos en ejecución (ROT).</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">Referencia al moniker que se va a buscar en la Tabla de objetos en ejecución (ROT).</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">Valor <see langword="HRESULT" /> que indica si la operación se ha realizado correctamente o con errores.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Notes the time that a particular object changed so &lt;see langword=&quot;IMoniker::GetTimeOfLastChange&quot; /&gt; can report an appropriate change time.">Anota la hora a la que se modificó un objeto determinado de modo que <see langword="IMoniker::GetTimeOfLastChange" /> pueda informar de la hora de modificación correcta.</summary>
      <param name="dwRegister" vsli:raw="The Running Object Table (ROT) entry of the changed object.">Entrada de la Tabla de objetos en ejecución (ROT) correspondiente al objeto modificado.</param>
      <param name="pfiletime" vsli:raw="A reference to the object's last change time.">Referencia a la hora en que se modificó el objeto por última vez.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Registers that the supplied object has entered the running state.">Registra que el objeto suministrado ha entrado en estado de ejecución.</summary>
      <param name="grfFlags" vsli:raw="Specifies whether the Running Object Table's (ROT) reference to &lt;paramref name=&quot;punkObject&quot; /&gt; is weak or strong, and controls access to the object through its entry in the ROT.">Especifica si la referencia de la Tabla de objetos en ejecución (ROT) a <paramref name="punkObject" /> es fuerte o débil, y controla el acceso al objeto mediante su entrada en la tabla ROT.</param>
      <param name="punkObject" vsli:raw="A reference to the object being registered as running.">Referencia al objeto que se va a registrar como en ejecución.</param>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker that identifies &lt;paramref name=&quot;punkObject&quot; /&gt;.">Referencia al moniker que identifica <paramref name="punkObject" />.</param>
      <returns vsli:raw="A value that can be used to identify this ROT entry in subsequent calls to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)&quot; /&gt;.">Valor que se puede usar para identificar esta entrada de la tabla ROT en llamadas posteriores a <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)" /> o <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary vsli:raw="Unregisters the specified object from the Running Object Table (ROT).">Elimina del registro el objeto especificado en la Tabla de objetos en ejecución (ROT).</summary>
      <param name="dwRegister" vsli:raw="The Running Object Table (ROT) entry to revoke.">Entrada de la Tabla de objetos en ejecución (ROT) que se va a revocar.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IStream&quot; /&gt; interface, with &lt;see langword=&quot;ISequentialStream&quot; /&gt; functionality.">Proporciona la definición administrada de la interfaz <see langword="IStream" />, con funcionalidad de <see langword="ISequentialStream" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary vsli:raw="Creates a new stream object with its own seek pointer that references the same bytes as the original stream.">Crea un nuevo objeto de secuencia con su propio puntero de búsqueda que hace referencia a los mismos bytes que la secuencia original.</summary>
      <param name="ppstm" vsli:raw="When this method returns, contains the new stream object. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el nuevo objeto de secuencia. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary vsli:raw="Ensures that any changes made to a stream object that is open in transacted mode are reflected in the parent storage.">Garantiza que los cambios realizados en un objeto de secuencia abierto en modo de transacción se reflejen en el almacenamiento principal.</summary>
      <param name="grfCommitFlags" vsli:raw="A value that controls how the changes for the stream object are committed.">Controla la forma en que se confirman los cambios realizados en un objeto de secuencia.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.">Copia un número de bytes especificado desde el puntero de búsqueda actual de la secuencia hasta el puntero de búsqueda actual de otra secuencia.</summary>
      <param name="pstm" vsli:raw="A reference to the destination stream.">Referencia a la secuencia de destino.</param>
      <param name="cb" vsli:raw="The number of bytes to copy from the source stream.">Número de bytes que se van a copiar desde la secuencia de origen.</param>
      <param name="pcbRead" vsli:raw="On successful return, contains the actual number of bytes read from the source.">Contiene el número real de bytes leídos en el origen, si la devolución es correcta.</param>
      <param name="pcbWritten" vsli:raw="On successful return, contains the actual number of bytes written to the destination.">Contiene el número real de bytes escritos en el destino, si la devolución es correcta.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary vsli:raw="Restricts access to a specified range of bytes in the stream.">Restringe el acceso a un intervalo de bytes especificado de la secuencia.</summary>
      <param name="libOffset" vsli:raw="The byte offset for the beginning of the range.">Desplazamiento de bytes al comienzo del intervalo.</param>
      <param name="cb" vsli:raw="The length of the range, in bytes, to restrict.">Longitud, en bytes, del intervalo que se va a restringir.</param>
      <param name="dwLockType" vsli:raw="The requested restrictions on accessing the range.">Restricciones solicitadas al tener acceso al intervalo.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary vsli:raw="Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.">Lee un número específico de bytes del objeto de secuencia en memoria, comenzando por el puntero de búsqueda actual.</summary>
      <param name="pv" vsli:raw="When this method returns, contains the data read from the stream. This parameter is passed uninitialized.">El resultado que devuelve este método contiene la lectura de los datos de la secuencia. Este parámetro se pasa sin inicializar.</param>
      <param name="cb" vsli:raw="The number of bytes to read from the stream object.">Número de bytes que se van a leer en el objeto de secuencia.</param>
      <param name="pcbRead" vsli:raw="A pointer to a &lt;see langword=&quot;ULONG&quot; /&gt; variable that receives the actual number of bytes read from the stream object.">Puntero a una variable <see langword="ULONG" /> que recibe el número real de bytes leídos en el objeto de secuencia.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary vsli:raw="Discards all changes that have been made to a transacted stream since the last &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)&quot; /&gt; call.">Descarta todos los cambios realizados en una secuencia de transacción desde la última llamada a <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary vsli:raw="Changes the seek pointer to a new location relative to the beginning of the stream, to the end of the stream, or to the current seek pointer.">Cambia el puntero de búsqueda a una nueva ubicación relativa al principio de la secuencia, al final de la secuencia o al puntero de búsqueda actual.</summary>
      <param name="dlibMove" vsli:raw="The displacement to add to &lt;paramref name=&quot;dwOrigin&quot; /&gt;.">Desplazamiento que se va a agregar a <paramref name="dwOrigin" />.</param>
      <param name="dwOrigin" vsli:raw="The origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file.">Especifica el origen de la búsqueda. El origen puede ser el principio del archivo, el puntero de búsqueda actual o el final del archivo.</param>
      <param name="plibNewPosition" vsli:raw="On successful return, contains the offset of the seek pointer from the beginning of the stream.">Contiene el desplazamiento del puntero de búsqueda desde el principio de la secuencia, si la devolución es correcta.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary vsli:raw="Changes the size of the stream object.">Cambia el tamaño del objeto de secuencia.</summary>
      <param name="libNewSize" vsli:raw="The new size of the stream as a number of bytes.">Especifica el nuevo tamaño de la secuencia como un número de bytes.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.STATSTG&quot; /&gt; structure for this stream.">Recupera la estructura <see cref="T:System.Runtime.InteropServices.STATSTG" /> de esta secuencia.</summary>
      <param name="pstatstg" vsli:raw="When this method returns, contains a &lt;see langword=&quot;STATSTG&quot; /&gt; structure that describes this stream object. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una estructura <see langword="STATSTG" /> que describe este objeto de secuencia. Este parámetro se pasa sin inicializar.</param>
      <param name="grfStatFlag" vsli:raw="Members in the &lt;see langword=&quot;STATSTG&quot; /&gt; structure that this method does not return, thus saving some memory allocation operations.">Miembros de la estructura <see langword="STATSTG" /> que no devuelve este método, de modo que se ahorran algunas operaciones de asignación de memoria.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary vsli:raw="Removes the access restriction on a range of bytes previously restricted with the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)&quot; /&gt; method.">Quita la restricción de acceso de un intervalo de bytes previamente restringido con el método <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" />.</summary>
      <param name="libOffset" vsli:raw="The byte offset for the beginning of the range.">Desplazamiento de bytes al comienzo del intervalo.</param>
      <param name="cb" vsli:raw="The length, in bytes, of the range to restrict.">Longitud, en bytes, del intervalo que se va a restringir.</param>
      <param name="dwLockType" vsli:raw="The access restrictions previously placed on the range.">Restricciones de acceso que existían previamente en el intervalo.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a specified number of bytes into the stream object starting at the current seek pointer.">Escribe un número especificado de bytes en el objeto de secuencia, comenzando por el puntero de búsqueda actual.</summary>
      <param name="pv" vsli:raw="The buffer to write this stream to.">Búfer donde se va a escribir esta secuencia.</param>
      <param name="cb" vsli:raw="The number of bytes to write to the stream.">Número de bytes que se escribirán en la secuencia.</param>
      <param name="pcbWritten" vsli:raw="On successful return, contains the actual number of bytes written to the stream object. If the caller sets this pointer to &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;, this method does not provide the actual number of bytes written.">Contiene el número real de bytes escritos en el objeto de secuencia, si la devolución es correcta. Si el llamador establece este puntero en <see cref="F:System.IntPtr.Zero" />, este método no proporciona el número real de bytes escritos.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface.">Proporciona la definición administrada de la interfaz <see langword="ITypeComp" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary vsli:raw="Maps a name to a member of a type, or binds global variables and functions contained in a type library.">Asigna un nombre a un miembro de un tipo o enlaza variables y funciones globales de una biblioteca de tipos.</summary>
      <param name="szName" vsli:raw="The name to bind.">Nombre que se va a enlazar.</param>
      <param name="lHashVal" vsli:raw="A hash value for &lt;paramref name=&quot;szName&quot; /&gt; computed by &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt;.">Valor hash para <paramref name="szName" /> calculado por <see langword="LHashValOfNameSys" />.</param>
      <param name="wFlags" vsli:raw="A flags word containing one or more of the invoke flags defined in the &lt;see langword=&quot;INVOKEKIND&quot; /&gt; enumeration.">Palabra de marcadores que contiene uno o varios de los marcadores de llamada definidos en la enumeración <see langword="INVOKEKIND" />.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains a reference to the type description that contains the item to which it is bound, if a &lt;see langword=&quot;FUNCDESC&quot; /&gt; or &lt;see langword=&quot;VARDESC&quot; /&gt; was returned. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la descripción del tipo que contiene el elemento al que está enlazado, si el valor devuelto es <see langword="FUNCDESC" /> o <see langword="VARDESC" />. Este parámetro se pasa sin inicializar.</param>
      <param name="pDescKind" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;DESCKIND&quot; /&gt; enumerator that indicates whether the name bound-to is a &lt;see langword=&quot;VARDESC&quot; /&gt;, &lt;see langword=&quot;FUNCDESC&quot; /&gt;, or &lt;see langword=&quot;TYPECOMP&quot; /&gt;. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a un enumerador <see langword="DESCKIND" /> que indica si el nombre enlazado es <see langword="VARDESC" />, <see langword="FUNCDESC" /> o <see langword="TYPECOMP" />. Este parámetro se pasa sin inicializar.</param>
      <param name="pBindPtr" vsli:raw="When this method returns, contains a reference to the bound-to &lt;see langword=&quot;VARDESC&quot; /&gt;, &lt;see langword=&quot;FUNCDESC&quot; /&gt;, or &lt;see langword=&quot;ITypeComp&quot; /&gt; interface. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a <see langword="VARDESC" /> o <see langword="FUNCDESC" />, a los que está enlazado, o a la interfaz <see langword="ITypeComp" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Binds to the type descriptions contained within a type library.">Enlaza con las descripciones de tipo que se encuentran dentro de una biblioteca de tipos.</summary>
      <param name="szName" vsli:raw="The name to bind.">Nombre que se va a enlazar.</param>
      <param name="lHashVal" vsli:raw="A hash value for &lt;paramref name=&quot;szName&quot; /&gt; determined by &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt;.">Valor hash para <paramref name="szName" /> determinado por <see langword="LHashValOfNameSys" />.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains a reference to an &lt;see langword=&quot;ITypeInfo&quot; /&gt; of the type to which &lt;paramref name=&quot;szName&quot; /&gt; was bound. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a <see langword="ITypeInfo" /> del tipo al que se enlazó <paramref name="szName" />. Este parámetro se pasa sin inicializar.</param>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to an &lt;see langword=&quot;ITypeComp&quot; /&gt; variable. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a una variable <see langword="ITypeComp" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary vsli:raw="Provides the managed definition of the Component Automation ITypeInfo interface.">Proporciona la definición administrada de la interfaz ITypeInfo de automatización de componentes.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary vsli:raw="Retrieves the addresses of static functions or variables, such as those defined in a DLL.">Recupera las direcciones de variables o funciones estáticas, como las que se definen en un archivo DLL.</summary>
      <param name="memid" vsli:raw="The member ID of the &lt;see langword=&quot;static&quot; /&gt; member's address to retrieve.">Identificador de miembro de la dirección del miembro <see langword="static" /> que se va a recuperar.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies whether the member is a property, and if so, what kind.">Uno de los valores <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> que especifica si el miembro es una propiedad, y en tal caso, de qué tipo.</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;static&quot; /&gt; member. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al miembro <see langword="static" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary vsli:raw="Creates a new instance of a type that describes a component class (coclass).">Crea una nueva instancia de un tipo que describe una clase de componentes (coclase).</summary>
      <param name="pUnkOuter" vsli:raw="The object that acts as the controlling &lt;see langword=&quot;IUnknown&quot; /&gt;.">Objeto que actúa como <see langword="IUnknown" /> de control.</param>
      <param name="riid" vsli:raw="The IID of the interface that the caller uses to communicate with the resulting object.">IID de la interfaz que el llamador utiliza para comunicarse con el objeto resultante.</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the created object. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al objeto creado. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary vsli:raw="Retrieves the type library that contains this type description and its index within that type library.">Recupera la biblioteca de tipos que contiene esta descripción de tipos y su índice en dicha biblioteca.</summary>
      <param name="ppTLB" vsli:raw="When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.">El resultado que devuelve este método incluye una referencia a la biblioteca de tipos contenedora. Este parámetro se pasa sin inicializar.</param>
      <param name="pIndex" vsli:raw="When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.">El resultado que devuelve este método incluye una referencia al índice de la descripción de tipos de la biblioteca de tipos contenedora. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Retrieves a description or specification of an entry point for a function in a DLL.">Recupera una descripción o especificación de un punto de entrada para una función de un archivo DLL.</summary>
      <param name="memid" vsli:raw="The ID of the member function whose DLL entry description is to be returned.">Identificador de la función miembro cuya descripción de entrada de archivo DLL se va a devolver.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by &lt;paramref name=&quot;memid&quot; /&gt;.">Uno de los valores <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> que especifica el tipo de miembro identificado por <paramref name="memid" />.</param>
      <param name="pBstrDllName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;paramref name=&quot;pBstrDllName&quot; /&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the DLL.">Si no es <see langword="null" />, la función establece <paramref name="pBstrDllName" /> en un <see langword="BSTR" /> que contiene el nombre del archivo DLL.</param>
      <param name="pBstrName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;c&gt;lpbstrName&lt;/c&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the entry point.">Si no es <see langword="null" />, la función establece <c>lpbstrName</c> en un <see langword="BSTR" /> que contiene el nombre del punto de entrada.</param>
      <param name="pwOrdinal" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, and the function is defined by an ordinal, then &lt;c&gt;lpwOrdinal&lt;/c&gt; is set to point to the ordinal.">Si no es <see langword="null" /> y la función está definida por un ordinal, <c>lpwOrdinal</c> se establece de forma que apunte al ordinal.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.">Recupera la cadena de documentación, el nombre y la ruta de acceso completos del archivo de Ayuda y el identificador de contexto del tema de Ayuda de una descripción de tipos especificada.</summary>
      <param name="index" vsli:raw="The ID of the member whose documentation is to be returned.">Identificador del miembro cuya documentación se va a devolver.</param>
      <param name="strName" vsli:raw="When this method returns, contains the name of the item method. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el nombre del método del elemento. Este parámetro se pasa sin inicializar.</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">El resultado que devuelve este método contiene la cadena de documentación para el elemento especificado. Este parámetro se pasa sin inicializar.</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.">El resultado que devuelve este método incluye una referencia al contexto de Ayuda asociado al elemento especificado. Este parámetro se pasa sin inicializar.</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el nombre completo del archivo de Ayuda. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure that contains information about a specified function.">Recupera la estructura <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> que contiene información acerca de una función especificada.</summary>
      <param name="index" vsli:raw="The index of the function description to return.">Índice de la descripción de función que se va a devolver.</param>
      <param name="ppFuncDesc" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure that describes the specified function. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la estructura <see langword="FUNCDESC" /> que describe la función especificada. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary vsli:raw="Maps between member names and member IDs, and parameter names and parameter IDs.">Realiza asignaciones entre nombres e identificadores de miembro, y nombres e identificadores de parámetros.</summary>
      <param name="rgszNames" vsli:raw="An array of names to map.">Matriz de nombres que se van a asignar.</param>
      <param name="cNames" vsli:raw="The count of names to map.">Número de nombres que se van a asignar.</param>
      <param name="pMemId" vsli:raw="When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la matriz en la que se encuentran las asignaciones de nombre. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.IMPLTYPEFLAGS&quot; /&gt; value for one implemented interface or base interface in a type description.">Recupera el valor de <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> para una interfaz implementada o interfaz base en una descripción de tipos.</summary>
      <param name="index" vsli:raw="The index of the implemented interface or base interface.">Índice de la interfaz implementada o interfaz base.</param>
      <param name="pImplTypeFlags" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;IMPLTYPEFLAGS&quot; /&gt; enumeration. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la enumeración <see langword="IMPLTYPEFLAGS" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary vsli:raw="Retrieves marshaling information.">Recupera información sobre el cálculo de referencias.</summary>
      <param name="memid" vsli:raw="The member ID that indicates which marshaling information is needed.">Identificador de miembro que indica la información sobre cálculo de referencias que es necesaria.</param>
      <param name="pBstrMops" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;opcode&quot; /&gt; string used in marshaling the fields of the structure described by the referenced type description, or returns &lt;see langword=&quot;null&quot; /&gt; if there is no information to return. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la cadena <see langword="opcode" /> utilizada para calcular las referencias de los campos de la estructura descrita por la descripción del tipo de referencia, o bien es <see langword="null" /> si no hay ninguna información que devolver. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.">Recupera la variable con el identificador de miembro especificado (o el nombre de la propiedad o método y sus parámetros) que se corresponde con el identificador de función especificado.</summary>
      <param name="memid" vsli:raw="The ID of the member whose name (or names) is to be returned.">Identificador del miembro cuyo nombre o nombres se van a devolver.</param>
      <param name="rgBstrNames" vsli:raw="When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el nombre o nombres asociados al miembro. Este parámetro se pasa sin inicializar.</param>
      <param name="cMaxNames" vsli:raw="The length of the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array.">Longitud de la matriz <paramref name="rgBstrNames" />.</param>
      <param name="pcNames" vsli:raw="When this method returns, contains the number of names in the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el número de nombres que hay en la matriz <paramref name="rgBstrNames" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the referenced type descriptions if a type description references other type descriptions.">Recupera las descripciones del tipo de referencia si una descripción de tipo hace referencia a otras descripciones de tipo.</summary>
      <param name="hRef" vsli:raw="A handle to the referenced type description to return.">Identificador de la descripción del tipo de referencia que se va a devolver.</param>
      <param name="ppTI" vsli:raw="When this method returns, contains the referenced type description. This parameter is passed uninitialized.">El resultado que devuelve este método contiene la descripción del tipo de referencia. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the type description of the implemented interface types if a type description describes a COM class.">Recupera la descripción de tipo de los tipos de interfaz implementados si una descripción de tipo describe una clase COM.</summary>
      <param name="index" vsli:raw="The index of the implemented type whose handle is returned.">Índice del tipo implementado cuyo identificador se devuelve.</param>
      <param name="href" vsli:raw="When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a un identificador para la interfaz implementada. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure that contains the attributes of the type description.">Recupera una estructura <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> que contiene los atributos de la descripción de tipo.</summary>
      <param name="ppTypeAttr" vsli:raw="When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.">El resultado que devuelve este método incluye una referencia a la estructura que contiene los atributos de esta descripción de tipo. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface for the type description, which enables a client compiler to bind to the type description's members.">Recupera la interfaz <see langword="ITypeComp" /> de la descripción de tipo, que permite a un compilador cliente enlazarse a los miembros de la descripción de tipo.</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface of the containing type library. This parameter is passed uninitialized.">El resultado que devuelve este método incluye una referencia a la interfaz <see langword="ITypeComp" /> de la biblioteca de tipos contenedora. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable.">Recupera una estructura <see langword="VARDESC" /> que describe la variable especificada.</summary>
      <param name="index" vsli:raw="The index of the variable description to return.">Índice de la descripción de variable que se va a devolver.</param>
      <param name="ppVarDesc" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la estructura <see langword="VARDESC" /> que describe la variable especificada. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary vsli:raw="Invokes a method, or accesses a property of an object, that implements the interface described by the type description.">Invoca a un método u obtiene acceso a una propiedad de un objeto, que implementa la interfaz descrita por la descripción de tipo.</summary>
      <param name="pvInstance" vsli:raw="A reference to the interface described by this type description.">Referencia a la interfaz descrita por esta descripción de tipo.</param>
      <param name="memid" vsli:raw="A value that identifies the interface member.">Valor que identifica el miembro de interfaz.</param>
      <param name="wFlags" vsli:raw="Flags that describe the context of the invoke call.">Marcadores que describen el contexto de la llamada de invocación.</param>
      <param name="pDispParams" vsli:raw="A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.">Referencia a una estructura que contiene una matriz de argumentos, una matriz de identificadores de envío (DISPID) para argumentos con nombre y recuentos del número de elementos de cada matriz.</param>
      <param name="pVarResult" vsli:raw="A reference to the location at which the result is to be stored. If &lt;paramref name=&quot;wFlags&quot; /&gt; specifies &lt;see langword=&quot;DISPATCH_PROPERTYPUT&quot; /&gt; or &lt;see langword=&quot;DISPATCH_PROPERTYPUTREF&quot; /&gt;, &lt;paramref name=&quot;pVarResult&quot; /&gt; is ignored. Set to &lt;see langword=&quot;null&quot; /&gt; if no result is desired.">Referencia a la ubicación donde se va a almacenar el resultado. Si <paramref name="wFlags" /> especifica <see langword="DISPATCH_PROPERTYPUT" /> o <see langword="DISPATCH_PROPERTYPUTREF" />, <paramref name="pVarResult" /> se omite. Se establece en <see langword="null" /> si no se desea ningún resultado.</param>
      <param name="pExcepInfo" vsli:raw="A pointer to an exception information structure, which is filled in only if &lt;see langword=&quot;DISP_E_EXCEPTION&quot; /&gt; is returned.">Puntero a una estructura de información sobre excepciones, que sólo se rellena si se devuelve <see langword="DISP_E_EXCEPTION" />.</param>
      <param name="puArgErr" vsli:raw="If &lt;see langword=&quot;Invoke&quot; /&gt; returns &lt;see langword=&quot;DISP_E_TYPEMISMATCH&quot; /&gt;, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates the index within &lt;c&gt;rgvarg&lt;/c&gt; of the argument with the incorrect type. If more than one argument returns an error, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates only the first argument with an error. This parameter is passed uninitialized.">Si <see langword="Invoke" /> devuelve <see langword="DISP_E_TYPEMISMATCH" />, <paramref name="puArgErr" /> indica el índice en <c>rgvarg</c> del argumento con el tipo incorrecto. Si hay más de un argumento que devuelva un error, <paramref name="puArgErr" /> indica sólo el primer argumento con error. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">Libera una estructura <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> previamente devuelta por el método <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" />.</summary>
      <param name="pFuncDesc" vsli:raw="A reference to the &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure to release.">Referencia a la estructura <see langword="FUNCDESC" /> que se va a liberar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)&quot; /&gt; method.">Libera una estructura <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> previamente devuelta por el método <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" />.</summary>
      <param name="pTypeAttr" vsli:raw="A reference to the &lt;see langword=&quot;TYPEATTR&quot; /&gt; structure to release.">Referencia a la estructura <see langword="TYPEATTR" /> que se va a liberar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see langword=&quot;VARDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">Libera una estructura <see langword="VARDESC" /> previamente devuelta por el método <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" />.</summary>
      <param name="pVarDesc" vsli:raw="A reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure to release.">Referencia a la estructura <see langword="VARDESC" /> que se va a liberar.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeInfo2&quot; /&gt; interface.">Proporciona la definición administrada de la interfaz <see langword="ITypeInfo2" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary vsli:raw="Retrieves the addresses of static functions or variables, such as those defined in a DLL.">Recupera las direcciones de variables o funciones estáticas, como las que se definen en un archivo DLL.</summary>
      <param name="memid" vsli:raw="The member ID of the &lt;see langword=&quot;static&quot; /&gt; member's address to retrieve.">Identificador de miembro de la dirección del miembro <see langword="static" /> que se va a recuperar.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies whether the member is a property, and if so, what kind.">Uno de los valores <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> que especifica si el miembro es una propiedad, y en tal caso, de qué tipo.</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;static&quot; /&gt; member. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al miembro <see langword="static" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary vsli:raw="Creates a new instance of a type that describes a component class (coclass).">Crea una nueva instancia de un tipo que describe una clase de componentes (coclase).</summary>
      <param name="pUnkOuter" vsli:raw="An object that acts as the controlling &lt;see langword=&quot;IUnknown&quot; /&gt;.">Objeto que actúa como <see langword="IUnknown" /> de control.</param>
      <param name="riid" vsli:raw="The IID of the interface that the caller uses to communicate with the resulting object.">IID de la interfaz que el llamador utiliza para comunicarse con el objeto resultante.</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the created object. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia al objeto creado. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary vsli:raw="Gets all custom data items for the library.">Obtiene todos los elementos de datos personalizados de la biblioteca.</summary>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">Un puntero a <see langword="CUSTDATA" />, que contiene todos los elementos de datos personalizados.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all custom data from the specified function.">Obtiene todos los datos personalizados de la función especificada.</summary>
      <param name="index" vsli:raw="The index of the function to get the custom data for.">Índice de la función para la que se obtienen los datos personalizados.</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">Un puntero a <see langword="CUSTDATA" />, que contiene todos los elementos de datos personalizados.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all custom data for the specified implementation type.">Obtiene todos los datos personalizados para el tipo de implementación especificado.</summary>
      <param name="index" vsli:raw="The index of the implementation type for the custom data.">El índice del tipo de implementación para los datos personalizados.</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt; which holds all custom data items.">Un puntero a <see langword="CUSTDATA" />, que contiene todos los elementos de datos personalizados.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all of the custom data for the specified function parameter.">Obtiene todos los datos personalizados para el parámetro de la función especificada.</summary>
      <param name="indexFunc" vsli:raw="The index of the function to get the custom data for.">Índice de la función para la que se obtienen los datos personalizados.</param>
      <param name="indexParam" vsli:raw="The index of the parameter of this function to get the custom data for.">Índice del parámetro de esta función para el que se obtienen los datos personalizados.</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">Un puntero a <see langword="CUSTDATA" />, que contiene todos los elementos de datos personalizados.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets the variable for the custom data.">Obtiene la variable de los datos personalizados.</summary>
      <param name="index" vsli:raw="The index of the variable to get the custom data for.">Índice de la variable para la que se obtienen los datos personalizados.</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">Un puntero a <see langword="CUSTDATA" />, que contiene todos los elementos de datos personalizados.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary vsli:raw="Retrieves the type library that contains this type description and its index within that type library.">Recupera la biblioteca de tipos que contiene esta descripción de tipos y su índice en dicha biblioteca.</summary>
      <param name="ppTLB" vsli:raw="When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.">El resultado que devuelve este método incluye una referencia a la biblioteca de tipos contenedora. Este parámetro se pasa sin inicializar.</param>
      <param name="pIndex" vsli:raw="When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.">El resultado que devuelve este método incluye una referencia al índice de la descripción de tipos de la biblioteca de tipos contenedora. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data.">Obtiene los datos personalizados.</summary>
      <param name="guid" vsli:raw="The GUID used to identify the data.">GUID utilizado para identificar los datos.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">Cuando este método devuelve un resultado, contiene un <see langword="Object" /> que especifica dónde se colocan los datos recuperados. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Retrieves a description or specification of an entry point for a function in a DLL.">Recupera una descripción o especificación de un punto de entrada para una función de un archivo DLL.</summary>
      <param name="memid" vsli:raw="The ID of the member function whose DLL entry description is to be returned.">Identificador de la función miembro cuya descripción de entrada de archivo DLL se va a devolver.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by &lt;paramref name=&quot;memid&quot; /&gt;.">Uno de los valores <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> que especifica el tipo de miembro identificado por <paramref name="memid" />.</param>
      <param name="pBstrDllName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;paramref name=&quot;pBstrDllName&quot; /&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the DLL.">Si no es <see langword="null" />, la función establece <paramref name="pBstrDllName" /> en un <see langword="BSTR" /> que contiene el nombre del archivo DLL.</param>
      <param name="pBstrName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;c&gt;lpbstrName&lt;/c&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the entry point.">Si no es <see langword="null" />, la función establece <c>lpbstrName</c> en un <see langword="BSTR" /> que contiene el nombre del punto de entrada.</param>
      <param name="pwOrdinal" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, and the function is defined by an ordinal, then &lt;c&gt;lpwOrdinal&lt;/c&gt; is set to point to the ordinal.">Si no es <see langword="null" /> y la función está definida por un ordinal, <c>lpwOrdinal</c> se establece de forma que apunte al ordinal.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.">Recupera la cadena de documentación, el nombre y la ruta de acceso completos del archivo de Ayuda y el identificador de contexto del tema de Ayuda de una descripción de tipos especificada.</summary>
      <param name="index" vsli:raw="The ID of the member whose documentation is to be returned.">Identificador del miembro cuya documentación se va a devolver.</param>
      <param name="strName" vsli:raw="When this method returns, contains the name of the item method. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el nombre del método del elemento. Este parámetro se pasa sin inicializar.</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">El resultado que devuelve este método contiene la cadena de documentación para el elemento especificado. Este parámetro se pasa sin inicializar.</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.">El resultado que devuelve este método incluye una referencia al contexto de Ayuda asociado al elemento especificado. Este parámetro se pasa sin inicializar.</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el nombre completo del archivo de Ayuda. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.">Recupera la cadena de documentación, el nombre completo del archivo de ayuda y la ruta de acceso, el contexto de localización que se utiliza y el identificador de contexto para el tema de Ayuda de la biblioteca en el archivo de ayuda.</summary>
      <param name="memid" vsli:raw="The member identifier for the type description.">Identificador de miembro de la descripción de tipo.</param>
      <param name="pbstrHelpString" vsli:raw="When this method returns, contains a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the specified item. If the caller does not need the item name, &lt;paramref name=&quot;pbstrHelpString&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Cuando este método devuelve un resultado, contiene <see langword="BSTR" /> que especifica el nombre del elemento especificado. Si el autor de la llamada no necesita el nombre de elemento, <paramref name="pbstrHelpString" /> puede ser <see langword="null" />. Este parámetro se pasa sin inicializar.</param>
      <param name="pdwHelpStringContext" vsli:raw="When this method returns, contains the Help localization context. If the caller does not need the Help context, &lt;paramref name=&quot;pdwHelpStringContext&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Cuando este método devuelve un resultado, contiene el contexto de localización de la ayuda. Si el autor de la llamada no necesita el contexto de ayuda, <paramref name="pdwHelpStringContext" /> puede ser <see langword="null" />. Este parámetro se pasa sin inicializar.</param>
      <param name="pbstrHelpStringDll" vsli:raw="When this method returns, contains a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the fully qualified name of the file containing the DLL used for the Help file. If the caller does not need the file name, &lt;paramref name=&quot;pbstrHelpStringDll&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Cuando este método devuelve un resultado, contiene <see langword="BSTR" /> que contiene el nombre completo del archivo con loa DLL que se utiliza para el archivo de ayuda. Si el autor de la llamada no necesita el nombre de archivo, <paramref name="pbstrHelpStringDll" /> puede ser <see langword="null" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data from the specified function.">Obtiene los datos personalizados de la función especificada.</summary>
      <param name="index" vsli:raw="The index of the function to get the custom data for.">Índice de la función para la que se obtienen los datos personalizados.</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">GUID utilizado para identificar los datos.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specified where to put the data. This parameter is passed uninitialized.">Cuando este método finaliza, contiene un <see langword="Object" /> que especifica dónde se colocan los datos. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure that contains information about a specified function.">Recupera la estructura <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> que contiene información acerca de una función especificada.</summary>
      <param name="index" vsli:raw="The index of the function description to return.">Índice de la descripción de función que se va a devolver.</param>
      <param name="ppFuncDesc" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure that describes the specified function. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la estructura <see langword="FUNCDESC" /> que describe la función especificada. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary vsli:raw="Binds to a specific member based on a known DISPID, where the member name is not known (for example, when binding to a default member).">Se enlaza a un miembro concreto basado en un DISPID conocido, donde no se conoce el nombre de miembro (por ejemplo, al enlazar a un miembro predeterminado).</summary>
      <param name="memid" vsli:raw="The member identifier.">Identificador de miembro.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by memid.">Uno de los valores de <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> que especifica el tipo de miembro identificado por memid.</param>
      <param name="pFuncIndex" vsli:raw="When this method returns, contains an index into the function. This parameter is passed uninitialized.">Cuando este método devuelve un resultado, contiene un índice en la función. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary vsli:raw="Maps between member names and member IDs, and parameter names and parameter IDs.">Realiza asignaciones entre nombres e identificadores de miembro, y nombres e identificadores de parámetros.</summary>
      <param name="rgszNames" vsli:raw="An array of names to map.">Matriz de nombres que se van a asignar.</param>
      <param name="cNames" vsli:raw="The count of names to map.">Número de nombres que se van a asignar.</param>
      <param name="pMemId" vsli:raw="When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la matriz en la que se encuentran las asignaciones de nombre. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the implementation type of the custom data.">Obtiene el tipo de implementación de los datos personalizados.</summary>
      <param name="index" vsli:raw="The index of the implementation type for the custom data.">El índice del tipo de implementación para los datos personalizados.</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">GUID utilizado para identificar los datos.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">Cuando este método devuelve un resultado, contiene un <see langword="Object" /> que especifica dónde se colocan los datos recuperados. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.IMPLTYPEFLAGS&quot; /&gt; value for one implemented interface or base interface in a type description.">Recupera el valor de <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> para una interfaz implementada o interfaz base en una descripción de tipos.</summary>
      <param name="index" vsli:raw="The index of the implemented interface or base interface.">Índice de la interfaz implementada o interfaz base.</param>
      <param name="pImplTypeFlags" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;IMPLTYPEFLAGS&quot; /&gt; enumeration. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la enumeración <see langword="IMPLTYPEFLAGS" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary vsli:raw="Retrieves marshaling information.">Recupera información sobre el cálculo de referencias.</summary>
      <param name="memid" vsli:raw="The member ID that indicates which marshaling information is needed.">Identificador de miembro que indica la información sobre cálculo de referencias que es necesaria.</param>
      <param name="pBstrMops" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;opcode&quot; /&gt; string used in marshaling the fields of the structure described by the referenced type description, or returns &lt;see langword=&quot;null&quot; /&gt; if there is no information to return. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la cadena <see langword="opcode" /> utilizada para calcular las referencias de los campos de la estructura descrita por la descripción del tipo de referencia, o bien es <see langword="null" /> si no hay ninguna información que devolver. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.">Recupera la variable con el identificador de miembro especificado (o el nombre de la propiedad o método y sus parámetros) que se corresponde con el identificador de función especificado.</summary>
      <param name="memid" vsli:raw="The ID of the member whose name (or names) is to be returned.">Identificador del miembro cuyo nombre o nombres se van a devolver.</param>
      <param name="rgBstrNames" vsli:raw="When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el nombre o nombres asociados al miembro. Este parámetro se pasa sin inicializar.</param>
      <param name="cMaxNames" vsli:raw="The length of the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array.">Longitud de la matriz <paramref name="rgBstrNames" />.</param>
      <param name="pcNames" vsli:raw="When this method returns, contains the number of names in the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el número de nombres que hay en la matriz <paramref name="rgBstrNames" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the specified custom data parameter.">Obtiene el parámetro de datos personalizado especificado.</summary>
      <param name="indexFunc" vsli:raw="The index of the function to get the custom data for.">Índice de la función para la que se obtienen los datos personalizados.</param>
      <param name="indexParam" vsli:raw="The index of the parameter of this function to get the custom data for.">Índice del parámetro de esta función para el que se obtienen los datos personalizados.</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">GUID utilizado para identificar los datos.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">Cuando este método devuelve un resultado, contiene un <see langword="Object" /> que especifica dónde se colocan los datos recuperados. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the referenced type descriptions, if a type description references other type descriptions.">Recupera las descripciones de tipo a las que se hace referencia si una descripción de tipo hace referencia a otras descripciones de tipo.</summary>
      <param name="hRef" vsli:raw="A handle to the referenced type description to return.">Identificador de la descripción del tipo de referencia que se va a devolver.</param>
      <param name="ppTI" vsli:raw="When this method returns, contains the referenced type description. This parameter is passed uninitialized.">El resultado que devuelve este método contiene la descripción del tipo de referencia. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the type description of the implemented interface types, if a type description describes a COM class.">Recupera la descripción de tipo de los tipos de interfaz implementados si una descripción de tipo describe una clase COM.</summary>
      <param name="index" vsli:raw="The index of the implemented type whose handle is returned.">Índice del tipo implementado cuyo identificador se devuelve.</param>
      <param name="href" vsli:raw="When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a un identificador para la interfaz implementada. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure that contains the attributes of the type description.">Recupera una estructura <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> que contiene los atributos de la descripción de tipo.</summary>
      <param name="ppTypeAttr" vsli:raw="When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.">El resultado que devuelve este método incluye una referencia a la estructura que contiene los atributos de esta descripción de tipo. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface for the type description, which enables a client compiler to bind to the type description's members.">Recupera la interfaz <see langword="ITypeComp" /> de la descripción de tipo, que permite a un compilador cliente enlazarse a los miembros de la descripción de tipo.</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;ITypeComp&quot; /&gt; of the containing type library. This parameter is passed uninitialized.">Cuando este método devuelve un resultado, contiene una referencia a la interfaz <see langword="ITypeComp" /> de la biblioteca de tipos contenedora. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary vsli:raw="Returns the type flags without any allocations. This method returns a &lt;see langword=&quot;DWORD&quot; /&gt; type flag, which expands the type flags without growing the &lt;see langword=&quot;TYPEATTR&quot; /&gt; (type attribute).">Devuelve las marcas de tipo sin asignaciones. Este método devuelve un marcador de tipo <see langword="DWORD" /> que expande los marcadores de tipo sin aumentar el <see langword="TYPEATTR" /> (atributo de tipo).</summary>
      <param name="pTypeFlags" vsli:raw="When this method returns, contains a &lt;see langword=&quot;DWORD&quot; /&gt; reference to a &lt;see langword=&quot;TYPEFLAG&quot; /&gt;. This parameter is passed uninitialized.">Cuando este método devuelve un resultado, contiene una referencia <see langword="DWORD" /> a un <see langword="TYPEFLAG" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Returns the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration quickly, without doing any allocations.">Devuelve rápidamente la enumeración <see langword="TYPEKIND" />, sin hacer ninguna asignación.</summary>
      <param name="pTypeKind" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration. This parameter is passed uninitialized.">Cuando este método devuelve un resultado, contiene una referencia a una enumeración <see langword="TYPEKIND" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the variable for the custom data.">Obtiene la variable de los datos personalizados.</summary>
      <param name="index" vsli:raw="The index of the variable to get the custom data for.">Índice de la variable para la que se obtienen los datos personalizados.</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">GUID utilizado para identificar los datos.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">Cuando este método devuelve un resultado, contiene un <see langword="Object" /> que especifica dónde se colocan los datos recuperados. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable.">Recupera una estructura <see langword="VARDESC" /> que describe la variable especificada.</summary>
      <param name="index" vsli:raw="The index of the variable description to return.">Índice de la descripción de variable que se va a devolver.</param>
      <param name="ppVarDesc" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la estructura <see langword="VARDESC" /> que describe la variable especificada. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary vsli:raw="Binds to a specific member based on a known &lt;see langword=&quot;DISPID&quot; /&gt;, where the member name is not known (for example, when binding to a default member).">Se enlaza a un miembro concreto basado en un <see langword="DISPID" /> conocido, donde no se conoce el nombre de miembro (por ejemplo, al enlazar a un miembro predeterminado).</summary>
      <param name="memid" vsli:raw="The member identifier.">Identificador de miembro.</param>
      <param name="pVarIndex" vsli:raw="When this method returns, contains an index of &lt;paramref name=&quot;memid&quot; /&gt;. This parameter is passed uninitialized.">Cuando este método devuelve un resultado, contiene un índice de <paramref name="memid" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary vsli:raw="Invokes a method, or accesses a property of an object, that implements the interface described by the type description.">Invoca a un método u obtiene acceso a una propiedad de un objeto, que implementa la interfaz descrita por la descripción de tipo.</summary>
      <param name="pvInstance" vsli:raw="A reference to the interface described by this type description.">Referencia a la interfaz descrita por esta descripción de tipo.</param>
      <param name="memid" vsli:raw="Identifier of the interface member.">Identificador del miembro de interfaz.</param>
      <param name="wFlags" vsli:raw="Flags describing the context of the invoke call.">Marcadores que describen el contexto de la llamada Invoke.</param>
      <param name="pDispParams" vsli:raw="A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.">Referencia a una estructura que contiene una matriz de argumentos, una matriz de identificadores de envío (DISPID) para argumentos con nombre y recuentos del número de elementos de cada matriz.</param>
      <param name="pVarResult" vsli:raw="A reference to the location at which the result is to be stored. If &lt;paramref name=&quot;wFlags&quot; /&gt; specifies &lt;see langword=&quot;DISPATCH_PROPERTYPUT&quot; /&gt; or &lt;see langword=&quot;DISPATCH_PROPERTYPUTREF&quot; /&gt;, &lt;paramref name=&quot;pVarResult&quot; /&gt; is ignored. Set to &lt;see langword=&quot;null&quot; /&gt; if no result is desired.">Referencia a la ubicación donde se va a almacenar el resultado. Si <paramref name="wFlags" /> especifica <see langword="DISPATCH_PROPERTYPUT" /> o <see langword="DISPATCH_PROPERTYPUTREF" />, <paramref name="pVarResult" /> se omite. Se establece en <see langword="null" /> si no se desea ningún resultado.</param>
      <param name="pExcepInfo" vsli:raw="A pointer to an exception information structure, which is filled in only if &lt;see langword=&quot;DISP_E_EXCEPTION&quot; /&gt; is returned.">Puntero a una estructura de información sobre excepciones, que sólo se rellena si se devuelve <see langword="DISP_E_EXCEPTION" />.</param>
      <param name="puArgErr" vsli:raw="If &lt;see langword=&quot;Invoke&quot; /&gt; returns &lt;see langword=&quot;DISP_E_TYPEMISMATCH&quot; /&gt;, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates the index of the argument with incorrect type. If more than one argument returns an error, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates only the first argument with an error.">Si <see langword="Invoke" /> devuelve <see langword="DISP_E_TYPEMISMATCH" />, <paramref name="puArgErr" />, indica el índice del argumento con el tipo incorrecto. Si hay más de un argumento que devuelva un error, <paramref name="puArgErr" /> indica sólo el primer argumento con error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">Libera una estructura <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> previamente devuelta por el método <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" />.</summary>
      <param name="pFuncDesc" vsli:raw="A reference to the &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure to release.">Referencia a la estructura <see langword="FUNCDESC" /> que se va a liberar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)&quot; /&gt; method.">Libera una estructura <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> previamente devuelta por el método <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" />.</summary>
      <param name="pTypeAttr" vsli:raw="A reference to the &lt;see langword=&quot;TYPEATTR&quot; /&gt; structure to release.">Referencia a la estructura <see langword="TYPEATTR" /> que se va a liberar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see langword=&quot;VARDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">Libera una estructura <see langword="VARDESC" /> previamente devuelta por el método <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" />.</summary>
      <param name="pVarDesc" vsli:raw="A reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure to release.">Referencia a la estructura <see langword="VARDESC" /> que se va a liberar.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeLib&quot; /&gt; interface.">Proporciona la definición administrada de la interfaz <see langword="ITypeLib" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary vsli:raw="Finds occurrences of a type description in a type library.">Busca apariciones de una descripción de tipo en una biblioteca de tipos.</summary>
      <param name="szNameBuf" vsli:raw="The name to search for. This is an in/out parameter.">Nombre que se va a buscar. Este es un parámetro de entrada/salida.</param>
      <param name="lHashVal" vsli:raw="A hash value to speed up the search, computed by the &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt; function. If &lt;paramref name=&quot;lHashVal&quot; /&gt; is 0, a value is computed.">Valor hash para acelerar la búsqueda, calculado por la función <see langword="LHashValOfNameSys" />. Si <paramref name="lHashVal" /> es 0, se calcula un valor.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains an array of pointers to the type descriptions that contain the name specified in &lt;paramref name=&quot;szNameBuf&quot; /&gt;. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una matriz de punteros a las descripciones de tipo que contienen el nombre especificado en <paramref name="szNameBuf" />. Este parámetro se pasa sin inicializar.</param>
      <param name="rgMemId" vsli:raw="An array of the &lt;see langword=&quot;MEMBERID&quot; /&gt; 's of the found items; &lt;paramref name=&quot;rgMemId&quot; /&gt; [i] is the &lt;see langword=&quot;MEMBERID&quot; /&gt; that indexes into the type description specified by &lt;paramref name=&quot;ppTInfo&quot; /&gt; [i]. Cannot be &lt;see langword=&quot;null&quot; /&gt;.">Matriz de estructuras <see langword="MEMBERID" /> de los elementos encontrados; <paramref name="rgMemId" /> [i] es la estructura <see langword="MEMBERID" /> que se indiza en la descripción de tipo especificada por <paramref name="ppTInfo" />[i]. El valor no puede ser <see langword="null" />.</param>
      <param name="pcFound" vsli:raw="On entry, indicates how many instances to look for. For example, &lt;paramref name=&quot;pcFound&quot; /&gt; = 1 can be called to find the first occurrence. The search stops when one instance is found.  &#xA;  &#xA; On exit, indicates the number of instances that were found. If the &lt;see langword=&quot;in&quot; /&gt; and &lt;see langword=&quot;out&quot; /&gt; values of &lt;paramref name=&quot;pcFound&quot; /&gt; are identical, there might be more type descriptions that contain the name.">En la entrada, indica el número de instancias que se van a buscar. Por ejemplo, se puede llamar a <paramref name="pcFound" /> = 1 para que busque la primera aparición. La búsqueda se detiene cuando se encuentra una instancia.
En la salida, indica el número de instancias encontradas. Si los valores <see langword="in" /> y <see langword="out" /> de <paramref name="pcFound" /> son idénticos, puede haber más descripciones de tipo que contengan el nombre.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.">Recupera la cadena de documentación de la biblioteca, el nombre y la ruta de acceso completos del archivo de Ayuda y el identificador de contexto del tema de Ayuda relativo a la biblioteca en el archivo de Ayuda.</summary>
      <param name="index" vsli:raw="The index of the type description whose documentation is to be returned.">Índice de la descripción de tipo cuya documentación se va a devolver.</param>
      <param name="strName" vsli:raw="When this method returns, contains a string that represents the name of the specified item. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una cadena que representa el nombre del elemento especificado. Este parámetro se pasa sin inicializar.</param>
      <param name="strDocString" vsli:raw="When this method returns, contains a string that represents the documentation string for the specified item. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una cadena que representa la cadena de documentación del elemento especificado. Este parámetro se pasa sin inicializar.</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el identificador de contexto de la Ayuda asociado al elemento especificado. Este parámetro se pasa sin inicializar.</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains a string that represents the fully qualified name of the Help file. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una cadena que representa el nombre completo del archivo de Ayuda. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves the structure that contains the library's attributes.">Recupera la estructura que contiene los atributos de la biblioteca.</summary>
      <param name="ppTLibAttr" vsli:raw="When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una estructura con los atributos de la biblioteca. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Enables a client compiler to bind to a library's types, variables, constants, and global functions.">Habilita un compilador cliente para enlazarse a los tipos, variables, constantes y funciones globales de una biblioteca.</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains an instance of a &lt;see langword=&quot;ITypeComp&quot; /&gt; instance for this &lt;see langword=&quot;ITypeLib&quot; /&gt;. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una instancia de una instancia de <see langword="ITypeComp" /> para este <see langword="ITypeLib" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the specified type description in the library.">Recupera la descripción de tipo especificada en la biblioteca.</summary>
      <param name="index" vsli:raw="The index of the &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface to return.">Índice de la interfaz <see langword="ITypeInfo" /> que se ha de devolver.</param>
      <param name="ppTI" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeInfo&quot; /&gt; describing the type referenced by &lt;paramref name=&quot;index&quot; /&gt;. This parameter is passed uninitialized.">El resultado que devuelve este método contiene <see langword="ITypeInfo" />, que describe el tipo al que hace referencia <paramref name="index" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary vsli:raw="Returns the number of type descriptions in the type library.">Devuelve el número de descripciones de tipo de la biblioteca de tipos.</summary>
      <returns vsli:raw="The number of type descriptions in the type library.">Número de descripciones de tipo de la biblioteca de tipos.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the type description that corresponds to the specified GUID.">Recupera la descripción de tipo que se corresponde con el GUID especificado.</summary>
      <param name="guid" vsli:raw="The IID of the interface or CLSID of the class whose type info is requested.">IID de la interfaz o CLSID de la clase cuya información de tipos se solicita.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains the requested &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface. This parameter is passed uninitialized.">El resultado que devuelve este método contiene la interfaz <see langword="ITypeInfo" /> solicitada. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Retrieves the type of a type description.">Recupera el tipo de una descripción de tipos.</summary>
      <param name="index" vsli:raw="The index of the type description within the type library.">Índice de la descripción de tipo en la biblioteca de tipos.</param>
      <param name="pTKind" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration for the type description. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la enumeración <see langword="TYPEKIND" /> para la descripción de tipo. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary vsli:raw="Indicates whether a passed-in string contains the name of a type or member described in the library.">Indica si una cadena que se ha pasado contiene el nombre de un tipo o miembro descrito en la biblioteca.</summary>
      <param name="szNameBuf" vsli:raw="The string to test. This is an in/out parameter.">Cadena que se va a comprobar. Este es un parámetro de entrada/salida.</param>
      <param name="lHashVal" vsli:raw="The hash value of &lt;paramref name=&quot;szNameBuf&quot; /&gt;.">Valor hash de <paramref name="szNameBuf" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;szNameBuf&quot; /&gt; was found in the type library; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Será <see langword="true" /> si se encuentra <paramref name="szNameBuf" /> en la biblioteca de tipos; en caso contrario, será <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary vsli:raw="Releases the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPELIBATTR&quot; /&gt; structure originally obtained from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)&quot; /&gt; method.">Libera la estructura <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> obtenida originalmente del método <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" />.</summary>
      <param name="pTLibAttr" vsli:raw="The &lt;see langword=&quot;TLIBATTR&quot; /&gt; structure to release.">Estructura <see langword="TLIBATTR" /> que se ha de liberar.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary vsli:raw="Provides a managed definition of the &lt;see langword=&quot;ITypeLib2&quot; /&gt; interface.">Proporciona una definición administrada de la interfaz <see langword="ITypeLib2" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary vsli:raw="Finds occurrences of a type description in a type library.">Busca apariciones de una descripción de tipo en una biblioteca de tipos.</summary>
      <param name="szNameBuf" vsli:raw="The name to search for.">Nombre que se va a buscar.</param>
      <param name="lHashVal" vsli:raw="A hash value to speed up the search, computed by the &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt; function. If &lt;paramref name=&quot;lHashVal&quot; /&gt; is 0, a value is computed.">Valor hash para acelerar la búsqueda, calculado por la función <see langword="LHashValOfNameSys" />. Si <paramref name="lHashVal" /> es 0, se calcula un valor.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains an array of pointers to the type descriptions that contain the name specified in &lt;paramref name=&quot;szNameBuf&quot; /&gt;. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una matriz de punteros a las descripciones de tipo que contienen el nombre especificado en <paramref name="szNameBuf" />. Este parámetro se pasa sin inicializar.</param>
      <param name="rgMemId" vsli:raw="When this method returns, contains an array of the &lt;see langword=&quot;MEMBERID&quot; /&gt;s of the found items; &lt;paramref name=&quot;rgMemId&quot; /&gt; [i] is the &lt;see langword=&quot;MEMBERID&quot; /&gt; that indexes into the type description specified by &lt;paramref name=&quot;ppTInfo&quot; /&gt; [i]. This parameter cannot be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Cuando vuelve este método, contiene una matriz de los <see langword="MEMBERID" /> de los elementos encontrados; <paramref name="rgMemId" />[i] es el <see langword="MEMBERID" /> que se indiza en la descripción de tipo especificada por <paramref name="ppTInfo" />[i]. Este parámetro no puede ser <see langword="null" />. Este parámetro se pasa sin inicializar.</param>
      <param name="pcFound" vsli:raw="On entry, a value, passed by reference, that indicates how many instances to look for. For example, &lt;paramref name=&quot;pcFound&quot; /&gt; = 1 can be called to find the first occurrence. The search stops when one instance is found.  &#xA;  &#xA; On exit, indicates the number of instances that were found. If the &lt;see langword=&quot;in&quot; /&gt; and &lt;see langword=&quot;out&quot; /&gt; values of &lt;paramref name=&quot;pcFound&quot; /&gt; are identical, there might be more type descriptions that contain the name.">En la entrada, valor, pasado por referencia, que indica el número de instancias que se van a buscar. Por ejemplo, se puede llamar a <paramref name="pcFound" /> = 1 para que busque la primera aparición. La búsqueda se detiene cuando se encuentra una instancia.
En la salida, indica el número de instancias encontradas. Si los valores <see langword="in" /> y <see langword="out" /> de <paramref name="pcFound" /> son idénticos, puede haber más descripciones de tipo que contengan el nombre.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary vsli:raw="Gets all custom data items for the library.">Obtiene todos los elementos de datos personalizados de la biblioteca.</summary>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">Un puntero a <see langword="CUSTDATA" />, que contiene todos los elementos de datos personalizados.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data.">Obtiene los datos personalizados.</summary>
      <param name="guid" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; , passed by reference, that is used to identify the data.">
        <see cref="T:System.Guid" />, pasado por referencia, que se utiliza para identificar los datos.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an object that specifies where to put the retrieved data. This parameter is passed uninitialized.">El resultado que devuelve este método contiene un objeto que especifica dónde se colocan los datos recuperados. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.">Recupera la cadena de documentación de la biblioteca, el nombre y la ruta de acceso completos del archivo de Ayuda y el identificador de contexto del tema de Ayuda relativo a la biblioteca en el archivo de Ayuda.</summary>
      <param name="index" vsli:raw="An index of the type description whose documentation is to be returned.">Índice de la descripción de tipo cuya documentación se va a devolver.</param>
      <param name="strName" vsli:raw="When this method returns, contains a string that specifies the name of the specified item. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una cadena que indica el nombre del elemento especificado. Este parámetro se pasa sin inicializar.</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">El resultado que devuelve este método contiene la cadena de documentación para el elemento especificado. Este parámetro se pasa sin inicializar.</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.">El resultado que devuelve este método contiene el identificador de contexto de la Ayuda asociado al elemento especificado. Este parámetro se pasa sin inicializar.</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains a string that specifies the fully qualified name of the Help file. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una cadena que especifica el nombre completo del archivo de Ayuda. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.">Recupera la cadena de documentación de la biblioteca, el nombre completo del archivo de ayuda y la ruta de acceso, el contexto de localización que se utiliza y el identificador de contexto para el tema de Ayuda de la biblioteca en el archivo de ayuda.</summary>
      <param name="index" vsli:raw="An index of the type description whose documentation is to be returned; if &lt;paramref name=&quot;index&quot; /&gt; is -1, the documentation for the library is returned.">Índice de la descripción de tipo cuya documentación se va a devolver; si <paramref name="index" /> es -1, la documentación de la biblioteca se devuelve.</param>
      <param name="pbstrHelpString" vsli:raw="When this method returns, contains a BSTR that specifies the name of the specified item. If the caller does not need the item name, &lt;paramref name=&quot;pbstrHelpString&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Cuando este método devuelve un resultado, contiene un BSTR que especifica el nombre del elemento especificado. Si el autor de la llamada no necesita el nombre de elemento, <paramref name="pbstrHelpString" /> puede ser <see langword="null" />. Este parámetro se pasa sin inicializar.</param>
      <param name="pdwHelpStringContext" vsli:raw="When this method returns, contains the Help localization context. If the caller does not need the Help context, &lt;paramref name=&quot;pdwHelpStringContext&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Cuando este método devuelve un resultado, contiene el contexto de localización de la ayuda. Si el autor de la llamada no necesita el contexto de ayuda, <paramref name="pdwHelpStringContext" /> puede ser <see langword="null" />. Este parámetro se pasa sin inicializar.</param>
      <param name="pbstrHelpStringDll" vsli:raw="When this method returns, contains a BSTR that specifies the fully qualified name of the file containing the DLL used for Help file. If the caller does not need the file name, &lt;paramref name=&quot;pbstrHelpStringDll&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Cuando este método devuelve un resultado, contiene un BSTR que especifica el nombre completo del archivo que contiene la DLL que se utiliza para el archivo de ayuda. Si el autor de la llamada no necesita el nombre de archivo, <paramref name="pbstrHelpStringDll" /> puede ser <see langword="null" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves the structure that contains the library's attributes.">Recupera la estructura que contiene los atributos de la biblioteca.</summary>
      <param name="ppTLibAttr" vsli:raw="When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una estructura con los atributos de la biblioteca. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary vsli:raw="Returns statistics about a type library that are required for efficient sizing of hash tables.">Devuelve las estadísticas sobre una biblioteca de tipos que se requieren para cambiar el tamaño de las tablas hash de forma eficaz.</summary>
      <param name="pcUniqueNames" vsli:raw="A pointer to a count of unique names. If the caller does not need this information, set to &lt;see langword=&quot;null&quot; /&gt;.">Puntero a un recuento de nombres únicos. Si el llamador no necesita esta información, se establece en <see langword="null" />.</param>
      <param name="pcchUniqueNames" vsli:raw="When this method returns, contains a pointer to a change in the count of unique names. This parameter is passed uninitialized.">El resultado que devuelve este método contiene un puntero a un cambio en el recuento de nombres únicos. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Enables a client compiler to bind to a library's types, variables, constants, and global functions.">Habilita un compilador cliente para enlazarse a los tipos, variables, constantes y funciones globales de una biblioteca.</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeComp&quot; /&gt; instance for this &lt;see langword=&quot;ITypeLib&quot; /&gt;. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una instancia de <see langword="ITypeComp" /> para esta interfaz <see langword="ITypeLib" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the specified type description in the library.">Recupera la descripción de tipo especificada en la biblioteca.</summary>
      <param name="index" vsli:raw="An index of the &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface to return.">Índice de la interfaz <see langword="ITypeInfo" /> que se ha de devolver.</param>
      <param name="ppTI" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeInfo&quot; /&gt; describing the type referenced by &lt;paramref name=&quot;index&quot; /&gt;. This parameter is passed uninitialized.">El resultado que devuelve este método contiene <see langword="ITypeInfo" />, que describe el tipo al que hace referencia <paramref name="index" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary vsli:raw="Returns the number of type descriptions in the type library.">Devuelve el número de descripciones de tipo de la biblioteca de tipos.</summary>
      <returns vsli:raw="The number of type descriptions in the type library.">Número de descripciones de tipo de la biblioteca de tipos.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the type description that corresponds to the specified GUID.">Recupera la descripción de tipo que se corresponde con el GUID especificado.</summary>
      <param name="guid" vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt;, passed by reference, that represents the IID of the &lt;see langword=&quot;CLSID&quot; /&gt; interface of the class whose type info is requested.">
        <see cref="T:System.Guid" />, pasado por referencia, que representa el identificador de la interfaz <see langword="CLSID" /> de la clase cuya información de tipo se solicita.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains the requested &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface. This parameter is passed uninitialized.">El resultado que devuelve este método contiene la interfaz <see langword="ITypeInfo" /> solicitada. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Retrieves the type of a type description.">Recupera el tipo de una descripción de tipos.</summary>
      <param name="index" vsli:raw="The index of the type description within the type library.">Índice de la descripción de tipo en la biblioteca de tipos.</param>
      <param name="pTKind" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration for the type description. This parameter is passed uninitialized.">El resultado que devuelve este método contiene una referencia a la enumeración <see langword="TYPEKIND" /> para la descripción de tipo. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary vsli:raw="Indicates whether a passed-in string contains the name of a type or member described in the library.">Indica si una cadena que se ha pasado contiene el nombre de un tipo o miembro descrito en la biblioteca.</summary>
      <param name="szNameBuf" vsli:raw="The string to test.">Cadena que se va a comprobar.</param>
      <param name="lHashVal" vsli:raw="The hash value of &lt;paramref name=&quot;szNameBuf&quot; /&gt;.">Valor hash de <paramref name="szNameBuf" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;szNameBuf&quot; /&gt; was found in the type library; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Será <see langword="true" /> si se encuentra <paramref name="szNameBuf" /> en la biblioteca de tipos; en caso contrario, será <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary vsli:raw="Releases the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPELIBATTR&quot; /&gt; structure originally obtained from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)&quot; /&gt; method.">Libera la estructura <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> obtenida originalmente del método <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" />.</summary>
      <param name="pTLibAttr" vsli:raw="The &lt;see langword=&quot;TLIBATTR&quot; /&gt; structure to release.">Estructura <see langword="TLIBATTR" /> que se ha de liberar.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary vsli:raw="Defines flags that apply to type libraries.">Define las marcas que se aplican a las bibliotecas de tipos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary vsli:raw="The type library describes controls and should not be displayed in type browsers intended for nonvisual objects.">La biblioteca de tipos describe los controles, y no debe mostrarse en exploradores de tipos destinados a objetos no visuales.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary vsli:raw="The type library exists in a persisted form on disk.">La biblioteca de tipos permanece almacenada en disco.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary vsli:raw="The type library should not be displayed to users, although its use is not restricted. The type library should be used by controls. Hosts should create a new type library that wraps the control with extended properties.">Aunque el uso de la biblioteca de tipos no está restringido, ésta no debe mostrarse a los usuarios. La biblioteca de tipos se debe utilizar con los controles. Los hosts deben crear una nueva biblioteca de tipos que incluya el control con propiedades extendidas.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary vsli:raw="The type library is restricted, and should not be displayed to users.">La biblioteca de tipos está restringida y no debe mostrarse a los usuarios.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary vsli:raw="Contains information about how to transfer a structure element, parameter, or function return value between processes.">Contiene información sobre cómo transferir un elemento de estructura, un parámetro o un valor devuelto de función entre los procesos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary vsli:raw="Represents a pointer to a value that is being passed between processes.">Representa un puntero a un valor que se está pasando de un proceso a otro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary vsli:raw="Represents bitmask values that describe the structure element, parameter, or return value.">Representa valores de máscara de bits que describen el elemento de estructura, el parámetro o el valor devuelto.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary vsli:raw="Describes how to transfer a structure element, parameter, or function return value between processes.">Describe cómo transferir un elemento de estructura, un parámetro o un valor devuelto de función entre los procesos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary vsli:raw="The parameter has custom data.">El parámetro tiene datos personalizados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary vsli:raw="The parameter has default behaviors defined.">El parámetro tiene definidos comportamientos predeterminados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary vsli:raw="The parameter passes information from the caller to the callee.">El parámetro pasa información del que llama al llamado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary vsli:raw="The parameter is the local identifier of a client application.">El parámetro es el identificador local de una aplicación cliente.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary vsli:raw="The parameter is optional.">El parámetro es opcional.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary vsli:raw="The parameter returns information from the callee to the caller.">El parámetro devuelve información del llamado al que llama.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary vsli:raw="The parameter is the return value of the member.">El parámetro es el valor devuelto del miembro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary vsli:raw="Does not specify whether the parameter passes or receives information.">No especifica si el parámetro pasa o recibe información.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;STATDATA&quot; /&gt; structure.">Proporciona la definición administrada de la estructura <see langword="STATDATA" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ADVF&quot; /&gt; enumeration value that determines when the advisory sink is notified of changes in the data.">Representa el valor de la enumeración <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> que determina el momento en que se debe notificar al receptor de notificaciones los cambios en los datos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IAdviseSink&quot; /&gt; interface that will receive change notifications.">Representa la interfaz <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> que recibirá las notificaciones de los cambios.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary vsli:raw="Represents the token that uniquely identifies the advisory connection. This token is returned by the method that sets up the advisory connection.">Representa el símbolo (token) que identifica de forma única la conexión de consulta. El método devuelve el símbolo (token) que establece la conexión de consulta.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure for the data of interest to the advise sink. The advise sink receives notification of changes to the data specified by this &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure.">Representa la estructura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> de los datos de interés para el receptor de notificaciones. El receptor de notificaciones recibe las notificaciones de los cambios realizados en los datos que especifica esta estructura de <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary vsli:raw="Contains statistical information about an open storage, stream, or byte-array object.">Contiene información estadística sobre un objeto abierto de almacenamiento, secuencia o matriz de bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary vsli:raw="Specifies the last access time for this storage, stream, or byte array.">Especifica la hora del último acceso a este almacenamiento, secuencia o matriz de bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary vsli:raw="Specifies the size, in bytes, of the stream or byte array.">Especifica el tamaño, en bytes, de la secuencia o de la matriz de bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary vsli:raw="Indicates the class identifier for the storage object.">Indica el identificador de clase del objeto de almacenamiento.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary vsli:raw="Indicates the creation time for this storage, stream, or byte array.">Indica la hora de creación de este almacenamiento, secuencia o matriz de bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary vsli:raw="Indicates the types of region locking supported by the stream or byte array.">Indica los tipos de bloqueo de región admitidos por la secuencia o matriz de bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary vsli:raw="Indicates the access mode that was specified when the object was opened.">Indica el modo de acceso que se especificó cuando se abrió el objeto.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary vsli:raw="Indicates the current state bits of the storage object (the value most recently set by the &lt;see langword=&quot;IStorage::SetStateBits&quot; /&gt; method).">Indica los bits de estado actuales del objeto de almacenamiento (el valor más reciente establecido por el método <see langword="IStorage::SetStateBits" />).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary vsli:raw="Indicates the last modification time for this storage, stream, or byte array.">Indica la hora de la última modificación de este almacenamiento, secuencia o matriz de bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary vsli:raw="Represents a pointer to a null-terminated string containing the name of the object described by this structure.">Representa un puntero a una cadena terminada en null que contiene el nombre del objeto descrito por esta estructura.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary vsli:raw="Reserved for future use.">Reservado para un uso futuro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary vsli:raw="Indicates the type of storage object, which is one of the values from the &lt;see langword=&quot;STGTY&quot; /&gt; enumeration.">Indica el tipo de objeto de almacenamiento, que es uno de los valores de la enumeración <see langword="STGTY" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;STGMEDIUM&quot; /&gt; structure.">Proporciona la definición administrada de la estructura <see langword="STGMEDIUM" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary vsli:raw="Represents a pointer to an interface instance that allows the sending process to control the way the storage is released when the receiving process calls the &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; function. If &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; uses default procedures to release the storage; otherwise, &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; uses the specified &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">Representa un puntero a una instancia de interfaz que permite al proceso de envío controlar la forma en que se libera el almacenamiento cuando el proceso de recepción llama a la función <see langword="ReleaseStgMedium" />. Si <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> es <see langword="null" />, <see langword="ReleaseStgMedium" /> utiliza los procedimientos predeterminados para liberar el almacenamiento; de lo contrario, <see langword="ReleaseStgMedium" /> utiliza la interfaz <see langword="IUnknown" /> especificada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary vsli:raw="Specifies the type of storage medium. The marshaling and unmarshaling routines use this value to determine which union member was used. This value must be one of the elements of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; enumeration.">Especifica el tipo del medio de almacenamiento. Las rutinas de cálculo de referencias y de deserialización utilizan este valor para determinar qué miembro de unión se ha utilizado. Este valor debe ser uno de los elementos de la enumeración <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary vsli:raw="Represents a handle, string, or interface pointer that the receiving process can use to access the data being transferred.">Representa un identificador, cadena o puntero de interfaz que el proceso de recepción puede utilizar para tener acceso a los datos que se transfieren.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary vsli:raw="Identifies the target operating system platform.">Identifica la plataforma del sistema operativo de destino.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary vsli:raw="The target operating system for the type library is Apple Macintosh. By default, all data fields are aligned on even-byte boundaries.">El sistema operativo de destino de la biblioteca de tipos es Apple Macintosh. De forma predeterminada, todos los campos de datos se alinean en límites de bytes pares.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary vsli:raw="The target operating system for the type library is 16-bit Windows systems. By default, data fields are packed.">El sistema operativo de destino de la biblioteca de tipos es Windows de 16 bits. De forma predeterminada, los campos de datos se empaquetan.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary vsli:raw="The target operating system for the type library is 32-bit Windows systems. By default, data fields are naturally aligned (for example, 2-byte integers are aligned on even-byte boundaries; 4-byte integers are aligned on quad-word boundaries, and so on).">El sistema operativo de destino de la biblioteca de tipos es Windows de 32 bits. De forma predeterminada, los campos de datos se alinean de forma natural; por ejemplo, los números enteros de 2 bytes se alinean en límites de bytes pares, los enteros de 4 bytes se alinean en límites de cuatro palabras, etc.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary vsli:raw="The target operating system for the type library is 64-bit Windows systems.">El sistema operativo de destino de la biblioteca de tipos es Windows de 64 bits.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;TYMED&quot; /&gt; structure.">Proporciona la definición administrada de la estructura <see langword="TYMED" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary vsli:raw="The storage medium is an enhanced metafile. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteEnhMetaFile&quot; /&gt; to delete the bitmap.">El medio de almacenamiento es un metarchivo mejorado. Si el miembro <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> es <see langword="null" />, el proceso de destino debe utilizar <see langword="DeleteEnhMetaFile" /> para eliminar el mapa de bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary vsli:raw="The storage medium is a disk file identified by a path. If the &lt;see langword=&quot;STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;OpenFile&quot; /&gt; to delete the file.">El medio de almacenamiento es un archivo de disco identificado mediante una ruta de acceso. Si el miembro <see langword="STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> es <see langword="null" />, el proceso de destino debe utilizar <see langword="OpenFile" /> para eliminar el archivo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary vsli:raw="The storage medium is a Graphics Device Interface (GDI) component (HBITMAP). If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteObject&quot; /&gt; to delete the bitmap.">El medio de almacenamiento es un componente (HBITMAP) de una interfaz de dispositivo gráfico (GDI). Si el miembro <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> es <see langword="null" />, el proceso de destino debe utilizar <see langword="DeleteObject" /> para eliminar el mapa de bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary vsli:raw="The storage medium is a global memory handle (HGLOBAL). Allocate the global handle with the GMEM_SHARE flag. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;GlobalFree&quot; /&gt; to release the memory.">El medio de almacenamiento es un identificador de memoria global (HGLOBAL). Asigne el identificador global con el marcador GMEM_SHARE. Si el miembro <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> es <see langword="null" />, el proceso de destino debe utilizar <see langword="GlobalFree" /> para liberar la memoria.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary vsli:raw="The storage medium is a storage component identified by an &lt;see langword=&quot;IStorage&quot; /&gt; pointer. The data is in the streams and storages contained by this &lt;see langword=&quot;IStorage&quot; /&gt; instance. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is not &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;IStorage::Release&quot; /&gt; to release the storage component.">El medio de almacenamiento es un componente de almacenamiento identificado mediante un puntero <see langword="IStorage" />. Los datos están en las secuencias y almacenamientos contenidos en esta estancia de <see langword="IStorage" />. Si el miembro <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> no es <see langword="null" />, el proceso de destino debe utilizar <see langword="IStorage::Release" /> para liberar el componente de almacenamiento.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary vsli:raw="The storage medium is a stream object identified by an &lt;see langword=&quot;IStream&quot; /&gt; pointer. Use &lt;see langword=&quot;ISequentialStream::Read&quot; /&gt; to read the data. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is not &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;IStream::Release&quot; /&gt; to release the stream component.">El medio de almacenamiento es un objeto de secuencia identificado mediante un puntero <see langword="IStream" />. Utilice <see langword="ISequentialStream::Read" /> para leer los datos. Si el miembro <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> no es <see langword="null" />, el proceso de destino debe utilizar <see langword="IStream::Release" /> para liberar el componente de secuencia.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary vsli:raw="The storage medium is a metafile (HMETAFILE). Use the Windows or WIN32 functions to access the metafile's data. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteMetaFile&quot; /&gt; to delete the bitmap.">El medio de almacenamiento es un metarchivo (HMETAFILE). Utilice las funciones de Windows o WIN32 para obtener acceso a los datos del metarchivo. Si el miembro <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> es <see langword="null" />, el proceso de destino debe utilizar <see langword="DeleteMetaFile" /> para eliminar el mapa de bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary vsli:raw="No data is being passed.">No se pasan datos.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary vsli:raw="Contains attributes of a &lt;see langword=&quot;UCOMITypeInfo&quot; /&gt;.">Contiene los atributos de <see langword="UCOMITypeInfo" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary vsli:raw="Specifies the byte alignment for an instance of this type.">Especifica la alineación de bytes de una instancia de este tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary vsli:raw="The size of an instance of this type.">Tamaño de una instancia de este tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary vsli:raw="The size of this type's virtual method table (VTBL).">Tamaño de la tabla de métodos virtuales (VTBL) de este tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary vsli:raw="Indicates the number of functions on the interface this structure describes.">Indica el número de funciones que hay en la interfaz descrita por esta estructura.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary vsli:raw="Indicates the number of implemented interfaces on the interface this structure describes.">Indica el número de interfaces implementadas que hay en la interfaz descrita por esta estructura.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary vsli:raw="Indicates the number of variables and data fields on the interface described by this structure.">Indica el número de variables y campos de datos que hay en la interfaz descrita por esta estructura.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary vsli:raw="Reserved for future use.">Reservado para un uso futuro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary vsli:raw="The GUID of the type information.">GUID de la información del tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary vsli:raw="IDL attributes of the described type.">Atributos IDL del tipo descrito.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary vsli:raw="Locale of member names and documentation strings.">Configuración regional de los nombres de miembro y las cadenas de documentación.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary vsli:raw="Reserved for future use.">Reservado para un uso futuro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary vsli:raw="A constant used with the &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.memidConstructor&quot; /&gt; and &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.memidDestructor&quot; /&gt; fields.">Constante que se utiliza con los campos <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" /> y <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary vsli:raw="ID of constructor, or &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL&quot; /&gt; if none.">Id. del constructor; o <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> si no hay ninguno.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary vsli:raw="ID of destructor, or &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL&quot; /&gt; if none.">Id. del destructor; o <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> si no hay ninguno.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary vsli:raw="If &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.typekind&quot; /&gt; == &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS&quot; /&gt;, specifies the type for which this type is an alias.">Si <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" /> == <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" />, especifica el tipo del que este tipo es un alias.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEKIND&quot; /&gt; value describing the type this information describes.">Valor de <see cref="T:System.Runtime.InteropServices.TYPEKIND" /> que describe el tipo descrito por esta información.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary vsli:raw="Major version number.">Número de versión principal.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary vsli:raw="Minor version number.">Número de versión secundaria.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; value describing this information.">Valor de <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> descrito por esta información.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary vsli:raw="Describes the type of a variable, return type of a function, or the type of a function parameter.">Describe el tipo de una variable, el tipo devuelto de una función o el tipo de un parámetro de función.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary vsli:raw="If the variable is &lt;see langword=&quot;VT_SAFEARRAY&quot; /&gt; or &lt;see langword=&quot;VT_PTR&quot; /&gt;, the &lt;see langword=&quot;lpValue&quot; /&gt; field contains a pointer to a &lt;see langword=&quot;TYPEDESC&quot; /&gt; that specifies the element type.">Si la variable es <see langword="VT_SAFEARRAY" /> o <see langword="VT_PTR" />, el campo <see langword="lpValue" /> contiene un puntero a <see langword="TYPEDESC" /> que especifica el tipo de elemento.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary vsli:raw="Indicates the variant type for the item described by this &lt;see langword=&quot;TYPEDESC&quot; /&gt;.">Indica el tipo Variant del elemento descrito por <see langword="TYPEDESC" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary vsli:raw="Defines the properties and attributes of a type description.">Define las propiedades y los atributos de una descripción del tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary vsli:raw="The class supports aggregation.">La clase admite agregación.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary vsli:raw="A type description that describes an &lt;see langword=&quot;Application&quot; /&gt; object.">Descripción de tipo que describe un objeto <see langword="Application" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary vsli:raw="Instances of the type can be created by &lt;see langword=&quot;ITypeInfo::CreateInstance&quot; /&gt;.">Se pueden crear instancias del tipo mediante <see langword="ITypeInfo::CreateInstance" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary vsli:raw="The type is a control from which other types will be derived and should not be displayed to users.">El tipo es un control a partir del cual se derivarán otros tipos y no se debe mostrar a los usuarios.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary vsli:raw="Indicates that the interface derives from &lt;see langword=&quot;IDispatch&quot; /&gt;, either directly or indirectly. This flag is computed; there is no Object Description Language for the flag.">Indica que la interfaz se deriva de <see langword="IDispatch" />, ya sea directa o indirectamente. Este marcador se calcula; no hay ningún Lenguaje de descripción de objetos para él.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary vsli:raw="The interface supplies both &lt;see langword=&quot;IDispatch&quot; /&gt; and VTBL binding.">La interfaz proporciona tanto enlace VTBL como <see langword="IDispatch" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary vsli:raw="The type should not be displayed to browsers.">El tipo no debe mostrarse a los exploradores.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary vsli:raw="The type is licensed.">El tipo tiene licencia.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary vsli:raw="The interface cannot add members at run time.">La interfaz no puede agregar miembros en tiempo de ejecución.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary vsli:raw="The types used in the interface are fully compatible with Automation, including VTBL binding support. Setting dual on an interface sets both this flag and the  &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL&quot; /&gt;. This flag is not allowed on dispinterfaces.">Los tipos utilizados en la interfaz son totalmente compatibles con la automatización, incluida la compatibilidad con el enlace VTBL. Al establecer una interfaz como dual, se establecen este marcador y <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" />. No se permite este marcador en interfaces Dispinterface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary vsli:raw="The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.">El tipo está predefinido. La aplicación cliente debe crear automáticamente una única instancia del objeto que tenga este atributo. El nombre de la variable que apunta al objeto es el mismo que el nombre de la clase del objeto.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary vsli:raw="Indicates that the interface will be using a proxy/stub dynamic link library. This flag specifies that the type library proxy should not be unregistered when the type library is unregistered.">Indica que la interfaz utilizará un proxy/código auxiliar de biblioteca de vínculos dinámicos. Este marcador especifica que el registro del proxy de la biblioteca de tipos no se anulará al anular el registro de la biblioteca de tipos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary vsli:raw="The object supports &lt;see langword=&quot;IConnectionPointWithDefault&quot; /&gt;, and has default behaviors.">El objeto admite <see langword="IConnectionPointWithDefault" />, y tiene comportamientos predeterminados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary vsli:raw="Should not be accessible from macro languages. This flag is intended for system-level types or types that type browsers should not display.">No se debe permitir el acceso desde lenguajes de macros. El marcador está destinado a tipos en el nivel del sistema o a tipos que los exploradores de tipos no deben mostrar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary vsli:raw="Indicates base interfaces should be checked for name resolution before checking children, which is the reverse of the default behavior.">Establece que se debe comprobar la resolución de nombres en las interfaces base antes que en las secundarias, al contrario de lo que ocurre en el comportamiento predeterminado.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary vsli:raw="Specifies various types of data and functions.">Especifica varios tipos de datos y funciones.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary vsli:raw="A type that is an alias for another type.">Tipo que es un alias de otro tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary vsli:raw="A set of implemented components interfaces.">Conjunto de interfaces de componentes implementados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary vsli:raw="A set of methods and properties that are accessible through &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;. By default, dual interfaces return &lt;see langword=&quot;TKIND_DISPATCH&quot; /&gt;.">Conjunto de métodos y propiedades a los que se puede tener acceso mediante <see langword="IDispatch::Invoke" />. De manera predeterminada, las interfaces dobles devuelven <see langword="TKIND_DISPATCH" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary vsli:raw="A set of enumerators.">Conjunto de enumeradores.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary vsli:raw="A type that has virtual functions, all of which are pure.">Tipo que tiene funciones virtuales, todas puras.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary vsli:raw="End-of-enumeration marker.">Marcador de fin de enumeración.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary vsli:raw="A module that can have only static functions and data (for example, a DLL).">Módulo que sólo puede tener funciones y datos estáticos (por ejemplo, un archivo DLL).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary vsli:raw="A structure with no methods.">Estructura sin métodos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary vsli:raw="A union of all members that have an offset of zero.">Unión de todos los miembros que tienen desplazamiento cero.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary vsli:raw="Identifies a particular type library and provides localization support for member names.">Identifica una biblioteca de tipos concreta y proporciona compatibilidad de localización para los nombres de miembro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary vsli:raw="Represents a globally unique library ID of a type library.">Representa un identificador de biblioteca único global de una biblioteca de tipos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary vsli:raw="Represents a locale ID of a type library.">Representa un identificador local de una biblioteca de tipos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary vsli:raw="Represents the target hardware platform of a type library.">Representa la plataforma de hardware de destino de una biblioteca de tipos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary vsli:raw="Represents library flags.">Representa marcadores de biblioteca.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary vsli:raw="Represents the major version number of a type library.">Representa el número de la versión principal de la biblioteca de tipos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary vsli:raw="Represents the minor version number of a type library.">Representa el número de la versión secundaria de la biblioteca de tipos.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary vsli:raw="Describes a variable, constant, or data member.">Describe una variable, una constante o un miembro de datos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary vsli:raw="Contains information about a variable.">Contiene información sobre una variable.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary vsli:raw="Contains information about a variable.">Contiene información sobre una variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary vsli:raw="Describes a symbolic constant.">Describe una constante simbólica.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary vsli:raw="Indicates the offset of this variable within the instance.">Indica el desplazamiento de la variable dentro de la instancia.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary vsli:raw="Contains the variable type.">Contiene el tipo de variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary vsli:raw="This field is reserved for future use.">Este campo está reservado para un uso futuro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary vsli:raw="Indicates the member ID of a variable.">Indica el identificador de miembro de una variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary vsli:raw="Defines how to marshal a variable.">Define cómo calcular las referencias de una variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary vsli:raw="Defines the properties of a variable.">Define las propiedades de una variable.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary vsli:raw="Identifies the constants that define the properties of a variable.">Identifica las constantes que definen las propiedades de una variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary vsli:raw="The variable supports data binding.">La variable admite enlace de datos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary vsli:raw="The variable is the single property that best represents the object. Only one variable in type information can have this attribute.">La variable es la propiedad que mejor representa al objeto. Sólo una variable de una información de tipos puede tener este atributo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type of &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.">Permite llevar a cabo una optimización en la que el compilador busca un miembro denominado "xyz" en el tipo "abc". Si se encuentra un miembro de este tipo y se marca como función de descriptor de acceso para un elemento de la colección predeterminada, entonces se genera una llamada a dicha función miembro. Se permite en miembros de interfaces y de interfaces Dispinterface. No se permite en módulos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary vsli:raw="The variable is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE&quot; /&gt; must also be set.">La variable se muestra al usuario como enlazable. <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" /> también debe establecerse.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary vsli:raw="The variable should not be displayed to the user in a browser, although it exists and is bindable.">La variable no debe mostrarse al usuario en un explorador, aunque exista y sea enlazable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary vsli:raw="The variable is mapped as individual bindable properties.">La variable se asigna del mismo modo que las propiedades enlazables individuales.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary vsli:raw="The variable appears in an object browser, but not in a properties browser.">La variable aparece en un examinador de objetos, pero no en un examinador de propiedades.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary vsli:raw="Assignment to the variable should not be allowed.">No debe permitirse que se realicen asignaciones a la variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary vsli:raw="Tags the interface as having default behaviors.">Etiqueta la interfaz indicando que tiene comportamientos predeterminados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary vsli:raw="When set, any attempt to directly change the property results in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;. The implementation of &lt;see langword=&quot;OnRequestEdit&quot; /&gt; determines if the change is accepted.">Cuando se establece, cualquier intento de cambiar directamente la propiedad da como resultado una llamada a <see langword="IPropertyNotifySink::OnRequestEdit" />. La implementación de <see langword="OnRequestEdit" /> determina si se acepta el cambio.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary vsli:raw="The variable should not be accessible from macro languages. This flag is intended for system-level variables or variables that you do not want type browsers to display.">No se debe permitir el acceso a la variable desde lenguajes de macros. El marcador está destinado a variables en el nivel del sistema o a variables que los exploradores de tipos no deben mostrar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary vsli:raw="The variable returns an object that is a source of events.">La variable devuelve un objeto que es un origen de eventos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary vsli:raw="The variable is the default display in the user interface.">La variable es la presentación predeterminada en la interfaz de usuario.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary vsli:raw="Defines the kind of variable.">Define el tipo de variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary vsli:raw="The &lt;see langword=&quot;VARDESC&quot; /&gt; structure describes a symbolic constant. There is no memory associated with it.">La estructura <see langword="VARDESC" /> describe una constante simbólica. No tiene asociada ninguna memoria.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary vsli:raw="The variable can be accessed only through &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">Sólo se puede tener acceso a la variable a través de <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary vsli:raw="The variable is a field or member of the type. It exists at a fixed offset within each instance of the type.">La variable es un campo o miembro del tipo. Existe en un desplazamiento fijo dentro de cada instancia del tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary vsli:raw="There is only one instance of the variable.">Sólo hay una instancia de la variable.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary vsli:raw="Specifies the method to call when you unregister an assembly for use from COM; this allows for the execution of user-written code during the unregistration process.">Especifica el método al que se debe llamar cuando se anula el registro de un ensamblado para utilizarlo desde COM; de esta manera, se permite la ejecución de código escrito por el usuario durante el proceso de anulación del registro.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_CY&quot; /&gt;.">Encapsula los objetos cuyas referencias se van a calcular como <see langword="VT_CY" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CurrencyWrapper&quot; /&gt; class with the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> con el <see langword="Decimal" /> que se va a encapsular y cuyas referencias se van a calcular como de tipo <see langword="VT_CY" />.</summary>
      <param name="obj" vsli:raw="The &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as &lt;see langword=&quot;VT_CY&quot; /&gt;.">
        <see langword="Decimal" /> que se va a encapsular y cuyas referencias se van a calcular como <see langword="VT_CY" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CurrencyWrapper&quot; /&gt; class with the object containing the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> con el objeto que contiene el <see langword="Decimal" /> que se va a encapsular y cuyas referencias se van a calcular como de tipo <see langword="VT_CY" />.</summary>
      <param name="obj" vsli:raw="The object containing the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as &lt;see langword=&quot;VT_CY&quot; /&gt;.">Objeto que contiene el <see langword="Decimal" /> que se va a encapsular y cuyas referencias se van a calcular como de tipo <see langword="VT_CY" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter is not a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; type.">El parámetro <paramref name="obj" /> no es un tipo <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary vsli:raw="Gets the wrapped object to be marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">Obtiene el objeto encapsulado cuyas referencias se van a calcular como de tipo <see langword="VT_CY" />.</summary>
      <returns vsli:raw="The wrapped object to be marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">Objeto encapsulado cuyas referencias se van a calcular como de tipo <see langword="VT_CY" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)&quot; /&gt; method's IUnknown::QueryInterface calls can use the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface.">Indica si las llamadas IUnknown::QueryInterface del método <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> pueden utilizar la interfaz <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary vsli:raw="IUnknown::QueryInterface method calls can use the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface. When you use this value, the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)&quot; /&gt; method overload functions like the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)&quot; /&gt; overload.">Las llamadas de método IUnknown::QueryInterface pueden usar la interfaz <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />. Cuando usa este valor, la sobrecarga del método <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> funciona como la sobrecarga de <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary vsli:raw="IUnknown::QueryInterface method calls should ignore the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface.">Las llamadas de método IUnknown::QueryInterface deberían ignorar la interfaz <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary vsli:raw="Provides return values for the &lt;see cref=&quot;M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)&quot; /&gt; method.">Proporciona valores devueltos para el método <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary vsli:raw="The interface for a specific interface ID is not available. In this case, the returned interface is &lt;see langword=&quot;null&quot; /&gt;. E_NOINTERFACE is returned to the caller of IUnknown::QueryInterface.">La interfaz para un id. de interfaz concreto no está disponible. En este caso, la interfaz devuelta es <see langword="null" />. Se devuelve E_NOINTERFACE al llamador de IUnknown::QueryInterface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary vsli:raw="The interface pointer that is returned from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)&quot; /&gt; method can be used as the result of IUnknown::QueryInterface.">Puntero a interfaz que devuelve el método <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> y que puede usarse como el resultado de IUnknown::QueryInterface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary vsli:raw="The custom &lt;see langword=&quot;QueryInterface&quot; /&gt; was not used. Instead, the default implementation of IUnknown::QueryInterface should be used.">No se utilizó el <see langword="QueryInterface" /> personalizado. En su lugar, se debe usar la implementación predeterminada de IUnknown::QueryInterface.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary vsli:raw="Specifies the value of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; enumeration. This class cannot be inherited.">Especifica el valor de la enumeración <see cref="T:System.Runtime.InteropServices.CharSet" />. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultCharSetAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; value.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> con el valor <see cref="T:System.Runtime.InteropServices.CharSet" /> especificado.</summary>
      <param name="charSet" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; values.">Uno de los valores de <see cref="T:System.Runtime.InteropServices.CharSet" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary vsli:raw="Gets the default value of &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; for any call to &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt;.">Obtiene el valor predeterminado de <see cref="T:System.Runtime.InteropServices.CharSet" /> para cualquier llamada a <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</summary>
      <returns vsli:raw="The default value of &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; for any call to &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt;.">El valor predeterminado de <see cref="T:System.Runtime.InteropServices.CharSet" /> para cualquier llamada a <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute">
      <summary vsli:raw="Specifies the paths that are used to search for DLLs that provide functions for platform invokes.">Especifica las rutas de acceso que se usan para buscar archivos DLL que proporcionan funciones para las invocaciones de plataforma.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; class, specifying the paths to use when searching for the targets of platform invokes.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> y especifica las rutas que se van a usar cuando se buscan los destinos de las invocaciones de plataforma.</summary>
      <param name="paths" vsli:raw="A bitwise combination of enumeration values that specify the paths that the &lt;c&gt;LoadLibraryEx&lt;/c&gt; function searches during platform invokes.">Combinación bit a bit de valores de enumeración que especifican las rutas que la función <c>LoadLibraryEx</c> busca durante las invocaciones de plataforma.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.Paths">
      <summary vsli:raw="Gets a bitwise combination of enumeration values that specify the paths that the &lt;c&gt;LoadLibraryEx&lt;/c&gt; function searches during platform invokes.">Obtiene una combinación bit a bit de valores de enumeración que especifican las rutas que la función <c>LoadLibraryEx</c> busca durante las invocaciones de plataforma.</summary>
      <returns vsli:raw="A bitwise combination of enumeration values that specify search paths for platform invokes.">Una combinación bit a bit de valores de enumeración que especifican las rutas de acceso de búsqueda para llamadas a la plataforma.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary vsli:raw="Sets the default value of a parameter when called from a language that supports default parameters. This class cannot be inherited.">Establece el valor predeterminado de un parámetro cuando se le llama desde un lenguaje que admite parámetros predeterminados. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultParameterValueAttribute&quot; /&gt; class with the default value of a parameter.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute" /> con el valor predeterminado de un parámetro.</summary>
      <param name="value" vsli:raw="An object that represents the default value of a parameter.">Objeto que representa el valor predeterminado de un parámetro.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary vsli:raw="Gets the default value of a parameter.">Obtiene el valor predeterminado del parámetro.</summary>
      <returns vsli:raw="An object that represents the default value of a parameter.">Objeto que representa el valor predeterminado de un parámetro.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_DISPATCH&quot; /&gt;.">Encapsula los objetos cuyas referencias se van a calcular como <see langword="VT_DISPATCH" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt; class with the object being wrapped.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> con el objeto que se va a ajustar.</summary>
      <param name="obj" vsli:raw="The object to be wrapped and converted to &lt;see cref=&quot;F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH&quot; /&gt;.">Objeto que se va a ajustar y convertir a <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a class or an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;obj&quot; /&gt; does not support &lt;see langword=&quot;IDispatch&quot; /&gt;.">
        <paramref name="obj" /> no es una clase ni una matriz.
O bien
<paramref name="obj" /> no es compatible con <see langword="IDispatch" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter was marked with a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComVisibleAttribute&quot; /&gt; attribute that was passed a value of &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;obj&quot; /&gt; parameter inherits from a type marked with a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComVisibleAttribute&quot; /&gt; attribute that was passed a value of &lt;see langword=&quot;false&quot; /&gt;.">El parámetro <paramref name="obj" /> se ha marcado con un atributo <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> que se pasó con el valor de <see langword="false" />.
O bien
El parámetro <paramref name="obj" /> hereda de un tipo marcado con un atributo <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> que se pasó con el valor de <see langword="false" />.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary vsli:raw="Gets the object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;.">Obtiene el objeto ajustado por <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />.</summary>
      <returns vsli:raw="The object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;.">Objeto ajustado por <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary vsli:raw="Specifies the COM dispatch identifier (DISPID) of a method, field, or property.">Especifica el identificador de envío (DISPID) de COM de un método, un campo o una propiedad.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;DispIdAttribute&quot; /&gt; class with the specified DISPID.">Inicializa una nueva instancia de la clase <see langword="DispIdAttribute" /> con el identificador de envío (DISPID) especificado.</summary>
      <param name="dispId" vsli:raw="The DISPID for the member.">Identificador de envío (DISPID) del miembro.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary vsli:raw="Gets the DISPID for the member.">Obtiene el identificador de envío (DISPID) del miembro.</summary>
      <returns vsli:raw="The DISPID for the member.">Identificador de envío (DISPID) del miembro.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary vsli:raw="Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.">Indica que una biblioteca de vínculos dinámicos (DLL) no administrada expone el método con atributos como punto de entrada estático.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt; class with the name of the DLL containing the method to import.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> con el nombre del archivo DLL que contiene el método que se va a importar.</summary>
      <param name="dllName" vsli:raw="The name of the DLL that contains the unmanaged method. In .NET Framework, this can include an assembly display name, if the DLL is included in an assembly.">Nombre del archivo DLL que contiene el método no administrado. Puede incluir un nombre para mostrar del ensamblado, si el archivo DLL está incluido en un ensamblado.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary vsli:raw="Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.">Habilita o deshabilita el comportamiento de asignación de ajuste perfecto al convertir caracteres Unicode en caracteres ANSI.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary vsli:raw="Indicates the calling convention of an entry point.">Indica la convención de llamada de un punto de entrada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary vsli:raw="Indicates how to marshal string parameters to the method and controls name mangling.">Indica la forma de calcular las referencias de los parámetros de cadena al método, y controla los daños en los nombres.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary vsli:raw="Indicates the name or ordinal of the DLL entry point to be called.">Indica el nombre u ordinal del punto de entrada de la DLL al que se va a llamar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary vsli:raw="Controls whether the &lt;see cref=&quot;F:System.Runtime.InteropServices.DllImportAttribute.CharSet&quot; /&gt; field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.">Controla si el campo <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> hace que Common Language Runtime busque en un archivo DLL no administrado nombres de puntos de entrada distintos del especificado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary vsli:raw="Indicates whether unmanaged methods that have &lt;see langword=&quot;HRESULT&quot; /&gt; return values are directly translated or whether &lt;see langword=&quot;HRESULT&quot; /&gt; return values are automatically converted to exceptions.">Indica si los métodos no administrados que tienen el valor devuelto <see langword="HRESULT" /> o <see langword="retval" /> se traducen directamente o si los valores devueltos <see langword="HRESULT" /> o <see langword="retval" /> se convierten automáticamente en excepciones.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary vsli:raw="Indicates whether the callee sets an error (&lt;see langword=&quot;SetLastError&quot; /&gt; on Windows or &lt;see langword=&quot;errno&quot; /&gt; on other platforms) before returning from the attributed method.">Indica que el destinatario de la llamada llamará a la función <see langword="SetLastError" /> de la API de Windows antes de volver del método con atributos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI &quot;?&quot; character.">Habilita o deshabilita el inicio de una excepción cuando un carácter Unicode que no se puede asignar se convierte en un carácter ANSI "?".</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary vsli:raw="Gets the name of the DLL file that contains the entry point.">Obtiene el nombre del archivo DLL que contiene el punto de entrada.</summary>
      <returns vsli:raw="The name of the DLL file that contains the entry point.">Nombre del archivo DLL que contiene el punto de entrada.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportResolver">
      <summary vsli:raw="Provides a delegate used to resolve native libraries via callback.">Proporciona un delegado que se usa para resolver las bibliotecas nativas a través de la devolución de llamada.</summary>
      <param name="libraryName" vsli:raw="The native library to resolve.">Biblioteca nativa que se va a resolver.</param>
      <param name="assembly" vsli:raw="The assembly requesting the resolution.">Ensamblado que solicita la resolución.</param>
      <param name="searchPath" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; on the PInvoke, if any. Otherwise, the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; on the assembly, if any. Otherwise &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> en PInvoke, si existe. En caso contrario, <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> en el ensamblado, si existe. De lo contrario, es <see langword="null" />.</param>
      <returns vsli:raw="The handle for the loaded native library on success, or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; on failure.">Identificador de la biblioteca nativa cargada en caso de éxito o <see cref="F:System.IntPtr.Zero" /> en caso de error.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportSearchPath">
      <summary vsli:raw="Specifies the paths that are used to search for DLLs that provide functions for platform invokes.">Especifica las rutas de acceso que se usan para buscar archivos DLL que proporcionan funciones para las invocaciones de plataforma.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.ApplicationDirectory">
      <summary vsli:raw="Include the application directory in the DLL search path.">Incluya el directorio de la aplicación en la ruta de búsqueda de DLL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory">
      <summary vsli:raw="When searching for assembly dependencies, include the directory that contains the assembly itself, and search that directory first. When used in Native AOT and single-file deployment models, the application's installation directory is considered the &quot;assembly directory&quot; and is searched.">Al buscar dependencias del ensamblado, incluya el directorio que contiene el propio ensamblado y busque en ese directorio primero. .NET Framework usa este valor antes de que las rutas de acceso se pasen a la función LoadLibraryEx de Win32.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior">
      <summary vsli:raw="Search the application directory, and then call the Win32 LoadLibraryEx function with the &lt;c&gt;LOAD_WITH_ALTERED_SEARCH_PATH&lt;/c&gt; flag. This value is ignored if any other value is specified. Operating systems that do not support the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; attribute use this value, and ignore other values.">Busque en el directorio de la aplicación y luego llame a la función LoadLibraryEx de Win32 con la marca <c>LOAD_WITH_ALTERED_SEARCH_PATH</c>. Se omite este valor si se especifica cualquier otro valor. Los sistemas operativos que no admiten el atributo <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> usan este valor y omiten otros valores.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories">
      <summary vsli:raw="Include the application directory, the &lt;see langword=&quot;%WinDir%\System32&quot; /&gt; directory, and user directories in the DLL search path.">Incluya el directorio de la aplicación, el directorio <see langword="%WinDir%\System32" /> y los directorios de usuario en la ruta de búsqueda de DLL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.System32">
      <summary vsli:raw="Include the &lt;see langword=&quot;%WinDir%\System32&quot; /&gt; directory in the DLL search path.">Incluya el directorio <see langword="%WinDir%\System32" /> en la ruta de búsqueda de DLL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UseDllDirectoryForDependencies">
      <summary vsli:raw="Search for the dependencies of a DLL in the folder where the DLL is located before searching other folders.">Buscar las dependencias de una DLL en la carpeta donde se encuentra dicha DLL antes de buscar en otras carpetas.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UserDirectories">
      <summary vsli:raw="Include any path that was explicitly added to the process-wide search path by using the Win32 &lt;c&gt;AddDllDirectory&lt;/c&gt; function.">Incluya cualquier ruta que se haya agregado explícitamente a la ruta de búsqueda en todo el proceso mediante la función <c>AddDllDirectory</c> de Win32.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_ERROR&quot; /&gt;.">Encapsula los objetos cuyas referencias se van a calcular como <see langword="VT_ERROR" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with the HRESULT that corresponds to the exception supplied.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> con el HRESULT que corresponda a la excepción suministrada.</summary>
      <param name="e" vsli:raw="The exception to be converted to an error code.">Excepción que se convertirá en código de error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with the HRESULT of the error.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> con el HRESULT del error.</summary>
      <param name="errorCode" vsli:raw="The HRESULT of the error.">HRESULT del error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with an object containing the HRESULT of the error.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> con un objeto que contiene el HRESULT del error.</summary>
      <param name="errorCode" vsli:raw="The object containing the HRESULT of the error.">Objeto que contiene el HRESULT del error.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;errorCode&quot; /&gt; parameter is not an &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">El parámetro <paramref name="errorCode" /> no es un tipo <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary vsli:raw="Gets the error code of the wrapper.">Obtiene el código de error del contenedor.</summary>
      <returns vsli:raw="The HRESULT of the error.">HRESULT del error.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary vsli:raw="Supplies an explicit &lt;see cref=&quot;T:System.Guid&quot; /&gt; when an automatic GUID is undesirable.">Suministra un objeto <see cref="T:System.Guid" /> explícitamente cuando no se desea que se genere un GUID automáticamente.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.GuidAttribute&quot; /&gt; class with the specified GUID.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> con el GUID especificado.</summary>
      <param name="guid" vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt; to be assigned.">La estructura <see cref="T:System.Guid" /> que se va a asignar.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Guid&quot; /&gt; of the class.">Obtiene la estructura <see cref="T:System.Guid" /> de la clase.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt; of the class.">La estructura <see cref="T:System.Guid" /> de la clase.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary vsli:raw="Tracks outstanding handles and forces a garbage collection when the specified threshold is reached.">Realiza un seguimiento de los controladores pendientes y fuerza una recolección de elementos no utilizados cuando se alcanza el umbral especificado.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; class using a name and a threshold at which to begin handle collection.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.HandleCollector" /> utilizando un nombre y un umbral en el que va a comenzar la colección de identificadores.</summary>
      <param name="name" vsli:raw="A name for the collector. This parameter allows you to name collectors that track handle types separately.">Nombre del recolector. Este parámetro le permite denominar recolectores que realizan el seguimiento de tipos de identificador por separado.</param>
      <param name="initialThreshold" vsli:raw="A value that specifies the point at which collections should begin.">Valor que especifica el punto en el que deben comenzar las colecciones.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter is less than 0.">El parámetro <paramref name="initialThreshold" /> es menor que 0.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; class using a name, a threshold at which to begin handle collection, and a threshold at which handle collection must occur.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.HandleCollector" /> utilizando un nombre, un umbral en el que va a comenzar la colección de identificadores y otro umbral en el que debe producirse la colección de identificadores.</summary>
      <param name="name" vsli:raw="A name for the collector.  This parameter allows you to name collectors that track handle types separately.">Nombre del recolector.  Este parámetro le permite denominar recolectores que realizan el seguimiento de tipos de identificador por separado.</param>
      <param name="initialThreshold" vsli:raw="A value that specifies the point at which collections should begin.">Valor que especifica el punto en el que deben comenzar las colecciones.</param>
      <param name="maximumThreshold" vsli:raw="A value that specifies the point at which collections must occur. This should be set to the maximum number of available handles.">Valor que especifica el punto en el que deben producirse las colecciones. Este debe establecerse en el número máximo de identificadores disponibles.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;maximumThreshold&quot; /&gt; parameter is less than 0.">El parámetro <paramref name="initialThreshold" /> es menor que 0.
o bien
El parámetro <paramref name="maximumThreshold" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;maximumThreshold&quot; /&gt; parameter is less than the &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter.">El parámetro <paramref name="maximumThreshold" /> es menor que el parámetro <paramref name="initialThreshold" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary vsli:raw="Increments the current handle count.">Incrementa el contador del identificador actual.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Count&quot; /&gt; property is less than 0.">El valor de la propiedad <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> es menor que 0.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary vsli:raw="Gets the number of handles collected.">Obtiene el número de identificadores recolectados.</summary>
      <returns vsli:raw="The number of handles collected.">Número de identificadores recolectados.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary vsli:raw="Gets a value that specifies the point at which collections should begin.">Obtiene un valor que especifica el punto en el que deben comenzar las colecciones.</summary>
      <returns vsli:raw="A value that specifies the point at which collections should begin.">Valor que especifica el punto en el que deben comenzar las colecciones.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary vsli:raw="Gets a value that specifies the point at which collections must occur.">Obtiene un valor que especifica el punto en el que deben producirse las colecciones.</summary>
      <returns vsli:raw="A value that specifies the point at which collections must occur.">Valor que especifica el punto en el que deben producirse las colecciones.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary vsli:raw="Gets the name of a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; object.">Obtiene el nombre de un objeto <see cref="T:System.Runtime.InteropServices.HandleCollector" />.</summary>
      <returns vsli:raw="This &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Name&quot; /&gt; property allows you to name collectors that track handle types separately.">Esta propiedad <see cref="P:System.Runtime.InteropServices.HandleCollector.Name" /> le permite denominar recolectores que realizan el seguimiento de tipos de identificador por separado.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary vsli:raw="Decrements the current handle count.">Decrementa el contador del identificador actual.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Count&quot; /&gt; property is less than 0.">El valor de la propiedad <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> es menor que 0.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary vsli:raw="Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.">Encapsula un objeto administrado que contiene un identificador de un recurso que se pasa a código no administrado mediante la invocación de la plataforma.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; class with the object to wrap and a handle to the resource used by unmanaged code.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.HandleRef" /> con el objeto que se va a incluir en un contenedor y un identificador del recurso utilizado por el código no administrado.</summary>
      <param name="wrapper" vsli:raw="A managed object that should not be finalized until the platform invoke call returns.">Objeto administrado que no debe finalizarse hasta que se devuelva la llamada de invocación de plataforma.</param>
      <param name="handle" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that indicates a handle to a resource.">
        <see cref="T:System.IntPtr" /> que indica un identificador de un recurso.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary vsli:raw="Gets the handle to a resource.">Obtiene el identificador de un recurso.</summary>
      <returns vsli:raw="The handle to a resource.">Identificador de un recurso.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary vsli:raw="Returns the handle to a resource of the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">Devuelve el identificador de un recurso del objeto <see cref="T:System.Runtime.InteropServices.HandleRef" /> especificado.</summary>
      <param name="value" vsli:raw="The object that needs a handle.">Objeto que necesita un identificador.</param>
      <returns vsli:raw="The handle to a resource of the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">Identificador de un recurso del objeto <see cref="T:System.Runtime.InteropServices.HandleRef" /> especificado.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary vsli:raw="Returns the internal integer representation of a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">Devuelve la representación entera interna de un objeto <see cref="T:System.Runtime.InteropServices.HandleRef" />.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object to retrieve an internal integer representation from.">Objeto <see cref="T:System.Runtime.InteropServices.HandleRef" /> del que se va a recuperar una representación de entero interno.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; object that represents a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">Objeto <see cref="T:System.IntPtr" /> que representa un objeto <see cref="T:System.Runtime.InteropServices.HandleRef" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary vsli:raw="Gets the object holding the handle to a resource.">Obtiene el objeto que contiene el identificador de un recurso.</summary>
      <returns vsli:raw="The object holding the handle to a resource.">Objeto que contiene el identificador de un recurso.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary vsli:raw="Provides a way for clients to access the actual object, rather than the adapter object handed out by a custom marshaler.">Proporciona una manera de que los clientes accedan al objeto real, en lugar de ofrecer el objeto adaptador que proporciona el contador de referencias.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary vsli:raw="Provides access to the underlying object wrapped by a custom marshaler.">Proporciona acceso al objeto subyacente ajustado por un contador de referencias personalizado.</summary>
      <returns vsli:raw="The object contained by the adapter object.">Objeto incluido en el objeto adaptador.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary vsli:raw="Enables users to write activation code for managed objects that extend &lt;see cref=&quot;T:System.MarshalByRefObject&quot; /&gt;.">Permite que los usuarios escriban código de activación para objetos administrados que extiendan <see cref="T:System.MarshalByRefObject" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary vsli:raw="Creates a new instance of the specified type.">Crea una nueva instancia del tipo especificado.</summary>
      <param name="serverType" vsli:raw="The type to activate.">Tipo a activar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.MarshalByRefObject&quot; /&gt; associated with the specified type.">
        <see cref="T:System.MarshalByRefObject" /> asociado al tipo especificado.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary vsli:raw="Provides custom wrappers for handling method calls.">Proporciona contenedores personalizados para controlar las llamadas a métodos.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary vsli:raw="Performs necessary cleanup of the managed data when it is no longer needed.">Realiza la limpieza necesaria en los datos administrados cuando ya no son necesarios.</summary>
      <param name="ManagedObj" vsli:raw="The managed object to be destroyed.">Objeto administrado que se va a destruir.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary vsli:raw="Performs necessary cleanup of the unmanaged data when it is no longer needed.">Realiza la limpieza necesaria en los datos no administrados cuando ya no son necesarios.</summary>
      <param name="pNativeData" vsli:raw="A pointer to the unmanaged data to be destroyed.">Puntero a los datos no administrados que se van a destruir.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary vsli:raw="Returns the size of the native data to be marshaled.">Devuelve el tamaño de los datos nativos cuyas referencias se van a calcular.</summary>
      <returns vsli:raw="The size, in bytes, of the native data.">Tamaño de los datos nativos, en bytes.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary vsli:raw="Converts the managed data to unmanaged data.">Convierte los datos administrados en datos no administrados.</summary>
      <param name="ManagedObj" vsli:raw="The managed object to be converted.">Objeto administrado que se va a convertir.</param>
      <returns vsli:raw="A pointer to the COM view of the managed object.">Puntero a la vista COM del objeto administrado.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary vsli:raw="Converts the unmanaged data to managed data.">Convierte los datos no administrados en datos administrados.</summary>
      <param name="pNativeData" vsli:raw="A pointer to the unmanaged data to be wrapped.">Puntero a los datos no administrados que se van a ajustar.</param>
      <returns vsli:raw="An object that represents the managed view of the COM data.">Objeto que representa la vista administrada de los datos COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary vsli:raw="Enables developers to provide a custom, managed implementation of the IUnknown::QueryInterface(REFIID riid, void **ppvObject) method.">Permite a los programadores proporcionar una implementación personalizada y administrada del método IUnknown::QueryInterface(REFIID riid, void **ppvObject).</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary vsli:raw="Returns an interface according to a specified interface ID.">Devuelve una interfaz correspondiente a un id. de interfaz especificado.</summary>
      <param name="iid" vsli:raw="The GUID of the requested interface.">GUID de la interfaz solicitada.</param>
      <param name="ppv" vsli:raw="A reference to the requested interface, when this method returns.">Referencia a la interfaz solicitada, cuando este método vuelve.</param>
      <returns vsli:raw="One of the enumeration values that indicates whether a custom implementation of IUnknown::QueryInterface was used.">Uno de los valores de enumeración que indica si se utilizó una implementación personalizada de IUnknown::QueryInterface.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary vsli:raw="Indicates that the types defined within an assembly were originally defined in a type library.">Indica que los tipos definidos en un ensamblado se definieron originalmente en una biblioteca de tipos.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute&quot; /&gt; class with the name of the original type library file.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute" /> con el nombre del archivo de la biblioteca de tipos original.</summary>
      <param name="tlbFile" vsli:raw="The location of the original type library file.">Ubicación del archivo de la biblioteca de tipos original.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary vsli:raw="Gets the name of the original type library file.">Obtiene el nombre del archivo de la biblioteca de tipos original.</summary>
      <returns vsli:raw="The name of the original type library file.">Nombre del archivo de la biblioteca de tipos original.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary vsli:raw="Indicates whether a managed interface is dual, dispatch-only, or &lt;see langword=&quot;IUnknown&quot; /&gt; -only when exposed to COM.">Indica si una interfaz administrada es dual, de sólo distribución o sólo <see langword="IUnknown" /> cuando se expone a COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InterfaceTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; enumeration member.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> con el miembro de enumeración <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> especificado.</summary>
      <param name="interfaceType" vsli:raw="Describes how the interface should be exposed to COM clients.">Describe la forma en que la interfaz debe exponerse a clientes COM.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InterfaceTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; enumeration member.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> con el miembro de enumeración <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> especificado.</summary>
      <param name="interfaceType" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; values that describes how the interface should be exposed to COM clients.">Uno de los valores de <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> que describe la forma en que la interfaz debe exponerse a clientes COM.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; value that describes how the interface should be exposed to COM.">Obtiene el valor de <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> que describe la forma en que la interfaz debe exponerse a COM.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; value that describes how the interface should be exposed to COM.">Valor de <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> que describe la forma en que la interfaz debe exponerse a COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary vsli:raw="The exception thrown when an invalid COM object is used.">Excepción que se produce al utilizar un objeto COM no válido.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;InvalidComObjectException&quot; /&gt; with default properties.">Inicializa una instancia de <see langword="InvalidComObjectException" /> con propiedades predeterminadas.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;COMException&quot; /&gt; class from serialization data.">Inicializa una nueva instancia de la clase <see langword="COMException" /> a partir de los datos de serialización.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Objeto que contiene los datos del objeto serializados.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Información contextual acerca del origen o del destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;InvalidComObjectException&quot; /&gt; with a message.">Inicializa una instancia de <see langword="InvalidComObjectException" /> con un mensaje.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Mensaje que indica el motivo de la excepción.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InvalidComObjectException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="inner" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary vsli:raw="The exception thrown by the marshaler when it encounters an argument of a variant type that can not be marshaled to managed code.">Excepción producida por el contador de referencias cuando detecta un argumento de tipo Variant cuyas referencias al código administrado no se pueden calcular.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class with default values.">Inicializa una nueva instancia de la clase <see langword="InvalidOleVariantTypeException" /> con valores predeterminados.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class from serialization data.">Inicializa una nueva instancia de la clase <see langword="InvalidOleVariantTypeException" /> a partir de los datos de serialización.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Objeto que contiene los datos del objeto serializados.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Información contextual acerca del origen o del destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class with a specified message.">Inicializa una nueva instancia de la clase <see langword="InvalidOleVariantTypeException" /> con el mensaje especificado.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Mensaje que indica el motivo de la excepción.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InvalidOleVariantTypeException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="inner" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary vsli:raw="Indicates that a method's unmanaged signature expects a locale identifier (LCID) parameter.">Indica que la firma no administrada de un método espera un parámetro de identificador de configuración regional (LCID).</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;LCIDConversionAttribute&quot; /&gt; class with the position of the LCID in the unmanaged signature.">Inicializa una nueva instancia de la clase <see langword="LCIDConversionAttribute" /> con la posición del LCID en la firma no administrada.</summary>
      <param name="lcid" vsli:raw="Indicates the position of the LCID argument in the unmanaged signature, where 0 is the first argument.">Indica la posición del argumento de LCID en la firma no administrada, donde 0 es el primer argumento.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary vsli:raw="Gets the position of the LCID argument in the unmanaged signature.">Obtiene la posición del argumento de LCID en la firma no administrada.</summary>
      <returns vsli:raw="The position of the LCID argument in the unmanaged signature, where 0 is the first argument.">Posición del argumento de LCID en la firma no administrada, donde 0 es el primer argumento.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute">
      <summary vsli:raw="Provides support for user customization of interop stubs in managed-to-COM interop scenarios.">Proporciona compatibilidad con la personalización del usuario de código auxiliar de interoperabilidad en escenarios de administrado a interoperabilidad COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute&quot; /&gt; class with the specified class type and method name.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute" /> con el tipo de clase y el nombre del método que se hayan especificado.</summary>
      <param name="classType" vsli:raw="The class that contains the required stub method.">Clase que contiene el método de código auxiliar necesario.</param>
      <param name="methodName" vsli:raw="The name of the stub method.">Nombre del método de código auxiliar.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;methodName&quot; /&gt; cannot be found.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is not static or non-generic.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method's parameter list does not match the expected parameter list for the stub.">No se encuentra <paramref name="methodName" />.
O bien
El método es no estático o no genérico.
O bien
La lista de parámetros del método no coincide con la lista de parámetros que espera el código auxiliar.</exception>
      <exception cref="T:System.MethodAccessException" vsli:raw="The interface that contains the managed interop method has no access to the stub method, because the stub method has private or protected accessibility, or because of a security issue.">La interfaz que contiene el método de interoperabilidad administrado no tiene acceso al método de código auxiliar, porque el método de código auxiliar tiene accesibilidad privada o protegida, o debido a un problema de seguridad.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType">
      <summary vsli:raw="Gets the class that contains the required stub method.">Obtiene la clase que contiene el método de código auxiliar necesario.</summary>
      <returns vsli:raw="The class that contains the customized interop stub.">Clase que contiene el código auxiliar de interoperabilidad personalizado.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName">
      <summary vsli:raw="Gets the name of the stub method.">Obtiene el nombre del método de código auxiliar.</summary>
      <returns vsli:raw="The name of a customized interop stub.">Nombre de un código auxiliar de interoperabilidad personalizado.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary vsli:raw="Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.">Proporciona una colección de métodos para asignar memoria no administrada, copiar bloques de memoria no administrados y convertir los tipos administrados en no administrados, así como otros métodos diversos que se utilizan al interactuar con código no administrado.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary vsli:raw="Increments the reference count on the specified interface.">Incrementa el contador de referencia en la interfaz especificada.</summary>
      <param name="pUnk" vsli:raw="The interface reference count to increment.">Contador de referencia de la interfaz a incrementar.</param>
      <returns vsli:raw="The new value of the reference count on the &lt;paramref name=&quot;pUnk&quot; /&gt; parameter.">Nuevo valor del contador de referencias en el parámetro <paramref name="pUnk" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary vsli:raw="Allocates a block of memory of specified size from the COM task memory allocator.">Asigna un bloque de memoria de un tamaño especificado del asignador de memoria de tareas COM.</summary>
      <param name="cb" vsli:raw="The size of the block of memory to be allocated.">Tamaño del bloque de memoria a asignar.</param>
      <returns vsli:raw="An integer representing the address of the block of memory allocated. This memory must be released with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)&quot; /&gt;.">Entero que representa la dirección del bloque de memoria asignado. Debe liberarse esta memoria con <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">No hay memoria suficiente para satisfacer la solicitud.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary vsli:raw="Allocates memory from the unmanaged memory of the process by using the specified number of bytes.">Asigna memoria de la memoria no administrada del proceso utilizando el número especificado de bytes.</summary>
      <param name="cb" vsli:raw="The required number of bytes in memory.">Número necesario de bytes en memoria.</param>
      <returns vsli:raw="A pointer to the newly allocated memory. This memory must be released using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt; method.">Puntero a la memoria recién asignada. Debe liberarse esta memoria con el método <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">No hay memoria suficiente para satisfacer la solicitud.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary vsli:raw="Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.">Asigna memoria de la memoria no administrada del proceso utilizando el puntero al número especificado de bytes.</summary>
      <param name="cb" vsli:raw="The required number of bytes in memory.">Número necesario de bytes en memoria.</param>
      <returns vsli:raw="A pointer to the newly allocated memory. This memory must be released using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt; method.">Puntero a la memoria recién asignada. Debe liberarse esta memoria con el método <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">No hay memoria suficiente para satisfacer la solicitud.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary vsli:raw="Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.">Indica si hay contenedores RCW de cualquier contexto disponibles para la limpieza.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are any RCWs available for cleanup; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si hay contenedores RCW disponibles para la limpieza; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary vsli:raw="Gets an interface pointer identified by the specified moniker.">Obtiene un puntero de interfaz identificado por el moniker especificado.</summary>
      <param name="monikerName" vsli:raw="The moniker corresponding to the desired interface pointer.">Moniker correspondiente al puntero de interfaz deseado.</param>
      <returns vsli:raw="An object containing a reference to the interface pointer identified by the &lt;paramref name=&quot;monikerName&quot; /&gt; parameter. A moniker is a name, and in this case, the moniker is defined by an interface.">Objeto que contiene una referencia al puntero de interfaz identificado por el parámetro <paramref name="monikerName" />. Un moniker es un nombre y, en este caso, se define mediante una interfaz.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="An unrecognized HRESULT was returned by the unmanaged &lt;see langword=&quot;BindToMoniker&quot; /&gt; method.">El método <see langword="BindToMoniker" /> no administrado devolvió un HRESULT no reconocido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary vsli:raw="Changes the strength of an object's COM Callable Wrapper (CCW) handle.">Cambia la intensidad del controlador del contenedor CCW de un objeto.</summary>
      <param name="otp" vsli:raw="The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.">Objeto cuyo CCW contiene un controlador de recuento de referencias. El controlador es seguro si el recuento de referencias del CCW es mayor que cero; de lo contrario, es débil.</param>
      <param name="fIsWeak" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to change the strength of the handle on the &lt;paramref name=&quot;otp&quot; /&gt; parameter to weak, regardless of its reference count; &lt;see langword=&quot;false&quot; /&gt; to reset the handle strength on &lt;paramref name=&quot;otp&quot; /&gt; to be reference counted.">Es <see langword="true" /> para cambiar a débil la intensidad del controlador en el parámetro <paramref name="otp" />, independientemente de su contador de referencia; es <see langword="false" /> para restablecer la intensidad del controlador en <paramref name="otp" /> para que se cuenten las referencias.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary vsli:raw="Notifies the runtime to clean up all Runtime Callable Wrappers (RCWs) allocated in the current context.">Notifica al tiempo de ejecución que debe limpiar todos los contenedores RCW asignados en el contexto actual.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.">Copia datos de una matriz unidimensional y administrada de enteros de 8 bits sin signo a un puntero de memoria no administrada.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Matriz unidimensional de la que se va a copiar.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Índice de base cero de la matriz de origen donde debe comenzar la copia.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Puntero de memoria en el que se va a copiar.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Número de elementos de la matriz que se van a copiar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> y <paramref name="length" /> no son válidos.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> o <paramref name="length" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.">Copia datos de una matriz de caracteres unidimensional y administrada a un puntero de memoria no administrada.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Matriz unidimensional de la que se va a copiar.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Índice de base cero de la matriz de origen donde debe comenzar la copia.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Puntero de memoria en el que se va a copiar.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Número de elementos de la matriz que se van a copiar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> y <paramref name="length" /> no son válidos.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="startIndex" />, <paramref name="destination" /> o <paramref name="length" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.">Copia datos de una matriz unidimensional y administrada de números de punto flotante de precisión doble a un puntero de memoria no administrada.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Matriz unidimensional de la que se va a copiar.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Índice de base cero de la matriz de origen donde debe comenzar la copia.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Puntero de memoria en el que se va a copiar.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Número de elementos de la matriz que se van a copiar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> y <paramref name="length" /> no son válidos.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> o <paramref name="length" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.">Copia datos de una matriz unidimensional administrada de enteros de 16 bits con signo a un puntero de memoria no administrada.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Matriz unidimensional de la que se va a copiar.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Índice de base cero de la matriz de origen donde debe comenzar la copia.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Puntero de memoria en el que se va a copiar.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Número de elementos de la matriz que se van a copiar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> y <paramref name="length" /> no son válidos.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> o <paramref name="length" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.">Copia datos de una matriz unidimensional administrada de enteros de 32 bits con signo a un puntero de memoria no administrada.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Matriz unidimensional de la que se va a copiar.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Índice de base cero de la matriz de origen donde debe comenzar la copia.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Puntero de memoria en el que se va a copiar.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Número de elementos de la matriz que se van a copiar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> y <paramref name="length" /> no son válidos.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="startIndex" /> o <paramref name="length" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.">Copia datos de una matriz unidimensional administrada de enteros de 64 bits con signo a un puntero de memoria no administrada.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Matriz unidimensional de la que se va a copiar.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Índice de base cero de la matriz de origen donde debe comenzar la copia.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Puntero de memoria en el que se va a copiar.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Número de elementos de la matriz que se van a copiar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> y <paramref name="length" /> no son válidos.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> o <paramref name="length" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.">Copia datos de un puntero de memoria no administrada a una matriz administrada de enteros de 8 bits sin signo.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Puntero de memoria del que se va a copiar.</param>
      <param name="destination" vsli:raw="The array to copy to.">Matriz en la que se va a copiar.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Índice de base cero de la matriz de destino donde debe comenzar la copia.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Número de elementos de la matriz que se van a copiar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> o <paramref name="length" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed character array.">Copia datos de un puntero de memoria no administrada a una matriz de caracteres administrada.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Puntero de memoria del que se va a copiar.</param>
      <param name="destination" vsli:raw="The array to copy to.">Matriz en la que se va a copiar.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Índice de base cero de la matriz de destino donde debe comenzar la copia.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Número de elementos de la matriz que se van a copiar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> o <paramref name="length" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.">Copia datos de un puntero de memoria no administrada a una matriz administrada de números de punto flotante de precisión doble.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Puntero de memoria del que se va a copiar.</param>
      <param name="destination" vsli:raw="The array to copy to.">Matriz en la que se va a copiar.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Índice de base cero de la matriz de destino donde debe comenzar la copia.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Número de elementos de la matriz que se van a copiar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> o <paramref name="length" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.">Copia datos de un puntero de memoria no administrada a una matriz administrada de enteros de 16 bits con signo.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Puntero de memoria del que se va a copiar.</param>
      <param name="destination" vsli:raw="The array to copy to.">Matriz en la que se va a copiar.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Índice de base cero de la matriz de destino donde debe comenzar la copia.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Número de elementos de la matriz que se van a copiar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> o <paramref name="length" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.">Copia datos de un puntero de memoria no administrada a una matriz administrada de enteros de 32 bits con signo.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Puntero de memoria del que se va a copiar.</param>
      <param name="destination" vsli:raw="The array to copy to.">Matriz en la que se va a copiar.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Índice de base cero de la matriz de destino donde debe comenzar la copia.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Número de elementos de la matriz que se van a copiar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> o <paramref name="length" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.">Copia datos de un puntero de memoria no administrada a una matriz administrada de enteros de 64 bits con signo.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Puntero de memoria del que se va a copiar.</param>
      <param name="destination" vsli:raw="The array to copy to.">Matriz en la que se va a copiar.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Índice de base cero de la matriz de destino donde debe comenzar la copia.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Número de elementos de la matriz que se van a copiar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> o <paramref name="length" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; array.">Copia datos de un puntero de memoria no administrada a una matriz <see cref="T:System.IntPtr" /> administrada.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Puntero de memoria del que se va a copiar.</param>
      <param name="destination" vsli:raw="The array to copy to.">Matriz en la que se va a copiar.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Índice de base cero de la matriz de destino donde debe comenzar la copia.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Número de elementos de la matriz que se van a copiar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> o <paramref name="length" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.">Copia datos de un puntero de memoria no administrada a una matriz administrada de números de punto flotante de precisión sencilla.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Puntero de memoria del que se va a copiar.</param>
      <param name="destination" vsli:raw="The array to copy to.">Matriz en la que se va a copiar.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Índice de base cero de la matriz de destino donde debe comenzar la copia.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Número de elementos de la matriz que se van a copiar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> o <paramref name="length" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; array to an unmanaged memory pointer.">Copia datos de una matriz <see cref="T:System.IntPtr" /> unidimensional y administrada a un puntero de memoria no administrada.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Matriz unidimensional de la que se va a copiar.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Índice de base cero de la matriz de origen donde debe comenzar la copia.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Puntero de memoria en el que se va a copiar.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Número de elementos de la matriz que se van a copiar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> o <paramref name="length" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.">Copia datos de una matriz unidimensional y administrada de números de punto flotante de precisión sencilla a un puntero de memoria no administrada.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Matriz unidimensional de la que se va a copiar.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Índice de base cero de la matriz de origen donde debe comenzar la copia.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Puntero de memoria en el que se va a copiar.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Número de elementos de la matriz que se van a copiar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> y <paramref name="length" /> no son válidos.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> o <paramref name="length" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary vsli:raw="Aggregates a managed object with the specified COM object.">Agrega un objeto administrado al objeto COM especificado.</summary>
      <param name="pOuter" vsli:raw="The outer &lt;see langword=&quot;IUnknown&quot; /&gt; pointer.">Puntero <see langword="IUnknown" /> externo.</param>
      <param name="o" vsli:raw="An object to aggregate.">Objeto que se va a agregar.</param>
      <returns vsli:raw="The inner &lt;see langword=&quot;IUnknown&quot; /&gt; pointer of the managed object.">Puntero <see langword="IUnknown" /> interno del objeto administrado.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is a Windows Runtime object.">
        <paramref name="o" /> es un objeto Windows en tiempo de ejecución.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Aggregates a managed object of the specified type with the specified COM object.">[Compatible con .NET Framework 4.5.1 y versiones posteriores]
Agrega un objeto administrado del tipo especificado con el objeto COM especificado.</summary>
      <param name="pOuter" vsli:raw="The outer IUnknown pointer.">El puntero externo IUnknown.</param>
      <param name="o" vsli:raw="The managed object to aggregate.">Objeto administrado que se va a agregar.</param>
      <typeparam name="T" vsli:raw="The type of the managed object to aggregate.">Tipo del objeto administrado que se va a agregar.</typeparam>
      <returns vsli:raw="The inner IUnknown pointer of the managed object.">El puntero interno IUnknown del objeto administrado.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is a Windows Runtime object.">
        <paramref name="o" /> es un objeto Windows en tiempo de ejecución.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary vsli:raw="Wraps the specified COM object in an object of the specified type.">Ajusta el objeto COM especificado en un objeto del tipo especificado.</summary>
      <param name="o" vsli:raw="The object to be wrapped.">Objeto que se va a almacenar en un contenedor.</param>
      <param name="t" vsli:raw="The type of wrapper to create.">Tipo de contenedor que se va a crear.</param>
      <returns vsli:raw="The newly wrapped object that is an instance of the desired type.">Objeto recién ajustado que es una instancia del tipo deseado.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; must derive from &lt;see langword=&quot;__ComObject&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;t&quot; /&gt; is a Windows Runtime type.">
        <paramref name="t" /> debe derivar de <see langword="__ComObject" />.
o bien
<paramref name="t" /> es un tipo Windows en tiempo de ejecución.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="t" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; cannot be converted to the destination type because it does not support all required interfaces.">
        <paramref name="o" /> no se puede convertir en el tipo de destino, ya que no admite todas las interfaces requeridas.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Wraps the specified COM object in an object of the specified type.">[Compatible con .NET Framework 4.5.1 y versiones posteriores]
Ajusta el objeto COM especificado en un objeto del tipo especificado.</summary>
      <param name="o" vsli:raw="The object to be wrapped.">Objeto que se va a almacenar en un contenedor.</param>
      <typeparam name="T" vsli:raw="The type of object to wrap.">Tipo de objeto que se va a incluir.</typeparam>
      <typeparam name="TWrapper" vsli:raw="The type of object to return.">Tipo de objeto que se va a devolver.</typeparam>
      <returns vsli:raw="The newly wrapped object.">Objeto recién ajustado.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;typeparamref name=&quot;T&quot; /&gt; must derive from &lt;see langword=&quot;__ComObject&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;typeparamref name=&quot;T&quot; /&gt; is a Windows Runtime type.">
        <typeparamref name="T" /> debe derivar de <see langword="__ComObject" />.
o bien
<typeparamref name="T" /> es un tipo Windows en tiempo de ejecución.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; cannot be converted to the &lt;paramref name=&quot;TWrapper&quot; /&gt; because it does not support all required interfaces.">
        <paramref name="o" /> no se puede convertir en <paramref name="TWrapper" /> porque no admite todas las interfaces necesarias.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary vsli:raw="Frees all substructures that the specified unmanaged memory block points to.">Libera todas las subestructuras a las que apunta el bloque de memoria no administrada especificado.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Puntero a un bloque de memoria no administrado.</param>
      <param name="structuretype" vsli:raw="Type of a formatted class. This provides the layout information necessary to delete the buffer in the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">Tipo de una clase con formato. Proporciona la información de diseño necesaria para eliminar el búfer del parámetro <paramref name="ptr" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structureType&quot; /&gt; has an automatic layout. Use sequential or explicit instead.">
        <paramref name="structureType" /> tiene un diseño automático. Utilice, en su lugar, un diseño secuencial o explícito.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Frees all substructures of a specified type that the specified unmanaged memory block points to.">[Compatible con .NET Framework 4.5.1 y versiones posteriores]
Libera todas las subestructuras de un tipo especificado a las que apunta el bloque de memoria no administrada especificado.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Puntero a un bloque de memoria no administrado.</param>
      <typeparam name="T" vsli:raw="The type of the formatted structure. This provides the layout information necessary to delete the buffer in the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">El tipo de estructura con formato. Proporciona la información de diseño necesaria para eliminar el búfer del parámetro <paramref name="ptr" />.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;typeparamref name=&quot;T&quot; /&gt; has an automatic layout. Use sequential or explicit instead.">
        <typeparamref name="T" /> tiene un diseño automático. Utilice, en su lugar, un diseño secuencial o explícito.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary vsli:raw="Releases all references to a Runtime Callable Wrapper (RCW) by setting its reference count to 0.">Libera todas las referencias a un contenedor RCW estableciendo su recuento de referencias en 0.</summary>
      <param name="o" vsli:raw="The RCW to be released.">RCW que se va a liberar.</param>
      <returns vsli:raw="The new value of the reference count of the RCW associated with the &lt;paramref name=&quot;o&quot; /&gt; parameter, which is 0 (zero) if the release is successful.">Nuevo valor del recuento de referencias del RCW asociado al parámetro <paramref name="o" />, que es 0 (cero) si la liberación se realiza correctamente.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is not a valid COM object.">
        <paramref name="o" /> no es un objeto COM válido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary vsli:raw="Frees a &lt;see langword=&quot;BSTR&quot; /&gt; using the COM SysFreeString function.">Libera un <see langword="BSTR" /> utilizando la función SysFreeString de COM.</summary>
      <param name="ptr" vsli:raw="The address of the BSTR to be freed.">Dirección del BSTR que se va a liberar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary vsli:raw="Frees a block of memory allocated by the unmanaged COM task memory allocator.">Libera un bloque de memoria asignado por el asignador de memoria de tareas COM no administrada.</summary>
      <param name="ptr" vsli:raw="The address of the memory to be freed.">Dirección de la memoria que se va a liberar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary vsli:raw="Frees memory previously allocated from the unmanaged memory of the process.">Libera memoria previamente asignada de la memoria no administrada del proceso.</summary>
      <param name="hglobal" vsli:raw="The handle returned by the original matching call to &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">Controlador devuelto por la llamada coincidente original a <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary vsli:raw="Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).">Devuelve el identificador único global (GUID) del tipo especificado o genera un GUID mediante el algoritmo que utiliza la herramienta Exportador de la biblioteca de tipos (Tlbexp.exe).</summary>
      <param name="type" vsli:raw="The type to generate a GUID for.">Tipo para el que se va a generar un GUID.</param>
      <returns vsli:raw="An identifier for the specified type.">Identificador para el tipo especificado.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary vsli:raw="Returns a programmatic identifier (ProgID) for the specified type.">Devuelve un identificador de programación (ProgID) para el tipo especificado.</summary>
      <param name="type" vsli:raw="The type to get a ProgID for.">Tipo para el que se va a obtener un ProgID.</param>
      <returns vsli:raw="The ProgID of the specified type.">ProgID del tipo especificado.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; parameter is not a class that can be create by COM. The class must be public, have a public parameterless constructor, and be COM visible.">El parámetro <paramref name="type" /> no es una clase que se pueda crear mediante COM. La clase debe ser pública, tener un constructor público sin parámetros y ser visible para COM.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="type" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary vsli:raw="Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.">Devuelve un puntero a una interfaz IUnknown que representa la interfaz especificada en el objeto indicado. El acceso a la interfaz de consulta personalizada está habilitado de forma predeterminada.</summary>
      <param name="o" vsli:raw="The object that provides the interface.">Objeto que proporciona la interfaz.</param>
      <param name="T" vsli:raw="The type of interface that is requested.">Tipo de interfaz que se solicita.</param>
      <returns vsli:raw="The interface pointer that represents the specified interface for the object.">Puntero de interfaz que representa la interfaz especificada para el objeto.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is a generic type definition.">El parámetro <typeparamref name="T" /> no es una interfaz.
o bien
El tipo no es visible para COM.
o bien
El parámetro <typeparamref name="T" /> es una definición de tipo genérico.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter does not support the requested interface.">El parámetro <paramref name="o" /> no admite la interfaz solicitada.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="o" /> es <see langword="null" />.
o bien
El parámetro <typeparamref name="T" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary vsli:raw="Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.">Devuelve un puntero a una interfaz IUnknown que representa la interfaz especificada en el objeto indicado. El modo de personalización especificado controla el acceso a la interfaz de consulta personalizada.</summary>
      <param name="o" vsli:raw="The object that provides the interface.">Objeto que proporciona la interfaz.</param>
      <param name="T" vsli:raw="The type of interface that is requested.">Tipo de interfaz que se solicita.</param>
      <param name="mode" vsli:raw="One of the enumeration values that indicates whether to apply an &lt;see langword=&quot;IUnknown::QueryInterface&quot; /&gt; customization that is supplied by an &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt;.">Uno de los valores de enumeración que indica si se aplica una personalización <see langword="IUnknown::QueryInterface" /> proporcionada por <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />.</param>
      <returns vsli:raw="The interface pointer that represents the interface for the object.">Puntero de interfaz que representa la interfaz para el objeto.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is a generic type definition.">El parámetro <typeparamref name="T" /> no es una interfaz.
o bien
El tipo no es visible para COM.
o bien
El parámetro <typeparamref name="T" /> es una definición de tipo genérico.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The object &lt;paramref name=&quot;o&quot; /&gt; does not support the requested interface.">El objeto <paramref name="o" /> no admite la interfaz solicitada.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="o" /> es <see langword="null" />.
o bien
El parámetro <typeparamref name="T" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns a pointer to an IUnknown interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.">[Compatible con .NET Framework 4.5.1 y versiones posteriores]
Devuelve un puntero a una interfaz IUnknown que representa la interfaz en un objeto del tipo especificado. El acceso a la interfaz de consulta personalizada está habilitado de forma predeterminada.</summary>
      <param name="o" vsli:raw="The object that provides the interface.">Objeto que proporciona la interfaz.</param>
      <typeparam name="T" vsli:raw="The type of &lt;paramref name=&quot;o&quot; /&gt;.">Tipo de <paramref name="o" />.</typeparam>
      <typeparam name="TInterface" vsli:raw="The type of interface to return.">Tipo de interfaz que se va a devolver.</typeparam>
      <returns vsli:raw="The interface pointer that represents the &lt;paramref name=&quot;TInterface&quot; /&gt; interface.">Puntero de interfaz que representa la interfaz <paramref name="TInterface" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;TInterface&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is an open generic type.">El parámetro <paramref name="TInterface" /> no es una interfaz.
o bien
El tipo no es visible para COM.
o bien
El parámetro <typeparamref name="T" /> es un tipo genérico abierto.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter does not support the &lt;paramref name=&quot;TInterface&quot; /&gt; interface.">El parámetro <paramref name="o" /> no admite la interfaz <paramref name="TInterface" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="o" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary vsli:raw="Retrieves data that is referenced by the specified key from the specified COM object.">Recupera datos a los que hace referencia la clave especificada desde el objeto COM especificado.</summary>
      <param name="obj" vsli:raw="The COM object that contains the data that you want.">Objeto COM que contiene los datos que desea.</param>
      <param name="key" vsli:raw="The key in the internal hash table of &lt;paramref name=&quot;obj&quot; /&gt; to retrieve the data from.">Clave en la tabla de hash interna de <paramref name="obj" /> de la que se recuperan los datos.</param>
      <returns vsli:raw="The data represented by the &lt;paramref name=&quot;key&quot; /&gt; parameter in the internal hash table of the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">Datos representados por el parámetro <paramref name="key" /> en la tabla hash interna del parámetro <paramref name="obj" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="obj" /> es <see langword="null" />.
o bien
<paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a COM object.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;obj&quot; /&gt; is a Windows Runtime object.">
        <paramref name="obj" /> no es un objeto COM.
o bien
<paramref name="obj" /> es un objeto Windows en tiempo de ejecución.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary vsli:raw="Converts an unmanaged function pointer to a delegate.">Convierte un puntero a función no administrada en un delegado.</summary>
      <param name="ptr" vsli:raw="The unmanaged function pointer to be converted.">Puntero a función no administrada que se va a convertir.</param>
      <param name="t" vsli:raw="The type of the delegate to be returned.">Tipo del delegado que se va a devolver.</param>
      <returns vsli:raw="A delegate instance that can be cast to the appropriate delegate type.">Instancia de delegado que se puede convertir al tipo de delegado adecuado.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is not a delegate or is generic.">El parámetro <paramref name="t" /> no es un delegado o es genérico.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;ptr&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="ptr" /> es <see langword="null" />.
o bien
El parámetro <paramref name="t" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an unmanaged function pointer to a delegate of a specified type.">[Compatible con .NET Framework 4.5.1 y versiones posteriores]
Convierte un puntero a función no administrada en un delegado de un tipo especificado.</summary>
      <param name="ptr" vsli:raw="The unmanaged function pointer to convert.">Puntero a función no administrada que se va a convertir.</param>
      <typeparam name="TDelegate" vsli:raw="The type of the delegate to return.">Tipo del delegado que se va a devolver.</typeparam>
      <returns vsli:raw="A instance of the specified delegate type.">Una instancia del tipo de delegado especificado.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;TDelegate&quot; /&gt; generic parameter is not a delegate, or it is an open generic type.">El parámetro genérico <paramref name="TDelegate" /> no es un delegado o es un tipo genérico abierto.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;ptr&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="ptr" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary vsli:raw="Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.">Recupera la última ranura de la tabla de funciones virtuales (v-table o VTBL) de un tipo cuando se expone a COM.</summary>
      <param name="t" vsli:raw="A type that represents an interface or class.">Tipo que representa una interfaz o una clase.</param>
      <returns vsli:raw="The last VTBL slot of the interface when exposed to COM. If the &lt;paramref name=&quot;t&quot; /&gt; parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.">Última ranura VTBL de la interfaz cuando se expone a COM. Si el parámetro <paramref name="t" /> es una clase, la ranura VTBL devuelta es la última ranura en la interfaz generada a partir de la clase.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary vsli:raw="Retrieves a code that identifies the type of the exception that occurred.">Devuelve el código que identifica el tipo de excepción que ocurrió.</summary>
      <returns vsli:raw="The type of the exception.">El tipo de la excepción.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary vsli:raw="Converts the specified HRESULT error code to a corresponding &lt;see cref=&quot;T:System.Exception&quot; /&gt; object.">Convierte el código de error HRESULT especificado en un objeto <see cref="T:System.Exception" /> correspondiente.</summary>
      <param name="errorCode" vsli:raw="The HRESULT to be converted.">HRESULT que se va a convertir.</param>
      <returns vsli:raw="An object that represents the converted HRESULT, or &lt;see langword=&quot;null&quot; /&gt; if the HRESULT value doesn't represent an error code (for example, &lt;see langword=&quot;S_OK&quot; /&gt; or &lt;see langword=&quot;S_FALSE&quot; /&gt;).">Objeto que representa el valor HRESULT convertido, o <see langword="null" /> si el valor HRESULT no representa un código de error (por ejemplo, <see langword="S_OK" /> o <see langword="S_FALSE" />).</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary vsli:raw="Converts the specified HRESULT error code to a corresponding &lt;see cref=&quot;T:System.Exception&quot; /&gt; object, with additional error information passed in an IErrorInfo interface for the exception object.">Convierte el código de error HRESULT especificado en un objeto <see cref="T:System.Exception" /> correspondiente, con información de error adicional pasada en una interfaz IErrorInfo para el objeto de excepción.</summary>
      <param name="errorCode" vsli:raw="The HRESULT to be converted.">HRESULT que se va a convertir.</param>
      <param name="errorInfo" vsli:raw="A pointer to the &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface that provides more information about the error. You can specify &lt;c&gt;IntPtr(0)&lt;/c&gt; to use the current &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface, or &lt;c&gt;IntPtr(-1)&lt;/c&gt; to ignore the current &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface and construct the exception just from the error code.">Puntero a la interfaz <see langword="IErrorInfo" /> que proporciona más información sobre el error. Puede especificar <c>IntPtr(0)</c> para utilizar la interfaz <see langword="IErrorInfo" /> actual o <c>IntPtr(-1)</c> para omitir la interfaz <see langword="IErrorInfo" /> actual y construir la excepción del código de error únicamente.</param>
      <returns vsli:raw="An object that represents the converted HRESULT and information obtained from &lt;paramref name=&quot;errorInfo&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if an HRESULT value doesn't represent an error code (for example, &lt;see langword=&quot;S_OK&quot; /&gt; or &lt;see langword=&quot;S_FALSE&quot; /&gt;).">Objeto que representa el valor HRESULT convertido e información obtenida de <paramref name="errorInfo" />, o <see langword="null" /> si el valor HRESULT no representa un código de error (por ejemplo, <see langword="S_OK" /> o <see langword="S_FALSE" />).</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary vsli:raw="Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.">Recupera una descripción de la excepción independiente del equipo así como información sobre el estado del subproceso cuando ocurrió la excepción.</summary>
      <returns vsli:raw="A pointer to an EXCEPTION_POINTERS structure.">Puntero a una estructura EXCEPTION_POINTERS.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary vsli:raw="Converts a delegate into a function pointer that is callable from unmanaged code.">Convierte un delegado en un puntero a función invocable desde código no administrado.</summary>
      <param name="d" vsli:raw="The delegate to be passed to unmanaged code.">Delegado que se va a pasar a código no administrado.</param>
      <returns vsli:raw="A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.">Valor que se puede pasar a código no administrado que, a su vez, puede utilizarlo para llamar al delegado administrado subyacente.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is a generic type definition.">El parámetro <paramref name="d" /> es una definición de tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="d" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.">[Compatible con .NET Framework 4.5.1 y versiones posteriores]
Convierte un delegado de un tipo especificado en un puntero a función invocable desde código no administrado.</summary>
      <param name="d" vsli:raw="The delegate to be passed to unmanaged code.">Delegado que se va a pasar a código no administrado.</param>
      <typeparam name="TDelegate" vsli:raw="The type of delegate to convert.">Tipo de delegado que se va a convertir.</typeparam>
      <returns vsli:raw="A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.">Valor que se puede pasar a código no administrado que, a su vez, puede utilizarlo para llamar al delegado administrado subyacente.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is a generic type definition.">El parámetro <paramref name="d" /> es una definición de tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="d" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary vsli:raw="Returns the instance handle (HINSTANCE) for the specified module.">Devuelve el identificador de instancia (HINSTANCE) para el módulo especificado.</summary>
      <param name="m" vsli:raw="The module whose HINSTANCE is desired.">Módulo cuyo HINSTANCE se desea.</param>
      <returns vsli:raw="The HINSTANCE for &lt;paramref name=&quot;m&quot; /&gt;; or -1 if the module does not have an HINSTANCE.">HINSTANCE para <paramref name="m" />; -1 si el módulo no tiene HINSTANCE.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="m" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary vsli:raw="Converts the specified exception to an HRESULT.">Convierte la excepción especificada en HRESULT.</summary>
      <param name="e" vsli:raw="The exception to convert to an HRESULT.">Excepción que se va a convertir en HRESULT.</param>
      <returns vsli:raw="The HRESULT mapped to the supplied exception.">HRESULT asignado a la excepción proporcionada.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary vsli:raw="Returns the HRESULT corresponding to the last error incurred by Win32 code executed using &lt;see cref=&quot;T:System.Runtime.InteropServices.Marshal&quot; /&gt;.">Devuelve el HRESULT correspondiente al último error producido en código Win32 ejecutado mediante <see cref="T:System.Runtime.InteropServices.Marshal" />.</summary>
      <returns vsli:raw="The HRESULT corresponding to the last Win32 error code.">HRESULT correspondiente al último código de error Win32.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary vsli:raw="Returns an IDispatch interface from a managed object.">Devuelve una interfaz IDispatch de un objeto administrado.</summary>
      <param name="o" vsli:raw="The object whose &lt;see langword=&quot;IDispatch&quot; /&gt; interface is requested.">Objeto cuya interfaz <see langword="IDispatch" /> se solicita.</param>
      <returns vsli:raw="The &lt;see langword=&quot;IDispatch&quot; /&gt; pointer for the &lt;paramref name=&quot;o&quot; /&gt; parameter.">Puntero <see langword="IDispatch" /> para el parámetro <paramref name="o" />.</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; does not support the requested interface.">
        <paramref name="o" /> no admite la interfaz solicitada.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary vsli:raw="Returns an IUnknown interface from a managed object.">Devuelve una interfaz IUnknown desde un objeto administrado.</summary>
      <param name="o" vsli:raw="The object whose &lt;see langword=&quot;IUnknown&quot; /&gt; interface is requested.">Objeto cuya interfaz <see langword="IUnknown" /> se solicita.</param>
      <returns vsli:raw="The &lt;see langword=&quot;IUnknown&quot; /&gt; pointer for the &lt;paramref name=&quot;o&quot; /&gt; parameter.">Puntero <see langword="IUnknown" /> para el parámetro <paramref name="o" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary vsli:raw="Returns the error code returned by the last unmanaged function that was called using platform invoke that has the &lt;see cref=&quot;F:System.Runtime.InteropServices.DllImportAttribute.SetLastError&quot; /&gt; flag set.">Devuelve el código de error devuelto por la última función no administrada a la que se llamó mediante la invocación de plataforma que tiene la marca <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> activada.</summary>
      <returns vsli:raw="The last error code set by a call to the Win32 SetLastError function.">Último código de error establecido por una llamada a la función SetLastError Win32.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary vsli:raw="Converts an object to a COM VARIANT.">Convierte un objeto en un COM VARIANT.</summary>
      <param name="obj" vsli:raw="The object for which to get a COM VARIANT.">Objeto para el que se va a obtener un tipo COM VARIANT.</param>
      <param name="pDstNativeVariant" vsli:raw="A pointer to receive the VARIANT that corresponds to the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">Puntero para recibir el VARIANT correspondiente al parámetro <paramref name="obj" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter is an instance of a generic type.">El parámetro <paramref name="obj" /> es una instancia de un tipo genérico.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an object of a specified type to a COM VARIANT.">[Compatible con .NET Framework 4.5.1 y versiones posteriores]
Convierte un objeto de un tipo especificado en un objeto COM VARIANT.</summary>
      <param name="obj" vsli:raw="The object for which to get a COM VARIANT.">Objeto para el que se va a obtener un tipo COM VARIANT.</param>
      <param name="pDstNativeVariant" vsli:raw="A pointer to receive the VARIANT that corresponds to the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">Puntero para recibir el VARIANT correspondiente al parámetro <paramref name="obj" />.</param>
      <typeparam name="T" vsli:raw="The type of the object to convert.">Tipo del objeto que se va a convertir.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary vsli:raw="Returns an instance of a type that represents a COM object by a pointer to its IUnknown interface.">Devuelve una instancia de un tipo que representa un objeto COM por un puntero a su interfaz IUnknown.</summary>
      <param name="pUnk" vsli:raw="A pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">Puntero a la interfaz <see langword="IUnknown" />.</param>
      <returns vsli:raw="An object that represents the specified unmanaged COM object.">Objeto que representa el objeto COM no administrado especificado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pUnk&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">
        <paramref name="pUnk" /> es <see cref="F:System.IntPtr.Zero" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary vsli:raw="Converts a COM VARIANT to an object.">Convierte un COM VARIANT a un objeto.</summary>
      <param name="pSrcNativeVariant" vsli:raw="A pointer to a COM VARIANT.">Puntero a un tipo de datos VARIANT COM.</param>
      <returns vsli:raw="An object that corresponds to the &lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; parameter.">Objeto que corresponde al parámetro <paramref name="pSrcNativeVariant" />.</returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; is not a valid VARIANT type.">
        <paramref name="pSrcNativeVariant" /> no es un tipo VARIANT válido.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; has an unsupported type.">
        <paramref name="pSrcNativeVariant" /> tiene un tipo incompatible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts a COM VARIANT to an object of a specified type.">[Compatible con .NET Framework 4.5.1 y versiones posteriores]
Convierte un objeto COM VARIANT en un objeto de un tipo especificado.</summary>
      <param name="pSrcNativeVariant" vsli:raw="A pointer to a COM VARIANT.">Puntero a un tipo de datos VARIANT COM.</param>
      <typeparam name="T" vsli:raw="The type to which to convert the COM VARIANT.">Tipo al que se va a convertir el COM VARIANT.</typeparam>
      <returns vsli:raw="An object of the specified type that corresponds to the &lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; parameter.">Objeto del tipo especificado que corresponde al parámetro <paramref name="pSrcNativeVariant" />.</returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; is not a valid VARIANT type.">
        <paramref name="pSrcNativeVariant" /> no es un tipo VARIANT válido.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; has an unsupported type.">
        <paramref name="pSrcNativeVariant" /> tiene un tipo incompatible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary vsli:raw="Converts an array of COM VARIANTs to an array of objects.">Convierte una matriz de elementos VARIANT COM en una matriz de objetos.</summary>
      <param name="aSrcNativeVariant" vsli:raw="A pointer to the first element of an array of COM VARIANTs.">Puntero al primer elemento de una matriz de elementos VARIANT COM.</param>
      <param name="cVars" vsli:raw="The count of COM VARIANTs in &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">Número de elementos VARIANT COM en <paramref name="aSrcNativeVariant" />.</param>
      <returns vsli:raw="An object array that corresponds to &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">Matriz de objetos correspondiente a <paramref name="aSrcNativeVariant" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;cVars&quot; /&gt; is a negative number.">
        <paramref name="cVars" /> es un número negativo.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an array of COM VARIANTs to an array of a specified type.">[Compatible con .NET Framework 4.5.1 y versiones posteriores]
Convierte una matriz de elementos COM VARIANT en una matriz de un tipo especificado.</summary>
      <param name="aSrcNativeVariant" vsli:raw="A pointer to the first element of an array of COM VARIANTs.">Puntero al primer elemento de una matriz de elementos VARIANT COM.</param>
      <param name="cVars" vsli:raw="The count of COM VARIANTs in &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">Número de elementos VARIANT COM en <paramref name="aSrcNativeVariant" />.</param>
      <typeparam name="T" vsli:raw="The type of the array to return.">Tipo del matriz que se va a devolver.</typeparam>
      <returns vsli:raw="An array of &lt;typeparamref name=&quot;T&quot; /&gt; objects that corresponds to &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">Matriz de objetos <typeparamref name="T" /> correspondiente a <paramref name="aSrcNativeVariant" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;cVars&quot; /&gt; is a negative number.">
        <paramref name="cVars" /> es un número negativo.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary vsli:raw="Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.">Obtiene la primera ranura de la tabla de funciones virtuales (v-table o VTBL) que contiene métodos definidos por el usuario.</summary>
      <param name="t" vsli:raw="A type that represents an interface or a class.">Un tipo que representa un interfaz o una clase.</param>
      <returns vsli:raw="The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on IUnknown, and 7 if the interface is based on IDispatch.">Primera ranura VTBL que contiene métodos definidos por el usuario. La primera ranura es 3 si la interfaz se basa en IUnknown y 7 si la interfaz se basa en IDispatch.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is not visible from COM.">
        <paramref name="t" /> no es visible desde COM.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary vsli:raw="Returns a managed object of a specified type that represents a COM object.">Devuelve un objeto administrado de un tipo especificado que representa un objeto COM.</summary>
      <param name="pUnk" vsli:raw="A pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface of the unmanaged object.">Puntero a la interfaz <see langword="IUnknown" /> del objeto no administrado.</param>
      <param name="t" vsli:raw="The type of the requested managed class.">Tipo de la clase administrada solicitada.</param>
      <returns vsli:raw="An instance of the class corresponding to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the requested unmanaged COM object.">Instancia de la clase correspondiente al objeto <see cref="T:System.Type" /> que representa al objeto COM no administrado solicitado.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is not attributed with &lt;see cref=&quot;T:System.Runtime.InteropServices.ComImportAttribute&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;t&quot; /&gt; is a Windows Runtime type.">
        <paramref name="t" /> no tiene el atributo <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />.
o bien
<paramref name="t" /> es un tipo Windows en tiempo de ejecución.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)">
      <summary vsli:raw="Returns the type associated with the specified class identifier (CLSID).">Devuelve el tipo asociado al identificador de clase especificado (CLSID).</summary>
      <param name="clsid" vsli:raw="The CLSID of the type to return.">CLSID del tipo que se va a devolver.</param>
      <returns vsli:raw="&lt;see langword=&quot;System.__ComObject&quot; /&gt; regardless of whether the CLSID is valid.">
        <see langword="System.__ComObject" /> independientemente de que CLSID sea válido.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary vsli:raw="Retrieves the name of the type represented by an ITypeInfo object.">Recupera el nombre del tipo representado por un objeto ITypeInfo.</summary>
      <param name="typeInfo" vsli:raw="An object that represents an &lt;see langword=&quot;ITypeInfo&quot; /&gt; pointer.">Objeto que representa un puntero <see langword="ITypeInfo" />.</param>
      <returns vsli:raw="The name of the type that the &lt;paramref name=&quot;typeInfo&quot; /&gt; parameter points to.">Nombre del tipo al que apunta el parámetro <paramref name="typeInfo" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;typeInfo&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="typeInfo" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary vsli:raw="Creates a unique Runtime Callable Wrapper (RCW) object for a given IUnknown interface.">Crea un objeto de contenedor RCW único para una interfaz IUnknown dada.</summary>
      <param name="unknown" vsli:raw="A managed pointer to an &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">Puntero administrado a una interfaz <see langword="IUnknown" />.</param>
      <returns vsli:raw="A unique RCW for the specified &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">RCW único para la interfaz <see langword="IUnknown" /> especificada.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary vsli:raw="Indicates whether a specified object represents a COM object.">Indica si un objeto especificado representa un objeto COM.</summary>
      <param name="o" vsli:raw="The object to check.">Objeto que se va a comprobar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;o&quot; /&gt; parameter is a COM type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el parámetro <paramref name="o" /> es un tipo COM; en caso contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)">
      <summary vsli:raw="Indicates whether a type is visible to COM clients.">Indica si un tipo es visible a clientes COM.</summary>
      <param name="t" vsli:raw="The type to check for COM visibility.">Tipo cuya visibilidad a través de COM se va a comprobar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is visible to COM; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el tipo es visible para COM; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary vsli:raw="Returns the field offset of the unmanaged form of the managed class.">Devuelve el desplazamiento de campo del formato no administrado de la clase administrada.</summary>
      <param name="t" vsli:raw="A value type or formatted reference type that specifies the managed class. You must apply the &lt;see cref=&quot;T:System.Runtime.InteropServices.StructLayoutAttribute&quot; /&gt; to the class.">Tipo de valor o tipo de referencia con formato que especifica la clase administrada. Debe aplicar <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> a la clase.</param>
      <param name="fieldName" vsli:raw="The field within the &lt;paramref name=&quot;t&quot; /&gt; parameter.">Campo dentro del parámetro <paramref name="t" />.</param>
      <returns vsli:raw="The offset, in bytes, for the &lt;paramref name=&quot;fieldName&quot; /&gt; parameter within the specified class that is declared by platform invoke.">Desplazamiento, en bytes, para el parámetro <paramref name="fieldName" /> dentro de la clase especificada que se declara mediante invocación de plataforma.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.">La clase no se puede exportar como estructura o el campo no es público. A partir de la versión 2.0 de .NET Framework, el campo puede ser privado.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="t" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the field offset of the unmanaged form of a specified managed class.">[Compatible con .NET Framework 4.5.1 y versiones posteriores]
Devuelve el desplazamiento de campo del formato no administrado de una clase administrada específica.</summary>
      <param name="fieldName" vsli:raw="The name of the field in the &lt;paramref name=&quot;T&quot; /&gt; type.">Nombre del campo en el tipo <paramref name="T" />.</param>
      <typeparam name="T" vsli:raw="A managed value type or formatted reference type. You must apply the &lt;see cref=&quot;T:System.Runtime.InteropServices.StructLayoutAttribute&quot; /&gt; attribute to the class.">Tipo de valor administrado o tipo de referencia con formato. Debe aplicar el atributo <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> a la clase.</typeparam>
      <returns vsli:raw="The offset, in bytes, for the &lt;paramref name=&quot;fieldName&quot; /&gt; parameter within the specified class that is declared by platform invoke.">Desplazamiento, en bytes, para el parámetro <paramref name="fieldName" /> dentro de la clase especificada que se declara mediante invocación de plataforma.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary vsli:raw="Executes one-time method setup tasks without calling the method.">Ejecuta tareas únicas de configuración de método sin llamar al método.</summary>
      <param name="m" vsli:raw="The method to be checked.">Método que se va a comprobar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="m" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is not a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object.">El parámetro <paramref name="m" /> no es un objeto <see cref="T:System.Reflection.MethodInfo" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary vsli:raw="Performs a pre-link check for all methods on a class.">Realiza una comprobación anterior al vínculo de todos los métodos de una clase.</summary>
      <param name="c" vsli:raw="The class whose methods are to be checked.">Clase cuyos métodos se van a comprobar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;c&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="c" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary vsli:raw="Copies all characters up to the first null character from an unmanaged ANSI or UTF-8 string to a managed &lt;see cref=&quot;T:System.String&quot; /&gt;, and widens each character to UTF-16.">Copia todos los caracteres hasta el primer carácter nulo de una cadena ANSI no administrada a un <see cref="T:System.String" />, administrado y ensancha cada carácter ANSI a Unicode.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Dirección del primer carácter de la cadena no administrada.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string. If &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns a null string.">Cadena administrada que contiene una copia de la cadena ANSI no administrada. Si <paramref name="ptr" /> es <see langword="null" />, el método devuelve una cadena nula.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt;, copies a specified number of characters from an unmanaged ANSI or UTF-8 string into it, and widens each character to UTF-16.">Asigna un <see cref="T:System.String" />, administrado, copia en él un número especificado de caracteres de una cadena ANSI no administrada y ensancha cada carácter ANSI a Unicode.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Dirección del primer carácter de la cadena no administrada.</param>
      <param name="len" vsli:raw="The byte count of the input string to copy.">Número de bytes de la cadena de entrada que se va a copiar.</param>
      <returns vsli:raw="A managed string that holds a copy of the native string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Cadena administrada que contiene una copia de la cadena ANSI nativa si el valor del parámetro <paramref name="ptr" /> no es <see langword="null" />; de lo contrario, este método devuelve <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; is less than zero.">
        <paramref name="len" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from a string stored in unmanaged memory into it.">Asigna un <see cref="T:System.String" /> administrado y copia en él todos los caracteres hasta el primer carácter nulo de una cadena almacenada en memoria no administrada.</summary>
      <param name="ptr" vsli:raw="For Unicode platforms, the address of the first Unicode character.&#xA;&#xA; -or-&#xA;&#xA; For ANSI platforms, the address of the first ANSI character.">Para las plataformas Unicode, la dirección del primer carácter Unicode.
o bien
En las plataformas ANSI, la dirección del primer carácter ANSI.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Cadena administrada que contiene una copia de la cadena no administrada si el valor del parámetro <paramref name="ptr" /> no es <see langword="null" />; en caso contrario, este método devuelve <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies the specified number of characters from a string stored in unmanaged memory into it.">Asigna un <see cref="T:System.String" /> administrado y copia en él el número de caracteres especificado de una cadena almacenada en memoria no administrada.</summary>
      <param name="ptr" vsli:raw="For Unicode platforms, the address of the first Unicode character.&#xA;&#xA; -or-&#xA;&#xA; For ANSI platforms, the address of the first ANSI character.">Para las plataformas Unicode, la dirección del primer carácter Unicode.
o bien
En las plataformas ANSI, la dirección del primer carácter ANSI.</param>
      <param name="len" vsli:raw="The number of characters to copy.">Número de caracteres que se van a copiar.</param>
      <returns vsli:raw="A managed string that holds a copy of the native string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Una cadena administrada que contiene una copia de la cadena nativa si el valor del parámetro <paramref name="ptr" /> no es <see langword="null" />; en caso contrario, este método devuelve <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; is less than zero.">
        <paramref name="len" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a binary string (BSTR) stored in unmanaged memory into it.">Asigna un <see cref="T:System.String" /> administrado y copia en él una cadena binaria (BSTR) almacenada en memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Dirección del primer carácter de la cadena no administrada.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string.">Cadena administrada que contiene una copia de la cadena no administrada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; equals &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">
        <paramref name="ptr" /> es igual que <see cref="F:System.IntPtr.Zero" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from an unmanaged Unicode string into it.">Asigna un <see cref="T:System.String" /> administrado y copia en él todos los caracteres hasta el primer carácter nulo de una cadena Unicode no administrada.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Dirección del primer carácter de la cadena no administrada.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Cadena administrada que contiene una copia de la cadena no administrada si el valor del parámetro <paramref name="ptr" /> no es <see langword="null" />; en caso contrario, este método devuelve <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a specified number of characters from an unmanaged Unicode string into it.">Asigna un <see cref="T:System.String" /> administrado y copia en él un número de caracteres especificado de una cadena Unicode no administrada.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Dirección del primer carácter de la cadena no administrada.</param>
      <param name="len" vsli:raw="The number of Unicode characters to copy.">Número de caracteres Unicode que se van a copiar.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Cadena administrada que contiene una copia de la cadena no administrada si el valor del parámetro <paramref name="ptr" /> no es <see langword="null" />; en caso contrario, este método devuelve <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)">
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string." />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)">
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string." />
      <param name="byteLen" vsli:raw="The number of bytes to copy." />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary vsli:raw="Marshals data from an unmanaged block of memory to a managed object.">Calcula las referencias a los datos desde un bloque de memoria no administrada a un objeto administrado.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Puntero a un bloque de memoria no administrado.</param>
      <param name="structure" vsli:raw="The object to which the data is to be copied. This must be an instance of a formatted class.">Objeto en el que se copiarán los datos. Este objeto debe ser una instancia de una clase con formato.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Structure layout is not sequential or explicit.&#xA;&#xA; -or-&#xA;&#xA; Structure is a boxed value type.">El diseño de la estructura no es secuencial ni explícito.
o bien
La estructura es un tipo de valor al que se ha aplicado la conversión boxing.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary vsli:raw="Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.">Calcula las referencias a los datos desde un bloque de memoria no administrado a un objeto administrado y recién asignado del tipo especificado.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Puntero a un bloque de memoria no administrado.</param>
      <param name="structureType" vsli:raw="The type of object to be created. This object must represent a formatted class or a structure.">Tipo de objeto que se va a crear. Este objeto debe representar una clase con formato o una estructura.</param>
      <returns vsli:raw="A managed object containing the data pointed to by the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">Objeto administrado que contiene los datos a los que apunta el parámetro <paramref name="ptr" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;structureType&quot; /&gt; parameter layout is not sequential or explicit.&#xA;&#xA; -or-&#xA;&#xA; The &lt;paramref name=&quot;structureType&quot; /&gt; parameter is a generic type definition.">El diseño del parámetro <paramref name="structureType" /> no es secuencial ni explícito.
o bien
El parámetro <paramref name="structureType" /> es una definición de tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;structureType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="structureType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException" vsli:raw="The class specified by &lt;paramref name=&quot;structureType&quot; /&gt; does not have an accessible parameterless constructor.">La clase que ha especificado el elemento <paramref name="structureType" /> no tiene ningún constructor sin parámetros accesible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.">[Compatible con .NET Framework 4.5.1 y versiones posteriores]
Serializa las referencias a los datos desde un bloque de memoria no administrado a un objeto administrado y recién asignado del tipo especificado por un parámetro de tipo genérico.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Puntero a un bloque de memoria no administrado.</param>
      <typeparam name="T" vsli:raw="The type of the object to which the data is to be copied. This must be a formatted class or a structure.">Tipo de objeto en el que se copiarán los datos. Este objeto debe ser una clase con formato o una estructura.</typeparam>
      <returns vsli:raw="A managed object that contains the data that the &lt;paramref name=&quot;ptr&quot; /&gt; parameter points to.">Objeto administrado que contiene los datos a los que apunta el parámetro <paramref name="ptr" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The layout of &lt;typeparamref name=&quot;T&quot; /&gt; is not sequential or explicit.">El diseño de <typeparamref name="T" /> no es secuencial ni explícito.</exception>
      <exception cref="T:System.MissingMethodException" vsli:raw="The class specified by &lt;typeparamref name=&quot;T&quot; /&gt; does not have an accessible parameterless constructor.">La clase que ha especificado el elemento <typeparamref name="T" /> no tiene ningún constructor sin parámetros accesible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from an unmanaged block of memory to a managed object of the specified type.">[Compatible con .NET Framework 4.5.1 y versiones posteriores]
Calcula las referencias desde un bloque de memoria no administrado a un objeto administrado de un tipo especificado.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Puntero a un bloque de memoria no administrado.</param>
      <param name="structure" vsli:raw="The object to which the data is to be copied.">Objeto en el que se copiarán los datos.</param>
      <typeparam name="T" vsli:raw="The type of &lt;paramref name=&quot;structure&quot; /&gt;. This must be a formatted class.">Tipo de <paramref name="structure" />. Debe ser una clase con formato.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="Structure layout is not sequential or explicit.">El diseño de la estructura no es secuencial ni explícito.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary vsli:raw="Requests a pointer to a specified interface from a COM object.">Solicita un puntero a una interfaz especificada de un objeto COM.</summary>
      <param name="pUnk" vsli:raw="The interface to be queried.">Interfaz que se va a consultar.</param>
      <param name="iid" vsli:raw="The interface identifier (IID) of the requested interface.">Identificador de interfaz (IID) de la interfaz solicitada.</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the returned interface.">Cuando este método finaliza, contiene una referencia a la interfaz devuelta.</param>
      <returns vsli:raw="An HRESULT that indicates the success or failure of the call.">HRESULT que indica si la llamada se realizó correctamente o no.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary vsli:raw="Reads a single byte from unmanaged memory.">Lee un único byte desde la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">Dirección en la memoria no administrada desde la que se va a leer.</param>
      <returns vsli:raw="The byte read from unmanaged memory.">Byte leído de la memoria no administrada.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> no es un formato reconocido.
o bien
<paramref name="ptr" /> es <see langword="null" />.
o bien
<paramref name="ptr" /> no es válido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a single byte at a given offset (or index) from unmanaged memory.">Lee un único byte en un desplazamiento (o índice) dado desde la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">Dirección base en la memoria no administrada desde la que se va a leer.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la lectura.</param>
      <returns vsli:raw="The byte read from unmanaged memory at the given offset.">Byte leído de la memoria no administrada en el desplazamiento dado.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary vsli:raw="Reads a single byte at a given offset (or index) from unmanaged memory.">Lee un único byte en un desplazamiento (o índice) dado desde la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">Dirección base en la memoria no administrada del objeto de origen.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la lectura.</param>
      <returns vsli:raw="The byte read from unmanaged memory at the given offset.">Byte leído de la memoria no administrada en el desplazamiento dado.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> es un objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Este método no acepta parámetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary vsli:raw="Reads a 16-bit signed integer from unmanaged memory.">Lee un entero de 16 bits con signo de la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">Dirección en la memoria no administrada desde la que se va a leer.</param>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory.">Entero de 16 bits con signo leído de la memoria no administrada.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> no es un formato reconocido.
o bien
<paramref name="ptr" /> es <see langword="null" />.
o bien
<paramref name="ptr" /> no es válido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 16-bit signed integer at a given offset from unmanaged memory.">Lee un entero de 16 bits con signo en un desplazamiento dado de la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">Dirección base en la memoria no administrada desde la que se va a leer.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la lectura.</param>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory at the given offset.">Entero de 16 bits con signo leído de la memoria no administrada en el desplazamiento dado.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 16-bit signed integer at a given offset from unmanaged memory.">Lee un entero de 16 bits con signo en un desplazamiento dado de la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">Dirección base en la memoria no administrada del objeto de origen.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la lectura.</param>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory at the given offset.">Entero de 16 bits con signo leído de la memoria no administrada en el desplazamiento dado.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> es un objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Este método no acepta parámetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary vsli:raw="Reads a 32-bit signed integer from unmanaged memory.">Lee un entero de 32 bits con signo de la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">Dirección en la memoria no administrada desde la que se va a leer.</param>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory.">Entero de 32 bits con signo leído de la memoria no administrada.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> no es un formato reconocido.
o bien
<paramref name="ptr" /> es <see langword="null" />.
o bien
<paramref name="ptr" /> no es válido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 32-bit signed integer at a given offset from unmanaged memory.">Lee un entero de 32 bits con signo en un desplazamiento dado de la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">Dirección base en la memoria no administrada desde la que se va a leer.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la lectura.</param>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory.">Entero de 32 bits con signo leído de la memoria no administrada.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 32-bit signed integer at a given offset from unmanaged memory.">Lee un entero de 32 bits con signo en un desplazamiento dado de la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">Dirección base en la memoria no administrada del objeto de origen.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la lectura.</param>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory at the given offset.">Entero de 32 bits con signo leído de la memoria no administrada en el desplazamiento dado.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> es un objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Este método no acepta parámetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary vsli:raw="Reads a 64-bit signed integer from unmanaged memory.">Lee un entero de 64 bits con signo de la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">Dirección en la memoria no administrada desde la que se va a leer.</param>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory.">Entero de 64 bits con signo leído de la memoria no administrada.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> no es un formato reconocido.
o bien
<paramref name="ptr" /> es <see langword="null" />.
o bien
<paramref name="ptr" /> no es válido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 64-bit signed integer at a given offset from unmanaged memory.">Lee un entero de 64 bits con signo en un desplazamiento dado de la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">Dirección base en la memoria no administrada desde la que se va a leer.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la lectura.</param>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory at the given offset.">Entero de 64 bits con signo leído de la memoria no administrada en el desplazamiento dado.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 64-bit signed integer at a given offset from unmanaged memory.">Lee un entero de 64 bits con signo en un desplazamiento dado de la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">Dirección base en la memoria no administrada del objeto de origen.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la lectura.</param>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory at the given offset.">Entero de 64 bits con signo leído de la memoria no administrada en el desplazamiento dado.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> es un objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Este método no acepta parámetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary vsli:raw="Reads a processor native-sized integer from unmanaged memory.">Lee de la memoria no administrada un entero cuyo tamaño es propio del procesador nativo.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">Dirección en la memoria no administrada desde la que se va a leer.</param>
      <returns vsli:raw="The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.">Entero leído de la memoria no administrada. Se devuelve un entero de 32 bits en los equipos de 32 bits y un entero de 64 bits en los equipos de 64 bits.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> no es un formato reconocido.
o bien
<paramref name="ptr" /> es <see langword="null" />.
o bien
<paramref name="ptr" /> no es válido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a processor native sized integer at a given offset from unmanaged memory.">Lee de la memoria no administrada un valor de tipo entero cuyo tamaño en bytes es propio del procesador nativo en un desplazamiento dado.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">Dirección base en la memoria no administrada desde la que se va a leer.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la lectura.</param>
      <returns vsli:raw="The integer read from unmanaged memory at the given offset.">Entero leído de la memoria no administrada en el desplazamiento dado.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary vsli:raw="Reads a processor native sized integer from unmanaged memory.">Lee de la memoria no administrada un valor de tipo entero cuyo tamaño en bytes es propio del procesador nativo.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">Dirección base en la memoria no administrada del objeto de origen.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la lectura.</param>
      <returns vsli:raw="The integer read from unmanaged memory at the given offset.">Entero leído de la memoria no administrada en el desplazamiento dado.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> es un objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Este método no acepta parámetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary vsli:raw="Resizes a block of memory previously allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)&quot; /&gt;.">Cambia el tamaño de un bloque de memoria asignado previamente con <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</summary>
      <param name="pv" vsli:raw="A pointer to memory allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)&quot; /&gt;.">Puntero a memoria asignada con <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</param>
      <param name="cb" vsli:raw="The new size of the allocated block.">Nuevo tamaño del bloque asignado.</param>
      <returns vsli:raw="An integer representing the address of the reallocated block of memory. This memory must be released with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)&quot; /&gt;.">Entero que representa la dirección del bloque de memoria reasignado. Debe liberarse esta memoria con <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">No hay memoria suficiente para satisfacer la solicitud.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Resizes a block of memory previously allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">Cambia el tamaño de un bloque de memoria asignado previamente con <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</summary>
      <param name="pv" vsli:raw="A pointer to memory allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">Puntero a memoria asignada con <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</param>
      <param name="cb" vsli:raw="The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type &lt;see cref=&quot;T:System.IntPtr&quot; /&gt;. If you pass a pointer, it is treated as a size.">Nuevo tamaño del bloque asignado. Esto no es un puntero; es el recuento de bytes que está solicitando, convertido al tipo <see cref="T:System.IntPtr" />. Si pasa un puntero, se trata como un tamaño.</param>
      <returns vsli:raw="A pointer to the reallocated memory. This memory must be released using &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt;.">Puntero a la memoria reasignada. Esta memoria debe liberarse mediante <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">No hay memoria suficiente para satisfacer la solicitud.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary vsli:raw="Decrements the reference count on the specified interface.">Disminuye el contador de referencia de la interfaz especificada.</summary>
      <param name="pUnk" vsli:raw="The interface to release.">Interfaz que se va a liberar.</param>
      <returns vsli:raw="The new value of the reference count on the interface specified by the &lt;paramref name=&quot;pUnk&quot; /&gt; parameter.">Nuevo valor del contador de referencias en la interfaz especificada por el parámetro <paramref name="pUnk" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary vsli:raw="Decrements the reference count of the Runtime Callable Wrapper (RCW) associated with the specified COM object.">Disminuye el recuento de referencias del contenedor RWC asociado al objeto COM especificado.</summary>
      <param name="o" vsli:raw="The COM object to release.">Objeto COM que se va a liberar.</param>
      <returns vsli:raw="The new value of the reference count of the RCW associated with &lt;paramref name=&quot;o&quot; /&gt;. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.">Nuevo valor del recuento de referencias del contenedor RCW asociado a <paramref name="o" />. Este valor suele ser cero ya que el RCW conserva una sola referencia al objeto COM incluido en el contenedor, independientemente del número de clientes administrados que lo llamen.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is not a valid COM object.">
        <paramref name="o" /> no es un objeto COM válido.</exception>
      <exception cref="T:System.NullReferenceException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary vsli:raw="Allocates an unmanaged binary string (BSTR) and copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into it.">Asigna una cadena binaria (BSTR) no administrada y copia en ella el contenido de un objeto <see cref="T:System.Security.SecureString" /> administrado.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objeto administrado que se va a copiar.</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Dirección, en memoria no administrada, donde se copió el parámetro <paramref name="s" /> o 0 si se suministró un objeto null.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="s" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">El equipo actual no está ejecutando Windows 2000 Service Pack 3 o una versión posterior.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">No hay suficiente memoria disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">Copia el contenido de un objeto <see cref="T:System.Security.SecureString" /> administrado en un bloque de memoria asignado desde el asignador de tareas COM no administrado.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objeto administrado que se va a copiar.</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Dirección, en memoria no administrada, donde se copió el parámetro <paramref name="s" /> o 0 si se suministró un objeto null.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="s" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">El equipo actual no está ejecutando Windows 2000 Service Pack 3 o una versión posterior.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">No hay suficiente memoria disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">Copia el contenido de un objeto <see cref="T:System.Security.SecureString" /> administrado en un bloque de memoria asignado desde el asignador de tareas COM no administrado.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objeto administrado que se va a copiar.</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Dirección, en memoria no administrada, donde se copió el parámetro <paramref name="s" /> o 0 si se suministró un objeto null.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="s" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">El equipo actual no está ejecutando Windows 2000 Service Pack 3 o una versión posterior.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">No hay suficiente memoria disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">Copia el contenido de un <see cref="T:System.Security.SecureString" /> administrado en la memoria no administrada, convirtiéndolo en formato ANSI mientras realiza la copia.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objeto administrado que se va a copiar.</param>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied, or 0 if a null object was supplied.">Dirección, en memoria no administrada, donde se copió el parámetro <paramref name="s" /> o 0 si se suministró un objeto null.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="s" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">El equipo actual no está ejecutando Windows 2000 Service Pack 3 o una versión posterior.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">No hay suficiente memoria disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into unmanaged memory.">Copia el contenido de un objeto <see cref="T:System.Security.SecureString" /> administrado en la memoria no administrada.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objeto administrado que se va a copiar.</param>
      <returns vsli:raw="The address, in unmanaged memory, where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is a &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object whose length is 0.">La dirección, en memoria no administrada, donde se copió <paramref name="s" />, o 0 si <paramref name="s" /> es un objeto <see cref="T:System.Security.SecureString" /> cuya longitud es 0.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="s" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">El equipo actual no está ejecutando Windows 2000 Service Pack 3 o una versión posterior.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">No hay suficiente memoria disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary vsli:raw="Sets data referenced by the specified key in the specified COM object.">Establece los datos a los que hace referencia la clave especificada desde el objeto COM especificado.</summary>
      <param name="obj" vsli:raw="The COM object in which to store the data.">Objeto COM donde se van a almacenar los datos.</param>
      <param name="key" vsli:raw="The key in the internal hash table of the COM object in which to store the data.">Clave de la tabla hash interna del objeto COM donde se van a almacenar los datos.</param>
      <param name="data" vsli:raw="The data to set.">Datos que se van a establecer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data was set successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si los datos se han establecido correctamente; en caso contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="obj" /> es <see langword="null" />.
o bien
<paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a COM object.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;obj&quot; /&gt; is a Windows Runtime object.">
        <paramref name="obj" /> no es un objeto COM.
o bien
<paramref name="obj" /> es un objeto Windows en tiempo de ejecución.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary vsli:raw="Returns the unmanaged size of an object in bytes.">Devuelve el tamaño no administrado de un objeto en bytes.</summary>
      <param name="structure" vsli:raw="The object whose size is to be returned.">Objeto cuyo tamaño se devolverá.</param>
      <returns vsli:raw="The size of the specified object in unmanaged code.">Tamaño del objeto especificado en código no administrado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;structure&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="structure" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary vsli:raw="Returns the size of an unmanaged type in bytes.">Devuelve el tamaño, expresado en bytes, de un tipo no administrado.</summary>
      <param name="t" vsli:raw="The type whose size is to be returned.">Tipo cuyo tamaño se va a devolver.</param>
      <returns vsli:raw="The size of the specified type in unmanaged code.">Tamaño del tipo especificado en código no administrado.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is a generic type definition.">El parámetro <paramref name="t" /> es una definición de tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="t" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the size of an unmanaged type in bytes.">[Compatible con .NET Framework 4.5.1 y versiones posteriores]
Devuelve el tamaño, expresado en bytes, de un tipo no administrado.</summary>
      <typeparam name="T" vsli:raw="The type whose size is to be returned.">Tipo cuyo tamaño se va a devolver.</typeparam>
      <returns vsli:raw="The size, in bytes, of the type that is specified by the &lt;typeparamref name=&quot;T&quot; /&gt; generic type parameter.">El tamaño, en bytes, del tipo especificado por el parámetro de tipo genérico <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the unmanaged size of an object of a specified type in bytes.">[Compatible con .NET Framework 4.5.1 y versiones posteriores]
Devuelve el tamaño no administrado de un objeto de un tipo especificado en bytes.</summary>
      <param name="structure" vsli:raw="The object whose size is to be returned.">Objeto cuyo tamaño se devolverá.</param>
      <typeparam name="T" vsli:raw="The type of the &lt;paramref name=&quot;structure&quot; /&gt; parameter.">Tipo del parámetro <paramref name="structure" />.</typeparam>
      <returns vsli:raw="The size, in bytes, of the specified object in unmanaged code.">Tamaño del objeto especificado, en bytes, en código no administrado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;structure&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="structure" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary vsli:raw="Allocates a BSTR and copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into it.">Asigna un BSTR y copia en él el contenido de un objeto <see cref="T:System.String" /> administrado.</summary>
      <param name="s" vsli:raw="The managed string to be copied.">Cadena administrada que se va a copiar.</param>
      <returns vsli:raw="An unmanaged pointer to the &lt;see langword=&quot;BSTR&quot; /&gt;, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is null.">Puntero no administrado a <see langword="BSTR" /> o 0 si <paramref name="s" /> es null.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">No hay suficiente memoria disponible.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The length for &lt;paramref name=&quot;s&quot; /&gt; is out of range.">La longitud de <paramref name="s" /> está fuera del intervalo.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">Copia el contenido de un <see cref="T:System.String" /> administrado en un bloque de memoria asignado desde el asignador de tareas COM no administrado.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Cadena administrada que se va a copiar.</param>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Entero que representa un puntero al bloque de memoria asignado a la cadena, o 0 si <paramref name="s" /> es <see langword="null" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">No hay suficiente memoria disponible.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">El parámetro <paramref name="s" /> supera la longitud máxima permitida por el sistema operativo.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">Copia el contenido de un <see cref="T:System.String" /> administrado en un bloque de memoria asignado desde el asignador de tareas COM no administrado.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Cadena administrada que se va a copiar.</param>
      <returns vsli:raw="The allocated memory block, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Bloque de memoria asignado o 0 si <paramref name="s" /> es <see langword="null" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">No hay suficiente memoria disponible.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The length for &lt;paramref name=&quot;s&quot; /&gt; is out of range.">La longitud de <paramref name="s" /> está fuera del intervalo.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">Copia el contenido de un <see cref="T:System.String" /> administrado en un bloque de memoria asignado desde el asignador de tareas COM no administrado.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Cadena administrada que se va a copiar.</param>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if s is &lt;see langword=&quot;null&quot; /&gt;.">Entero que representa un puntero al bloque de memoria asignado a la cadena, o 0 si s es <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">El parámetro <paramref name="s" /> supera la longitud máxima permitida por el sistema operativo.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">No hay suficiente memoria disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)">
      <param name="s" vsli:raw="A managed string to be copied." />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">Copia el contenido de un <see cref="T:System.String" /> administrado en la memoria no administrada, convirtiéndolo en formato ANSI mientras realiza la copia.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Cadena administrada que se va a copiar.</param>
      <returns vsli:raw="The address, in unmanaged memory, to where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Dirección, en memoria no administrada, adonde se copió <paramref name="s" /> o 0 si <paramref name="s" /> es <see langword="null" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">No hay suficiente memoria disponible.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">El parámetro <paramref name="s" /> supera la longitud máxima permitida por el sistema operativo.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory, converting into ANSI format if required.">Copia el contenido de un <see cref="T:System.String" /> administrado en la memoria no administrada, convirtiéndolo en formato ANSI si es necesario.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Cadena administrada que se va a copiar.</param>
      <returns vsli:raw="The address, in unmanaged memory, to where the string was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Dirección, en memoria no administrada, donde se copió la cadena o 0 si <paramref name="s" /> es <see langword="null" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">No hay suficiente memoria disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory.">Copia el contenido de un <see cref="T:System.String" /> administrado en la memoria no administrada.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Cadena administrada que se va a copiar.</param>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Dirección, en memoria no administrada, donde se copió <paramref name="s" /> o 0 si <paramref name="s" /> es <see langword="null" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The method could not allocate enough native heap memory.">El método no pudo asignar la suficiente memoria de montón nativo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">El parámetro <paramref name="s" /> supera la longitud máxima permitida por el sistema operativo.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary vsli:raw="Marshals data from a managed object to an unmanaged block of memory.">Calcula las referencias a los datos desde un objeto administrado a un bloque de memoria no administrado.</summary>
      <param name="structure" vsli:raw="A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.">Objeto administrado que contiene los datos de referencias que se van a calcular. Este objeto debe ser una estructura o una instancia de una clase con formato.</param>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory, which must be allocated before this method is called.">Puntero a un bloque de memoria no administrada que debe ser asignado antes de llamar a este método.</param>
      <param name="fDeleteOld" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to call the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)&quot; /&gt; method on the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before this method copies the data. The block must contain valid data. Note that passing &lt;see langword=&quot;false&quot; /&gt; when the memory block already contains data can lead to a memory leak.">Es <see langword="true" /> para llamar al método <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> en el parámetro <paramref name="ptr" /> antes de que este método copie los datos. El bloque debe contener datos válidos. Observe que al pasar <see langword="false" /> cuando el bloque de memoria ya contiene datos puede provocar una fuga de memoria.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structure&quot; /&gt; is a reference type that is not a formatted class.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;structure&quot; /&gt; is an instance of a generic type (in the .NET Framework 4.5 and earlier versions only).">
        <paramref name="structure" /> es un tipo de referencia que no es una clase con formato.
o bien
<paramref name="structure" /> es una instancia de un tipo genérico (solo en .NET Framework 4.5 y versiones anteriores).</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from a managed object of a specified type to an unmanaged block of memory.">[Compatible con .NET Framework 4.5.1 y versiones posteriores]
Calcula las referencias de un objeto administrado de un tipo especificado a un bloque de memoria no administrado.</summary>
      <param name="structure" vsli:raw="A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.">Objeto administrado que contiene los datos de referencias que se van a calcular. El objeto debe ser una estructura o una instancia de una clase con formato.</param>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory, which must be allocated before this method is called.">Puntero a un bloque de memoria no administrada que debe ser asignado antes de llamar a este método.</param>
      <param name="fDeleteOld" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to call the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)&quot; /&gt; method on the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before this method copies the data. The block must contain valid data. Note that passing &lt;see langword=&quot;false&quot; /&gt; when the memory block already contains data can lead to a memory leak.">Es <see langword="true" /> para llamar al método <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> en el parámetro <paramref name="ptr" /> antes de que este método copie los datos. El bloque debe contener datos válidos. Observe que al pasar <see langword="false" /> cuando el bloque de memoria ya contiene datos puede provocar una fuga de memoria.</param>
      <typeparam name="T" vsli:raw="The type of the managed object.">Tipo del objeto administrado.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structure&quot; /&gt; is a reference type that is not a formatted class.">
        <paramref name="structure" /> es un tipo de referencia que no es una clase con formato.</exception>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary vsli:raw="Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.">Representa el tamaño de carácter predeterminado del sistema; el valor predeterminado es 2 para los sistemas Unicode y 1 para los sistemas ANSI. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary vsli:raw="Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.">Representa el tamaño máximo de un juego de caracteres de doble byte (DBCS), expresado en bytes, para el actual sistema operativo. Este campo es de solo lectura.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary vsli:raw="Throws an exception with a specific failure HRESULT value.">Se produce una excepción con un valor HRESULT de error específico.</summary>
      <param name="errorCode" vsli:raw="The HRESULT corresponding to the desired exception.">HRESULT correspondiente a la excepción deseada.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary vsli:raw="Throws an exception with a specific failure HRESULT, based on the specified IErrorInfo interface.">Inicia una excepción con un valor HRESULT de error concreto, basado en la interfaz IErrorInfo especificada.</summary>
      <param name="errorCode" vsli:raw="The HRESULT corresponding to the desired exception.">HRESULT correspondiente a la excepción deseada.</param>
      <param name="errorInfo" vsli:raw="A pointer to the IErrorInfo interface that provides more information about the error. You can specify &lt;c&gt;IntPtr(0)&lt;/c&gt; to use the current IErrorInfo interface, or &lt;c&gt;IntPtr(-1)&lt;/c&gt; to ignore the current IErrorInfo interface and construct the exception just from the error code.">Puntero a la interfaz IErrorInfo que proporciona más información sobre el error. Puede especificar <c>IntPtr(0)</c> para que use la interfaz IErrorInfo actual o <c>IntPtr(-1)</c> para omitir la interfaz IErrorInfo actual y construir la excepción del código de error únicamente.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary vsli:raw="Gets the address of the element at the specified index inside the specified array.">Obtiene la dirección del elemento en el índice especificado dentro de la matriz especificada.</summary>
      <param name="arr" vsli:raw="The array that contains the desired element.">Matriz que contiene el elemento deseado.</param>
      <param name="index" vsli:raw="The index in the &lt;paramref name=&quot;arr&quot; /&gt; parameter of the desired element.">Índice en el parámetro <paramref name="arr" /> del elemento deseado.</param>
      <returns vsli:raw="The address of &lt;paramref name=&quot;index&quot; /&gt; inside &lt;paramref name=&quot;arr&quot; /&gt;.">Dirección de <paramref name="index" /> dentro de <paramref name="arr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Gets the address of the element at the specified index in an array of a specified type.">[Compatible con .NET Framework 4.5.1 y versiones posteriores]
Obtiene la dirección del elemento en el índice especificado en una matriz de tipo especificado.</summary>
      <param name="arr" vsli:raw="The array that contains the desired element.">Matriz que contiene el elemento deseado.</param>
      <param name="index" vsli:raw="The index of the desired element in the &lt;paramref name=&quot;arr&quot; /&gt; array.">Índice del elemento deseado en la matriz <paramref name="arr" />.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Tipo de matriz.</typeparam>
      <returns vsli:raw="The address of &lt;paramref name=&quot;index&quot; /&gt; in &lt;paramref name=&quot;arr&quot; /&gt;.">Dirección de <paramref name="index" /> en <paramref name="arr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory.">Escribe un único byte en la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Dirección de la memoria no administrada en la que se va a escribir.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> no es un formato reconocido.
o bien
<paramref name="ptr" /> es <see langword="null" />.
o bien
<paramref name="ptr" /> no es válido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory at a specified offset.">Escribe un valor de un solo byte en la memoria no administrada en un desplazamiento especificado.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">Dirección base de la memoria no administrada en la que se va a escribir.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la escritura.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory at a specified offset.">Escribe un valor de un solo byte en la memoria no administrada en un desplazamiento especificado.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Dirección base en la memoria no administrada del objeto de destino.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la escritura.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> es un objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Este método no acepta parámetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary vsli:raw="Writes a character as a 16-bit integer value to unmanaged memory.">Escribe un carácter como un valor entero de 16 bits en la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Dirección de la memoria no administrada en la que se va a escribir.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> no es un formato reconocido.
o bien
<paramref name="ptr" /> es <see langword="null" />.
o bien
<paramref name="ptr" /> no es válido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary vsli:raw="Writes a 16-bit integer value to unmanaged memory.">Escribe un valor entero de 16 bits en la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Dirección de la memoria no administrada en la que se va a escribir.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> no es un formato reconocido.
o bien
<paramref name="ptr" /> es <see langword="null" />.
o bien
<paramref name="ptr" /> no es válido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">Escribe un valor entero de 16 bits con signo en la memoria no administrada en un desplazamiento especificado.</summary>
      <param name="ptr" vsli:raw="The base address in the native heap to write to.">Dirección base del montón nativo en la que se va a escribir.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la escritura.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary vsli:raw="Writes a 16-bit signed integer value into unmanaged memory at a specified offset.">Escribe un valor entero de 16 bits con signo en la memoria no administrada en un desplazamiento especificado.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">Dirección base de la memoria no administrada en la que se va a escribir.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la escritura.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">Escribe un valor entero de 16 bits con signo en la memoria no administrada en un desplazamiento especificado.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Dirección base en la memoria no administrada del objeto de destino.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la escritura.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> es un objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Este método no acepta parámetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">Escribe un valor entero de 16 bits con signo en la memoria no administrada en un desplazamiento especificado.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Dirección base en la memoria no administrada del objeto de destino.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la escritura.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> es un objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Este método no acepta parámetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value to unmanaged memory.">Escribe un valor entero de 32 bits con signo en la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Dirección de la memoria no administrada en la que se va a escribir.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> no es un formato reconocido.
o bien
<paramref name="ptr" /> es <see langword="null" />.
o bien
<paramref name="ptr" /> no es válido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value into unmanaged memory at a specified offset.">Escribe un valor entero de 32 bits con signo en la memoria no administrada en un desplazamiento especificado.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">Dirección base de la memoria no administrada en la que se va a escribir.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la escritura.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value to unmanaged memory at a specified offset.">Escribe un valor entero de 32 bits con signo en la memoria no administrada en un desplazamiento especificado.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Dirección base en la memoria no administrada del objeto de destino.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la escritura.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> es un objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Este método no acepta parámetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory at a specified offset.">Escribe un valor entero de 64 bits con signo en la memoria no administrada en un desplazamiento especificado.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write.">Dirección base de la memoria no administrada en la que se va a escribir.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la escritura.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory.">Escribe un valor entero de 64 bits con signo en la memoria no administrada.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Dirección de la memoria no administrada en la que se va a escribir.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> no es un formato reconocido.
o bien
<paramref name="ptr" /> es <see langword="null" />.
o bien
<paramref name="ptr" /> no es válido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory at a specified offset.">Escribe un valor entero de 64 bits con signo en la memoria no administrada en un desplazamiento especificado.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Dirección base en la memoria no administrada del objeto de destino.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la escritura.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> es un objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Este método no acepta parámetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a processor native-sized integer value to unmanaged memory at a specified offset.">Escribe en la memoria no administrada un valor de tipo entero cuyo tamaño en bytes es propio del procesador nativo en un desplazamiento especificado.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">Dirección base de la memoria no administrada en la que se va a escribir.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la escritura.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Writes a processor native sized integer value into unmanaged memory.">Escribe en la memoria no administrada un valor de tipo entero cuyo tamaño en bytes es propio del procesador nativo.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Dirección de la memoria no administrada en la que se va a escribir.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> no es un formato reconocido.
o bien
<paramref name="ptr" /> es <see langword="null" />.
o bien
<paramref name="ptr" /> no es válido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a processor native sized integer value to unmanaged memory.">Escribe en la memoria no administrada un valor de tipo entero cuyo tamaño en bytes es propio del procesador nativo.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Dirección base en la memoria no administrada del objeto de destino.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Desplazamiento de bytes adicional, que se agrega al parámetro <paramref name="ptr" /> antes de la escritura.</param>
      <param name="val" vsli:raw="The value to write.">Valor que se va a escribir.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">La dirección base (<paramref name="ptr" />) más el byte de desplazamiento (<paramref name="ofs" />) produce un valor null o una dirección no válida.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> es un objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Este método no acepta parámetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary vsli:raw="Frees a BSTR pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)&quot; /&gt; method.">Libera un puntero BSTR que se asignó usando el método <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" />.</summary>
      <param name="s" vsli:raw="The address of the &lt;see langword=&quot;BSTR&quot; /&gt; to free.">Dirección del <see langword="BSTR" /> que se va a liberar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)&quot; /&gt; method.">Libera un puntero a una cadena no administrada que se ha asignado con el método <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" />.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">La dirección de la cadena no administrada que se va a liberar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)&quot; /&gt; method.">Libera un puntero a una cadena no administrada que se ha asignado con el método <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" />.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">La dirección de la cadena no administrada que se va a liberar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)">
      <param name="s" vsli:raw="The address of the unmanaged string to free." />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)&quot; /&gt; method.">Libera un puntero a una cadena no administrada que se ha asignado con el método <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" />.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">La dirección de la cadena no administrada que se va a liberar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)&quot; /&gt; method.">Libera un puntero a una cadena no administrada que se ha asignado con el método <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" />.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">La dirección de la cadena no administrada que se va a liberar.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary vsli:raw="Indicates how to marshal the data between managed and unmanaged code.">Indica cómo calcular las referencias de los datos entre el código administrado y el código no administrado.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> con el valor <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> especificado.</summary>
      <param name="unmanagedType" vsli:raw="The value the data is to be marshaled as.">Valor por el que se calcularán las referencias de los datos.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; enumeration member.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> con el miembro de enumeración <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> especificado.</summary>
      <param name="unmanagedType" vsli:raw="The value the data is to be marshaled as.">Valor por el que se calcularán las referencias de los datos.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary vsli:raw="Specifies the element type of the unmanaged &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.LPArray&quot; /&gt; or &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.ByValArray&quot; /&gt;.">Especifica el tipo de elemento del campo <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> o del campo <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" /> no administrado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary vsli:raw="Specifies the parameter index of the unmanaged &lt;see langword=&quot;iid_is&quot; /&gt; attribute used by COM.">Especifica el índice de parámetro del atributo no administrado <see langword="iid_is" /> utilizado por COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary vsli:raw="Provides additional information to a custom marshaler.">Proporciona información adicional a un contador de referencias personalizado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary vsli:raw="Specifies the fully qualified name of a custom marshaler.">Especifica el nombre completo de un contador de referencias personalizado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary vsli:raw="Implements &lt;see cref=&quot;F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&quot; /&gt; as a type.">Implementa <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> como un tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary vsli:raw="Indicates the element type of the &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">Indica el tipo de elemento de <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary vsli:raw="Indicates the user-defined element type of the &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">Indica el tipo de elemento definido por el usuario de <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary vsli:raw="Indicates the number of elements in the fixed-length array or the number of characters (not bytes) in a string to import.">Indica el número de elementos de la matriz de longitud fija o el número de caracteres (no bytes) de una cadena que se van a importar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary vsli:raw="Indicates the zero-based parameter that contains the count of array elements, similar to &lt;see langword=&quot;size_is&quot; /&gt; in COM.">Indica el parámetro de base cero que contiene el recuento de elementos de matriz, similar a <see langword="size_is" /> en COM.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value the data is to be marshaled as.">Obtiene el valor de <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> a partir del cual se van a calcular las referencias de los datos.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value the data is to be marshaled as.">Valor de <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> a partir del cual se van a calcular las referencias de los datos.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary vsli:raw="The exception that is thrown by the marshaler when it encounters a &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; it does not support.">La excepción que produce el contador de referencias cuando encuentra un atributo <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> que no admite.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class with default properties.">Inicializa una nueva instancia de la clase <see langword="MarshalDirectiveException" /> con propiedades predeterminadas.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class from serialization data.">Inicializa una nueva instancia de la clase <see langword="MarshalDirectiveException" /> a partir de los datos de serialización.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Objeto que contiene los datos del objeto serializados.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Información contextual acerca del origen o del destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class with a specified error message.">Inicializa una nueva instancia de la clase <see langword="MarshalDirectiveException" /> con el mensaje de error especificado.</summary>
      <param name="message" vsli:raw="The error message that specifies the reason for the exception.">Mensaje de error que especifica la razón de la excepción.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalDirectiveException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="inner" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.NativeLibrary">
      <summary vsli:raw="Provides APIs for managing native libraries.">Proporciona las API para administrar bibliotecas nativas.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)">
      <summary vsli:raw="Frees a loaded library with the specified OS handle, or takes no action if the input handle is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">Libera una biblioteca cargada con el identificador de sistema operativo especificado, o bien no realiza ninguna acción si el identificador de entrada es <see cref="F:System.IntPtr.Zero" />.</summary>
      <param name="handle" vsli:raw="The native library OS handle to be freed.">El identificador del sistema operativo de la biblioteca nativa que se va a liberar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)">
      <summary vsli:raw="Gets the address of an exported symbol.">Obtiene la dirección de un símbolo exportado.</summary>
      <param name="handle" vsli:raw="The native library OS handle.">El identificador de sistema operativo de la biblioteca nativa.</param>
      <param name="name" vsli:raw="The name of the exported symbol.">Nombre del símbolo exportado.</param>
      <returns vsli:raw="The address of the symbol.">Dirección del símbolo.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handle&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handle" /> o <paramref name="name" /> es <see langword="null" />.</exception>
      <exception cref="T:System.EntryPointNotFoundException" vsli:raw="The symbol is not found.">No se encontró el símbolo.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)">
      <summary vsli:raw="Provides a simple API for loading a native library that wraps the OS loader and uses default flags.">Proporciona una API sencilla para cargar una biblioteca nativa que encapsula el cargador del sistema operativo y utiliza indicadores predeterminados.</summary>
      <param name="libraryPath" vsli:raw="The name of the native library to be loaded.">Nombre de la biblioteca nativa que se cargará.</param>
      <returns vsli:raw="The OS handle for the loaded native library.">El identificador de sistema operativo de la biblioteca nativa cargada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> es <see langword="null" />.</exception>
      <exception cref="T:System.DllNotFoundException" vsli:raw="The library can't be found.">No se encuentra la biblioteca.</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The library is not valid.">La biblioteca no es válida.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
      <summary vsli:raw="Provides a high-level API for loading a native library.">Proporciona una API de alto nivel para cargar una biblioteca nativa.</summary>
      <param name="libraryName" vsli:raw="The name of the native library to be loaded.">Nombre de la biblioteca nativa que se cargará.</param>
      <param name="assembly" vsli:raw="The assembly loading the native library.">Ensamblado que carga la biblioteca nativa.</param>
      <param name="searchPath" vsli:raw="The search path.">Ruta de búsqueda.</param>
      <returns vsli:raw="The OS handle for the loaded library.">El identificador de sistema operativo de la biblioteca cargada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryName&quot; /&gt; or &lt;paramref name=&quot;assembly&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryName" /> o <paramref name="assembly" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; is not a &lt;see langword=&quot;RuntimeAssembly&quot; /&gt;.">
        <paramref name="assembly" /> no es un <see langword="RuntimeAssembly" />.</exception>
      <exception cref="T:System.DllNotFoundException" vsli:raw="The library can't be found.">No se encuentra la biblioteca.</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The library is not valid.">La biblioteca no es válida.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)">
      <summary vsli:raw="Sets a callback for resolving native library imports from an assembly.">Establece una devolución de llamada para resolver las importaciones de la biblioteca nativa desde un ensamblado.</summary>
      <param name="assembly" vsli:raw="The assembly for which the resolver is registered.">Ensamblado para el que se ha registrado la resolución.</param>
      <param name="resolver" vsli:raw="The resolver callback to register.">Devolución de llamada de resolución que se va a registrar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; or &lt;paramref name=&quot;resolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="assembly" /> o paramref name="resolver" /&gt; es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A resolver is already set for this assembly.">Ya hay una resolución establecida para este ensamblado.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)">
      <summary vsli:raw="Gets the address of an exported symbol and returns a value that indicates whether the method call succeeded.">Obtiene la dirección de un símbolo exportado y devuelve un valor que indica si la llamada al método se ha realizado correctamente.</summary>
      <param name="handle" vsli:raw="The native library OS handle.">El identificador de sistema operativo de la biblioteca nativa.</param>
      <param name="name" vsli:raw="The name of the exported symbol.">Nombre del símbolo exportado.</param>
      <param name="address" vsli:raw="When the method returns, contains the symbol address, if it exists.">Cuando lo devuelve el método, contiene la dirección del símbolo, si existe.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the address of the exported symbol was found successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el método se devuelve correctamente; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handle&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handle" /> o <paramref name="name" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)">
      <summary vsli:raw="Provides a simple API for loading a native library and returns a value that indicates whether the operation succeeded.">Proporciona una API sencilla para cargar una biblioteca nativa y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="libraryPath" vsli:raw="The name of the native library to be loaded.">Nombre de la biblioteca nativa que se cargará.</param>
      <param name="handle" vsli:raw="When the method returns, the OS handle of the loaded native library.">Cuando vuelve el método, es el identificador de sistema operativo de la biblioteca nativa cargada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the native library was loaded successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la biblioteca nativa se ha cargado correctamente; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)">
      <summary vsli:raw="Provides a high-level API that loads a native library and returns a value that indicates whether the operation succeeded.">Proporciona una API de alto nivel que carga una biblioteca nativa y devuelve un valor que indica si la operación se ha realizado correctamente.</summary>
      <param name="libraryName" vsli:raw="The name of the native library to be loaded.">Nombre de la biblioteca nativa que se cargará.</param>
      <param name="assembly" vsli:raw="The assembly loading the native library.">Ensamblado que carga la biblioteca nativa.</param>
      <param name="searchPath" vsli:raw="The search path.">Ruta de búsqueda.</param>
      <param name="handle" vsli:raw="When the method returns, the OS handle of the loaded native library.">Cuando vuelve el método, es el identificador de sistema operativo de la biblioteca nativa cargada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the native library was loaded successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la operación de carga es correcta; de lo contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; or &lt;paramref name=&quot;assembly&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> o <paramref name="assembly" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; is not a &lt;see langword=&quot;RuntimeAssembly&quot; /&gt;.">
        <paramref name="assembly" /> no es un <see langword="RuntimeAssembly" />.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary vsli:raw="Indicates that a parameter is optional.">Indica que un parámetro es opcional.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;OptionalAttribute&quot; /&gt; class with default values.">Inicializa una nueva instancia de la clase <see langword="OptionalAttribute" /> con valores predeterminados.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary vsli:raw="Indicates that the HRESULT signature transformation that takes place during COM interop calls should be suppressed.">Indica que debe suprimirse la transformación de la firma de <see langword="retval" /> o la transformación del valor HRESULT que tiene lugar durante las llamadas de interoperabilidad COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.PreserveSigAttribute&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary vsli:raw="Indicates that the attributed assembly is a primary interop assembly.">Indica que el ensamblado con atributo es un ensamblado de interoperabilidad primario.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute&quot; /&gt; class with the major and minor version numbers of the type library for which this assembly is the primary interop assembly.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute" /> con los números de versión principal y secundaria de la biblioteca de tipos para la que este ensamblado es el ensamblado de interoperabilidad primario.</summary>
      <param name="major" vsli:raw="The major version of the type library for which this assembly is the primary interop assembly.">Versión principal de la biblioteca de tipos para la que este ensamblado es el ensamblado de interoperabilidad primario.</param>
      <param name="minor" vsli:raw="The minor version of the type library for which this assembly is the primary interop assembly.">Versión secundaria de la biblioteca de tipos para la que este ensamblado es el ensamblado de interoperabilidad primario.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the type library for which this assembly is the primary interop assembly.">Obtiene el número de versión principal de la biblioteca de tipos para la que este ensamblado es el ensamblado de interoperabilidad primario.</summary>
      <returns vsli:raw="The major version number of the type library for which this assembly is the primary interop assembly.">Número de versión principal de la biblioteca de tipos para la que este ensamblado es el ensamblado de interoperabilidad primario.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the type library for which this assembly is the primary interop assembly.">Obtiene el número de versión secundaria de la biblioteca de tipos para la que este ensamblado es el ensamblado de interoperabilidad primario.</summary>
      <returns vsli:raw="The minor version number of the type library for which this assembly is the primary interop assembly.">Número de versión secundaria de la biblioteca de tipos para la que este ensamblado es el ensamblado de interoperabilidad primario.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary vsli:raw="Allows the user to specify the ProgID of a class.">Permite que el usuario especifique el identificador de programa (ProgID) de una clase.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ProgIdAttribute&quot; /&gt; with the specified ProgID.">Inicializa una nueva instancia de <see langword="ProgIdAttribute" /> con el identificador de programa (ProgID) especificado.</summary>
      <param name="progId" vsli:raw="The ProgID to be assigned to the class.">Identificador de programa (ProgID) que va a asignarse a la clase.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary vsli:raw="Gets the ProgID of the class.">Obtiene el identificador de programa (ProgID) de la clase.</summary>
      <returns vsli:raw="The ProgID of the class.">El identificador de programa (ProgID) de la clase.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary vsli:raw="Provides a collection of &lt;see langword=&quot;static&quot; /&gt; methods that return information about the common language runtime environment.">Proporciona una colección de métodos <see langword="static" /> que devuelven información sobre el entorno de Common Language Runtime.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary vsli:raw="Tests whether the specified assembly is loaded in the global assembly cache.">Prueba si el ensamblado especificado se carga en la memoria caché global de ensamblados.</summary>
      <param name="a" vsli:raw="The assembly to test.">Ensamblado que se va a probar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the assembly is loaded in the global assembly cache; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el ensamblado se carga en la memoria caché global de ensamblados; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary vsli:raw="Returns the directory where the common language runtime is installed.">Devuelve el directorio donde está instalado Common Language Runtime.</summary>
      <returns vsli:raw="A string that contains the path to the directory where the common language runtime is installed.">Cadena que contiene la ruta de acceso del directorio donde está instalado Common Language Runtime.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)">
      <summary vsli:raw="Returns the specified interface on the specified class.">Devuelve la interfaz especificada en la clase indicada.</summary>
      <param name="clsid" vsli:raw="The identifier for the desired class.">Identificador para la clase deseada.</param>
      <param name="riid" vsli:raw="The identifier for the desired interface.">Identificador para la interfaz deseada.</param>
      <returns vsli:raw="An unmanaged pointer to the requested interface.">Puntero no administrado a la interfaz solicitada.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="IUnknown::QueryInterface failure.">Error IUnknown::QueryInterface.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)">
      <summary vsli:raw="Returns an instance of a type that represents a COM object by a pointer to its &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">Devuelve una instancia de un tipo que representa un objeto COM mediante un puntero a su interfaz <see langword="IUnknown" />.</summary>
      <param name="clsid" vsli:raw="The identifier for the desired class.">Identificador para la clase deseada.</param>
      <param name="riid" vsli:raw="The identifier for the desired interface.">Identificador para la interfaz deseada.</param>
      <returns vsli:raw="An object that represents the specified unmanaged COM object.">Objeto que representa el objeto COM no administrado especificado.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="IUnknown::QueryInterface failure.">Error IUnknown::QueryInterface.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary vsli:raw="Gets the version number of the common language runtime that's running the current process.">Obtiene el número de versión de Common Language Runtime que está ejecutando el proceso actual.</summary>
      <returns vsli:raw="A string containing the version number of the common language runtime.">Cadena que contiene el número de versión de Common Language Runtime.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary vsli:raw="Gets the path to the system configuration file.">Obtiene la ruta de acceso al archivo de configuración del sistema.</summary>
      <returns vsli:raw="The path to the system configuration file.">Ruta del archivo de configuración del sistema.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary vsli:raw="The exception thrown when the rank of an incoming &lt;see langword=&quot;SAFEARRAY&quot; /&gt; does not match the rank specified in the managed signature.">Excepción que se produce cuando el rango de una matriz <see langword="SAFEARRAY" /> entrante no coincide con el rango especificado en la firma administrada.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with default values.">Inicializa una nueva instancia de la clase <see langword="SafeArrayTypeMismatchException" /> con valores predeterminados.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class from serialization data.">Inicializa una nueva instancia de la clase <see langword="SafeArrayTypeMismatchException" /> a partir de los datos de serialización.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Objeto que contiene los datos del objeto serializados.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Información contextual acerca del origen o del destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayRankMismatchException&quot; /&gt; class with the specified message.">Inicializa una nueva instancia de la clase <see langword="SafeArrayRankMismatchException" /> con el mensaje especificado.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Mensaje que indica el motivo de la excepción.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeArrayRankMismatchException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="inner" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary vsli:raw="The exception thrown when the type of the incoming &lt;see langword=&quot;SAFEARRAY&quot; /&gt; does not match the type specified in the managed signature.">Excepción que se produce cuando el tipo de una matriz <see langword="SAFEARRAY" /> entrante no coincide con el tipo especificado en la firma administrada.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with default values.">Inicializa una nueva instancia de la clase <see langword="SafeArrayTypeMismatchException" /> con valores predeterminados.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class from serialization data.">Inicializa una nueva instancia de la clase <see langword="SafeArrayTypeMismatchException" /> a partir de los datos de serialización.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Objeto que contiene los datos del objeto serializados.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Información contextual acerca del origen o del destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with the specified message.">Inicializa una nueva instancia de la clase <see langword="SafeArrayTypeMismatchException" /> con el mensaje especificado.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Mensaje que indica el motivo de la excepción.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeArrayTypeMismatchException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="inner" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeBuffer">
      <summary>Proporciona un búfer de memoria controlado que se puede usar para leer y escribir. Los intentos para acceder a la memoria fuera del búfer controlado (agotamientos y saturaciones) provocan excepciones.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
      <summary>Crea una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> y especifica si el identificador del búfer se va a liberar de forma segura.</summary>
      <param name="ownsHandle">
        <see langword="true" /> para liberar de manera fiable el identificador durante la fase de finalización; <see langword="false" /> para impedir que se libere de manera fiable (no se recomienda).</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
      <summary>Obtiene un puntero de un objeto <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> para un bloque de memoria.</summary>
      <param name="pointer">Puntero de byte, pasado por referencia, para recibir el puntero desde dentro del objeto <see cref="T:System.Runtime.InteropServices.SafeBuffer" />. Debe establecer este puntero en <see langword="null" /> antes de llamar a este método.</param>
      <exception cref="T:System.InvalidOperationException">No se ha llamado al método <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" />.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
      <summary>Obtiene el tamaño del búfer, en bytes.</summary>
      <returns>Número de bytes del búfer de memoria.</returns>
      <exception cref="T:System.InvalidOperationException">No se ha llamado al método <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
      <summary>Especifica el tamaño de asignación del búfer de memoria utilizando el número especificado de elementos y tamaño de elemento. Debe llamar a este método antes de usar la instancia de <see cref="T:System.Runtime.InteropServices.SafeBuffer" />.</summary>
      <param name="numElements">Número de elementos que hay en el búfer.</param>
      <param name="sizeOfEachElement">Tamaño de cada elemento del búfer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" /> es menor que cero.
o bien
<paramref name="sizeOfEachElement" /> es menor que cero.
O bien
<paramref name="numElements" /> multiplicado por <paramref name="sizeOfEachElement" /> es mayor que el espacio de direcciones disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
      <summary>Define el tamaño de asignación del área de memoria en bytes. Debe llamar a este método antes de usar la instancia de <see cref="T:System.Runtime.InteropServices.SafeBuffer" />.</summary>
      <param name="numBytes">El número de bytes en el búfer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numBytes" /> es menor que cero.
o bien
<paramref name="numBytes" /> es mayor que el espacio de direcciones disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
      <summary>Define el tamaño de asignación del área de memoria especificando el número de tipos de valor. Debe llamar a este método antes de usar la instancia de <see cref="T:System.Runtime.InteropServices.SafeBuffer" />.</summary>
      <param name="numElements">Número de elementos del tipo de valor para el que se va a asignar memoria.</param>
      <typeparam name="T">Tipo de valor para el que se va a asignar memoria.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" /> es menor que cero.
o bien
<paramref name="numElements" /> multiplicado por el tamaño de cada elemento es mayor que el espacio de direcciones disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
      <summary>Lee un tipo de valor de la memoria en el desplazamiento especificado.</summary>
      <param name="byteOffset">Ubicación desde la que se va a leer el tipo de valor. Quizás tenga que tener en cuenta los problemas de alineación.</param>
      <typeparam name="T">Tipo de valor que se va a leer.</typeparam>
      <returns>Tipo de valor leído de la memoria.</returns>
      <exception cref="T:System.InvalidOperationException">No se ha llamado al método <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>Lee el número especificado de tipos de valor de la memoria empezando en el desplazamiento y los escribe en una matriz empezando en el índice.</summary>
      <param name="byteOffset">Ubicación desde la que se va a iniciar la lectura.</param>
      <param name="array">Matriz de salida en la que se va a escribir.</param>
      <param name="index">Ubicación en la matriz de salida en la que se va a empezar a escribir.</param>
      <param name="count">Número de tipos de valor que se van a leer de la matriz de entrada y que se van a escribir en la matriz de salida.</param>
      <typeparam name="T">Tipo de valor que se va a leer.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.
o bien
<paramref name="count" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La longitud de la matriz menos el índice es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.InvalidOperationException">No se ha llamado al método <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
      <summary>Libera un puntero obtenido por el método <see cref="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)" />.</summary>
      <exception cref="T:System.InvalidOperationException">No se ha llamado al método <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
      <summary>Escribe un tipo de valor en la memoria en la ubicación dada.</summary>
      <param name="byteOffset">Ubicación en la que se va a empezar a escribir. Quizás tenga que tener en cuenta los problemas de alineación.</param>
      <param name="value">Valor que se va a escribir.</param>
      <typeparam name="T">Tipo de valor que se va a escribir.</typeparam>
      <exception cref="T:System.InvalidOperationException">No se ha llamado al método <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>Escribe el número especificado de tipos de valor en una ubicación de memoria leyendo bytes a partir de la ubicación especificada en la matriz de entrada.</summary>
      <param name="byteOffset">Ubicación de la memoria en la que se va a escribir.</param>
      <param name="array">Matriz de entrada.</param>
      <param name="index">Desplazamiento en la matriz a partir del cual se va a empezar a leer.</param>
      <param name="count">Número de tipos de valor que se van a escribir.</param>
      <typeparam name="T">Tipo de valor que se va a escribir.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">La longitud de la matriz de entrada menos <paramref name="index" /> es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.InvalidOperationException">No se ha llamado al método <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" />.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary vsli:raw="Represents structured exception handling (SEH) errors.">Representa errores de Control de excepciones estructurado (SEH).</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.SEHException" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class from serialization data.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.SEHException" /> a partir de los datos de serialización.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Objeto que contiene los datos del objeto serializados.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Información contextual acerca del origen o del destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class with a specified message.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.SEHException" /> con el mensaje especificado.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Mensaje que indica el motivo de la excepción.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.SEHException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="inner" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary vsli:raw="Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.">Indica si la excepción puede recuperarse o no, y si el código puede continuar ejecutándose a partir del punto en el que se inició la excepción.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;, because resumable exceptions are not implemented.">Siempre <see langword="false" />, ya que no se implementan excepciones reanudables.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.StandardOleMarshalObject">
      <summary vsli:raw="Replaces the standard common language runtime (CLR) free-threaded marshaler with the standard OLE STA marshaler.">Reemplaza el contador de referencias de subprocesamiento libre de Common Language Runtime (CLR) con el contador de referencias OLE STA estándar.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StandardOleMarshalObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.StandardOleMarshalObject&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.StandardOleMarshalObject" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary vsli:raw="Provides support for type equivalence.">Proporciona compatibilidad para la equivalencia de tipos.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeIdentifierAttribute&quot; /&gt; class.">Crea una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeIdentifierAttribute&quot; /&gt; class with the specified scope and identifier.">Crea una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> con el ámbito y el identificador especificados.</summary>
      <param name="scope" vsli:raw="The first type equivalence string.">Primera cadena de equivalencia de tipos.</param>
      <param name="identifier" vsli:raw="The second type equivalence string.">Segunda cadena de equivalencia de tipos.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary vsli:raw="Gets the value of the &lt;paramref name=&quot;identifier&quot; /&gt; parameter that was passed to the &lt;see cref=&quot;M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)&quot; /&gt; constructor.">Obtiene el valor del parámetro <paramref name="identifier" /> que se pasó al constructor <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" />.</summary>
      <returns vsli:raw="The value of the constructor's &lt;paramref name=&quot;identifier&quot; /&gt; parameter.">Valor del parámetro <paramref name="identifier" /> del constructor.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary vsli:raw="Gets the value of the &lt;paramref name=&quot;scope&quot; /&gt; parameter that was passed to the &lt;see cref=&quot;M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)&quot; /&gt; constructor.">Obtiene el valor del parámetro <paramref name="scope" /> que se pasó al constructor <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" />.</summary>
      <returns vsli:raw="The value of the constructor's &lt;paramref name=&quot;scope&quot; /&gt; parameter.">Valor del parámetro <paramref name="scope" /> del constructor.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCFLAGS&quot; /&gt; that were originally imported for this method from the COM type library.">Contiene la enumeración <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> que se importó originalmente para este método desde la biblioteca de tipos COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibFuncAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value.">Inicializa una nueva instancia de la clase <see langword="TypeLibFuncAttribute" /> con el valor <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> especificado.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for the attributed method as found in the type library it was imported from.">Valor <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> del método con atributos tal y como se encontró en la biblioteca de tipos de la que se importó.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibFuncAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value.">Inicializa una nueva instancia de la clase <see langword="TypeLibFuncAttribute" /> con el valor <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> especificado.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for the attributed method as found in the type library it was imported from.">Valor <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> del método con atributos tal y como se encontró en la biblioteca de tipos de la que se importó.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibFuncAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for this method.">Obtiene el valor <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> para este método.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for this method.">El valor <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> de este método.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see langword=&quot;FUNCFLAGS&quot; /&gt; in the COM type library from where this method was imported.">Describe la configuración original de <see langword="FUNCFLAGS" /> en la biblioteca de tipos COM desde la que se importó este método.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable">
      <summary vsli:raw="The function that supports data binding.">Función que admite el enlace de datos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultBind">
      <summary vsli:raw="The function that best represents the object. Only one function in a type information can have this attribute.">Función que mejor representa al objeto. Sólo una función de una información de tipos puede tener este atributo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultCollelem">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.">Permite llevar a cabo una optimización en la que la que el compilador busca un miembro denominado "xyz" en el tipo "abc". Si se encuentra un miembro de este tipo y se marca como función de descriptor de acceso para un elemento de la colección predeterminada, entonces se genera una llamada a dicha función miembro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDisplayBind">
      <summary vsli:raw="The function that is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable&quot; /&gt; must also be set.">Función que se muestra al usuario como enlazable. <see cref="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable" /> también debe establecerse.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FHidden">
      <summary vsli:raw="The function should not be displayed to the user, although it exists and is bindable.">No debe mostrarse la función al usuario, aunque exista y sea enlazable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FImmediateBind">
      <summary vsli:raw="The function is mapped as individual bindable properties.">La función se asigna del mismo modo que las propiedades enlazables individuales.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FNonBrowsable">
      <summary vsli:raw="The property appears in an object browser, but not in a properties browser.">La propiedad aparece en un examinador de objetos, pero no en un examinador de propiedades.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FReplaceable">
      <summary vsli:raw="Tags the interface as having default behaviors.">Etiqueta la interfaz indicando que tiene comportamientos predeterminados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRequestEdit">
      <summary vsli:raw="When set, any call to a method that sets the property results first in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;.">Cuando se establece, cualquier llamada a un método que establezca la propiedad dará como resultado, en primer lugar, una llamada a <see langword="IPropertyNotifySink::OnRequestEdit" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level functions or functions that type browsers should not display.">El marcador está destinado a funciones en el nivel del sistema o a funciones que los exploradores de tipos no deben mostrar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FSource">
      <summary vsli:raw="The function returns an object that is a source of events.">La función devuelve un objeto que es un origen de eventos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUiDefault">
      <summary vsli:raw="The type information member is the default member for display in the user interface.">El miembro de la información de tipos es el miembro predeterminado que se mostrará en la interfaz de usuario.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUsesGetLastError">
      <summary vsli:raw="The function supports &lt;see langword=&quot;GetLastError&quot; /&gt;.">La función admite <see langword="GetLastError" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibImportClassAttribute">
      <summary vsli:raw="Specifies which &lt;see cref=&quot;T:System.Type&quot; /&gt; exclusively uses an interface. This class cannot be inherited.">Especifica qué objeto <see cref="T:System.Type" /> utiliza de modo exclusivo una interfaz. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibImportClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibImportClassAttribute&quot; /&gt; class specifying the &lt;see cref=&quot;T:System.Type&quot; /&gt; that exclusively uses an interface.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.TypeLibImportClassAttribute" /> que especifica el objeto <see cref="T:System.Type" /> que utiliza de modo excluso una interfaz.</summary>
      <param name="importClass" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">El objeto <see cref="T:System.Type" /> que utiliza de modo exclusivo una interfaz.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibImportClassAttribute.Value">
      <summary vsli:raw="Gets the name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">Obtiene el nombre de un objeto <see cref="T:System.Type" /> que utiliza de modo exclusivo una interfaz.</summary>
      <returns vsli:raw="The name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">Nombre de un objeto <see cref="T:System.Type" /> que utiliza de modo exclusivo una interfaz.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; that were originally imported for this type from the COM type library.">Contiene <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> que se importó originalmente para este tipo desde la biblioteca de tipos COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value.">Inicializa una nueva instancia de la clase <see langword="TypeLibTypeAttribute" /> con el valor <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> especificado.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for the attributed type as found in the type library it was imported from.">Valor <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> del método con atributos tal y como se encontró en la biblioteca de tipos de la que se importó.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value.">Inicializa una nueva instancia de la clase <see langword="TypeLibTypeAttribute" /> con el valor <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> especificado.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for the attributed type as found in the type library it was imported from.">Valor <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> del método con atributos tal y como se encontró en la biblioteca de tipos de la que se importó.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibTypeAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for this type.">Obtiene el valor <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> de este tipo.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for this type.">Valor <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> de este tipo.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; in the COM type library from which the type was imported.">Describe la configuración original de <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> en la biblioteca de tipos COM desde la que se importó el tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAggregatable">
      <summary vsli:raw="The class supports aggregation.">La clase admite agregación.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAppObject">
      <summary vsli:raw="A type description that describes an &lt;see langword=&quot;Application&quot; /&gt; object.">Descripción de tipo que describe un objeto <see langword="Application" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate">
      <summary vsli:raw="Instances of the type can be created by &lt;see langword=&quot;ITypeInfo::CreateInstance&quot; /&gt;.">Se pueden crear instancias del tipo mediante <see langword="ITypeInfo::CreateInstance" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FControl">
      <summary vsli:raw="The type is a control from which other types will be derived, and should not be displayed to users.">El tipo es un control a partir del cual se derivarán otros tipos, y no debe mostrarse a los usuarios.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable">
      <summary vsli:raw="Indicates that the interface derives from &lt;see langword=&quot;IDispatch&quot; /&gt;, either directly or indirectly.">Indica que la interfaz se deriva de <see langword="IDispatch" />, ya sea directa o indirectamente.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDual">
      <summary vsli:raw="The interface supplies both &lt;see langword=&quot;IDispatch&quot; /&gt; and V-table binding.">La interfaz proporciona enlaces <see langword="IDispatch" /> y VTBL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FHidden">
      <summary vsli:raw="The type should not be displayed to browsers.">El tipo no debe mostrarse a los exploradores.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FLicensed">
      <summary vsli:raw="The type is licensed.">El tipo tiene licencia.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FNonExtensible">
      <summary vsli:raw="The interface cannot add members at run time.">La interfaz no puede agregar miembros en tiempo de ejecución.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FOleAutomation">
      <summary vsli:raw="The types used in the interface are fully compatible with Automation, including vtable binding support.">Los tipos utilizados en la interfaz son totalmente compatibles con la automatización, incluida la compatibilidad con los enlaces VTBL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FPreDeclId">
      <summary vsli:raw="The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.">El tipo está predefinido. La aplicación cliente debe crear automáticamente una única instancia del objeto que tenga este atributo. El nombre de la variable que apunta al objeto es el mismo que el nombre de la clase del objeto.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReplaceable">
      <summary vsli:raw="The object supports &lt;see langword=&quot;IConnectionPointWithDefault&quot; /&gt;, and has default behaviors.">El objeto admite <see langword="IConnectionPointWithDefault" />, y tiene comportamientos predeterminados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level types or types that type browsers should not display.">El marcador está destinado a tipos en el nivel del sistema o a tipos que los exploradores de tipos no deben mostrar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReverseBind">
      <summary vsli:raw="Indicates base interfaces should be checked for name resolution before checking child interfaces. This is the reverse of the default behavior.">Indica que se ha de comprobar la resolución de nombres de las interfaces base antes de comprobar las interfaces secundarias. Esto es lo contrario al comportamiento predeterminado.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.VARFLAGS&quot; /&gt; that were originally imported for this field from the COM type library.">Contiene <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> que se importó originalmente para este campo desde la biblioteca de tipos COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> con el valor <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> especificado.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for the attributed field as found in the type library it was imported from.">Valor <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> del campo con atributos tal y como se encontró en la biblioteca de tipos de la que se importó.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> con el valor <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> especificado.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for the attributed field as found in the type library it was imported from.">Valor <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> del campo con atributos tal y como se encontró en la biblioteca de tipos de la que se importó.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVarAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for this field.">Obtiene el valor <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> de este campo.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for this field.">Valor <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> de este campo.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see cref=&quot;T:System.Runtime.InteropServices.VARFLAGS&quot; /&gt; in the COM type library from which the variable was imported.">Describe la configuración original de <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> en la biblioteca de tipos COM desde la que se importó la variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable">
      <summary vsli:raw="The variable supports data binding.">La variable admite enlace de datos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultBind">
      <summary vsli:raw="The variable is the single property that best represents the object. Only one variable in a type info can have this value.">La variable es la propiedad que mejor representa al objeto. Sólo una variable de la información de tipos puede tener este valor.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultCollelem">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.">Permite llevar a cabo una optimización en la que la que el compilador busca un miembro denominado "xyz" en el tipo "abc". Si se encuentra un miembro de este tipo y se marca como función de descriptor de acceso para un elemento de la colección predeterminada, entonces se genera una llamada a dicha función miembro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDisplayBind">
      <summary vsli:raw="The variable is displayed as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable&quot; /&gt; must also be set.">La variable se muestra como enlazable. <see cref="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable" /> también debe establecerse.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FHidden">
      <summary vsli:raw="The variable should not be displayed in a browser, though it exists and is bindable.">La variable no se debe mostrar en un explorador, aunque exista y sea enlazable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FImmediateBind">
      <summary vsli:raw="The variable is mapped as individual bindable properties.">La variable se asigna del mismo modo que las propiedades enlazables individuales.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FNonBrowsable">
      <summary vsli:raw="The variable appears in an object browser, but not in a properties browser.">La variable aparece en un examinador de objetos, pero no en un examinador de propiedades.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReadOnly">
      <summary vsli:raw="Assignment to the variable should not be allowed.">No debe permitirse que se realicen asignaciones a la variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReplaceable">
      <summary vsli:raw="Tags the interface as having default behaviors.">Etiqueta la interfaz indicando que tiene comportamientos predeterminados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRequestEdit">
      <summary vsli:raw="Indicates that the property supports the COM &lt;see langword=&quot;OnRequestEdit&quot; /&gt; notification.">Indica que la propiedad admite la notificación <see langword="OnRequestEdit" /> de COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level functions or functions that type browsers should not display.">El marcador está destinado a funciones en el nivel del sistema o a funciones que los exploradores de tipos no deben mostrar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FSource">
      <summary vsli:raw="The variable returns an object that is a source of events.">La variable devuelve un objeto que es un origen de eventos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FUiDefault">
      <summary vsli:raw="The default display in the user interface.">Presentación predeterminada en la interfaz de usuario.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVersionAttribute">
      <summary vsli:raw="Specifies the version number of an exported type library.">Especifica el número de versión de una biblioteca de tipos exportada.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVersionAttribute.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVersionAttribute&quot; /&gt; class with the major and minor version numbers of the type library.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute" /> con los números de versión principal y secundaria de la biblioteca de tipos.</summary>
      <param name="major" vsli:raw="The major version number of the type library.">Número de la versión principal de la biblioteca de tipos.</param>
      <param name="minor" vsli:raw="The minor version number of the type library.">Número de la versión secundaria de la biblioteca de tipos.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the type library.">Obtiene el número de la versión principal de la biblioteca de tipos.</summary>
      <returns vsli:raw="The major version number of the type library.">Número de la versión principal de la biblioteca de tipos.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the type library.">Obtiene el número de la versión secundaria de la biblioteca de tipos.</summary>
      <returns vsli:raw="The minor version number of the type library.">Número de la versión secundaria de la biblioteca de tipos.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_UNKNOWN&quot; /&gt;.">Encapsula los objetos cuyas referencias se van a calcular como <see langword="VT_UNKNOWN" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnknownWrapper&quot; /&gt; class with the object to be wrapped.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> con el objeto que se va a incluir en el contenedor.</summary>
      <param name="obj" vsli:raw="The object being wrapped.">Objeto que se va a incluir en el contenedor.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary vsli:raw="Gets the object contained by this wrapper.">Obtiene el objeto incluido en este contenedor.</summary>
      <returns vsli:raw="The wrapped object.">Objeto contenido en un contenedor.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary vsli:raw="Controls the marshaling behavior of a delegate signature passed as an unmanaged function pointer to or from unmanaged code. This class cannot be inherited.">Controla el comportamiento del cálculo de referencias de una firma de delegado que se pasa como un puntero de función no administrada a o desde código no administrado. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute&quot; /&gt; class with the specified calling convention.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> con la convención de llamada especificada.</summary>
      <param name="callingConvention" vsli:raw="The specified calling convention.">Convención de llamada especificada.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary vsli:raw="Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.">Habilita o deshabilita el comportamiento de asignación de ajuste perfecto al convertir caracteres Unicode en caracteres ANSI.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary vsli:raw="Gets the value of the calling convention.">Obtiene el valor de la convención de llamada.</summary>
      <returns vsli:raw="The value of the calling convention specified by the &lt;see cref=&quot;M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)&quot; /&gt; constructor.">El valor de la convención de llamada especificado por el constructor <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" />.</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary vsli:raw="Indicates how to marshal string parameters to the method, and controls name mangling.">Indica la forma de calcular las referencias de los parámetros de cadena al método, y controla los daños en los nombres.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary vsli:raw="Indicates whether the callee calls the &lt;see langword=&quot;SetLastError&quot; /&gt; Windows API function before returning from the attributed method.">Indica que el destinatario de la llamada llamará a la función <see langword="SetLastError" /> de la API de Windows antes de volver del método con atributos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI &quot;?&quot; character.">Habilita o deshabilita el inicio de una excepción cuando un carácter Unicode que no se puede asignar se convierte en un carácter ANSI "?".</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>Identifica la forma de calcular las referencias de parámetros o campos en el código no administrado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>Cadena de caracteres ANSI que tiene una longitud fija de un solo byte. Este miembro puede usarse en el tipo de datos <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>Tipo dinámico que determina el tipo de un objeto en tiempo de ejecución y calcula las referencias del objeto como de dicho tipo. Este miembro es válido para los métodos de invocación de plataforma únicamente.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>Valor booleano de 4 bytes (<see langword="true" /> != 0, <see langword="false" /> = 0). Se trata del tipo BOOL de Win32.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>Cadena de caracteres Unicode que tiene una longitud fija de doble byte. Este miembro, que es la cadena predeterminada en COM, puede utilizarse en el tipo de datos <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>Cuando la propiedad <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" /> se establece en <see langword="ByValArray" />, el campo <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> debe establecerse de modo que indique el número de elementos de la matriz. El campo <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> también puede contener el <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> de los elementos de la matriz cuando sea necesario diferenciar los tipos de cadenas. <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> solo puede usarse en una matriz cuyos elementos aparezcan en forma de campos de una estructura.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>Se utiliza para matrices en línea de caracteres de longitud fija que aparecen dentro de una estructura. Los tipos <see langword="ByValTStr" /> se comportan como cadenas de tamaño fijo y de estilo de C dentro de una estructura (por ejemplo, <c>char s[5]</c>). El tipo de caracteres usado con <see langword="ByValTStr" /> viene determinado por el argumento <see cref="T:System.Runtime.InteropServices.CharSet" /> del atributo <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> que se aplica a la estructura contenedora. Debe utilizarse siempre el campo <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> para indicar el tamaño de la matriz.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>Tipo de divisa. Se utiliza en <see cref="T:System.Decimal" /> para calcular las referencias del valor decimal en forma de tipo de divisa COM en lugar de <see langword="Decimal" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>Especifica la clase de contador de referencias personalizado cuando se usa con el campo <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> o <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" />. El campo <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> puede utilizarse para pasar información adicional al contador de referencias personalizado. Este miembro puede utilizarse en cualquier tipo de referencia. Este miembro es válido solo para parámetros y valores devueltos. No se puede usar en campos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>Tipo nativo asociado a <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> o a <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" /> y que hace que el parámetro se exporte como un valor HRESULT a la biblioteca de tipos exportada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>Entero que puede utilizarse como un puntero de función de estilo C. Este miembro puede usarse en un tipo de datos <see cref="T:System.Delegate" /> o en un tipo que se herede de <see cref="T:System.Delegate" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.HString">
      <summary>Cadena de Windows en tiempo de ejecución. Este miembro puede usarse en el tipo de datos <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>Entero de 1 byte con signo. Este miembro puede utilizarse para transformar un valor booleano en un valor <see langword="bool" /> de estilo C de 1 byte (<see langword="true" /> = 1, <see langword="false" /> = 0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>Entero de 2 bytes con signo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>Entero de 4 bytes con signo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>Entero de 8 bytes con signo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>Puntero de interfaz <see langword="IDispatch" /> COM (<see langword="Object" /> en Microsoft Visual Basic 6.0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IInspectable">
      <summary>Puntero a interfaz Windows en tiempo de ejecución. Este miembro puede usarse en el tipo de datos <see cref="T:System.Object" /> .</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>Puntero a interfaz COM. <see cref="T:System.Guid" /> de la interfaz se obtiene a partir de los metadatos de la clase. Este miembro se utiliza para especificar el tipo exacto de interfaz o el tipo predeterminado de interfaz si se aplica a una clase. Este miembro se comporta como <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" /> cuando se aplica al tipo de datos <see cref="T:System.Object" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>Puntero a <see langword="IUnknown" /> COM. Este miembro puede usarse en el tipo de datos <see cref="T:System.Object" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>Puntero al primer elemento de una matriz de estilo C. Cuando se calculan las referencias de código administrado a no administrado, la longitud de la matriz viene determinada por la longitud de la matriz administrada. Cuando se calculan las referencias de código no administrado a código administrado, la longitud de la matriz se determina a partir de los campos <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> y <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" /> seguidos, de forma opcional, del tipo no administrado de los elementos de la matriz cuando es necesario distinguir los tipos de cadena.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>Cadena de caracteres ANSI de un solo byte terminada en null. Este miembro puede usarse en el tipo de datos <see cref="T:System.String" /> y en el tipo de datos <see cref="T:System.Text.StringBuilder" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>Puntero a una estructura de estilo C que se utiliza para serializar clases con formato administradas. Este miembro es válido para los métodos de invocación de plataforma únicamente.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>Cadena de caracteres dependientes de la plataforma: ANSI en Windows 98 y Unicode en Windows NT y Windows XP. Este valor solo se admite para llamadas a la plataforma y no para la interoperabilidad COM, porque no se admite la exportación de una cadena de tipo <see langword="LPTStr" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPUTF8Str">
      <summary>Un puntero a una cadena con codificación UTF-8.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>Cadena de caracteres Unicode de 2 bytes terminada en null. No se puede usar el valor <see langword="LPWStr" /> con una cadena no administrada a menos que la cadena se haya creado mediante la función <see langword="CoTaskMemAlloc" /> no administrada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>Número de punto flotante de 4 bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>Número de punto flotante de 8 bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>Matriz <see langword="SafeArray" /> que se describe a sí misma y que contiene el tipo, rango y límites de los datos de la matriz asociada. Este miembro puede utilizarse con el campo <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" /> para reemplazar el tipo de elemento predeterminado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>VARIANT que se utiliza para serializar clases con formato administradas y tipos de valor.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>Número entero con signo que depende de la plataforma: 4 bytes en Windows de 32 bits, 8 bytes en Windows de 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>Número entero sin signo que depende de la plataforma: 4 bytes en Windows de 32 bits, 8 bytes en Windows de 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>Cadena <see langword="char" /> dependiente de la plataforma con longitud fijada previamente: ANSI en Windows 98, Unicode en Windows NT. Este miembro de tipo BSTR se utiliza en raras ocasiones.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>Entero de 1 byte sin signo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>Entero de 2 bytes sin signo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>Entero de 4 bytes sin signo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>Entero de 8 bytes sin signo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>Tipo VARIANT_BOOL de 2 bytes definido por OLE (<see langword="true" /> = -1, <see langword="false" /> = 0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>Un valor que permite a Visual Basic cambiar una cadena del código no administrado y reflejar los resultados en código administrado. Este valor solo es compatible para la invocación de plataforma.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary vsli:raw="Indicates how to marshal the array elements when an array is marshaled from managed to unmanaged code as a &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">Indica cómo calcular las referencias de los elementos de matriz cuando se calculan las referencias de matriz de código administrado a código no administrado como <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;SAFEARRAY&quot; /&gt; pointer.">Indica un puntero <see langword="SAFEARRAY" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary vsli:raw="Indicates length prefixed bytes.">Indica la longitud de los bytes con prefijo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary vsli:raw="Indicates that a blob contains an object.">Indica que un objeto binario contiene un objeto.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary vsli:raw="Indicates a Boolean value.">Indica un valor booleano.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary vsli:raw="Indicates a BSTR string.">Indica una cadena BSTR.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary vsli:raw="Indicates that a value is a reference.">Indica que un valor es una referencia.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary vsli:raw="Indicates a C style array.">Indica una matriz de estilo C.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary vsli:raw="Indicates the clipboard format.">Indica el formato del portapapeles.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary vsli:raw="Indicates a class ID.">Indica el identificador de una clase.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary vsli:raw="Indicates a currency value.">Indica un valor de moneda.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary vsli:raw="Indicates a DATE value.">Indica un valor de DATE.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;decimal&quot; /&gt; value.">Indica un valor <see langword="decimal" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;IDispatch&quot; /&gt; pointer.">Indica un puntero <see langword="IDispatch" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary vsli:raw="Indicates that a value was not specified.">Indica que no se ha especificado un valor.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary vsli:raw="Indicates an SCODE.">Indica un SCODE.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary vsli:raw="Indicates a FILETIME value.">Indica un valor de FILETIME.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary vsli:raw="Indicates an HRESULT.">Indica un HRESULT.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;char&quot; /&gt; value.">Indica un valor <see langword="char" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;short&quot; /&gt; integer.">Indica un entero <see langword="short" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;long&quot; /&gt; integer.">Indica un entero <see langword="long" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary vsli:raw="Indicates a 64-bit integer.">Indica un entero de 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary vsli:raw="Indicates an integer value.">Indica un valor entero.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary vsli:raw="Indicates a null-terminated string.">Indica una cadena terminada en un carácter null.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary vsli:raw="Indicates a wide string terminated by &lt;see langword=&quot;null&quot; /&gt;.">Indica una cadena grande terminada en <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary vsli:raw="Indicates a null value, similar to a null value in SQL.">Indica un valor null, similar al valor Null en SQL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary vsli:raw="Indicates a pointer type.">Indica un tipo de puntero.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;float&quot; /&gt; value.">Indica un valor <see langword="float" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;double&quot; /&gt; value.">Indica un valor <see langword="double" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary vsli:raw="Indicates a user defined type.">Indica un tipo definido por el usuario.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary vsli:raw="Indicates a SAFEARRAY. Not valid in a VARIANT.">Indica una SAFEARRAY. No es válida en un tipo VARIANT.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary vsli:raw="Indicates that the name of a storage follows.">Indica que continúa el nombre de un almacenamiento.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary vsli:raw="Indicates that a storage contains an object.">Indica que un almacenamiento contiene un objeto.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary vsli:raw="Indicates that the name of a stream follows.">Indica que continúa el nombre de una secuencia.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary vsli:raw="Indicates that a stream contains an object.">Indica que una secuencia contiene un objeto.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;byte&quot; /&gt;.">Indica un <see langword="byte" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt;&lt;see langword=&quot;short&quot; /&gt;.">Indica un <see langword="unsigned" /><see langword="short" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt;&lt;see langword=&quot;long&quot; /&gt;.">Indica un <see langword="unsigned" /><see langword="long" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary vsli:raw="Indicates an 64-bit unsigned integer.">Indica un entero de 64 bits sin signo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt; integer value.">Indica un valor entero <see langword="unsigned" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;IUnknown&quot; /&gt; pointer.">Indica un puntero <see langword="IUnknown" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary vsli:raw="Indicates a user defined type.">Indica un tipo definido por el usuario.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary vsli:raw="Indicates a VARIANT &lt;see langword=&quot;far&quot; /&gt; pointer.">Indica un puntero <see langword="far" /> VARIANT.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary vsli:raw="Indicates a simple, counted array.">Indica una matriz simple y contada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary vsli:raw="Indicates a C style &lt;see langword=&quot;void&quot; /&gt;.">Indica una matriz <see langword="void" /> de estilo C.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary vsli:raw="Marshals data of type &lt;see langword=&quot;VT_VARIANT | VT_BYREF&quot; /&gt; from managed to unmanaged code. This class cannot be inherited.">Calcula las referencias de datos de tipo <see langword="VT_VARIANT | VT_BYREF" /> de código administrado a no administrado. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; class for the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; parameter.">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> para el parámetro <see cref="T:System.Object" /> especificado.</summary>
      <param name="obj" vsli:raw="The object to marshal.">Objeto cuyas referencias se van a calcular.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary vsli:raw="Gets the object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; object.">Obtiene el objeto ajustado por el objeto <see cref="T:System.Runtime.InteropServices.VariantWrapper" />.</summary>
      <returns vsli:raw="The object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; object.">Objeto ajustado por el objeto <see cref="T:System.Runtime.InteropServices.VariantWrapper" />.</returns>
    </member>
    <member name="T:System.Security.SecureString">
      <summary vsli:raw="Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.">Representa el texto que debe mantenerse confidencial (por ejemplo, mediante su eliminación de la memoria del equipo cuando ya no se necesite). Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Security.SecureString.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Security.SecureString" />.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this instance.">Error al proteger o desproteger el valor de esta instancia.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This operation is not supported on this platform.">Operación no permitida en esta plataforma.</exception>
    </member>
    <member name="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; class from a subarray of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects.  &#xA;  &#xA; This constructor is not CLS-compliant. The CLS-compliant alternative is &lt;see cref=&quot;M:System.Security.SecureString.#ctor&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Security.SecureString" /> desde una submatriz de objetos <see cref="T:System.Char" />.
Este constructor no es conforme a CLS. La alternativa conforme a CLS es <see cref="M:System.Security.SecureString.#ctor" />.</summary>
      <param name="value" vsli:raw="A pointer to an array of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects.">Puntero a una matriz de objetos <see cref="T:System.Char" />.</param>
      <param name="length" vsli:raw="The number of elements of &lt;paramref name=&quot;value&quot; /&gt; to include in the new instance.">Número de elementos de <paramref name="value" /> que se van a incluir en la nueva instancia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; is less than zero or greater than 65,536.">
        <paramref name="length" /> es menor que cero o mayor que 65 536.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Error al proteger o desproteger el valor de esta cadena segura.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This operation is not supported on this platform.">Operación no permitida en esta plataforma.</exception>
    </member>
    <member name="M:System.Security.SecureString.AppendChar(System.Char)">
      <summary vsli:raw="Appends a character to the end of the current secure string.">Anexa un carácter al final de la cadena segura actual.</summary>
      <param name="c" vsli:raw="A character to append to this secure string.">Carácter que se va a anexar a esta cadena segura.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Esta cadena segura ya se ha desechado.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">Esta cadena segura es de sólo lectura.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="Performing this operation would make the length of this secure string greater than 65,536 characters.">Esta operación haría que esta cadena segura tuviese más de 65 536 caracteres.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Error al proteger o desproteger el valor de esta cadena segura.</exception>
    </member>
    <member name="M:System.Security.SecureString.Clear">
      <summary vsli:raw="Deletes the value of the current secure string.">Elimina el valor de la cadena segura actual.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Esta cadena segura ya se ha desechado.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">Esta cadena segura es de sólo lectura.</exception>
    </member>
    <member name="M:System.Security.SecureString.Copy">
      <summary vsli:raw="Creates a copy of the current secure string.">Crea una copia de la cadena segura actual.</summary>
      <returns vsli:raw="A duplicate of this secure string.">Duplicado de esta cadena segura.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Esta cadena segura ya se ha desechado.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Error al proteger o desproteger el valor de esta cadena segura.</exception>
    </member>
    <member name="M:System.Security.SecureString.Dispose">
      <summary vsli:raw="Releases all resources used by the current &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object.">Libera todos los recursos que usa el objeto <see cref="T:System.Security.SecureString" /> actual.</summary>
    </member>
    <member name="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
      <summary vsli:raw="Inserts a character in this secure string at the specified index position.">Inserta un carácter en esta cadena segura en la posición de índice especificada.</summary>
      <param name="index" vsli:raw="The index position where parameter &lt;paramref name=&quot;c&quot; /&gt; is inserted.">Posición de índice donde se inserta el parámetro <paramref name="c" />.</param>
      <param name="c" vsli:raw="The character to insert.">Carácter que se va a insertar.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Esta cadena segura ya se ha desechado.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">Esta cadena segura es de sólo lectura.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than the length of this secure string.  &#xA;  &#xA; -or-  &#xA;  &#xA; Performing this operation would make the length of this secure string greater than 65,536 characters.">El parámetro <paramref name="index" /> es menor que cero o mayor que la longitud de la cadena segura en cuestión.
O bien
Esta operación haría que esta cadena segura tuviese más de 65 536 caracteres.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Error al proteger o desproteger el valor de esta cadena segura.</exception>
    </member>
    <member name="M:System.Security.SecureString.IsReadOnly">
      <summary vsli:raw="Indicates whether this secure string is marked read-only.">Indica si esta cadena segura está marcada como de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this secure string is marked read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la cadena segura está marcada como de solo lectura; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Esta cadena segura ya se ha desechado.</exception>
    </member>
    <member name="P:System.Security.SecureString.Length">
      <summary vsli:raw="Gets the number of characters in the current secure string.">Obtiene el número de caracteres de la cadena segura actual.</summary>
      <returns vsli:raw="The number of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects in this secure string.">Número de objetos <see cref="T:System.Char" /> de esta cadena segura.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Esta cadena segura ya se ha desechado.</exception>
    </member>
    <member name="M:System.Security.SecureString.MakeReadOnly">
      <summary vsli:raw="Makes the text value of this secure string read-only.">Hace que el valor de texto de esta cadena segura sea de solo lectura.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Esta cadena segura ya se ha desechado.</exception>
    </member>
    <member name="M:System.Security.SecureString.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the character at the specified index position from this secure string.">Quita de esta cadena segura el carácter que se encuentra en la posición de índice especificada.</summary>
      <param name="index" vsli:raw="The index position of a character in this secure string.">Posición de índice de un carácter en esta cadena segura.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Esta cadena segura ya se ha desechado.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">Esta cadena segura es de sólo lectura.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than or equal to the length of this secure string.">El parámetro <paramref name="index" /> es menor que cero o mayor o igual que la longitud de la cadena segura en cuestión.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Error al proteger o desproteger el valor de esta cadena segura.</exception>
    </member>
    <member name="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
      <summary vsli:raw="Replaces the existing character at the specified index position with another character.">Reemplaza con otro carácter el carácter existente en la posición de índice especificada.</summary>
      <param name="index" vsli:raw="The index position of an existing character in this secure string.">Posición de índice de un carácter existente en esta cadena segura.</param>
      <param name="c" vsli:raw="A character that replaces the existing character.">Carácter que reemplaza al carácter existente.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Esta cadena segura ya se ha desechado.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">Esta cadena segura es de sólo lectura.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than or equal to the length of this secure string.">El parámetro <paramref name="index" /> es menor que cero o mayor o igual que la longitud de la cadena segura en cuestión.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Error al proteger o desproteger el valor de esta cadena segura.</exception>
    </member>
    <member name="T:System.Security.SecureStringMarshal">
      <summary vsli:raw="Provides a collection of methods for allocating unmanaged memory and copying unmanaged memory blocks.">Proporciona una colección de métodos para asignar memoria no administrada y copiar bloques de memoria no administrados.</summary>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">Copia el contenido de un objeto <see cref="T:System.Security.SecureString" /> administrado en un bloque de memoria asignado desde el asignador de tareas COM no administrado.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objeto administrado que se va a copiar.</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Dirección, en memoria no administrada, donde se copió el parámetro <paramref name="s" /> o 0 si se suministró un objeto null.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="s" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">El equipo actual no está ejecutando Windows 2000 Service Pack 3 o una versión posterior.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">No hay suficiente memoria disponible.</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">Copia el contenido de un objeto <see cref="T:System.Security.SecureString" /> administrado en un bloque de memoria asignado desde el asignador de tareas COM no administrado.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objeto administrado que se va a copiar.</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Dirección, en memoria no administrada, donde se copió el parámetro <paramref name="s" /> o 0 si se suministró un objeto null.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="s" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">El equipo actual no está ejecutando Windows 2000 Service Pack 3 o una versión posterior.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">No hay suficiente memoria disponible.</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">Copia el contenido de un <see cref="T:System.Security.SecureString" /> administrado en la memoria no administrada, convirtiéndolo en formato ANSI mientras realiza la copia.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objeto administrado que se va a copiar.</param>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied, or 0 if a null object was supplied.">Dirección, en memoria no administrada, donde se copió el parámetro <paramref name="s" /> o 0 si se suministró un objeto null.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="s" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">El equipo actual no está ejecutando Windows 2000 Service Pack 3 o una versión posterior.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">No hay suficiente memoria disponible.</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into unmanaged memory.">Copia el contenido de un objeto <see cref="T:System.Security.SecureString" /> administrado en la memoria no administrada.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objeto administrado que se va a copiar.</param>
      <returns vsli:raw="The address, in unmanaged memory, where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is a &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object whose length is 0.">La dirección, en memoria no administrada, donde se copió <paramref name="s" />, o 0 si <paramref name="s" /> es un objeto <see cref="T:System.Security.SecureString" /> cuya longitud es 0.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="s" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">El equipo actual no está ejecutando Windows 2000 Service Pack 3 o una versión posterior.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">No hay suficiente memoria disponible.</exception>
    </member>
  </members>
</doc>
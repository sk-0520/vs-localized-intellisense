<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.ThreadPool</name>
  </assembly>
  <members>
    <member name="T:System.Threading.IThreadPoolWorkItem">
      <summary>Rappresenta un elemento di lavoro che può essere eseguito da <see cref="T:System.Threading.ThreadPool" />.</summary>
    </member>
    <member name="M:System.Threading.IThreadPoolWorkItem.Execute">
      <summary>Esegue l'elemento di lavoro nel pool di thread.</summary>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary>Rappresenta un handle registrato durante la chiamata a <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary>Consente di annullare un'operazione di attesa registrata attivata dal metodo <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> da segnalare.</param>
      <returns>Viene restituito <see langword="true" /> se la funzione viene eseguita correttamente; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary>Fornisce un pool di thread che può essere usato per eseguire attività, inviare elementi di lavoro, elaborare operazioni di I/O asincrone, attendere per conto di altri thread ed elaborare timer.</summary>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
      <summary>Associa un handle del sistema operativo al <see cref="T:System.Threading.ThreadPool" />.</summary>
      <param name="osHandle">
        <see cref="T:System.IntPtr" /> che contiene l'handle. È necessario che l'handle sia stato aperto per operazioni di I/O sovrapposte nella parte non gestita.</param>
      <returns>
        <see langword="true" /> se l'handle è associato; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
      <summary>Associa un handle del sistema operativo al <see cref="T:System.Threading.ThreadPool" />.</summary>
      <param name="osHandle">Oggetto <see cref="T:System.Runtime.InteropServices.SafeHandle" /> che contiene l'handle del sistema operativo. È necessario che l'handle sia stato aperto per operazioni di I/O sovrapposte nella parte non gestita.</param>
      <returns>
        <see langword="true" /> se l'handle è associato; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="osHandle" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.Threading.ThreadPool.CompletedWorkItemCount">
      <summary>Ottiene il numero di elementi di lavoro che sono stati elaborati fino a questo momento.</summary>
      <returns>Numero di elementi di lavoro elaborati fino a questo momento.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
      <summary>Recupera la differenza tra il numero massimo di thread del pool di thread restituito dal metodo <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> e il numero attualmente attivo.</summary>
      <param name="workerThreads">Numero di thread di lavoro disponibili.</param>
      <param name="completionPortThreads">Numero di thread I/O asincroni disponibili.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary>Recupera il numero di richieste al pool di thread che possono essere attive contemporaneamente. Tutte le richieste al di fuori di tale numero rimangono in coda fino a quando non diventano disponibili thread di pool di thread.</summary>
      <param name="workerThreads">Numero massimo di thread di lavoro nel pool di thread.</param>
      <param name="completionPortThreads">Numero massimo di thread I/O asincroni nel pool di thread.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
      <summary>Recupera il numero minimo di thread che il pool di thread crea, man mano che vengono effettuate nuove richieste, prima di passare a un algoritmo per la gestione della creazione e dell'eliminazione del thread.</summary>
      <param name="workerThreads">Quando il metodo viene restituito, contiene il numero minimo di thread di lavoro che il pool di thread crea su richiesta.</param>
      <param name="completionPortThreads">Quando il metodo viene restituito, contiene il numero minimo di thread I/O asincroni che il pool di thread crea su richiesta.</param>
    </member>
    <member name="P:System.Threading.ThreadPool.PendingWorkItemCount">
      <summary>Ottiene il numero di elementi di lavoro attualmente in attesa di elaborazione.</summary>
      <returns>Numero di elementi di lavoro attualmente in coda per l'elaborazione.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary>Accoda un metodo da eseguire. Il metodo viene eseguito quando un thread del pool di thread diventa disponibile.</summary>
      <param name="callBack">Oggetto <see cref="T:System.Threading.WaitCallback" /> che rappresenta il metodo da eseguire.</param>
      <returns>
        <see langword="true" /> se il metodo viene accodato correttamente. Viene generata l'eccezione <see cref="T:System.NotSupportedException" /> se non è stato possibile accodare l'elemento di lavoro.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Common Language Runtime (CLR) è ospitato e l'host non supporta questa azione.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>Accoda un metodo da eseguire e specifica un oggetto che contiene i dati che dovranno essere usati dal metodo. Il metodo viene eseguito quando un thread del pool di thread diventa disponibile.</summary>
      <param name="callBack">
        <see cref="T:System.Threading.WaitCallback" /> che rappresenta il metodo da eseguire.</param>
      <param name="state">Oggetto contenente i dati che devono essere usati dal metodo.</param>
      <returns>
        <see langword="true" /> se il metodo viene accodato correttamente. Viene generata l'eccezione <see cref="T:System.NotSupportedException" /> se non è stato possibile accodare l'elemento di lavoro.</returns>
      <exception cref="T:System.NotSupportedException">Common Language Runtime (CLR) è ospitato e l'host non supporta questa azione.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary>Accoda un metodo specificato da un delegato <see cref="T:System.Action`1" /> per l'esecuzione e fornisce i dati che devono essere usati dal metodo. Il metodo viene eseguito quando un thread del pool di thread diventa disponibile.</summary>
      <param name="callBack">
        <see cref="T:System.Action`1" /> che rappresenta il metodo da eseguire.</param>
      <param name="state">Oggetto contenente i dati che devono essere usati dal metodo.</param>
      <param name="preferLocal">
        <see langword="true" /> per preferire l'accodamento dell'elemento di lavoro in una coda vicino al thread corrente; <see langword="false" /> per preferire l'accodamento dell'elemento di lavoro nella coda condivisa del pool di thread.</param>
      <typeparam name="TState">Tipo degli elementi di <paramref name="state" />.</typeparam>
      <returns>
        <see langword="true" /> se il metodo viene accodato correttamente. Viene generata l'eccezione <see cref="T:System.NotSupportedException" /> se non è stato possibile accodare l'elemento di lavoro.
.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un valore intero con segno a 32 bit per il timeout in millisecondi.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> da registrare. Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Delegato <see cref="T:System.Threading.WaitOrTimerCallback" /> da chiamare quando il parametro <paramref name="waitObject" /> riceve un segnale.</param>
      <param name="state">Oggetto passato al delegato.</param>
      <param name="millisecondsTimeOutInterval">Timeout in millisecondi. Se il parametro <paramref name="millisecondsTimeOutInterval" /> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore. Se <paramref name="millisecondsTimeOutInterval" /> è -1, l'intervallo di timeout della funzione non termina mai.</param>
      <param name="executeOnlyOnce">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <paramref name="waitObject" /> dopo la chiamata al delegato; <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</param>
      <returns>
        <see cref="T:System.Threading.RegisteredWaitHandle" /> che incapsula l'handle nativo.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="millisecondsTimeOutInterval" /> è minore di -1.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un valore intero con segno a 64 bit per il timeout in millisecondi.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> da registrare. Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Delegato <see cref="T:System.Threading.WaitOrTimerCallback" /> da chiamare quando il parametro <paramref name="waitObject" /> riceve un segnale.</param>
      <param name="state">Oggetto passato al delegato.</param>
      <param name="millisecondsTimeOutInterval">Timeout in millisecondi. Se il parametro <paramref name="millisecondsTimeOutInterval" /> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore. Se <paramref name="millisecondsTimeOutInterval" /> è -1, l'intervallo di timeout della funzione non termina mai.</param>
      <param name="executeOnlyOnce">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <paramref name="waitObject" /> dopo la chiamata al delegato; <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</param>
      <returns>
        <see cref="T:System.Threading.RegisteredWaitHandle" /> che incapsula l'handle nativo.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="millisecondsTimeOutInterval" /> è minore di -1.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un valore <see cref="T:System.TimeSpan" /> per il timeout.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> da registrare. Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Delegato <see cref="T:System.Threading.WaitOrTimerCallback" /> da chiamare quando il parametro <paramref name="waitObject" /> riceve un segnale.</param>
      <param name="state">Oggetto passato al delegato.</param>
      <param name="timeout">Il timeout rappresentato da un valore <see cref="T:System.TimeSpan" />. Se <paramref name="timeout" /> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore. Se <paramref name="timeout" /> è -1, l'intervallo di timeout della funzione non termina mai.</param>
      <param name="executeOnlyOnce">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <paramref name="waitObject" /> dopo la chiamata al delegato; <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</param>
      <returns>
        <see cref="T:System.Threading.RegisteredWaitHandle" /> che incapsula l'handle nativo.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="timeout" /> è minore di -1.</exception>
      <exception cref="T:System.NotSupportedException">Il parametro <paramref name="timeout" /> è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un intero senza segno a 32 bit per il timeout in millisecondi.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> da registrare. Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Delegato <see cref="T:System.Threading.WaitOrTimerCallback" /> da chiamare quando il parametro <paramref name="waitObject" /> riceve un segnale.</param>
      <param name="state">Oggetto passato al delegato.</param>
      <param name="millisecondsTimeOutInterval">Timeout in millisecondi. Se il parametro <paramref name="millisecondsTimeOutInterval" /> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore. Se <paramref name="millisecondsTimeOutInterval" /> è -1, l'intervallo di timeout della funzione non termina mai.</param>
      <param name="executeOnlyOnce">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <paramref name="waitObject" /> dopo la chiamata al delegato; <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</param>
      <returns>Oggetto <see cref="T:System.Threading.RegisteredWaitHandle" /> che può essere usato per annullare l'operazione di attesa registrata.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="millisecondsTimeOutInterval" /> è minore di -1.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
      <summary>Imposta il numero di richieste al pool di thread che possono essere attivate contemporaneamente. Tutte le richieste al di fuori di tale numero rimangono in coda fino a quando non diventano disponibili thread di pool di thread.</summary>
      <param name="workerThreads">Numero massimo di thread di lavoro nel pool di thread.</param>
      <param name="completionPortThreads">Numero massimo di thread I/O asincroni nel pool di thread.</param>
      <returns>
        <see langword="true" /> se la modifica ha esito positivo; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
      <summary>Imposta il numero minimo di thread che il pool di thread crea, man mano che vengono effettuate nuove richieste, prima di passare a un algoritmo per la gestione della creazione e dell'eliminazione del thread.</summary>
      <param name="workerThreads">Il numero minimo di thread di lavoro che vengono creati su richiesta dal pool di thread.</param>
      <param name="completionPortThreads">Il numero minimo di thread I/O asincroni che vengono creati su richiesta dal pool di thread.</param>
      <returns>
        <see langword="true" /> se la modifica ha esito positivo; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.ThreadCount">
      <summary>Ottiene il numero di thread del pool di thread attualmente esistenti.</summary>
      <returns>Numero di thread del pool di thread attualmente esistenti.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
      <summary>Accoda un'operazione di I/O sovrapposta per l'esecuzione.</summary>
      <param name="overlapped">Struttura <see cref="T:System.Threading.NativeOverlapped" /> da accodare.</param>
      <returns>
        <see langword="true" /> se l'accodamento dell'operazione a una porta di completamento di I/O è stato eseguito correttamente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.IThreadPoolWorkItem,System.Boolean)">
      <summary>Accoda l'oggetto elemento di lavoro specificato nel pool di thread.</summary>
      <param name="callBack">Elemento di lavoro da richiamare quando un thread nel pool di thread preleva l'elemento di lavoro.</param>
      <param name="preferLocal">
        <see langword="true" /> per preferire l'accodamento dell'elemento di lavoro in una coda vicino al thread corrente; <see langword="false" /> per preferire l'accodamento dell'elemento di lavoro nella coda condivisa del pool di thread.</param>
      <returns>
        <see langword="true" /> se il metodo viene eseguito correttamente. Viene generata l'eccezione <see cref="T:System.OutOfMemoryException" /> se non è stato possibile accodare l'elemento di lavoro.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">L'elemento di lavoro è un <see cref="T:System.Threading.Tasks.Task" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Non è stato possibile accodare l'elemento di lavoro.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>Accoda il delegato specificato al pool di thread, ma non propaga lo stack di chiamata nel thread di lavoro.</summary>
      <param name="callBack">Oggetto <see cref="T:System.Threading.WaitCallback" /> che rappresenta il delegato da richiamare quando un thread nel pool di thread sceglie l'elemento di lavoro.</param>
      <param name="state">Oggetto passato al delegato quando viene servito dal pool di thread.</param>
      <returns>
        <see langword="true" /> se il metodo viene eseguito correttamente. Viene generata l'eccezione <see cref="T:System.OutOfMemoryException" /> se non è stato possibile accodare l'elemento di lavoro.</returns>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
      <exception cref="T:System.ApplicationException">È stata rilevata una condizione di memoria insufficiente.</exception>
      <exception cref="T:System.OutOfMemoryException">Non è stato possibile accodare l'elemento di lavoro.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary>Accoda un metodo specificato da un delegato <see cref="T:System.Action`1" /> per l'esecuzione e specifica un oggetto che contiene i dati che dovranno essere usati dal metodo. Il metodo viene eseguito quando un thread del pool di thread diventa disponibile.</summary>
      <param name="callBack">Delegato che rappresenta il metodo da eseguire.</param>
      <param name="state">Oggetto contenente i dati che devono essere usati dal metodo.</param>
      <param name="preferLocal">
        <see langword="true" /> per preferire l'accodamento dell'elemento di lavoro in una coda vicino al thread corrente; <see langword="false" /> per preferire l'accodamento dell'elemento di lavoro nella coda condivisa del pool di thread.</param>
      <typeparam name="TState">Tipo degli elementi di <paramref name="state" />.</typeparam>
      <returns>
        <see langword="true" /> se il metodo viene accodato correttamente. Viene generata l'eccezione <see cref="T:System.NotSupportedException" /> se non è stato possibile accodare l'elemento di lavoro.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Non è stato possibile accodare l'elemento di lavoro.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>Registra un delegato per l'attesa di un <see cref="T:System.Threading.WaitHandle" />, specificando un intero con segno a 32 bit per il timeout in millisecondi. Questo metodo non propaga lo stack di chiamate al thread di lavoro.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> da registrare. Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Delegato da chiamare quando il parametro <paramref name="waitObject" /> riceve un segnale.</param>
      <param name="state">Oggetto passato al delegato.</param>
      <param name="millisecondsTimeOutInterval">Timeout in millisecondi. Se il parametro <paramref name="millisecondsTimeOutInterval" /> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore. Se <paramref name="millisecondsTimeOutInterval" /> è -1, l'intervallo di timeout della funzione non termina mai.</param>
      <param name="executeOnlyOnce">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <paramref name="waitObject" /> dopo la chiamata al delegato; <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</param>
      <returns>Oggetto <see cref="T:System.Threading.RegisteredWaitHandle" /> che può essere usato per annullare l'operazione di attesa registrata.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="millisecondsTimeOutInterval" /> è minore di -1.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un valore intero con segno a 64 bit per il timeout in millisecondi. Questo metodo non propaga lo stack di chiamate al thread di lavoro.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> da registrare. Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Delegato da chiamare quando il parametro <paramref name="waitObject" /> riceve un segnale.</param>
      <param name="state">Oggetto passato al delegato.</param>
      <param name="millisecondsTimeOutInterval">Timeout in millisecondi. Se il parametro <paramref name="millisecondsTimeOutInterval" /> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore. Se <paramref name="millisecondsTimeOutInterval" /> è -1, l'intervallo di timeout della funzione non termina mai.</param>
      <param name="executeOnlyOnce">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <paramref name="waitObject" /> dopo la chiamata al delegato; <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</param>
      <returns>Oggetto <see cref="T:System.Threading.RegisteredWaitHandle" /> che può essere usato per annullare l'operazione di attesa registrata.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="millisecondsTimeOutInterval" /> è minore di -1.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un valore <see cref="T:System.TimeSpan" /> per il timeout. Questo metodo non propaga lo stack di chiamate al thread di lavoro.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> da registrare. Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Delegato da chiamare quando il parametro <paramref name="waitObject" /> riceve un segnale.</param>
      <param name="state">Oggetto passato al delegato.</param>
      <param name="timeout">Il timeout rappresentato da un valore <see cref="T:System.TimeSpan" />. Se <paramref name="timeout" /> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore. Se <paramref name="timeout" /> è -1, l'intervallo di timeout della funzione non termina mai.</param>
      <param name="executeOnlyOnce">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <paramref name="waitObject" /> dopo la chiamata al delegato; <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</param>
      <returns>Oggetto <see cref="T:System.Threading.RegisteredWaitHandle" /> che può essere usato per annullare l'operazione di attesa registrata.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="timeout" /> è minore di -1.</exception>
      <exception cref="T:System.NotSupportedException">Il parametro <paramref name="timeout" /> è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un intero senza segno a 32 bit per il timeout in millisecondi. Questo metodo non propaga lo stack di chiamate al thread di lavoro.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> da registrare. Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Delegato da chiamare quando il parametro <paramref name="waitObject" /> riceve un segnale.</param>
      <param name="state">Oggetto passato al delegato.</param>
      <param name="millisecondsTimeOutInterval">Timeout in millisecondi. Se il parametro <paramref name="millisecondsTimeOutInterval" /> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore. Se <paramref name="millisecondsTimeOutInterval" /> è -1, l'intervallo di timeout della funzione non termina mai.</param>
      <param name="executeOnlyOnce">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <paramref name="waitObject" /> dopo la chiamata al delegato; <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</param>
      <returns>Oggetto <see cref="T:System.Threading.RegisteredWaitHandle" /> che può essere usato per annullare l'operazione di attesa registrata.</returns>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary>Rappresenta un metodo di callback che deve essere eseguito da un thread di pool di thread.</summary>
      <param name="state">Oggetto contenente informazioni che devono essere utilizzate dal metodo di callback.</param>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary>Rappresenta un metodo da chiamare quando <see cref="T:System.Threading.WaitHandle" /> riceve un segnale o esegue il timeout.</summary>
      <param name="state">Oggetto contenente informazioni che devono essere utilizzate dal metodo di callback ogni volta che viene eseguito.</param>
      <param name="timedOut">Il valore è <see langword="true" /> se <see cref="T:System.Threading.WaitHandle" /> ha eseguito il timeout; è <see langword="false" /> se ha ricevuto un segnale.</param>
    </member>
  </members>
</doc>
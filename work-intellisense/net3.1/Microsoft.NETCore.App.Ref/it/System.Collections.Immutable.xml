<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary>Rappresenta una raccolta non modificabile di coppie chiave/valore.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="TKey">Tipo delle chiavi nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori nel dizionario.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary>Aggiunge un elemento con la chiave e il valore specificati al dizionario.</summary>
      <param name="key">Chiave dell'elemento da aggiungere.</param>
      <param name="value">Valore dell'elemento da aggiungere.</param>
      <returns>Nuovo dizionario non modificabile che contiene la coppia chiave/valore aggiuntiva.</returns>
      <exception cref="T:System.ArgumentException">La chiave specificata esiste già nel dizionario, ma ha un valore diverso.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Aggiunge le coppie chiave/valore specificate al dizionario.</summary>
      <param name="pairs">Coppie chiave/valore da aggiungere.</param>
      <returns>Nuovo dizionario non modificabile che contiene le coppie chiave/valore aggiuntive.</returns>
      <exception cref="T:System.ArgumentException">Una delle chiavi specificate esiste già nel dizionario, ma ha un valore diverso.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary>Recupera un dizionario vuoto con lo stesso ordinamento e le stesse regole di confronto chiave/valore di questa istanza del dizionario.</summary>
      <returns>Dizionario vuoto con ordinamento e regole di confronto chiave/valore equivalenti.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina se il dizionario non modificabile contiene la coppia chiave/valore specificata.</summary>
      <param name="pair">Coppia chiave/valore da individuare.</param>
      <returns>
        <see langword="true" /> se la coppia chiave/valore specificata viene trovata nel dizionario; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary>Rimuove dal dizionario non modificabile l'elemento con la chiave specificata.</summary>
      <param name="key">Chiave dell'elemento da rimuovere.</param>
      <returns>Nuovo dizionario non modificabile con l'elemento specificato rimosso oppure questa istanza se la chiave specificata non viene trovata nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove dal dizionario non modificabile gli elementi con le chiavi specificate.</summary>
      <param name="keys">Chiavi degli elementi da rimuovere.</param>
      <returns>Nuovo dizionario non modificabile con le chiavi specificate rimosse oppure questa istanza se le chiavi specificate non vengono trovate nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary>Imposta la chiave e il valore specificati nel dizionario non modificabile, eventualmente sovrascrivendo un valore esistente per la chiave.</summary>
      <param name="key">Chiave della voce da aggiungere.</param>
      <param name="value">Valore di chiave da impostare.</param>
      <returns>Nuovo dizionario non modificabile che contiene la coppia chiave/valore specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Imposta le coppie chiave/valore specificate nel dizionario non modificabile, eventualmente sovrascrivendo i valori esistenti per le chiavi.</summary>
      <param name="items">Coppie chiave/valore da impostare nel dizionario. Se una qualsiasi delle chiavi esiste già nel dizionario, questo metodo sovrascriverà i valori precedenti.</param>
      <returns>Nuovo dizionario non modificabile che contiene le coppie chiave/valore specificate.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>Determina se il dizionario contiene una chiave specificata.</summary>
      <param name="equalKey">Chiave da ricercare.</param>
      <param name="actualKey">La chiave corrispondente presente nel dizionario, se trovata, oppure <c>equalkey</c> se non viene trovata alcuna corrispondenza.</param>
      <returns>
        <see langword="true" /> se viene trovata una corrispondenza per <paramref name="equalKey" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary>Rappresenta un elenco di elementi che non possono essere modificati.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T">Tipo di elementi contenuti nell'elenco.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary>Crea una copia dell'elenco e aggiunge l'oggetto specificato alla fine dell'elenco copiato.</summary>
      <param name="value">Oggetto da aggiungere all'elenco.</param>
      <returns>Nuovo elenco con l'oggetto aggiunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea una copia dell'elenco e aggiunge gli oggetti specificati alla fine dell'elenco copiato.</summary>
      <param name="items">Oggetti da aggiungere all'elenco.</param>
      <returns>Nuovo elenco con gli elementi aggiunti.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary>Crea un elenco con tutti gli elementi rimossi, ma con lo stesso ordinamento e la stessa semantica di ordinamento di questo elenco.</summary>
      <returns>Elenco vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'oggetto <see cref="T:System.Collections.Immutable.IImmutableList`1" /> che inizia in corrispondenza dell'indice specificato e contiene il numero di elementi specificato.</summary>
      <param name="item">Oggetto da individuare nella raccolta <see cref="T:System.Collections.Immutable.IImmutableList`1" />. Questo valore può essere null per i tipi di riferimento.</param>
      <param name="index">Indici iniziali a base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare per individuare <paramref name="item" />.</param>
      <returns>Indice in base zero della prima occorrenza di <paramref name="item" /> all'interno dell'intervallo di elementi dell'oggetto <see cref="T:System.Collections.Immutable.IImmutableList`1" /> che inizia da <paramref name="index" /> e contiene il numero di elementi corrispondente a <paramref name="count" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary>Inserisce l'elemento specificato nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero in corrispondenza del quale inserire il valore.</param>
      <param name="element">Oggetto da inserire.</param>
      <returns>Nuovo elenco non modificabile che include l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserisce gli elementi specificati nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero in corrispondenza del quale devono essere inseriti i nuovi elementi.</param>
      <param name="items">Elementi da inserire.</param>
      <returns>Nuovo elenco non modificabile che include gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi della classe <see cref="T:System.Collections.Immutable.IImmutableList`1" /> che contiene il numero di elementi specificato e termina in corrispondenza dell'indice specificato.</summary>
      <param name="item">Oggetto da individuare nell'elenco. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <param name="index">Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza di cui trovare una corrispondenza con <paramref name="item" />.</param>
      <returns>Restituisca il valore <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Rimuove la prima occorrenza di un oggetto specificato da questo elenco non modificabile.</summary>
      <param name="value">Oggetto da rimuovere dall'elenco.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare per individuare <paramref name="value" />.</param>
      <returns>Un nuovo elenco con l'oggetto specificato rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>Rimuove tutti gli elementi che corrispondono alle condizioni definite dal predicato specificato.</summary>
      <param name="match">Delegato che definisce le condizioni degli elementi da rimuovere.</param>
      <returns>Nuovo elenco non modificabile con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary>Rimuove l'elemento presente nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice dell'elemento da rimuovere.</param>
      <returns>Nuovo elenco con l'elemento rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Rimuove l'oggetto specificato dall'elenco.</summary>
      <param name="items">Oggetti da rimuovere dall'elenco.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare per determinare se <paramref name="items" /> corrisponde a qualsiasi oggetto nell'elenco.</param>
      <returns>Nuovo elenco non modificabile con gli oggetti specificati rimossi, se <paramref name="items" /> corrisponde agli oggetti nell'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Rimuove un intervallo di elementi da <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</summary>
      <param name="index">Indice iniziale in base zero dell'intervallo di elementi da rimuovere.</param>
      <param name="count">Numero di elementi da rimuovere.</param>
      <returns>Nuovo elenco non modificabile con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Restituisce un nuovo elenco con il primo elemento corrispondente nell'elenco sostituito con l'elemento specificato.</summary>
      <param name="oldValue">Elemento da sostituire.</param>
      <param name="newValue">Elemento con cui sostituire la prima occorrenza di <paramref name="oldValue" /></param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare per la corrispondenza a <paramref name="oldValue" />.</param>
      <returns>Nuovo elenco contenente <paramref name="newValue" />, anche se <paramref name="oldvalue" /> è uguale a <paramref name="newValue" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> non esiste nell'elenco.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary>Sostituisce un elemento in una determinata posizione nell'elenco con l'elemento specificato.</summary>
      <param name="index">Posizione nell'elenco dell'elemento da sostituire.</param>
      <param name="value">Elemento con cui sostituire l'elemento precedente.</param>
      <returns>Nuovo elenco che contiene il nuovo elemento, anche se l'elemento nella posizione specificata è uguale al nuovo elemento.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary>Rappresenta una raccolta di oggetti FIFO (First-In First-Out) non modificabile.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T">Tipo di elementi contenuti nella coda.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary>Restituisce una nuova coda con tutti gli elementi rimossi.</summary>
      <returns>Coda non modificabile vuota.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary>Rimuove il primo elemento dalla coda non modificabile e restituisce la nuova coda.</summary>
      <returns>Nuova coda non modificabile da cui è stato rimosso il primo elemento. Questo valore non è mai <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">La coda è vuota.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary>Aggiunge un elemento alla fine della coda non modificabile e restituisce la nuova coda.</summary>
      <param name="value">Elemento da aggiungere.</param>
      <returns>Nuova coda non modificabile a cui è stato aggiunto l'elemento specificato.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary>Ottiene un valore che indica se questa coda non modificabile è vuota o meno.</summary>
      <returns>
        <see langword="true" /> se la coda è vuota; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary>Restituisce l'elemento all'inizio della coda non modificabile senza rimuoverlo.</summary>
      <returns>Elemento all'inizio della coda.</returns>
      <exception cref="T:System.InvalidOperationException">La coda è vuota.</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary>Rappresenta un set di elementi che è possibile modificare solo creando una nuova istanza del set.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T">Tipo di elemento archiviato nel set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary>Aggiunge l'elemento specificato a questo set non modificabile.</summary>
      <param name="value">Elemento da aggiungere.</param>
      <returns>Nuovo set con l'elemento aggiunto o questo set se l'elemento è già presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary>Recupera un set non modificabile vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</summary>
      <returns>Set vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary>Determina se questo set non modificabile contiene un elemento specificato.</summary>
      <param name="value">Elemento da individuare nel set.</param>
      <returns>
        <see langword="true" /> se il set contiene il valore specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove gli elementi della raccolta specificata dal set non modificabile corrente.</summary>
      <param name="other">Raccolta di elementi da rimuovere da questo set.</param>
      <returns>Nuovo set con gli elementi rimossi oppure il set originale se nessuno degli elementi era presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un set non modificabile che contiene solo gli elementi esistenti in questo set e nel set specificato.</summary>
      <param name="other">Raccolta da confrontare con l'oggetto <see cref="T:System.Collections.Immutable.IImmutableSet`1" /> corrente.</param>
      <returns>Nuovo set non modificabile che contiene gli elementi esistenti in entrambi i set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set non modificabile corrente è un subset (strict) appropriato della raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un subset corretto della raccolta specificata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set non modificabile corrente è un superset (strict) appropriato della raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un superset corretto della raccolta specificata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set non modificabile corrente è un subset di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un subset della raccolta specificata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set non modificabile corrente è un superset di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un superset della raccolta specificata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set non modificabile corrente è sovrapposto alla raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente e la raccolta specificata condividono almeno un elemento comune; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary>Rimuove l'elemento specificato da questo set non modificabile.</summary>
      <param name="value">Elemento da rimuovere.</param>
      <returns>Nuovo set con l'elemento specificato rimosso oppure il set corrente se l'elemento non viene trovato nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set non modificabile corrente e la raccolta specificata contengono gli stessi elementi.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se i set sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un set non modificabile che contiene solo elementi presenti in tale set o nella raccolta specificata, ma non in entrambi.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>Nuovo set che contiene gli elementi presenti solo in tale set o nella raccolta specificata, ma non in entrambi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary>Determina se il set contiene un valore specificato.</summary>
      <param name="equalValue">Valore da cercare.</param>
      <param name="actualValue">Valore corrispondente del set, se trovato, o <c>equalvalue</c> se non esistono corrispondenze.</param>
      <returns>
        <see langword="true" /> se viene trovato un valore corrispondente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un nuovo set non modificabile che contiene tutti gli elementi presenti in tale set o nella raccolta specificata.</summary>
      <param name="other">Raccolta da cui aggiungere gli elementi.</param>
      <returns>Nuovo set non modificabile con gli elementi aggiunti oppure il set originale se tutti gli elementi erano già presenti nel set.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary>Rappresenta una raccolta LIFO (Last In, First Out) non modificabile.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T">Tipo di elementi presenti nello stack.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary>Rimuove tutti gli oggetti dallo stack non modificabile.</summary>
      <returns>Stack non modificabile vuoto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary>Ottiene un valore che indica se questo stack non modificabile è vuoto o meno.</summary>
      <returns>
        <see langword="true" /> se lo stack è vuoto; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary>Restituisce l'elemento all'inizio dello stack non modificabile senza rimuoverlo.</summary>
      <returns>Elemento all'inizio dello stack.</returns>
      <exception cref="T:System.InvalidOperationException">Lo stack è vuoto.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary>Rimuove l'elemento all'inizio dello stack non modificabile e restituisce il nuovo stack.</summary>
      <returns>Nuovo stack; mai <see langword="null" /></returns>
      <exception cref="T:System.InvalidOperationException">Lo stack è vuoto.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary>Inserisce un elemento all'inizio dello stack non modificabile e restituisce il nuovo stack.</summary>
      <param name="value">Elemento da inserire nello stack.</param>
      <returns>Nuovo stack.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary>Fornisce i metodi per creare una matrice non modificabile, ovvero che non può essere modificata una volta che è stata creata.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary>Cerca un elemento specificato nella matrice non modificabile ordinata usando l'operatore di confronto predefinito e restituisce l'indice in base zero dell'elemento, se trovato.</summary>
      <param name="array">Matrice ordinata in cui effettuare la ricerca.</param>
      <param name="value">Oggetto da cercare.</param>
      <typeparam name="T">Tipo di elemento memorizzato nella matrice.</typeparam>
      <returns>Indice in base zero dell'elemento nella matrice, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore di <paramref name="value" /> o, se non è disponibile alcun elemento maggiore, il complemento bit per bit di <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> non implementa <see cref="T:System.IComparable" /> o la ricerca rileva un elemento che non implementa <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary>Cerca un elemento specificato in una matrice non modificabile ordinata e restituisce l'indice in base zero dell'elemento, se trovato.</summary>
      <param name="array">Matrice ordinata in cui effettuare la ricerca.</param>
      <param name="value">Oggetto da cercare.</param>
      <param name="comparer">Implementazione dell'operatore di confronto da usare durante il confronto di elementi oppure null per usare l'operatore di confronto.</param>
      <typeparam name="T">Tipo di elemento memorizzato nella matrice.</typeparam>
      <returns>Indice in base zero dell'elemento nella matrice, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore di <paramref name="value" /> o, se non è disponibile alcun elemento maggiore, il complemento bit per bit di <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> ha un valore Null e <paramref name="value" /> non implementa <see cref="T:System.IComparable" /> o la ricerca rileva un elemento che non implementa <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary>Cerca un elemento specificato in una matrice non modificabile ordinata e restituisce l'indice in base zero dell'elemento, se trovato.</summary>
      <param name="array">Matrice ordinata in cui effettuare la ricerca.</param>
      <param name="index">Indice iniziale dell'intervallo in cui eseguire la ricerca.</param>
      <param name="length">Lunghezza dell'intervallo in cui eseguire la ricerca.</param>
      <param name="value">Oggetto da cercare.</param>
      <typeparam name="T">Tipo di elemento memorizzato nella matrice.</typeparam>
      <returns>Indice in base zero dell'elemento nella matrice, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore di <paramref name="value" /> o, se non è disponibile alcun elemento maggiore, il complemento bit per bit di <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> non implementa <see cref="T:System.IComparable" /> o la ricerca rileva un elemento che non implementa <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> e <paramref name="length" /> non specificano un intervallo valido in <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> è minore del limite inferiore di <paramref name="array" />.
-oppure-
<paramref name="length" /> è minore di zero.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>Cerca un elemento specificato in una matrice non modificabile ordinata e restituisce l'indice in base zero dell'elemento.</summary>
      <param name="array">Matrice ordinata in cui effettuare la ricerca.</param>
      <param name="index">Indice iniziale dell'intervallo in cui eseguire la ricerca.</param>
      <param name="length">Lunghezza dell'intervallo in cui eseguire la ricerca.</param>
      <param name="value">Oggetto da cercare.</param>
      <param name="comparer">Operatore di confronto da usare durante il confronto dell'eguaglianza degli elementi oppure <see langword="null" /> per usare l'operatore di confronto.</param>
      <typeparam name="T">Tipo di elemento memorizzato nella matrice.</typeparam>
      <returns>Indice in base zero dell'elemento nella matrice, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore di <paramref name="value" /> o, se non è disponibile alcun elemento maggiore, il complemento bit per bit di <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> ha un valore Null e <paramref name="value" /> non implementa <see cref="T:System.IComparable" /> o la ricerca rileva un elemento che non implementa <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> e <paramref name="length" /> non specificano un intervallo valido in <paramref name="array" />.
-oppure-
<paramref name="comparer" /> è <see langword="null" /> e <paramref name="value" /> è di un tipo non compatibile con gli elementi di <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> è minore del limite inferiore di <paramref name="array" />.
-oppure-
<paramref name="length" /> è minore di zero.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary>Crea una matrice non modificabile vuota.</summary>
      <typeparam name="T">Tipo di elementi memorizzati nella matrice.</typeparam>
      <returns>Matrice non modificabile vuota.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary>Crea una matrice non modificabile che contiene l'oggetto specificato.</summary>
      <param name="item">Oggetto usato per archiviare la matrice.</param>
      <typeparam name="T">Tipo di elementi memorizzati nella matrice.</typeparam>
      <returns>Matrice non modificabile che contiene l'oggetto specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary>Crea una matrice non modificabile che contiene gli oggetti specificati.</summary>
      <param name="item1">Primo oggetto usato per archiviare la matrice.</param>
      <param name="item2">Secondo oggetto usato per archiviare la matrice.</param>
      <typeparam name="T">Tipo di elementi memorizzati nella matrice.</typeparam>
      <returns>Matrice non modificabile che contiene gli oggetti specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary>Crea una matrice non modificabile che contiene gli oggetti specificati.</summary>
      <param name="item1">Primo oggetto usato per archiviare la matrice.</param>
      <param name="item2">Secondo oggetto usato per archiviare la matrice.</param>
      <param name="item3">Terzo oggetto usato per archiviare la matrice.</param>
      <typeparam name="T">Tipo di elementi memorizzati nella matrice.</typeparam>
      <returns>Matrice non modificabile che contiene gli oggetti specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary>Crea una matrice non modificabile che contiene gli oggetti specificati.</summary>
      <param name="item1">Primo oggetto usato per archiviare la matrice.</param>
      <param name="item2">Secondo oggetto usato per archiviare la matrice.</param>
      <param name="item3">Terzo oggetto usato per archiviare la matrice.</param>
      <param name="item4">Quarto oggetto usato per archiviare la matrice.</param>
      <typeparam name="T">Tipo di elementi memorizzati nella matrice.</typeparam>
      <returns>Matrice non modificabile che contiene gli oggetti specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary>Crea una matrice non modificabile dalla matrice di oggetti specificata.</summary>
      <param name="items">Matrice di oggetti con cui popolare la matrice.</param>
      <typeparam name="T">Tipo di elementi memorizzati nella matrice.</typeparam>
      <returns>Matrice non modificabile che contiene la matrice di elementi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary>Crea una matrice non modificabile con gli oggetti specificati di un'altra matrice.</summary>
      <param name="items">Matrice di origine degli oggetti.</param>
      <param name="start">Indice del primo elemento da copiare da <paramref name="items" />.</param>
      <param name="length">Numero di elementi da <paramref name="items" /> da includere in questa matrice non modificabile.</param>
      <typeparam name="T">Tipo di elementi memorizzati nella matrice.</typeparam>
      <returns>Matrice non modificabile che contiene gli oggetti specificati della matrice di origine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary>Crea una matrice non modificabile con gli oggetti specificati di un'altra matrice non modificabile.</summary>
      <param name="items">Matrice di origine degli oggetti.</param>
      <param name="start">Indice del primo elemento da copiare da <paramref name="items" />.</param>
      <param name="length">Numero di elementi da <paramref name="items" /> da includere in questa matrice non modificabile.</param>
      <typeparam name="T">Tipo di elementi memorizzati nella matrice.</typeparam>
      <returns>Matrice non modificabile che contiene gli oggetti specificati della matrice di origine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary>Crea una matrice modificabile che può essere convertita in <see cref="T:System.Collections.Immutable.ImmutableArray" /> senza allocare nuova memoria.</summary>
      <typeparam name="T">Tipo di elementi memorizzati nel generatore.</typeparam>
      <returns>Matrice modificabile del tipo specificato che può essere convertito in modo efficiente in una matrice non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary>Crea una matrice modificabile che può essere convertita in <see cref="T:System.Collections.Immutable.ImmutableArray" /> senza allocare nuova memoria.</summary>
      <param name="initialCapacity">Capacità iniziale del generatore.</param>
      <typeparam name="T">Tipo di elementi memorizzati nel generatore.</typeparam>
      <returns>Matrice modificabile del tipo specificato che può essere convertito in modo efficiente in una matrice non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea un nuovo oggetto <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> popolato con gli elementi specificati.</summary>
      <param name="items">Elementi da aggiungere alla matrice.</param>
      <typeparam name="T">Tipo di elemento memorizzato nella matrice.</typeparam>
      <returns>Matrice non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>Inizializza una nuova istanza dell'elemento struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">Matrice di origine con cui inizializzare la matrice risultante.</param>
      <param name="selector">Funzione da applicare a ogni elemento della matrice di origine.</param>
      <typeparam name="TSource" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary>Inizializza una nuova istanza dell'elemento struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">Matrice di origine con cui inizializzare la matrice risultante.</param>
      <param name="start">Indice del primo elemento nella matrice di origine da includere nella matrice risultante.</param>
      <param name="length">Numero di elementi della matrice di origine da includere nella matrice risultante.</param>
      <param name="selector">Funzione da applicare a ogni elemento della matrice di origine incluso nella matrice risultante.</param>
      <typeparam name="TSource" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary>Inizializza una nuova istanza dell'elemento struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">Matrice di origine con cui inizializzare la matrice risultante.</param>
      <param name="selector">Funzione da applicare a ogni elemento della matrice di origine.</param>
      <param name="arg">Argomento da passare alla funzione di mapping del selettore.</param>
      <typeparam name="TSource" />
      <typeparam name="TArg" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary>Inizializza una nuova istanza dell'elemento struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">Matrice di origine con cui inizializzare la matrice risultante.</param>
      <param name="start">Indice del primo elemento nella matrice di origine da includere nella matrice risultante.</param>
      <param name="length">Numero di elementi della matrice di origine da includere nella matrice risultante.</param>
      <param name="selector">Funzione da applicare a ogni elemento della matrice di origine incluso nella matrice risultante.</param>
      <param name="arg">Argomento da passare alla funzione di mapping del selettore.</param>
      <typeparam name="TSource" />
      <typeparam name="TArg" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea una matrice non modificabile dalla raccolta specificata.</summary>
      <param name="items">Raccolta di oggetti da copiare nella matrice non modificabile.</param>
      <typeparam name="TSource">Tipo di elementi contenuti in <paramref name="items" />.</typeparam>
      <returns>Matrice non modificabile che contiene la raccolta di oggetti specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Crea una matrice non modificabile dal contenuto corrente della matrice del generatore.</summary>
      <param name="builder">Generatore da cui creare la matrice non modificabile.</param>
      <typeparam name="TSource">Tipo di elementi contenuti nella matrice non modificabile.</typeparam>
      <returns>Restituisce una matrice non modificabile che contiene il contenuto corrente della matrice del generatore.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary>Rappresenta una matrice non modificabile, ovvero che non può essere modificata una volta che è stata creata.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T">Tipo di elemento memorizzato dalla matrice.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary>Restituisce una copia della matrice originale con l'elemento specificato aggiunto alla fine.</summary>
      <param name="item">Elemento da aggiungere alla fine della matrice.</param>
      <returns>Nuova matrice con l'elemento specificato aggiunto alla fine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Restituisce una copia della matrice originale con gli elementi specificati aggiunti alla fine della matrice.</summary>
      <param name="items">Elementi da aggiungere alla matrice.</param>
      <returns>Nuova matrice con gli elementi aggiunti.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Restituisce una copia della matrice originale con gli elementi specificati aggiunti alla fine della matrice.</summary>
      <param name="items">Elementi da aggiungere alla matrice.</param>
      <returns>Nuova matrice con gli elementi aggiunti.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary>Restituisce una nuova matrice non modificabile che contiene gli elementi di questa matrice di cui viene eseguito il cast su un tipo diverso.</summary>
      <typeparam name="TOther">Tipo di elemento della matrice da restituire.</typeparam>
      <returns>Matrice non modificabile che contiene gli elementi di questa matrice di cui viene eseguito il cast su un tipo diverso. Se il cast non riesce, restituisce una matrice la cui proprietà <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> restituisce <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary>Crea una nuova area di memoria di sola lettura su questa matrice non modificabile.</summary>
      <returns>Rappresentazione in memoria di sola lettura di questa matrice non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary>Crea un nuovo intervallo di sola lettura per la matrice non modificabile.</summary>
      <returns>Rappresentazione dell'intervallo di sola lettura di questa matrice non modificabile.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary>Funzione di accesso alla matrice scrivibile che può essere convertita in un'istanza <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> senza allocare memoria aggiuntiva.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary>Aggiunge l'elemento specificato alla matrice.</summary>
      <param name="item">Oggetto da aggiungere alla matrice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary>Aggiunge gli elementi specificati alla fine della matrice.</summary>
      <param name="items">Elementi da aggiungere alla matrice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary>Aggiunge gli elementi specificati alla fine della matrice.</summary>
      <param name="items">Elementi da aggiungere alla matrice.</param>
      <param name="length">Numero di elementi dalla matrice di origine da aggiungere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Aggiunge gli elementi specificati alla fine della matrice.</summary>
      <param name="items">Elementi da aggiungere alla matrice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Aggiunge gli elementi specificati alla fine della matrice.</summary>
      <param name="items">Elementi da aggiungere alla matrice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary>Aggiunge gli elementi specificati alla fine della matrice.</summary>
      <param name="items">Elementi da aggiungere alla matrice.</param>
      <param name="length">Numero di elementi dalla matrice di origine da aggiungere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary>Aggiunge gli elementi specificati alla fine della matrice.</summary>
      <param name="items">Elementi da aggiungere alla matrice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary>Aggiunge alla fine della matrice gli elementi specificati che derivano dal tipo attualmente nella matrice.</summary>
      <param name="items">Elementi da aggiungere alla fine della matrice.</param>
      <typeparam name="TDerived">Tipo che deriva dal tipo di elemento già nella matrice.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Aggiunge alla fine della matrice gli elementi specificati che derivano dal tipo attualmente nella matrice.</summary>
      <param name="items">Elementi da aggiungere alla fine della matrice.</param>
      <typeparam name="TDerived">Tipo che deriva dal tipo di elemento già nella matrice.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Aggiunge alla fine della matrice gli elementi specificati che derivano dal tipo attualmente nella matrice.</summary>
      <param name="items">Elementi da aggiungere alla fine della matrice.</param>
      <typeparam name="TDerived">Tipo che deriva dal tipo di elemento già nella matrice.</typeparam>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary>Ottiene o imposta la lunghezza della matrice interna. Quando è impostata, la matrice interna viene riallocata alla capacità specificata se non corrisponde già alla lunghezza specificata.</summary>
      <returns>Lunghezza della matrice interna.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary>Rimuove tutti gli elementi dalla matrice.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary>Stabilisce se la matrice contiene un valore specifico.</summary>
      <param name="item">Oggetto da individuare nella matrice.</param>
      <returns>
        <see langword="true" /> se l'oggetto viene trovato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>Copia il contenuto corrente in una matrice specificata.</summary>
      <param name="array">Matrice in cui effettuare la copia.</param>
      <param name="index">Indice in corrispondenza del quale iniziare l'operazione di copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary>Ottiene o imposta il numero di elementi della matrice.</summary>
      <returns>Numero di elementi nella matrice.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary>Ottiene un oggetto che può essere usato per scorrere la raccolta.</summary>
      <returns>Oggetto che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary>Determina l'indice di un elemento specifico nella raccolta.</summary>
      <param name="item">Elemento da individuare nella raccolta.</param>
      <returns>Indice di <paramref name="item" /> se è stato trovato nell'elenco; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary>Determina l'indice dell'elemento specificato.</summary>
      <param name="item">Elemento da individuare nella raccolta.</param>
      <param name="startIndex">Posizione iniziale della ricerca.</param>
      <returns>Indice di <paramref name="item" /> se è stato trovato nell'elenco; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Determina l'indice dell'elemento specificato.</summary>
      <param name="item">Elemento da individuare nella raccolta.</param>
      <param name="startIndex">Posizione iniziale della ricerca.</param>
      <param name="count">Numero di elementi in cui eseguire la ricerca.</param>
      <returns>Indice di <paramref name="item" /> se è stato trovato nell'elenco; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Determina l'indice per l'elemento specificato.</summary>
      <param name="item">Elemento da individuare nella raccolta.</param>
      <param name="startIndex">Indice in corrispondenza del quale iniziare la ricerca.</param>
      <param name="count">Posizione iniziale della ricerca.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca</param>
      <returns>Indice di <paramref name="item" /> se è stato trovato nell'elenco; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary>Inserisce un elemento nella matrice in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero in corrispondenza del quale inserire l'elemento.</param>
      <param name="item">Oggetto da inserire nella matrice.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary>Ottiene o imposta l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice dell'elemento da ottenere o impostare.</param>
      <returns>Elemento in corrispondenza dell'indice specificato.</returns>
      <exception cref="T:System.IndexOutOfRangeException">L'indice specificato non è compreso nella matrice.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary>Ottiene un riferimento di sola lettura all'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice dell'elemento.</param>
      <returns>Riferimento di sola lettura all'elemento in corrispondenza dell'indice specificato.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> è maggiore o uguale al numero di matrici.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary>Determina l'indice in base zero dell'ultima occorrenza dell'elemento specificato in questa matrice.</summary>
      <param name="item">Elemento da cercare.</param>
      <returns>Indice in base zero in cui è stato trovato l'elemento oppure -1 se non è stato trovato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>Determina l'indice in base zero dell'ultima occorrenza dell'elemento specificato in questa matrice.</summary>
      <param name="item">Elemento da cercare.</param>
      <param name="startIndex">Posizione iniziale della ricerca.</param>
      <returns>Indice in base zero della matrice in cui è stato trovato l'elemento oppure -1 se non è stato trovato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Determina l'indice in base zero dell'ultima occorrenza dell'elemento specificato in questa matrice.</summary>
      <param name="item">Elemento da cercare.</param>
      <param name="startIndex">Posizione iniziale della ricerca.</param>
      <param name="count">Numero di elementi in cui eseguire la ricerca.</param>
      <returns>Indice in base zero della matrice in cui è stato trovato l'elemento oppure -1 se non è stato trovato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Determina l'indice in base zero dell'ultima occorrenza dell'elemento specificato in questa matrice.</summary>
      <param name="item">Elemento da cercare.</param>
      <param name="startIndex">Posizione iniziale della ricerca.</param>
      <param name="count">Numero di elementi in cui eseguire la ricerca.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns>Indice in base zero della matrice in cui è stato trovato l'elemento oppure -1 se non è stato trovato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary>Estrae la matrice interna come <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> e la sostituisce con una matrice di lunghezza zero.</summary>
      <exception cref="T:System.InvalidOperationException">Quando <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> non è uguale a <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary>Rimuove l'elemento specificato.</summary>
      <param name="element">Elemento da rimuovere.</param>
      <returns>
        <see langword="true" /> se <paramref name="element" /> è stato trovato e rimosso; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary>Rimuove l'elemento dalla matrice in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero dell'elemento da rimuovere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary>Inverte l'ordine degli elementi nella raccolta.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary>Ordina il contenuto della matrice.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Ordina il contenuto della matrice.</summary>
      <param name="comparer">Operatore di confronto da usare per l'ordinamento. Se l'operatore di confronto è <see langword="null" />, viene usato l'operatore di confronto predefinito per il tipo di elementi nella matrice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary>Ordina gli elementi nell'intera matrice usando l'elemento <see cref="T:System.Comparison`1" /> specificato.</summary>
      <param name="comparison">Oggetto <see cref="T:System.Comparison`1" /> da usare quando si confrontano gli elementi.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Ordina il contenuto della matrice.</summary>
      <param name="index">Indice iniziale per l'ordinamento.</param>
      <param name="count">Numero di elementi da includere nell'ordinamento.</param>
      <param name="comparer">Operatore di confronto da usare per l'ordinamento. Se l'operatore di confronto è <see langword="null" />, viene usato l'operatore di confronto predefinito per il tipo di elementi nella matrice.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns>
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Restituisce un enumeratore che scorre la matrice.</summary>
      <returns>Enumeratore che scorre la matrice.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che scorre la matrice.</summary>
      <returns>Enumeratore che scorre la matrice.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary>Crea una nuova matrice con il contenuto corrente di questo <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns>Nuova matrice con il contenuto di questo <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary>Restituisce una matrice non modificabile che contiene il contenuto corrente di questo <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns>Matrice non modificabile che contiene il contenuto corrente di questo <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary>Inizializza una nuova istanza dello struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> eseguendo il cast della matrice sottostante a una matrice di tipo <typeparamref name="TOther" />.</summary>
      <typeparam name="TOther" />
      <exception cref="T:System.InvalidCastException">Generata se il cast non è valido.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Inizializza una nuova istanza dello struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> in base al contenuto di un'istanza esistente, consentendo un cast statico covariante per riutilizzare in modo efficiente la matrice esistente.</summary>
      <param name="items">Matrice con cui inizializzare la matrice. Non viene effettuata alcuna copia.</param>
      <typeparam name="TDerived" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary>Restituisce una matrice con tutti gli elementi rimossi.</summary>
      <returns>Matrice con tutti gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary>Determina se l'elemento specificato esiste nella matrice.</summary>
      <param name="item">Elemento da cercare.</param>
      <returns>
        <see langword="true" /> se l'elemento specificato è stato individuato nella matrice; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary>Copia il contenuto di questa matrice nella matrice specificata.</summary>
      <param name="destination">Matrice in cui effettuare la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary>Copia il contenuto di questa matrice nella matrice specificata, a partire dall'indice di destinazione specificato.</summary>
      <param name="destination">Matrice in cui effettuare la copia.</param>
      <param name="destinationIndex">Indice in <paramref name="array" /> in corrispondenza del quale ha inizio la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copia gli elementi specificati in questa matrice nella matrice specificata in corrispondenza dell'indice iniziale specificato.</summary>
      <param name="sourceIndex">Indice di questa matrice da cui ha inizio la copia.</param>
      <param name="destination">Matrice in cui effettuare la copia.</param>
      <param name="destinationIndex">Indice in <paramref name="array" /> in corrispondenza del quale ha inizio la copia.</param>
      <param name="length">Numero di elementi da copiare da questa matrice.</param>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary>Ottiene una matrice non modificabile vuota.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary>Enumeratore di matrice.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary>Ottiene l'elemento corrente.</summary>
      <returns>Elemento corrente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary>Sposta al valore successivo nella matrice.</summary>
      <returns>
        <see langword="true" /> se esiste un altro elemento nella matrice; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Indica se la matrice specificata è uguale a questa matrice.</summary>
      <param name="other">Oggetto da confrontare con l'oggetto corrente.</param>
      <returns>
        <see langword="true" /> se <paramref name="other" /> è uguale a questa matrice; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary>Determina se questa matrice è uguale all'oggetto specificato.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> da confrontare con questa matrice.</param>
      <returns>
        <see langword="true" /> se questa matrice è uguale a <paramref name="obj" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere il contenuto della matrice.</summary>
      <returns>Enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary>Restituisce un codice hash per questa istanza.</summary>
      <returns>Codice hash per questa istanza, adatto per l'utilizzo in algoritmi hash e in strutture di dati, ad esempio una tabella hash.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary>Cerca l'elemento specificato nella matrice.</summary>
      <param name="item">Elemento da cercare.</param>
      <returns>Posizione dell'indice in base zero dell'elemento se viene trovato; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary>Cerca l'elemento specificato nella matrice.</summary>
      <param name="item">Elemento da cercare.</param>
      <param name="startIndex">Indice in corrispondenza del quale iniziare la ricerca.</param>
      <returns>Posizione dell'indice in base zero dell'elemento se viene trovato; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Cerca l'elemento specificato nella matrice.</summary>
      <param name="item">Elemento da cercare.</param>
      <param name="startIndex">Indice in corrispondenza del quale iniziare la ricerca.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns>Posizione dell'indice in base zero dell'elemento se viene trovato; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Cerca l'elemento specificato nella matrice.</summary>
      <param name="item">Elemento da cercare.</param>
      <param name="startIndex">Indice in corrispondenza del quale iniziare la ricerca.</param>
      <param name="count">Numero di elementi in cui eseguire la ricerca.</param>
      <returns>Posizione dell'indice in base zero dell'elemento se viene trovato; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Cerca l'elemento specificato nella matrice.</summary>
      <param name="item">Elemento da cercare.</param>
      <param name="startIndex">Indice in corrispondenza del quale iniziare la ricerca.</param>
      <param name="count">Numero di elementi in cui eseguire la ricerca.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns>Posizione dell'indice in base zero dell'elemento se viene trovato; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary>Restituisce una nuova matrice con il valore specificato inserito nella posizione specificata.</summary>
      <param name="index">Indice in base zero nella matrice in corrispondenza del quale deve essere aggiunto il nuovo elemento.</param>
      <param name="item">Elemento da inserire all'inizio della matrice.</param>
      <returns>Nuova matrice con l'elemento inserito in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserisce i valori specificati in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in corrispondenza del quale inserire il valore.</param>
      <param name="items">Elementi da inserire.</param>
      <returns>Nuova matrice non modificabile con gli elementi inseriti in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Inserisce i valori specificati in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in corrispondenza del quale inserire il valore.</param>
      <param name="items">Elementi da inserire.</param>
      <returns>Nuova matrice non modificabile con gli elementi inseriti in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary>Ottiene un valore che indica se questa matrice è stata dichiarata ma non inizializzata.</summary>
      <returns>
        <see langword="true" /> se <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> è <see langword="null" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary>Ottiene un valore che indica se questa matrice <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> è vuota o non inizializzata.</summary>
      <returns>
        <see langword="true" /> se il <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> è <see langword="null" /> o <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary>Ottiene un valore che indica se questa matrice <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> è vuota.</summary>
      <returns>
        <see langword="true" /> se l'oggetto <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> è vuoto; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary>Ottiene l'elemento in corrispondenza dell'indice specificato nella matrice non modificabile.</summary>
      <param name="index">Indice in base zero dell'elemento da ottenere.</param>
      <returns>Elemento in corrispondenza dell'indice specificato nella matrice non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary>Ottiene un riferimento di sola lettura all'elemento in corrispondenza dell'<paramref name="index" /> specificato nell'elenco di sola lettura.</summary>
      <param name="index">Indice in base zero dell'elemento a cui ottenere un riferimento.</param>
      <returns>Riferimento di sola lettura all'elemento in corrispondenza dell'<paramref name="index" /> specificato nell'elenco di sola lettura.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary>Cerca l'elemento specificato nella matrice, a partire dalla fine della matrice.</summary>
      <param name="item">Elemento da cercare.</param>
      <returns>Indice in base zero della matrice in cui è stato trovato l'elemento oppure -1 se non è stato trovato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary>Cerca l'elemento specificato nella matrice, a partire dalla fine della matrice.</summary>
      <param name="item">Elemento da cercare.</param>
      <param name="startIndex">Indice in corrispondenza del quale iniziare la ricerca.</param>
      <returns>Indice in base zero della matrice in cui è stato trovato l'elemento oppure -1 se non è stato trovato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Cerca l'elemento specificato nella matrice, a partire dalla fine della matrice.</summary>
      <param name="item">Elemento da cercare.</param>
      <param name="startIndex">Indice in corrispondenza del quale iniziare la ricerca.</param>
      <param name="count">Numero di elementi in cui eseguire la ricerca.</param>
      <returns>Indice in base zero della matrice in cui è stato trovato l'elemento oppure -1 se non è stato trovato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Cerca l'elemento specificato nella matrice, a partire dalla fine della matrice.</summary>
      <param name="item">Elemento da cercare.</param>
      <param name="startIndex">Indice in corrispondenza del quale iniziare la ricerca.</param>
      <param name="count">Numero di elementi in cui eseguire la ricerca.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns>Indice in base zero della matrice in cui è stato trovato l'elemento oppure -1 se non è stato trovato.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary>Ottiene il numero di elementi nella matrice.</summary>
      <returns>Numero di elementi nella matrice</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary>Filtra gli elementi di questa matrice in base a quelli assegnabili al tipo specificato.</summary>
      <typeparam name="TResult">Il tipo in base al quale filtrare gli elementi della sequenza.</typeparam>
      <returns>Oggetto <see cref="T:System.Collections.IEnumerable" /> che contiene elementi della sequenza di input del tipo <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Restituisce un valore che indica se due matrici sono uguali.</summary>
      <param name="left">Matrice a sinistra dell'operatore.</param>
      <param name="right">Matrice a destra dell'operatore.</param>
      <returns>
        <see langword="true" /> se le matrici sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>Restituisce un valore che indica se due matrici sono uguali.</summary>
      <param name="left">Matrice a sinistra dell'operatore.</param>
      <param name="right">Matrice a destra dell'operatore.</param>
      <returns>
        <see langword="true" /> se le matrici sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Restituisce un valore che indica se due matrici non sono uguali.</summary>
      <param name="left">Matrice a sinistra dell'operatore.</param>
      <param name="right">Matrice a destra dell'operatore.</param>
      <returns>
        <see langword="true" /> se le matrici non sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>Verifica la disuguaglianza tra due matrici.</summary>
      <param name="left">Oggetto a sinistra dell'operatore.</param>
      <param name="right">Oggetto a destra dell'operatore.</param>
      <returns>
        <see langword="true" /> se le due matrici non sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary>Restituisce una matrice con la prima occorrenza dell'elemento specificato rimosso dalla matrice. Se non viene trovata alcuna corrispondenza, viene restituita la matrice corrente.</summary>
      <param name="item">Elemento da rimuovere.</param>
      <returns>Nuova matrice con l'elemento rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Restituisce una matrice con la prima occorrenza dell'elemento specificato rimosso dalla matrice.
Se non viene trovata alcuna corrispondenza, viene restituita la matrice corrente.</summary>
      <param name="item">Elemento da rimuovere.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns>Nuova matrice con l'elemento specificato rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary>Rimuove della matrice tutti gli elementi che soddisfano la condizione specificata.</summary>
      <param name="match">Delegato che definisce le condizioni degli elementi da rimuovere.</param>
      <returns>Nuova matrice con gli elementi che soddisfano la condizione specificata rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary>Restituisce una matrice con l'elemento in corrispondenza della posizione specificata rimosso.</summary>
      <param name="index">Indice in base zero dell'elemento da rimuovere dalla matrice restituita.</param>
      <returns>Nuova matrice con l'elemento in corrispondenza dell'indice specificato rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove da questa matrice gli elementi specificati.</summary>
      <param name="items">Elementi da rimuovere se vengono trovate corrispondenze in questo elenco.</param>
      <returns>Nuova matrice con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Rimuove da questa matrice gli elementi specificati.</summary>
      <param name="items">Elementi da rimuovere se vengono trovate corrispondenze in questo elenco.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns>Nuova matrice con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Rimuove da questo elenco i valori specificati.</summary>
      <param name="items">Elementi da rimuovere se vengono trovate corrispondenze in questo elenco.</param>
      <returns>Nuovo elenco con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Rimuove da questo elenco gli elementi specificati.</summary>
      <param name="items">Elementi da rimuovere se vengono trovate corrispondenze in questo elenco.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns>Nuova matrice con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Restituisce una matrice con gli elementi in corrispondenza della posizione specificata rimossi.</summary>
      <param name="index">Indice in base zero dell'elemento iniziale da rimuovere dalla matrice.</param>
      <param name="length">Numero di elementi da rimuovere dalla matrice.</param>
      <returns>Nuova matrice con gli elementi specificati rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary>Individua il primo elemento nella matrice uguale al valore specificato e sostituisce il valore con il nuovo valore specificato.</summary>
      <param name="oldValue">Valore da trovare e sostituire nella matrice.</param>
      <param name="newValue">Valore con cui sostituire <c>oldvalue</c>.</param>
      <returns>Nuova matrice che contiene <paramref name="newValue" /> anche se i valori nuovi e precedenti sono uguali.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> non è presente nella matrice.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Individua il primo elemento nella matrice uguale al valore specificato e sostituisce il valore con il nuovo valore specificato.</summary>
      <param name="oldValue">Valore da trovare e sostituire nella matrice.</param>
      <param name="newValue">Valore con cui sostituire <c>oldvalue</c>.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare per confrontare i valori.</param>
      <returns>Nuova matrice che contiene <paramref name="newValue" /> anche se i valori nuovi e precedenti sono uguali.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> non è presente nella matrice.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary>Sostituisce l'elemento in corrispondenza dell'indice specificato con l'elemento specificato.</summary>
      <param name="index">Indice dell'elemento da sostituire.</param>
      <param name="item">Elemento da aggiungere all'elenco.</param>
      <returns>Nuova matrice che contiene <paramref name="item" /> in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary>Ordina gli elementi della matrice non modificabile usando l'operatore di confronto predefinito.</summary>
      <returns>Nuova matrice non modificabile che contiene gli elementi di questa matrice, nell'ordine specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Ordina gli elementi della matrice non modificabile usando l'operatore di confronto specificato.</summary>
      <param name="comparer">Implementazione da usare durante il confronto di elementi oppure <see langword="null" /> per usare l'operatore di confronto predefinito</param>
      <returns>Nuova matrice non modificabile che contiene gli elementi di questa matrice, nell'ordine specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary>Ordina gli elementi in <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> usando l'elemento <see cref="T:System.Comparison`1" /> specificato.</summary>
      <param name="comparison">Oggetto <see cref="T:System.Comparison`1" /> da usare quando si confrontano gli elementi.</param>
      <returns>Elenco ordinato.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Ordina gli elementi specificati della matrice non modificabile usando l'operatore di confronto specificato.</summary>
      <param name="index">Indice del primo elemento da ordinare.</param>
      <param name="count">Numero di elementi da includere nell'ordinamento.</param>
      <param name="comparer">Implementazione da usare durante il confronto di elementi oppure <see langword="null" /> per usare l'operatore di confronto predefinito</param>
      <returns>Nuova matrice non modificabile che contiene gli elementi di questa matrice, nell'ordine specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="item">Elemento da aggiungere alla fine della matrice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary>Ottiene il numero di matrici nella raccolta.</summary>
      <exception cref="T:System.InvalidOperationException">Generata se la proprietà <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> restituisce true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ottiene un valore che indica se l'istanza è di sola lettura.</summary>
      <returns>
        <see langword="true" /> se l'istanza è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="item">Oggetto da rimuovere dalla matrice.</param>
      <returns>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Restituisce un enumeratore che scorre la matrice.</summary>
      <returns>Enumeratore che può essere usato per scorrere la matrice.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="index">Indice della posizione in cui inserire l'elemento.</param>
      <param name="item">Elemento da inserire.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Ottiene o imposta l'elemento in corrispondenza dell'indice specificato nell'elenco di sola lettura.</summary>
      <param name="index">Indice in base zero dell'elemento da ottenere.</param>
      <returns>Elemento in corrispondenza dell'indice specificato nell'elenco di sola lettura.</returns>
      <exception cref="T:System.NotSupportedException">Generata sempre da set.</exception>
      <exception cref="T:System.InvalidOperationException">Generata se la proprietà <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> restituisce true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="index">Indice.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary>Ottiene il numero di matrici nella raccolta.</summary>
      <exception cref="T:System.InvalidOperationException">Generata se la proprietà <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> restituisce true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>Ottiene l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice.</param>
      <returns>Elemento.</returns>
      <exception cref="T:System.InvalidOperationException">Generata se la proprietà <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> restituisce true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia questa matrice in un'altra matrice, a partire dall'indice specificato.</summary>
      <param name="array">Matrice in cui copiare questa matrice.</param>
      <param name="index">Indice nella matrice di destinazione in corrispondenza del quale iniziare l'operazione di copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary>Ottiene la dimensione della matrice.</summary>
      <exception cref="T:System.InvalidOperationException">Generata se la proprietà <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> restituisce true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary>Vedere l'interfaccia <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary>Ottiene la radice di sincronizzazione.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la matrice non modificabile.</summary>
      <returns>Enumeratore che consente di scorrere la matrice non modificabile.</returns>
      <exception cref="T:System.InvalidOperationException">La proprietà <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> restituisce <see langword="true" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="value">Valore da aggiungere alla matrice.</param>
      <returns>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</returns>
      <exception cref="T:System.NotSupportedException">Generata in tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <exception cref="T:System.NotSupportedException">Generata in tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="value">Valore da controllare.</param>
      <returns>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Ottiene il valore in corrispondenza dell'indice specificato.</summary>
      <param name="value">Valore di cui restituire l'indice.</param>
      <returns>Valore dell'elemento in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="index">Indice che indica dove inserire l'elemento.</param>
      <param name="value">Valore da inserire.</param>
      <exception cref="T:System.NotSupportedException">Generata in tutti i casi.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary>Ottiene un valore che indica se l'istanza ha una dimensione fissa.</summary>
      <returns>
        <see langword="true" /> se l'istanza è di dimensioni fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary>Ottiene un valore che indica se l'istanza è di sola lettura.</summary>
      <returns>
        <see langword="true" /> se l'istanza è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary>Ottiene o imposta l'oggetto <see cref="T:System.Object" /> in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice.</param>
      <returns>Oggetto in corrispondenza dell'indice specificato.</returns>
      <exception cref="T:System.NotSupportedException">Generata sempre da set.</exception>
      <exception cref="T:System.InvalidOperationException">Generata se la proprietà <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> restituisce true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="value">Valore da rimuovere dalla matrice.</param>
      <exception cref="T:System.NotSupportedException">Generata in tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="index">Indice dell'elemento da rimuovere.</param>
      <exception cref="T:System.NotSupportedException">Generata in tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>Restituisce una copia della matrice originale con l'elemento specificato aggiunto alla fine.</summary>
      <param name="value">Valore da aggiungere alla fine della matrice.</param>
      <returns>Nuova matrice con l'elemento specificato aggiunto alla fine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Restituisce una copia della matrice originale con gli elementi specificati aggiunti alla fine della matrice.</summary>
      <param name="items">Elementi da aggiungere alla fine della matrice.</param>
      <returns>Nuova matrice con gli elementi aggiunti alla fine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>Restituisce una matrice con tutti gli elementi rimossi.</summary>
      <returns>Matrice con tutti gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>Restituisce una nuova matrice con il valore specificato inserito nella posizione specificata.</summary>
      <param name="index">Indice in base zero nella matrice in corrispondenza del quale deve essere aggiunto il nuovo elemento.</param>
      <param name="element">Elemento da inserire all'inizio della matrice.</param>
      <returns>Nuova matrice con il valore specificato inserito.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserisce i valori specificati in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in corrispondenza del quale inserire il valore.</param>
      <param name="items">Elementi da inserire.</param>
      <returns>Nuova matrice con i valori specificati rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Restituisce una matrice con la prima occorrenza dell'elemento specificato rimosso dalla matrice; se non viene trovata alcuna corrispondenza, viene restituita la matrice corrente.</summary>
      <param name="value">Valore da rimuovere dalla matrice.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns>Nuova matrice con il valore rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>Rimuove della matrice tutti gli elementi che soddisfano la condizione specificata.</summary>
      <param name="match">Delegato che definisce le condizioni degli elementi da rimuovere.</param>
      <returns>Nuova matrice con gli elementi che soddisfano la condizione specificata rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>Restituisce una matrice con l'elemento in corrispondenza della posizione specificata rimosso.</summary>
      <param name="index">Indice in base zero dell'elemento da rimuovere dalla matrice restituita.</param>
      <returns>Nuova matrice con l'elemento specificato rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Rimuove da questa matrice gli elementi specificati.</summary>
      <param name="items">Elementi da rimuovere se vengono trovate corrispondenze in questo elenco.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns>Nuova matrice con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>Restituisce una matrice con gli elementi in corrispondenza della posizione specificata rimossi.</summary>
      <param name="index">Indice in base zero dell'elemento iniziale da rimuovere dalla matrice.</param>
      <param name="count">Numero di elementi da rimuovere dalla matrice.</param>
      <returns>Nuova matrice con gli elementi specificati rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Individua il primo elemento nella matrice uguale al valore specificato e sostituisce il valore con il nuovo valore specificato.</summary>
      <param name="oldValue">Valore da trovare e sostituire nella matrice.</param>
      <param name="newValue">Valore con cui sostituire <c>oldvalue</c>.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare per confrontare i valori.</param>
      <returns>Nuova matrice che contiene <paramref name="newValue" /> anche se i valori nuovi e precedenti sono uguali.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> non è presente nella matrice.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>Sostituisce l'elemento in corrispondenza dell'indice specificato con l'elemento specificato.</summary>
      <param name="index">Indice dell'elemento da sostituire.</param>
      <param name="value">Valore da aggiungere all'elenco.</param>
      <returns>Nuova matrice che contiene <paramref name="item" /> in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Determina se l'elemento raccolta corrente precede, è nella stessa posizione o segue un altro elemento nell'ordinamento.</summary>
      <param name="other">Elemento da confrontare con l'istanza corrente.</param>
      <param name="comparer">Oggetto usato per confrontare i membri della matrice corrente con i membri corrispondenti di un'altra matrice.</param>
      <returns>Intero che indica se l'elemento corrente precede, è nella stessa posizione o segue l'altro elemento.</returns>
      <exception cref="T:System.ArgumentException">Le matrici non hanno la stessa lunghezza.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Determina se questa matrice è uguale alla matrice specificata dal punto di vista strutturale.</summary>
      <param name="other">Matrice da confrontare con l'istanza corrente.</param>
      <param name="comparer">Oggetto che determina se l'istanza corrente e l'altra sono uguali dal punto di vista strutturale.</param>
      <returns>
        <see langword="true" /> se le due matrici sono uguali dal punto di vista strutturale; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Restituisce un codice hash per l'istanza corrente.</summary>
      <param name="comparer">Oggetto che calcola il codice hash dell'oggetto corrente.</param>
      <returns>Codice hash per l'istanza corrente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary>Crea una matrice modificabile con lo stesso contenuto di questa matrice e che può essere modificata in modo efficiente tra più operazioni tramite interfacce standard modificabili.</summary>
      <returns>Nuovo generatore con lo stesso contenuto di questa matrice.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary>Fornisce un set di metodi di inizializzazione per le istanze della classe <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" />.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>Determina se il dizionario non modificabile specificato contiene la coppia chiave/valore specificata.</summary>
      <param name="map">Dizionario non modificabile in cui eseguire la ricerca.</param>
      <param name="key">Chiave da individuare nel dizionario non modificabile.</param>
      <param name="value">Valore da individuare nella chiave specificata, se la chiave viene trovata.</param>
      <typeparam name="TKey">Tipo di chiavi nel dizionario non modificabile.</typeparam>
      <typeparam name="TValue">Tipo di valori nel dizionario non modificabile.</typeparam>
      <returns>
        <see langword="true" /> se questa mappa contiene la coppia chiave/valore specificata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary>Crea un dizionario non modificabile vuoto.</summary>
      <typeparam name="TKey">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns>Dizionario non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crea un dizionario non modificabile vuoto che usa l'operatore di confronto della chiave specificato.</summary>
      <param name="keyComparer">Implementazione da usare per determinare l'uguaglianza delle chiavi nel dizionario.</param>
      <typeparam name="TKey">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns>Dizionario non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un dizionario non modificabile vuoto che usa gli operatori di confronto della chiave e del valore specificati.</summary>
      <param name="keyComparer">Implementazione da usare per determinare l'uguaglianza delle chiavi nel dizionario.</param>
      <param name="valueComparer">Implementazione da usare per determinare l'uguaglianza dei valori nel dizionario.</param>
      <typeparam name="TKey">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns>Dizionario non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary>Crea un nuovo generatore di dizionario non modificabile.</summary>
      <typeparam name="TKey">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns>Nuovo generatore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crea un nuovo generatore di dizionario non modificabile.</summary>
      <param name="keyComparer">Operatore di confronto della chiave.</param>
      <typeparam name="TKey">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns>Nuovo generatore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un nuovo generatore di dizionario non modificabile.</summary>
      <param name="keyComparer">Operatore di confronto della chiave.</param>
      <param name="valueComparer">Operatore di confronto del valore.</param>
      <typeparam name="TKey">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns>Nuovo generatore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crea un nuovo dizionario non modificabile che contiene gli elementi specificati.</summary>
      <param name="items">Elementi usati per popolare il dizionario prima che diventi non modificabile.</param>
      <typeparam name="TKey">Tipo delle chiavi nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori nel dizionario.</typeparam>
      <returns>Nuovo dizionario non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crea un nuovo dizionario non modificabile che contiene gli elementi specificati e usa l'operatore di confronto della chiave specificato.</summary>
      <param name="keyComparer">Implementazione dell'operatore di confronto da usare per verificare l'uguaglianza delle chiavi.</param>
      <param name="items">Elementi da aggiungere al dizionario prima che diventi non modificabile.</param>
      <typeparam name="TKey">Tipo delle chiavi nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori nel dizionario.</typeparam>
      <returns>Nuovo dizionario non modificabile che contiene gli elementi specificati e usa l'operatore di confronto specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crea un nuovo dizionario non modificabile che contiene gli elementi specificati e usa l'operatore di confronto della chiave specificato.</summary>
      <param name="keyComparer">Implementazione dell'operatore di confronto da usare per verificare l'uguaglianza delle chiavi.</param>
      <param name="valueComparer">Implementazione dell'operatore di confronto da usare per verificare l'uguaglianza dei valori.</param>
      <param name="items">Elementi da aggiungere al dizionario prima che diventi non modificabile.</param>
      <typeparam name="TKey">Tipo delle chiavi nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori nel dizionario.</typeparam>
      <returns>Nuovo dizionario non modificabile che contiene gli elementi specificati e usa l'operatore di confronto specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary>Ottiene il valore per una determinata chiave se esiste una chiave corrispondente nel dizionario.</summary>
      <param name="dictionary">Dizionario da cui recuperare il valore.</param>
      <param name="key">Chiave da ricercare.</param>
      <typeparam name="TKey">Tipo di chiave.</typeparam>
      <typeparam name="TValue">Tipo di valore.</typeparam>
      <returns>Valore della chiave oppure <c>default(TValue)</c> se non è stata trovata alcuna chiave corrispondente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>Ottiene il valore per una determinata chiave se esiste una chiave corrispondente nel dizionario.</summary>
      <param name="dictionary">Dizionario da cui recuperare il valore.</param>
      <param name="key">Chiave da ricercare.</param>
      <param name="defaultValue">Valore predefinito da restituire se non viene trovata alcuna chiave corrispondente nel dizionario.</param>
      <typeparam name="TKey">Tipo di chiave.</typeparam>
      <typeparam name="TValue">Tipo di valore.</typeparam>
      <returns>Valore della chiave oppure <paramref name="defaultValue" /> se non è stata trovata alcuna chiave corrispondente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Costruisce un dizionario non modificabile da una raccolta di elementi esistente, applicando una funzione di trasformazione alle chiavi di origine.</summary>
      <param name="source">Raccolta di origine usata per generare il dizionario non modificabile.</param>
      <param name="keySelector">Funzione usata per trasformare le chiavi per il dizionario non modificabile.</param>
      <typeparam name="TSource">Tipo di elemento nella raccolta di origine.</typeparam>
      <typeparam name="TKey">Tipo di chiave nel dizionario non modificabile risultante.</typeparam>
      <returns>Dizionario non modificabile che contiene gli elementi da <paramref name="source" />, con le chiavi trasformate applicando <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Costruisce un dizionario non modificabile basato su una trasformazione di una sequenza.</summary>
      <param name="source">Raccolta di origine usata per generare il dizionario non modificabile.</param>
      <param name="keySelector">Funzione usata per trasformare le chiavi per il dizionario non modificabile.</param>
      <param name="keyComparer">Operatore di confronto della chiave da usare per il dizionario.</param>
      <typeparam name="TSource">Tipo di elemento nella raccolta di origine.</typeparam>
      <typeparam name="TKey">Tipo di chiave nel dizionario non modificabile risultante.</typeparam>
      <returns>Dizionario non modificabile che contiene gli elementi da <paramref name="source" />, con le chiavi trasformate applicando <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Enumera una sequenza di coppie chiave/valore e produce un dizionario non modificabile del relativo contenuto.</summary>
      <param name="source">Sequenza di coppie chiave/valore da enumerare.</param>
      <typeparam name="TKey">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo di valori nel dizionario.</typeparam>
      <returns>Dizionario non modificabile che contiene le coppie chiave/valore nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Enumera una sequenza di coppie chiave/valore e produce un dizionario non modificabile del relativo contenuto usando l'operatore di confronto della chiave specificato.</summary>
      <param name="source">Sequenza di coppie chiave/valore da enumerare.</param>
      <param name="keyComparer">Operatore di confronto della chiave da usare durante la compilazione del dizionario non modificabile.</param>
      <typeparam name="TKey">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo di valori nel dizionario.</typeparam>
      <returns>Dizionario non modificabile che contiene le coppie chiave/valore nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Enumera una sequenza di coppie chiave/valore e produce un dizionario non modificabile del relativo contenuto usando gli operatori di confronto della chiave e del valore specificati.</summary>
      <param name="source">Sequenza di coppie chiave/valore da enumerare.</param>
      <param name="keyComparer">Operatore di confronto della chiave da usare durante la compilazione del dizionario non modificabile.</param>
      <param name="valueComparer">Operatore di confronto del valore da usare per il dizionario non modificabile.</param>
      <typeparam name="TKey">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo di valori nel dizionario.</typeparam>
      <returns>Dizionario non modificabile che contiene le coppie chiave/valore nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary>Crea un dizionario non modificabile dal contenuto corrente del dizionario del generatore.</summary>
      <param name="builder">Generatore da cui creare il dizionario non modificabile.</param>
      <typeparam name="TKey">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo di valori nel dizionario.</typeparam>
      <returns>Dizionario non modificabile che contiene il contenuto corrente nel dizionario del generatore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Enumera e trasforma una sequenza e produce un dizionario non modificabile del relativo contenuto.</summary>
      <param name="source">Sequenza da enumerare per generare il dizionario.</param>
      <param name="keySelector">Funzione che produrrà la chiave per il dizionario da ogni elemento della sequenza.</param>
      <param name="elementSelector">Funzione che produrrà il valore per il dizionario da ogni elemento della sequenza.</param>
      <typeparam name="TSource">Tipo degli elementi nella sequenza.</typeparam>
      <typeparam name="TKey">Tipo di chiavi nel dizionario risultante.</typeparam>
      <typeparam name="TValue">Tipo di valori nel dizionario risultante.</typeparam>
      <returns>Dizionario non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Enumera e trasforma una sequenza e produce un dizionario non modificabile del relativo contenuto usando l'operatore di confronto della chiave specificato.</summary>
      <param name="source">Sequenza da enumerare per generare il dizionario.</param>
      <param name="keySelector">Funzione che produrrà la chiave per il dizionario da ogni elemento della sequenza.</param>
      <param name="elementSelector">Funzione che produrrà il valore per il dizionario da ogni elemento della sequenza.</param>
      <param name="keyComparer">Operatore di confronto della chiave da usare per il dizionario.</param>
      <typeparam name="TSource">Tipo degli elementi nella sequenza.</typeparam>
      <typeparam name="TKey">Tipo di chiavi nel dizionario risultante.</typeparam>
      <typeparam name="TValue">Tipo di valori nel dizionario risultante.</typeparam>
      <returns>Dizionario non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Enumera e trasforma una sequenza e produce un dizionario non modificabile del relativo contenuto usando gli operatori di confronto della chiave e del valore specificati.</summary>
      <param name="source">Sequenza da enumerare per generare il dizionario.</param>
      <param name="keySelector">Funzione che produrrà la chiave per il dizionario da ogni elemento della sequenza.</param>
      <param name="elementSelector">Funzione che produrrà il valore per il dizionario da ogni elemento della sequenza.</param>
      <param name="keyComparer">Operatore di confronto della chiave da usare per il dizionario.</param>
      <param name="valueComparer">Operatore di confronto del valore da usare per il dizionario.</param>
      <typeparam name="TSource">Tipo degli elementi nella sequenza.</typeparam>
      <typeparam name="TKey">Tipo di chiavi nel dizionario risultante.</typeparam>
      <typeparam name="TValue">Tipo di valori nel dizionario risultante.</typeparam>
      <returns>Dizionario non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary>Rappresenta una raccolta non modificabile e non ordinata di chiavi e valori.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="TKey">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo di valori nel dizionario.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary>Aggiunge un elemento con la chiave e il valore specificati al dizionario non modificabile.</summary>
      <param name="key">Chiave dell'elemento da aggiungere.</param>
      <param name="value">Valore dell'elemento da aggiungere.</param>
      <returns>Nuovo dizionario non modificabile che contiene la coppia chiave/valore aggiuntiva.</returns>
      <exception cref="T:System.ArgumentException">La chiave specificata esiste già nel dizionario, ma ha un valore diverso.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Aggiunge le coppie chiave/valore specificate al dizionario non modificabile.</summary>
      <param name="pairs">Coppie chiave/valore da aggiungere.</param>
      <returns>Nuovo dizionario non modificabile che contiene le coppie chiave/valore aggiuntive.</returns>
      <exception cref="T:System.ArgumentException">Una delle chiavi specificate esiste già nel dizionario, ma ha un valore diverso.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary>Rappresenta una mappa di hash che viene modificata con allocazioni di memoria minime o nulle e in grado di produrre o compilare su istanze di mappa di hash non modificabili in modo molto efficiente.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary>Aggiunge un elemento con la chiave e il valore specificati al dizionario non modificabile.</summary>
      <param name="key">Chiave dell'elemento da aggiungere.</param>
      <param name="value">Valore dell'elemento da aggiungere.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è null.</exception>
      <exception cref="T:System.ArgumentException">Un elemento con la stessa chiave esiste già nel dizionario.</exception>
      <exception cref="T:System.NotSupportedException">Il dizionario è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Aggiunge l'elemento specificato al dizionario non modificabile.</summary>
      <param name="item">Oggetto da aggiungere al dizionario.</param>
      <exception cref="T:System.NotSupportedException">Il dizionario è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Aggiunge una sequenza di valori a questa raccolta.</summary>
      <param name="items">Elementi da aggiungere a questa raccolta.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary>Rimuove tutti gli elementi dal dizionario non modificabile.</summary>
      <exception cref="T:System.NotSupportedException">Il dizionario è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina se il dizionario non modificabile contiene un valore specifico.</summary>
      <param name="item">Oggetto da individuare nel dizionario.</param>
      <returns>
        <see langword="true" /> se l'oggetto <paramref name="item" /> viene trovato nel dizionario; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary>Determina se il dizionario non modificabile contiene un elemento con la chiave specificata.</summary>
      <param name="key">Chiave da individuare nel dizionario.</param>
      <returns>
        <see langword="true" /> se il dizionario contiene un elemento con la chiave; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary>Determina se il dizionario non modificabile contiene un elemento con il valore specificato.</summary>
      <param name="value">Valore da individuare nel dizionario non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <returns>
        <see langword="true" /> se il dizionario contiene un elemento con il valore specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary>Ottiene il numero di elementi contenuti nel dizionario non modificabile.</summary>
      <returns>Numero di elementi contenuti nel dizionario non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary>Restituisce un enumeratore che esegue l'iterazione di tutto il dizionario non modificabile.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>Ottiene il valore per una determinata chiave se esiste una chiave corrispondente nel dizionario.</summary>
      <param name="key">Chiave da ricercare.</param>
      <returns>Valore della chiave oppure <c>default(TValue)</c> se non è stata trovata alcuna chiave corrispondente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>Ottiene il valore per una determinata chiave se esiste una chiave corrispondente nel dizionario.</summary>
      <param name="key">Chiave da ricercare.</param>
      <param name="defaultValue">Valore predefinito da restituire se non viene trovata alcuna chiave corrispondente nel dizionario.</param>
      <returns>Valore della chiave oppure <paramref name="defaultValue" /> se non è stata trovata alcuna chiave corrispondente.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary>Ottiene o imposta l'elemento con la chiave specificata.</summary>
      <param name="key">Elemento da ottenere o impostare.</param>
      <returns>Elemento che dispone della chiave specificata.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">La proprietà è in corso di recupero e non è possibile trovare <paramref name="key" />.</exception>
      <exception cref="T:System.NotSupportedException">La proprietà è in corso di impostazione e <see cref="T:System.Collections.Generic.IDictionary`2" /> è di sola lettura.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary>Ottiene o imposta l'operatore di confronto della chiave.</summary>
      <returns>Operatore di confronto della chiave.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary>Ottiene una raccolta contenente le chiavi presenti nel dizionario non modificabile.</summary>
      <returns>Raccolta contenente le chiavi dell'oggetto che implementa il dizionario non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary>Rimuove dal dizionario non modificabile l'elemento con la chiave specificata.</summary>
      <param name="key">Chiave dell'elemento da rimuovere.</param>
      <returns>
        <see langword="true" /> se l'elemento viene rimosso correttamente; in caso contrario, <see langword="false" />.  Questo metodo restituisce <see langword="false" /> anche se <paramref name="key" /> non è stato trovato nel dizionario.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è null.</exception>
      <exception cref="T:System.NotSupportedException">Il dizionario è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Rimuove la prima occorrenza di un oggetto specifico dal dizionario non modificabile.</summary>
      <param name="item">Oggetto da rimuovere dal dizionario.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> è stato rimosso correttamente dal dizionario; in caso contrario, <see langword="false" />. Questo metodo restituisce false anche se <paramref name="item" /> non viene trovato nel dizionario.</returns>
      <exception cref="T:System.NotSupportedException">Il dizionario è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove dal dizionario non modificabile tutte le voci con chiavi che corrispondono a quelle presenti nella sequenza specificata.</summary>
      <param name="keys">Chiavi per le voci da rimuovere dal dizionario.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia gli elementi del dizionario in una matrice di tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" />, iniziando dall'indice di matrice specificato.</summary>
      <param name="array">Matrice unidimensionale di tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" /> che costituisce la destinazione degli elementi copiati dal dizionario. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Ottiene un valore che indica se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe).</summary>
      <returns>
        <see langword="true" /> se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe); in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Ottiene un oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Aggiunge un elemento con la chiave e il valore forniti all'oggetto dizionario.</summary>
      <param name="key">Chiave dell'elemento da aggiungere.</param>
      <param name="value">Valore dell'elemento da aggiungere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina se l'oggetto dizionario contiene un elemento con la chiave specificata.</summary>
      <param name="key">La chiave da individuare.</param>
      <returns>
        <see langword="true" /> se il dizionario contiene un elemento con la chiave; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>Restituisce un oggetto <see cref="T:System.Collections.IDictionaryEnumerator" /> per il dizionario.</summary>
      <returns>Oggetto <see cref="T:System.Collections.IDictionaryEnumerator" /> per il dizionario.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>Ottiene un valore che indica se le dimensioni dell'oggetto <see cref="T:System.Collections.IDictionary" /> sono fisse.</summary>
      <returns>
        <see langword="true" /> se l'oggetto <see cref="T:System.Collections.IDictionary" /> ha dimensioni fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns>
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>Ottiene o imposta l'elemento con la chiave specificata.</summary>
      <param name="key">Chiave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>Ottiene <see cref="T:System.Collections.Generic.ICollection`1" /> contenente le chiavi di <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contenente le chiavi dell'oggetto che implementa l'interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Rimuove dal dizionario l'elemento con la chiave specificata.</summary>
      <param name="key">Chiave dell'elemento da rimuovere.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>Ottiene <see cref="T:System.Collections.Generic.ICollection`1" /> contenente i valori in <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contenente i valori nell'oggetto che implementa l'interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns>Oggetto enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary>Crea un dizionario non modificabile basato sul contenuto di questa istanza.</summary>
      <returns>Dizionario non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>Determina se il dizionario contiene una chiave specificata.</summary>
      <param name="equalKey">Chiave da ricercare.</param>
      <param name="actualKey">La chiave corrispondente presente nel dizionario, se trovata, oppure <c>equalkey</c> se non viene trovata alcuna corrispondenza.</param>
      <returns>
        <see langword="true" /> se viene trovata una corrispondenza per <paramref name="equalKey" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>Restituisce il valore associato alla chiave specificata.</summary>
      <param name="key">Chiave di cui verrà recuperato il valore.</param>
      <param name="value">Quando termina, questo metodo restituisce il valore associato alla chiave specificata nel caso in cui la chiave venga trovata; in caso contrario, restituisce il valore predefinito per il tipo di parametro <paramref name="value" />. Questo parametro viene passato non inizializzato.</param>
      <returns>
        <see langword="true" /> se l'oggetto che implementa il dizionario non modificabile contiene un elemento con la chiave specificata; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è null.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary>Ottiene o imposta l'operatore di confronto del valore.</summary>
      <returns>Operatore di confronto del valore.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary>Ottiene una raccolta contenente i valori presenti nel dizionario non modificabile.</summary>
      <returns>Raccolta contenente i valori dell'oggetto che implementa il dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary>Recupera un dizionario non modificabile vuoto con lo stesso ordinamento e le stesse regole di confronto chiave/valore di questa istanza del dizionario.</summary>
      <returns>Dizionario vuoto con ordinamento e regole di confronto chiave/valore equivalenti.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina se questo dizionario non modificabile contiene la coppia chiave/valore specificata.</summary>
      <param name="pair">Coppia chiave/valore da individuare.</param>
      <returns>
        <see langword="true" /> se la coppia chiave/valore specificata viene trovata nel dizionario; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary>Determina se il dizionario non modificabile contiene un elemento con la chiave specificata.</summary>
      <param name="key">La chiave da individuare.</param>
      <returns>
        <see langword="true" /> se il dizionario non modificabile contiene un elemento con la chiave specificata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary>Determina se il dizionario non modificabile contiene un elemento con il valore specificato.</summary>
      <param name="value">Valore da individuare. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <returns>
        <see langword="true" /> se il dizionario contiene un elemento con il valore specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary>Ottiene il numero di coppie chiave/valore nel dizionario non modificabile.</summary>
      <returns>Numero di coppie chiave/valore nel dizionario.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary>Ottiene un dizionario non modificabile vuoto.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary>Enumera il contenuto del dizionario non modificabile senza allocare memoria.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary>Ottiene l'elemento in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns>Elemento del dizionario nella posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary>Rilascia le risorse usate dall'istanza corrente della classe <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary>Sposta l'enumeratore all'elemento successivo del dizionario non modificabile.</summary>
      <returns>
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo; <see langword="false" /> se l'enumeratore ha superato la fine del dizionario.</returns>
      <exception cref="T:System.InvalidOperationException">Il dizionario è stato modificato dopo la creazione dell'enumeratore.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary>Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento nel dizionario.</summary>
      <exception cref="T:System.InvalidOperationException">Il dizionario è stato modificato dopo la creazione dell'enumeratore.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Ottiene l'elemento corrente.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary>Restituisce un enumeratore che esegue l'iterazione di tutto il dizionario non modificabile.</summary>
      <returns>Enumeratore che può essere usato per scorrere il dizionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary>Ottiene un valore che indica se questa istanza del dizionario non modificabile è vuota o meno.</summary>
      <returns>
        <see langword="true" /> se l'istanza è vuota; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary>Ottiene l'oggetto <paramref name="TValue" /> associato alla chiave specificata.</summary>
      <param name="key">Tipo di chiave.</param>
      <returns>Valore associato alla chiave specificata. Se non vengono trovati risultati, l'operazione genera un'eccezione.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary>Ottiene l'operatore di confronto della chiave per il dizionario non modificabile.</summary>
      <returns>Operatore di confronto della chiave.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary>Ottiene le chiavi nel dizionario non modificabile.</summary>
      <returns>Chiavi nel dizionario non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary>Rimuove dal dizionario non modificabile l'elemento con la chiave specificata.</summary>
      <param name="key">Chiave dell'elemento da rimuovere.</param>
      <returns>Nuovo dizionario non modificabile con l'elemento specificato rimosso oppure questa istanza se la chiave specificata non viene trovata nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove dal dizionario non modificabile gli elementi con le chiavi specificate.</summary>
      <param name="keys">Chiavi degli elementi da rimuovere.</param>
      <returns>Nuovo dizionario non modificabile con le chiavi specificate rimosse oppure questa istanza se le chiavi specificate non vengono trovate nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary>Imposta la chiave e il valore specificati nel dizionario non modificabile, eventualmente sovrascrivendo un valore esistente per la chiave.</summary>
      <param name="key">Chiave della voce da aggiungere.</param>
      <param name="value">Valore di chiave da impostare.</param>
      <returns>Nuovo dizionario non modificabile che contiene la coppia chiave/valore specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Imposta le coppie chiave/valore specificate nel dizionario non modificabile, eventualmente sovrascrivendo i valori esistenti per le chiavi.</summary>
      <param name="items">Coppie chiave/valore da impostare nel dizionario. Se una qualsiasi delle chiavi esiste già nel dizionario, questo metodo sovrascriverà i valori precedenti.</param>
      <returns>Nuovo dizionario non modificabile che contiene le coppie chiave/valore specificate.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia gli elementi del dizionario in una matrice, a partire da un indice della matrice specifico.</summary>
      <param name="array">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dal dizionario. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Ottiene un valore che indica se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe).</summary>
      <returns>
        <see langword="true" /> se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe); in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Ottiene un oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Aggiunge un elemento con la chiave e il valore forniti all'oggetto dizionario non modificabile.</summary>
      <param name="key">Oggetto da usare come chiave dell'elemento da aggiungere.</param>
      <param name="value">Oggetto da usare come valore dell'elemento da aggiungere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Cancella questa istanza.</summary>
      <exception cref="T:System.NotSupportedException">L'oggetto dizionario è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina se l'oggetto dizionario non modificabile contiene un elemento con la chiave specificata.</summary>
      <param name="key">Chiave da individuare nell'oggetto dizionario.</param>
      <returns>
        <see langword="true" /> se il dizionario contiene un elemento con la chiave; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Restituisce un oggetto <see cref="T:System.Collections.IDictionaryEnumerator" /> per l'oggetto dizionario non modificabile.</summary>
      <returns>Oggetto enumeratore per l'oggetto dizionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Ottiene un valore che indica se le dimensioni dell'oggetto <see cref="T:System.Collections.IDictionary" /> sono fisse.</summary>
      <returns>
        <see langword="true" /> se le dimensioni dell'oggetto <see cref="T:System.Collections.IDictionary" /> sono fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns>
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Ottiene o imposta l'elemento con la chiave specificata.</summary>
      <param name="key">Chiave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Ottiene <see cref="T:System.Collections.Generic.ICollection`1" /> contenente le chiavi di <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contenente le chiavi dell'oggetto che implementa l'interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Rimuove dall'oggetto dizionario non modificabile l'elemento con la chiave specificata.</summary>
      <param name="key">Chiave dell'elemento da rimuovere.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary>Ottiene <see cref="T:System.Collections.Generic.ICollection`1" /> contenente i valori in <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contenente i valori nell'oggetto che implementa l'interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns>Oggetto enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary>Crea un dizionario non modificabile con lo stesso contenuto di questo dizionario e che può essere modificato in modo efficiente tra più operazioni tramite interfacce standard modificabili.</summary>
      <returns>Raccolta con lo stesso contenuto di questo dizionario e che può essere modificata in modo efficiente tra più operazioni tramite interfacce standard modificabili.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>Determina se il dizionario contiene una chiave specificata.</summary>
      <param name="equalKey">Chiave da ricercare.</param>
      <param name="actualKey">La chiave corrispondente presente nel dizionario, se trovata, oppure <c>equalkey</c> se non viene trovata alcuna corrispondenza.</param>
      <returns>
        <see langword="true" /> se viene trovata una corrispondenza per <paramref name="equalKey" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary>Ottiene il valore associato alla chiave specificata.</summary>
      <param name="key">Chiave di cui verrà recuperato il valore.</param>
      <param name="value">Quando termina, questo metodo restituisce il valore associato alla chiave specificata nel caso in cui la chiave venga trovata. In caso contrario, restituisce il valore predefinito per il tipo del parametro <paramref name="value" />. Questo parametro viene passato non inizializzato.</param>
      <returns>
        <see langword="true" /> se l'oggetto che implementa il dizionario contiene un elemento con la chiave specificata; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è null.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary>Ottiene l'operatore di confronto del valore usato per determinare se i valori sono uguali.</summary>
      <returns>Operatore di confronto del valore usato per determinare se i valori sono uguali.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary>Ottiene i valori nel dizionario non modificabile.</summary>
      <returns>Valori nel dizionario non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Ottiene un'istanza del dizionario non modificabile che usa l'operatore di confronto della chiave specificato.</summary>
      <param name="keyComparer">Operatore di confronto della chiave da usare.</param>
      <returns>Istanza del dizionario non modificabile che usa l'operatore di confronto specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>Ottiene un'istanza del dizionario non modificabile che usa gli operatori di confronto della chiave e del valore specificati.</summary>
      <param name="keyComparer">Operatore di confronto della chiave da usare.</param>
      <param name="valueComparer">Operatore di confronto del valore da usare.</param>
      <returns>Istanza del dizionario non modificabile che usa gli operatori di confronto specificati.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary>Fornisce un set di metodi di inizializzazione per le istanze della classe <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary>Crea un set di hash non modificabile vuoto.</summary>
      <typeparam name="T">Tipo di elementi da archiviare nel set di hash non modificabile.</typeparam>
      <returns>Set di hash non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary>Crea un nuovo set di hash non modificabile che contiene l'elemento specificato.</summary>
      <param name="item">Elemento con cui prepopolare il set di hash.</param>
      <typeparam name="T">Tipo di elementi nel set di hash non modificabile.</typeparam>
      <returns>Nuovo set di hash non modificabile che contiene l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary>Crea un nuovo set di hash non modificabile che contiene la matrice di elementi specificata.</summary>
      <param name="items">Matrice che contiene gli elementi con cui prepopolare il set di hash.</param>
      <typeparam name="T">Tipo di elementi nel set di hash non modificabile.</typeparam>
      <returns>Nuovo set di hash non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crea un set di hash non modificabile vuoto che usa l'operatore di confronto di uguaglianza specificato.</summary>
      <param name="equalityComparer">Oggetto da usare per verificare l'uguaglianza degli oggetti nel set.</param>
      <typeparam name="T">Tipo di elementi nel set di hash non modificabile.</typeparam>
      <returns>Set di hash non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary>Crea un nuovo set di hash non modificabile che contiene l'elemento specificato e usa l'operatore di confronto di uguaglianza specificato per il tipo di set.</summary>
      <param name="equalityComparer">Oggetto da usare per verificare l'uguaglianza degli oggetti nel set.</param>
      <param name="item">Elemento con cui prepopolare il set di hash.</param>
      <typeparam name="T">Tipo di elementi nel set di hash non modificabile.</typeparam>
      <returns>Nuovo set di hash non modificabile che contiene l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary>Crea un nuovo set di hash non modificabile che contiene gli elementi nella raccolta specificata e usa l'operatore di confronto di uguaglianza specificato per il tipo di set.</summary>
      <param name="equalityComparer">Oggetto da usare per verificare l'uguaglianza degli oggetti nel set.</param>
      <param name="items">Matrice che contiene gli elementi con cui prepopolare il set di hash.</param>
      <typeparam name="T">Tipo di elementi archiviati nel set di hash non modificabile.</typeparam>
      <returns>Nuovo set di hash non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary>Crea un nuovo generatore di set di hash non modificabile.</summary>
      <typeparam name="T">Tipo di elementi archiviati dalla raccolta.</typeparam>
      <returns>Generatore di set di hash non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crea un nuovo generatore di set di hash non modificabile.</summary>
      <param name="equalityComparer">Oggetto da usare per verificare l'uguaglianza degli oggetti nel set.</param>
      <typeparam name="T">Tipo di elementi archiviati dalla raccolta.</typeparam>
      <returns>Nuovo generatore di set di hash non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea un nuovo set di hash non modificabile precompilato con gli elementi specificati.</summary>
      <param name="items">Elementi da aggiungere al set di hash.</param>
      <typeparam name="T">Tipo di elementi archiviati dalla raccolta.</typeparam>
      <returns>Nuovo set di hash non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea un nuovo set di hash non modificabile che contiene gli elementi specificati e usa l'operatore di confronto di uguaglianza specificato per il tipo di set.</summary>
      <param name="equalityComparer">Oggetto da usare per verificare l'uguaglianza degli oggetti nel set.</param>
      <param name="items">Elementi da aggiungere alla raccolta prima che venga applicata l'immutabilità.</param>
      <typeparam name="T">Tipo di elementi archiviati nella raccolta.</typeparam>
      <returns>Nuovo set di hash non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Enumera una sequenza e produce un set di hash non modificabile del relativo contenuto.</summary>
      <param name="source">Sequenza da enumerare.</param>
      <typeparam name="TSource">Tipo degli elementi nella sequenza.</typeparam>
      <returns>Set di hash non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Enumera una sequenza, produce un set di hash non modificabile del relativo contenuto e usa l'operatore di confronto di uguaglianza specificato per il tipo di set.</summary>
      <param name="source">Sequenza da enumerare.</param>
      <param name="equalityComparer">Oggetto da usare per verificare l'uguaglianza degli oggetti nel set.</param>
      <typeparam name="TSource">Tipo degli elementi nella sequenza.</typeparam>
      <returns>Set di hash non modificabile che contiene gli elementi nella sequenza specificata e usa l'operatore di confronto di uguaglianza specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary>Crea un set di hash non modificabile dal contenuto corrente del set del generatore.</summary>
      <param name="builder">Generatore da cui creare il set di hash non modificabile.</param>
      <typeparam name="TSource">Tipo di elementi nel set di hash.</typeparam>
      <returns>Set di hash non modificabile che contiene il contenuto corrente nel set del generatore.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary>Rappresenta un set di hash non modificabile e non ordinato.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T">Tipo di elementi contenuti nel set di hash.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary>Aggiunge l'elemento specificato al set di hash.</summary>
      <param name="item">Elemento da aggiungere all'insieme.</param>
      <returns>Set di hash che contiene il valore aggiunto e tutti i valori precedentemente usati dall'oggetto <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary>Rappresenta un set di hash che viene modificato con allocazioni di memoria minime o nulle e in grado di produrre o compilare su istanze di set di hash non modificabili in modo molto efficiente.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary>Aggiunge l'elemento specificato al set di hash non modificabile.</summary>
      <param name="item">Elemento da aggiungere.</param>
      <returns>
        <see langword="true" /> se l'elemento non appartiene già alla raccolta; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary>Rimuove tutti gli elementi dal set di hash non modificabile.</summary>
      <exception cref="T:System.NotSupportedException">Il set di hash è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary>Determina se il set di hash non modificabile contiene un valore specifico.</summary>
      <param name="item">Oggetto da individuare nel set di hash.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> è presente nel set di hash; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary>Ottiene il numero di elementi contenuti nel set di hash non modificabile.</summary>
      <returns>Numero di elementi contenuti nel set di hash non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove tutti gli elementi della raccolta specificata dal set di hash corrente.</summary>
      <param name="other">Raccolta di elementi da rimuovere dal set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere il set di hash non modificabile.</summary>
      <returns>Enumeratore che può essere usato per scorrere il set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica il set corrente in modo che contenga solo elementi inclusi anche in una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set corrente è un subset (strict) appropriato di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un subset appropriato di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set corrente è un superset (strict) appropriato di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un superset appropriato di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set corrente è un subset di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un subset di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set corrente è un superset di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un superset di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary>Ottiene o imposta l'operatore di confronto della chiave.</summary>
      <returns>Operatore di confronto della chiave.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set corrente è sovrapposto alla raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente e <paramref name="other" /> condividono almeno un elemento comune; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary>Rimuove la prima occorrenza di un oggetto specifico dal set di hash non modificabile.</summary>
      <param name="item">Oggetto da rimuovere dal set.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> è stato rimosso correttamente dal set; in caso contrario, <see langword="false" />. Questo metodo restituisce inoltre <see langword="false" /> se <paramref name="item" /> non viene trovato nel set originale.</returns>
      <exception cref="T:System.NotSupportedException">Il set è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set corrente e la raccolta specificata contengono gli stessi elementi.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è uguale a <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica il set corrente in modo che contenga solo elementi presenti in tale set o nella raccolta specificata, ma non in entrambi.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Aggiunge un elemento al set di hash.</summary>
      <param name="item">Oggetto da aggiungere al set.</param>
      <exception cref="T:System.NotSupportedException">Il set è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copia gli elementi del set di hash in una matrice, iniziando in corrispondenza di un particolare indice di matrice.</summary>
      <param name="array">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dal set di hash. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns>
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary>Crea un set di hash non modificabile basato sul contenuto di questa istanza.</summary>
      <returns>Set non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica il set corrente in modo che contenga tutti gli elementi presenti sia in tale set che nella raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary>Recupera un set di hash non modificabile vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</summary>
      <returns>Set di hash vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary>Determina se questo set di hash non modificabile contiene l'elemento specificato.</summary>
      <param name="item">Oggetto da individuare nel set di hash non modificabile.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> è presente in <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary>Ottiene il numero di elementi nel set di hash non modificabile.</summary>
      <returns>Numero di elementi nel set di hash.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary>Ottiene un set di hash non modificabile per questo tipo che usa l'oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> predefinito.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary>Enumera il contenuto del set di hash non modificabile senza allocare memoria.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary>Ottiene l'elemento in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns>Elemento in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary>Rilascia le risorse usate dall'istanza corrente della classe <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary>Sposta l'enumeratore all'elemento successivo del set di hash non modificabile.</summary>
      <returns>
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo; <see langword="false" /> se l'enumeratore ha superato la fine del set di hash.</returns>
      <exception cref="T:System.InvalidOperationException">Il set di hash è stato modificato dopo la creazione dell'enumeratore.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary>Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento nel set di hash.</summary>
      <exception cref="T:System.InvalidOperationException">Il set di hash è stato modificato dopo la creazione dell'enumeratore.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Ottiene l'elemento corrente.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove gli elementi della raccolta specificata dal set di hash non modificabile corrente.</summary>
      <param name="other">Raccolta di elementi da rimuovere da questo set.</param>
      <returns>Nuovo set con gli elementi rimossi oppure il set originale se nessuno degli elementi era presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un set di hash non modificabile che contiene gli elementi esistenti sia in questo set che nel set specificato.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>Nuovo set non modificabile che contiene gli elementi esistenti in entrambi i set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary>Ottiene un valore che indica se il set di hash non modificabile corrente è vuoto o meno.</summary>
      <returns>
        <see langword="true" /> se l'istanza è vuota; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set di hash non modificabile corrente è un subset (strict) appropriato di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un subset corretto della raccolta specificata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set di hash non modificabile corrente è un superset (strict) appropriato di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un superset corretto della raccolta specificata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set di hash non modificabile corrente è un subset di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un subset della raccolta specificata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set di hash non modificabile corrente è un superset di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un superset della raccolta specificata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary>Ottiene l'oggetto usato per ottenere i codici hash per le chiavi e per controllare l'uguaglianza dei valori nel set di hash non modificabile.</summary>
      <returns>Operatore di confronto usato per ottenere i codici hash per le chiavi e controllare l'uguaglianza.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set di hash non modificabile corrente è sovrapposto alla raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente e la raccolta specificata condividono almeno un elemento comune; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary>Rimuove l'elemento specificato da questo set di hash non modificabile.</summary>
      <param name="item">Elemento da rimuovere.</param>
      <returns>Nuovo set con l'elemento specificato rimosso oppure il set corrente se l'elemento non viene trovato nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set di hash non modificabile corrente e la raccolta specificata contengono gli stessi elementi.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se i set sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un set di hash non modificabile che contiene solo elementi presenti in tale set o nella raccolta specificata, ma non in entrambi.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>Nuovo set che contiene gli elementi presenti solo in tale set o nella raccolta specificata, ma non in entrambi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Aggiunge un elemento al set.</summary>
      <param name="item">Oggetto da aggiungere al set.</param>
      <exception cref="T:System.NotSupportedException">Il set è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Rimuove tutti gli elementi dal set.</summary>
      <exception cref="T:System.NotSupportedException">Il set è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copia gli elementi del set in una matrice, iniziando in corrispondenza di un particolare indice.</summary>
      <param name="array">Matrice unidimensionale che rappresenta la destinazione degli elementi copiati dal set. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Vedere l'interfaccia <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Rimuove la prima occorrenza di un oggetto specifico dal set.</summary>
      <param name="item">Oggetto da rimuovere dal set.</param>
      <returns>
        <see langword="true" /> se l'elemento viene rimosso correttamente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns>Enumeratore che scorre la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>Aggiunge un elemento al set corrente e restituisce un valore che indica se l'aggiunta è stata eseguita correttamente.</summary>
      <param name="item">Elemento da aggiungere alla raccolta.</param>
      <returns>
        <see langword="true" /> se l'elemento è stato aggiunto al set; <see langword="false" /> se l'elemento è già presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove tutti gli elementi della raccolta specificata dal set corrente.</summary>
      <param name="other">Raccolta di elementi da rimuovere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica il set corrente in modo che contenga solo elementi inclusi anche in una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con la raccolta corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica il set corrente in modo che contenga solo elementi presenti in tale set o nella raccolta specificata, ma non in entrambi.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica il set corrente in modo che contenga tutti gli elementi presenti in tale set o nella raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia gli elementi del set in una matrice, iniziando in corrispondenza di un particolare indice.</summary>
      <param name="array">Matrice unidimensionale che rappresenta la destinazione degli elementi copiati dal set. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Vedere l'interfaccia <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary>Vedere <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che scorre un set.</summary>
      <returns>Enumeratore che può essere usato per scorrere il set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>Aggiunge l'elemento specificato a questo set non modificabile.</summary>
      <param name="item">Elemento da aggiungere.</param>
      <returns>Nuovo set con l'elemento aggiunto o questo set se l'elemento è già presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>Recupera un set vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</summary>
      <returns>Set vuoto con lo stesso ordinamento o la stessa semantica di ordinamento di questa istanza.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove gli elementi della raccolta specificata dal set corrente.</summary>
      <param name="other">Raccolta di elementi da rimuovere da questo set.</param>
      <returns>Nuovo set con gli elementi rimossi oppure il set originale se nessuno degli elementi era presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un set non modificabile che contiene gli elementi esistenti sia in questo set che nel set specificato.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>Nuovo set non modificabile che contiene gli elementi esistenti in entrambi i set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>Rimuove l'elemento specificato da questo set non modificabile.</summary>
      <param name="item">Elemento da rimuovere.</param>
      <returns>Nuovo set con l'elemento specificato rimosso oppure il set corrente se l'elemento non viene trovato nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un set non modificabile che contiene solo elementi presenti in tale set o nella raccolta specificata, ma non in entrambi.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>Nuovo set che contiene gli elementi presenti solo in tale set o nella raccolta specificata, ma non in entrambi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un nuovo set non modificabile che contiene tutti gli elementi presenti in tale set o nella raccolta specificata.</summary>
      <param name="other">Raccolta da cui aggiungere gli elementi.</param>
      <returns>Nuovo set non modificabile con gli elementi aggiunti oppure il set originale se tutti gli elementi erano già presenti nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary>Crea un set di hash non modificabile con lo stesso contenuto di questo set e che può essere modificato in modo efficiente tra più operazioni tramite interfacce standard modificabili.</summary>
      <returns>Set con lo stesso contenuto di questo set e che può essere modificato in modo efficiente tra più operazioni tramite interfacce standard modificabili.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary>Cerca un determinato valore nel set e restituisce il valore uguale eventualmente trovato.</summary>
      <param name="equalValue">Valore da cercare.</param>
      <param name="actualValue">Valore del set trovato dalla ricerca oppure il valore originale se la ricerca non ha restituito alcuna corrispondenza.</param>
      <returns>Valore che indica se la ricerca è stata eseguita correttamente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un nuovo set di hash non modificabile che contiene tutti gli elementi presenti in tale set o nella raccolta specificata.</summary>
      <param name="other">Raccolta da cui aggiungere gli elementi.</param>
      <returns>Nuovo set di hash non modificabile con gli elementi aggiunti oppure il set originale se tutti gli elementi erano già presenti nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Ottiene un'istanza del set di hash non modificabile che usa l'operatore di confronto di uguaglianza specificato per i metodi di ricerca.</summary>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare.</param>
      <returns>Istanza di questo set di hash non modificabile che usa l'operatore di confronto specificato.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary>Contiene meccanismi di scambio con interlock per le raccolte non modificabili.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary>Ottiene il valore da un dizionario dopo averlo aggiunto o avere aggiornato una voce esistente.</summary>
      <param name="location">Variabile o campo da aggiornare in modo atomico se l'oggetto specificato non è presente nel dizionario.</param>
      <param name="key">Chiave per il valore da aggiungere o aggiornare.</param>
      <param name="addValue">Valore da usare se non esiste alcun valore precedente.</param>
      <param name="updateValueFactory">Funzione che riceve la chiave e il valore precedente e restituisce il nuovo valore con cui aggiornare il dizionario.</param>
      <typeparam name="TKey">Tipo di chiave archiviata dal dizionario.</typeparam>
      <typeparam name="TValue">Tipo di valore archiviato dal dizionario.</typeparam>
      <returns>Valore aggiunto o modificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary>Ottiene il valore da un dizionario dopo averlo aggiunto o avere aggiornato una voce esistente.</summary>
      <param name="location">Variabile o campo da aggiornare in modo atomico se l'oggetto specificato non è presente nel dizionario.</param>
      <param name="key">Chiave per il valore da aggiungere o aggiornare.</param>
      <param name="addValueFactory">Funzione che riceve la chiave e restituisce un nuovo valore da aggiungere al dizionario quando non esiste alcun valore in precedenza.</param>
      <param name="updateValueFactory">Funzione che riceve la chiave e il valore precedente e restituisce il nuovo valore con cui aggiornare il dizionario.</param>
      <typeparam name="TKey">Tipo di chiave archiviata dal dizionario.</typeparam>
      <typeparam name="TValue">Tipo di valore archiviato dal dizionario.</typeparam>
      <returns>Valore aggiunto o modificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary>Accoda in modo atomico un elemento alla fine di una coda.</summary>
      <param name="location">Variabile o campo da aggiornare in modo atomico.</param>
      <param name="value">Valore da accodare.</param>
      <typeparam name="T">Tipo di elementi contenuti nella raccolta</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>Ottiene il valore per la chiave specificata dal dizionario o aggiunge un nuovo valore al dizionario, se la chiave non viene trovata.</summary>
      <param name="location">Variabile o campo da aggiornare in modo atomico se la chiave specificata non è presente nel dizionario.</param>
      <param name="key">Chiave per il valore da ottenere o aggiungere.</param>
      <param name="value">Valore da aggiungere al dizionario se la chiave non viene trovata.</param>
      <typeparam name="TKey">Tipo di chiavi contenute nella raccolta.</typeparam>
      <typeparam name="TValue">Tipo di valori contenuti nella raccolta.</typeparam>
      <returns>Valore in corrispondenza della chiave specificata o <paramref name="valueFactory" /> se la chiave non è presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary>Ottiene il valore per la chiave specificata dal dizionario o aggiunge un nuovo valore al dizionario, se la chiave non viene trovata.</summary>
      <param name="location">Variabile o campo da aggiornare in modo atomico se l'oggetto specificato non è presente nel dizionario.</param>
      <param name="key">Chiave per il valore da recuperare o aggiungere.</param>
      <param name="valueFactory">Funzione da eseguire per ottenere il valore da inserire nel dizionario se la chiave non viene trovata. Questo delegato non verrà richiamato più di una volta.</param>
      <typeparam name="TKey">Tipo di chiavi contenute nella raccolta.</typeparam>
      <typeparam name="TValue">Tipo di valori contenuti nella raccolta.</typeparam>
      <returns>Valore in corrispondenza della chiave specificata o <paramref name="valueFactory" /> se la chiave non è presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary>Ottiene il valore per la chiave specificata dal dizionario o aggiunge un nuovo valore al dizionario, se la chiave non viene trovata.</summary>
      <param name="location">Variabile o campo da aggiornare se l'oggetto specificato non è presente nel dizionario.</param>
      <param name="key">Chiave per il valore da recuperare o aggiungere.</param>
      <param name="valueFactory">Funzione da eseguire per ottenere il valore da inserire nel dizionario se la chiave non viene trovata.</param>
      <param name="factoryArgument">Argomento da passare alla factory del valore.</param>
      <typeparam name="TKey">Tipo di chiavi contenute nella raccolta.</typeparam>
      <typeparam name="TValue">Tipo di valori contenuti nella raccolta.</typeparam>
      <typeparam name="TArg">Tipo dell'argomento fornito alla factory del valore.</typeparam>
      <returns>Valore in corrispondenza della chiave specificata o <paramref name="valueFactory" /> se la chiave non è presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Consente di confrontare due matrici non modificabili per verificarne l'uguaglianza; in caso affermativo, una delle matrici viene sostituita.</summary>
      <param name="location">Destinazione il cui valore viene confrontato con <paramref name="comparand" /> ed eventualmente sostituito.</param>
      <param name="value">Valore che sostituisce il valore di destinazione se il confronto rileva l'uguaglianza.</param>
      <param name="comparand">Valore confrontato con il valore in corrispondenza di <paramref name="location" />.</param>
      <typeparam name="T">Tipo di elemento memorizzato dalla matrice.</typeparam>
      <returns>Valore originale in <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Imposta una matrice sulla matrice specificata e restituisce un riferimento alla matrice originale, come operazione atomica.</summary>
      <param name="location">Matrice da impostare sul valore specificato.</param>
      <param name="value">Valore su cui è impostato il parametro <paramref name="location" />.</param>
      <typeparam name="T">Tipo di elemento memorizzato dalla matrice.</typeparam>
      <returns>Valore originale di <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Imposta una matrice sulla matrice specificata, se la matrice non è stata inizializzata.</summary>
      <param name="location">Matrice da impostare sul valore specificato.</param>
      <param name="value">Valore su cui è impostato il parametro <paramref name="location" />, se non è inizializzato.</param>
      <typeparam name="T">Tipo di elemento memorizzato dalla matrice.</typeparam>
      <returns>
        <see langword="true" /> se alla matrice è stato assegnato il valore specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary>Inserisce un nuovo elemento nello stack.</summary>
      <param name="location">Stack da aggiornare.</param>
      <param name="value">Valore da inserire nello stack.</param>
      <typeparam name="T">Tipo di elementi nello stack.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>Aggiunge la chiave e il valore specificati al dizionario se la chiave non è presente nel dizionario.</summary>
      <param name="location">Dizionario da aggiornare con la chiave e il valore specificati.</param>
      <param name="key">Chiave da aggiungere, se non è già definita nel dizionario.</param>
      <param name="value">Chiave da aggiungere.</param>
      <typeparam name="TKey">Tipo di chiavi contenute nella raccolta.</typeparam>
      <typeparam name="TValue">Tipo di valori contenuti nella raccolta.</typeparam>
      <returns>
        <see langword="true" /> se la chiave non è presente nel dizionario; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary>Rimuove in modo atomico e restituisce l'elemento specificato all'inizio della coda, se la coda non è vuota.</summary>
      <param name="location">Variabile o campo da aggiornare in modo atomico.</param>
      <param name="value">Impostato sul valore all'inizio della coda, se la coda non è vuota.</param>
      <typeparam name="T">Tipo di elementi nella coda.</typeparam>
      <returns>
        <see langword="true" /> se la coda non è vuota e l'elemento head viene rimosso; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary>Rimuove un elemento all'inizio dello stack, se è presente un elemento da rimuovere.</summary>
      <param name="location">Stack da aggiornare.</param>
      <param name="value">Riceve il valore rimosso dallo stack, se lo stack non è vuoto.</param>
      <typeparam name="T">Tipo di elementi nello stack.</typeparam>
      <returns>
        <see langword="true" /> se un elemento viene rimosso dallo stack; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary>Rimuove l'elemento con la chiave specificata, se la chiave è presente.</summary>
      <param name="location">Dizionario da aggiornare.</param>
      <param name="key">Chiave da rimuovere.</param>
      <param name="value">Riceve il valore dell'elemento rimosso, se il dizionario non è vuoto.</param>
      <typeparam name="TKey">Tipo di chiavi contenute nella raccolta.</typeparam>
      <typeparam name="TValue">Tipo di valori contenuti nella raccolta.</typeparam>
      <returns>
        <see langword="true" /> se la chiave viene trovata e rimossa; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary>Imposta la chiave specificata sul valore specificato se la chiave specificata è già impostata su un valore specifico.</summary>
      <param name="location">Dizionario da aggiornare.</param>
      <param name="key">Chiave da aggiornare.</param>
      <param name="newValue">Nuovo valore da impostare.</param>
      <param name="comparisonValue">Valore corrente per <paramref name="key" /> affinché l'aggiornamento venga eseguito correttamente.</param>
      <typeparam name="TKey">Tipo di chiavi contenute nella raccolta.</typeparam>
      <typeparam name="TValue">Tipo di valori contenuti nella raccolta.</typeparam>
      <returns>
        <see langword="true" /> se <paramref name="key" /> e <paramref name="comparisonValue" /> sono presenti nel dizionario e il confronto è stato aggiornato in <paramref name="newValue" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary>Modifica un valore sul posto con la semantica di transazione bloccante ottimistica tramite una funzione di trasformazione specificata.             La trasformazione viene ritentata il numero di volte necessario per prevalere sulla race condition bloccante ottimistica.</summary>
      <param name="location">Variabile o campo da modificare, accessibile da più thread.</param>
      <param name="transformer">Funzione che modifica il valore. Questa funzione deve essere priva di effetti collaterali poiché può essere eseguita più volte quando si verificano race condition con altri thread.</param>
      <typeparam name="T">Tipo di dati.</typeparam>
      <returns>
        <see langword="true" /> se il valore di location viene modificato applicando il risultato della funzione <paramref name="transformer" />. <see langword="false" /> se il valore di location rimane lo stesso perché l'ultima chiamata di <paramref name="transformer" /> ha restituito il valore esistente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary>Modifica un valore sul posto con la semantica di transazione bloccante ottimistica tramite una funzione di trasformazione specificata.             La trasformazione viene ritentata il numero di volte necessario per prevalere sulla race condition bloccante ottimistica.</summary>
      <param name="location">Variabile o campo da modificare, accessibile da più thread.</param>
      <param name="transformer">Funzione che modifica il valore. Questa funzione deve essere priva di effetti collaterali poiché può essere eseguita più volte quando si verificano race condition con altri thread.</param>
      <param name="transformerArgument">Argomento da passare a <paramref name="transformer" />.</param>
      <typeparam name="T">Tipo di dati.</typeparam>
      <typeparam name="TArg">Tipo di argomento passato al <paramref name="transformer" />.</typeparam>
      <returns>
        <see langword="true" /> se il valore di location viene modificato applicando il risultato della funzione <paramref name="transformer" />. <see langword="false" /> se il valore di location rimane lo stesso perché l'ultima chiamata di <paramref name="transformer" /> ha restituito il valore esistente.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary>Fornisce un set di metodi di inizializzazione per le istanze della classe <see cref="T:System.Collections.Immutable.ImmutableList`1" />.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary>Crea un elenco non modificabile vuoto.</summary>
      <typeparam name="T">Tipo di elementi da archiviare nell'elenco.</typeparam>
      <returns>Elenco non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary>Crea un nuovo elenco non modificabile che contiene l'elemento specificato.</summary>
      <param name="item">Elemento con cui prepopolare l'elenco.</param>
      <typeparam name="T">Tipo di elementi nell'elenco.</typeparam>
      <returns>Nuovo elenco non modificabile che contiene l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary>Crea un nuovo elenco non modificabile che contiene la matrice di elementi specificata.</summary>
      <param name="items">Matrice che contiene gli elementi con cui prepopolare l'elenco.</param>
      <typeparam name="T">Tipo di elementi nell'elenco.</typeparam>
      <returns>Nuovo elenco non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary>Crea un nuovo generatore di elenchi non modificabili.</summary>
      <typeparam name="T">Tipo di elementi archiviati dalla raccolta.</typeparam>
      <returns>Generatore di raccolte non modificabili.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea un nuovo elenco non modificabile che contiene gli elementi specificati.</summary>
      <param name="items">Elementi da aggiungere all'elenco.</param>
      <typeparam name="T">Tipo di elementi nell'elenco.</typeparam>
      <returns>Elenco non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza nell'elenco.</summary>
      <param name="list">Elenco in cui eseguire la ricerca.</param>
      <param name="item">Oggetto da individuare nell'elenco. Il valore può essere null per i tipi di riferimento.</param>
      <typeparam name="T">Tipo di elementi nell'elenco.</typeparam>
      <returns>Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco compreso tra l'indice e l'ultimo elemento, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza nell'elenco.</summary>
      <param name="list">Elenco in cui eseguire la ricerca.</param>
      <param name="item">Oggetto da individuare nell'elenco non modificabile. Il valore può essere null per i tipi di riferimento.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <typeparam name="T">Tipo di elementi nell'elenco.</typeparam>
      <returns>Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile compreso tra l'indice e l'ultimo elemento, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che è compreso tra l'indice specificato e l'ultimo elemento.</summary>
      <param name="list">Elenco in cui eseguire la ricerca.</param>
      <param name="item">Oggetto da individuare nell'elenco non modificabile. Il valore può essere null per i tipi di riferimento.</param>
      <param name="startIndex">Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <typeparam name="T">Tipo di elementi nell'elenco.</typeparam>
      <returns>Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile compreso tra l'indice e l'ultimo elemento, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che è compreso tra l'indice specificato e l'ultimo elemento.</summary>
      <param name="list">Elenco in cui eseguire la ricerca.</param>
      <param name="item">Oggetto da individuare nell'elenco non modificabile. Il valore può essere null per i tipi di riferimento.</param>
      <param name="startIndex">Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <typeparam name="T">Tipo di elementi nell'elenco.</typeparam>
      <returns>Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile compreso tra l'indice e l'ultimo elemento, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza nell'intero elenco non modificabile.</summary>
      <param name="list">Elenco in cui eseguire la ricerca.</param>
      <param name="item">Oggetto da individuare nell'elenco non modificabile. Il valore può essere null per i tipi di riferimento.</param>
      <typeparam name="T">Tipo di elementi nell'elenco.</typeparam>
      <returns>Indice in base zero dell'ultima occorrenza dell'elemento all'interno dell'intero elenco non modificabile, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza nell'intero elenco non modificabile.</summary>
      <param name="list">Elenco in cui eseguire la ricerca.</param>
      <param name="item">Oggetto da individuare nell'elenco non modificabile. Il valore può essere null per i tipi di riferimento.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <typeparam name="T">Tipo di elementi nell'elenco.</typeparam>
      <returns>Indice in base zero dell'ultima occorrenza dell'elemento all'interno dell'intero elenco non modificabile, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che è compreso tra il primo elemento e l'indice specificato.</summary>
      <param name="list">Elenco in cui eseguire la ricerca.</param>
      <param name="item">Oggetto da individuare nell'elenco non modificabile. Il valore può essere null per i tipi di riferimento.</param>
      <param name="startIndex">Indice iniziale in base zero della ricerca all'indietro.</param>
      <typeparam name="T">Tipo di elementi nell'elenco.</typeparam>
      <returns>Indice in base zero dell'ultima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile compreso tra il primo elemento e l'indice, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che è compreso tra il primo elemento e l'indice specificato.</summary>
      <param name="list">Elenco in cui eseguire la ricerca.</param>
      <param name="item">Oggetto da individuare nell'elenco non modificabile. Il valore può essere null per i tipi di riferimento.</param>
      <param name="startIndex">Indice iniziale in base zero della ricerca all'indietro.</param>
      <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <typeparam name="T">Tipo di elementi nell'elenco.</typeparam>
      <returns>Indice in base zero dell'ultima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile compreso tra il primo elemento e l'indice, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Rimuove da questo elenco il valore specificato.</summary>
      <param name="list">Elenco in cui eseguire la ricerca.</param>
      <param name="value">Valore da rimuovere.</param>
      <typeparam name="T">Tipo di elementi nell'elenco.</typeparam>
      <returns>Nuovo elenco non modificabile con l'elemento rimosso o questo elenco se l'elemento non è presente nell'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Rimuove da questo elenco i valori specificati.</summary>
      <param name="list">Elenco in cui eseguire la ricerca.</param>
      <param name="items">Elementi da rimuovere se vengono trovate corrispondenze in questo elenco.</param>
      <typeparam name="T">Tipo di elementi nell'elenco.</typeparam>
      <returns>Nuovo elenco non modificabile con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary>Sostituisce il primo elemento uguale nell'elenco con l'elemento specificato.</summary>
      <param name="list">Elenco in cui eseguire la ricerca.</param>
      <param name="oldValue">Elemento da sostituire.</param>
      <param name="newValue">Elemento con cui sostituire l'elemento precedente.</param>
      <typeparam name="T">Tipo di elementi nell'elenco.</typeparam>
      <returns>Nuovo elenco, anche se il valore da sostituire è uguale al nuovo valore per tale posizione.</returns>
      <exception cref="T:System.ArgumentException">Generata quando il valore precedente non è incluso nell'elenco.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Enumera una sequenza e produce un elenco non modificabile del relativo contenuto.</summary>
      <param name="source">Sequenza da enumerare.</param>
      <typeparam name="TSource">Tipo degli elementi nella sequenza.</typeparam>
      <returns>Elenco non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary>Crea un elenco non modificabile dal contenuto corrente della raccolta del generatore.</summary>
      <param name="builder">Generatore da cui creare l'elenco non modificabile.</param>
      <typeparam name="TSource">Tipo degli elementi nell'elenco.</typeparam>
      <returns>Elenco non modificabile che contiene il contenuto corrente nella raccolta del generatore.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary>Rappresenta un elenco non modificabile, ovvero un elenco di oggetti fortemente tipizzato accessibile in base all'indice.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T">Tipo di elementi contenuti nell'elenco.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary>Aggiunge l'oggetto specificato alla fine dell'elenco non modificabile.</summary>
      <param name="value">Oggetto da aggiungere.</param>
      <returns>Nuovo elenco non modificabile con l'oggetto aggiunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Aggiunge gli elementi della raccolta specificata alla fine dell'elenco non modificabile.</summary>
      <param name="items">Raccolta i cui elementi verranno aggiunti alla fine dell'elenco.</param>
      <returns>Nuovo elenco non modificabile con gli elementi aggiunti.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary>Cerca un elemento nell'intero elenco ordinato usando l'operatore di confronto predefinito e restituisce l'indice in base zero dell'elemento.</summary>
      <param name="item">Oggetto da individuare. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <returns>Indice in base zero dell'elemento nell'elenco ordinato, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore dell'elemento o, se non è disponibile alcun elemento maggiore, il complemento bit per bit di <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">L'operatore di confronto predefinito non trova un'implementazione di comparer per il tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>Cerca un elemento nell'intero elenco ordinato usando l'operatore di confronto specificato e restituisce l'indice in base zero dell'elemento.</summary>
      <param name="item">Oggetto da individuare. Il valore può essere null per i tipi di riferimento.</param>
      <param name="comparer">Implementazione dell'operatore di confronto da usare durante il confronto di elementi oppure null per usare l'operatore di confronto predefinito.</param>
      <returns>Indice in base zero dell'elemento nell'elenco ordinato, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore dell'elemento o, se non è disponibile alcun elemento maggiore, il complemento bit per bit di <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">comparer è <see langword="null" /> e l'operatore di confronto predefinito non trova un'implementazione di comparer per il tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>Cerca un elemento in un intervallo di elementi nell'elenco ordinato usando l'operatore di confronto specificato e restituisce l'indice in base zero dell'elemento.</summary>
      <param name="index">Indice iniziale in base zero dell'intervallo in cui eseguire la ricerca.</param>
      <param name="count">Lunghezza dell'intervallo in cui eseguire la ricerca.</param>
      <param name="item">Oggetto da individuare. Il valore può essere null per i tipi di riferimento.</param>
      <param name="comparer">Implementazione dell'operatore di confronto da usare durante il confronto di elementi oppure <see langword="null" /> per usare l'operatore di confronto predefinito.</param>
      <returns>Indice in base zero dell'elemento nell'elenco ordinato, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore dell'elemento o, se non è disponibile alcun elemento maggiore, il complemento bit per bit di <paramref name="count" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">index è minore di 0 oppure <paramref name="count" /> è minore di 0.</exception>
      <exception cref="T:System.ArgumentException">index e <paramref name="count" /> non identificano un intervallo valido nell'elenco.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> è <see langword="null" /> e l'operatore di confronto predefinito non trova un'implementazione di comparer per il tipo T.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary>Rappresenta un elenco che viene modificato con allocazioni di memoria minime o nulle e in grado di produrre o compilare su istanze di elenchi non modificabili in modo molto efficiente.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary>Aggiunge un elemento all'elenco non modificabile.</summary>
      <param name="item">Elemento da aggiungere all'elenco.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Aggiunge una serie di elementi alla fine di questo elenco.</summary>
      <param name="items">Elementi da aggiungere alla fine dell'elenco.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary>Cerca un elemento nell'intero <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> usando l'operatore di confronto predefinito e restituisce l'indice in base zero dell'elemento.</summary>
      <param name="item">Oggetto da individuare. Il valore può essere null per i tipi di riferimento.</param>
      <returns>Indice in base zero dell'elemento in <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore di <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException">L'operatore di confronto predefinito <see cref="P:System.Collections.Generic.Comparer`1.Default" /> non riesce a trovare un'implementazione dell'interfaccia generica <see cref="T:System.IComparable`1" /> o dell'interfaccia <see cref="T:System.IComparable" /> per il tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>Cerca un elemento nell'intero <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> usando l'operatore di confronto specificato e restituisce l'indice in base zero dell'elemento.</summary>
      <param name="item">Oggetto da individuare. Questo valore può essere null per i tipi di riferimento.</param>
      <param name="comparer">Implementazione da usare durante il confronto di elementi oppure <see langword="null" /> per l'operatore di confronto predefinito.</param>
      <returns>Indice in base zero dell'elemento in <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore di <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> è <see langword="null" /> e mediante la proprietà <see cref="P:System.Collections.Generic.Comparer`1.Default" /> dell'operatore di confronto predefinito non è possibile rilevare un'implementazione dell'interfaccia generica <see cref="T:System.IComparable`1" /> o dell'interfaccia <see cref="T:System.IComparable" /> per il tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>Cerca un elemento nell'intervallo specificato di <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> usando l'operatore di confronto specificato e restituisce l'indice in base zero dell'elemento.</summary>
      <param name="index">Indice iniziale in base zero dell'intervallo in cui eseguire la ricerca.</param>
      <param name="count">Lunghezza dell'intervallo in cui eseguire la ricerca.</param>
      <param name="item">Oggetto da individuare. Questo valore può essere null per i tipi di riferimento.</param>
      <param name="comparer">Implementazione da usare durante il confronto di elementi oppure <see langword="null" /> per l'operatore di confronto predefinito.</param>
      <returns>Indice in base zero dell'elemento in <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore di <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> è minore di 0.
oppure
<paramref name="count" /> è minore di 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> e <paramref name="count" /> non indicano un intervallo valido nell'oggetto <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> è <see langword="null" /> e mediante la proprietà <see cref="P:System.Collections.Generic.Comparer`1.Default" /> dell'operatore di confronto predefinito non è possibile rilevare un'implementazione dell'interfaccia generica <see cref="T:System.IComparable`1" /> o dell'interfaccia <see cref="T:System.IComparable" /> per il tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary>Rimuove tutti gli elementi dall'elenco non modificabile.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary>Determina se l'elenco non modificabile contiene un valore specifico.</summary>
      <param name="item">Oggetto da individuare nell'elenco.</param>
      <returns>
        <see langword="true" /> se l'elemento è presente nell'elenco; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary>Crea un nuovo elenco non modificabile dall'elenco rappresentato da questo generatore utilizzando la funzione del convertitore.</summary>
      <param name="converter">Funzione del convertitore.</param>
      <typeparam name="TOutput">Tipo dell'output della funzione del convertitore delegato.</typeparam>
      <returns>Nuovo elenco non modificabile derivante dall'elenco rappresentato da questo generatore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary>Copia l'intero elenco non modificabile in una matrice unidimensionale compatibile, a partire dall'inizio della matrice di destinazione.</summary>
      <param name="array">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'elenco non modificabile. La matrice deve avere un'indicizzazione in base zero.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>Copia l'intero elenco non modificabile in una matrice unidimensionale compatibile, a partire dall'indice specificato della matrice di destinazione.</summary>
      <param name="array">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'elenco non modificabile. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex">Indice in base zero nella matrice in corrispondenza del quale ha inizio la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copia l'intero elenco non modificabile in una matrice unidimensionale compatibile, a partire dall'indice specificato della matrice di destinazione.</summary>
      <param name="index">Indice in base zero dell'elenco non modificabile di origine a partire dal quale viene effettuata la copia.</param>
      <param name="array">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'elenco non modificabile. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
      <param name="count">Numero degli elementi da copiare.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary>Ottiene il numero di elementi in questo elenco non modificabile.</summary>
      <returns>Numero di elementi in questo elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary>Determina se l'elenco non modificabile contiene gli elementi che corrispondono alle condizioni definite dal predicato specificato.</summary>
      <param name="match">Delegato che definisce le condizioni degli elementi da cercare.</param>
      <returns>
        <see langword="true" /> se l'elenco non modificabile contiene uno o più elementi che corrispondono alle condizioni definite dal predicato specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary>Cerca un elemento che soddisfi le condizioni definite nel predicato specificato e restituisce la prima occorrenza all'interno dell'intero elenco non modificabile.</summary>
      <param name="match">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns>Primo elemento che soddisfa le condizioni definite dal predicato specificato, se trovato; in caso contrario, viene restituito il valore predefinito del tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary>Recupera tutti gli elementi che soddisfano le condizioni definite nel predicato specificato.</summary>
      <param name="match">Delegato che definisce le condizioni degli elementi da cercare.</param>
      <returns>Elenco non modificabile contenente tutti gli elementi che corrispondono alle condizioni definite dal predicato specificato, se trovato; in caso contrario, un elenco non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Cerca un elemento che soddisfi le condizioni definite dal predicato specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che inizia dall'indice specificato e contiene il numero indicato di elementi.</summary>
      <param name="startIndex">Indice iniziale in base zero della ricerca.</param>
      <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <param name="match">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns>Indice in base zero della prima occorrenza di un elemento che corrisponde alle condizioni definite da <paramref name="match" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>Cerca un elemento che soddisfi le condizioni definite dal predicato specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile compreso tra l'indice specificato e l'ultimo elemento.</summary>
      <param name="startIndex">Indice iniziale in base zero della ricerca.</param>
      <param name="match">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns>Indice in base zero della prima occorrenza di un elemento che corrisponde alle condizioni definite da <paramref name="match" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary>Cerca un elemento che corrisponda alle condizioni definite dal predicato specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'elenco non modificabile.</summary>
      <param name="match">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns>Indice in base zero della prima occorrenza di un elemento che corrisponde alle condizioni definite da <paramref name="match" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary>Cerca un elemento che soddisfi le condizioni definite nel predicato specificato e restituisce l'ultima occorrenza all'interno dell'intero elenco non modificabile.</summary>
      <param name="match">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns>Ultimo elemento che soddisfa le condizioni definite dal predicato specificato, se trovato; in caso contrario, viene restituito il valore predefinito del tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Cerca un elemento che soddisfi le condizioni definite dal predicato specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che contiene il numero indicato di elementi e termina in corrispondenza dell'indice specificato.</summary>
      <param name="startIndex">Indice iniziale in base zero della ricerca all'indietro.</param>
      <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <param name="match">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns>Indice in base zero dell'ultima occorrenza di un elemento che corrisponde alle condizioni definite in <paramref name="match" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>Cerca un elemento che soddisfi le condizioni definite dal predicato specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile compreso tra il primo elemento e l'indice specificato.</summary>
      <param name="startIndex">Indice iniziale in base zero della ricerca all'indietro.</param>
      <param name="match">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns>Indice in base zero dell'ultima occorrenza di un elemento che corrisponde alle condizioni definite in <paramref name="match" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary>Cerca un elemento che corrisponda alle condizioni definite dal predicato specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'elenco non modificabile.</summary>
      <param name="match">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns>Indice in base zero dell'ultima occorrenza di un elemento che corrisponde alle condizioni definite in <paramref name="match" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary>Esegue l'azione specificata su ogni elemento dell'elenco.</summary>
      <param name="action">Delegato da eseguire su ogni elemento dell'elenco.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere l'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary>Crea una copia dei riferimenti di un intervallo di elementi nell'elenco non modificabile di origine.</summary>
      <param name="index">Indice in base zero in corrispondenza del quale inizia la serie.</param>
      <param name="count">Numero di elementi nell'intervallo.</param>
      <returns>Copia dei riferimenti di un intervallo di elementi nell'elenco non modificabile di origine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza nell'intervallo di elementi nell'elenco non modificabile.</summary>
      <param name="item">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <returns>Indice in base zero della prima occorrenza di <paramref name="item" /> all'interno dell'intervallo di elementi nell'elenco non modificabile, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che è compreso tra l'indice specificato e l'ultimo elemento.</summary>
      <param name="item">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <param name="index">Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <returns>Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile compreso tra <paramref name="index" /> e l'ultimo elemento, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che inizia in corrispondenza dell'indice specificato e contiene il numero di elementi specificato.</summary>
      <param name="item">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <param name="index">Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <returns>Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile che inizia in corrispondenza di <paramref name="index" /> e contiene il numero di elementi corrispondente a <paramref name="count" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'oggetto <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> che inizia in corrispondenza dell'indice specificato e contiene il numero di elementi specificato.</summary>
      <param name="item">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <param name="index">Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <param name="count">Numero di elementi in cui eseguire la ricerca.</param>
      <param name="equalityComparer">Operatore di confronto del valore da usare per confrontare l'uguaglianza degli elementi.</param>
      <returns>Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile che inizia in corrispondenza di <paramref name="index" /> e contiene il numero di elementi corrispondente a <paramref name="count" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary>Inserisce un elemento nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero nel quale <paramref name="item" /> deve essere inserito.</param>
      <param name="item">Oggetto da inserire nell'elenco non modificabile.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserisce gli elementi di una raccolta nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero in corrispondenza del quale devono essere inseriti i nuovi elementi.</param>
      <param name="items">Raccolta i cui elementi devono essere inseriti nell'elenco non modificabile. La raccolta non può essere <see langword="null" />, ma può contenere elementi Null se il tipo <c>T</c> è un tipo di riferimento.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary>Ottiene o imposta il valore per un determinato indice nell'elenco.</summary>
      <param name="index">Indice dell'elemento da ottenere o impostare.</param>
      <returns>Valore in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary>Ottiene un riferimento di sola lettura al valore per un <paramref name="index" /> specificato nell'elenco.</summary>
      <param name="index">Indice dell'elemento desiderato.</param>
      <returns>Riferimento di sola lettura al valore in corrispondenza dell'<paramref name="index" /> specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza nell'intero elenco non modificabile.</summary>
      <param name="item">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <returns>Indice in base zero dell'ultima occorrenza di <paramref name="item" /> all'interno dell'intero elenco non modificabile, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che è compreso tra il primo elemento e l'indice specificato.</summary>
      <param name="item">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <param name="startIndex">Indice iniziale in base zero della ricerca all'indietro.</param>
      <returns>Indice in base zero dell'ultima occorrenza di <paramref name="item" /> all'interno dell'intervallo di elementi dell'elenco non modificabile compreso tra il primo elemento e <paramref name="index" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che contiene il numero di elementi specificato e termina in corrispondenza dell'indice specificato.</summary>
      <param name="item">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <param name="startIndex">Indice iniziale in base zero della ricerca all'indietro.</param>
      <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <returns>Indice in base zero dell'ultima occorrenza di <paramref name="item" /> all'interno dell'intervallo di elementi nell'elenco non modificabile che contiene un numero di elementi corrispondente a <paramref name="count" /> e termina in corrispondenza di <paramref name="index" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che contiene il numero di elementi specificato e termina in corrispondenza dell'indice specificato.</summary>
      <param name="item">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <param name="startIndex">Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <param name="count">Numero di elementi in cui eseguire la ricerca.</param>
      <param name="equalityComparer">Operatore di confronto del valore da usare per confrontare l'uguaglianza degli elementi.</param>
      <returns>Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile che inizia in corrispondenza di <paramref name="index" /> e contiene il numero di elementi corrispondente a <paramref name="count" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary>Rimuove la prima occorrenza di un oggetto specifico dall'elenco non modificabile.</summary>
      <param name="item">Oggetto da rimuovere dall'elenco.</param>
      <returns>
        <see langword="true" /> se l'elemento è stato rimosso correttamente dall'elenco; in caso contrario, <see langword="false" />. Questo metodo restituisce inoltre <see langword="false" /> se l'elemento non viene trovato nell'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary>Rimuove tutti gli elementi che corrispondono alle condizioni definite dal predicato specificato.</summary>
      <param name="match">Delegato che definisce le condizioni degli elementi da rimuovere.</param>
      <returns>Numero di elementi rimossi dall'elenco non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary>Rimuove l'elemento presente nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero dell'elemento da rimuovere dall'elenco.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary>Inverte l'ordine degli elementi nell'intero elenco non modificabile.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary>Inverte l'ordine degli elementi nell'intervallo specificato dell'elenco non modificabile.</summary>
      <param name="index">Indice iniziale in base zero dell'intervallo da invertire.</param>
      <param name="count">Numero di elementi nell'intervallo da invertire.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary>Ordina gli elementi nell'intero elenco non modificabile usando l'operatore di confronto predefinito.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Ordina gli elementi nell'intero elenco non modificabile usando l'operatore di confronto specificato.</summary>
      <param name="comparer">Implementazione da usare durante il confronto di elementi oppure <see langword="null" /> per usare l'operatore di confronto predefinito (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary>Ordina gli elementi nell'intero elenco non modificabile usando l'oggetto di confronto specificato.</summary>
      <param name="comparison">Oggetto da usare quando si confrontano gli elementi.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Ordina gli elementi di un intervallo di elementi dell'elenco non modificabile usando l'operatore di confronto specificato.</summary>
      <param name="index">Indice iniziale in base zero dell'intervallo da ordinare.</param>
      <param name="count">Lunghezza dell'intervallo da ordinare.</param>
      <param name="comparer">Implementazione da usare durante il confronto di elementi oppure <see langword="null" /> per usare l'operatore di confronto predefinito (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ottiene un valore che indica se questa istanza è di sola lettura.</summary>
      <returns>Sempre <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia gli elementi dell'elenco in una matrice, iniziando in corrispondenza di un particolare indice di matrice.</summary>
      <param name="array">Matrice unidimensionale che è la destinazione degli elementi copiati dall'elenco. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Ottiene un valore che indica se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe).</summary>
      <returns>
        <see langword="true" /> se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe); in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Ottiene un oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary>Aggiunge un elemento all'elenco.</summary>
      <param name="value">Oggetto da aggiungere all'elenco.</param>
      <returns>La posizione nella quale è inserito il nuovo elemento o -1 per indicare che l'elemento non è stato inserito nella raccolta.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary>Rimuove tutti gli elementi dall'elenco.</summary>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary>Determina se l'elenco contiene un valore specifico.</summary>
      <param name="value">Oggetto da individuare nell'elenco.</param>
      <returns>
        <see langword="true" /> se <see cref="T:System.Object" /> è presente nell'elenco; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina l'indice di un elemento specifico nell'elenco.</summary>
      <param name="value">Oggetto da individuare nell'elenco.</param>
      <returns>Indice di <paramref name="value" />, se presente nell'elenco; in caso contrario, -1.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserisce un elemento nell'elenco in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero nel quale <paramref name="value" /> deve essere inserito.</param>
      <param name="value">Oggetto da inserire nell'elenco.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary>Ottiene un valore che indica se le dimensioni dell'oggetto <see cref="T:System.Collections.IList" /> sono fisse.</summary>
      <returns>
        <see langword="true" /> se <see cref="T:System.Collections.IList" /> è di dimensioni fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary>Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns>
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary>Ottiene o imposta l'oggetto <see cref="T:System.Object" /> in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice.</param>
      <returns>Oggetto in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary>Rimuove la prima occorrenza di un oggetto specifico dall'elenco.</summary>
      <param name="value">Oggetto da rimuovere dall'elenco.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary>Crea un elenco non modificabile basato sul contenuto di questa istanza.</summary>
      <returns>Elenco non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary>Determina se ogni elemento nell'elenco non modificabile corrisponde alle condizioni definite dal predicato specificato.</summary>
      <param name="match">Delegato che definisce le condizioni per verificare gli elementi.</param>
      <returns>
        <see langword="true" /> se ogni elemento nell'elenco non modificabile corrisponde alle condizioni definite dal predicato specificato; in caso contrario, <see langword="false" />. Se l'elenco è privo di elementi, il valore restituito è <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary>Rimuove tutti gli elementi dall'elenco non modificabile.</summary>
      <returns>Elenco vuoto che mantiene lo stesso ordinamento o la stessa semantica non ordinata di questa istanza.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary>Determina se questo elenco non modificabile contiene il valore specificato.</summary>
      <param name="value">Valore da individuare.</param>
      <returns>
        <see langword="true" /> se l'elenco contiene il valore specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary>Converte gli elementi dell'elenco non modificabile corrente in un altro tipo e restituisce un elenco contenente gli elementi convertiti.</summary>
      <param name="converter">Delegato che converte ogni elemento da un tipo in un altro.</param>
      <typeparam name="TOutput">Tipo degli elementi della matrice di destinazione.</typeparam>
      <returns>Elenco del tipo di destinazione contenente gli elementi convertiti dall'oggetto <see cref="T:System.Collections.Immutable.ImmutableList`1" /> corrente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary>Copia l'intero elenco non modificabile in una matrice unidimensionale compatibile, a partire dall'inizio della matrice di destinazione.</summary>
      <param name="array">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'elenco non modificabile. La matrice deve avere un'indicizzazione in base zero.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary>Copia l'intero elenco non modificabile in una matrice unidimensionale compatibile, a partire dall'indice specificato della matrice di destinazione.</summary>
      <param name="array">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'elenco non modificabile. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copia un intervallo di elementi dall'elenco non modificabile in una matrice unidimensionale compatibile, a partire dall'indice specificato della matrice di destinazione.</summary>
      <param name="index">Indice in base zero dell'elenco non modificabile di origine a partire dal quale viene effettuata la copia.</param>
      <param name="array">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'elenco non modificabile. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex">Indice in base zero nella matrice in corrispondenza del quale ha inizio la copia.</param>
      <param name="count">Numero degli elementi da copiare.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary>Ottiene il numero di elementi contenuti nell'elenco.</summary>
      <returns>Numero di elementi contenuti nell'elenco.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary>Ottiene un set vuoto con l'operatore di confronto di ordinamento predefinito.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary>Enumera il contenuto di un albero binario.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary>Ottiene l'elemento in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns>Elemento in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary>Rilascia le risorse usate dall'istanza corrente della classe <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary>Sposta l'enumerazione all'elemento successivo dell'elenco non modificabile.</summary>
      <returns>
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo; <see langword="false" /> se l'enumeratore ha superato la fine dell'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary>Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento dell'elenco non modificabile.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>L'elemento corrente.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary>Determina se l'elenco non modificabile contiene gli elementi che corrispondono alle condizioni definite dal predicato specificato.</summary>
      <param name="match">Delegato che definisce le condizioni degli elementi da cercare.</param>
      <returns>
        <see langword="true" /> se l'elenco non modificabile contiene uno o più elementi che corrispondono alle condizioni definite dal predicato specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary>Cerca un elemento che soddisfi le condizioni definite nel predicato specificato e restituisce la prima occorrenza all'interno dell'intero elenco non modificabile.</summary>
      <param name="match">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns>Primo elemento che soddisfa le condizioni definite dal predicato specificato, se trovato; in caso contrario, viene restituito il valore predefinito del tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary>Recupera tutti gli elementi che soddisfano le condizioni definite nel predicato specificato.</summary>
      <param name="match">Delegato che definisce le condizioni degli elementi da cercare.</param>
      <returns>Elenco non modificabile contenente tutti gli elementi che corrispondono alle condizioni definite dal predicato specificato, se trovato; in caso contrario, un elenco non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Cerca un elemento che soddisfi le condizioni definite dal predicato specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che inizia dall'indice specificato e contiene il numero indicato di elementi.</summary>
      <param name="startIndex">Indice iniziale in base zero della ricerca.</param>
      <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <param name="match">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns>Indice in base zero della prima occorrenza di un elemento che corrisponde alle condizioni definite dalla corrispondenza, se trovato; in caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>Cerca un elemento che soddisfi le condizioni definite dal predicato specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile compreso tra l'indice specificato e l'ultimo elemento.</summary>
      <param name="startIndex">Indice iniziale in base zero della ricerca.</param>
      <param name="match">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns>Indice in base zero della prima occorrenza di un elemento che corrisponde alle condizioni definite dalla corrispondenza, se trovato; in caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary>Cerca un elemento che corrisponda alle condizioni definite dal predicato specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'elenco non modificabile.</summary>
      <param name="match">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns>Indice in base zero della prima occorrenza di un elemento che corrisponde alle condizioni definite dalla corrispondenza, se trovato; in caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary>Cerca un elemento che soddisfi le condizioni definite nel predicato specificato e restituisce l'ultima occorrenza all'interno dell'intero elenco non modificabile.</summary>
      <param name="match">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns>Ultimo elemento che soddisfa le condizioni definite dal predicato specificato, se trovato; in caso contrario, viene restituito il valore predefinito del tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Cerca un elemento che soddisfi le condizioni definite dal predicato specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che contiene il numero indicato di elementi e termina in corrispondenza dell'indice specificato.</summary>
      <param name="startIndex">Indice iniziale in base zero della ricerca all'indietro.</param>
      <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <param name="match">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns>Indice in base zero dell'ultima occorrenza di un elemento che corrisponde alle condizioni definite in <paramref name="match" />, se trovato; in caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>Cerca un elemento che soddisfi le condizioni definite dal predicato specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile compreso tra il primo elemento e l'indice specificato.</summary>
      <param name="startIndex">Indice iniziale in base zero della ricerca all'indietro.</param>
      <param name="match">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns>Indice in base zero dell'ultima occorrenza di un elemento che corrisponde alle condizioni definite in <paramref name="match" />, se trovato; in caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary>Cerca un elemento che corrisponda alle condizioni definite dal predicato specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'elenco non modificabile.</summary>
      <param name="match">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns>Indice in base zero dell'ultima occorrenza di un elemento che corrisponde alle condizioni definite in <paramref name="match" />, se trovato; in caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary>Esegue l'azione specificata su ciascun elemento dell'elenco non modificabile.</summary>
      <param name="action">Delegato da eseguire su ogni elemento dell'elenco non modificabile.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere l'elenco non modificabile.</summary>
      <returns>Enumeratore che può essere usato per scorrere l'elenco non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary>Crea una copia dei riferimenti di un intervallo di elementi nell'elenco non modificabile di origine.</summary>
      <param name="index">Indice in base zero in corrispondenza del quale inizia la serie.</param>
      <param name="count">Numero di elementi nell'intervallo.</param>
      <returns>Copia dei riferimenti di un intervallo di elementi nell'elenco non modificabile di origine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza nell'intero elenco non modificabile.</summary>
      <param name="value">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <returns>Indice in base zero della prima occorrenza di <paramref name="value" /> all'interno dell'intero elenco non modificabile, se presente; in caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco che inizia in corrispondenza dell'indice specificato e contiene il numero di elementi specificato.</summary>
      <param name="item">Oggetto da individuare nell'elenco. Il valore può essere null per i tipi di riferimento.</param>
      <param name="index">Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns>Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco che inizia in corrispondenza dell'indice e contiene il numero di elementi, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary>Inserisce l'oggetto specificato nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero in corrispondenza del quale inserire l'oggetto.</param>
      <param name="item">Oggetto da inserire.</param>
      <returns>Nuovo elenco non modificabile dopo l'inserimento dell'oggetto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserisce gli elementi di una raccolta nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero in corrispondenza del quale inserire gli elementi.</param>
      <param name="items">Raccolta i cui elementi devono essere inseriti.</param>
      <returns>Nuovo elenco non modificabile dopo l'inserimento degli elementi.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary>Ottiene un valore che indica se questo elenco è vuoto.</summary>
      <returns>
        <see langword="true" /> se l'elenco è vuoto; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary>Ottiene l'elemento in corrispondenza dell'indice specificato dell'elenco.</summary>
      <param name="index">Indice dell'elemento da recuperare.</param>
      <returns>Elemento in corrispondenza dell'indice specificato.</returns>
      <exception cref="T:System.IndexOutOfRangeException">In un'operazione get <paramref name="index" /> è un valore negativo o non minore di <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary>Ottiene un riferimento di sola lettura all'elemento del set in corrispondenza dell'<paramref name="index" /> specificato.</summary>
      <param name="index">Indice in base zero dell'elemento nel set da restituire.</param>
      <returns>Riferimento di sola lettura all'elemento in corrispondenza della posizione specificata.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> è negativo o non minore di <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco che contiene il numero di elementi specificato e termina in corrispondenza dell'indice specificato.</summary>
      <param name="item">Oggetto da individuare nell'elenco. Il valore può essere null per i tipi di riferimento.</param>
      <param name="index">Indice iniziale in base zero della ricerca all'indietro.</param>
      <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns>Indice in base zero dell'ultima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco che contiene il numero di elementi e termina in corrispondenza dell'indice, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary>Rimuove la prima occorrenza dell'oggetto specificato da questo elenco non modificabile.</summary>
      <param name="value">Oggetto da rimuovere.</param>
      <returns>Nuovo elenco con l'oggetto rimosso o questo elenco se l'oggetto specificato non è presente nell'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Rimuove la prima occorrenza dell'oggetto che corrisponde al valore specificato da questo elenco non modificabile.</summary>
      <param name="value">Valore dell'elemento da rimuovere dall'elenco.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns>Nuovo elenco con l'oggetto rimosso o questo elenco se l'oggetto specificato non è presente nell'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>Rimuove tutti gli elementi che corrispondono alle condizioni definite dal predicato specificato.</summary>
      <param name="match">Delegato che definisce le condizioni degli elementi da rimuovere.</param>
      <returns>Nuovo elenco con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary>Rimuove l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero dell'elemento da rimuovere.</param>
      <returns>Nuovo elenco con l'elemento rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove un intervallo di elementi da questo elenco non modificabile.</summary>
      <param name="items">Raccolta i cui elementi devono essere rimossi se vengono trovate corrispondenze in questo elenco.</param>
      <returns>Nuovo elenco con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Rimuove da questo elenco i valori specificati.</summary>
      <param name="items">Elementi da rimuovere se vengono trovate corrispondenze in questo elenco.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns>Nuovo elenco con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Rimuove un intervallo di elementi, a partire dall'indice specificato e che contiene il numero di elementi specificato, da questo elenco non modificabile.</summary>
      <param name="index">Indice iniziale da quale iniziare la rimozione.</param>
      <param name="count">Numero di elementi da rimuovere.</param>
      <returns>Nuovo elenco con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary>Sostituisce l'elemento specificato nell'elenco non modificabile con un nuovo elemento.</summary>
      <param name="oldValue">Elemento da sostituire.</param>
      <param name="newValue">Elemento con cui sostituire <paramref name="oldValue" />.</param>
      <returns>Nuovo elenco con l'elemento sostituito, anche se è uguale all'elemento precedente.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> non esiste nell'elenco non modificabile.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Sostituisce l'elemento specificato nell'elenco non modificabile con un nuovo elemento.</summary>
      <param name="oldValue">Elemento da sostituire nell'elenco.</param>
      <param name="newValue">Elemento con cui sostituire <paramref name="oldValue" />.</param>
      <param name="equalityComparer">Operatore di confronto da usare per verificare l'uguaglianza.</param>
      <returns>Nuovo elenco con l'oggetto sostituito o questo elenco se l'oggetto specificato non è presente nell'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary>Inverte l'ordine degli elementi nell'intero elenco non modificabile.</summary>
      <returns>Elenco invertito.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary>Inverte l'ordine degli elementi nell'intervallo specificato dell'elenco non modificabile.</summary>
      <param name="index">Indice iniziale in base zero dell'intervallo da invertire.</param>
      <param name="count">Numero di elementi nell'intervallo da invertire.</param>
      <returns>Elenco invertito.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary>Sostituisce un elemento in una determinata posizione nell'elenco non modificabile con l'elemento specificato.</summary>
      <param name="index">Posizione nell'elenco dell'elemento da sostituire.</param>
      <param name="value">Elemento con cui sostituire l'elemento precedente.</param>
      <returns>Nuovo elenco con l'elemento sostituito, anche se è uguale all'elemento precedente nella posizione specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary>Ordina gli elementi nell'intero elenco non modificabile usando l'operatore di confronto predefinito.</summary>
      <returns>Elenco ordinato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Ordina gli elementi nell'intero elenco non modificabile usando l'operatore di confronto specificato.</summary>
      <param name="comparer">Implementazione da usare durante il confronto di elementi oppure <see langword="null" /> per usare l'operatore di confronto predefinito (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns>Elenco ordinato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary>Ordina gli elementi nell'intero elenco non modificabile usando l'operatore di confronto specificato.</summary>
      <param name="comparison">Delegato da usare quando si confrontano gli elementi.</param>
      <returns>Elenco ordinato.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Ordina un intervallo di elementi nell'elenco non modificabile usando l'operatore di confronto specificato.</summary>
      <param name="index">Indice iniziale in base zero dell'intervallo da ordinare.</param>
      <param name="count">Lunghezza dell'intervallo da ordinare.</param>
      <param name="comparer">Implementazione da usare durante il confronto di elementi oppure <see langword="null" /> per usare l'operatore di confronto predefinito (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns>Elenco ordinato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Aggiunge l'elemento specificato all'elenco non modificabile.</summary>
      <param name="item">Elemento da aggiungere.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Rimuove tutti gli elementi dall'elenco non modificabile.</summary>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns>
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Rimuove la prima occorrenza di un oggetto specifico dall'elenco non modificabile.</summary>
      <param name="item">Oggetto da rimuovere.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> è stato rimosso correttamente dall'elenco; in caso contrario, <see langword="false" />. Questo metodo restituisce <see langword="false" /> anche se <paramref name="item" /> non viene trovato nell'elenco originale.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere l'elenco non modificabile.</summary>
      <returns>Enumeratore che può essere usato per scorrere l'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Inserisce un oggetto nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero nel quale <paramref name="item" /> deve essere inserito.</param>
      <param name="item">Oggetto da inserire.</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Ottiene o imposta il valore in corrispondenza dell'indice specificato.</summary>
      <param name="index" />
      <exception cref="T:System.IndexOutOfRangeException">Generata da get quando <paramref name="index" /> è negativo o non minore di <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">Generata sempre da set.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Rimuove il valore in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero dell'elemento da rimuovere.</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia l'intero elenco non modificabile in una matrice unidimensionale compatibile, a partire dall'indice della matrice specificato.</summary>
      <param name="array">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'elenco non modificabile.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary>Vedere l'interfaccia <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary>Vedere <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere l'elenco non modificabile.</summary>
      <returns>Enumeratore che può essere usato per scorrere l'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary>Aggiunge un elemento all'elenco non modificabile.</summary>
      <param name="value">Oggetto da aggiungere all'elenco.</param>
      <returns>La posizione nella quale è inserito il nuovo elemento o -1 per indicare che l'elemento non è stato inserito nell'elenco.</returns>
      <exception cref="T:System.NotSupportedException">Sempre generato.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary>Rimuove tutti gli elementi dall'elenco non modificabile.</summary>
      <exception cref="T:System.NotSupportedException">Sempre generato.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determina se l'elenco non modificabile contiene un valore specifico.</summary>
      <param name="value">Oggetto da individuare nell'elenco.</param>
      <returns>
        <see langword="true" /> se l'oggetto viene trovato nell'elenco; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina l'indice di un elemento specifico nell'elenco non modificabile.</summary>
      <param name="value">Oggetto da individuare nell'elenco.</param>
      <returns>Indice di <paramref name="value" />, se presente nell'elenco; in caso contrario, -1.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserisce un elemento nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero nel quale <paramref name="value" /> deve essere inserito.</param>
      <param name="value">Oggetto da inserire nell'elenco.</param>
      <exception cref="T:System.NotSupportedException">Sempre generato.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary>Ottiene un valore che indica se <see cref="T:System.Collections.IList" /> ha dimensioni fisse.</summary>
      <returns>
        <see langword="true" /> se <see cref="T:System.Collections.IList" /> è di dimensioni fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary>Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns>
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary>Ottiene o imposta l'oggetto <see cref="T:System.Object" /> in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice.</param>
      <returns>Valore in corrispondenza dell'indice specificato.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Generata da get quando <paramref name="index" /> è negativo o non minore di <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">Generata sempre da set.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary>Rimuove la prima occorrenza di un oggetto specifico dall'elenco non modificabile.</summary>
      <param name="value">Oggetto da rimuovere dall'elenco.</param>
      <exception cref="T:System.NotSupportedException">Sempre generato.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Rimuove l'elemento presente nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero dell'elemento da rimuovere.</param>
      <exception cref="T:System.NotSupportedException">Sempre generato.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>Aggiunge il valore specificato a questo elenco non modificabile.</summary>
      <param name="value">Il valore da aggiungere.</param>
      <returns>Nuovo elenco con l'elemento aggiunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Aggiunge i valori specificati a questo elenco non modificabile.</summary>
      <param name="items">Valori da aggiungere.</param>
      <returns>Nuovo elenco con gli elementi aggiunti.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>Recupera un elenco vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</summary>
      <returns>Elenco vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>Inserisce l'elemento specificato nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in corrispondenza del quale inserire il valore.</param>
      <param name="item">Elemento da inserire.</param>
      <returns>Nuovo elenco non modificabile che include l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserisce gli elementi specificati nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in corrispondenza del quale inserire gli elementi.</param>
      <param name="items">Elementi da inserire.</param>
      <returns>Nuovo elenco non modificabile che include gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Rimuove dall'elenco l'elemento con il valore specificato.</summary>
      <param name="value">Valore dell'elemento da rimuovere dall'elenco.</param>
      <param name="equalityComparer">Operatore di confronto da usare per verificare l'uguaglianza degli elementi.</param>
      <returns>Nuovo <see cref="T:System.Collections.Immutable.ImmutableList`1" /> con l'elemento specificato rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>Rimuove tutti gli elementi che corrispondono alle condizioni definite dal predicato specificato.</summary>
      <param name="match">Delegato che definisce le condizioni degli elementi da rimuovere.</param>
      <returns>Nuovo elenco non modificabile con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>Rimuove l'elemento presente nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice dell'elemento da rimuovere.</param>
      <returns>Nuovo elenco con l'elemento rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Rimuove da questo elenco non modificabile un intervallo di elementi che corrispondono agli elementi specificati.</summary>
      <param name="items">Intervallo di elementi da rimuovere dall'elenco, se trovato.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare per confrontare gli elementi.</param>
      <returns>Elenco non modificabile con gli elementi rimossi.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> o <paramref name="equalityComparer" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>Rimuove da questo elenco il numero di elementi specificato nella posizione specificata.</summary>
      <param name="index">Indice iniziale dell'intervallo di elementi da rimuovere.</param>
      <param name="count">Numero di elementi da rimuovere.</param>
      <returns>Nuovo elenco con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Sostituisce un elemento nell'elenco con l'elemento specificato.</summary>
      <param name="oldValue">Elemento da sostituire.</param>
      <param name="newValue">Elemento con cui sostituire l'elemento precedente.</param>
      <param name="equalityComparer">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns>Nuovo elenco.</returns>
      <exception cref="T:System.ArgumentException">Generata quando il valore precedente non è incluso nell'elenco.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>Sostituisce un elemento in una determinata posizione nell'elenco con l'elemento specificato.</summary>
      <param name="index">Posizione nell'elenco dell'elemento da sostituire.</param>
      <param name="value">Elemento con cui sostituire l'elemento precedente.</param>
      <returns>Nuovo elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary>Crea un elenco con lo stesso contenuto di questo elenco e che può essere modificato in modo efficiente tra più operazioni tramite interfacce standard modificabili.</summary>
      <returns>Elenco creato con lo stesso contenuto di questo elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary>Determina se ogni elemento nell'elenco non modificabile corrisponde alle condizioni definite dal predicato specificato.</summary>
      <param name="match">Delegato che definisce le condizioni per verificare gli elementi.</param>
      <returns>
        <see langword="true" /> se ogni elemento nell'elenco non modificabile corrisponde alle condizioni definite dal predicato specificato; in caso contrario, <see langword="false" />. Se l'elenco è privo di elementi, il valore restituito è <see langword="true" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary>Fornisce un set di metodi di inizializzazione per le istanze della classe <see cref="T:System.Collections.Immutable.ImmutableQueue`1" />.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary>Crea una coda non modificabile vuota.</summary>
      <typeparam name="T">Tipo di elementi da archiviare nella coda non modificabile.</typeparam>
      <returns>Coda non modificabile vuota.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary>Crea una nuova coda non modificabile che contiene l'elemento specificato.</summary>
      <param name="item">Elemento con cui prepopolare la coda.</param>
      <typeparam name="T">Tipo di elementi nella coda non modificabile.</typeparam>
      <returns>Nuova coda non modificabile che contiene l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary>Crea una nuova coda non modificabile che contiene la matrice di elementi specificata.</summary>
      <param name="items">Matrice che contiene gli elementi con cui prepopolare la coda.</param>
      <typeparam name="T">Tipo di elementi nella coda non modificabile.</typeparam>
      <returns>Nuova coda non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea una nuova coda non modificabile che contiene gli elementi specificati.</summary>
      <param name="items">Elementi da aggiungere alla coda prima che venga applicata l'immutabilità.</param>
      <typeparam name="T">Tipo di elementi contenuti nella coda.</typeparam>
      <returns>Coda non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary>Rimuove l'elemento all'inizio della coda non modificabile e restituisce la nuova coda.</summary>
      <param name="queue">Coda da cui rimuovere l'elemento.</param>
      <param name="value">Quando termina, questo metodo contiene l'elemento all'inizio della coda.</param>
      <typeparam name="T">Tipo di elementi nella coda non modificabile.</typeparam>
      <returns>Nuova coda con l'elemento rimosso.</returns>
      <exception cref="T:System.InvalidOperationException">Lo stack è vuoto.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary>Rappresenta una coda non modificabile.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T">Tipo di elementi contenuti nella coda.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary>Rimuove tutti gli oggetti dalla coda non modificabile.</summary>
      <returns>Coda non modificabile vuota.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary>Rimuove l'elemento all'inizio della coda non modificabile e restituisce la nuova coda.</summary>
      <returns>Nuova coda non modificabile; mai <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">La coda è vuota.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary>Rimuove l'elemento all'inizio della coda non modificabile e restituisce la nuova coda.</summary>
      <param name="value">Quando termina, questo metodo contiene l'elemento all'inizio della coda.</param>
      <returns>Nuova coda non modificabile da cui è stato rimosso l'elemento iniziale.</returns>
      <exception cref="T:System.InvalidOperationException">La coda è vuota.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary>Ottiene una coda non modificabile vuota.</summary>
      <returns>Coda non modificabile vuota.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary>Aggiunge un elemento alla fine della coda non modificabile e restituisce la nuova coda.</summary>
      <param name="value">Elemento da aggiungere.</param>
      <returns>Nuova coda non modificabile.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary>Enumera il contenuto di una coda non modificabile senza allocare memoria.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary>Ottiene l'elemento in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns>Elemento in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary>Sposta l'enumeratore all'elemento successivo della coda non modificabile.</summary>
      <returns>
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo; <see langword="false" /> se l'enumeratore ha superato la fine della coda.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la coda non modificabile.</summary>
      <returns>Enumeratore che può essere usato per scorrere gli elementi della coda.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary>Ottiene un valore che indica se questa coda non modificabile è vuota o meno.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <returns>
        <see langword="true" /> se la coda è vuota; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary>Restituisce l'elemento all'inizio della coda non modificabile senza rimuoverlo.</summary>
      <returns>Elemento all'inizio della coda.</returns>
      <exception cref="T:System.InvalidOperationException">La coda è vuota.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary>Ottiene un riferimento di sola lettura all'elemento all'inizio della coda.</summary>
      <exception cref="T:System.InvalidOperationException">La coda è vuota.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns>Oggetto <see cref="T:System.Collections.IEnumerator" /> che può essere usato per eseguire l'iterazione della raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary>Rimuove tutti gli elementi dalla coda non modificabile.</summary>
      <returns>Coda non modificabile vuota.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary>Rimuove l'elemento all'inizio della coda non modificabile e restituisce la nuova coda.</summary>
      <returns>Nuova coda non modificabile; mai <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary>Aggiunge un elemento alla fine della coda non modificabile e restituisce la nuova coda.</summary>
      <param name="value">Elemento da aggiungere.</param>
      <returns>Nuova coda non modificabile.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary>Fornisce un set di metodi di inizializzazione per le istanze della classe <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" />.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary>Crea un dizionario ordinato non modificabile vuoto.</summary>
      <typeparam name="TKey">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns>Dizionario ordinato non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary>Crea un dizionario ordinato non modificabile vuoto che usa l'operatore di confronto della chiave specificato.</summary>
      <param name="keyComparer">Implementazione da usare per determinare l'uguaglianza delle chiavi nel dizionario.</param>
      <typeparam name="TKey">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns>Dizionario ordinato non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un dizionario ordinato non modificabile vuoto che usa gli operatori di confronto della chiave e del valore specificati.</summary>
      <param name="keyComparer">Implementazione da usare per determinare l'uguaglianza delle chiavi nel dizionario.</param>
      <param name="valueComparer">Implementazione da usare per determinare l'uguaglianza dei valori nel dizionario.</param>
      <typeparam name="TKey">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns>Dizionario ordinato non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary>Crea un nuovo generatore di dizionari ordinati non modificabili.</summary>
      <typeparam name="TKey">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns>Generatore di raccolte non modificabili.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary>Crea un nuovo generatore di dizionari ordinati non modificabili.</summary>
      <param name="keyComparer">Operatore di confronto della chiave.</param>
      <typeparam name="TKey">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns>Generatore di raccolte non modificabili.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un nuovo generatore di dizionari ordinati non modificabili.</summary>
      <param name="keyComparer">Operatore di confronto della chiave.</param>
      <param name="valueComparer">Operatore di confronto del valore.</param>
      <typeparam name="TKey">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns>Generatore di raccolte non modificabili.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crea un nuovo dizionario ordinato non modificabile dall'intervallo di elementi specificato con l'operatore di confronto della chiave specificato.</summary>
      <param name="keyComparer">Implementazione dell'operatore di confronto da usare per valutare l'uguaglianza e l'ordinamento delle chiavi.</param>
      <param name="items">Elementi da aggiungere al dizionario ordinato.</param>
      <typeparam name="TKey">Tipo delle chiavi archiviate nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori archiviati nel dizionario.</typeparam>
      <returns>Nuovo dizionario ordinato non modificabile che contiene gli elementi specificati e usa l'operatore di confronto della chiave specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crea un nuovo dizionario ordinato non modificabile dall'intervallo di elementi specificato con gli operatori di confronto del valore e della chiave specificati.</summary>
      <param name="keyComparer">Implementazione dell'operatore di confronto da usare per confrontare l'uguaglianza e l'ordinamento delle chiavi.</param>
      <param name="valueComparer">Implementazione dell'operatore di confronto da usare per confrontare l'uguaglianza e l'ordinamento dei valori.</param>
      <param name="items">Elementi da aggiungere al dizionario ordinato prima che diventi non modificabile.</param>
      <typeparam name="TKey">Tipo delle chiavi archiviate nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori archiviati nel dizionario.</typeparam>
      <returns>Dizionario ordinato non modificabile che contiene gli elementi specificati e usa gli operatori di confronto specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crea un dizionario ordinato non modificabile che contiene gli elementi specificati e usa l'operatore di confronto predefinito.</summary>
      <param name="items">Elementi da aggiungere al dizionario ordinato prima che diventi non modificabile.</param>
      <typeparam name="TKey">Tipo delle chiavi archiviate nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori archiviati nel dizionario.</typeparam>
      <returns>Dizionario ordinato non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Enumera una sequenza di coppie chiave/valore e produce un dizionario ordinato non modificabile del relativo contenuto.</summary>
      <param name="source">Sequenza di coppie chiave/valore da enumerare.</param>
      <typeparam name="TKey">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo di valori nel dizionario.</typeparam>
      <returns>Dizionario ordinato non modificabile che contiene le coppie chiave/valore nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary>Enumera una sequenza di coppie chiave/valore e produce un dizionario non modificabile del relativo contenuto usando l'operatore di confronto della chiave specificato.</summary>
      <param name="source">Sequenza di coppie chiave/valore da enumerare.</param>
      <param name="keyComparer">Operatore di confronto della chiave da usare durante la compilazione del dizionario non modificabile.</param>
      <typeparam name="TKey">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo di valori nel dizionario.</typeparam>
      <returns>Dizionario ordinato non modificabile che contiene le coppie chiave/valore nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Enumera una sequenza di coppie chiave/valore e produce un dizionario ordinato non modificabile del relativo contenuto usando gli operatori di confronto della chiave e del valore specificati.</summary>
      <param name="source">Sequenza di coppie chiave/valore da enumerare.</param>
      <param name="keyComparer">Operatore di confronto della chiave da usare durante la compilazione del dizionario non modificabile.</param>
      <param name="valueComparer">Operatore di confronto del valore da usare per il dizionario non modificabile.</param>
      <typeparam name="TKey">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo di valori nel dizionario.</typeparam>
      <returns>Dizionario ordinato non modificabile che contiene le coppie chiave/valore nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary>Crea un dizionario ordinato non modificabile dal contenuto corrente del dizionario del generatore.</summary>
      <param name="builder">Generatore da cui creare il dizionario ordinato non modificabile.</param>
      <typeparam name="TKey">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo di valori nel dizionario.</typeparam>
      <returns>Dizionario ordinato non modificabile che contiene il contenuto corrente nel dizionario del generatore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Enumera e trasforma una sequenza e produce un dizionario ordinato non modificabile del relativo contenuto.</summary>
      <param name="source">Sequenza da enumerare per generare il dizionario.</param>
      <param name="keySelector">Funzione che produrrà la chiave per il dizionario da ogni elemento della sequenza.</param>
      <param name="elementSelector">Funzione che produrrà il valore per il dizionario da ogni elemento della sequenza.</param>
      <typeparam name="TSource">Tipo degli elementi nella sequenza.</typeparam>
      <typeparam name="TKey">Tipo di chiavi nel dizionario risultante.</typeparam>
      <typeparam name="TValue">Tipo di valori nel dizionario risultante.</typeparam>
      <returns>Dizionario ordinato non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary>Enumera e trasforma una sequenza e produce un dizionario ordinato non modificabile del relativo contenuto usando l'operatore di confronto della chiave specificato.</summary>
      <param name="source">Sequenza da enumerare per generare il dizionario.</param>
      <param name="keySelector">Funzione che produrrà la chiave per il dizionario da ogni elemento della sequenza.</param>
      <param name="elementSelector">Funzione che produrrà il valore per il dizionario da ogni elemento della sequenza.</param>
      <param name="keyComparer">Operatore di confronto della chiave da usare per il dizionario.</param>
      <typeparam name="TSource">Tipo degli elementi nella sequenza.</typeparam>
      <typeparam name="TKey">Tipo di chiavi nel dizionario risultante.</typeparam>
      <typeparam name="TValue">Tipo di valori nel dizionario risultante.</typeparam>
      <returns>Dizionario non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Enumera e trasforma una sequenza e produce un dizionario ordinato non modificabile del relativo contenuto usando gli operatori di confronto della chiave e del valore specificati.</summary>
      <param name="source">Sequenza da enumerare per generare il dizionario.</param>
      <param name="keySelector">Funzione che produrrà la chiave per il dizionario da ogni elemento della sequenza.</param>
      <param name="elementSelector">Funzione che produrrà il valore per il dizionario da ogni elemento della sequenza.</param>
      <param name="keyComparer">Operatore di confronto della chiave da usare per il dizionario.</param>
      <param name="valueComparer">Operatore di confronto del valore da usare per il dizionario.</param>
      <typeparam name="TSource">Tipo degli elementi nella sequenza.</typeparam>
      <typeparam name="TKey">Tipo di chiavi nel dizionario risultante.</typeparam>
      <typeparam name="TValue">Tipo di valori nel dizionario risultante.</typeparam>
      <returns>Dizionario ordinato non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary>Rappresenta un dizionario ordinato non modificabile.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="TKey">Tipo di chiave contenuta nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo di valore contenuto nel dizionario.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary>Aggiunge un elemento con la chiave e il valore specificati al dizionario ordinato non modificabile.</summary>
      <param name="key">Chiave della voce da aggiungere.</param>
      <param name="value">Valore della voce da aggiungere.</param>
      <returns>Nuovo dizionario ordinato non modificabile che contiene la coppia chiave/valore aggiuntiva.</returns>
      <exception cref="T:System.ArgumentException">La chiave specificata esiste già nel dizionario, ma ha un valore diverso.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Aggiunge le specifiche coppie chiave/valore al dizionario ordinato non modificabile.</summary>
      <param name="items">Coppie chiave/valore da aggiungere.</param>
      <returns>Nuovo dizionario non modificabile che contiene le coppie chiave/valore aggiuntive.</returns>
      <exception cref="T:System.ArgumentException">Una delle chiavi specificate esiste già nel dizionario, ma ha un valore diverso.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary>Rappresenta un dizionario ordinato che viene modificato con allocazioni di memoria minime o nulle e in grado di produrre o compilare su istanze di dizionario ordinato non modificabili in modo molto efficiente.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary>Aggiunge un elemento con la chiave e il valore specificati al dizionario ordinato non modificabile.</summary>
      <param name="key">Chiave dell'elemento da aggiungere.</param>
      <param name="value">Valore dell'elemento da aggiungere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Aggiunge l'elemento specificato al dizionario ordinato non modificabile.</summary>
      <param name="item">Oggetto da aggiungere al dizionario.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Aggiunge una sequenza di valori al dizionario ordinato non modificabile.</summary>
      <param name="items">Elementi da aggiungere al dizionario.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary>Rimuove tutti gli elementi dal dizionario ordinato non modificabile.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina se il dizionario ordinato non modificabile contiene un valore specifico.</summary>
      <param name="item">Oggetto da individuare nel dizionario.</param>
      <returns>
        <see langword="true" /> se l'oggetto <paramref name="item" /> viene trovato nel dizionario; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary>Determina se il dizionario ordinato non modificabile contiene un elemento con la chiave specificata.</summary>
      <param name="key">Chiave da individuare nel dizionario.</param>
      <returns>
        <see langword="true" /> se il dizionario contiene un elemento con la chiave; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary>Determina se il dizionario ordinato non modificabile contiene un elemento con il valore specificato.</summary>
      <param name="value">Valore da individuare nel dizionario. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <returns>
        <see langword="true" /> se il dizionario ordinato non modificabile contiene un elemento con il valore specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary>Ottiene il numero di elementi in questo dizionario ordinato non modificabile.</summary>
      <returns>Numero di elementi in questo dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere il dizionario ordinato non modificabile.</summary>
      <returns>Enumeratore che può essere usato per scorrere il dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>Ottiene il valore per una determinata chiave se esiste una chiave corrispondente nel dizionario; in caso contrario, il valore predefinito.</summary>
      <param name="key">Chiave da ricercare.</param>
      <returns>Valore della chiave oppure <c>default(TValue)</c> se non è stata trovata alcuna chiave corrispondente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>Ottiene il valore per una determinata chiave se esiste una chiave corrispondente nel dizionario; in caso contrario, il valore predefinito.</summary>
      <param name="key">Chiave da ricercare.</param>
      <param name="defaultValue">Valore predefinito da restituire se non viene trovata alcuna chiave corrispondente nel dizionario.</param>
      <returns>Valore della chiave oppure <paramref name="defaultValue" /> se non è stata trovata alcuna chiave corrispondente.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary>Ottiene o imposta il valore di una chiave specificata nel dizionario ordinato non modificabile.</summary>
      <param name="key">Chiave di cui recuperare il valore.</param>
      <returns>Valore associato alla chiave specificata.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary>Ottiene o imposta l'operatore di confronto della chiave.</summary>
      <returns>Operatore di confronto della chiave.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary>Ottiene una raccolta di elementi fortemente tipizzata e di sola lettura.</summary>
      <returns>Raccolta di elementi fortemente tipizzata e di sola lettura.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary>Rimuove dal dizionario ordinato non modificabile l'elemento con la chiave specificata.</summary>
      <param name="key">Chiave dell'elemento da rimuovere.</param>
      <returns>
        <see langword="true" /> se l'elemento viene rimosso correttamente; in caso contrario, <see langword="false" />. Questo metodo restituisce <see langword="false" /> anche se <paramref name="key" /> non viene trovato nel dizionario originale.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Rimuove la prima occorrenza di un oggetto specifico dal dizionario ordinato non modificabile.</summary>
      <param name="item">Oggetto da rimuovere dal dizionario.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> è stato rimosso correttamente dal dizionario; in caso contrario, <see langword="false" />. Questo metodo restituisce <see langword="false" /> anche se <paramref name="item" /> non viene trovato nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove dal dizionario ordinato non modificabile tutte le voci con chiavi che corrispondono a quelle presenti nella sequenza specificata.</summary>
      <param name="keys">Chiavi per le voci da rimuovere dal dizionario.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia gli elementi del dizionario in una matrice, a partire da un indice della matrice specifico.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <param name="array">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dal dizionario. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="index">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Ottiene un valore che indica se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe).</summary>
      <returns>
        <see langword="true" /> se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe); in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Ottiene un oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Aggiunge un elemento con la chiave e il valore forniti all'oggetto dizionario.</summary>
      <param name="key">Chiave dell'elemento da aggiungere.</param>
      <param name="value">Valore dell'elemento da aggiungere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina se l'oggetto dizionario contiene un elemento con la chiave specificata.</summary>
      <param name="key">La chiave da individuare.</param>
      <returns>
        <see langword="true" /> se il dizionario contiene un elemento con la chiave; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>Restituisce un oggetto <see cref="T:System.Collections.IDictionaryEnumerator" /> per il dizionario.</summary>
      <returns>Oggetto <see cref="T:System.Collections.IDictionaryEnumerator" /> per il dizionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>Ottiene un valore che indica se le dimensioni dell'oggetto <see cref="T:System.Collections.IDictionary" /> sono fisse.</summary>
      <returns>
        <see langword="true" /> se l'oggetto <see cref="T:System.Collections.IDictionary" /> ha dimensioni fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns>
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>Ottiene o imposta l'elemento con la chiave specificata.</summary>
      <param name="key">Chiave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>Ottiene <see cref="T:System.Collections.Generic.ICollection`1" /> contenente le chiavi di <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contenente le chiavi dell'oggetto che implementa l'interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Rimuove dal dizionario l'elemento con la chiave specificata.</summary>
      <param name="key">Chiave dell'elemento da rimuovere.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>Ottiene <see cref="T:System.Collections.Generic.ICollection`1" /> contenente i valori in <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contenente i valori nell'oggetto che implementa l'interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns>Oggetto enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary>Crea un dizionario ordinato non modificabile basato sul contenuto di questa istanza.</summary>
      <returns>Dizionario ordinato non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>Determina se il dizionario contiene una chiave specificata.</summary>
      <param name="equalKey">Chiave da ricercare.</param>
      <param name="actualKey">La chiave corrispondente presente nel dizionario, se trovata, oppure <c>equalkey</c> se non viene trovata alcuna corrispondenza.</param>
      <returns>
        <see langword="true" /> se viene trovata una corrispondenza per <paramref name="equalKey" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>Ottiene il valore associato alla chiave specificata.</summary>
      <param name="key">Chiave di cui verrà recuperato il valore.</param>
      <param name="value">Quando termina, questo metodo restituisce il valore associato alla chiave specificata nel caso in cui la chiave venga trovata. In caso contrario, restituisce il valore predefinito per il tipo del parametro <paramref name="value" />. Questo parametro viene passato non inizializzato.</param>
      <returns>
        <see langword="true" /> se l'oggetto che implementa il dizionario contiene un elemento con la chiave specificata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary>Ottiene o imposta l'operatore di confronto del valore.</summary>
      <returns>Operatore di confronto del valore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary>Restituisce un riferimento di sola lettura al valore associato all'elemento <paramref name="key" /> specificato.</summary>
      <param name="key" />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="key" /> non è presente.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary>Ottiene una raccolta contenente i valori presenti nel dizionario ordinato.</summary>
      <returns>Raccolta contenente i valori dell'oggetto che implementa il dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary>Recupera un dizionario ordinato non modificabile vuoto con lo stesso ordinamento e le stesse regole di confronto chiave/valore di questa istanza del dizionario.</summary>
      <returns>Dizionario vuoto con ordinamento e regole di confronto chiave/valore equivalenti.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina se questo dizionario ordinato non modificabile contiene la coppia chiave/valore specificata.</summary>
      <param name="pair">Coppia chiave/valore da individuare.</param>
      <returns>
        <see langword="true" /> se la coppia chiave/valore specificata viene trovata nel dizionario; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary>Determina se questa mappa ordinata non modificabile contiene la chiave specificata.</summary>
      <param name="key">La chiave da individuare.</param>
      <returns>
        <see langword="true" /> se il dizionario non modificabile contiene la chiave specificata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary>Determina se il dizionario ordinato non modificabile contiene un elemento con il valore specificato.</summary>
      <param name="value">Valore da individuare. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <returns>
        <see langword="true" /> se il dizionario contiene un elemento con il valore specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary>Ottiene il numero di coppie chiave/valore nel dizionario ordinato non modificabile.</summary>
      <returns>Numero di coppie chiave/valore nel dizionario.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary>Ottiene un dizionario ordinato non modificabile vuoto.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary>Enumera il contenuto di un albero binario.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary>Ottiene l'elemento in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns>Elemento in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary>Rilascia le risorse usate dall'istanza corrente della classe <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary>Sposta l'enumeratore all'elemento successivo del dizionario ordinato non modificabile.</summary>
      <returns>
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo; <see langword="false" /> se l'enumeratore ha superato la fine del dizionario ordinato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary>Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento nel dizionario ordinato.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>L'elemento corrente.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere il dizionario ordinato non modificabile.</summary>
      <returns>Enumeratore che può essere usato per scorrere il dizionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary>Ottiene un valore che indica se questa istanza del dizionario ordinato non modificabile è vuota o meno.</summary>
      <returns>
        <see langword="true" /> se l'istanza è vuota; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary>Ottiene l'oggetto <paramref name="TValue" /> associato alla chiave specificata.</summary>
      <param name="key">Chiave di cui recuperare il valore.</param>
      <returns>Valore associato alla chiave specificata. Se non vengono trovati risultati, l'operazione genera un'eccezione.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary>Ottiene l'operatore di confronto della chiave per il dizionario ordinato non modificabile.</summary>
      <returns>Operatore di confronto della chiave per il dizionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary>Ottiene le chiavi nel dizionario ordinato non modificabile.</summary>
      <returns>Chiavi nel dizionario non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary>Rimuove dal dizionario ordinato non modificabile l'elemento con il valore specificato.</summary>
      <param name="value">Valore dell'elemento da rimuovere.</param>
      <returns>Nuovo dizionario non modificabile con l'elemento specificato rimosso oppure questa istanza se il valore specificato non viene trovato nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove dal dizionario ordinato non modificabile gli elementi con le chiavi specificate.</summary>
      <param name="keys">Chiavi degli elementi da rimuovere.</param>
      <returns>Nuovo dizionario non modificabile con le chiavi specificate rimosse oppure questa istanza se le chiavi specificate non vengono trovate nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary>Imposta la chiave e il valore specificati nel dizionario ordinato non modificabile, eventualmente sovrascrivendo un valore esistente per la chiave specificata.</summary>
      <param name="key">Chiave della voce da aggiungere.</param>
      <param name="value">Valore di chiave da impostare.</param>
      <returns>Nuovo dizionario ordinato non modificabile che contiene la coppia chiave/valore specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Imposta le coppie chiave/valore specificate nel dizionario ordinato non modificabile, eventualmente sovrascrivendo i valori esistenti per le chiavi.</summary>
      <param name="items">Coppie chiave/valore da impostare nel dizionario. Se una qualsiasi delle chiavi esiste già nel dizionario, questo metodo sovrascriverà i valori precedenti.</param>
      <returns>Dizionario non modificabile che contiene la coppia chiave/valore specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia gli elementi del dizionario in una matrice, a partire da un indice della matrice specifico.</summary>
      <param name="array">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dal dizionario. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="index">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Ottiene un valore che indica se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe).</summary>
      <returns>
        <see langword="true" /> se l'accesso alla <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe); in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Ottiene un oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Aggiunge un elemento con la chiave e il valore forniti all'oggetto dizionario.</summary>
      <param name="key">Oggetto da usare come chiave dell'elemento da aggiungere.</param>
      <param name="value">Oggetto da usare come valore dell'elemento da aggiungere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Cancella questa istanza.</summary>
      <exception cref="T:System.NotSupportedException">L'oggetto dizionario è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina se l'oggetto dizionario non modificabile contiene un elemento con la chiave specificata.</summary>
      <param name="key">Chiave da individuare nell'oggetto dizionario.</param>
      <returns>
        <see langword="true" /> se il dizionario contiene un elemento con la chiave; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Restituisce un oggetto <see cref="T:System.Collections.IDictionaryEnumerator" /> per l'oggetto dizionario non modificabile.</summary>
      <returns>Oggetto enumeratore per l'oggetto dizionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Ottiene un valore che indica se le dimensioni dell'oggetto <see cref="T:System.Collections.IDictionary" /> sono fisse.</summary>
      <returns>
        <see langword="true" /> se l'oggetto <see cref="T:System.Collections.IDictionary" /> ha dimensioni fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns>
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Ottiene o imposta l'elemento con la chiave specificata.</summary>
      <param name="key">Chiave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Ottiene <see cref="T:System.Collections.Generic.ICollection`1" /> contenente le chiavi di <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contenente le chiavi dell'oggetto che implementa l'interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Rimuove dall'oggetto dizionario non modificabile l'elemento con la chiave specificata.</summary>
      <param name="key">Chiave dell'elemento da rimuovere.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>Ottiene <see cref="T:System.Collections.Generic.ICollection`1" /> contenente i valori in <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contenente i valori nell'oggetto che implementa l'interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns>Oggetto enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary>Crea un dizionario ordinato non modificabile con lo stesso contenuto di questo dizionario e che può essere modificato in modo efficiente tra più operazioni tramite interfacce standard modificabili.</summary>
      <returns>Raccolta con lo stesso contenuto di questo dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary>Determina se il dizionario contiene una chiave specificata.</summary>
      <param name="equalKey">Chiave da ricercare.</param>
      <param name="actualKey">La chiave corrispondente presente nel dizionario, se trovata, oppure <c>equalkey</c> se non viene trovata alcuna corrispondenza.</param>
      <returns>
        <see langword="true" /> se viene trovata una corrispondenza per <paramref name="equalKey" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>Ottiene il valore associato alla chiave specificata.</summary>
      <param name="key">Chiave di cui verrà recuperato il valore.</param>
      <param name="value">Quando termina, questo metodo restituisce il valore associato alla chiave specificata nel caso in cui la chiave venga trovata. In caso contrario, restituisce il valore predefinito per il tipo del parametro <paramref name="value" />.</param>
      <returns>
        <see langword="true" /> se il dizionario contiene un elemento con la chiave specificata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary>Ottiene l'operatore di confronto del valore usato per determinare se i valori sono uguali.</summary>
      <returns>Operatore di confronto del valore usato per determinare se i valori sono uguali.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary>Restituisce un riferimento di sola lettura al valore associato all'elemento <paramref name="key" /> specificato.</summary>
      <param name="key" />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="key" /> non è presente.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary>Ottiene i valori nel dizionario ordinato non modificabile.</summary>
      <returns>Valori nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary>Ottiene un'istanza del dizionario ordinato non modificabile che usa l'operatore di confronto della chiave specificato.</summary>
      <param name="keyComparer">Operatore di confronto della chiave da usare.</param>
      <returns>Istanza del dizionario non modificabile che usa l'operatore di confronto specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>Ottiene un'istanza del dizionario ordinato non modificabile che usa gli operatori di confronto della chiave e del valore specificati.</summary>
      <param name="keyComparer">Operatore di confronto della chiave da usare.</param>
      <param name="valueComparer">Operatore di confronto del valore da usare.</param>
      <returns>Istanza del dizionario non modificabile che usa gli operatori di confronto specificati.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary>Fornisce un set di metodi di inizializzazione per le istanze della classe <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" />.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary>Crea un set ordinato non modificabile vuoto.</summary>
      <typeparam name="T">Tipo di elementi da archiviare nel set non modificabile.</typeparam>
      <returns>Set ordinato non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary>Crea un nuovo set ordinato non modificabile che contiene l'elemento specificato.</summary>
      <param name="item">Elemento con cui prepopolare il set.</param>
      <typeparam name="T">Tipo di elementi nel set non modificabile.</typeparam>
      <returns>Nuovo set non modificabile che contiene l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary>Crea un nuovo set ordinato non modificabile che contiene la matrice di elementi specificata.</summary>
      <param name="items">Matrice che contiene gli elementi con cui prepopolare il set.</param>
      <typeparam name="T">Tipo di elementi nel set non modificabile.</typeparam>
      <returns>Nuovo set non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary>Crea un set ordinato non modificabile vuoto che usa l'operatore di confronto specificato.</summary>
      <param name="comparer">Implementazione da usare quando si confrontano gli elementi nel set.</param>
      <typeparam name="T">Tipo di elementi nel set non modificabile.</typeparam>
      <returns>Set non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary>Crea un nuovo set ordinato non modificabile che contiene l'elemento specificato e usa l'operatore di confronto specificato.</summary>
      <param name="comparer">Implementazione da usare quando si confrontano gli elementi nel set.</param>
      <param name="item">Elemento con cui prepopolare il set.</param>
      <typeparam name="T">Tipo di elementi archiviati nel set non modificabile.</typeparam>
      <returns>Nuovo set non modificabile che contiene l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary>Crea un nuovo set ordinato non modificabile che contiene la matrice di elementi specificata e usa l'operatore di confronto specificato.</summary>
      <param name="comparer">Implementazione da usare quando si confrontano gli elementi nel set.</param>
      <param name="items">Matrice che contiene gli elementi con cui prepopolare il set.</param>
      <typeparam name="T">Tipo di elementi nel set non modificabile.</typeparam>
      <returns>Nuovo set non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary>Restituisce una raccolta che può essere usata per compilare un set ordinato non modificabile.</summary>
      <typeparam name="T">Tipo di elementi archiviati dalla raccolta.</typeparam>
      <returns>Generatore di raccolte non modificabili.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary>Restituisce una raccolta che può essere usata per compilare un set ordinato non modificabile.</summary>
      <param name="comparer">Operatore di confronto usato per confrontare l'uguaglianza degli elementi nel set.</param>
      <typeparam name="T">Tipo di elementi archiviati dalla raccolta.</typeparam>
      <returns>Raccolta non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea una nuova raccolta non modificabile che contiene gli elementi specificati.</summary>
      <param name="comparer">Operatore di confronto da usare per confrontare gli elementi di questo set.</param>
      <param name="items">Elementi da aggiungere al set prima che diventi non modificabile.</param>
      <typeparam name="T">Tipo di elementi archiviati dalla raccolta.</typeparam>
      <returns>Nuovo set non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea una nuova raccolta non modificabile che contiene gli elementi specificati.</summary>
      <param name="items">Elementi da aggiungere al set prima che diventi non modificabile.</param>
      <typeparam name="T">Tipo di elementi archiviati dalla raccolta.</typeparam>
      <returns>Nuovo set non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Enumera una sequenza e produce un set ordinato non modificabile del relativo contenuto.</summary>
      <param name="source">Sequenza da enumerare.</param>
      <typeparam name="TSource">Tipo degli elementi nella sequenza.</typeparam>
      <returns>Set ordinato non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>Enumera una sequenza, produce un set ordinato non modificabile del relativo contenuto e usa l'operatore di confronto specificato.</summary>
      <param name="source">Sequenza da enumerare.</param>
      <param name="comparer">Operatore di confronto da usare per l'inizializzazione e l'aggiunta di membri a un set ordinato.</param>
      <typeparam name="TSource">Tipo degli elementi nella sequenza.</typeparam>
      <returns>Set ordinato non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary>Crea un set ordinato non modificabile dal contenuto corrente del set del generatore.</summary>
      <param name="builder">Generatore da cui creare il set ordinato non modificabile.</param>
      <typeparam name="TSource">Tipo di elementi nel set ordinato non modificabile.</typeparam>
      <returns>Set ordinato non modificabile che contiene il contenuto corrente nel set del generatore.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary>Rappresenta l'implementazione di un set ordinato non modificabile.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T">Tipo di elementi presenti nel set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary>Aggiunge il valore specificato a questo set ordinato non modificabile.</summary>
      <param name="value">Il valore da aggiungere.</param>
      <returns>Nuovo set con l'elemento aggiunto o questo set se l'elemento è già presente in questo set.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary>Rappresenta un set ordinato che consente di apportare modifiche con allocazioni di memoria minime o nulle e modifica o compila in modo efficiente set ordinati non modificabili.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary>Aggiunge un elemento al set corrente e restituisce un valore che indica se l'aggiunta è stata eseguita correttamente.</summary>
      <param name="item">Elemento da aggiungere all'insieme.</param>
      <returns>
        <see langword="true" /> se l'elemento è stato aggiunto al set; <see langword="false" /> se l'elemento è già presente nel set</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary>Rimuove tutti gli elementi da questo set.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary>Determina se il set contiene l'oggetto specificato.</summary>
      <param name="item">Oggetto da individuare nel set.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> è presente nel set; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary>Ottiene il numero di elementi nel set ordinato non modificabile.</summary>
      <returns>Numero di elementi in questo set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove il set di elementi specificato dal set corrente.</summary>
      <param name="other">Raccolta di elementi da rimuovere dal set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary>Restituisce un enumeratore che scorre il set.</summary>
      <returns>Enumeratore che può essere usato per scorrere il set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica il set corrente in modo che contenga solo elementi inclusi anche in una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set corrente è un subset (strict) appropriato di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un subset appropriato di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set corrente è un superset (strict) appropriato di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un superset appropriato di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set corrente è un subset di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un subset di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set corrente è un superset di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un superset di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary>Ottiene l'elemento del set in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero dell'elemento nel set da restituire.</param>
      <returns>Elemento in corrispondenza della posizione specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary>Ottiene un riferimento di sola lettura all'elemento del set in corrispondenza dell'<paramref name="index" /> specificato.</summary>
      <param name="index">Indice in base zero dell'elemento nel set da restituire.</param>
      <returns>Riferimento di sola lettura all'elemento in corrispondenza della posizione specificata.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary>Ottiene o imposta l'oggetto che viene usato per determinare l'uguaglianza dei valori nel set ordinato non modificabile.</summary>
      <returns>Operatore di confronto usato per determinare l'uguaglianza dei valori nel set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary>Ottiene il valore massimo nel set ordinato non modificabile, come definito dall'operatore di confronto.</summary>
      <returns>Valore massimo nel set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary>Ottiene il valore minimo nel set ordinato non modificabile, come definito dall'operatore di confronto.</summary>
      <returns>Valore minimo nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set corrente è sovrapposto alla raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente e <paramref name="other" /> condividono almeno un elemento comune; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary>Rimuove la prima occorrenza dell'oggetto specificato dal set.</summary>
      <param name="item">Oggetto da rimuovere dal set.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> è stato rimosso dal set; <see langword="false" /> se <paramref name="item" /> non è stato trovato nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary>Restituisce un enumeratore che scorre il set ordinato non modificabile in ordine inverso.</summary>
      <returns>Enumeratore che scorre il set in ordine inverso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set corrente e la raccolta specificata contengono gli stessi elementi.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è uguale a <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica il set corrente in modo che contenga solo elementi presenti in tale set o nella raccolta specificata, ma non in entrambi.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Aggiunge un elemento al set corrente e restituisce un valore che indica se l'aggiunta è stata eseguita correttamente.</summary>
      <param name="item">Elemento da aggiungere all'insieme.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copia gli elementi della raccolta in una matrice, a partire da un indice della matrice specifico.</summary>
      <param name="array">Matrice unidimensionale che rappresenta la destinazione degli elementi copiati dalla raccolta. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ottiene un valore che indica se questa istanza è di sola lettura.</summary>
      <returns>Sempre <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia gli elementi del set in una matrice, iniziando in corrispondenza di un particolare indice di matrice.</summary>
      <param name="array">Matrice unidimensionale che rappresenta la destinazione degli elementi copiati dal set. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Ottiene un valore che indica se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe).</summary>
      <returns>
        <see langword="true" /> se l'accesso alla <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe); in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Ottiene un oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary>Crea un set ordinato non modificabile basato sul contenuto di questa istanza.</summary>
      <returns>Set non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica il set corrente in modo che contenga tutti gli elementi presenti sia in tale set che nella raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con lo stato corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary>Rimuove tutti gli elementi dal set ordinato non modificabile.</summary>
      <returns>Set vuoto con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary>Determina se questo set ordinato non modificabile contiene il valore specificato.</summary>
      <param name="value">Valore da controllare.</param>
      <returns>
        <see langword="true" /> se il set contiene il valore specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary>Ottiene il numero di elementi nel set ordinato non modificabile.</summary>
      <returns>Numero di elementi nel set ordinato non modificabile.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary>Ottiene un set ordinato non modificabile vuoto.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary>Enumera il contenuto di un albero binario.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary>Ottiene l'elemento in corrispondenza della posizione corrente dell'enumeratore.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <returns>Elemento in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary>Rilascia le risorse usate dall'istanza corrente della classe <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" />.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary>Sposta l'enumeratore all'elemento successivo del set ordinato non modificabile.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <returns>
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo, <see langword="false" /> se l'enumeratore ha superato la fine del set ordinato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary>Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento nel set ordinato.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>L'elemento corrente.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove un set specificato di elementi da questo set ordinato non modificabile.</summary>
      <param name="other">Elementi da rimuovere dal set.</param>
      <returns>Nuovo set con gli elementi rimossi oppure il set originale se nessuno degli elementi era presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere il set ordinato non modificabile.</summary>
      <returns>Enumeratore che può essere usato per scorrere il set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary>Ottiene la posizione all'interno di questo set ordinato non modificabile in cui viene visualizzato il valore specificato.</summary>
      <param name="item">Valore di cui viene ricercata la posizione.</param>
      <returns>Indice dell'oggetto <paramref name="item" /> specificato nel set ordinato, se <paramref name="item" /> è stato trovato. Se <paramref name="item" /> non viene trovato ed è minore di uno o più elementi di questo set, questo metodo restituisce un numero negativo che corrisponde al complemento bit per bit dell'indice del primo elemento maggiore del valore. Se <paramref name="item" /> non viene trovato ed è maggiore di qualsiasi elemento del set, questo metodo restituisce un numero negativo che corrisponde al complemento bit per bit dell'indice dell'ultimo elemento più 1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un set ordinato non modificabile che contiene gli elementi esistenti sia in questo set che nel set specificato.</summary>
      <param name="other">Set da intersecare con questo.</param>
      <returns>Nuovo set ordinato non modificabile che contiene gli elementi esistenti in entrambi i set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary>Ottiene un valore che indica se questo set ordinato non modificabile è vuoto o meno.</summary>
      <returns>
        <see langword="true" /> se il set è vuoto; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set ordinato non modificabile corrente è un subset (strict) appropriato della raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un subset appropriato di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set ordinato non modificabile corrente è un superset appropriato di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un superset appropriato di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set ordinato non modificabile corrente è un subset di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un subset di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set ordinato non modificabile corrente è un superset di una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente è un superset di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary>Ottiene l'elemento del set ordinato non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice dell'elemento da recuperare dal set ordinato.</param>
      <returns>Elemento in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary>Ottiene un riferimento di sola lettura dell'elemento del set in corrispondenza dell'<paramref name="index" /> specificato.</summary>
      <param name="index">Indice in base zero dell'elemento nel set da restituire.</param>
      <returns>Riferimento di sola lettura dell'elemento in corrispondenza della posizione specificata.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary>Ottiene l'operatore di confronto usato per ordinare le chiavi nel set ordinato non modificabile.</summary>
      <returns>Operatore di confronto usato per ordinare le chiavi.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary>Ottiene il valore massimo nel set ordinato non modificabile, come definito dall'operatore di confronto.</summary>
      <returns>Valore massimo nel set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary>Ottiene il valore minimo nel set ordinato non modificabile, come definito dall'operatore di confronto.</summary>
      <returns>Valore minimo nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set ordinato non modificabile corrente e una raccolta specificata condividono elementi comuni.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se il set corrente e <paramref name="other" /> condividono almeno un elemento comune; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary>Rimuove il valore specificato da questo set ordinato non modificabile.</summary>
      <param name="value">Elemento da rimuovere.</param>
      <returns>Nuovo set ordinato non modificabile con l'elemento rimosso oppure questo set se l'elemento non è stato trovato nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary>Restituisce un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che scorre questo set ordinato non modificabile in ordine inverso.</summary>
      <returns>Enumeratore che scorre il set ordinato non modificabile in ordine inverso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se il set ordinato non modificabile corrente e la raccolta specificata contengono gli stessi elementi.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>
        <see langword="true" /> se i set sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un set ordinato non modificabile che contiene gli elementi esistenti in questo set o in una sequenza specificata, ma non in entrambi.</summary>
      <param name="other">L'altra sequenza di elementi.</param>
      <returns>Nuovo set ordinato non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Aggiunge il valore specificato alla raccolta.</summary>
      <param name="item">Il valore da aggiungere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Rimuove tutti gli elementi dalla raccolta.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copia gli elementi della raccolta in una matrice, a partire da un indice della matrice specifico.</summary>
      <param name="array">Matrice unidimensionale che rappresenta la destinazione degli elementi copiati dalla raccolta. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Vedere l'interfaccia <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Rimuove la prima occorrenza di un oggetto specifico dalla raccolta.</summary>
      <param name="item">Oggetto da rimuovere dalla raccolta.</param>
      <returns>
        <see langword="true" /> se l'oggetto <paramref name="item" /> è stato rimosso correttamente dalla raccolta; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Inserisce un elemento nel set in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero nel quale <paramref name="item" /> deve essere inserito.</param>
      <param name="item">Oggetto da inserire nel set.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Vedere l'interfaccia <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="index" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Rimuove l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero dell'elemento da rimuovere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>Aggiunge un elemento al set corrente e restituisce un valore che indica se l'aggiunta è stata eseguita correttamente.</summary>
      <param name="item">Elemento da aggiungere all'insieme.</param>
      <returns>
        <see langword="true" /> se l'elemento è stato aggiunto al set; <see langword="false" /> se l'elemento è già presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove tutti gli elementi della raccolta specificata dal set corrente.</summary>
      <param name="other">Raccolta di elementi da rimuovere dal set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica il set corrente in modo che contenga solo elementi inclusi anche in una raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica il set corrente in modo che contenga solo elementi presenti in tale set o nella raccolta specificata, ma non in entrambi.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica il set corrente in modo che contenga tutti gli elementi presenti in tale set o nella raccolta specificata.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia gli elementi del set in una matrice, iniziando in corrispondenza di un particolare indice di matrice.</summary>
      <param name="array">Matrice unidimensionale che rappresenta la destinazione degli elementi copiati dal set. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="index">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Vedere l'interfaccia <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>Vedere <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns>Oggetto enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary>Aggiunge un elemento al set.</summary>
      <param name="value">Oggetto da aggiungere al set.</param>
      <returns>La posizione nella quale è inserito il nuovo elemento o -1 per indicare che l'elemento non è stato inserito nella raccolta.</returns>
      <exception cref="T:System.NotSupportedException">Il set è di sola lettura o ha una dimensione fissa.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary>Rimuove tutti gli elementi dal set.</summary>
      <exception cref="T:System.NotSupportedException">Generata in tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determina se il set contiene un valore specifico.</summary>
      <param name="value">Oggetto da individuare nel set.</param>
      <returns>
        <see langword="true" /> se l'oggetto viene trovato nel set; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina l'indice di un elemento specifico nel set.</summary>
      <param name="value">Oggetto da individuare nel set.</param>
      <returns>Indice di <paramref name="value" />, se presente nell'elenco; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserisce un elemento nel set in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero nel quale <paramref name="value" /> deve essere inserito.</param>
      <param name="value">Oggetto da inserire nel set.</param>
      <exception cref="T:System.NotSupportedException">Il set è di sola lettura o ha una dimensione fissa.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary>Ottiene un valore che indica se le dimensioni dell'oggetto <see cref="T:System.Collections.IList" /> sono fisse.</summary>
      <returns>
        <see langword="true" /> se <see cref="T:System.Collections.IList" /> è di dimensioni fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary>Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns>
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary>Ottiene o imposta l'oggetto <see cref="T:System.Object" /> in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice.</param>
      <returns>Oggetto <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary>Rimuove la prima occorrenza di un oggetto specifico dal set.</summary>
      <param name="value">Oggetto da rimuovere dal set.</param>
      <exception cref="T:System.NotSupportedException">Il set è di sola lettura o ha una dimensione fissa.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Rimuove dal set l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero dell'elemento da rimuovere.</param>
      <exception cref="T:System.NotSupportedException">Il set è di sola lettura o ha una dimensione fissa.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>Aggiunge l'elemento specificato a questo set non modificabile.</summary>
      <param name="value">Elemento da aggiungere.</param>
      <returns>Nuovo set con l'elemento aggiunto o questo set se l'elemento è già presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>Recupera un set non modificabile vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</summary>
      <returns>Set vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Rimuove gli elementi della raccolta specificata dal set non modificabile corrente.</summary>
      <param name="other">Elementi da rimuovere dal set.</param>
      <returns>Nuovo set con gli elementi rimossi oppure il set originale se nessuno degli elementi era presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un set non modificabile che contiene gli elementi esistenti sia in questo set che nel set specificato.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>Nuovo set non modificabile che contiene gli elementi esistenti in entrambi i set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>Rimuove l'elemento specificato da questo set non modificabile.</summary>
      <param name="value">Elemento da rimuovere.</param>
      <returns>Nuovo set con l'elemento specificato rimosso oppure il set corrente se l'elemento non viene trovato nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un set non modificabile che contiene solo elementi presenti in tale set o nella raccolta specificata, ma non in entrambi.</summary>
      <param name="other">Raccolta da confrontare con il set corrente.</param>
      <returns>Nuovo set che contiene gli elementi presenti solo in tale set o nella raccolta specificata, ma non in entrambi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un nuovo set non modificabile che contiene tutti gli elementi presenti in tale set o nella raccolta specificata.</summary>
      <param name="other">Raccolta da cui aggiungere gli elementi.</param>
      <returns>Nuovo set non modificabile con gli elementi aggiunti oppure il set originale se tutti gli elementi erano già presenti nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary>Crea una raccolta con gli stessi contenuti di questo set ordinato non modificabile che possono essere modificati in modo efficiente utilizzando le interfacce standard modificabili.</summary>
      <returns>Generatore di set ordinati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary>Cerca un determinato valore nel set e restituisce il valore uguale eventualmente trovato.</summary>
      <param name="equalValue">Valore da cercare.</param>
      <param name="actualValue">Valore del set trovato dalla ricerca oppure il valore originale se la ricerca non ha restituito alcuna corrispondenza.</param>
      <returns>Valore che indica se la ricerca è stata eseguita correttamente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Aggiunge un set specificato di elementi a questo set ordinato non modificabile.</summary>
      <param name="other">Elementi da aggiungere.</param>
      <returns>Nuovo set con gli elementi aggiunti oppure il set originale se tutti gli elementi erano già presenti nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary>Restituisce il set ordinato non modificabile con l'operatore di confronto della chiave specificato.</summary>
      <param name="comparer">Operatore di confronto da cercare.</param>
      <returns>Set ordinato non modificabile con l'operatore di confronto della chiave specificato.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary>Fornisce un set di metodi di inizializzazione per le istanze della classe <see cref="T:System.Collections.Immutable.ImmutableStack`1" />.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary>Crea uno stack non modificabile vuoto.</summary>
      <typeparam name="T">Tipo di elementi da archiviare nello stack non modificabile.</typeparam>
      <returns>Stack non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary>Crea un nuovo stack non modificabile che contiene l'elemento specificato.</summary>
      <param name="item">Elemento con cui prepopolare lo stack.</param>
      <typeparam name="T">Tipo di elementi nello stack non modificabile.</typeparam>
      <returns>Nuova raccolta non modificabile che contiene l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary>Crea un nuovo stack non modificabile che contiene la matrice di elementi specificata.</summary>
      <param name="items">Matrice che contiene gli elementi con cui prepopolare lo stack.</param>
      <typeparam name="T">Tipo di elementi nello stack non modificabile.</typeparam>
      <returns>Nuovo stack non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea un nuovo stack non modificabile che contiene gli elementi specificati.</summary>
      <param name="items">Elementi da aggiungere allo stack prima che diventi non modificabile.</param>
      <typeparam name="T">Tipo di elementi nello stack.</typeparam>
      <returns>Stack non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary>Rimuove l'elemento specificato da uno stack non modificabile.</summary>
      <param name="stack">Stack da modificare.</param>
      <param name="value">Elemento da rimuovere dallo stack.</param>
      <typeparam name="T">Tipo di elementi contenuti nello stack.</typeparam>
      <returns>Stack; mai <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">Lo stack è vuoto.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary>Rappresenta uno stack non modificabile.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T">Tipo di elemento presente nello stack.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary>Rimuove tutti gli oggetti dallo stack non modificabile.</summary>
      <returns>Stack non modificabile vuoto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary>Ottiene uno stack non modificabile vuoto.</summary>
      <returns>Stack non modificabile vuoto.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary>Enumera il contenuto di uno stack non modificabile senza allocare memoria.
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary>Ottiene l'elemento in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns>Elemento in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary>Sposta l'enumeratore all'elemento successivo dello stack non modificabile.</summary>
      <returns>
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo; <see langword="false" /> se l'enumeratore ha superato la fine dello stack.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere lo stack non modificabile.</summary>
      <returns>Enumeratore che può essere usato per scorrere gli elementi dello stack.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary>Ottiene un valore che indica se questa istanza dello stack non modificabile è vuoto o meno.</summary>
      <returns>
        <see langword="true" /> se l'istanza è vuota; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary>Restituisce l'oggetto all'inizio dello stack senza rimuoverlo.</summary>
      <returns>Oggetto all'inizio dello stack.</returns>
      <exception cref="T:System.InvalidOperationException">Lo stack è vuoto.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary>Ottiene un riferimento di sola lettura all'elemento all'inizio dello stack.</summary>
      <returns>Riferimento di sola lettura all'elemento all'inizio dello stack.</returns>
      <exception cref="T:System.InvalidOperationException">Generata quando lo stack è vuoto.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary>Rimuove l'elemento all'inizio dello stack non modificabile e restituisce lo stack dopo la rimozione.</summary>
      <returns>Stack; mai <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">Lo stack è vuoto.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary>Rimuove l'elemento specificato dallo stack non modificabile e restituisce lo stack dopo la rimozione.</summary>
      <param name="value">Valore da rimuovere dallo stack.</param>
      <returns>Stack; mai <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary>Inserisce un oggetto all'inizio dello stack non modificabile e restituisce il nuovo stack.</summary>
      <param name="value">Oggetto da inserire nello stack.</param>
      <returns>Nuovo stack.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns>Oggetto <see cref="T:System.Collections.IEnumerator" /> che può essere usato per eseguire l'iterazione della raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary>Rimuove tutti gli elementi dallo stack non modificabile.</summary>
      <returns>Stack non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary>Rimuove l'elemento all'inizio dello stack non modificabile e restituisce il nuovo stack.</summary>
      <returns>Nuovo stack; mai <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary>Inserisce un elemento all'inizio dello stack non modificabile e restituisce il nuovo stack.</summary>
      <param name="value">Elemento da inserire nello stack.</param>
      <returns>Nuovo stack.</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary>Override dei metodi di estensione LINQ che offrono maggiore efficienza per <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> rispetto ai metodi LINQ standard
Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary>Applica una funzione a una sequenza di elementi in modo cumulativo.</summary>
      <param name="immutableArray">Raccolta a cui applicare la funzione.</param>
      <param name="func">Funzione da richiamare su ogni elemento, in modo cumulativo.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Valore finale dopo l'applicazione della funzione cumulativa a tutti gli elementi.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary>Applica una funzione a una sequenza di elementi in modo cumulativo.</summary>
      <param name="immutableArray">Raccolta a cui applicare la funzione.</param>
      <param name="seed">Valore iniziale dell'accumulatore.</param>
      <param name="func">Funzione da richiamare su ogni elemento, in modo cumulativo.</param>
      <typeparam name="TAccumulate">Tipo del valore accumulato.</typeparam>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Valore finale dell'accumulatore.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary>Applica una funzione a una sequenza di elementi in modo cumulativo.</summary>
      <param name="immutableArray">Raccolta a cui applicare la funzione.</param>
      <param name="seed">Valore iniziale dell'accumulatore.</param>
      <param name="func">Funzione da richiamare su ogni elemento, in modo cumulativo.</param>
      <param name="resultSelector" />
      <typeparam name="TAccumulate">Tipo del valore accumulato.</typeparam>
      <typeparam name="TResult">Tipo del risultato restituito dal selettore di risultato.</typeparam>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Valore finale dell'accumulatore.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Ottiene un valore che indica se tutti gli elementi nella matrice corrispondono a una determinata condizione.</summary>
      <param name="immutableArray">Matrice in cui cercare le corrispondenze.</param>
      <param name="predicate">Predicato.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>
        <see langword="true" /> se tutti gli elementi della sequenza di origine superano il test per il predicato specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Ottiene un valore che indica se la matrice contiene elementi.</summary>
      <param name="immutableArray">Matrice in cui cercare gli elementi.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>
        <see langword="true" /> se la matrice contiene elementi; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Ottiene un valore che indica se la matrice contiene elementi che corrispondono a una condizione specificata.</summary>
      <param name="immutableArray">Matrice in cui cercare gli elementi.</param>
      <param name="predicate">Delegato che definisce la condizione a cui deve corrispondere un elemento.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>
        <see langword="true" /> se un elemento corrisponde alla condizione specificata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Restituisce un valore che indica se questa raccolta contiene elementi.</summary>
      <param name="builder">Generatore in cui cercare le corrispondenze.</param>
      <typeparam name="T">Tipo di elementi nella matrice.</typeparam>
      <returns>
        <see langword="true" /> se il generatore della matrice contiene elementi; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>Restituisce l'elemento in corrispondenza dell'indice specificato nella matrice.</summary>
      <param name="immutableArray">Matrice in cui trovare un elemento.</param>
      <param name="index">Indice per l'elemento da recuperare.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Elemento in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>Restituisce l'elemento in corrispondenza di un indice specificato in una sequenza o un valore predefinito se l'indice è esterno all'intervallo.</summary>
      <param name="immutableArray">Matrice in cui trovare un elemento.</param>
      <param name="index">Indice per l'elemento da recuperare.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Elemento in corrispondenza dell'indice specificato o il valore predefinito se non viene trovato l'indice.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Restituisce il primo elemento in una matrice.</summary>
      <param name="immutableArray">Matrice da cui ottenere un elemento.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Primo elemento nella matrice.</returns>
      <exception cref="T:System.InvalidOperationException">Se la matrice è vuota.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce il primo elemento in una sequenza che soddisfa una condizione specificata.</summary>
      <param name="immutableArray">Matrice da cui ottenere un elemento.</param>
      <param name="predicate">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Primo elemento nell'elenco, se soddisfa la condizione specificata da <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException">Se la matrice è vuota.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Restituisce il primo elemento della raccolta.</summary>
      <param name="builder">Generatore da cui recuperare un elemento.</param>
      <typeparam name="T">Tipo di elementi nella matrice.</typeparam>
      <returns>Primo elemento nell'elenco.</returns>
      <exception cref="T:System.InvalidOperationException">Se la matrice è vuota.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Restituisce il primo elemento di una sequenza o un valore predefinito se la sequenza non contiene elementi.</summary>
      <param name="immutableArray">Matrice da cui recuperare gli elementi.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Primo elemento nell'elenco, se trovato; in caso contrario, il valore predefinito per il tipo di elemento.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce il primo elemento della sequenza che soddisfa una condizione specificata o un valore predefinito se tale elemento non viene trovato.</summary>
      <param name="immutableArray">Matrice da cui recuperare gli elementi.</param>
      <param name="predicate">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Primo elemento nell'elenco, se trovato; in caso contrario, il valore predefinito per il tipo di elemento.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Restituisce il primo elemento nella raccolta o il valore predefinito se la raccolta è vuota.</summary>
      <param name="builder">Generatore da cui recuperare un elemento.</param>
      <typeparam name="T">Tipo di elemento contenuto nel generatore.</typeparam>
      <returns>Primo elemento nell'elenco, se trovato; in caso contrario, il valore predefinito per il tipo di elemento.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Restituisce l'ultimo elemento della matrice.</summary>
      <param name="immutableArray">Matrice da cui recuperare gli elementi.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla matrice.</typeparam>
      <returns>Ultimo elemento nella matrice.</returns>
      <exception cref="T:System.InvalidOperationException">Viene generato se la raccolta è vuota.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce l'ultimo elemento di una sequenza che soddisfa una condizione specificata.</summary>
      <param name="immutableArray">Matrice da cui recuperare gli elementi.</param>
      <param name="predicate">Delegato che definisce le condizioni dell'elemento da recuperare.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Ultimo elemento della matrice che soddisfa la condizione <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException">Viene generato se la raccolta è vuota.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Restituisce l'ultimo elemento della raccolta.</summary>
      <param name="builder">Generatore da cui recuperare gli elementi.</param>
      <typeparam name="T">Tipo di elemento contenuto nel generatore.</typeparam>
      <returns>Ultimo elemento nel generatore.</returns>
      <exception cref="T:System.InvalidOperationException">Viene generato se la raccolta è vuota.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Restituisce l'ultimo elemento di una sequenza o un valore predefinito se la sequenza non contiene elementi.</summary>
      <param name="immutableArray">Matrice da cui recuperare gli elementi.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Ultimo elemento di una sequenza o un valore predefinito se la sequenza non contiene elementi.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce l'ultimo elemento di una sequenza che soddisfa una condizione specificata o un valore predefinito se tale elemento non viene trovato.</summary>
      <param name="immutableArray">Matrice da cui recuperare un elemento.</param>
      <param name="predicate">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Ultimo elemento di una sequenza o un valore predefinito se la sequenza non contiene elementi.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Restituisce l'ultimo elemento nella raccolta o il valore predefinito se la raccolta è vuota.</summary>
      <param name="builder">Generatore da cui recuperare un elemento.</param>
      <typeparam name="T">Tipo di elemento contenuto nel generatore.</typeparam>
      <returns>Ultimo elemento di una sequenza o un valore predefinito se la sequenza non contiene elementi.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>Proietta ogni elemento di una sequenza in un nuovo form.</summary>
      <param name="immutableArray">Matrice non modificabile da cui selezionare gli elementi.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <typeparam name="TResult">Tipo di elemento di risultato.</typeparam>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono il risultato ottenuto richiamando una funzione di trasformazione su ogni elemento di origine.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Proietta ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />, semplifica le sequenze risultanti in un'unica sequenza e chiama una funzione del selettore di risultato su ogni elemento al suo interno.</summary>
      <param name="immutableArray">Matrice non modificabile.</param>
      <param name="collectionSelector">Funzione di trasformazione da applicare a ogni elemento della sequenza di input.</param>
      <param name="resultSelector">Funzione di trasformazione da applicare a ogni elemento della sequenza intermedia.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="immutableArray" />.</typeparam>
      <typeparam name="TCollection">Tipo degli elementi intermedi raccolti da <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Tipo degli elementi della sequenza risultante.</typeparam>
      <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono ottenuti chiamando la funzione di trasformazione uno a molti <paramref name="collectionSelector" /> su ogni elemento di <paramref name="immutableArray" /> ed eseguendo quindi il mapping di ogni elemento di tale sequenza e del corrispondente elemento di origine a un elemento di risultato.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Determina se due sequenze sono uguali secondo un operatore di confronto di uguaglianza.</summary>
      <param name="immutableArray">Matrice da usare per il confronto.</param>
      <param name="items">Elementi da usare per il confronto.</param>
      <param name="comparer">Operatore di confronto da usare per verificare l'uguaglianza.</param>
      <typeparam name="TDerived">Tipo di elemento nella matrice confrontata.</typeparam>
      <typeparam name="TBase">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>
        <see langword="true" /> per indicare che le sequenze sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Determina se due sequenze sono uguali secondo un operatore di confronto di uguaglianza.</summary>
      <param name="immutableArray">Matrice da usare per il confronto.</param>
      <param name="items">Elementi da usare per il confronto.</param>
      <param name="comparer">Operatore di confronto da usare per verificare l'uguaglianza.</param>
      <typeparam name="TDerived">Tipo di elemento nella matrice confrontata.</typeparam>
      <typeparam name="TBase">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>
        <see langword="true" /> per indicare che le sequenze sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary>Determina se due sequenze sono uguali secondo un operatore di confronto di uguaglianza.</summary>
      <param name="immutableArray">Matrice da usare per il confronto.</param>
      <param name="items">Elementi da usare per il confronto.</param>
      <param name="predicate">Operatore di confronto da usare per verificare l'uguaglianza.</param>
      <typeparam name="TDerived">Tipo di elemento nella matrice confrontata.</typeparam>
      <typeparam name="TBase">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>
        <see langword="true" /> per indicare che le sequenze sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Restituisce l'unico elemento di una sequenza e genera un'eccezione se nella sequenza non è presente esattamente un elemento.</summary>
      <param name="immutableArray">Matrice da cui recuperare l'elemento.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Elemento nella sequenza.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce l'unico elemento di una sequenza che soddisfa una condizione specificata e genera un'eccezione se esistono più elementi di tale tipo.</summary>
      <param name="immutableArray" />
      <param name="predicate" />
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Restituisca il valore <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Restituisce l'unico elemento della matrice o un valore predefinito se la sequenza è vuota. Questo metodo genera un'eccezione se esiste più di un elemento nella sequenza.</summary>
      <param name="immutableArray">Matrice.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Elemento nella matrice o il valore predefinito se la matrice è vuota.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contiene più di un elemento.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce l'unico elemento di una sequenza che soddisfa una condizione specificata o un valore predefinito se tale elemento esiste. Questo metodo genera un'eccezione se più di un elemento soddisfa la condizione.</summary>
      <param name="immutableArray">Matrice da cui ottenere l'elemento.</param>
      <param name="predicate">Condizione che l'elemento deve soddisfare.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Elemento, se soddisfa la condizione specificata; in caso contrario, l'elemento predefinito.</returns>
      <exception cref="T:System.InvalidOperationException">Più di un elemento soddisfa la condizione in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Copia il contenuto di questa matrice in una matrice modificabile.</summary>
      <param name="immutableArray" />
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Matrice di cui è stata creata la nuova istanza.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary>Crea un dizionario basato sul contenuto di questa matrice.</summary>
      <param name="immutableArray">Matrice da cui creare un dizionario.</param>
      <param name="keySelector">Selettore di chiave.</param>
      <typeparam name="TKey">Tipo di chiave.</typeparam>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Dizionario appena inizializzato.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crea un dizionario basato sul contenuto di questa matrice.</summary>
      <param name="immutableArray">Matrice da cui creare un dizionario.</param>
      <param name="keySelector">Selettore di chiave.</param>
      <param name="comparer">Operatore di confronto con cui inizializzare il dizionario.</param>
      <typeparam name="TKey">Tipo di chiave.</typeparam>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Dizionario appena inizializzato.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary>Crea un dizionario basato sul contenuto di questa matrice.</summary>
      <param name="immutableArray">Matrice da cui creare un dizionario.</param>
      <param name="keySelector">Selettore di chiave.</param>
      <param name="elementSelector">Selettore di elemento.</param>
      <typeparam name="TKey">Tipo di chiave.</typeparam>
      <typeparam name="TElement">Tipo dell'elemento.</typeparam>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Dizionario appena inizializzato.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crea un dizionario basato sul contenuto di questa matrice.</summary>
      <param name="immutableArray">Matrice da cui creare un dizionario.</param>
      <param name="keySelector">Selettore di chiave.</param>
      <param name="elementSelector">Selettore di elemento.</param>
      <param name="comparer">Operatore di confronto con cui inizializzare il dizionario.</param>
      <typeparam name="TKey">Tipo di chiave.</typeparam>
      <typeparam name="TElement">Tipo dell'elemento.</typeparam>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Dizionario appena inizializzato.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Filtra una sequenza di valori in base a un predicato.</summary>
      <param name="immutableArray">Matrice da filtrare.</param>
      <param name="predicate">Condizione da usare per filtrare il contenuto della matrice.</param>
      <typeparam name="T">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns>Restituisce <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli elementi che soddisfano la condizione.</returns>
    </member>
  </members>
</doc>
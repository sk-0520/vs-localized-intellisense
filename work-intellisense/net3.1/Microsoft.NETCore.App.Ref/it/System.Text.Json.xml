<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct handles comments.">Definisce come vengono gestiti i commenti dallo struct <see cref="T:System.Text.Json.Utf8JsonReader" />.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary vsli:raw="Allows comments within the JSON input and treats them as valid tokens. While reading, the caller can access the comment values.">Consente i commenti all'interno di input JSON e li considera come token validi. Durante la lettura il chiamante può accedere ai valori di commento.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary vsli:raw="Doesn't allow comments within the JSON input. Comments are treated as invalid JSON if found, and a &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; is thrown. This is the default value.">Non consente i commenti all'interno di input JSON. Gli eventuali commenti trovati vengono considerati come codice JSON non valido viene generata una <see cref="T:System.Text.Json.JsonException" />. Rappresenta il valore predefinito.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary vsli:raw="Allows comments within the JSON input and ignores them. The &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; behaves as if no comments are present.">Consente i commenti all'interno di input JSON e li ignora. <see cref="T:System.Text.Json.Utf8JsonReader" /> si comporta come se non fossero presenti commenti.</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary vsli:raw="Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values.">Offre un meccanismo per l'esame del contenuto strutturale di un valore JSON senza creare automaticamente istanze dei valori di dati.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonDocument&quot;&gt;&lt;/xref&gt; instance.">Rilascia le risorse usate dall'istanza di <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a sequence as UTF-8-encoded text representing a single JSON value into a JsonDocument.">Analizza una sequenza come testo con codifica UTF-8 che rappresenta un valore byte JSON singolo in un JsonDocument.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Il testo JSON da analizzare.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opzioni per controllare il comportamento del lettore durante l'analisi.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Rappresentazione JsonDocument del valore JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> non rappresenta un valore JSON singolo valido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contiene opzioni non supportate.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">Analizza un elemento <see cref="T:System.IO.Stream" /> come dati con codifica UTF-8 che rappresentano un valore JSON singolo in un JsonDocument. Il flusso viene letto fino al completamento.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Dati JSON da analizzare.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opzioni per controllare il comportamento del lettore durante l'analisi.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Rappresentazione JsonDocument del valore JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> non rappresenta un valore JSON singolo valido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contiene opzioni non supportate.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses memory as UTF-8-encoded text representing a single JSON value into a JsonDocument.">Analizza la memoria come testo con codifica UTF-8 che rappresenta un valore byte JSON singolo in un JsonDocument.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Il testo JSON da analizzare.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opzioni per controllare il comportamento del lettore durante l'analisi.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Rappresentazione JsonDocument del valore JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> non rappresenta un valore JSON singolo valido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contiene opzioni non supportate.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON value into a JsonDocument.">Analizza testo che rappresenta un valore carattere JSON singolo in un JsonDocument.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Il testo JSON da analizzare.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opzioni per controllare il comportamento del lettore durante l'analisi.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Rappresentazione JsonDocument del valore JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> non rappresenta un valore JSON singolo valido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contiene opzioni non supportate.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON string value into a JsonDocument.">Analizza testo che rappresenta un valore stringa JSON singolo in un JsonDocument.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Il testo JSON da analizzare.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opzioni per controllare il comportamento del lettore durante l'analisi.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Rappresentazione JsonDocument del valore JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> non rappresenta un valore JSON singolo valido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contiene opzioni non supportate.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">Analizza un elemento <see cref="T:System.IO.Stream" /> come dati con codifica UTF-8 che rappresentano un valore JSON singolo in un JsonDocument. Il flusso viene letto fino al completamento.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Dati JSON da analizzare.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opzioni per controllare il comportamento del lettore durante l'analisi.</param>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests.">Token da monitorare per le richieste di annullamento.</param>
      <returns vsli:raw="A task to produce a JsonDocument representation of the JSON value.">Attività che crea una rappresentazione JsonDocument del valore JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> non rappresenta un valore JSON singolo valido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contiene opzioni non supportate.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary vsli:raw="Parses one JSON value (including objects or arrays) from the provided reader.">Analizza un valore JSON (inclusi gli oggetti o le matrici) dal lettore specificato.</summary>
      <param name="reader" vsli:raw="The reader to read.">Lettore per eseguire la lettura.</param>
      <returns vsli:raw="A JsonDocument representing the value (and nested values) read from the reader.">JsonDocument che rappresenta il valore (e i valori annidati) letti dal lettore.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> contiene opzioni non supportate.
-oppure-
Il token <paramref name="reader" /> non avvia o rappresenta un valore.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">Il lettore non è riuscito a leggere un valore.</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary vsli:raw="Gets the root element of this JSON document.">Ottiene l'elemento radice di questo documento JSON.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the document.">
        <see cref="T:System.Text.Json.JsonElement" /> che rappresenta il valore del documento.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary vsli:raw="Attempts to parse one JSON value (including objects or arrays) from the provided reader.">Prova ad analizzare un valore JSON (inclusi gli oggetti o le matrici) dal lettore specificato.</summary>
      <param name="reader" vsli:raw="The reader to read.">Lettore per eseguire la lettura.</param>
      <param name="document" vsli:raw="When the method returns, contains the parsed document.">Quando termina, questo metodo contiene il documento analizzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a value was read and parsed into a JsonDocument; &lt;see langword=&quot;false&quot; /&gt; if the reader ran out of data while parsing. All other situations result in an exception being thrown.">
        <see langword="true" /> se un valore è stato letto e convertito in un JsonDocument; <see langword="false" /> se il lettore ha esaurito i dati durante l'analisi. In tutti gli altri casi viene generata un'eccezione.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> contiene opzioni non supportate.
-oppure-
Il token <paramref name="reader" /> non avvia o rappresenta un valore.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">Il lettore non è riuscito a leggere un valore.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the document to the provided writer as a JSON value.">Scrive il documento nel writer specificato come valore JSON.</summary>
      <param name="writer" vsli:raw="The writer to which to write the document.">Writer in cui scrivere il documento.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="writer" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this &lt;see cref=&quot;P:System.Text.Json.JsonDocument.RootElement&quot; /&gt; would result in invalid JSON.">Il <see cref="P:System.Text.Json.JsonElement.ValueKind" /> di questo elemento <see cref="P:System.Text.Json.JsonDocument.RootElement" /> produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when parsing JSON to create a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Consente all'utente di definire il comportamento personalizzato durante l'analisi di dati JSON per creare un <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">Ottiene o imposta un valore che indica se una virgola aggiuntiva alla fine di un elenco di valori JSON in un oggetto o una matrice è consentita (e ignorata) all'interno del payload JSON in corso di lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. Default is &lt;see langword=&quot;false&quot; /&gt;">
        <see langword="true" /> se è consentita una virgola aggiuntiva alla fine di un elenco di valori JSON in un oggetto o in una matrice. in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" /></returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; handles comments when reading through the JSON data.">Ottiene o imposta un valore che determina il modo in cui <see cref="T:System.Text.Json.JsonDocument" /> gestisce i commenti durante la lettura dei dati JSON.</summary>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">Uno dei valori di enumerazione che indica come vengono gestiti i commenti.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">L'enumerazione di gestione dei commenti è impostata su un valore non supportato o non compreso nell'intervallo di enum <see cref="T:System.Text.Json.JsonCommentHandling" />.</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when parsing JSON data, with the default (that is, 0) indicating a maximum depth of 64.">Ottiene o imposta la profondità massima consentita durante l'analisi di dati JSON, con il valore predefinito (ad esempio 0) che indica una profondità massima di 64.</summary>
      <returns vsli:raw="The maximum depth allowed when parsing JSON data.">Profondità massima consentita durante l'analisi dei dati JSON.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">La profondità massima è impostata su un valore negativo.</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary vsli:raw="Represents a specific JSON value within a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Rappresenta un valore JSON specifico all'interno di un <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary vsli:raw="Represents an enumerator for the contents of a JSON array.">Rappresenta un enumeratore per i contenuti di una matrice JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Ottiene l'elemento della raccolta in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento della raccolta in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ArrayEnumerator&quot;&gt;&lt;/xref&gt; instance.">Rilascia le risorse usate dall'istanza di <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">Enumeratore che può essere usato per scorrere la matrice.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">Sposta l'enumeratore all'elemento successivo della raccolta.</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo, <see langword="false" /> se l'enumeratore ha superato la fine della raccolta.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento nella raccolta.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns>Enumeratore per una matrice di <see cref="T:System.Text.Json.JsonElement" /> che può essere usato per eseguire l'iterazione della raccolta.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Ottiene l'elemento della raccolta in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento della raccolta in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary vsli:raw="Gets a JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Ottiene un JsonElement archiviabile in modo sicuro oltre la durata dell'elemento <see cref="T:System.Text.Json.JsonDocument" /> originale.</summary>
      <returns vsli:raw="A JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">JsonElement archiviabile in modo sicuro oltre la durata dell'elemento <see cref="T:System.Text.Json.JsonDocument" /> originale.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary vsli:raw="Gets an enumerator to enumerate the values in the JSON array represented by this JsonElement.">Ottiene un enumeratore per enumerare i valori nella matrice JSON rappresentata da questo JsonElement.</summary>
      <returns vsli:raw="An enumerator to enumerate the values in the JSON array represented by this JsonElement.">Enumeratore per enumerare i valori nella matrice JSON rappresentata da questo JsonElement.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary vsli:raw="Gets an enumerator to enumerate the properties in the JSON object represented by this JsonElement.">Ottiene un enumeratore per enumerare le proprietà nell'oggetto JSON rappresentato da questo JsonElement.</summary>
      <returns vsli:raw="An enumerator to enumerate the properties in the JSON object represented by this JsonElement.">Enumeratore per enumerare le proprietà nell'oggetto JSON rappresentato da questo JsonElement.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary vsli:raw="Gets the number of values contained within the current array value.">Ottiene il numero di valori contenuti nel valore di matrice corrente.</summary>
      <returns vsli:raw="The number of values contained within the current array value.">Numero di valori contenuti nel valore di matrice corrente.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Ottiene il valore dell'elemento come <see cref="T:System.Boolean" />.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Valore dell'elemento come <see cref="T:System.Boolean" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.True&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.False&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per il valore non è <see cref="F:System.Text.Json.JsonValueKind.True" /> né <see cref="F:System.Text.Json.JsonValueKind.False" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Ottiene il numero JSON corrente come <see cref="T:System.Byte" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Numero JSON corrente come <see cref="T:System.Byte" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Il valore non può essere rappresentato come un <see cref="T:System.Byte" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary vsli:raw="Gets the value of the element as a byte array.">Ottiene il valore dell'elemento sotto forma di matrice di byte.</summary>
      <returns vsli:raw="The value decoded as a byte array.">Valore decodificato come matrice di byte.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text and hence cannot be decoded to bytes.">Il valore non è codificato come testo in Base64 e quindi non può essere decodificato in byte.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Ottiene il valore dell'elemento come <see cref="T:System.DateTime" />.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Valore dell'elemento come <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Il valore non può essere letto come <see cref="T:System.DateTime" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Ottiene il valore dell'elemento come <see cref="T:System.DateTimeOffset" />.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Valore dell'elemento come <see cref="T:System.DateTimeOffset" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Il valore non può essere letto come <see cref="T:System.DateTimeOffset" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Ottiene il numero JSON corrente come <see cref="T:System.Decimal" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Numero JSON corrente come <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Il valore non può essere rappresentato come un <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Ottiene il numero JSON corrente come <see cref="T:System.Double" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Numero JSON corrente come <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Il valore non può essere rappresentato come un <see cref="T:System.Double" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Ottiene il valore dell'elemento come <see cref="T:System.Guid" />.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Valore dell'elemento come <see cref="T:System.Guid" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Il valore non può essere rappresentato come un <see cref="T:System.Guid" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Ottiene il numero JSON corrente come <see cref="T:System.Int16" />.</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Numero JSON corrente come <see cref="T:System.Int16" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Il valore non può essere rappresentato come un <see cref="T:System.Int16" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Ottiene il numero JSON corrente come <see cref="T:System.Int32" />.</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Numero JSON corrente come <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Il valore non può essere rappresentato come un <see cref="T:System.Int32" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Ottiene il numero JSON corrente come <see cref="T:System.Int64" />.</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Numero JSON corrente come <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Il valore non può essere rappresentato come un <see cref="T:System.Int64" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;utf8PropertyName&quot; /&gt;.">Ottiene un elemento <see cref="T:System.Text.Json.JsonElement" /> che rappresenta il valore di una proprietà obbligatoria identificata da <paramref name="utf8PropertyName" />.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 representation (with no Byte-Order-Mark (BOM)) of the name of the property to return.">Rappresentazione UTF-8 senza byte order mark (BOM) del nome della proprietà da restituire.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">Elemento <see cref="T:System.Text.Json.JsonElement" /> che rappresenta il valore della proprietà richiesta.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">Nessuna proprietà trovata con il nome richiesto.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">Ottiene un elemento <see cref="T:System.Text.Json.JsonElement" /> che rappresenta il valore di una proprietà obbligatoria identificata da <paramref name="propertyName" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">Nome della proprietà di cui deve essere restituito il valore.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">Elemento <see cref="T:System.Text.Json.JsonElement" /> che rappresenta il valore della proprietà richiesta.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">Nessuna proprietà trovata con il nome richiesto.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">Ottiene un elemento <see cref="T:System.Text.Json.JsonElement" /> che rappresenta il valore di una proprietà obbligatoria identificata da <paramref name="propertyName" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">Nome della proprietà di cui deve essere restituito il valore.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">Elemento <see cref="T:System.Text.Json.JsonElement" /> che rappresenta il valore della proprietà richiesta.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">Nessuna proprietà trovata con il nome richiesto.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary vsli:raw="Gets a string that represents the original input data backing this value.">Ottiene una stringa che rappresenta i dati di input originali sottostanti questo valore.</summary>
      <returns vsli:raw="The original input data backing this value.">Dati di input originali sottostanti questo valore.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Ottiene il numero JSON corrente come <see cref="T:System.SByte" />.</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Numero JSON corrente come <see cref="T:System.SByte" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Il valore non può essere rappresentato come un <see cref="T:System.SByte" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Ottiene il numero JSON corrente come <see cref="T:System.Single" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Numero JSON corrente come <see cref="T:System.Single" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Il valore non può essere rappresentato come un <see cref="T:System.Single" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Ottiene il valore dell'elemento come <see cref="T:System.String" />.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Valore dell'elemento come <see cref="T:System.String" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per il valore non è <see cref="F:System.Text.Json.JsonValueKind.String" /> né <see cref="F:System.Text.Json.JsonValueKind.Null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Ottiene il numero JSON corrente come <see cref="T:System.UInt16" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Numero JSON corrente come <see cref="T:System.UInt16" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Il valore non può essere rappresentato come un <see cref="T:System.UInt16" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Ottiene il numero JSON corrente come <see cref="T:System.UInt32" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Numero JSON corrente come <see cref="T:System.UInt32" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Il valore non può essere rappresentato come un <see cref="T:System.UInt32" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Ottiene il numero JSON corrente come <see cref="T:System.UInt64" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Numero JSON corrente come <see cref="T:System.UInt64" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Il valore non può essere rappresentato come un <see cref="T:System.UInt64" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary vsli:raw="Gets the value at the specified index if the current value is an &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">Ottiene il valore in corrispondenza dell'indice specificato se il valore corrente è un <see cref="F:System.Text.Json.JsonValueKind.Array" />.</summary>
      <param name="index" vsli:raw="The item index.">Indice dell'elemento.</param>
      <returns vsli:raw="The value at the specified index.">Valore in corrispondenza dell'indice specificato.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not in the range [0, &lt;see cref=&quot;M:System.Text.Json.JsonElement.GetArrayLength&quot; /&gt;()).">
        <paramref name="index" /> non è incluso nell'intervallo [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()).</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary vsli:raw="Represents an enumerator for the properties of a JSON object.">Rappresenta un enumeratore per le proprietà di un oggetto JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Ottiene l'elemento della raccolta in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento della raccolta in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ObjectEnumerator&quot;&gt;&lt;/xref&gt; instance.">Rilascia le risorse usate dall'istanza di <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates the properties of an object.">Restituisce un enumeratore che consente di scorrere le proprietà di un oggetto.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the object.">Enumeratore che può essere usato per scorrere l'oggetto.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">Sposta l'enumeratore all'elemento successivo della raccolta.</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo, <see langword="false" /> se l'enumeratore ha superato la fine della raccolta.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento nella raccolta.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns>Enumeratore per oggetti <see cref="T:System.Text.Json.JsonProperty" /> che può essere usato per eseguire l'iterazione della raccolta.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Ottiene l'elemento della raccolta in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento della raccolta in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary vsli:raw="Gets a string representation for the current value appropriate to the value type.">Ottiene una rappresentazione stringa del valore corrente appropriata per il tipo di valore.</summary>
      <returns vsli:raw="A string representation for the current value appropriate to the value type.">Rappresentazione stringa del valore corrente appropriata per il tipo di valore.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Prova a rappresentare il numero JSON corrente come un <see cref="T:System.Byte" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando il metodo termina, contiene l'equivalente in byte del numero JSON corrente se la conversione ha esito positivo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.Byte" />; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a byte array, assuming that it is Base64 encoded.">Prova a rappresentare la stringa JSON corrente come matrice di byte, supponendo che sia codificata in base 64.</summary>
      <param name="value" vsli:raw="If the method succeeds, contains the decoded binary representation of the Base64 text.">Se il metodo ha esito positivo, contiene la rappresentazione binaria decodificata del testo in base 64.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'intero valore del token è codificato come testo valido in Base64 e può essere decodificato correttamente in byte; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Prova a rappresentare la stringa JSON corrente come un <see cref="T:System.DateTime" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">Quando termina, questo metodo contiene il valore di data e ora equivalente alla stringa JSON corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la stringa può essere rappresentata come <see cref="T:System.DateTime" />; in caso contrario <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Prova a rappresentare la stringa JSON corrente come un <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">Quando termina, questo metodo contiene la data e ora equivalenti alla stringa JSON corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la stringa può essere rappresentata come <see cref="T:System.DateTimeOffset" />; in caso contrario <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Prova a rappresentare il numero JSON corrente come un <see cref="T:System.Decimal" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene l'equivalente decimale del numero JSON corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.Decimal" />; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Prova a rappresentare il numero JSON corrente come un <see cref="T:System.Double" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore a virgola mobile e precisione doppia equivalente al numero JSON corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.Double" />; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Prova a rappresentare la stringa JSON corrente come un <see cref="T:System.Guid" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">Quando termina, questo metodo contiene il GUID equivalente alla stringa JSON corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la stringa può essere rappresentata come <see cref="T:System.Guid" />; in caso contrario <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Prova a rappresentare il numero JSON corrente come un <see cref="T:System.Int16" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando il metodo termina, contiene l'equivalente intero a 16 bit del numero JSON corrente se la conversione ha esito positivo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.Int16" />; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Prova a rappresentare il numero JSON corrente come un <see cref="T:System.Int32" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore intero a 32 bit equivalente al numero JSON corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.Int32" />; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Prova a rappresentare il numero JSON corrente come un <see cref="T:System.Int64" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore intero a 64 bit equivalente al numero JSON corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.Int64" />; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;utf8PropertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Cerca una proprietà con nome <paramref name="utf8PropertyName" /> nell'oggetto corrente e restituisce un valore che indica se la proprietà esiste. Se la proprietà esiste, il metodo ne assegna il valore all'argomento <paramref name="value" />.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.">Rappresentazione UTF-8 senza byte order mark (BOM) del nome della proprietà da restituire.</param>
      <param name="value" vsli:raw="Receives the value of the located property.">Riceve il valore della proprietà trovata.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la proprietà è stata trovata; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Cerca una proprietà con nome <paramref name="propertyName" /> nell'oggetto corrente e restituisce un valore che indica se la proprietà esiste. Se la proprietà esiste, il metodo ne assegna il valore all'argomento <paramref name="value" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">Nome della proprietà da trovare.</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">Quando termina, il metodo contiene il valore della proprietà specificata.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la proprietà è stata trovata; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, its value is assigned to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Cerca una proprietà con nome <paramref name="propertyName" /> nell'oggetto corrente e restituisce un valore che indica se la proprietà esiste. Se la proprietà esiste, il relativo valore viene assegnato all'argomento <paramref name="value" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">Nome della proprietà da trovare.</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">Quando termina, il metodo contiene il valore della proprietà specificata.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la proprietà è stata trovata; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Prova a rappresentare il numero JSON corrente come un <see cref="T:System.SByte" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando il metodo termina, contiene l'equivalente in byte con segno del numero JSON corrente se la conversione ha esito positivo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.SByte" />; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Prova a rappresentare il numero JSON corrente come un <see cref="T:System.Single" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore a virgola mobile e precisione singola equivalente al numero JSON corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.Single" />; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Prova a rappresentare il numero JSON corrente come un <see cref="T:System.UInt16" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando il metodo termina, contiene l'equivalente intero a 16 bit senza segno del numero JSON corrente se la conversione ha esito positivo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.UInt16" />; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Prova a rappresentare il numero JSON corrente come un <see cref="T:System.UInt32" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore intero a 32 bit senza segno equivalente al numero JSON corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.UInt32" />; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Prova a rappresentare il numero JSON corrente come un <see cref="T:System.UInt64" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore intero a 64 bit senza segno equivalente al numero JSON corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.UInt64" />; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the text represented by a UTF8-encoded byte span to the string value of this element.">Confronta il testo rappresentato da un intervallo di byte con codifica UTF8 con il valore stringa di questo elemento.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">Testo con codifica UTF-8 da usare per il confronto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element has the same UTF-8 encoding as&#xA;              &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore stringa di questo elemento ha la stessa codifica UTF-8 di <paramref name="utf8Text" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares a specified read-only character span to the string value of this element.">Confronta un intervallo di caratteri di sola lettura specificato con il valore stringa di questo elemento.</summary>
      <param name="text" vsli:raw="The text to compare against.">Testo con cui eseguire il confronto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore stringa di questo elemento corrisponde a <paramref name="text" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary vsli:raw="Compares a specified string to the string value of this element.">Confronta una stringa specificata con il valore stringa di questo elemento.</summary>
      <param name="text" vsli:raw="The text to compare against.">Testo con cui eseguire il confronto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore stringa di questo elemento corrisponde a <paramref name="text" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary vsli:raw="Gets the type of the current JSON value.">Ottiene il tipo del valore JSON corrente.</summary>
      <returns vsli:raw="The type of the current JSON value.">Tipo del valore JSON corrente.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the element to the specified writer as a JSON value.">Scrive l'elemento nel writer specificato come valore JSON.</summary>
      <param name="writer" vsli:raw="The writer to which to write the element.">Writer di testo in cui scrivere l'elemento.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="writer" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this value is &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Undefined&quot; /&gt;.">La proprietà <see cref="P:System.Text.Json.JsonElement.ValueKind" /> di questo valore è <see cref="F:System.Text.Json.JsonValueKind.Undefined" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary vsli:raw="Provides methods to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON.">Fornisce metodi per trasformare il testo con codifica UTF-8 o UTF-16 in un modulo adatto a JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a UTF-8 text value as a JSON string.">Codifica un valore di testo UTF-8 come stringa JSON.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded text to convert to JSON encoded text.">Testo con codifica UTF-8 da convertire in testo con codifica JSON.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Codificatore da usare per l'escape delle stringhe oppure <see langword="null" /> per usare il codificatore predefinito.</param>
      <returns vsli:raw="The encoded JSON text.">Testo JSON codificato.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;utf8Value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains invalid UTF-8 bytes.">
        <paramref name="utf8Value" /> è troppo grande.
-oppure-
<paramref name="utf8Value" /> contiene byte UTF-8 non validi.</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a specified text value as a JSON string.">Codifica un valore di testo specificato come stringa JSON.</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">Valore da convertire in testo codificato JSON.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Codificatore da usare per l'escape delle stringhe oppure <see langword="null" /> per usare il codificatore predefinito.</param>
      <returns vsli:raw="The encoded JSON text.">Testo JSON codificato.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> è troppo grande.
-oppure-
<paramref name="value" /> contiene caratteri UTF-16 non validi.</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes the string text value as a JSON string.">Codifica il valore di testo della stringa come stringa JSON.</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">Valore da convertire in testo codificato JSON.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Codificatore da usare per l'escape delle stringhe oppure <see langword="null" /> per usare il codificatore predefinito.</param>
      <returns vsli:raw="The encoded JSON text.">Testo JSON codificato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> è troppo grande.
-oppure-
<paramref name="value" /> contiene caratteri UTF-16 non validi.</exception>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary vsli:raw="Gets the UTF-8 encoded representation of the pre-encoded JSON text.">Ottiene la rappresentazione con codifica UTF-8 del testo JSON precodificato.</summary>
      <returns vsli:raw="The UTF-8 encoded representation of the pre-encoded JSON text.">Rappresentazione con codifica UTF-8 del testo JSON pre-codificato.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance and a specified object, which must also be a &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance, have the same value.">Determina se questa istanza e un oggetto specificato, che deve essere anche un'istanza di <see cref="T:System.Text.Json.JsonEncodedText" />, hanno lo stesso valore.</summary>
      <param name="obj" vsli:raw="The object to compare to this instance.">Oggetto da confrontare con questa istanza.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'istanza corrente è uguale a <paramref name="obj" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Determines whether this instance and another specified &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance have the same value.">Determina se questa istanza e un'altra istanza di <see cref="T:System.Text.Json.JsonEncodedText" /> specificata hanno lo stesso valore.</summary>
      <param name="other" vsli:raw="The object to compare to this instance.">Oggetto da confrontare con questa istanza.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance and &lt;paramref name=&quot;other&quot; /&gt; have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questa istanza e <paramref name="other" /> hanno lo stesso valore. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt;.">Restituisce il codice hash per questo <see cref="T:System.Text.Json.JsonEncodedText" />.</summary>
      <returns vsli:raw="The hash code for this instance.">Codice hash per l'istanza.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary vsli:raw="Converts the value of this instance to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Converte il valore di questa istanza in un oggetto <see cref="T:System.String" />.</summary>
      <returns vsli:raw="The underlying UTF-16 encoded string.">Stringa con codifica UTF-16 sottostante.</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary vsli:raw="Defines a custom exception object that is thrown when invalid JSON text is encountered, the defined maximum depth is passed, or the JSON text is not compatible with the type of a property on an object.">Definisce un oggetto eccezione personalizzato che viene generato quando viene rilevato testo JSON non valido, quando viene passata la profondità massima definita o il testo JSON non è compatibile con il tipo di una proprietà in un oggetto.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Text.Json.JsonException" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Creates a new exception object with serialized data.">Crea un nuovo oggetto eccezione con dati serializzati.</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">Dati dell'oggetto serializzato relativi all'eccezione generata.</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">Oggetto contenente le informazioni contestuali sull'origine o la destinazione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class with a specified error message.">Inizializza una nuova istanza della classe <see cref="T:System.Text.Json.JsonException" /> con un messaggio di errore specificato.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Il messaggio di errore specifico del contesto.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class, with a specified error message and a reference to the inner exception that is the cause of this exception.">Inizializza una nuova istanza della classe <see cref="T:System.Text.Json.JsonException" /> con un messaggio di errore specificato e un riferimento all'eccezione interna che è la causa dell'eccezione corrente.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Il messaggio di errore specifico del contesto.</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">Eccezione che ha causato l'eccezione corrente.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary vsli:raw="Creates a new exception object to relay error information to the user.">Crea un nuovo oggetto eccezione per fornire informazioni sull'errore all'utente.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Il messaggio di errore specifico del contesto.</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">Percorso in cui è stato rilevato testo JSON non valido.</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">Numero di riga (a partire da 0) in cui è stato rilevato testo JSON non valido durante la deserializzazione.</param>
      <param name="bytePositionInLine" vsli:raw="The byte count within the current line (starting at 0) where the invalid JSON was encountered.">Numero di byte nella riga corrente (a partire da 0) in cui è stato rilevato testo JSON non valido.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary vsli:raw="Creates a new exception object to relay error information to the user that includes a specified inner exception.">Crea un nuovo oggetto eccezione per inoltrare all'utente informazioni sull'errore che include un'eccezione interna specificata.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Il messaggio di errore specifico del contesto.</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">Percorso in cui è stato rilevato testo JSON non valido.</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">Numero di riga (a partire da 0) in cui è stato rilevato testo JSON non valido durante la deserializzazione.</param>
      <param name="bytePositionInLine" vsli:raw="The byte count (starting at 0) within the current line where the invalid JSON was encountered.">Numero di byte (a partire da 0) nella riga corrente in cui è stato rilevato testo JSON non valido.</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">Eccezione che ha causato l'eccezione corrente.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary vsli:raw="Gets the zero-based number of bytes read within the current line before the exception.">Ottiene il numero in base zero di byte letti all'interno della riga corrente prima dell'eccezione.</summary>
      <returns vsli:raw="The zero-based number of bytes read within the current line before the exception.">Numero in base zero di byte letti all'interno della riga corrente prima dell'eccezione.</returns>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">Imposta l'oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con le informazioni sull'eccezione.</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">Dati dell'oggetto serializzato relativi all'eccezione generata.</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">Oggetto contenente le informazioni contestuali sull'origine o la destinazione.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary vsli:raw="Gets the zero-based number of lines read before the exception.">Ottiene il numero in base zero di righe lette prima dell'eccezione.</summary>
      <returns vsli:raw="The zero-based number of lines read before the exception.">Numero in base zero di righe lette prima dell'eccezione.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary vsli:raw="Gets a message that describes the current exception.">Ottiene un messaggio che descrive l'eccezione corrente.</summary>
      <returns vsli:raw="The error message that describes the current exception.">Messaggio di errore che descrive l'eccezione corrente.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary vsli:raw="Gets The path within the JSON where the exception was encountered.">Ottiene il percorso all'interno del testo JSON in cui è stata rilevata l'eccezione.</summary>
      <returns vsli:raw="The path within the JSON where the exception was encountered.">Percorso all'interno del file JSON in cui è stata rilevata l'eccezione.</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary vsli:raw="Determines the naming policy used to convert a string-based name to another format, such as a camel-casing format.">Determina i criteri di denominazione usati per convertire un nome basato su stringa in un altro formato, ad esempio un formato con notazione a cammello.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">Inizializza una nuova istanza di <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary vsli:raw="Gets the naming policy for camel-casing.">Ottiene i criteri di denominazione per la notazione a cammello.</summary>
      <returns vsli:raw="The naming policy for camel-casing.">Criteri di denominazione per la combinazione di maiuscole e minuscole.</returns>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary vsli:raw="When overridden in a derived class, converts the specified name according to the policy.">Quando viene sottoposto a override in una classe derivata, converte il nome specificato in base ai criteri.</summary>
      <param name="name" vsli:raw="The name to convert.">Nome da convertire.</param>
      <returns vsli:raw="The converted name.">Nome convertito.</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary vsli:raw="Represents a single property for a JSON object.">Rappresenta una singola proprietà per un oggetto JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary vsli:raw="Gets the name of this property.">Ottiene il nome di questa proprietà.</summary>
      <returns vsli:raw="The name of this property.">Nome di questa proprietà.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the specified UTF-8 encoded text to the name of this property.">Confronta il testo con codifica UTF-8 specificato con il nome di questa proprietà.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">Testo con codifica UTF-8 da usare per il confronto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property has the same UTF-8 encoding as &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il nome di questa proprietà ha la stessa codifica UTF-8 di <paramref name="utf8Text" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">
        <see cref="T:System.Type" /> per questo valore non è <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the specified text as a character span to the name of this property.">Confronta il testo specificato come intervallo di caratteri con il nome di questa proprietà.</summary>
      <param name="text" vsli:raw="The text to compare against.">Testo con cui eseguire il confronto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il nome di questa proprietà corrisponde a <paramref name="text" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">
        <see cref="T:System.Type" /> per questo valore non è <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary vsli:raw="Compares the specified string to the name of this property.">Confronta la stringa specificata con il nome di questa proprietà.</summary>
      <param name="text" vsli:raw="The text to compare against.">Testo con cui eseguire il confronto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il nome di questa proprietà corrisponde a <paramref name="text" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">
        <see cref="T:System.Type" /> per questo valore non è <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary vsli:raw="Provides a string representation of the property for debugging purposes.">Visualizza una rappresentazione stringa della proprietà per il debug.</summary>
      <returns vsli:raw="A string containing the uninterpreted value of the property, beginning at the declaring open-quote and ending at the last character that is part of the value.">Stringa contenente il valore della proprietà non interpretato, che inizia con la virgoletta di apertura della dichiarazione e termina con l'ultimo carattere che fa parte del valore.</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary vsli:raw="Gets the value of this property.">Ottiene il valore di questa proprietà.</summary>
      <returns vsli:raw="The value of this property.">Valore della proprietà.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the property to the provided writer as a named JSON object property.">Scrive la proprietà nel writer specificato come proprietà di oggetto JSON denominato.</summary>
      <param name="writer" vsli:raw="The writer to which to write the property.">Writer in cui scrivere la proprietà.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;see cref=&quot;P:System.Text.Json.JsonProperty.Name&quot; /&gt; is too large to be a JSON object property.">
        <see cref="P:System.Text.Json.JsonProperty.Name" /> è troppo grande per essere una proprietà di oggetto JSON.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this JSON property's &lt;see cref=&quot;P:System.Text.Json.JsonProperty.Value&quot; /&gt; would result in invalid JSON.">Il <see cref="P:System.Text.Json.JsonElement.ValueKind" /> di questo <see cref="P:System.Text.Json.JsonProperty.Value" /> della proprietà JSON produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when reading JSON.">Consente all'utente di definire il comportamento personalizzato durante la lettura di dati JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that defines whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">Ottiene o imposta un valore che definisce se una virgola aggiuntiva alla fine di un elenco di valori JSON in un oggetto o una matrice è consentita (e ignorata) all'interno del payload JSON in corso di lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è consentita una virgola aggiuntiva; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; handles comments when reading through the JSON data.">Ottiene o imposta un valore che determina il modo in cui <see cref="T:System.Text.Json.Utf8JsonReader" /> gestisce i commenti durante la lettura dei dati JSON.</summary>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">Uno dei valori di enumerazione che indica come vengono gestiti i commenti.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The property is being set to a value that is not a member of the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enumeration.">La proprietà viene impostata su un valore che non è un membro dell'enumerazione <see cref="T:System.Text.Json.JsonCommentHandling" />.</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when reading JSON, with the default (that is, 0) indicating a maximum depth of 64.">Ottiene o imposta la profondità massima consentita durante la lettura di JSON, con il valore predefinito (ad esempio 0) che indica una profondità massima di 64.</summary>
      <returns vsli:raw="The maximum depth allowed when reading JSON.">Profondità massima consentita durante la lettura di dati JSON.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The maximum depth is being set to a negative value.">La profondità massima viene impostata su un valore negativo.</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary vsli:raw="Defines an opaque type that holds and saves all the relevant state information, which must be provided to the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; to continue reading after processing incomplete data.">Definisce un tipo opaco che contiene e salva tutte le informazioni di stato rilevanti che devono essere fornite a <see cref="T:System.Text.Json.Utf8JsonReader" /> per continuare la lettura dopo l'elaborazione di dati incompleti.</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Text.Json.JsonReaderState&quot; /&gt; instance.">Costruisce una nuova istanza di <see cref="T:System.Text.Json.JsonReaderState" />.</summary>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that is different from the JSON RFC (for example how to handle comments, or the maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly (comments within the JSON are invalid) and reads up to a maximum depth of 64.">Definisce il comportamento personalizzato di <see cref="T:System.Text.Json.Utf8JsonReader" /> che è diverso da JSON RFC (ad esempio la gestione dei commenti o la profondità massima consentita per la lettura). Per impostazione predefinita, <see cref="T:System.Text.Json.Utf8JsonReader" /> segue JSON RFC rigorosamente (i commenti all'interno di JSON non sono validi) ed esegue la lettura fino a una profondità massima pari a 64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The maximum depth is set to a non-positive value (&amp;lt; 0).">La profondità massima è impostata su un valore non positivo (&lt; 0).</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary vsli:raw="Gets the custom behavior to use when reading JSON data using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct that may deviate from strict adherence to the JSON specification, which is the default behavior.">Ottiene il comportamento personalizzato da usare durante la lettura di dati JSON con lo struct <see cref="T:System.Text.Json.Utf8JsonReader" />, che potrebbe non rispettare rigorosamente la specifica JSON, ovvero il comportamento predefinito.</summary>
      <returns vsli:raw="The custom behavior to use when reading JSON data.">Comportamento personalizzato da usare durante la lettura dei dati JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary vsli:raw="Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.">Fornisce funzionalità per serializzare oggetti o tipi valore in JSON e per deserializzare JSON in oggetti o tipi valore.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.">Analizza il testo con codifica UTF-8 che rappresenta un singolo valore JSON in un'istanza di un tipo specificato.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Il testo JSON da analizzare.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Tipo dell'oggetto da convertire e restituire.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Opzioni per controllare il comportamento durante l'analisi.</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Rappresentazione <paramref name="returnType" /> del valore JSON.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">Valore JSON non valido.
-oppure-
<typeparamref name="returnType" /> non è compatibile con il valore JSON.
-oppure-
Sono presenti dati rimanenti nell'intervallo oltre un valore JSON singolo.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of a specified type.">Analizza il testo che rappresenta un singolo valore JSON in un'istanza di un tipo specificato.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Il testo JSON da analizzare.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Tipo dell'oggetto da convertire e restituire.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Opzioni per controllare il comportamento durante l'analisi.</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Rappresentazione <paramref name="returnType" /> del valore JSON.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> o <paramref name="returnType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">Valore JSON non valido.
-oppure-
<typeparamref name="TValue" /> non è compatibile con il valore JSON.
-oppure-
Sono presenti dati rimanenti nella stringa oltre un valore JSON singolo.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.">Legge un valore JSON (inclusi oggetti o matrici) dal lettore specificato e lo converte in un'istanza di un tipo specificato.</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">Lettore da cui leggere il valore JSON.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Tipo dell'oggetto da convertire e restituire.</param>
      <param name="options" vsli:raw="Options to control the serializer behavior during reading.">Opzioni per controllare il comportamento del serializzatore durante la lettura.</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Rappresentazione <paramref name="returnType" /> del valore JSON.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">Valore JSON non valido.
-oppure-
<typeparamref name="returnType" /> non è compatibile con il valore JSON.
-oppure-
Il lettore non è riuscito a leggere un valore.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is using unsupported options.">
        <paramref name="reader" /> usa opzioni non supportate.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.">Analizza il testo con codifica UTF-8 che rappresenta un singolo valore JSON in un'istanza del tipo specificato da un parametro di tipo generico.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Il testo JSON da analizzare.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Opzioni per controllare il comportamento durante l'analisi.</param>
      <typeparam name="TValue" vsli:raw="The target type of the UTF-8 encoded text.">Tipo di destinazione del testo con codifica UTF-8.</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Rappresentazione <typeparamref name="TValue" /> del valore JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">Valore JSON non valido.
-oppure-
<typeparamref name="TValue" /> non è compatibile con il valore JSON.
-oppure-
Sono presenti dati rimanenti nell'intervallo oltre un valore JSON singolo.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.">Analizza il testo che rappresenta un singolo valore JSON in un'istanza del tipo specificato da un parametro di tipo generico.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Il testo JSON da analizzare.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Opzioni per controllare il comportamento durante l'analisi.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">Tipo di destinazione del valore JSON.</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Rappresentazione <typeparamref name="TValue" /> del valore JSON.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">Valore JSON non valido.
-oppure-
<typeparamref name="TValue" /> non è compatibile con il valore JSON.
-oppure-
Sono presenti dati rimanenti nella stringa oltre un valore JSON singolo.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.">Legge un valore JSON (inclusi oggetti o matrici) dal lettore specificato in un'istanza del tipo specificato da un parametro di tipo generico.</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">Lettore da cui leggere il valore JSON.</param>
      <param name="options" vsli:raw="Options to control serializer behavior during reading.">Opzioni per controllare il comportamento del serializzatore durante la lettura.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">Tipo di destinazione del valore JSON.</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Rappresentazione <typeparamref name="TValue" /> del valore JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">Valore JSON non valido.
-oppure-
<typeparamref name="TValue" /> non è compatibile con il valore JSON.
-oppure-
Il lettore non è riuscito a leggere un valore.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; uses unsupported options.">
        <paramref name="reader" /> usa opzioni non supportate.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type. The stream will be read to completion.">Legge in modo asincrono il testo con codifica UTF-8 che rappresenta un singolo valore JSON in un'istanza di un tipo specificato. Il flusso verrà letto fino al completamento.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Dati JSON da analizzare.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Tipo dell'oggetto da convertire e restituire.</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">Opzioni per controllare il comportamento durante la lettura.</param>
      <param name="cancellationToken" vsli:raw="A cancellation token that may be used to cancel the read operation.">Token di annullamento che può essere usato per annullare l'operazione di lettura.</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Rappresentazione <paramref name="returnType" /> del valore JSON.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> o <paramref name="returnType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">Valore JSON non valido.
-oppure-
<typeparamref name="TValue" /> non è compatibile con il valore JSON.
-oppure-
Sono presenti dati rimanenti nel flusso.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter. The stream will be read to completion.">Legge in modo asincrono il testo con codifica UTF-8 che rappresenta un singolo valore JSON in un'istanza di un tipo specificato da un parametro di tipo generico. Il flusso verrà letto fino al completamento.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Dati JSON da analizzare.</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">Opzioni per controllare il comportamento durante la lettura.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the read operation.">Token che può essere usato per annullare l'operazione di lettura.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">Tipo di destinazione del valore JSON.</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Rappresentazione <typeparamref name="TValue" /> del valore JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">Valore JSON non valido.
-oppure-
<typeparamref name="TValue" /> non è compatibile con il valore JSON.
-oppure-
Sono presenti dati rimanenti nel flusso.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a specified type into a JSON string.">Converte il valore di un tipo specificato in una stringa JSON.</summary>
      <param name="value" vsli:raw="The value to convert.">Valore da convertire.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Tipo di <paramref name="value" /> da convertire.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Opzioni per controllare il comportamento di conversione.</param>
      <returns vsli:raw="The JSON string representation of the value.">Rappresentazione della stringa JSON del valore.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of the specified type to the provided writer.">Scrive la rappresentazione JSON del tipo specificato nel writer disponibile.</summary>
      <param name="writer" vsli:raw="The JSON writer to write to.">Writer JSON in cui scrivere.</param>
      <param name="value" vsli:raw="The value to convert and write.">Valore da convertire e scrivere.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Tipo di <paramref name="value" /> da convertire.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Opzioni per controllare il comportamento di serializzazione.</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string.">Converte il valore di un tipo specificato da un parametro di tipo generico in una stringa JSON.</summary>
      <param name="value" vsli:raw="The value to convert.">Valore da convertire.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Opzioni per controllare il comportamento di serializzazione.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Tipo di valore da serializzare.</typeparam>
      <returns vsli:raw="A JSON string representation of the value.">Rappresentazione della stringa JSON del valore.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of a type specified by a generic type parameter to the provided writer.">Scrive la rappresentazione JSON di un tipo specificato da un parametro di tipo generico nel writer disponibile.</summary>
      <param name="writer" vsli:raw="A JSON writer to write to.">Writer JSON in cui scrivere.</param>
      <param name="value" vsli:raw="The value to convert and write.">Valore da convertire e scrivere.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Opzioni per controllare il comportamento di serializzazione.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Tipo di valore da serializzare.</typeparam>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.">Converte in modo asincrono il valore di un tipo specificato nel testo JSON con codifica UTF-8 e lo scrive nel flusso specificato.</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">Flusso UTF-8 in cui scrivere.</param>
      <param name="value" vsli:raw="The value to convert.">Valore da convertire.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Tipo di <paramref name="value" /> da convertire.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Opzioni per controllare il comportamento di serializzazione.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">Token che può essere usato per annullare l'operazione di scrittura.</param>
      <returns vsli:raw="A task that represents the asynchronous write operation.">Attività che rappresenta l'operazione di scrittura asincrona.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.">Converte in modo asincrono un valore di un tipo specificato da un parametro di tipo generico a testo JSON con codifica UTF-8 e lo scrive in un flusso.</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">Flusso UTF-8 in cui scrivere.</param>
      <param name="value" vsli:raw="The value to convert.">Valore da convertire.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Opzioni per controllare il comportamento di serializzazione.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">Token che può essere usato per annullare l'operazione di scrittura.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Tipo di valore da serializzare.</typeparam>
      <returns vsli:raw="A task that represents the asynchronous write operation.">Attività che rappresenta l'operazione di scrittura asincrona.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.">Converte un valore del tipo specificato in una stringa JSON, codificata in byte UTF-8.</summary>
      <param name="value" vsli:raw="The value to convert.">Valore da convertire.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Tipo di <paramref name="value" /> da convertire.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Opzioni per controllare il comportamento di conversione.</param>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">Rappresentazione della stringa JSON del valore, codificata in byte UTF-8.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.">Converte il valore di un tipo specificato da un parametro di tipo generico in una stringa JSON, codificata in byte UTF-8.</summary>
      <param name="value" vsli:raw="The value to convert.">Valore da convertire.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Opzioni per controllare il comportamento di conversione.</param>
      <typeparam name="TValue" vsli:raw="The type of the value.">Tipo del valore.</typeparam>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">Rappresentazione della stringa JSON del valore, codificata in byte UTF-8.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary vsli:raw="Provides options to be used with &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt;.">Fornisce le opzioni da usare con <see cref="T:System.Text.Json.JsonSerializer" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Text.Json.JsonSerializerOptions" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary vsli:raw="Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized.">Ottiene o imposta un valore che indica se una virgola aggiuntiva alla fine di un elenco di valori JSON in un oggetto o una matrice è consentita (e ignorata) all'interno del payload JSON in corso di deserializzazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored); &lt;see langword=&quot;false&quot; /&gt; otherwise.">
        <see langword="true" /> se una virgola aggiuntiva alla fine di un elenco di valori JSON in un oggetto o in una matrice è consentita (e ignorata); in caso contrario <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Questa proprietà è stata impostata dopo la serializzazione o deserializzazione.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary vsli:raw="Gets the list of user-defined converters that were registered.">Ottiene l'elenco dei convertitori definiti dall'utente che sono stati registrati.</summary>
      <returns vsli:raw="The list of custom converters.">Elenco di convertitori personalizzati.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary vsli:raw="Gets or sets the default buffer size, in bytes, to use when creating temporary buffers.">Ottiene o imposta le dimensioni predefinite del buffer, in byte, da usare per la creazione di buffer temporanei.</summary>
      <returns vsli:raw="The default buffer size in bytes.">Dimensioni predefinite del buffer in byte.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The buffer size is less than 1.">Le dimensioni del buffer sono minori di 1.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Questa proprietà è stata impostata dopo la serializzazione o deserializzazione.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary vsli:raw="Gets or sets the policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format, such as camel-casing.">Ottiene o imposta i criteri usati per convertire il nome di una chiave <see cref="T:System.Collections.IDictionary" /> in un altro formato, ad esempio con la combinazione di maiuscole e minuscole a cammello.</summary>
      <returns vsli:raw="The policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format.">Il criterio utilizzato per convertire il nome di una chiave di <see cref="T:System.Collections.IDictionary" /> in un altro formato.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Ottiene o imposta il codificatore da usare per l'escape delle stringhe oppure <see langword="null" /> per usare il codificatore predefinito.</summary>
      <returns vsli:raw="The JavaScript character encoding.">Codifica dei caratteri JavaScript.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary vsli:raw="Returns the converter for the specified type.">Restituisce il convertitore per il tipo specificato.</summary>
      <param name="typeToConvert" vsli:raw="The type to return a converter for.">Tipo per il quale restituire un convertitore.</param>
      <returns vsli:raw="The first converter that supports the given type.">Il primo convertitore che supporta il tipo specificato o <see langword="null" /> in assenza di un convertitore.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary vsli:raw="Gets or sets a value that indicates whether &lt;see langword=&quot;null&quot; /&gt; values are ignored during serialization and deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Ottiene o imposta un valore che determina se i valori <see langword="null" /> vengono ignorati durante la serializzazione e la deserializzazione. Il valore predefinito è <see langword="false" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if null values are ignored during serialization and deserialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> ignorare i valori null durante la serializzazione e la deserializzazione. in caso contrario, vedere langword = "false"/&gt;.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.&#xA;&#xA;-or-&#xA;&#xA;&lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition&quot; /&gt; has been set to a non-default value. These properties cannot be used together.">Questa proprietà è stata impostata dopo la serializzazione o deserializzazione.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary vsli:raw="Gets a value that indicates whether read-only properties are ignored during serialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Ottiene un valore che determina se le proprietà di sola lettura vengono ignorate durante la serializzazione. Il valore predefinito è <see langword="false" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if read-only properties are ignored during serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> ignorare le proprietà di sola lettura durante la serializzazione. in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Questa proprietà è stata impostata dopo la serializzazione o deserializzazione.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64.">Ottiene o imposta la profondità massima consentita durante la serializzazione o deserializzazione di JSON, con il valore predefinito 0 che indica una profondità massima di 64.</summary>
      <returns vsli:raw="The maximum depth allowed when serializing or deserializing JSON.">Profondità massima consentita durante la serializzazione o deserializzazione di JSON.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Questa proprietà è stata impostata dopo la serializzazione o deserializzazione.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">La profondità massima è impostata su un valore negativo.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary vsli:raw="Gets or sets a value that indicates whether a property's name uses a case-insensitive comparison during deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Ottiene o imposta un valore che determina se per il nome di una proprietà viene usato un confronto senza distinzione tra maiuscole e minuscole durante la deserializzazione. Il valore predefinito è <see langword="false" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if property names are compared case-insensitively; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> confrontare i nomi delle proprietà utilizzando il confronto senza distinzione tra maiuscole e minuscole; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary vsli:raw="Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">Ottiene o imposta un valore che specifica i criteri usati per convertire il nome di una proprietà per un oggetto in un altro formato, ad esempio la combinazione di maiuscole e minuscole a cammello o <see langword="null" /> per lasciare invariati i nomi delle proprietà.</summary>
      <returns vsli:raw="A property naming policy, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">Criteri di denominazione delle proprietà o <see langword="null" /> per lasciare invariati i nomi di proprietà.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary vsli:raw="Gets or sets a value that defines how comments are handled during deserialization.">Ottiene o imposta un valore che definisce come vengono gestiti i commenti durante la deserializzazione.</summary>
      <returns vsli:raw="A value that indicates whether comments are allowed, disallowed, or skipped.">Valore che indica se i commenti sono consentiti, non consentiti o ignorati.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Questa proprietà è stata impostata dopo la serializzazione o deserializzazione.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">L'enumerazione di gestione dei commenti è impostata su un valore non supportato o non compreso nell'intervallo di enum <see cref="T:System.Text.Json.JsonCommentHandling" />.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary vsli:raw="Gets or sets a value that indicates whether JSON should use pretty printing. By default, JSON is serialized without any extra white space.">Ottiene o imposta un valore che definisce se JSON deve usare la pretty print. Per impostazione predefinita, JSON viene serializzato senza spazi vuoti aggiuntivi.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if JSON is pretty printed on serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se JSON deve essere stampato sulla serializzazione; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Questa proprietà è stata impostata dopo la serializzazione o deserializzazione.</exception>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary vsli:raw="Defines the various JSON tokens that make up a JSON text.">Definisce i vari token JSON che costituiscono un testo JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary vsli:raw="The token type is a comment string.">Il tipo di token è una stringa di commento.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary vsli:raw="The token type is the end of a JSON array.">Il tipo di token è la fine di una matrice JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary vsli:raw="The token type is the end of a JSON object.">Il tipo di token è la fine di un oggetto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary vsli:raw="The token type is the JSON literal false.">Il tipo di token è il valore letterale JSON false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;). This is the default token type if no data has been read by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Non esiste alcun valore (distinto da <see cref="F:System.Text.Json.JsonTokenType.Null" />).</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary vsli:raw="The token type is the JSON literal null.">Il tipo di token è il valore letterale JSON null.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary vsli:raw="The token type is a JSON number.">Il tipo di token è un numero JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary vsli:raw="The token type is a JSON property name.">Il tipo di token è un nome di proprietà JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary vsli:raw="The token type is the start of a JSON array.">Il tipo di token è l'inizio di una matrice JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary vsli:raw="The token type is the start of a JSON object.">Il tipo di token è l'inizio di un oggetto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary vsli:raw="The token type is a JSON string.">Il tipo di token è una stringa JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary vsli:raw="The token type is the JSON literal true.">Il tipo di token è il valore letterale JSON true.</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary vsli:raw="Specifies the data type of a JSON value.">Specifica il tipo di dati di un valore JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary vsli:raw="A JSON array.">Matrice JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary vsli:raw="The JSON value false.">Valore JSON false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary vsli:raw="The JSON value null.">Valore JSON Null.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary vsli:raw="A JSON number.">Numero JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary vsli:raw="A JSON object.">Oggetto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary vsli:raw="A JSON string.">Stringa JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary vsli:raw="The JSON value true.">Valore JSON true.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;).">Non esiste alcun valore (distinto da <see cref="F:System.Text.Json.JsonValueKind.Null" />).</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary vsli:raw="Allows the user to define custom behavior when writing JSON using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;.">Consente all'utente di definire il comportamento personalizzato durante la scrittura di codice JSON con <see cref="T:System.Text.Json.Utf8JsonWriter" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Ottiene o imposta il codificatore da usare per l'escape delle stringhe oppure <see langword="null" /> per usare il codificatore predefinito.</summary>
      <returns vsli:raw="The JavaScript character encoder used to override the escaping behavior.">Codificatore di caratteri JavaScript usato per eseguire l'override del comportamento di escape.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.">Ottiene o imposta un valore che indica se <see cref="T:System.Text.Json.Utf8JsonWriter" /> deve formattare l'output JSON, operazione che include l'applicazione del rientro ai token JSON annidati, l'aggiunta di nuove righe e l'aggiunta di spazio vuoto tra i nomi e i valori delle proprietà.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON output is formatted; &lt;see langword=&quot;false&quot; /&gt; if the JSON is written without any extra white space. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per formattare l'output JSON; <see langword="false" /> scrivere senza spazi vuoti aggiuntivi. Il valore predefinito è <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should skip structural validation and allow the user to write invalid JSON.">Ottiene o imposta un valore che indica se i<see cref="T:System.Text.Json.Utf8JsonWriter" /> deve ignorare la convalida strutturale e consentire all'utente di scrivere codice JSON non valido.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if structural validation is skipped and invalid JSON is allowed; &lt;see langword=&quot;false&quot; /&gt; if an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown on any attempt to write invalid JSON.">
        <see langword="true" /> per ignorare la convalida strutturale e consentire JSON non valido; <see langword="false" /> generare un'<see cref="T:System.InvalidOperationException" /> in qualsiasi tentativo di scrivere JSON non valido.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary vsli:raw="Provides the base class for serialization attributes.">Fornisce la classe base per gli attributi di serializzazione.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonAttribute&quot; /&gt;.">Crea una nuova istanza dell'oggetto <see cref="T:System.Text.Json.Serialization.JsonAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary vsli:raw="Converts an object or value to or from JSON.">Converte un oggetto o un valore in o da JSON.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary vsli:raw="When overridden in a derived class, determines whether the converter instance can convert the specified object type.">In caso di override in una classe derivata, determina se l'istanza del convertitore può convertire il tipo di oggetto specificato.</summary>
      <param name="typeToConvert" vsli:raw="The type of the object to check whether it can be converted by this converter instance.">Tipo dell'oggetto per controllare se può essere convertito da questa istanza del convertitore.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance can convert the specified object type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'istanza può convertire il tipo di oggetto specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary vsli:raw="Converts an object or value to or from JSON.">Converte un oggetto o un valore in o da JSON.</summary>
      <typeparam name="T" vsli:raw="The type of object or value handled by the converter.">Tipo di oggetto o valore gestito dal convertitore.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter`1&quot; /&gt; instance.">Inizializza una nuova istanza di <see cref="T:System.Text.Json.Serialization.JsonConverter`1" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted.">Determina se il tipo specificato può essere convertito.</summary>
      <param name="typeToConvert" vsli:raw="The type to compare against.">Tipo con cui eseguire il confronto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il tipo può essere convertito, altrimenti <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads and converts the JSON to type &lt;typeparamref name=&quot;T&quot; /&gt;.">Legge e converte il valore JSON nel tipo <typeparamref name="T" />.</summary>
      <param name="reader" vsli:raw="The reader.">Lettore.</param>
      <param name="typeToConvert" vsli:raw="The type to convert.">Tipo da convertire.</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">Oggetto che specifica le opzioni di serializzazione da usare.</param>
      <returns vsli:raw="The converted value.">Valore convertito.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes a specified value as JSON.">Scrive un valore specificato come JSON.</summary>
      <param name="writer" vsli:raw="The writer to write to.">Writer sul quale scrivere.</param>
      <param name="value" vsli:raw="The value to convert to JSON.">Valore da convertire in JSON.</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">Oggetto che specifica le opzioni di serializzazione da usare.</param>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary vsli:raw="When placed on a property or type, specifies the converter type to use.">Quando viene applicato a una proprietà o a un tipo, specifica il tipo di convertitore da usare.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;.">Inizializza una nuova istanza di <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt; with the specified converter type.">Inizializza una nuova istanza di <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> con il tipo di convertitore specificato.</summary>
      <param name="converterType" vsli:raw="The type of the converter.">Tipo del convertitore.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary vsli:raw="Gets the type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">Ottiene il tipo dell'oggetto <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> oppure <see langword="null" /> se è stato creato senza un tipo.</summary>
      <returns vsli:raw="The type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">Tipo del <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />o <see langword="null" /> se è stato creato senza un tipo.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary vsli:raw="When overridden in a derived class and &lt;see cref=&quot;P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, allows the derived class to create a &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter&quot; /&gt; in order to pass additional state.">In caso di override in una classe derivata, se <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" /> è <see langword="null" />, consente alla classe derivata di creare un oggetto <see cref="T:System.Text.Json.Serialization.JsonConverter" /> per passare lo stato aggiuntivo.</summary>
      <param name="typeToConvert" vsli:raw="The type of the converter.">Tipo del convertitore.</param>
      <returns vsli:raw="The custom converter.">Convertitore personalizzato.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary vsli:raw="Supports converting several types by using a factory pattern.">Supporta la conversione di diversi tipi usando un modello factory.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary vsli:raw="When overridden in a derived class, initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterFactory&quot; /&gt; class.">Quando viene sottoposto a override in una classe derivata, inizializza una nuova istanza della classe <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for a specified type.">Crea un convertitore per un tipo specificato.</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">Tipo gestito dal convertitore.</param>
      <param name="options" vsli:raw="The serialization options to use.">Opzioni di serializzazione da usare.</param>
      <returns vsli:raw="A converter for which &lt;typeparamref name=&quot;T&quot; /&gt; is compatible with &lt;paramref name=&quot;typeToConvert&quot; /&gt;.">Convertitore per il quale <typeparamref name="T" /> è compatibile con <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary vsli:raw="When placed on a property of type &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, any properties that do not have a matching member are added to that dictionary during deserialization and written during serialization.">Per una proprietà di tipo <see cref="T:System.Collections.Generic.IDictionary`2" />, tutte le proprietà che non hanno un membro corrispondente vengono aggiunte a tale dizionario durante la deserializzazione e scritte durante la serializzazione.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonExtensionDataAttribute&quot; /&gt; class.">Crea una nuova istanza della classe <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary vsli:raw="Prevents a property from being serialized or deserialized.">Impedisce la serializzazione o la deserializzazione di una proprietà.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIgnoreAttribute&quot; /&gt;.">Inizializza una nuova istanza di <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary vsli:raw="Specifies the property name that is present in the JSON when serializing and deserializing. This overrides any naming policy specified by &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">Specifica il nome della proprietà presente nel codice JSON durante la serializzazione e la deserializzazione. Vengono ignorati gli eventuali criteri di denominazione specificati da <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonPropertyNameAttribute&quot; /&gt; with the specified property name.">Inizializza una nuova istanza di <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> con il nome di proprietà specificato.</summary>
      <param name="name" vsli:raw="The name of the property.">Nome della proprietà.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the name of the property.">Ottiene il nome della proprietà.</summary>
      <returns vsli:raw="The name of the property.">Nome della proprietà.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary vsli:raw="Converts enumeration values to and from strings.">Converte i valori di enumerazione da e verso stringhe.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with the default naming policy that allows integer values.">Inizializza un'istanza della classe <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> con i criteri di denominazione predefiniti che consentono i valori integer.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with a specified naming policy and a value that indicates whether undefined enumeration values are allowed.">Inizializza un'istanza della classe <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> con i criteri di denominazione specificati e un valore che indica se sono consentiti valori di enumerazione non definiti.</summary>
      <param name="namingPolicy" vsli:raw="The optional naming policy for writing enum values.">Criteri di denominazione facoltativi per la scrittura di valori enum.</param>
      <param name="allowIntegerValues" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow undefined enum values; otherwise, &lt;see langword=&quot;false&quot; /&gt;. When &lt;see langword=&quot;true&quot; /&gt;, if an enum value isn't defined, it will output as a number rather than a string.">
        <see langword="true" /> per consentire valori enum non definiti. In caso contrario, <see langword="false" />. Quando <see langword="true" />, se non è definito un valore enum, l'output sarà in forma di numero anziché di stringa.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted to an enum.">Determina se il tipo specificato può essere convertito in un enum.</summary>
      <param name="typeToConvert" vsli:raw="The type to be checked.">Tipo da controllare.</param>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the type can be converted; otherwise, &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt;.">
        <see langword="true" /> se il tipo può essere convertito, altrimenti <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for the specified type.">Crea un convertitore per il tipo specificato.</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">Tipo gestito dal convertitore.</param>
      <param name="options" vsli:raw="The serialization options to use.">Opzioni di serializzazione da usare.</param>
      <returns vsli:raw="A converter for which &lt;code data-dev-comment-type=&quot;typeparamref&quot;&gt;T&lt;/code&gt; is compatible with &lt;code data-dev-comment-type=&quot;paramref&quot;&gt;typeToConvert&lt;/code&gt;.">Convertitore per il quale <typeparamref name="T" /> è compatibile con <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary vsli:raw="Provides a high-performance API for forward-only, read-only access to UTF-8 encoded JSON text.">Fornisce un'API ad alte prestazioni per l'accesso di tipo forward-only e di sola lettura al testo JSON con codifica UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text and indicates whether the input contains all the text to process.">Inizializza una nuova istanza della struttura <see cref="T:System.Text.Json.Utf8JsonReader" /> che elabora una sequenza di sola lettura del testo con codifica UTF-8 e indica se l'input contiene tutto il testo da elaborare.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Testo JSON con codifica UTF-8 da elaborare.</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">
        <see langword="true" /> per indicare che la sequenza di input contiene tutti i dati da elaborare; <see langword="false" /> per indicare che l'intervallo di input contiene dati parziali e che seguiranno altri dati.</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Oggetto che contiene lo stato del lettore. Se si tratta della prima chiamata al costruttore, passare lo stato predefinito; in caso contrario, passare il valore della proprietà <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> dall'istanza precedente di <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text using the specified options.">Inizializza una nuova istanza della struttura <see cref="T:System.Text.Json.Utf8JsonReader" /> che elabora una sequenza di sola lettura del testo con codifica UTF-8 usando le opzioni specificate.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Testo JSON con codifica UTF-8 da elaborare.</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">Definisce il comportamento personalizzato dell'oggetto <see cref="T:System.Text.Json.Utf8JsonReader" /> che differisce dalla RFC JSON, ad esempio la gestione dei commenti o la profondità massima consentita durante la lettura. Per impostazione predefinita, <see cref="T:System.Text.Json.Utf8JsonReader" /> è conforme alla RFC JSON, di conseguenza i commenti all'interno di JSON non sono validi e la profondità massima è pari a 64.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text and indicates whether the input contains all the text to process.">Inizializza una nuova istanza della struttura <see cref="T:System.Text.Json.Utf8JsonReader" /> che elabora un intervallo di sola lettura del testo con codifica UTF-8 e indica se l'input contiene tutto il testo da elaborare.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Testo JSON con codifica UTF-8 da elaborare.</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">
        <see langword="true" /> per indicare che la sequenza di input contiene tutti i dati da elaborare; <see langword="false" /> per indicare che l'intervallo di input contiene dati parziali e che seguiranno altri dati.</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Oggetto che contiene lo stato del lettore. Se si tratta della prima chiamata al costruttore, passare lo stato predefinito; in caso contrario, passare il valore della proprietà <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> dall'istanza precedente di <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text using the specified options.">Inizializza una nuova istanza della struttura <see cref="T:System.Text.Json.Utf8JsonReader" /> che elabora un intervallo di sola lettura del testo con codifica UTF-8 usando le opzioni specificate.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Testo JSON con codifica UTF-8 da elaborare.</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">Definisce il comportamento personalizzato dell'oggetto <see cref="T:System.Text.Json.Utf8JsonReader" /> che differisce dalla RFC JSON, ad esempio la gestione dei commenti o la profondità massima consentita durante la lettura. Per impostazione predefinita, <see cref="T:System.Text.Json.Utf8JsonReader" /> è conforme alla RFC JSON, di conseguenza i commenti all'interno di JSON non sono validi e la profondità massima è pari a 64.</param>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary vsli:raw="Gets the total number of bytes consumed so far by this instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Ottiene il numero totale di byte usati finora da questa istanza di <see cref="T:System.Text.Json.Utf8JsonReader" />.</summary>
      <returns vsli:raw="The total number of bytes consumed so far.">Numero totale di byte utilizzati fino a questo momento.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">Ottiene la profondità del nodo corrente.</summary>
      <returns vsli:raw="The depth of the current token.">Profondità del token corrente.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; state to pass to a &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; constructor with more data.">Ottiene lo stato corrente di <see cref="T:System.Text.Json.Utf8JsonReader" /> da passare a un costruttore <see cref="T:System.Text.Json.Utf8JsonReader" /> con altri dati.</summary>
      <returns vsli:raw="The current reader state.">Stato corrente del lettore.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary vsli:raw="Reads the next JSON token value from the source as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Legge il valore del token JSON successivo dall'origine come <see cref="T:System.Boolean" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;.">
        <see langword="true" /> se <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> è <see cref="F:System.Text.Json.JsonTokenType.True" />. <see langword="false" /> se <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> è <see cref="F:System.Text.Json.JsonTokenType.False" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a Boolean value (that is, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;).">Il valore del token JSON non è un valore booleano (vale a dire <see cref="F:System.Text.Json.JsonTokenType.True" /> o <see cref="F:System.Text.Json.JsonTokenType.False" />).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Analizza il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Byte" />.</summary>
      <returns vsli:raw="The value of the UTF-8 encoded token.">Valore del token con codifica UTF-8.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è un campo <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Byte.MinValue&quot;&gt;Byte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Byte.MaxValue&quot;&gt;Byte.MaxValue&lt;/see&gt;.">Il formato numerico del valore del token JSON non è corretto, ad esempio contiene un valore frazionario oppure è scritto in notazione scientifica.
-oppure-
Il valore del token JSON rappresenta un numero minore di <see cref="F:System.Byte.MinValue" /> o maggiore di <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary vsli:raw="Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array.">Analizza il valore del token JSON corrente dall'origine e decodifica la stringa JSON con codifica Base64 come matrice di byte.</summary>
      <returns vsli:raw="The byte array that represents the current JSON token value.">Matrice di byte che rappresenta il valore del token JSON corrente.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Il tipo del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text, so it can't be decoded to bytes.&#xA;&#xA;-or-&#xA;&#xA;The value contains invalid or more than two padding characters.&#xA;&#xA;-or-&#xA;&#xA;The value is incomplete. That is, the JSON string length is not a multiple of 4.">Il valore non è codificato come testo in Base64 e quindi non può essere decodificato in byte.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary vsli:raw="Parses the current JSON token value from the source as a comment and transcodes it as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Analizza il valore del token JSON corrente dall'origine come commento e lo transcodifica come <see cref="T:System.String" />.</summary>
      <returns vsli:raw="The comment that represents the current JSON token value.">Commento che rappresenta il valore del token JSON corrente.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a comment.">Il token JSON non è un commento.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.DateTime" />.</summary>
      <returns vsli:raw="The date and time value, if the entire UTF-8 encoded token value can be successfully parsed.">Valore di data e ora se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Il valore del token JSON non è un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.&#xA;        &#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">Il valore del token JSON non può essere letto come <see cref="T:System.DateTime" />.
-oppure-
L'intero valore del token con codifica UTF-8 non può essere analizzato come valore <see cref="T:System.DateTime" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.DateTimeOffset" />.</summary>
      <returns vsli:raw="The date and time offset, if the entire UTF-8 encoded token value can be successfully parsed.">Offset di data e ora se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Il valore del token JSON non è un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.&#xA;&#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">Il valore del token JSON non può essere letto come <see cref="T:System.DateTimeOffset" />.
-oppure-
L'intero valore del token con codifica UTF-8 non può essere analizzato come valore <see cref="T:System.DateTimeOffset" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.Decimal" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Valore del token con codifica UTF-8 analizzato come <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Decimal.MinValue&quot;&gt;Decimal.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">Il valore del token JSON rappresenta un numero minore di <see cref="F:System.Decimal.MinValue" /> o maggiore di <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.Double" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Valore del token con codifica UTF-8 analizzato come <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Double.MinValue&quot;&gt;Double.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Double.MaxValue&quot;&gt;Double.MaxValue&lt;/see&gt;.">Il valore del token JSON rappresenta un numero minore di <see cref="F:System.Double.MinValue" /> o maggiore di <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.Guid" />.</summary>
      <returns vsli:raw="The GUID value, if the entire UTF-8 encoded token value can be successfully parsed.">Valore GUID se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Il valore del token JSON non è un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is in an unsupported format for a Guid.&#xA;        &#xA;-or-&#xA;&#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value.">Il valore del token JSON è in un formato non supportato per GUID.
-oppure-
L'intero valore del token con codifica UTF-8 non può essere analizzato come valore <see cref="T:System.Guid" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Analizza il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Int16" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Valore del token con codifica UTF-8 analizzato come <see cref="T:System.Int16" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è un campo <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int16.MinValue&quot;&gt;Int16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int16.MaxValue&quot;&gt;Int16.MaxValue&lt;/see&gt;.">Il formato numerico del valore del token JSON non è corretto, ad esempio contiene un valore frazionario oppure è scritto in notazione scientifica.
-oppure-
Il valore del token JSON rappresenta un numero minore di <see cref="F:System.Int16.MinValue" /> o maggiore di <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.Int32" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Valore del token con codifica UTF-8 analizzato come <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int32.MinValue&quot;&gt;Int32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Il formato numerico del valore del token JSON non è corretto. Ad esempio, contiene un numero decimale o è scritto in notazione scientifica.
-oppure-
Il valore del token JSON rappresenta un numero minore di <see cref="F:System.Int32.MinValue" /> o maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.Int64" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Valore del token con codifica UTF-8 analizzato come <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int64.MinValue&quot;&gt;Int64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Il formato numerico del valore del token JSON non è corretto. Ad esempio, contiene un numero decimale o è scritto in notazione scientifica.
-oppure-
Il valore del token JSON rappresenta un numero minore di <see cref="F:System.Int64.MinValue" /> o maggiore di <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary vsli:raw="Parses the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Analizza il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.SByte" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Valore del token con codifica UTF-8 analizzato come <see cref="T:System.SByte" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è un campo <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.SByte.MinValue&quot;&gt;SByte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.SByte.MaxValue&quot;&gt;SByte.MaxValue&lt;/see&gt;.">Il formato numerico del valore del token JSON non è corretto, ad esempio contiene un valore frazionario oppure è scritto in notazione scientifica.
-oppure-
Il valore del token JSON rappresenta un numero minore di <see cref="F:System.SByte.MinValue" /> o maggiore di <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.Single" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Valore del token con codifica UTF-8 analizzato come <see cref="T:System.Single" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Single.MinValue&quot;&gt;Single.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Single.MaxValue&quot;&gt;Single.MaxValue&lt;/see&gt;.">Il valore del token JSON rappresenta un numero minore di <see cref="F:System.Single.MinValue" /> o maggiore di <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary vsli:raw="Reads the next JSON token value from the source unescaped and transcodes it as a string.">Legge il valore del token JSON successivo dall'origine, senza caratteri di escape e transcodificato come stringa.</summary>
      <returns vsli:raw="The token value parsed to a string, or &lt;see langword=&quot;null&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;.">Valore del token analizzato come stringa oppure <see langword="null" /> se <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> è <see cref="F:System.Text.Json.JsonTokenType.Null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a string (that is, not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;, or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;).&#xA;&#xA;-or-&#xA;&#xA;The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates.">Il valore del token JSON non è una stringa (vale a dire, non è <see cref="F:System.Text.Json.JsonTokenType.String" />, <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> o <see cref="F:System.Text.Json.JsonTokenType.Null" />).
-oppure-
La stringa JSON contiene byte UTF-8 non validi o surrogati UTF-16 non validi.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Analizza il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.UInt16" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Valore del token con codifica UTF-8 analizzato come <see cref="T:System.UInt16" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è un campo <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt16.MinValue&quot;&gt;UInt16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt16.MaxValue&quot;&gt;UInt16.MaxValue&lt;/see&gt;.">Il formato numerico del valore del token JSON non è corretto, ad esempio contiene un valore frazionario oppure è scritto in notazione scientifica.
-oppure-
Il valore del token JSON rappresenta un numero minore di <see cref="F:System.UInt16.MinValue" /> o maggiore di <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.UInt32" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Valore del token con codifica UTF-8 analizzato come <see cref="T:System.UInt32" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt32.MinValue&quot;&gt;UInt32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt32.MaxValue&quot;&gt;UInt32.MaxValue&lt;/see&gt;.">Il formato numerico del valore del token JSON non è corretto. Ad esempio, contiene un numero decimale o è scritto in notazione scientifica.
-oppure-
Il valore del token JSON rappresenta un numero minore di <see cref="F:System.UInt32.MinValue" /> o maggiore di <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.UInt64" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Valore del token con codifica UTF-8 analizzato come <see cref="T:System.UInt64" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt64.MinValue&quot;&gt;UInt64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt64.MaxValue&quot;&gt;UInt64.MaxValue&lt;/see&gt;.">Il formato numerico del valore del token JSON non è corretto. Ad esempio, contiene un numero decimale o è scritto in notazione scientifica.
-oppure-
Il valore del token JSON rappresenta un numero minore di <see cref="F:System.UInt64.MinValue" /> o maggiore di <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary vsli:raw="Gets a value that indicates which &lt;c&gt;Value&lt;/c&gt; property to use to get the token value.">Ottiene un valore che indica quale proprietà <c>Value</c> usare per ottenere il valore del token.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSequence&quot; /&gt; should be used to get the token value; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSpan&quot; /&gt; should be used instead.">
        <see langword="true" /> se è necessario usare <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> per ottenere il valore del token; <see langword="false" /> se è invece necessario usare <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" />.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary vsli:raw="Gets a value that indicates whether all the JSON data was provided or there is more data to come.">Ottiene la modalità di questa istanza di <see cref="T:System.Text.Json.Utf8JsonReader" />, che indica se sono stati specificati tutti i dati JSON o se sono previsti altri dati.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader was constructed with the input span or sequence containing the entire JSON data to process; &lt;see langword=&quot;false&quot; /&gt; if the reader was constructed with an input span or sequence that may contain partial JSON data with more data to follow.">
        <see langword="true" /> se il Reader è stato costruito con l'intervallo di input o la sequenza contenente l'intero dati JSON da elaborare; <see langword="false" /> se il Reader è stato costruito con un intervallo di input o una sequenza che può contenere dati JSON parziali con più dati da seguire.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">Ottiene l'oggetto corrente <see cref="T:System.SequencePosition" /> all'interno della sequenza ReadOnlySequence&lt;byte&gt; di input con codifica UTF-8 fornita o una <see cref="T:System.SequencePosition" /> predefinita se lo struct <see cref="T:System.Text.Json.Utf8JsonReader" /> è stato costruito con ReadOnlySpan&lt;byte&gt;.</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">Il <see cref="T:System.SequencePosition" /> corrente all'interno dell'input codificato UTF-8 fornito ReadOnlySequence&lt;byte&gt; o un <see cref="T:System.SequencePosition" /> predefinito se lo struct <see cref="T:System.Text.Json.Utf8JsonReader" /> è stato costruito con un&lt;di&gt;byte ReadOnlySpan.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary vsli:raw="Reads the next JSON token from the input source.">Legge il token JSON successivo dall'origine di input.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the token was read successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il token è stato letto correttamente. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token according to the JSON RFC is encountered.&#xA;        &#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">Viene rilevato un token JSON non valido in base a JSON RFC.
-oppure-
La profondità corrente supera il limite ricorsivo impostato dalla profondità massima.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary vsli:raw="Skips the children of the current JSON token.">Ignora gli elementi figlio del token JSON corrente.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The reader was given partial data with more data to follow (that is, &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.IsFinalBlock&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;).">Al lettore sono stati assegnati dati parziali con altri dati a seguire (ovvero <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> è <see langword="false" />).</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;&#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">È stato rilevato un token JSON non valido durante lo spostamento, in base alla RFC JSON.
-oppure-
La profondità corrente supera il limite ricorsivo impostato dalla profondità massima.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary vsli:raw="Gets the index that the last processed JSON token starts at (within the given UTF-8 encoded input text), skipping any white space.">Ottiene l'indice in corrispondenza del quale inizia l'ultimo token JSON elaborato (all'interno del testo di input con codifica UTF-8 specificato), ignorando eventuali spazi vuoti.</summary>
      <returns vsli:raw="The starting index of the last processed JSON token within the given UTF-8 encoded input text.">Indice iniziale dell'ultimo token JSON elaborato all'interno del testo di input con codifica UTF-8 specificato.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary vsli:raw="Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.">Ottiene il tipo dell'ultimo token JSON elaborato nel testo JSON con codifica UTF-8.</summary>
      <returns vsli:raw="The type of the last processed JSON token.">Tipo dell'ultimo token JSON elaborato.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Byte" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore analizzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Byte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.Byte" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array and returns a value that indicates whether the operation succeeded.">Prova ad analizzare il valore del token JSON corrente dall'origine e decodifica la stringa JSON con codifica Base64 come matrice di byte e restituisce un valore che indica se l'operazione è stata completata.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decoded binary representation of the Base64 text.">Quando termina, questo metodo contiene la rappresentazione binaria decodificata del testo in Base64.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'intero valore del token è codificato come testo valido in Base64 e può essere decodificato correttamente in byte; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Il token JSON non è <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.DateTime" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">Quando termina, questo metodo contiene il valore analizzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.DateTime" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Il valore del token JSON non è un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.DateTimeOffset" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">Quando termina, questo metodo contiene il valore analizzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.DateTimeOffset" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Il valore del token JSON non è un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Decimal" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore analizzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.Decimal" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Double&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Double" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore analizzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.Double" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Guid&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Guid" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">Quando termina, questo metodo contiene il valore analizzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.Guid" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Il valore del token JSON non è un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Int16" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore analizzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Int16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.Int16" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Int32" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore analizzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.Int32" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Int64" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore analizzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.Int64" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.SByte" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore analizzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.SByte" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Single&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Single" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore analizzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Single&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.Single" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.UInt16" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore analizzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.UInt16" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.UInt32" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore analizzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.UInt32" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.UInt64" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando termina, questo metodo contiene il valore analizzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.UInt64" />. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary vsli:raw="Tries to skip the children of the current JSON token.">Tenta di ignorare gli elementi figlio del token JSON corrente.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there was enough data for the children to be skipped successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se sono disponibili dati sufficienti per ignorare correttamente gli elementi figlio. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;          &#xA;-or -&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">È stato rilevato un token JSON non valido durante lo spostamento, in base alla RFC JSON.
-oppure-
La profondità corrente supera il limite ricorsivo impostato dalla profondità massima.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySequence&amp;lt;byte&amp;gt; slice of the input payload, only if the token is contained within multiple segments.">Ottiene il valore non elaborato dell'ultimo token elaborato come sezione di ReadOnlySequence&lt;byte&gt; del payload di input, solo se il token è contenuto in diversi segmenti.</summary>
      <returns vsli:raw="A byte read-only sequence.">Sequenza di sola lettura di byte.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySpan&amp;lt;byte&amp;gt; slice of the input payload, if the token fits in a single segment or if the reader was constructed with a JSON payload contained in a ReadOnlySpan&amp;lt;byte&amp;gt;.">Ottiene il valore non elaborato dell'ultimo token elaborato come sezione di ReadOnlySpan&lt;byte&gt; del payload di input, se il token è contenuto in un solo segmento o se il lettore è stato costruito con un payload JSON contenuto in un oggetto ReadOnlySpan&lt;byte&gt;.</summary>
      <returns vsli:raw="A read-only span of bytes.">Intervallo di sola lettura di byte.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the UTF-8 encoded text in a read-only byte span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Confronta il testo con codifica UTF-8 in un intervallo di byte di sola lettura con il valore del token JSON senza caratteri di escape nell'origine e restituisce un valore che indica se corrispondono.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">Testo con codifica UTF-8 da usare per il confronto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the UTF-8 encoded lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore del token JSON nell'origine corrisponde al testo di ricerca con codifica UTF-8; in caso contrario <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">Il token JSON non è una stringa JSON, ovvero non è <see cref="F:System.Text.Json.JsonTokenType.String" /> o <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the text in a read-only character span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Confronta il testo in un intervallo di caratteri di sola lettura con il valore del token JSON senza caratteri di escape nell'origine e restituisce un valore che indica se corrispondono.</summary>
      <param name="text" vsli:raw="The text to compare against.">Testo con cui eseguire il confronto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore del token JSON nell'origine corrisponde al testo di ricerca; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">Il token JSON non è una stringa JSON, ovvero non è <see cref="F:System.Text.Json.JsonTokenType.String" /> o <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary vsli:raw="Compares the string text to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Confronta il testo della stringa con il valore del token JSON senza caratteri di escape nell'origine e restituisce un valore che indica se corrispondono.</summary>
      <param name="text" vsli:raw="The text to compare against.">Testo con cui eseguire il confronto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore del token JSON nell'origine corrisponde al testo di ricerca; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">Il token JSON non è una stringa JSON, ovvero non è <see cref="F:System.Text.Json.JsonTokenType.String" /> o <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary vsli:raw="Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.">Fornisce un'API ad alte prestazioni per la scrittura di tipo forward-only, non memorizzata nella cache di testo JSON con codifica UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; to write the output to and customization options.">Inizializza una nuova istanza della classe <see cref="T:System.Text.Json.Utf8JsonWriter" /> scrivendo l'output nell'oggetto <see cref="T:System.Buffers.IBufferWriter`1" /> specificato e usando le opzioni di personalizzazione.</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">Destinazione per la scrittura di testo JSON.</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">Definisce il comportamento personalizzato di <see cref="T:System.Text.Json.Utf8JsonWriter" />. Per impostazione predefinita scrive JSON ridotto (senza spazi aggiuntivi) e verifica che il codice JSON scritto sia strutturalmente valido in base alla RFC JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified stream to write the output to and customization options.">Inizializza una nuova istanza della classe <see cref="T:System.Text.Json.Utf8JsonWriter" /> scrivendo l'output nel flusso specificato e usando le opzioni di personalizzazione.</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">Destinazione per la scrittura di testo JSON.</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">Definisce il comportamento personalizzato di <see cref="T:System.Text.Json.Utf8JsonWriter" />. Per impostazione predefinita scrive JSON ridotto (senza spazi aggiuntivi) e verifica che il codice JSON scritto sia strutturalmente valido in base alla RFC JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary vsli:raw="Gets the total number of bytes committed to the output by the current instance so far.">Ottiene il numero totale di byte di cui è stato eseguito il commit nell'output dall'istanza fino al momento corrente.</summary>
      <returns vsli:raw="The total number of bytes committed to the output by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far.">Numero totale di byte di cui è stato eseguito il commit nell'output dal <see cref="T:System.Text.Json.Utf8JsonWriter" /> finora.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary vsli:raw="Gets the number of bytes written by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far that have not yet been flushed to the output and committed.">Ottiene il numero di byte scritti da <see cref="T:System.Text.Json.Utf8JsonWriter" /> fino a questo momento che non sono ancora stati scaricati nell'output e sottoposti a commit.</summary>
      <returns vsli:raw="The number of bytes written so far by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; that have not yet been flushed to the output and committed.">Numero di byte scritti finora dal <see cref="T:System.Text.Json.Utf8JsonWriter" /> che non sono ancora stati scaricati nell'output ed è stato eseguito il commit.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">Ottiene la profondità del nodo corrente.</summary>
      <returns vsli:raw="The depth of the current token.">Profondità del token corrente.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary vsli:raw="Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">Esegue il commit dell'eventuale testo JSON che non è ancora stato scaricato e rilascia tutte le risorse usate dall'istanza corrente.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary vsli:raw="Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">Esegue il commit in modalità asincrona dell'eventuale testo JSON che non è ancora stato scaricato e rilascia tutte le risorse usate dall'istanza corrente.</summary>
      <returns vsli:raw="A task representing the asynchronous dispose operation.">Attività che rappresenta l'operazione di eliminazione asincrona.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary vsli:raw="Commits the JSON text written so far, which makes it visible to the output destination.">Esegue il commit del testo JSON scritto fino al momento, il che lo rende visibile alla destinazione di output.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">L'istanza è stata eliminata.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously commits the JSON text written so far, which makes it visible to the output destination.">Esegue il commit in modalità asincrona del testo JSON scritto fino al momento, il che lo rende visibile alla destinazione di output.</summary>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests. The default value is &lt;see cref=&quot;P:System.Threading.CancellationToken.None&quot; /&gt;.">Token da monitorare per le richieste di annullamento. Il valore predefinito è <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns vsli:raw="A task representing the asynchronous flush operation.">Attività che rappresenta l'operazione di scaricamento asincrona.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">L'istanza è stata eliminata.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary vsli:raw="Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.">Ottiene il comportamento personalizzato durante la scrittura di codice JSON tramite questa istanza, che indica se formattare l'output durante la scrittura, se ignorare la convalida strutturale JSON e quali caratteri di escape usare.</summary>
      <returns vsli:raw="The custom behavior of this instance of the writer for formatting, validating, and escaping.">Comportamento personalizzato di questa istanza del writer per la formattazione, la convalida e l'escape.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused.">Reimposta lo stato interno di questa istanza in modo da poterla riusare.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">L'istanza è stata eliminata.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt;.">Reimposta lo stato interno di questa istanza in modo da poterla riusare con una nuova istanza di <see cref="T:System.Buffers.IBufferWriter`1" />.</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">Destinazione per la scrittura di testo JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">L'istanza è stata eliminata.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">Reimposta lo stato interno di questa istanza in modo da poterla riusare con una nuova istanza di <see cref="T:System.IO.Stream" />.</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">Destinazione per la scrittura di testo JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">L'istanza è stata eliminata.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà e il valore dei byte non elaborati (come stringa JSON con codifica base 64) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded name of the property to write.">Nome con codifica UTF-8 della proprietà da scrivere.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Dati binari da scrivere come testo con codifica Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà e il valore dei byte non elaborati (come stringa JSON con codifica base 64) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Dati binari da scrivere come testo con codifica Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà e il valore dei byte non elaborati (come stringa JSON con codifica base 64) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Dati binari da scrivere come testo con codifica Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore dei byte non elaborati (come stringa JSON con codifica Base64) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON-encoded name of the property to write.">Nome con codifica JSON della proprietà da scrivere.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Dati binari da scrivere come testo con codifica Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Il valore specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.">Scrive il valore dei byte non elaborati come stringa JSON con codifica Base64 come elemento di una matrice JSON.</summary>
      <param name="bytes" vsli:raw="The binary data to be written as a Base64 encoded JSON string element of a JSON array.">Dati binari da scrivere come elemento stringa JSON con codifica Base64 di una matrice JSON.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Il valore specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come intervallo di byte di sola lettura e un valore <see cref="T:System.Boolean" /> (come valore letterale JSON true o false) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Valore da scrivere come valore letterale JSON true o false come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come intervallo di caratteri di sola lettura e un valore <see cref="T:System.Boolean" /> (come valore letterale JSON true o false) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Valore da scrivere come valore letterale JSON true o false come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.Boolean" /> (come valore letterale JSON true o false) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Valore da scrivere come valore letterale JSON true o false come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore <see cref="T:System.Boolean" /> (come valore letterale JSON true o false) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Valore da scrivere come valore letterale JSON true o false come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as an element of a JSON array.">Scrive un valore <see cref="T:System.Boolean" /> (come valore letterale JSON true o false) come elemento di una matrice JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as an element of a JSON array.">Valore da scrivere come valore letterale JSON true o false come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value as a JSON comment.">Scrive un valore di testo UTF-8 come commento JSON.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">Valore con codifica UTF-8 da scrivere come commento JSON all'interno di /*..*/.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">Il valore specificato è troppo grande.
-oppure-
<paramref name="utf8Value" /> contiene un delimitatore di commento (ovvero */).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value as a JSON comment.">Scrive un valore di testo UTF-16 come commento JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">Valore con codifica UTF-16 da scrivere come commento JSON transcodificato UTF-8 all'interno di /*..*/.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">Il valore specificato è troppo grande.
-oppure-
<paramref name="value" /> contiene un delimitatore di commento (ovvero */).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary vsli:raw="Writes a string text value as a JSON comment.">Scrive un valore di testo stringa come commento JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">Valore con codifica UTF-16 da scrivere come commento JSON transcodificato UTF-8 all'interno di /*..*/.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">Il valore specificato è troppo grande.
-oppure-
<paramref name="value" /> contiene un delimitatore di commento (ovvero */).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;value&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary vsli:raw="Writes the end of a JSON array.">Scrive la fine di una matrice JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary vsli:raw="Writes the end of a JSON object.">Scrive la fine di un oggetto JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and the JSON literal null as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come intervallo di byte di sola lettura e un valore letterale JSON null come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a read-only character span and the JSON literal null as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come intervallo di caratteri di sola lettura e un valore letterale JSON null come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary vsli:raw="Writes a property name specified as a string and the JSON literal null as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come stringa e il valore letterale JSON null come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and the JSON literal null as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore letterale JSON null come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary vsli:raw="Writes the JSON literal null as an element of a JSON array.">Scrive il valore letterale JSON null come elemento di una matrice JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di byte di sola lettura e un valore <see cref="T:System.Decimal" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di byte di sola lettura e un valore <see cref="T:System.Double" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di byte di sola lettura e un valore <see cref="T:System.Int32" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di byte di sola lettura e un valore <see cref="T:System.Int64" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di byte di sola lettura e un valore <see cref="T:System.Single" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di byte di sola lettura e un valore <see cref="T:System.UInt32" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di byte di sola lettura e un valore <see cref="T:System.UInt64" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.Decimal" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.Double" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.Int32" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.Int64" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.Single" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.UInt32" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.UInt64" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.Decimal" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.Double" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.Int32" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.Int64" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.Single" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.UInt32" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.UInt64" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore <see cref="T:System.Decimal" /> (come numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore <see cref="T:System.Double" /> (come numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore <see cref="T:System.Int32" /> (come numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore <see cref="T:System.Int64" /> (come numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore <see cref="T:System.Single" /> (come numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore <see cref="T:System.UInt32" /> (come numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore <see cref="T:System.UInt64" /> (come numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Scrive un valore <see cref="T:System.Decimal" /> (come numero JSON) come elemento di una matrice JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valore da scrivere come numero JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Scrive un valore <see cref="T:System.Double" /> (come numero JSON) come elemento di una matrice JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valore da scrivere come numero JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Scrive un valore <see cref="T:System.Int32" /> (come numero JSON) come elemento di una matrice JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valore da scrivere come numero JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Scrive un valore <see cref="T:System.Int64" /> (come numero JSON) come elemento di una matrice JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valore da scrivere come numero JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Scrive un valore <see cref="T:System.Single" /> (come numero JSON) come elemento di una matrice JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valore da scrivere come numero JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Scrive un valore <see cref="T:System.UInt32" /> (come numero JSON) come elemento di una matrice JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valore da scrivere come numero JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Scrive un valore <see cref="T:System.UInt64" /> (come numero JSON) come elemento di una matrice JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valore da scrivere come numero JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Scrive il nome della proprietà UTF-8 (come stringa JSON) come prima parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Scrive il nome della proprietà(come stringa JSON) come prima parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Scrive il nome della proprietà(come stringa JSON) come prima parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato (come stringa JSON) come prima parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary vsli:raw="Writes the beginning of a JSON array.">Scrive l'inizio di una matrice JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profondità dei dati JSON supera la profondità massima pari a 1.000.
-oppure-
La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.">Scrive l'inizio di una matrice JSON con un nome di proprietà specificato con un'estensione di byte di sola lettura come chiave.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON array to be written.">Nome della proprietà con codifica UTF-8 della matrice JSON da scrivere.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profondità dei dati JSON supera la profondità massima pari a 1.000.
-oppure-
La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.">Scrive l'inizio di una matrice JSON con un nome di proprietà specificato con un'estensione di caratteri di sola lettura come chiave.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 della matrice JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profondità dei dati JSON supera la profondità massima pari a 1.000.
-oppure-
La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a string as the key.">Scrive l'inizio di una matrice JSON con un nome di proprietà specificato con una stringa come chiave.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 della matrice JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profondità dei dati JSON supera la profondità massima pari a 1.000.
-oppure-
La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON array with a pre-encoded property name as the key.">Scrive l'inizio di una matrice JSON con un nome di proprietà precodificato come chiave.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON della matrice JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;    &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">La profondità dei dati JSON ha superato la profondità massima pari a 1.000.
-oppure-
La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary vsli:raw="Writes the beginning of a JSON object.">Scrive l'inizio di un oggetto JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and the operation would result in writing invalid JSON.">La profondità dei dati JSON supera la profondità massima pari a 1.000.
-oppure-
La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.">Scrive l'inizio di un oggetto JSON con un nome di proprietà specificato con un'estensione di byte di sola lettura come chiave.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profondità dei dati JSON supera la profondità massima pari a 1.000.
-oppure-
La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only character span as the key.">Scrive l'inizio di un oggetto JSON con un nome di proprietà specificato con un'estensione di caratteri di sola lettura come chiave.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profondità dei dati JSON supera la profondità massima pari a 1.000.
-oppure-
La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a string as the key.">Scrive l'inizio di un oggetto JSON con un nome di proprietà specificato con una stringa come chiave.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profondità dei dati JSON supera la profondità massima pari a 1.000.
-oppure-
La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON object with a pre-encoded property name as the key.">Scrive l'inizio di un oggetto JSON con un nome di proprietà precodificato come chiave.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;          &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">La profondità dei dati JSON ha superato la profondità massima pari a 1.000.
-oppure-
La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive un nome di proprietà UTF-8 e un valore <see cref="T:System.DateTime" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive un nome di proprietà UTF-8 e un valore <see cref="T:System.DateTimeOffset" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive un nome di proprietà UTF-8 e un valore <see cref="T:System.Guid" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive un nome di proprietà UTF-8 e un valore di testo UTF-8 (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Valore con codifica UTF-8 da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive un nome di proprietà UTF-8 e un valore di testo UTF-16 (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valore con codifica UTF-16 da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary vsli:raw="Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive un nome di proprietà UTF-8 e un valore stringa di testo (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valore con codifica UTF-16 da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà UTF-8 e il valore precodificato (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valore con codifica JSON da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.DateTime" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.DateTimeOffset" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.Guid" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive un nome di proprietà UTF-16 e un valore di testo UTF-8 (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Valore con codifica UTF-8 da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive un nome di proprietà UTF-16 e un valore di testo UTF-16 (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valore con codifica UTF-16 da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary vsli:raw="Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive un nome di proprietà UTF-16 e un valore stringa di testo (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valore con codifica UTF-16 da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà e il valore precodificato (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valore con codifica JSON da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.DateTime" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.DateTimeOffset" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.Guid" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come una stringa e un valore di testo UTF-8 (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Valore con codifica UTF-8 da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come una stringa e un valore di testo UTF-16 (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valore con codifica UTF-16 da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary vsli:raw="Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome di una proprietà specificato come una stringa e un valore stringa di testo (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valore con codifica UTF-16 da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà e il valore precodificato (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valore con codifica JSON da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore <see cref="T:System.DateTime" /> (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore <see cref="T:System.DateTimeOffset" /> (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore <see cref="T:System.Guid" /> (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore di testo UTF-8 (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Valore con codifica UTF-8 da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Il valore specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore di testo (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valore da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Il valore specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary vsli:raw="Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore della stringa di testo (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valore da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Il valore specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Scrive il nome della proprietà precodificato e il valore precodificato (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valore con codifica JSON da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Scrive un valore <see cref="T:System.DateTime" /> (come una stringa JSON) come elemento di una matrice JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">Valore da scrivere come stringa JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Scrive un valore <see cref="T:System.DateTimeOffset" /> (come una stringa JSON) come elemento di una matrice JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">Valore da scrivere come stringa JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Scrive un valore <see cref="T:System.Guid" /> (come una stringa JSON) come elemento di una matrice JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">Valore da scrivere come stringa JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.">Scrive un valore di testo UTF-8 (come stringa JSON) come elemento di una matrice JSON.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string element of a JSON array.">Valore con codifica UTF-8 da scrivere come elemento di stringa JSON di una matrice JSON.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Il valore specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.">Scrive un valore di testo UTF-16 (come una stringa JSON) come elemento di una matrice JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">Valore con codifica UTF-16 da scrivere come elemento di stringa JSON transcodificato UTF-8 di una matrice JSON.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Il valore specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary vsli:raw="Writes a string text value (as a JSON string) as an element of a JSON array.">Scrive un valore stringa di testo (come una stringa JSON) come elemento di una matrice JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">Valore con codifica UTF-16 da scrivere come elemento di stringa JSON transcodificato UTF-8 di una matrice JSON.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Il valore specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.">Scrive il valore di testo precodificato (come stringa JSON) come elemento di una matrice JSON.</summary>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">Valore con codifica JSON da scrivere come elemento di stringa JSON transcodificato UTF-8 di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
  </members>
</doc>
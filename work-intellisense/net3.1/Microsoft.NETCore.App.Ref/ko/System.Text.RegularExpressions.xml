<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Text.RegularExpressions</name>
  </assembly>
  <members>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>성공한 단일 하위 식 캡처의 결과를 나타냅니다.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>원래 문자열에서 캡처된 부분 문자열의 첫째 문자를 찾은 위치입니다.</summary>
      <returns>원래 문자열에서 캡처된 부분 문자열을 찾은 0부터 시작하는 시작 위치입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>캡처된 부분 문자열의 길이를 가져옵니다.</summary>
      <returns>캡처된 부분 문자열의 길이입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>
        <see cref="P:System.Text.RegularExpressions.Capture.Value" /> 속성을 호출하여 입력 문자열로부터 캡처된 하위 문자열을 검색합니다.</summary>
      <returns>일치 항목으로 캡처한 부분 문자열입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>입력 문자열에서 캡처된 부분 문자열을 가져옵니다.</summary>
      <returns>일치 항목으로 캡처한 부분 문자열입니다.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>단일 캡처링 그룹에서 만든 캡처 집합을 나타냅니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>지정된 인덱스에서 시작하여 지정된 배열에 컬렉션의 요소를 모두 복사합니다.</summary>
      <param name="array">컬렉션을 복사할 대상 배열입니다.</param>
      <param name="arrayIndex">대상 배열에서 복사를 시작할 위치입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" />가 <paramref name="array" />의 범위 밖인 경우
또는
<paramref name="arrayIndex" />에 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />를 더한 값이 <paramref name="array" />의 범위 밖인 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Text.RegularExpressions.Capture[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>그룹에서 캡처한 부분 문자열의 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.CaptureCollection" />의 항목 수입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 제공합니다.</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.Capture" />의 모든 <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> 개체를 포함하는 개체입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>컬렉션이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>모든 경우에 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>해당 컬렉션에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>모든 경우에 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>컬렉션의 개별 멤버를 가져옵니다.</summary>
      <param name="i">캡처 컬렉션의 인덱스입니다.</param>
      <returns>컬렉션의 위치 <paramref name="i" />에서 캡처된 부분 문자열입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" />가 0보다 작거나 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />보다 큽니다.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Add(System.Text.RegularExpressions.Capture)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Clear" />
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Contains(System.Text.RegularExpressions.Capture)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Remove(System.Text.RegularExpressions.Capture)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Capture}#GetEnumerator" />
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#IndexOf(System.Text.RegularExpressions.Capture)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#Insert(System.Int32,System.Text.RegularExpressions.Capture)">
      <param name="index" />
      <param name="item" />
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#Item(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#RemoveAt(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Add(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Clear" />
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Contains(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#IndexOf(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <param name="index" />
      <param name="value" />
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#IsFixedSize" />
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Item(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Remove(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <param name="index" />
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>단일 캡처링 그룹의 결과를 나타냅니다.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>안쪽-왼쪽 우선 순서로 캡처링 그룹을 사용하여 일치시킨 모든 캡처의 컬렉션을 가져옵니다. 정규식을 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 옵션으로 수정한 경우에는 안쪽-오른쪽 우선 순서로 가져올 수 있습니다. 컬렉션에는 0이상의 항목이 있을 수 있습니다.</summary>
      <returns>그룹을 사용하여 일치시킨 부분 문자열의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Name">
      <summary>현재 인스턴스로 표시되는 캡처링 그룹의 이름을 반환합니다.</summary>
      <returns>현재 인스턴스로 표시되는 캡처링 그룹의 이름입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>일치 작업이 성공적이었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>일치가 성공적으로 수행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)">
      <summary>여러 스레드 간에 공유해도 안전한 제공된 개체와 동등한 <see langword="Group" /> 개체를 반환합니다.</summary>
      <param name="inner">입력 <see cref="T:System.Text.RegularExpressions.Group" /> 개체입니다.</param>
      <returns>정규식 <see langword="Group" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>단일 일치 항목의 캡처된 그룹 집합을 반환합니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.ContainsKey(System.String)">
      <summary>그룹 컬렉션에 지정된 이름으로 식별되는 캡처된 그룹이 포함되어 있는지 확인합니다.</summary>
      <param name="key">찾을 캡처 그룹의 이름이 포함된 문자열입니다.</param>
      <returns>그룹 컬렉션에 <see langword="true" />를 통해 식별된 캡처한 그룹이 포함되어 있는 경우 <paramref name="key" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>지정된 인덱스에서 시작하여 지정된 배열에 컬렉션의 요소를 모두 복사합니다.</summary>
      <param name="array">컬렉션을 복사할 대상 배열입니다.</param>
      <param name="arrayIndex">대상 배열에서 복사를 시작할 위치입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> 범위를 벗어납니다 <paramref name="array" />합니다.
-또는-
<paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> 의 범위를 벗어납니다 <paramref name="array" />합니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)">
      <summary>특정 배열 인덱스부터 시작하여 그룹 컬렉션의 요소를 <see cref="T:System.Text.RegularExpressions.Group" /> 배열에 복사합니다.</summary>
      <param name="array">그룹 컬렉션에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" />가 0보다 작은 경우
-또는-
<paramref name="arrayIndex" /> 이 <paramref name="array" />의 길이보다 큽니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> - <paramref name="arrayIndex" />의 길이가 그룹 컬렉션 수보다 작습니다.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>컬렉션의 그룹 수를 반환합니다.</summary>
      <returns>컬렉션의 그룹 수입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 제공합니다.</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.Group" />의 모든 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 개체를 포함하는 열거자입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>컬렉션이 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns>모든 경우에 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>
        <see cref="T:System.Text.RegularExpressions.GroupCollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>모든 경우에 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>정수 인덱스에 따라 컬렉션의 멤버에 대한 액세스를 가능하게 합니다.</summary>
      <param name="groupnum">검색할 컬렉션 멤버의 0부터 시작하는 인덱스입니다.</param>
      <returns>
        <paramref name="groupnum" />으로 지정한 컬렉션의 멤버입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>문자열 인덱스에 따라 컬렉션의 멤버에 대한 액세스를 가능하게 합니다.</summary>
      <param name="groupname">캡처링 그룹의 이름입니다.</param>
      <returns>
        <paramref name="groupname" />으로 지정한 컬렉션의 멤버입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Keys">
      <summary>그룹 컬렉션의 이름 키를 포함하는 문자열 열거형을 가져옵니다.</summary>
      <returns>그룹 컬렉션의 이름 키입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>
        <see cref="T:System.Text.RegularExpressions.GroupCollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>동기화할 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 복사본입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add(System.Text.RegularExpressions.Group)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Group" />를 컬렉션에 추가합니다. 이 메서드를 호출하면 <see cref="T:System.NotSupportedException" />이 항상 throw됩니다.</summary>
      <param name="item">컬렉션에 추가할 그룹입니다.</param>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다. 읽기 전용 컬렉션입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear">
      <summary>컬렉션을 지웁니다. 이 메서드를 호출하면 <see cref="T:System.NotSupportedException" />이 항상 throw됩니다.</summary>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다. 읽기 전용 컬렉션입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains(System.Text.RegularExpressions.Group)">
      <summary>그룹 컬렉션에 특정 그룹 항목이 포함되어 있는지 확인합니다.</summary>
      <param name="item">그룹 컬렉션에서 찾을 그룹입니다.</param>
      <returns>그룹 컬렉션에 그룹 항목이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove(System.Text.RegularExpressions.Group)">
      <summary>제거를 <see cref="T:System.Text.RegularExpressions.Group" /> 컬렉션에서 합니다. 이 메서드를 호출하면 <see cref="T:System.NotSupportedException" />이 항상 throw됩니다.</summary>
      <param name="item">제거할 그룹입니다.</param>
      <returns>이 메서드는 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다. 읽기 전용 컬렉션입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Text#RegularExpressions#Group}}#GetEnumerator">
      <summary>그룹 컬렉션을 반복하는 열거자를 제공합니다.</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.Group" /> 컬렉션의 모든 이름과 개체를 포함하는 열거자입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator">
      <summary>그룹 컬렉션을 반복하는 열거자를 제공합니다.</summary>
      <returns>그룹 컬렉션의 모든 <see cref="T:System.Text.RegularExpressions.Group" /> 개체를 포함하는 열거자입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf(System.Text.RegularExpressions.Group)">
      <summary>그룹 컬렉션에 있는 특정 그룹의 인덱스를 확인합니다.</summary>
      <param name="item">그룹 컬렉션에서 찾을 그룹입니다.</param>
      <returns>
        <paramref name="item" />의 인덱스(있는 경우)입니다. 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert(System.Int32,System.Text.RegularExpressions.Group)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Group" />을 컬렉션에 삽입합니다. 이 메서드를 호출하면 <see cref="T:System.NotSupportedException" />이 항상 throw됩니다.</summary>
      <param name="index">그룹을 삽입할 위치입니다.</param>
      <param name="item">삽입할 그룹입니다.</param>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다. 읽기 전용 컬렉션입니다.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item(System.Int32)">
      <summary>컬렉션의 지정된 위치에 있는 그룹을 가져옵니다.</summary>
      <param name="index">그룹 컬렉션에 있는 그룹의 인덱스(0부터 시작)입니다.</param>
      <returns>원하는 위치의 그룹입니다.</returns>
      <exception cref="T:System.NotSupportedException">항목을 설정할 수 없습니다. 읽기 전용 컬렉션입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt(System.Int32)">
      <summary>컬렉션에서 지정된 인덱스의 <see cref="T:System.Text.RegularExpressions.Group" />을 제거합니다. 이 메서드를 호출하면 <see cref="T:System.NotSupportedException" />이 항상 throw됩니다.</summary>
      <param name="index">제거할 그룹의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다. 읽기 전용 컬렉션입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)">
      <summary>개체를 그룹 컬렉션에 추가합니다. 이 메서드를 호출하면 <see cref="T:System.NotSupportedException" />이 항상 throw됩니다.</summary>
      <param name="value">그룹 컬렉션에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다. 읽기 전용 컬렉션입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear">
      <summary>컬렉션을 지웁니다. 이 메서드를 호출하면 <see cref="T:System.NotSupportedException" />이 항상 throw됩니다.</summary>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다. 읽기 전용 컬렉션입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)">
      <summary>그룹 컬렉션에 특정 그룹 항목이 포함되어 있는지 확인합니다.</summary>
      <param name="value">그룹 컬렉션에서 찾을 그룹입니다.</param>
      <returns>그룹 컬렉션에 그룹 항목이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>그룹 컬렉션에 있는 특정 그룹의 인덱스를 확인합니다.</summary>
      <param name="value">그룹 컬렉션에서 찾을 그룹입니다.</param>
      <returns>
        <paramref name="item" />의 인덱스(있는 경우)입니다. 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Group" />을 컬렉션에 삽입합니다. 이 메서드를 호출하면 <see cref="T:System.NotSupportedException" />이 항상 throw됩니다.</summary>
      <param name="index">그룹을 삽입할 위치입니다.</param>
      <param name="value">삽입할 그룹입니다.</param>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다. 읽기 전용 컬렉션입니다.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize">
      <summary>그룹 컬렉션의 크기가 고정되어 있는지 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 항상 있습니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)">
      <summary>원하는 위치에 있는 그룹을 가져옵니다.</summary>
      <param name="index">그룹 컬렉션에서 그룹의 인덱스(0부터 시작) 위치입니다.</param>
      <returns>원하는 위치의 그룹입니다.</returns>
      <exception cref="T:System.NotSupportedException">항목을 설정할 수 없습니다. 읽기 전용 컬렉션입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)">
      <summary>제거를 <see cref="T:System.Text.RegularExpressions.Group" /> 컬렉션에서 합니다. 이 메서드를 호출하면 <see cref="T:System.NotSupportedException" />이 항상 throw됩니다.</summary>
      <param name="value">제거할 그룹입니다.</param>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다. 읽기 전용 컬렉션입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>컬렉션에서 지정된 인덱스의 <see cref="T:System.Text.RegularExpressions.Group" />을 제거합니다. 이 메서드를 호출하면 <see cref="T:System.NotSupportedException" />이 항상 throw됩니다.</summary>
      <param name="index">제거할 그룹의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다. 읽기 전용 컬렉션입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.TryGetValue(System.String,System.Text.RegularExpressions.Group@)">
      <summary>그룹 컬렉션에 있는 경우 제공된 이름 키로 식별되는 그룹을 검색합니다.</summary>
      <param name="key">찾을 그룹 이름 키가 포함된 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 이름이 <paramref name="key" />인 그룹(있는 경우)입니다. 그렇지 않으면 <see langword="null" />입니다(없는 경우).</param>
      <returns>제공된 이름 키로 식별된 그룹이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Values">
      <summary>그룹 컬렉션의 모든 그룹을 포함하는 그룹 열거를 가져옵니다.</summary>
      <returns>그룹 열거형입니다.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>정규식으로 찾은 단일 일치 항목의 결과를 나타냅니다.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>빈 그룹을 가져옵니다. 일치 항목을 찾지 못하는 모든 경우에는 이 빈 일치 항목이 반환됩니다.</summary>
      <returns>빈 일치 항목입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>정규식으로 일치시킨 그룹의 컬렉션을 가져옵니다.</summary>
      <returns>해당 패턴으로 일치시킨 문자 그룹입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>마지막 일치 항목이 끝나는 위치(마지막으로 일치한 문자 다음 문자)에서 시작하여 다음 일치 항목에 대한 결과와 함께 새로운 <see cref="T:System.Text.RegularExpressions.Match" /> 개체를 반환합니다.</summary>
      <returns>다음 정규식 일치 항목입니다.</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>지정된 바꾸기 패턴의 확장을 반환합니다.</summary>
      <param name="replacement">사용할 바꾸기 패턴입니다.</param>
      <returns>
        <paramref name="replacement" /> 매개 변수의 확장 버전입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">이 패턴에 대해 확장이 허용되지 않는 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
      <summary>여러 스레드 간에 공유하기에 적합하고 제공된 인스턴스와 동등한 <see cref="T:System.Text.RegularExpressions.Match" /> 인스턴스를 반환합니다.</summary>
      <param name="inner">예상된 일치 항목과 동등한 정규식 일치 항목입니다.</param>
      <returns>여러 스레드 간에 공유하기에 적합한 정규식 일치 항목입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>정규식 패턴을 입력 문자열에 반복적으로 적용하여 찾은 성공적인 일치 집합을 나타냅니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>지정된 인덱스에서 시작하여 지정된 배열에 컬렉션의 요소를 모두 복사합니다.</summary>
      <param name="array">컬렉션을 복사할 대상 배열입니다.</param>
      <param name="arrayIndex">배열 내에서 복사를 시작할 위치입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열일 경우</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" />가 <paramref name="array" />의 범위 밖인 경우
또는
<paramref name="arrayIndex" />에 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />를 더한 값이 <paramref name="array" />의 범위 밖인 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Text.RegularExpressions.Match[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>일치하는 항목의 개수를 가져옵니다.</summary>
      <returns>일치하는 항목의 개수입니다.</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 제공합니다.</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.Match" />의 모든 <see cref="T:System.Text.RegularExpressions.MatchCollection" /> 개체를 포함하는 개체입니다.</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>컬렉션이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>모든 경우에 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>해당 컬렉션에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>모든 경우에 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>컬렉션의 개별 멤버를 가져옵니다.</summary>
      <param name="i">
        <see cref="T:System.Text.RegularExpressions.Match" /> 컬렉션의 인덱스입니다.</param>
      <returns>컬렉션의 위치 <paramref name="i" />에서 캡처된 부분 문자열입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" />가 0보다 작거나 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />보다 크거나 같은 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다. 이 속성은 항상 개체 자체를 반환합니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Add(System.Text.RegularExpressions.Match)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Clear" />
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Contains(System.Text.RegularExpressions.Match)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Remove(System.Text.RegularExpressions.Match)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Match}#GetEnumerator" />
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#IndexOf(System.Text.RegularExpressions.Match)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Insert(System.Int32,System.Text.RegularExpressions.Match)">
      <param name="index" />
      <param name="item" />
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Item(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#RemoveAt(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Add(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Clear" />
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Contains(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IndexOf(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <param name="index" />
      <param name="value" />
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IsFixedSize" />
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Item(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Remove(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <param name="index" />
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 메서드 작업을 하는 동안 정규식을 사용하여 일치 항목을 찾을 때마다 호출되는 메서드를 나타냅니다.</summary>
      <param name="match">
        <see cref="T:System.Text.RegularExpressions.Match" /> 메서드 작업을 하는 동안 단일 정규식 일치 항목을 나타내는 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 나타내는 메서드에서 반환된 문자열입니다.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>변경할 수 없는 정규식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Text.RegularExpressions.Regex" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 패턴과 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 정보가 포함된 개체입니다.</param>
      <param name="context">이 serialization의 대상입니다. 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />에 포함된 패턴이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="info" />에 잘못된 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 플래그가 포함된 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>지정된 정규 식에 대해 <see cref="T:System.Text.RegularExpressions.Regex" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>패턴을 수정할 수 있는 옵션을 사용하여 <see cref="T:System.Text.RegularExpressions.Regex" /> 클래스의 새 인스턴스를 지정된 정규식에 대해 초기화합니다.</summary>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="options">정규식을 수정하는 열거형 값의 비트 조합입니다.</param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />에 잘못된 플래그가 포함된 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>시간이 초과되기 전에 패턴 일치 메서드가 일치하도록 시도해야 하는 시간을 지정한 패턴과 값을 수정할 수 있는 옵션을 사용하여 <see cref="T:System.Text.RegularExpressions.Regex" /> 클래스의 새 인스턴스를 지정된 정규식에 대해 초기화하고 컴파일합니다.</summary>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="options">정규식을 수정하는 열거형 값의 비트 조합입니다.</param>
      <param name="matchTimeout">시간 제한 간격이거나, 메서드에 시간 제한이 없어야 함을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</param>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />는 유효한 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값이 아닙니다.
또는
<paramref name="matchTimeout" />이 음수, 0 또는 약 24일보다 큰 경우</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>컴파일된 정규식에 대한 현재 정적 캐시의 최대 엔트리 수를 가져오거나 설정합니다.</summary>
      <returns>현재 정적 캐시의 최대 엔트리 수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Set 작업의 값이 0보다 작습니다.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capnames">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CapNames">
      <summary>명명된 캡처링 그룹을 인덱스 값에 매핑하는 사전을 가져오거나 설정합니다.</summary>
      <returns>명명된 캡처링 그룹을 인덱스 값에 매핑하는 사전입니다.</returns>
      <exception cref="T:System.ArgumentNullException">집합 작업의 <see cref="P:System.Text.RegularExpressions.Regex.CapNames" /> 속성에 할당된 값은 <see langword="null" />입니다.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.caps">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Caps">
      <summary>번호가 매겨진 캡처링 그룹을 인덱스 값에 매핑하는 사전을 가져오거나 설정합니다.</summary>
      <returns>번호가 매겨진 캡처링 그룹을 인덱스 값에 매핑하는 사전입니다.</returns>
      <exception cref="T:System.ArgumentNullException">집합 작업의 <see cref="P:System.Text.RegularExpressions.Regex.Caps" /> 속성에 할당된 값은 <see langword="null" />입니다.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)">
      <summary>하나 이상의 지정된 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체를 명명된 어셈블리로 컴파일합니다.</summary>
      <param name="regexinfos">컴파일할 정규식을 설명하는 배열입니다.</param>
      <param name="assemblyname">어셈블리의 파일 이름입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyname" /> 매개 변수의 <see cref="P:System.Reflection.AssemblyName.Name" /> 속성 값이 비어 있거나 null 문자열인 경우
또는
<paramref name="regexinfos" />에 있는 개체 중 하나 이상의 정규식 패턴에 잘못된 구문이 포함된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> 또는 <paramref name="regexinfos" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core만 해당: 컴파일된 정규식의 어셈블리 만들기는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])">
      <summary>지정된 특성을 사용하여 하나 이상의 지정된 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체를 명명된 어셈블리로 컴파일합니다.</summary>
      <param name="regexinfos">컴파일할 정규식을 설명하는 배열입니다.</param>
      <param name="assemblyname">어셈블리의 파일 이름입니다.</param>
      <param name="attributes">어셈블리에 적용할 특성을 정의하는 배열입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyname" /> 매개 변수의 <see cref="P:System.Reflection.AssemblyName.Name" /> 속성 값이 비어 있거나 null 문자열인 경우
또는
<paramref name="regexinfos" />에 있는 개체 중 하나 이상의 정규식 패턴에 잘못된 구문이 포함된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> 또는 <paramref name="regexinfos" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core만 해당: 컴파일된 정규식의 어셈블리 만들기는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)">
      <summary>지정된 특성을 사용하여 하나 이상의 지정된 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체와 지정된 리소스 파일을 명명된 어셈블리로 컴파일합니다.</summary>
      <param name="regexinfos">컴파일할 정규식을 설명하는 배열입니다.</param>
      <param name="assemblyname">어셈블리의 파일 이름입니다.</param>
      <param name="attributes">어셈블리에 적용할 특성을 정의하는 배열입니다.</param>
      <param name="resourceFile">어셈블리에 포함될 Win32 리소스 파일의 이름입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyname" /> 매개 변수의 <see cref="P:System.Reflection.AssemblyName.Name" /> 속성 값이 비어 있거나 null 문자열인 경우
또는
<paramref name="regexinfos" />에 있는 개체 중 하나 이상의 정규식 패턴에 잘못된 구문이 포함된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> 또는 <paramref name="regexinfos" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="resourceFile" /> 매개 변수가 잘못된 Win32 리소스 파일을 지정합니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="resourceFile" /> 매개 변수가 지정된 파일을 찾을 수 없습니다.</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core만 해당: 컴파일된 정규식의 어셈블리 만들기는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>문자(\, *, +, ?, |, {, [, (,), ^, $,., # 및 공백)의 최소 집합을 자체 이스케이프 코드로 대체하여 이스케이프합니다. 이렇게 하면 정규식 엔진은 이러한 문자를 메타문자가 아니라 문자 그대로 해석합니다.</summary>
      <param name="str">변환할 텍스트가 포함된 입력 문자열입니다.</param>
      <returns>메타문자가 이스케이프 서식으로 변환된 문자열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.factory">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>정규식에 대한 캡처링 그룹 이름의 배열을 반환합니다.</summary>
      <returns>그룹 이름의 문자열 배열입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>배열 내의 그룹 이름에 해당하는 캡처링 그룹 번호의 배열을 반환합니다.</summary>
      <returns>그룹 번호의 정수 배열입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>지정된 그룹 번호에 해당하는 그룹 이름을 가져옵니다.</summary>
      <param name="i">해당 그룹 이름으로 변환할 그룹 번호입니다.</param>
      <returns>지정된 그룹 번호에 연결되어 있는 그룹 이름이 포함된 문자열입니다. <paramref name="i" />에 해당하는 그룹 이름이 없는 경우 이 메서드는 <see cref="F:System.String.Empty" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>지정된 그룹 이름에 해당하는 그룹 번호를 반환합니다.</summary>
      <param name="name">해당 그룹 번호로 변환할 그룹 이름입니다.</param>
      <returns>지정된 그룹 이름에 해당하는 그룹 번호이거나 <paramref name="name" />이 유효한 그룹 이름이 아닌 경우 -1입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout">
      <summary>패턴 일치 작업의 시간이 초과되지 않도록 지정합니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.InitializeReferences">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <exception cref="T:System.NotSupportedException">참조가 이미 초기화된 경우</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.internalMatchTimeout">
      <summary>작업 시간이 초과되기 전에 패턴 일치 작업에서 경과될 수 있는 최대 시간입니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에 지정된 정규식이 지정된 입력 문자열에서 일치하는 항목을 찾을 것인지 여부를 나타냅니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <returns>정규식에서 일치하는 항목을 찾으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에 지정된 정규식이 지정된 입력 문자열의 지정된 시작 위치에서부터 일치하는 항목을 찾을 것인지 여부를 나타냅니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="startat">검색을 시작할 문자 위치입니다.</param>
      <returns>정규식에서 일치하는 항목을 찾으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>지정된 정규식이 지정된 입력 문자열에서 일치하는 항목을 찾을 것인지 여부를 나타냅니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <returns>정규식에서 일치하는 항목을 찾으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="pattern" /> 가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>지정된 정규식이 지정된 일치 옵션을 사용하여 지정된 입력 문자열에서 일치하는 항목을 찾을 것인지 여부를 나타냅니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="options">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</param>
      <returns>정규식에서 일치하는 항목을 찾으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />는 유효한 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값이 아닙니다.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>지정된 정규식이 지정된 일치 옵션 및 시간 제한 간격을 사용하여 지정된 입력 문자열에서 일치하는 항목을 찾을 것인지 여부를 나타냅니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="options">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</param>
      <param name="matchTimeout">시간 제한 간격이거나, 메서드에 시간 제한이 없어야 함을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</param>
      <returns>정규식에서 일치하는 항목을 찾으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />는 유효한 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값이 아닙니다.
또는
<paramref name="matchTimeout" />이 음수, 0 또는 약 24일보다 큰 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>지정된 입력 문자열에서 <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에 지정된 정규식의 처음 발견되는 항목을 검색합니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <returns>일치에 대한 정보가 포함된 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>문자열의 지정된 시작 위치에서 시작하여 입력 문자열에서 맨 처음 발견되는 정규식을 검색합니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="startat">검색을 시작할 문자 위치(0부터 시작)입니다.</param>
      <returns>일치에 대한 정보가 포함된 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>지정된 시작 위치에서 시작하고 지정된 수의 문자만 검색하여 입력 문자열에서 첫 번째 정규식을 검색합니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="beginning">검색되는 가장 왼쪽 지점을 정의하는 입력 문자열의 0부터 시작하는 문자 위치입니다.</param>
      <param name="length">검색에 포함시킬 부분 문자열의 문자 수입니다.</param>
      <returns>일치에 대한 정보가 포함된 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="beginning" /> 이 0보다 작거나 <paramref name="input" />의 길이보다 큽니다.
또는
<paramref name="length" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우
또는
<paramref name="beginning" /><see langword="+" /><paramref name="length" /><see langword="-1" />이 <paramref name="input" /> 범위 밖에 있는 위치를 식별하는 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>지정된 입력 문자열에서 첫 번째 지정된 정규식을 검색합니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <returns>일치에 대한 정보가 포함된 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="pattern" /> 가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>지정된 일치 옵션을 사용하여 입력 문자열에서 첫 번째 지정된 정규식을 검색합니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="options">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</param>
      <returns>일치에 대한 정보가 포함된 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>지정된 일치 옵션 및 제한 시간 간격을 사용하여 입력 문자열에서 첫 번째 지정된 정규식을 검색합니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="options">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</param>
      <param name="matchTimeout">시간 제한 간격이거나, 메서드에 시간 제한이 없어야 함을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</param>
      <returns>일치에 대한 정보가 포함된 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닙니다.
또는
<paramref name="matchTimeout" />이 음수, 0 또는 약 24일보다 큰 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>지정된 입력 문자열에 있는 정규식을 모두 검색합니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <returns>검색에서 찾은 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 컬렉션입니다. 일치 항목이 없으면 메서드가 빈 컬렉션 개체를 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>문자열의 지정된 시작 위치에서 시작하여 지정된 입력 문자열에 있는 정규식을 모두 검색합니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="startat">입력 문자열에서 검색을 시작할 문자 위치입니다.</param>
      <returns>검색에서 찾은 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 컬렉션입니다. 일치 항목이 없으면 메서드가 빈 컬렉션 개체를 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>지정된 입력 문자열에서 지정된 정규식을 모두 검색합니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <returns>검색에서 찾은 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 컬렉션입니다. 일치 항목이 없으면 메서드가 빈 컬렉션 개체를 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>지정된 일치 옵션을 사용하여 지정된 입력 문자열에서 지정된 정규식을 모두 검색합니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="options">일치 옵션을 지정하는 열거형 값의 비트 조합입니다.</param>
      <returns>검색에서 찾은 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 컬렉션입니다. 일치 항목이 없으면 메서드가 빈 컬렉션 개체를 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>지정된 일치 옵션 및 제한 시간 간격을 사용하여 지정된 입력 문자열에서 지정된 정규식을 모두 검색합니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="options">일치 옵션을 지정하는 열거형 값의 비트 조합입니다.</param>
      <param name="matchTimeout">시간 제한 간격이거나, 메서드에 시간 제한이 없어야 함을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</param>
      <returns>검색에서 찾은 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 컬렉션입니다. 일치 항목이 없으면 메서드가 빈 컬렉션 개체를 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닙니다.
또는
<paramref name="matchTimeout" />이 음수, 0 또는 약 24일보다 큰 경우</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
      <summary>현재 인스턴스의 시간 제한 간격을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />이 throw되기 전에 패턴 일치 작업에서 경과할 수 있는 최대 시간 간격이며, 제한 시간이 비활성화된 경우는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에 전달된 옵션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 생성자에게 전달된 옵션을 나타내는 하나 이상의 <see cref="T:System.Text.RegularExpressions.Regex" /> 열거형 멤버입니다.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>지정된 입력 문자열에서 정규식 패턴과 일치하는 모든 문자열을 지정된 대체 문자열로 바꿉니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="replacement">대체 문자열입니다.</param>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다. 정규식 패턴이 현재 인스턴스에서 일치하지 않는 경우 메서드는 변경되지 않은 현재 인스턴스를 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="replacement" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>지정된 입력 문자열에서 정규식 패턴과 일치하는 지정된 최대 개수의 문자열을 지정된 대체 문자열로 바꿉니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="replacement">대체 문자열입니다.</param>
      <param name="count">바꾸기를 하는 최대 횟수입니다.</param>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다. 정규식 패턴이 현재 인스턴스에서 일치하지 않는 경우 메서드는 변경되지 않은 현재 인스턴스를 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="replacement" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>지정된 입력 부분 문자열에서 정규식 패턴과 일치하는 지정된 최대 개수의 문자열을 지정된 대체 문자열로 바꿉니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="replacement">대체 문자열입니다.</param>
      <param name="count">바꾸기를 하는 최대 횟수입니다.</param>
      <param name="startat">입력 문자열에서 검색을 시작할 문자 위치입니다.</param>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다. 정규식 패턴이 현재 인스턴스에서 일치하지 않는 경우 메서드는 변경되지 않은 현재 인스턴스를 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="replacement" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>지정된 입력 문자열에서 지정된 정규식과 일치하는 모든 문자열을 지정된 대체 문자열로 바꿉니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="replacement">대체 문자열입니다.</param>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다. 현재 인스턴스에서 <paramref name="pattern" />이 일치하지 않으면 메서드가 변경되지 않은 현재 인스턴스를 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> 또는 <paramref name="replacement" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>지정된 입력 문자열에서 지정된 정규식과 일치하는 모든 문자열을 지정된 대체 문자열로 바꿉니다. 지정한 옵션에 따라 일치 작업이 수정됩니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="replacement">대체 문자열입니다.</param>
      <param name="options">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</param>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다. 현재 인스턴스에서 <paramref name="pattern" />이 일치하지 않으면 메서드가 변경되지 않은 현재 인스턴스를 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> 또는 <paramref name="replacement" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>지정된 입력 문자열에서 지정된 정규식과 일치하는 모든 문자열을 지정된 대체 문자열로 바꿉니다. 추가 매개 변수는 일치하는 항목이 없는 경우 제한 시간 간격과 일치 작업을 수정하는 옵션을 지정합니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="replacement">대체 문자열입니다.</param>
      <param name="options">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</param>
      <param name="matchTimeout">시간 제한 간격이거나, 메서드에 시간 제한이 없어야 함을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</param>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다. 현재 인스턴스에서 <paramref name="pattern" />이 일치하지 않으면 메서드가 변경되지 않은 현재 인스턴스를 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> 또는 <paramref name="replacement" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우
또는
<paramref name="matchTimeout" />이 음수, 0 또는 약 24일보다 큰 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>지정된 입력 문자열에서 지정된 정규식과 일치하는 모든 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="evaluator">각각의 일치 항목을 검사하여 원래 일치하는 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</param>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다. 현재 인스턴스에서 <paramref name="pattern" />이 일치하지 않으면 메서드가 변경되지 않은 현재 인스턴스를 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> 또는 <paramref name="evaluator" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>지정된 입력 문자열에서 지정된 정규식과 일치하는 모든 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다. 지정한 옵션에 따라 일치 작업이 수정됩니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="evaluator">각각의 일치 항목을 검사하여 원래 일치하는 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</param>
      <param name="options">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</param>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다. 현재 인스턴스에서 <paramref name="pattern" />이 일치하지 않으면 메서드가 변경되지 않은 현재 인스턴스를 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> 또는 <paramref name="evaluator" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>지정된 입력 문자열에서 지정된 정규식과 일치하는 모든 부분 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다. 추가 매개 변수는 일치하는 항목이 없는 경우 제한 시간 간격과 일치 작업을 수정하는 옵션을 지정합니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="evaluator">각각의 일치 항목을 검사하여 원래 일치하는 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</param>
      <param name="options">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</param>
      <param name="matchTimeout">시간 제한 간격이거나, 메서드에 시간 제한이 없어야 함을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</param>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다. 현재 인스턴스에서 <paramref name="pattern" />이 일치하지 않으면 메서드가 변경되지 않은 현재 인스턴스를 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> 또는 <paramref name="evaluator" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우
또는
<paramref name="matchTimeout" />이 음수, 0 또는 약 24일보다 큰 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>지정된 입력 문자열에서 지정된 정규식과 일치하는 모든 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="evaluator">각각의 일치 항목을 검사하여 원래 일치하는 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</param>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다. 정규식 패턴이 현재 인스턴스에서 일치하지 않는 경우 메서드는 변경되지 않은 현재 인스턴스를 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="evaluator" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>지정된 입력 문자열에서 정규식 패턴과 일치하는 지정된 최대 개수의 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="evaluator">각각의 일치 항목을 검사하여 원래 일치하는 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</param>
      <param name="count">바꾸기를 하는 최대 횟수입니다.</param>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다. 정규식 패턴이 현재 인스턴스에서 일치하지 않는 경우 메서드는 변경되지 않은 현재 인스턴스를 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="evaluator" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>지정된 입력 부분 문자열에서 정규식 패턴과 일치하는 지정된 최대 개수의 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다.</summary>
      <param name="input">일치 항목을 검색할 문자열입니다.</param>
      <param name="evaluator">각각의 일치 항목을 검사하여 원래 일치하는 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</param>
      <param name="count">바꾸기를 하는 최대 횟수입니다.</param>
      <param name="startat">입력 문자열에서 검색을 시작할 문자 위치입니다.</param>
      <returns>입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다. 정규식 패턴이 현재 인스턴스에서 일치하지 않는 경우 메서드는 변경되지 않은 현재 인스턴스를 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="evaluator" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>정규식을 사용하여 오른쪽에서 왼쪽으로 검색하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>정규식을 사용하여 오른쪽에서 왼쪽으로 검색하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에서 지정된 정규식 패턴에 의해 정의된 위치에서 입력 문자열을 부분 문자열의 배열로 분할합니다.</summary>
      <param name="input">분할할 문자열입니다.</param>
      <returns>문자열 배열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>입력 문자열을 <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에서 지정된 정규식에 의해 정의된 위치에서 지정된 최대 수만큼 부분 문자열의 배열로 분할합니다.</summary>
      <param name="input">분할될 문자열입니다.</param>
      <param name="count">분할할 수 있는 최대 횟수입니다.</param>
      <returns>문자열 배열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>입력 문자열을 <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에서 지정된 정규식에 의해 정의된 위치에서 지정된 최대 수만큼 부분 문자열의 배열로 분할합니다. 입력 문자열에서 지정된 문자 위치부터 정규식 패턴을 검색합니다.</summary>
      <param name="input">분할될 문자열입니다.</param>
      <param name="count">분할할 수 있는 최대 횟수입니다.</param>
      <param name="startat">입력 문자열에서 검색을 시작할 문자 위치입니다.</param>
      <returns>문자열 배열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>정규식 패턴에 의해 정의된 위치에서 부분 문자열로 이루어진 배열로 입력 문자열을 분할합니다.</summary>
      <param name="input">분할할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <returns>문자열 배열입니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="pattern" /> 가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>지정된 정규식 패턴에 의해 정의된 위치에서 부분 문자열로 이루어진 배열로 입력 문자열을 분할합니다. 지정한 옵션에 따라 일치 작업이 수정됩니다.</summary>
      <param name="input">분할할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="options">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</param>
      <returns>문자열 배열입니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>지정된 정규식 패턴에 의해 정의된 위치에서 부분 문자열로 이루어진 배열로 입력 문자열을 분할합니다. 추가 매개 변수는 일치하는 항목이 없는 경우 제한 시간 간격과 일치 작업을 수정하는 옵션을 지정합니다.</summary>
      <param name="input">분할할 문자열입니다.</param>
      <param name="pattern">일치 항목을 찾을 정규식 패턴입니다.</param>
      <param name="options">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</param>
      <param name="matchTimeout">시간 제한 간격이거나, 메서드에 시간 제한이 없어야 함을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</param>
      <returns>문자열 배열입니다.</returns>
      <exception cref="T:System.ArgumentException">정규식 구문 분석 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닙니다.
또는
<paramref name="matchTimeout" />이 음수, 0 또는 약 24일보다 큰 경우</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다. 시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 deserialize하는 데 필요한 데이터로 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체를 채웁니다.</summary>
      <param name="si">serialization 정보로 채울 개체입니다.</param>
      <param name="context">serialize된 데이터를 저장 및 검색할 위치입니다. 이 매개 변수는 나중에 사용하기 위해 예약되어 있습니다.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>
        <see langword="Regex" /> 생성자로 전달된 정규식 패턴을 반환합니다.</summary>
      <returns>
        <see langword="Regex" /> 생성자로 전달된 <paramref name="pattern" /> 매개 변수입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>입력 문자열에서 이스케이프된 문자를 변환합니다.</summary>
      <param name="str">변환할 텍스트가 포함된 입력 문자열입니다.</param>
      <returns>이스케이프된 문자가 이스케이프 해제된 형식으로 변환된 문자열입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="str" />에는 인식할 수 없는 이스케이프 시퀀스가 있습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionC">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <returns>
        <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 속성에 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 옵션이 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <returns>
        <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 속성에 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 옵션이 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)">
      <summary>시간 제한 간격이 허용 범위 내에 있는지 여부를 확인합니다.</summary>
      <param name="matchTimeout">확인할 시간 제한 간격입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">지정된 제한 시간이 유효한 범위 내에 있지 않습니다.</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexCompilationInfo">
      <summary>정규식을 독립 실행형 어셈블리로 컴파일하는 데 사용하는 정규식에 대한 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)">
      <summary>어셈블리에 포함할 정규식에 대한 정보를 포함하는 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="pattern">컴파일할 정규식입니다.</param>
      <param name="options">정규식을 컴파일할 때 사용할 정규식 옵션입니다.</param>
      <param name="name">컴파일된 정규식을 나타내는 형식의 이름입니다.</param>
      <param name="fullnamespace">새 형식이 속한 네임스페이스입니다.</param>
      <param name="ispublic">컴파일된 정규식을 공개적으로 표시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />가 <see cref="F:System.String.Empty" />인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" />가 <see langword="null" />입니다.
또는
<paramref name="name" />가 <see langword="null" />인 경우
또는
<paramref name="fullnamespace" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)">
      <summary>어셈블리에 포함할 지정된 시간 제한 값의 정규식에 대한 정보를 포함하는 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="pattern">컴파일할 정규식입니다.</param>
      <param name="options">정규식을 컴파일할 때 사용할 정규식 옵션입니다.</param>
      <param name="name">컴파일된 정규식을 나타내는 형식의 이름입니다.</param>
      <param name="fullnamespace">새 형식이 속한 네임스페이스입니다.</param>
      <param name="ispublic">컴파일된 정규식을 공개적으로 표시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="matchTimeout">정규식에 대한 기본 시간 제한 간격입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />가 <see cref="F:System.String.Empty" />입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" />가 <see langword="null" />입니다.
또는
<paramref name="name" />가 <see langword="null" />인 경우
또는
<paramref name="fullnamespace" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="matchTimeout" />이 음수, 0 또는 약 24일보다 큰 경우</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic">
      <summary>컴파일된 정규식을 공개적으로 표시할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>정규식을 공개적으로 표시할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout">
      <summary>정규식의 기본 시간 제한 간격을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />이 throw되기 전에 패턴 일치 작업에서 경과할 수 있는 기본 최대 시간 간격이며, 제한 시간이 비활성화된 경우는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Name">
      <summary>컴파일된 정규식을 나타내는 형식의 이름을 가져오거나 설정합니다.</summary>
      <returns>새 형식의 이름입니다.</returns>
      <exception cref="T:System.ArgumentNullException">이 속성 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">이 속성의 값은 빈 문자열입니다.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace">
      <summary>새 형식이 속한 네임스페이스를 가져오거나 설정합니다.</summary>
      <returns>새 형식의 네임스페이스입니다.</returns>
      <exception cref="T:System.ArgumentNullException">이 속성 값이 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Options">
      <summary>정규식을 컴파일할 때 사용할 옵션을 가져오거나 설정합니다.</summary>
      <returns>열거형 값의 비트 조합입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern">
      <summary>컴파일할 정규식을 가져오거나 설정합니다.</summary>
      <returns>컴파일할 정규식입니다.</returns>
      <exception cref="T:System.ArgumentNullException">이 속성 값이 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
      <summary>정적 정규식 패턴 일치 메서드의 실행 시간이 시간 제한 간격을 초과하는 경우 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor">
      <summary>시스템 제공 메시지를 사용하여 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 데이터가 들어 있는 개체입니다.</param>
      <param name="context">serialize된 데이터가 들어 있는 스트림입니다.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String)">
      <summary>지정된 메시지 문자열을 사용하여 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 문자열입니다.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 문자열입니다.</param>
      <param name="inner">현재 예외의 원인인 예외입니다.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.String,System.TimeSpan)">
      <summary>정규식 패턴, 입력 텍스트 및 시간 초과 간격에 대한 정보를 사용하여 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="regexInput">제한 시간이 경과되었을 경우 정규식 엔진에서 처리되는 입력 텍스트입니다.</param>
      <param name="regexPattern">제한 시간이 경과되었을 경우 정규식 엔진에서 사용되는 패턴입니다.</param>
      <param name="matchTimeout">시간 제한 간격입니다.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Input">
      <summary>제한 시간이 경과될 때 정규식 엔진에서 처리하고 있었던 입력 텍스트를 가져옵니다.</summary>
      <returns>정규식 입력 텍스트입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout">
      <summary>정규식 일치에 대한 시간 제한 간격을 가져옵니다.</summary>
      <returns>시간 제한 간격입니다.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Pattern">
      <summary>제한 시간이 초과될 때 일치하는 작업에서 사용된 정규식 패턴을 가져옵니다.</summary>
      <returns>정규식 패턴입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 serialize하는 데 필요한 데이터로 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 개체를 채웁니다.</summary>
      <param name="si">데이터로 채울 개체입니다.</param>
      <param name="context">이 serialization의 대상입니다.</param>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>정규식 옵션을 설정하는 데 사용하는 열거형 값을 제공합니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>정규식이 어셈블리로 컴파일되도록 지정합니다. 이렇게 하면 실행은 빨라지지만 시작 시간은 늘어납니다. <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" /> 메서드를 호출할 때는 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> 속성에 이 값을 할당하지 말아야 합니다. 자세한 내용은 정규식 옵션 항목의 "컴파일된 정규식" 섹션을 참조하세요.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>언어의 문화권 차이점이 무시되도록 지정합니다. 자세한 내용은 정규식 옵션 항목의 "고정 문화권을 사용한 비교" 섹션을 참조하세요.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>해당 식에 ECMAScript 규격 동작을 사용 가능하게 합니다. 이 값은 <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" />, <see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" /> 및 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 값과 함께만 사용할 수 있습니다. 이 값을 다른 값과 함께 사용하면 예외가 발생합니다.
<see cref="F:System.Text.RegularExpressions.RegexOptions.ECMAScript" /> 옵션에 대한 자세한 내용은 정규식 옵션 항목의 "ECMAScript 일치 동작"을 참조하세요.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>해당 형식(?&lt;name&gt;...)의 명시적으로 명명되거나 번호가 매겨진 그룹만 유효한 캡처가 되도록 지정합니다. 이렇게 하면 명명되지 않은 괄호가 해당 식(?:...)과 같이 구문적으로 어색한 부분 없이 비캡처링 그룹의 역할을 할 수 있습니다. 자세한 내용은 정규식 옵션 항목의 "명시적 캡처의 경우에만"을 참조하세요.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>대/소문자를 구분하지 않고 일치 항목을 찾도록 지정합니다. 자세한 내용은 정규식 옵션 항목의 "대/소문자를 구분하지 않는 일치" 섹션을 참조하세요.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>이스케이프되지 않은 공백을 패턴에서 제거하고 주석을 #으로 표시할 수 있게 합니다. 그러나 이 값은 문자 클래스, 숫자 수량자 또는 개별 정규식 언어 요소의 시작을 표시하는 토큰에서 영향을 주거나 공백을 제거하지 않습니다. 자세한 내용은 정규식 옵션 아티클의 “공백 무시” 섹션을 참조하세요.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>여러 줄 모드입니다. 전체 문자열의 시작과 끝뿐만 아니라 모든 줄의 시작과 끝에서 각각 일치하도록 ^과 $의 의미를 변경합니다. 자세한 내용은 정규식 옵션 항목의 "여러 줄 모드" 섹션을 참조하세요.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>옵션이 설정되지 않도록 지정합니다. 정규식 엔진의 기본 동작에 대한 자세한 내용은 정규식 옵션 항목의 "기본 옵션" 섹션을 참조하세요.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>왼쪽에서 오른쪽이 아닌 오른쪽에서 왼쪽으로 검색이 진행되도록 지정합니다. 자세한 내용은 정규식 옵션 항목의 "오른쪽에서 왼쪽 모드" 섹션을 참조하세요.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>한 줄 모드를 지정합니다. \n을 제외한 모든 문자가 아닌 \n을 포함한 모든 문자와 일치하도록 점(.)의 의미를 변경합니다. 자세한 내용은 정규식 옵션 항목의 "한 줄 모드" 섹션을 참조하세요.</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunner">
      <summary>
        <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 클래스는 컴파일된 정규식의 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.#ctor">
      <summary>
        <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Capture(System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <param name="capnum">캡처 번호입니다.</param>
      <param name="start">캡처의 시작 위치입니다.</param>
      <param name="end">캡처의 끝 위치입니다.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInClass(System.Char,System.String)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다. 문자가 문자 클래스에 있는지 여부를 확인합니다.</summary>
      <param name="ch">테스트할 문자입니다.</param>
      <param name="charClass">문자 클래스의 내부 이름입니다.</param>
      <returns>
        <paramref name="ch" /> 매개 변수가 <paramref name="charClass" /> 매개 변수로 지정된 문자 클래스에 있으면 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInSet(System.Char,System.String,System.String)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <param name="ch">단일 문자입니다.</param>
      <param name="set">문자 집합입니다.</param>
      <param name="category">문자 범주입니다.</param>
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CheckTimeout">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawl(System.Int32)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <param name="i">저장할 숫자입니다.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawlpos">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <returns>
        <see cref="T:System.Int32" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleCrawl">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleStack">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleTrack">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.EnsureStorage">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.FindFirstChar">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <returns>
        <see cref="T:System.Boolean" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Go">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.InitTrackCount">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsBoundary(System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <param name="index">가능한 경계 위치입니다.</param>
      <param name="startpos">시작 위치입니다.</param>
      <param name="endpos">끝 위치입니다.</param>
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsECMABoundary(System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <param name="index">가능한 ECMA 경계 위치입니다.</param>
      <param name="startpos">시작 위치입니다.</param>
      <param name="endpos">끝 위치입니다.</param>
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsMatched(System.Int32)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <param name="cap">캡처 번호입니다.</param>
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchIndex(System.Int32)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <param name="cap">캡처 번호입니다.</param>
      <returns>
        <see cref="T:System.Int32" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchLength(System.Int32)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <param name="cap">캡처 번호입니다.</param>
      <returns>
        <see cref="T:System.Int32" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Popcrawl">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <returns>
        <see cref="T:System.Int32" />을 반환합니다.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawl">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawlpos">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runmatch">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runregex">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstack">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstackpos">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtext">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextbeg">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextend">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextpos">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextstart">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrack">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackcount">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackpos">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <param name="regex">정규식 엔진의 인스턴스입니다.</param>
      <param name="text">패턴 일치를 검색할 텍스트입니다.</param>
      <param name="textbeg">정규식 엔진이 일치 항목을 검색하는 <paramref name="text" />의 0부터 시작하는 위치입니다.</param>
      <param name="textend">정규식 엔진이 일치 항목을 검색하는 <paramref name="text" />의 0에서 끝나는 위치입니다.</param>
      <param name="textstart">이 일치 항목을 검색할 0부터 시작하는 위치입니다.</param>
      <param name="prevlen">이전 일치 항목의 문자 수입니다.</param>
      <param name="quick">빠른 모드에서 일치 항목을 검색하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>일치 항목입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.TimeSpan)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <param name="regex">정규식 엔진의 인스턴스입니다.</param>
      <param name="text">패턴 일치를 검색할 텍스트입니다.</param>
      <param name="textbeg">정규식 엔진이 일치 항목을 검색하는 <paramref name="text" />의 0부터 시작하는 위치입니다.</param>
      <param name="textend">정규식 엔진이 일치 항목을 검색하는 <paramref name="text" />의 0에서 끝나는 위치입니다.</param>
      <param name="textstart">이 일치 항목을 검색할 0부터 시작하는 위치입니다.</param>
      <param name="prevlen">이전 일치 항목의 문자 수입니다.</param>
      <param name="quick">빠른 모드에서 일치 항목을 검색하려면<see langword="true" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="timeout">제한 시간 간격입니다.</param>
      <returns>일치 항목입니다.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.TransferCapture(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
      <param name="capnum">캡처 번호입니다.</param>
      <param name="uncapnum">저장된 캡처 번호입니다.</param>
      <param name="start">시작 위치입니다.</param>
      <param name="end">끝 위치입니다.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Uncapture">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunnerFactory">
      <summary>컴파일된 정규식에 대한 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 클래스를 만듭니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.#ctor">
      <summary>
        <see cref="T:System.Text.RegularExpressions.RegexRunnerFactory" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance">
      <summary>파생 클래스에서 재정의된 경우 컴파일된 특정 정규식에 대한 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 개체를 만듭니다.</summary>
      <returns>컴파일된 특정 정규식을 실행하도록 디자인된 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 개체입니다.</returns>
    </member>
  </members>
</doc>
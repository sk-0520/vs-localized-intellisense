<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Emit</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.AssemblyBuilder">
      <summary>동적 어셈블리를 정의하고 나타냅니다.</summary>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.CodeBase">
      <summary>원래 지정된 것처럼(예: <see cref="T:System.Reflection.AssemblyName" /> 개체) 어셈블리의 위치를 가져옵니다.</summary>
      <returns>원래 지정된 어셈블리 위치입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary>지정한 이름 및 액세스 권한을 사용하여 동적 어셈블리를 정의합니다.</summary>
      <param name="name">어셈블리의 이름입니다.</param>
      <param name="access">어셈블리의 액세스 권한입니다.</param>
      <returns>새 어셈블리를 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
      <summary>지정한 이름, 액세스 권한 및 특성이 있는 새 어셈블리를 정의합니다.</summary>
      <param name="name">어셈블리의 이름입니다.</param>
      <param name="access">어셈블리의 액세스 권한입니다.</param>
      <param name="assemblyAttributes">어셈블리의 특성을 포함하는 컬렉션입니다.</param>
      <returns>새 어셈블리를 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)">
      <summary>해당 어셈블리에서 명명된 동적 모듈을 정의합니다.</summary>
      <param name="name">동적 모듈의 이름입니다.</param>
      <returns>정의된 동적 모듈을 나타내는 <see cref="T:System.Reflection.Emit.ModuleBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />이 공백으로 시작되는 경우
또는
<paramref name="name" />의 길이가 0입니다.
또는
<paramref name="name" />의 길이가 시스템 정의 최대 길이보다 긴 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.ExecutionEngineException">기본 기호 작성기의 어셈블리를 로드할 수 없는 경우
또는
기본 기호 작성기 인터페이스를 구현하는 형식을 찾을 수 없는 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint">
      <summary>해당 어셈블리의 진입점을 반환합니다.</summary>
      <returns>해당 어셈블리의 진입점입니다.</returns>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)">
      <summary>이 인스턴스가 지정된 개체와 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="obj">이 인스턴스와 비교할 개체 또는 <see langword="null" />입니다.</param>
      <returns>
        <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.FullName">
      <summary>현재 동적 어셈블리의 표시 이름을 가져옵니다.</summary>
      <returns>동적 어셈블리의 표시 이름입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)">
      <summary>현재 <see cref="T:System.Reflection.Emit.AssemblyBuilder" />에 적용된 사용자 지정 특성을 모두 반환합니다.</summary>
      <param name="inherit">이 인수는 이 형식의 개체에 대해 무시됩니다.</param>
      <returns>사용자 지정 특성이 들어 있는 배열입니다. 특성이 없으면 배열이 비어 있습니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>현재 <see cref="T:System.Reflection.Emit.AssemblyBuilder" />에 적용되었으며 지정된 특성 형식에서 파생되는 사용자 지정 특성을 모두 반환합니다.</summary>
      <param name="attributeType">특성이 파생되는 기본 형식입니다.</param>
      <param name="inherit">이 인수는 이 형식의 개체에 대해 무시됩니다.</param>
      <returns>임의 수준의 <paramref name="attributeType" />에서 파생된 사용자 지정 특성이 들어 있는 배열입니다. 해당 특성이 없으면 배열이 비어 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" />이 런타임에 제공되는 <see cref="T:System.Type" /> 개체가 아닌 경우. 예를 들어 <paramref name="attributeType" />이 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 개체인 경우입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData">
      <summary>현재 <see cref="T:System.Reflection.CustomAttributeData" />에 적용된 특성에 대한 정보가 들어 있는 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 개체를 반환합니다.</summary>
      <returns>현재 모듈에 적용된 특성에 대한 데이터를 나타내는 <see cref="T:System.Reflection.CustomAttributeData" /> 개체의 제네릭 목록입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)">
      <summary>지정된 이름의 동적 모듈을 반환합니다.</summary>
      <param name="name">요청된 동적 모듈의 이름입니다.</param>
      <returns>요청된 동적 모듈을 나타내는 ModuleBuilder 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 길이가 0입니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes">
      <summary>이 어셈블리에 정의되어 있는 내보낸 형식을 가져옵니다.</summary>
      <returns>해당 어셈블리에 정의되어 있는 내보낸 형식이 들어 있는 <see cref="T:System.Type" /> 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드가 구현되지 않은 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)">
      <summary>이 어셈블리의 매니페스트 파일 테이블에서 지정된 파일에 대한 <see cref="T:System.IO.FileStream" />을 가져옵니다.</summary>
      <param name="name">지정된 파일의 이름입니다.</param>
      <returns>지정된 파일에 대한 <see cref="T:System.IO.FileStream" />이며, 해당 파일이 없는 경우에는 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)">
      <summary>리소스 모듈의 포함 여부를 지정하여 어셈블리 매니페스트의 파일 테이블에서 파일을 가져옵니다.</summary>
      <param name="getResourceModules">리소스 모듈을 포함하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <returns>
        <see cref="T:System.IO.FileStream" /> 개체의 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetLoadedModules(System.Boolean)">
      <summary>이 어셈블리의 일부인 로드된 모듈을 모두 반환하며 선택적으로 리소스 모듈을 포함합니다.</summary>
      <param name="getResourceModules">리소스 모듈을 포함하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <returns>이 어셈블리의 일부인 로드된 모듈입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)">
      <summary>지정된 리소스가 지속되는 방법에 대한 정보를 반환합니다.</summary>
      <param name="resourceName">리소스의 이름입니다.</param>
      <returns>리소스의 토폴로지에 대한 정보로 채워진 <see cref="T:System.Reflection.ManifestResourceInfo" /> 또는 리소스를 찾을 수 없는 경우에는 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames">
      <summary>지정된 매니페스트 리소스를 이 어셈블리에서 로드합니다.</summary>
      <returns>모든 리소스의 이름을 포함하는 <see langword="String" /> 형식의 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드가 동적 어셈블리에서 지원되지 않는 경우. 매니페스트 리소스 이름을 가져오려면 <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" />를 사용하십시오.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)">
      <summary>지정된 매니페스트 리소스를 이 어셈블리에서 로드합니다.</summary>
      <param name="name">요청된 매니페스트 리소스의 이름입니다.</param>
      <returns>이 매니페스트 리소스를 나타내는 <see cref="T:System.IO.Stream" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)">
      <summary>지정된 형식의 네임스페이스에 의해 범위가 지정된 매니페스트 리소스를 이 어셈블리에서 로드합니다.</summary>
      <param name="type">해당 네임스페이스가 매니페스트 리소스 이름의 범위를 지정하는 데 사용된 형식입니다.</param>
      <param name="name">요청된 매니페스트 리소스의 이름입니다.</param>
      <returns>이 매니페스트 리소스를 나타내는 <see cref="T:System.IO.Stream" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModule(System.String)">
      <summary>이 어셈블리에 있는 지정된 모듈을 가져옵니다.</summary>
      <param name="name">요청된 모듈의 이름입니다.</param>
      <returns>요청되는 모듈 또는 모듈이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModules(System.Boolean)">
      <summary>이 어셈블리의 일부인 모듈을 모두 가져오며 선택적으로 리소스 모듈을 포함합니다.</summary>
      <param name="getResourceModules">리소스 모듈을 포함하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <returns>이 어셈블리의 일부인 모듈입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)">
      <summary>현재 동적 어셈블리를 만들 때 지정된 <see cref="T:System.Reflection.AssemblyName" />을 가져오고 코드베이스를 지정된 상태로 설정합니다.</summary>
      <param name="copiedName">코드베이스를 섀도 복사한 후 어셈블리 위치로 설정하려면 <see langword="true" />이고, 코드베이스를 원래 위치로 설정하려면 <see langword="false" />입니다.</param>
      <returns>동적 어셈블리의 이름입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies">
      <summary>이 <see cref="T:System.Reflection.AssemblyName" />가 참조하는 어셈블리에 대한 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 개체의 불완전 목록을 가져옵니다.</summary>
      <returns>참조된 어셈블리의 어셈블리 이름 배열입니다. 이 배열은 전체 목록이 아닙니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary>지정된 문화권에 대한 위성 어셈블리를 가져옵니다.</summary>
      <param name="culture">지정된 문화권입니다.</param>
      <returns>지정된 위성 어셈블리입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">어셈블리를 찾을 수 없습니다.</exception>
      <exception cref="T:System.IO.FileLoadException">파일 이름이 일치하는 위성 어셈블리가 있지만 <see langword="CultureInfo" />가 지정된 어셈블리와 일치하지 않습니다.</exception>
      <exception cref="T:System.BadImageFormatException">위성 어셈블리가 유효한 어셈블리가 아닙니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary>지정된 문화권에 대한 지정된 버전의 위성 어셈블리를 가져옵니다.</summary>
      <param name="culture">지정된 문화권입니다.</param>
      <param name="version">위성 어셈블리의 버전입니다.</param>
      <returns>지정된 위성 어셈블리입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.IO.FileLoadException">파일 이름이 일치하는 위성 어셈블리가 있지만 <see langword="CultureInfo" /> 또는 버전이 지정된 어셈블리와 일치하지 않습니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">어셈블리를 찾을 수 없습니다.</exception>
      <exception cref="T:System.BadImageFormatException">위성 어셈블리가 유효한 어셈블리가 아닙니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>현재 <see cref="T:System.Reflection.Emit.AssemblyBuilder" />에 정의하고 만든 형식에서 지정된 형식을 가져옵니다.</summary>
      <param name="name">검색할 형식의 이름입니다.</param>
      <param name="throwOnError">형식을 찾을 수 없는 경우 예외를 throw하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="ignoreCase">검색 시 형식 이름의 대/소문자를 무시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>지정된 형식 또는 이 형식을 찾을 수 없거나 아직 형식을 만들지 않은 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache">
      <summary>어셈블리가 전역 어셈블리 캐시에서 로드되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.HostContext">
      <summary>동적 어셈블리를 만드는 중인 호스트 컨텍스트를 가져옵니다.</summary>
      <returns>동적 어셈블리를 만드는 중인 호스트 컨텍스트를 나타내는 값입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion">
      <summary>매니페스트가 들어 있는 파일에 저장될 공용 언어 런타임의 버전을 가져옵니다.</summary>
      <returns>공용 언어 런타임의 버전을 나타내는 문자열입니다.</returns>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>이 멤버에 지정된 특성 형식의 인스턴스가 하나 이상 적용되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="attributeType">테스트할 특성의 형식입니다.</param>
      <param name="inherit">이 인수는 이 형식의 개체에 대해 무시됩니다.</param>
      <returns>이 동적 어셈블리에 <paramref name="attributeType" />의 인스턴스가 하나 이상 적용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic">
      <summary>현재 어셈블리가 동적 어셈블리임을 나타내는 값을 가져옵니다.</summary>
      <returns>항상 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.Location">
      <summary>매니페스트가 들어 있는 로드된 파일이 섀도 복사되지 않은 경우, 해당 파일의 위치를 코드베이스 형식으로 가져옵니다.</summary>
      <returns>매니페스트가 포함된 로드된 파일의 위치입니다. 로드된 파일이 섀도 복사된 경우 <see langword="Location" />은 섀도 복사되기 전 파일의 위치입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule">
      <summary>어셈블리 매니페스트가 들어 있는 현재 <see cref="T:System.Reflection.Emit.AssemblyBuilder" />의 모듈을 가져옵니다.</summary>
      <returns>매니페스트 모듈입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ReflectionOnly">
      <summary>동적 어셈블리가 리플렉션 전용 컨텍스트에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>동적 어셈블리가 리플렉션 전용 컨텍스트에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>지정된 사용자 지정 특성 BLOB를 사용하여 해당 어셈블리에 사용자 지정 특성을 설정합니다.</summary>
      <param name="con">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="con" />이 <see langword="RuntimeConstructorInfo" /> 개체가 아닙니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>사용자 지정 특성 작성기를 사용하여 해당 어셈블리에 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilderAccess">
      <summary>동적 어셈블리의 액세스 모드를 정의합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Run">
      <summary>동적 어셈블리를 실행할 수는 있지만 저장할 수는 없습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect">
      <summary>동적 어셈블리가 자동으로 로드되고 더 이상 액세스할 수 없는 경우 해당 메모리가 회수됩니다.</summary>
    </member>
    <member name="T:System.Reflection.Emit.ConstructorBuilder">
      <summary>동적 클래스의 생성자를 정의하고 나타냅니다.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
      <summary>이 생성자에 대한 특성을 가져옵니다.</summary>
      <returns>이 생성자에 대 한 특성입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.CallingConvention">
      <summary>선언 형식이 제네릭 형식인지 여부에 따라 달라지는 <see cref="T:System.Reflection.CallingConventions" /> 값을 가져옵니다.</summary>
      <returns>선언 형식이 제네릭 형식이면 <see cref="F:System.Reflection.CallingConventions.HasThis" />이고, 그렇지 않으면 <see cref="F:System.Reflection.CallingConventions.Standard" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
      <summary>이 멤버를 선언하는 형식의 <see cref="T:System.Type" /> 개체에 대한 참조를 가져옵니다.</summary>
      <returns>이 멤버를 선언 하는 형식입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>해당 생성자의 매개 변수를 정의합니다.</summary>
      <param name="iSequence">매개 변수 목록에서 매개 변수의 위치입니다. 매개 변수는 첫 번째 매개 변수가 숫자 1부터 시작하여 인덱싱됩니다.</param>
      <param name="attributes">매개 변수의 특성입니다.</param>
      <param name="strParamName">매개 변수의 이름입니다. 이름이 null 문자열일 수 있습니다.</param>
      <returns>이 생성자의 새 매개 변수를 나타내는 개체입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iSequence" />가 0(영) 미만이거나 생성자의 매개 변수 수보다 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">포함하는 형식을 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
      <summary>해당 생성자에 대해 정의된 사용자 지정 특성을 모두 반환합니다.</summary>
      <param name="inherit">기본 클래스에서 사용자 지정 특성을 상속받는 것을 제어합니다. 이 매개 변수는 무시됩니다.</param>
      <returns>이 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 인스턴스로 나타내는 생성자의 모든 사용자 지정 특성을 나타내는 개체 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>지정된 형식으로 식별되는 사용자 지정 특성을 반환합니다.</summary>
      <param name="attributeType">사용자 지정 특성 형식입니다.</param>
      <param name="inherit">기본 클래스에서 사용자 지정 특성을 상속받는 것을 제어합니다. 이 매개 변수는 무시됩니다.</param>
      <returns>이 생성자의 특성을 나타내는 개체 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
      <summary>해당 생성자에 대한 <see cref="T:System.Reflection.Emit.ILGenerator" />를 가져옵니다.</summary>
      <returns>이 생성자에 대한 <see cref="T:System.Reflection.Emit.ILGenerator" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">생성자는 매개 변수가 없는 생성자입니다.
또는
메서드 본문이 없어야 함을 나타내는 <see cref="T:System.Reflection.MethodAttributes" /> 또는 <see cref="T:System.Reflection.MethodImplAttributes" /> 플래그가 생성자에 있는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
      <summary>지정된 MSIL 스트림 크기를 사용하여 이 생성자의 메서드 본문을 만드는 데 사용할 수 있는 <see cref="T:System.Reflection.Emit.ILGenerator" /> 개체를 가져옵니다.</summary>
      <param name="streamSize">MSIL 스트림의 크기(바이트)입니다.</param>
      <returns>이 생성자에 대한 <see cref="T:System.Reflection.Emit.ILGenerator" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">생성자는 매개 변수가 없는 생성자입니다.
또는
메서드 본문이 없어야 함을 나타내는 <see cref="T:System.Reflection.MethodAttributes" /> 또는 <see cref="T:System.Reflection.MethodImplAttributes" /> 플래그가 생성자에 있는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
      <summary>해당 생성자에 대한 메서드 구현 플래그를 반환합니다.</summary>
      <returns>해당 생성자에 대한 메서드 구현 플래그입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
      <summary>해당 생성자의 매개 변수를 반환합니다.</summary>
      <returns>이 생성자의 매개 변수를 나타내는 배열입니다.</returns>
      <exception cref="T:System.InvalidOperationException">.NET Framework versions 1.0 및 1.1에서 이 생성자의 형식에 대해 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />이 호출되지 않은 경우</exception>
      <exception cref="T:System.NotSupportedException">.NET Framework 버전 2.0에서 이 생성자의 형식에 대해 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />이 호출되지 않은 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
      <summary>해당 생성자에서 지역 변수가 0으로 초기화되어야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>읽기/쓰기입니다. 해당 생성자에서 지역 변수가 0으로 초기화되어야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>지정된 <see langword="Binder" />의 제약 조건 하에서 지정된 인수를 사용하여 이 인스턴스에 의해 리플렉션된 생성자를 동적으로 호출합니다.</summary>
      <param name="obj">다시 초기화해야 하는 개체입니다.</param>
      <param name="invokeAttr">원하는 바인딩 형식을 지정하는 <see langword="BindingFlags" /> 값 중 하나입니다.</param>
      <param name="binder">속성 집합을 정의하고 바인딩, 인수 형식의 강제 변환, 리플렉션을 사용한 멤버 호출 등을 가능하게 하는 <see langword="Binder" />입니다. <paramref name="binder" />가 <see langword="null" />이면 Binder.DefaultBinding이 사용됩니다.</param>
      <param name="parameters">인수 목록입니다. 이것은 호출되는 생성자의 매개 변수와 개수, 순서 및 형식이 같은 인수 배열입니다. 매개 변수가 없으면 이 목록이 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
      <param name="culture">형식의 강제 변환을 제어하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" /> 입니다. 이 매개 변수가 null이면 현재 스레드에 대한 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다.</param>
      <returns>생성자와 연결된 클래스의 인스턴스입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하면 생성자를 검색하고 반환된 <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />에 대해 <see cref="T:System.Reflection.ConstructorInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>지정된 바인더의 제약 조건에 따라 지정한 매개 변수를 전달하여 지정된 개체에 있는 이 인스턴스로 나타나는 생성자를 동적으로 호출합니다.</summary>
      <param name="invokeAttr">이것은 InvokeMethod, NonPublic 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <param name="binder">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see langword="MemberInfo" /> 개체의 검색을 가능하게 하는 개체입니다. 바인더가 <see langword="null" />이면 기본 바인더가 사용됩니다. <see cref="T:System.Reflection.Binder" />을 참조하세요.</param>
      <param name="parameters">인수 목록입니다. 이것은 호출되는 생성자의 매개 변수와 개수, 순서 및 형식이 같은 인수 배열입니다. 매개 변수가 없는 경우 <see langword="null" />이 되어야 합니다.</param>
      <param name="culture">형식의 강제 변환을 제어하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" />의 인스턴스입니다. 이 매개 변수가 null이면 현재 스레드에 대한 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다. 예를 들어 1000은 각 문화권마다 다르게 표현되므로 1000을 나타내는 <see cref="T:System.String" />을 <see cref="T:System.Double" /> 값으로 변환하기 위해 이 매개 변수가 필요합니다.</param>
      <returns>호출된 생성자에서 반환된 값입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하면 생성자를 검색하고 반환된 <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />에 대해 <see cref="T:System.Reflection.ConstructorInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>지정된 사용자 지정 특성 형식이 정의되어 있는지 확인합니다.</summary>
      <param name="attributeType">사용자 지정 특성 형식입니다.</param>
      <param name="inherit">기본 클래스에서 사용자 지정 특성을 상속받는 것을 제어합니다. 이 매개 변수는 무시됩니다.</param>
      <returns>지정된 사용자 지정 특성 형식이 정의되어 있으면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하면 생성자를 검색하고 반환된 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />에 대해 <see cref="T:System.Reflection.ConstructorInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
      <summary>메서드에 대한 내부 핸들을 가져옵니다. 내부 메타데이터 핸들에 액세스하려면 이 핸들을 사용합니다.</summary>
      <returns>메서드에 대한 내부 핸들입니다. 내부 메타데이터 핸들에 액세스하려면 이 핸들을 사용합니다.</returns>
      <exception cref="T:System.NotSupportedException">해당 속성이 이 클래스에서 지원되지 않는 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Module">
      <summary>이 생성자가 정의된 동적 모듈을 가져옵니다.</summary>
      <returns>이 생성자가 정의된 동적 모듈을 나타내는 <see cref="T:System.Reflection.Module" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Name">
      <summary>해당 생성자의 이름을 검색합니다.</summary>
      <returns>이 생성자의 이름입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
      <summary>해당 개체를 얻어온 <see cref="T:System.Type" /> 개체에 대한 참조가 들어 있습니다.</summary>
      <returns>이 개체를 가져온 <see langword="Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>지정된 사용자 지정 특성 BLOB를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary>해당 생성자에 대한 메서드 구현 플래그를 설정합니다.</summary>
      <param name="attributes">메서드 구현 플래그입니다.</param>
      <exception cref="T:System.InvalidOperationException">포함하는 형식을 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.ToString">
      <summary>해당 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 인스턴스를 <see cref="T:System.String" />으로 반환합니다.</summary>
      <returns>이 생성자의 이름, 특성, 예외 뒤에 현재 MSIL(Microsoft Intermediate Language) 스트림이 포함된 문자열입니다.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EnumBuilder">
      <summary>열거형을 설명하고 나타냅니다.</summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Assembly">
      <summary>해당 열거형 정의가 들어 있는 동적 어셈블리를 검색합니다.</summary>
      <returns>읽기 전용입니다. 해당 열거형 정의가 들어 있는 동적 어셈블리입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
      <summary>부모 어셈블리의 표시 이름으로 정규화된 이 열거형의 전체 경로를 반환합니다.</summary>
      <returns>읽기 전용입니다. 부모 어셈블리의 표시 이름으로 정규화된 이 열거형의 전체 경로입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.BaseType">
      <summary>항상 <see cref="T:System.Type" /> 형식인 해당 형식의 부모 <see cref="T:System.Enum" />을 반환합니다.</summary>
      <returns>읽기 전용입니다. 해당 형식의 부모 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo">
      <summary>이 열거형을 나타내는 <see cref="T:System.Reflection.TypeInfo" /> 개체를 가져옵니다.</summary>
      <returns>이 열거형을 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
      <summary>이 <see cref="T:System.Reflection.Emit.EnumBuilder" />를 선언한 형식을 반환합니다.</summary>
      <returns>읽기 전용입니다. 이 <see cref="T:System.Reflection.Emit.EnumBuilder" />를 선언한 형식입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
      <summary>지정된 상수 값으로 열거형에서 명명된 정적 필드를 정의합니다.</summary>
      <param name="literalName">정적 필드의 이름입니다.</param>
      <param name="literalValue">리터럴의 상수 값입니다.</param>
      <returns>정의된 필드입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.FullName">
      <summary>해당 열거형의 전체 경로를 반환합니다.</summary>
      <returns>읽기 전용입니다. 해당 열거형의 전체 경로입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>지정된 대로 이 클래스에 대해 정의된 public 또는 non-public 생성자를 나타내는 <see cref="T:System.Reflection.ConstructorInfo" /> 개체 배열을 반환합니다.</summary>
      <param name="bindingAttr">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>이 클래스에 대해 정의된 지정된 생성자를 나타내는 <see cref="T:System.Reflection.ConstructorInfo" /> 개체 배열을 반환합니다. 생성자가 정의되지 않은 경우 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
      <summary>해당 생성자에 대해 정의된 사용자 지정 특성을 모두 반환합니다.</summary>
      <param name="inherit">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</param>
      <returns>이 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 인스턴스가 나타내는 생성자의 모든 사용자 지정 특성을 나타내는 개체의 배열을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>지정된 형식으로 식별되는 사용자 지정 특성을 반환합니다.</summary>
      <param name="attributeType">사용자 지정 특성이 적용되는 <see langword="Type" /> 개체입니다.</param>
      <param name="inherit">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</param>
      <returns>
        <see cref="T:System.Type" />
        <paramref name="attributeType" />인 해당 생성자의 특성을 나타내는 개체의 배열을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetElementType">
      <summary>이 메서드를 호출하면 <see cref="T:System.NotSupportedException" />이 항상 throw됩니다.</summary>
      <returns>이 메서드는 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType">
      <summary>열거형 작성기가 정의될 때 설정된 현재 열거형의 내부 정수 형식을 반환합니다.</summary>
      <returns>내부 형식입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>지정된 이름의 이벤트를 반환합니다.</summary>
      <param name="name">가져올 이벤트의 이름입니다.</param>
      <param name="bindingAttr">이 호출의 특성입니다. 이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>지정된 이름의 형식으로 선언되거나 상속된 이벤트를 나타내는 <see cref="T:System.Reflection.EventInfo" /> 개체를 반환합니다. 일치하는 항목이 없으면 <see langword="null" />이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents">
      <summary>이 형식으로 선언되거나 상속된 공용 이벤트의 이벤트를 반환합니다.</summary>
      <returns>이 형식에 의해 선언되거나 상속되는 public 이벤트를 나타내는 <see cref="T:System.Reflection.EventInfo" /> 개체의 배열을 반환합니다. public 이벤트가 없는 경우 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>이 형식으로 선언되는 public 이벤트 및 public이 아닌 이벤트를 반환합니다.</summary>
      <param name="bindingAttr">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>이 형식으로 선언되거나 상속된 공용 및 비공용 이벤트를 나타내는 <see cref="T:System.Reflection.EventInfo" /> 개체의 배열을 반환합니다. 지정된 것처럼, 이벤트가 없으면 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>지정된 이름에 지정된 필드를 반환합니다.</summary>
      <param name="name">가져올 필드의 이름입니다.</param>
      <param name="bindingAttr">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>public 또는 non-public 한정자와 지정된 이름을 사용하여 이 형식에 의해 선언되거나 상속된 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" /> 개체를 반환합니다. 일치하는 개체가 없으면 null이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>이 형식으로 선언되는 public 필드 및 public이 아닌 필드를 반환합니다.</summary>
      <param name="bindingAttr">이것은 InvokeMethod, NonPublic 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" /> 개체 배열을 반환합니다. 필드가 없으면 지정된 대로 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
      <summary>지정한 정규화된 이름과 함께 이 형식에 의해 직접 또는 간접으로 구현된 인터페이스를 반환합니다.</summary>
      <param name="name">인터페이스의 이름입니다.</param>
      <param name="ignoreCase">
        <see langword="true" />이면 검색은 대/소문자를 구분합니다. <see langword="false" />이면 검색은 대/소문자를 구분하지 않습니다.</param>
      <returns>구현된 인터페이스를 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다. 이름이 일치하는 인터페이스를 찾을 수 없으면 null을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
      <summary>요청된 인터페이스에 대한 인터페이스 매핑을 반환합니다.</summary>
      <param name="interfaceType">인터페이스 매핑을 검색할 인터페이스 형식입니다.</param>
      <returns>요청된 인터페이스 매핑입니다.</returns>
      <exception cref="T:System.ArgumentException">형식에서 인터페이스를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
      <summary>이 클래스 및 이 클래스의 기본 클래스에서 구현된 모든 인터페이스의 배열을 반환합니다.</summary>
      <returns>구현된 인터페이스를 나타내는 <see cref="T:System.Type" /> 개체의 배열을 반환합니다. 정의된 것이 없으면 빈 배열이 반환됩니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>이 형식으로 선언되거나 상속되고, 지정된 이름, 형식 및 바인딩이 있는 모든 멤버를 반환합니다.</summary>
      <param name="name">멤버의 이름입니다.</param>
      <param name="type">반환될 멤버 형식입니다.</param>
      <param name="bindingAttr">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>
        <paramref name="nonPublic" />이 사용될 경우 이 형식에 대해 정의된 public 및 public이 아닌 멤버를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체의 배열을 반환하고, 사용되지 않을 경우 public 멤버만 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>이 형식으로 선언되거나 상속된 지정한 멤버를 반환합니다.</summary>
      <param name="bindingAttr">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>이 형식에 의해 선언되거나 상속되는 public 및 non-public 멤버를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체 배열을 반환합니다. 일치하는 멤버가 없으면 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>지정된 대로 이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 모든 메서드를 반환합니다.</summary>
      <param name="bindingAttr">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>
        <paramref name="nonPublic" />이 사용될 경우 이 형식에 대해 정의된 public 및 public이 아닌 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체의 배열을 반환하고, 그렇지 않은 경우 public 메서드만 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>이 형식으로 선언되는 지정한 중첩 형식을 반환합니다.</summary>
      <param name="name">가져올 중첩 형식의 이름이 포함된 <see cref="T:System.String" />입니다.</param>
      <param name="bindingAttr">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.
또는
public 메서드에 대해 대소문자 구분 검색을 수행하는 경우 0입니다.</param>
      <returns>지정된 요구 사항과 일치하는 중첩 형식을 나타내는 <see cref="T:System.Type" /> 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 중첩된 형식을 반환합니다.</summary>
      <param name="bindingAttr">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>지정된 바인딩 제약 조건과 일치하는 현재 <see cref="T:System.Type" /> 내에 중첩된 모든 형식을 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.
현재 <see cref="T:System.Type" /> 내에 중첩된 형식이 없거나 중첩된 형식 중 해당 바인딩 제약 조건과 일치하는 형식이 없을 경우 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>지정된 대로 이 형식에 의해 선언되거나 상속되는 public 및 non-public 속성을 모두 반환합니다.</summary>
      <param name="bindingAttr">이 호출의 특성입니다. 이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>
        <paramref name="nonPublic" />이 사용될 경우 이 형식에 대해 정의된 public 및 non-public 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" /> 개체의 배열을 반환하고, 사용되지 않을 경우 public 속성만 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GUID">
      <summary>해당 열거형의 GUID를 반환합니다.</summary>
      <returns>읽기 전용입니다. 해당 열거형의 GUID입니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>지정된 멤버를 호출합니다. 호출해야 할 메서드에 액세스할 수 있어야 하며 이 메서드가 지정된 바인더 및 호출 특성의 제약 조건 하에서 지정된 인수 목록과 가장 구체적으로 일치하는 항목을 제공해야 합니다.</summary>
      <param name="name">호출할 멤버의 이름입니다. 이 항목은 생성자, 메서드, 속성 또는 필드일 수 있습니다. 적합한 호출 특성을 지정해야 합니다. 빈 문자열을 멤버의 이름으로 전달하여 클래스의 기본 멤버를 호출할 수 있습니다.</param>
      <param name="invokeAttr">호출 특성입니다. 이 항목은 <see langword="BindingFlags" />의 비트 플래그여야 합니다.</param>
      <param name="binder">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see langword="MemberInfo" /> 개체의 검색을 가능하게 하는 개체입니다. 바인더가 <see langword="null" />이면 기본 바인더가 사용됩니다. <see cref="T:System.Reflection.Binder" />을 참조하세요.</param>
      <param name="target">지정한 멤버를 호출할 개체입니다. 멤버가 정적이면 이 매개 변수가 무시됩니다.</param>
      <param name="args">인수 목록입니다. 이것은 호출되는 멤버의 매개 변수 개수, 순서 및 형식이 포함된 개체의 배열입니다. 매개 변수가 없으면 이 값이 null이어야 합니다.</param>
      <param name="modifiers">호출할 멤버의 인수와 연결된 특성을 나타내는 요소를 가진 <paramref name="args" />와 길이가 동일한 배열입니다. 메타데이터에 있는 매개 변수에 특성이 연결되어 있습니다. 이러한 항목은 다양한 상호 운용성 서비스에 사용됩니다. 이에 대한 자세한 내용은 메타데이터 사양을 참조하십시오.</param>
      <param name="culture">형식의 강제 변환을 제어하는 데 사용되는 <see langword="CultureInfo" />의 인스턴스입니다. 이 매개 변수가 null이면 현재 스레드에 대한 <see langword="CultureInfo" />가 사용됩니다. 예를 들어, 각 문화권에서 숫자 1000은 다르게 표현되므로 숫자 1000을 나타내는 String을 Double 값으로 변환하는 데 해당 매개 변수가 필요합니다.</param>
      <param name="namedParameters">
        <paramref name="namedParameters" /> 배열의 각 매개 변수는 <paramref name="args" /> 배열의 해당 요소에 있는 값을 가져옵니다. <paramref name="args" />의 길이가 <paramref name="namedParameters" />의 길이보다 크면 남은 인수 값이 순서대로 전달됩니다.</param>
      <returns>호출된 멤버의 반환 값을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType">
      <summary>이 개체가 생성된 제네릭 형식을 나타내는지를 지정하는 값을 가져옵니다.</summary>
      <returns>이 개체가 생성된 제네릭 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>지정된 사용자 지정 특성 형식이 정의되어 있는지 확인합니다.</summary>
      <param name="attributeType">사용자 지정 특성이 적용되는 <see langword="Type" /> 개체입니다.</param>
      <param name="inherit">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</param>
      <returns>이 멤버에 <paramref name="attributeType" /> 인스턴스가 하나 이상 정의되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
      <summary>하한이 0인 현재 형식의 1차원 배열을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns>하한이 0인 현재 형식의 1차원 배열을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
      <summary>지정된 차수의 현재 형식 배열을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <param name="rank">배열의 차수입니다. 이 수는 32보다 작거나 같아야 합니다.</param>
      <returns>지정된 차수의 현재 형식 배열을 나타내는 개체입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" />가 1보다 작습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
      <summary>ref 매개 변수(Visual Basic의 경우 ByRef 매개 변수)로 전달될 때 현재 형식을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns>ref 매개 변수(Visual Basic의 경우 ByRef 매개 변수)로 전달될 때 현재 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
      <summary>현재 형식에 대한 포인터를 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns>현재 형식에 대한 포인터를 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Module">
      <summary>이 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 정의가 들어 있는 동적 모듈을 검색합니다.</summary>
      <returns>읽기 전용입니다. 이 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 정의를 포함하는 동적 모듈입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Name">
      <summary>해당 열거형의 이름을 반환합니다.</summary>
      <returns>읽기 전용입니다. 해당 열거형의 이름입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Namespace">
      <summary>해당 열거형의 네임스페이스를 반환합니다.</summary>
      <returns>읽기 전용입니다. 해당 열거형의 네임스페이스입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
      <summary>이 <see cref="T:System.Reflection.Emit.EnumBuilder" />를 얻는 데 사용된 형식을 반환합니다.</summary>
      <returns>읽기 전용입니다. 이 <see cref="T:System.Reflection.Emit.EnumBuilder" />를 얻는 데 사용된 형식입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>지정된 사용자 지정 특성 blob을 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
      <summary>해당 열거형에 대한 내부 핸들을 검색합니다.</summary>
      <returns>읽기 전용입니다. 해당 열거형에 대한 내부 핸들입니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 이 속성이 지원되지 않는 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
      <summary>해당 열거형에 대한 내부 필드를 반환합니다.</summary>
      <returns>읽기 전용입니다. 해당 열거형에 대한 내부 필드입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
      <summary>해당 열거형에 대한 내부 시스템 형식을 반환합니다.</summary>
      <returns>읽기 전용입니다. 내부 시스템 형식을 반환합니다.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EventBuilder">
      <summary>클래스에 대한 이벤트를 정의합니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>이 이벤트와 관련된 "다른" 메서드 중 하나를 추가합니다. "다른" 메서드는 이벤트와 관련된 "on" 및 "raise" 메서드 이외의 메서드입니다. 이 함수를 여러 번 호출하여 "다른" 메서드를 원하는 만큼 추가할 수 있습니다.</summary>
      <param name="mdBuilder">다른 메서드를 나타내는 <see langword="MethodBuilder" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>이 이벤트를 등록하는 데 사용될 메서드를 설정합니다.</summary>
      <param name="mdBuilder">이 이벤트를 등록하는 데 사용될 메서드를 나타내는 <see langword="MethodBuilder" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>지정된 사용자 지정 특성 BLOB를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder">사용자 지정 특성을 설명하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>이 이벤트에 발생시키는 데 사용될 메서드를 설정합니다.</summary>
      <param name="mdBuilder">이 이벤트를 발생시키는 데 사용될 메서드를 나타내는 <see langword="MethodBuilder" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>이 이벤트를 등록 취소하는 데 사용될 메서드를 설정합니다.</summary>
      <param name="mdBuilder">이 이벤트를 등록 취소하는 데 사용될 메서드를 나타내는 <see langword="MethodBuilder" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="T:System.Reflection.Emit.FieldBuilder">
      <summary>필드를 정의하고 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Attributes">
      <summary>해당 필드의 특성을 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>해당 필드의 특성입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.DeclaringType">
      <summary>해당 필드를 선언하는 형식의 <see cref="T:System.Type" /> 개체에 대한 참조를 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>해당 필드를 선언하는 형식의 <see cref="T:System.Type" /> 개체에 대한 참조입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldHandle">
      <summary>해당 필드에 대한 내부 메타데이터 핸들을 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>해당 필드에 대한 내부 메타데이터 핸들입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldType">
      <summary>해당 필드의 형식을 나타내는 <see cref="T:System.Type" /> 개체를 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>해당 필드의 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Boolean)">
      <summary>해당 필드에 대해 정의된 사용자 지정 특성을 모두 반환합니다.</summary>
      <param name="inherit">기본 클래스에서 사용자 지정 특성을 상속받는 것을 제어합니다.</param>
      <returns>해당 <see cref="T:System.Object" /> 인스턴스가 나타내는 생성자의 사용자 지정 특성을 모두 나타내는 <see cref="T:System.Reflection.Emit.FieldBuilder" /> 형식 배열을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>지정된 형식으로 식별되는 해당 필드에 대해 정의된 사용자 지정 특성을 모두 반환합니다.</summary>
      <param name="attributeType">사용자 지정 특성 형식입니다.</param>
      <param name="inherit">기본 클래스에서 사용자 지정 특성을 상속받는 것을 제어합니다.</param>
      <returns>해당 <see cref="T:System.Object" /> 인스턴스가 나타내는 생성자의 사용자 지정 특성을 모두 나타내는 <see cref="T:System.Reflection.Emit.FieldBuilder" /> 형식 배열을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)">
      <summary>지정된 개체에서 지원하는 필드 값을 검색합니다.</summary>
      <param name="obj">필드에 액세스할 개체입니다.</param>
      <returns>해당 인스턴스에서 리플렉션된 필드 값이 들어 있는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>지정된 형식이 있는 특성이 필드에 정의되어 있는지 여부를 나타냅니다.</summary>
      <param name="attributeType">특성의 형식입니다.</param>
      <param name="inherit">기본 클래스에서 사용자 지정 특성을 상속받는 것을 제어합니다.</param>
      <returns>해당 필드에 <paramref name="attributeType" /> 인스턴스가 하나 이상 정의되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />을 사용하면 필드를 검색하고 반환된 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />에서 <see cref="T:System.Reflection.FieldInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Module">
      <summary>이 필드를 포함하는 형식이 정의될 모듈을 가져옵니다.</summary>
      <returns>이 필드가 정의될 동적 모듈을 나타내는 <see cref="T:System.Reflection.Module" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Name">
      <summary>해당 필드의 이름을 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>해당 필드의 이름이 들어 있는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.ReflectedType">
      <summary>해당 개체를 얻어온 <see cref="T:System.Type" /> 개체에 대한 참조를 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>해당 인스턴스를 가져온 <see cref="T:System.Type" /> 개체에 대한 참조입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)">
      <summary>해당 필드의 기본값을 설정합니다.</summary>
      <param name="defaultValue">해당 필드에 대한 기본값입니다.</param>
      <exception cref="T:System.InvalidOperationException">포함하는 형식을 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만들었습니다.</exception>
      <exception cref="T:System.ArgumentException">필드가 지원되는 형식 중 하나가 아닌 경우
또는
<paramref name="defaultValue" />의 형식이 필드의 형식과 일치하지 않는 경우
또는
필드가 <see cref="T:System.Object" /> 형식 또는 다른 참조 형식이고, <paramref name="defaultValue" />가 <see langword="null" />이 아니고, 값을 참조 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>지정된 사용자 지정 특성 blob을 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">해당 필드의 부모 형식이 완성된 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">해당 필드의 부모 형식이 완성된 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)">
      <summary>필드 레이아웃을 지정합니다.</summary>
      <param name="iOffset">해당 필드가 들어 있는 형식 내의 필드 오프셋입니다.</param>
      <exception cref="T:System.InvalidOperationException">포함하는 형식을 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만들었습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="iOffset" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>지정된 개체에서 지원하는 필드 값을 설정합니다.</summary>
      <param name="obj">필드에 액세스할 개체입니다.</param>
      <param name="val">필드에 할당할 값입니다.</param>
      <param name="invokeAttr">원하는 바인딩 형식을 지정하는 IBinder.CreateInstance, IBinder.ExactBinding 같은 <see langword="IBinder" /> 멤버입니다.</param>
      <param name="binder">리플렉션을 사용하여 바인딩, 인수 형식의 강제 변환, 그리고 멤버 호출을 가능하게 하는 속성 집합입니다. 바인더가 null인 경우 IBinder.DefaultBinding이 사용됩니다.</param>
      <param name="culture">특정 문화권의 소프트웨어 기본 설정입니다.</param>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="T:System.Reflection.Emit.GenericTypeParameterBuilder">
      <summary>동적으로 정의된 제네릭 형식 및 메서드에 대한 제네릭 형식 매개 변수를 정의하고 만듭니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
      <summary>현재 형식 매개 변수가 속하는 제네릭 형식 정의가 포함된 동적 어셈블리를 나타내는 <see cref="T:System.Reflection.Assembly" /> 개체를 가져옵니다.</summary>
      <returns>현재 형식 매개 변수가 속하는 제네릭 형식 정의가 포함된 동적 어셈블리를 나타내는 <see cref="T:System.Reflection.Assembly" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
      <summary>모든 경우에 <see langword="null" />을 가져옵니다.</summary>
      <returns>모든 경우에 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
      <summary>현재 제네릭 형식 매개 변수의 기본 형식 제약 조건을 가져옵니다.</summary>
      <returns>제네릭 형식 매개 변수의 기본 형식 제약 조건을 나타내는 <see cref="T:System.Type" /> 개체이거나, 형식 매개 변수에 기본 형식 제약 조건이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
      <summary>모든 경우에 <see langword="true" />을 가져옵니다.</summary>
      <returns>모든 경우에 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
      <summary>현재 <see cref="T:System.Reflection.MethodInfo" />가 제네릭 메서드의 형식 매개 변수를 나타내는 경우 선언 메서드를 나타내는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />를 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.Reflection.MethodInfo" />가 제네릭 메서드의 형식 매개 변수를 나타내는 경우 선언 메서드를 나타내는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
      <summary>제네릭 형식 매개 변수가 속하는 제네릭 형식 정의 또는 제네릭 메서드 정의를 가져옵니다.</summary>
      <returns>형식 매개 변수가 제네릭 형식에 속하는 경우 해당 제네릭 형식을 나타내는 <see cref="T:System.Type" /> 개체이고, 형식 매개 변수가 제네릭 메서드에 속하는 경우 해당 제네릭 메서드가 선언된 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
      <summary>지정된 개체가 <see langword="EventToken" />의 인스턴스이며 현재 인스턴스와 같은지 테스트합니다.</summary>
      <param name="o">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>
        <paramref name="o" />가 <see langword="true" />의 인스턴스이고 현재 인스턴스와 같으면 <see langword="EventToken" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
      <summary>모든 경우에 <see langword="null" />을 가져옵니다.</summary>
      <returns>모든 경우에 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes">
      <summary>현재 제네릭 형식 매개 변수의 공 분산과 특수 제약 조건을 설명하는 <see cref="T:System.Reflection.GenericParameterAttributes" /> 플래그의 조합을 가져옵니다.</summary>
      <returns>현재 제네릭 형식 매개 변수의 공 분산 및 특수 제약 조건을 설명하는 값의 비트 조합입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
      <summary>형식 매개 변수가 선언된 제네릭 형식 또는 메서드의 형식 매개 변수 목록에서 해당 형식 매개 변수가 있는 위치를 가져옵니다.</summary>
      <returns>형식 매개 변수가 선언된 제네릭 형식 또는 메서드의 형식 매개 변수 목록에서 해당 형식 매개 변수가 있는 위치입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="bindingAttr">지원되지 않습니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="inherit">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="attributeType">검색할 특성의 형식입니다. 이 형식에 할당할 수 있는 특성만 반환됩니다.</param>
      <param name="inherit">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
      <summary>모든 경우에 <see cref="T:System.NotSupportedException" /> 을(를) throw합니다.</summary>
      <returns>현재 배열 형식, 포인터 형식 또는 <see langword="ByRef" /> 형식에서 참조하는 형식이거나, 현재 형식이 배열 또는 포인터 형식이 아니며 참조로 전달되지 않는 경우에는 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="name">지원되지 않습니다.</param>
      <param name="bindingAttr">지원되지 않습니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="bindingAttr">지원되지 않습니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="name">지원되지 않습니다.</param>
      <param name="bindingAttr">지원되지 않습니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="bindingAttr">지원되지 않습니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
      <summary>제네릭 형식 매개 변수에는 유효하지 않습니다.</summary>
      <returns>제네릭 형식 매개 변수에는 유효하지 않습니다.</returns>
      <exception cref="T:System.InvalidOperationException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
      <summary>제네릭 형식 매개 변수에는 유효하지 않습니다.</summary>
      <returns>제네릭 형식 매개 변수에는 유효하지 않습니다.</returns>
      <exception cref="T:System.InvalidOperationException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
      <summary>현재 인스턴스에 대한 32비트 정수 해시 코드를 반환합니다.</summary>
      <returns>32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="name">인터페이스의 이름입니다.</param>
      <param name="ignoreCase">대/소문자를 구분하지 않고 검색하려면 <see langword="true" />이고, 대/소문자를 구분하여 검색하려면 <see langword="false" />입니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="interfaceType">매핑을 검색할 인터페이스 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="name">지원되지 않습니다.</param>
      <param name="type">지원되지 않습니다.</param>
      <param name="bindingAttr">지원되지 않습니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="bindingAttr">지원되지 않습니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="bindingAttr">지원되지 않습니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="name">지원되지 않습니다.</param>
      <param name="bindingAttr">지원되지 않습니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="bindingAttr">지원되지 않습니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="bindingAttr">지원되지 않습니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="name">지원되지 않습니다.</param>
      <param name="invokeAttr">지원되지 않습니다.</param>
      <param name="binder">지원되지 않습니다.</param>
      <param name="target">지원되지 않습니다.</param>
      <param name="args">지원되지 않습니다.</param>
      <param name="modifiers">지원되지 않습니다.</param>
      <param name="culture">지원되지 않습니다.</param>
      <param name="namedParameters">지원되지 않습니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
      <summary>모든 경우에 <see cref="T:System.NotSupportedException" /> 예외를 throw합니다.</summary>
      <param name="c">테스트할 개체입니다.</param>
      <returns>모든 경우에 <see cref="T:System.NotSupportedException" /> 예외를 throw합니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType">
      <summary>이 개체가 생성된 제네릭 형식을 나타내는지를 지정하는 값을 가져옵니다.</summary>
      <returns>이 개체가 생성된 제네릭 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="attributeType">지원되지 않습니다.</param>
      <param name="inherit">지원되지 않습니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
      <summary>모든 경우에 <see langword="true" />을 가져옵니다.</summary>
      <returns>모든 경우에 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
      <summary>모든 경우에 <see langword="false" />를 반환합니다.</summary>
      <returns>모든 경우에 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
      <summary>모든 경우에 <see langword="false" />을 가져옵니다.</summary>
      <returns>모든 경우에 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="c">지원되지 않습니다.</param>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
      <summary>요소 형식이 제네릭 형식 매개 변수인 1차원 배열의 형식을 반환합니다.</summary>
      <returns>요소 형식이 제네릭 형식 매개 변수인 1차원 배열의 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
      <summary>요소 형식이 제네릭 형식 매개 변수이고 지정된 차수를 갖는 배열의 형식을 반환합니다.</summary>
      <param name="rank">배열의 차수입니다.</param>
      <returns>요소 형식이 제네릭 형식 매개 변수이고 지정된 차수를 갖는 배열의 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" />가 유효한 차수가 아닌 경우. 예를 들어, 값이 1보다 작은 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
      <summary>참조 매개 변수로 전달될 때 현재 제네릭 형식 매개 변수를 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns>참조 매개 변수로 전달될 때 현재 제네릭 형식 매개 변수를 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
      <summary>완성되지 않은 제네릭 형식 매개 변수에는 유효하지 않습니다.</summary>
      <param name="typeArguments">형식 인수의 배열입니다.</param>
      <returns>이 메서드는 완성되지 않은 제네릭 형식 매개 변수에는 유효하지 않습니다.</returns>
      <exception cref="T:System.InvalidOperationException">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
      <summary>현재 제네릭 형식 매개 변수에 대한 포인터를 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns>현재 제네릭 형식 매개 변수에 대한 포인터를 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
      <summary>제네릭 형식 매개 변수가 들어 있는 동적 모듈을 가져옵니다.</summary>
      <returns>제네릭 형식 매개 변수가 들어 있는 동적 모듈을 나타내는 <see cref="T:System.Reflection.Module" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
      <summary>제네릭 형식 매개 변수의 이름을 가져옵니다.</summary>
      <returns>제네릭 형식 매개 변수의 이름입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
      <summary>모든 경우에 <see langword="null" />을 가져옵니다.</summary>
      <returns>모든 경우에 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
      <summary>
        <see cref="T:System.Type" />를 얻는 데 사용된 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Type" />를 얻는 데 사용된 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
      <summary>형식 매개 변수를 대체하기 위해 형식이 상속해야 하는 기본 형식을 설정합니다.</summary>
      <param name="baseTypeConstraint">형식 매개 변수를 대체할 모든 형식이 상속해야 하는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>지정된 사용자 지정 특성 blob을 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" />가 <see langword="null" />인 경우
또는
<paramref name="binaryAttribute" />가 null 참조인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
      <summary>매개 변수 없는 생성자 제약 조건과 같은 제네릭 매개 변수의 가변성 특성 및 특수 제약 조건을 설정합니다.</summary>
      <param name="genericParameterAttributes">제네릭 형식 매개 변수의 가변성 특성 및 특수 제약 조건을 나타내는 <see cref="T:System.Reflection.GenericParameterAttributes" /> 값의 비트 조합입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
      <summary>형식 매개 변수를 대체하기 위해 형식이 구현해야 하는 인터페이스를 설정합니다.</summary>
      <param name="interfaceConstraints">형식 매개 변수를 대체하기 위해 형식이 구현해야 하는 인터페이스를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
      <summary>현재 제네릭 형식 매개 변수의 문자열 표현을 반환합니다.</summary>
      <returns>제네릭 형식 매개 변수의 이름이 포함된 문자열입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
      <summary>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <returns>완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
      <summary>현재 제네릭 형식 매개 변수를 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Reflection.Emit.MethodBuilder">
      <summary>동적 클래스의 메서드(또는 생성자)를 정의하고 나타냅니다.</summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Attributes">
      <summary>이 메서드에 대한 특성을 검색합니다.</summary>
      <returns>읽기 전용입니다. 이 메서드에 대한 <see langword="MethodAttributes" />를 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
      <summary>메서드 호출 규칙을 반환합니다.</summary>
      <returns>읽기 전용입니다. 메서드의 호출 규칙입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
      <summary>이 형식에는 지원되지 않습니다.</summary>
      <returns>지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">호출된 메서드가 기본 클래스에서 지원되지 않습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
      <summary>이 메서드를 선언한 형식을 반환합니다.</summary>
      <returns>읽기 전용입니다. 이 메서드를 선언한 형식입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
      <summary>현재 메서드의 제네릭 형식 매개 변수 개수와 매개 변수 이름을 설정하고, 매개 변수의 제약 조건을 정의하는 데 사용할 수 있는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체의 배열을 반환합니다.</summary>
      <param name="names">제네릭 형식 매개 변수의 이름을 나타내는 문자열의 배열입니다.</param>
      <returns>제네릭 메서드의 형식 매개 변수를 나타내는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체의 배열입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 메서드에 대해 제네릭 형식 매개 변수가 이미 정의되어 있는 경우
또는
메서드가 이미 완료된 경우
또는
현재 메서드에 대해 <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> 메서드가 호출된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="names" />가 <see langword="null" />인 경우
또는
<paramref name="names" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" />가 빈 배열인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>이 메서드의 매개 변수 특성 및 이름 또는 이 메서드의 반환 값 특성 및 이름을 설정합니다. 사용자 지정 특성을 적용하는 데 사용할 수 있는 ParameterBuilder를 반환합니다.</summary>
      <param name="position">매개 변수 목록에서 매개 변수의 위치입니다. 매개 변수 중 첫 번째 매개 변수의 경우 인덱스가 1부터 시작하며, 숫자 0은 메서드의 반환 값을 나타냅니다.</param>
      <param name="attributes">매개 변수의 매개 변수 특성입니다.</param>
      <param name="strParamName">매개 변수의 이름입니다. 이름이 null 문자열일 수 있습니다.</param>
      <returns>이 메서드의 매개 변수 또는 이 메서드의 반환 값을 나타내는 <see langword="ParameterBuilder" /> 개체를 반환합니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">메서드에 매개 변수가 없습니다.
또는
<paramref name="position" />가 0보다 작은 경우
또는
<paramref name="position" />이 메서드의 매개 변수 수보다 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">포함하는 형식은 이전에 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만든 것입니다.
또는
현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
      <summary>지정된 개체가 이 인스턴스와 같은지 여부를 결정합니다.</summary>
      <param name="obj">이 <see langword="MethodBuilder" /> 인스턴스와 비교할 개체입니다.</param>
      <returns>
        <paramref name="obj" />가 <see langword="true" />의 인스턴스이고 해당 개체와 같으면 <see langword="MethodBuilder" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
      <summary>메서드에 대한 기본 구현을 반환합니다.</summary>
      <returns>이 메서드의 기본 구현입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
      <summary>이 메서드에 정의된 모든 사용자 지정 특성을 반환합니다.</summary>
      <param name="inherit">이 멤버의 상속 체인을 검색하여 속성을 찾을 것인지 여부를 지정합니다.</param>
      <returns>이 메서드의 사용자 지정 특성을 나타내는 개체 배열을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />에서 <see cref="T:System.Reflection.MethodInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>지정된 형식으로 식별되는 사용자 지정 특성을 반환합니다.</summary>
      <param name="attributeType">사용자 지정 특성 형식입니다.</param>
      <param name="inherit">이 멤버의 상속 체인을 검색하여 속성을 찾을 것인지 여부를 지정합니다.</param>
      <returns>
        <paramref name="attributeType" /> 형식인 이 메서드의 특성을 나타내는 개체의 배열을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />에서 <see cref="T:System.Reflection.MethodInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
      <summary>제네릭 메서드인 경우 메서드의 형식 매개 변수를 나타내는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체의 배열을 반환합니다.</summary>
      <returns>제네릭 메서드인 경우 형식 매개 변수를 나타내는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체의 배열이고, 제네릭 메서드가 아닌 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
      <summary>이 메서드를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Reflection.Emit.MethodBuilder" />의 현재 인스턴스입니다.</returns>
      <exception cref="T:System.InvalidOperationException">현재 메서드가 제네릭 메서드가 아닌 경우. 즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성이 <see langword="false" />를 반환합니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
      <summary>이 메서드의 해시 코드를 가져옵니다.</summary>
      <returns>이 메서드의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
      <summary>기본 MSIL(Microsoft Intermediate Language) 스트림 크기인 64바이트로 이 메서드에 대한 <see langword="ILGenerator" />를 반환합니다.</summary>
      <returns>이 메서드에 대한 <see langword="ILGenerator" /> 개체를 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">메서드의 <see cref="T:System.Reflection.MethodAttributes" /> 또는 <see cref="T:System.Reflection.MethodImplAttributes" /> 플래그 때문에 메서드에 본문이 없어야 하는 경우(예: 메서드에 <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> 플래그가 있는 경우)
또는
메서드가 제네릭 메서드이지만 제네릭 메서드 정의가 아닌 경우. 즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성이 <see langword="true" />로 설정되어 있지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />로 설정되어 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
      <summary>지정된 MSIL(Microsoft Intermediate Language) 스트림 크기로 이 메서드에 대한 <see langword="ILGenerator" />를 반환합니다.</summary>
      <param name="size">MSIL 스트림의 크기(바이트)입니다.</param>
      <returns>이 메서드에 대한 <see langword="ILGenerator" /> 개체를 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">메서드의 <see cref="T:System.Reflection.MethodAttributes" /> 또는 <see cref="T:System.Reflection.MethodImplAttributes" /> 플래그 때문에 메서드에 본문이 없어야 하는 경우(예: 메서드에 <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> 플래그가 있는 경우)
또는
메서드가 제네릭 메서드이지만 제네릭 메서드 정의가 아닌 경우. 즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성이 <see langword="true" />로 설정되어 있지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />로 설정되어 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
      <summary>메서드에 대한 구현 플래그를 반환합니다.</summary>
      <returns>메서드에 대한 구현 플래그를 반환합니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetParameters">
      <summary>이 메서드의 매개 변수를 반환합니다.</summary>
      <returns>메서드의 매개 변수를 나타내는 <see langword="ParameterInfo" /> 개체 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see langword="GetParameters" />에서 <see cref="T:System.Reflection.MethodInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.InitLocals">
      <summary>이 메서드의 지역 변수를 0으로 초기화하는지 여부를 지정하는 부울 값을 가져오거나 설정합니다. 이 속성의 기본값은 <see langword="true" />입니다.</summary>
      <returns>이 메서드의 지역 변수를 0으로 초기화하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다. 가져오기 또는 설정에 모두 해당합니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>지정된 바인더의 제약 조건 하에서, 해당 개체의 인스턴스에 의해 리플렉션된 메서드를 동적으로 호출하여, 지정된 매개 변수를 전달해줍니다.</summary>
      <param name="obj">지정된 메서드를 호출할 개체입니다. 정적 메서드이면 매개 변수가 무시됩니다.</param>
      <param name="invokeAttr">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <param name="binder">리플렉션을 통해 바인딩 인수 형식의 강제 변환, 멤버 호출 및 MemberInfo 개체의 검색을 가능하게 하는 개체입니다. 바인더가 <see langword="null" />이면 기본 바인더가 사용됩니다. 자세한 내용은 <see cref="T:System.Reflection.Binder" />을 참조하십시오.</param>
      <param name="parameters">인수 목록입니다. 이것은 호출된 메서드의 매개 변수와 같은 개수, 순서 및 형식의 인수 배열입니다. 매개 변수가 없는 경우에는 <see langword="null" />이어야 합니다.</param>
      <param name="culture">형식의 강제 변환을 제어하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" />의 인스턴스입니다. 이 매개 변수가 null이면 현재 스레드에 대한 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다. 예를 들면 1000은 각 문화권마다 다르게 표현되므로 1000을 나타내는 <see cref="T:System.String" />을 <see cref="T:System.Double" /> 값으로 변환하기 위해 필요합니다.</param>
      <returns>호출된 메서드의 반환 값을 포함하는 개체를 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />에서 <see cref="T:System.Reflection.MethodInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod" />
    <member name="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>지정된 사용자 지정 특성 형식이 정의되어 있는지 확인합니다.</summary>
      <param name="attributeType">사용자 지정 특성 형식입니다.</param>
      <param name="inherit">이 멤버의 상속 체인을 검색하여 속성을 찾을 것인지 여부를 지정합니다.</param>
      <returns>지정된 사용자 지정 특성 형식이 정의되어 있으면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />에서 <see cref="T:System.Reflection.MethodInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
      <summary>메서드가 제네릭 메서드인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>메서드가 제네릭이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
      <summary>현재 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 개체가 제네릭 메서드 정의를 나타내는지 여부를 표시하는 값을 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 개체가 제네릭 메서드 정의를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical">
      <summary>모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</summary>
      <returns>모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우 이 속성은 동적 어셈블리에서 지원되지 않습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical">
      <summary>모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</summary>
      <returns>모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우 이 속성은 동적 어셈블리에서 지원되지 않습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent">
      <summary>모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</summary>
      <returns>모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</returns>
      <exception cref="T:System.NotSupportedException">모든 경우 이 속성은 동적 어셈블리에서 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
      <summary>지정된 제네릭 형식 인수를 사용하여 현재 제네릭 메서드 정의로 생성된 제네릭 메서드를 반환합니다.</summary>
      <param name="typeArguments">제네릭 메서드의 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</param>
      <returns>지정된 제네릭 형식 인수를 사용하여 현재 제네릭 메서드 정의로 생성된 제네릭 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
      <summary>메서드에 대한 내부 핸들을 검색합니다. 내부 메타데이터 핸들에 액세스하려면 이 핸들을 사용합니다.</summary>
      <returns>읽기 전용입니다. 메서드에 대한 내부 핸들입니다. 내부 메타데이터 핸들에 액세스하려면 이 핸들을 사용합니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see cref="P:System.Reflection.MethodBase.MethodHandle" />에서 <see cref="T:System.Reflection.MethodInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Module">
      <summary>현재 메서드가 정의되는 모듈을 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.Reflection.Module" />가 나타내는 멤버가 정의되는 <see cref="T:System.Reflection.MemberInfo" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Name">
      <summary>이 메서드의 이름을 검색합니다.</summary>
      <returns>읽기 전용입니다. 해당 메서드의 단순한 이름이 포함된 문자열을 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
      <summary>이 개체를 얻은 리플렉션에서 사용된 클래스를 검색합니다.</summary>
      <returns>읽기 전용입니다. 이 메서드를 얻는 데 사용된 형식입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
      <summary>메서드의 반환 형식에 대한 정보(예: 반환 형식에 사용자 지정 한정자가 포함되는지 여부)가 포함된 <see cref="T:System.Reflection.ParameterInfo" /> 개체를 가져옵니다.</summary>
      <returns>반환 형식에 대한 정보가 포함된 <see cref="T:System.Reflection.ParameterInfo" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">선언하는 형식이 만들어지지 않은 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnType">
      <summary>이 <see cref="T:System.Reflection.Emit.MethodBuilder" />가 나타내는 메서드의 반환 형식을 가져옵니다.</summary>
      <returns>메서드의 반환 형식입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
      <summary>메서드 반환 형식의 사용자 지정 특성을 반환합니다.</summary>
      <returns>읽기 전용입니다. 메서드 반환 형식의 사용자 지정 특성입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>지정된 사용자 지정 특성 blob을 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder">사용자 지정 특성을 설명하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary>이 메서드에 대한 구현 플래그를 설정합니다.</summary>
      <param name="attributes">설정할 구현 플래그입니다.</param>
      <exception cref="T:System.InvalidOperationException">포함하는 형식은 이전에 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만든 것입니다.
또는
현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
      <summary>메서드의 매개 변수 개수와 형식을 설정합니다.</summary>
      <param name="parameterTypes">매개 변수 형식을 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</param>
      <exception cref="T:System.InvalidOperationException">현재 메서드가 제네릭 메서드이지만 제네릭 메서드 정의가 아닌 경우. 즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성이 <see langword="true" />로 설정되어 있지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />로 설정되어 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
      <summary>메서드의 반환 형식을 설정합니다.</summary>
      <param name="returnType">메서드의 반환 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</param>
      <exception cref="T:System.InvalidOperationException">현재 메서드가 제네릭 메서드이지만 제네릭 메서드 정의가 아닌 경우. 즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성이 <see langword="true" />로 설정되어 있지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />로 설정되어 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>반환 형식, 매개 변수 형식, 반환 형식과 매개 변수 형식의 필수적 및 선택적 사용자 지정 한정자가 포함된 메서드 시그니처를 설정합니다.</summary>
      <param name="returnType">메서드의 반환 형식입니다.</param>
      <param name="returnTypeRequiredCustomModifiers">메서드의 반환 형식에 대한 필수 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 필수 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="returnTypeOptionalCustomModifiers">메서드의 반환 형식에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 선택적 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypes">메서드의 매개 변수 형식입니다.</param>
      <param name="parameterTypeRequiredCustomModifiers">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수에 필요한 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypeOptionalCustomModifiers">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수의 선택적 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <exception cref="T:System.InvalidOperationException">현재 메서드가 제네릭 메서드이지만 제네릭 메서드 정의가 아닌 경우. 즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성이 <see langword="true" />로 설정되어 있지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />로 설정되어 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.ToString">
      <summary>이 <see langword="MethodBuilder" /> 인스턴스를 문자열로 반환합니다.</summary>
      <returns>현재 MSIL(Microsoft intermediate language) 스트림이 다음에 오도록 이 메서드의 이름, 특성, 메서드 시그니처, 예외 및 지역 시그니처를 포함하는 문자열을 반환합니다.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ModuleBuilder">
      <summary>동적 어셈블리의 모듈을 정의하고 나타냅니다.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Assembly">
      <summary>이 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 인스턴스를 정의한 동적 어셈블리를 가져옵니다.</summary>
      <returns>현재 동적 모듈을 정의한 동적 어셈블리입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions">
      <summary>이 동적 모듈에 대한 전역 함수 정의 및 전역 데이터 정의를 완성합니다.</summary>
      <exception cref="T:System.InvalidOperationException">이 메서드가 이미 호출된 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>지정된 형식의 단일 비정적 필드인 <paramref name="value__" />가 들어 있는 값 형식으로 열거형 형식을 정의합니다.</summary>
      <param name="name">열거형 형식의 전체 경로입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="visibility">열거형에 대한 형식 특성이며 <see cref="F:System.Reflection.TypeAttributes.VisibilityMask" />에 의해 정의되는 비트는 모두 특성입니다.</param>
      <param name="underlyingType">열거형에 대한 내부 형식입니다. 기본 제공 정수 형식이어야 합니다.</param>
      <returns>정의된 열거형입니다.</returns>
      <exception cref="T:System.ArgumentException">표시 여부 특성이 아닌 다른 특성이 제공된 경우
또는
이 모듈의 부모 어셈블리에 지정된 이름의 열거형이 이미 있는 경우
또는
표시 특성이 열거형의 범위와 일치하지 않는 경우. 예를 들어 <paramref name="visibility" />가 <see cref="F:System.Reflection.TypeAttributes.NestedPublic" />으로 지정되었지만 열거형이 중첩 형식이 아닌 경우가 여기에 해당합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>이름, 특성, 호출 규칙, 반환 형식 및 매개 변수 형식을 지정하여 전역 메서드를 정의합니다.</summary>
      <param name="name">메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes">메서드의 특성입니다. <paramref name="attributes" />에는 <see cref="F:System.Reflection.MethodAttributes.Static" />이 포함되어야 합니다.</param>
      <param name="callingConvention">메서드의 호출 규칙입니다.</param>
      <param name="returnType">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes">메서드 매개 변수의 형식입니다.</param>
      <returns>정의된 전역 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException">메서드가 정적이 아닙니다. 즉 <paramref name="attributes" />에 <see cref="F:System.Reflection.MethodAttributes.Static" />이 포함되어 있지 않은 경우
또는
<see cref="T:System.Type" /> 배열의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />이 이전에 호출되었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>이름, 특성, 호출 규칙, 반환 형식, 반환 형식에 대한 사용자 지정 한정자, 매개 변수 형식 및 매개 변수 형식에 대한 사용자 지정 한정자를 지정하여 전역 메서드를 정의합니다.</summary>
      <param name="name">메서드의 이름입니다. <paramref name="name" />은 null 문자를 포함할 수 없습니다.</param>
      <param name="attributes">메서드의 특성입니다. <paramref name="attributes" />에는 <see cref="F:System.Reflection.MethodAttributes.Static" />이 포함되어야 합니다.</param>
      <param name="callingConvention">메서드의 호출 규칙입니다.</param>
      <param name="returnType">메서드의 반환 형식입니다.</param>
      <param name="requiredReturnTypeCustomModifiers">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> 또는 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />와 같이 반환 형식에 대한 필수적 사용자 지정 한정자를 나타내는 형식의 배열입니다. 반환 형식에 필수 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="optionalReturnTypeCustomModifiers">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> 또는 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />와 같이 반환 형식에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열입니다. 반환 형식에 선택적 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypes">메서드 매개 변수의 형식입니다.</param>
      <param name="requiredParameterTypeCustomModifiers">형식 배열의 배열입니다. 각 형식 배열은 전역 메서드의 해당 매개 변수에 대한 필수적 사용자 지정 한정자를 나타냅니다. 특정 인수에 필수적 사용자 지정 한정자가 없는 경우에는 형식 배열 대신 <see langword="null" />을 지정합니다. 전역 메서드에 인수가 없거나 모든 인수에 필수적 사용자 지정 한정자가 없는 경우에는 배열로 이루어진 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="optionalParameterTypeCustomModifiers">형식 배열의 배열입니다. 각 형식 배열은 해당 매개 변수에 대한 선택적 사용자 지정 한정자를 나타냅니다. 특정 인수에 선택적 사용자 지정 한정자가 없는 경우에는 형식 배열 대신 <see langword="null" />을 지정합니다. 전역 메서드에 인수가 없거나 모든 인수에 선택적 사용자 지정 한정자가 없는 경우에는 배열로 이루어진 배열 대신 <see langword="null" />을 지정합니다.</param>
      <returns>정의된 전역 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException">메서드가 정적이 아닙니다. 즉 <paramref name="attributes" />에 <see cref="F:System.Reflection.MethodAttributes.Static" />이 포함되어 있지 않은 경우
또는
<see cref="T:System.Type" /> 배열의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> 메서드가 이미 호출된 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>이름, 특성, 반환 형식 및 매개 변수 형식을 지정하여 전역 메서드를 정의합니다.</summary>
      <param name="name">메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes">메서드의 특성입니다. <paramref name="attributes" />에는 <see cref="F:System.Reflection.MethodAttributes.Static" />이 포함되어야 합니다.</param>
      <param name="returnType">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes">메서드 매개 변수의 형식입니다.</param>
      <returns>정의된 전역 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException">메서드가 정적이 아닙니다. 즉 <paramref name="attributes" />에 <see cref="F:System.Reflection.MethodAttributes.Static" />이 포함되어 있지 않은 경우
또는
<paramref name="name" />의 길이가 0인 경우
또는
<see cref="T:System.Type" /> 배열의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />이 이전에 호출되었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>PE 파일(이식 가능한 실행 파일)의 .sdata 섹션에서 초기화된 데이터 필드를 정의합니다.</summary>
      <param name="name">데이터를 참조하는 데 사용되는 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="data">데이터의 BLOB(Binary Large Object)입니다.</param>
      <param name="attributes">필드에 대한 특성입니다. 기본값은 <see langword="Static" />입니다.</param>
      <returns>데이터를 참조할 필드입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 길이가 0입니다.
또는
<paramref name="data" />의 크기가 0보다 작거나 같은 경우이거나, 0x3f0000보다 크거나 같은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 또는 <paramref name="data" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />이 이전에 호출되었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>이름, 메서드가 정의되어 있는 DLL의 이름, 해당 메서드의 특성, 호출 규칙, 반환 형식, 매개 변수 형식 및 <see langword="PInvoke" /> 플래그를 지정하여 <see langword="PInvoke" /> 메서드를 정의합니다.</summary>
      <param name="name">
        <see langword="PInvoke" /> 메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="dllName">
        <see langword="PInvoke" /> 메서드가 정의된 DLL의 이름입니다.</param>
      <param name="attributes">메서드의 특성입니다.</param>
      <param name="callingConvention">메서드의 호출 규칙입니다.</param>
      <param name="returnType">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes">메서드 매개 변수의 형식입니다.</param>
      <param name="nativeCallConv">네이티브 호출 규칙입니다.</param>
      <param name="nativeCharSet">메서드의 네이티브 문자 집합입니다.</param>
      <returns>정의된 <see langword="PInvoke" /> 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException">메서드가 정적 메서드가 아니거나 포함하는 형식이 인터페이스인 경우
또는
abstract 메서드입니다.
또는
메서드가 이전에 정의되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 또는 <paramref name="dllName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">포함하는 형식이 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이미 만들어져 있는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>이름, 메서드가 정의되어 있는 DLL의 이름, 해당 메서드의 특성, 호출 규칙, 반환 형식, 매개 변수 형식 및 <see langword="PInvoke" /> 플래그를 지정하여 <see langword="PInvoke" /> 메서드를 정의합니다.</summary>
      <param name="name">
        <see langword="PInvoke" /> 메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="dllName">
        <see langword="PInvoke" /> 메서드가 정의된 DLL의 이름입니다.</param>
      <param name="entryName">DLL의 진입점 이름입니다.</param>
      <param name="attributes">메서드의 특성입니다.</param>
      <param name="callingConvention">메서드의 호출 규칙입니다.</param>
      <param name="returnType">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes">메서드 매개 변수의 형식입니다.</param>
      <param name="nativeCallConv">네이티브 호출 규칙입니다.</param>
      <param name="nativeCharSet">메서드의 네이티브 문자 집합입니다.</param>
      <returns>정의된 <see langword="PInvoke" /> 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException">비정적 메서드이거나, 포함하는 형식이 인터페이스인 경우, 추상 메서드인 경우 또는 이미 정의되어 있는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 또는 <paramref name="dllName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">포함하는 형식이 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이미 만들어져 있는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)">
      <summary>이 모듈에서 지정된 이름을 사용하는 프라이빗 형식에 대해 <see langword="TypeBuilder" />를 생성합니다.</summary>
      <param name="name">네임스페이스를 포함한 형식의 전체 경로입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <returns>지정된 이름을 사용하는 프라이빗 형식입니다.</returns>
      <exception cref="T:System.ArgumentException">이 모듈의 부모 어셈블리에 지정된 이름의 형식이 이미 있는 경우
또는
중첩되지 않은 형식에 대해 중첩된 형식 특성이 설정된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)">
      <summary>지정된 형식 이름 및 형식 특성으로 <see langword="TypeBuilder" />를 생성합니다.</summary>
      <param name="name">형식의 전체 경로입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr">정의된 형식의 특성입니다.</param>
      <returns>요청된 특성을 모두 사용하여 만든 <see langword="TypeBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException">이 모듈의 부모 어셈블리에 지정된 이름의 형식이 이미 있는 경우
또는
중첩되지 않은 형식에 대해 중첩된 형식 특성이 설정된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>형식 이름, 형식 특성 및 정의된 형식이 확장하는 형식으로 <see langword="TypeBuilder" />를 생성합니다.</summary>
      <param name="name">형식의 전체 경로입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr">해당 형식과 연결될 특성입니다.</param>
      <param name="parent">정의된 형식이 확장하는 형식입니다.</param>
      <returns>요청된 특성을 모두 사용하여 만든 <see langword="TypeBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException">이 모듈의 부모 어셈블리에 지정된 이름의 형식이 이미 있는 경우
또는
중첩되지 않은 형식에 대해 중첩된 형식 특성이 설정된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>형식 이름, 특성, 정의된 형식이 확장하는 형식 및 해당 형식의 전체 크기를 지정하여 <see langword="TypeBuilder" />를 생성합니다.</summary>
      <param name="name">형식의 전체 경로입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr">정의된 형식의 특성입니다.</param>
      <param name="parent">정의된 형식이 확장하는 형식입니다.</param>
      <param name="typesize">형식의 총 크기입니다.</param>
      <returns>
        <see langword="TypeBuilder" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">이 모듈의 부모 어셈블리에 지정된 이름의 형식이 이미 있는 경우
또는
중첩되지 않은 형식에 대해 중첩된 형식 특성이 설정된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>형식 이름, 특성, 정의된 형식이 확장하는 형식 및 해당 형식의 압축 크기를 지정하여 <see langword="TypeBuilder" />를 생성합니다.</summary>
      <param name="name">형식의 전체 경로입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr">정의된 형식의 특성입니다.</param>
      <param name="parent">정의된 형식이 확장하는 형식입니다.</param>
      <param name="packsize">형식의 압축 크기입니다.</param>
      <returns>
        <see langword="TypeBuilder" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">이 모듈의 부모 어셈블리에 지정된 이름의 형식이 이미 있는 경우
또는
중첩되지 않은 형식에 대해 중첩된 형식 특성이 설정된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary>형식 이름, 특성, 정의된 형식이 확장하는 형식, 정의된 형식의 압축 크기 및 전체 크기를 지정하여 <see langword="TypeBuilder" />를 생성합니다.</summary>
      <param name="name">형식의 전체 경로입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr">정의된 형식의 특성입니다.</param>
      <param name="parent">정의된 형식이 확장하는 형식입니다.</param>
      <param name="packingSize">형식의 압축 크기입니다.</param>
      <param name="typesize">형식의 총 크기입니다.</param>
      <returns>요청된 특성을 모두 사용하여 만든 <see langword="TypeBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException">이 모듈의 부모 어셈블리에 지정된 이름의 형식이 이미 있는 경우
또는
중첩되지 않은 형식에 대해 중첩된 형식 특성이 설정된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>형식 이름, 특성, 정의된 형식이 확장하는 형식 및 정의된 형식이 구현하는 인터페이스를 지정하여 <see langword="TypeBuilder" />를 생성합니다.</summary>
      <param name="name">형식의 전체 경로입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr">해당 형식과 연결될 특성입니다.</param>
      <param name="parent">정의된 형식이 확장하는 형식입니다.</param>
      <param name="interfaces">해당 형식이 구현하는 인터페이스의 목록입니다.</param>
      <returns>요청된 특성을 모두 사용하여 만든 <see langword="TypeBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException">이 모듈의 부모 어셈블리에 지정된 이름의 형식이 이미 있는 경우
또는
중첩되지 않은 형식에 대해 중첩된 형식 특성이 설정된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>PE 파일(이식 가능한 실행 파일)의 .sdata 섹션에서 초기화되지 않은 데이터 필드를 정의합니다.</summary>
      <param name="name">데이터를 참조하는 데 사용되는 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="size">데이터 필드의 크기입니다.</param>
      <param name="attributes">필드에 대한 특성입니다.</param>
      <returns>데이터를 참조할 필드입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 길이가 0입니다.
또는
<paramref name="size" />가 0보다 작거나 같습니다. 또는 0x003f0000보다 크거나 같습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />이 이전에 호출되었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)">
      <summary>이 인스턴스가 지정된 개체와 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="obj">이 인스턴스와 비교할 개체 또는 <see langword="null" />입니다.</param>
      <returns>
        <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName">
      <summary>이 모듈의 정규화된 이름과 모듈의 경로를 나타내는 <see langword="String" />을 가져옵니다.</summary>
      <returns>정규화된 모듈 이름입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>배열 클래스의 명명된 메서드를 반환합니다.</summary>
      <param name="arrayClass">배열 클래스입니다.</param>
      <param name="methodName">배열 클래스의 메서드 이름입니다.</param>
      <param name="callingConvention">메서드의 호출 규칙입니다.</param>
      <param name="returnType">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes">메서드 매개 변수의 형식입니다.</param>
      <returns>배열 클래스의 명명된 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayClass" />가 배열이 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arrayClass" /> 또는 <paramref name="methodName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)">
      <summary>현재 <see cref="T:System.Reflection.Emit.ModuleBuilder" />에 적용된 사용자 지정 특성을 모두 반환합니다.</summary>
      <param name="inherit">이 인수는 이 형식의 개체에 대해 무시됩니다.</param>
      <returns>사용자 지정 특성이 들어 있는 배열입니다. 특성이 없으면 배열이 비어 있습니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>현재 <see cref="T:System.Reflection.Emit.ModuleBuilder" />에 적용되었으며 지정된 특성 형식에서 파생되는 사용자 지정 특성을 모두 반환합니다.</summary>
      <param name="attributeType">특성이 파생되는 기본 형식입니다.</param>
      <param name="inherit">이 인수는 이 형식의 개체에 대해 무시됩니다.</param>
      <returns>임의 수준의 <paramref name="attributeType" />에서 파생된 사용자 지정 특성이 들어 있는 배열입니다. 해당 특성이 없으면 배열이 비어 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" />이 런타임에 제공되는 <see cref="T:System.Type" /> 개체가 아닌 경우. 예를 들어 <paramref name="attributeType" />이 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 개체인 경우입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData">
      <summary>
        <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 개체로 표현되는, 현재 <see cref="T:System.Reflection.CustomAttributeData" />에 적용된 특성 관련 정보를 반환합니다.</summary>
      <returns>현재 모듈에 적용된 특성에 대한 데이터를 나타내는 <see cref="T:System.Reflection.CustomAttributeData" /> 개체의 제네릭 목록입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>지정된 이름과 바인딩 특성을 가진 PE 파일(이식 가능한 실행 파일)의 .sdata 영역에 정의된 모듈 수준 필드를 반환합니다.</summary>
      <param name="name">필드 이름입니다.</param>
      <param name="bindingAttr">검색을 제어하는 데 사용하는 <see langword="BindingFlags" /> 비트 플래그의 조합입니다.</param>
      <returns>지정된 이름과 바인딩 특성이 있는 필드 또는 해당 필드가 없는 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>지정된 바인딩 플래그와 일치하는 PE 파일(이식 가능한 실행 파일)의 .sdata 영역에 정의된 모든 필드를 반환합니다.</summary>
      <param name="bindingFlags">검색을 제어하는 데 사용하는 <see langword="BindingFlags" /> 비트 플래그의 조합입니다.</param>
      <returns>지정된 플래그와 일치하는 필드의 배열입니다. 해당 필드가 없으면 배열이 비어 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>모듈 수준에서 현재 <see cref="T:System.Reflection.Emit.ModuleBuilder" />에 대해 정의되었으며 지정된 바인딩 플래그와 일치하는 모든 메서드를 반환합니다.</summary>
      <param name="bindingFlags">검색을 제어하는 데 사용하는 <see langword="BindingFlags" /> 비트 플래그의 조합입니다.</param>
      <returns>
        <paramref name="bindingFlags" />와 일치하는 모듈 수준 메서드가 모두 포함된 배열입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)">
      <summary>모듈의 코드 특성과 대상 플랫폼을 나타내는 값 쌍을 가져옵니다.</summary>
      <param name="peKind">이 메서드가 반환될 때 모듈의 코드 특성을 나타내는 <see cref="T:System.Reflection.PortableExecutableKinds" /> 값의 조합입니다.</param>
      <param name="machine">이 메서드가 반환될 때 모듈의 대상 플랫폼을 나타내는 <see cref="T:System.Reflection.ImageFileMachine" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String)">
      <summary>해당 모듈에 정의되어 있는 명명된 형식을 가져옵니다.</summary>
      <param name="className">가져올 <see cref="T:System.Type" />의 이름입니다.</param>
      <returns>요청된 형식이 이 모듈에 정의되어 있으면 해당 형식이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" />의 길이가 0이거나 1023보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException">요청된 <see cref="T:System.Type" />이 공용이 아니고 호출자가 현재 어셈블리 외부에서 공용이 아닌 개체를 리플렉션할 수 있는 <see cref="T:System.Security.Permissions.ReflectionPermission" />을 가지고 있지 않은 경우</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">클래스 이니셜라이저가 호출되고 예외를 throw합니다.</exception>
      <exception cref="T:System.TypeLoadException">
        <see cref="T:System.Type" />을 로드하는 동안 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)">
      <summary>모듈에 정의되어 있는 명명된 형식을 가져옵니다. 필요에 따라 형식 이름의 대/소문자 구분을 무시할 수 있습니다.</summary>
      <param name="className">가져올 <see cref="T:System.Type" />의 이름입니다.</param>
      <param name="ignoreCase">
        <see langword="true" />이면 검색은 대/소문자를 구분합니다. <see langword="false" />이면 검색은 대/소문자를 구분하지 않습니다.</param>
      <returns>요청된 형식이 이 모듈에 정의되어 있으면 해당 형식이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" />의 길이가 0이거나 1023보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException">요청된 <see cref="T:System.Type" />이 공용이 아니고 호출자가 현재 어셈블리 외부에서 공용이 아닌 개체를 리플렉션할 수 있는 <see cref="T:System.Security.Permissions.ReflectionPermission" />을 가지고 있지 않은 경우</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">클래스 이니셜라이저가 호출되고 예외를 throw합니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>모듈에 정의되어 있는 명명된 형식을 가져옵니다. 필요에 따라 형식 이름의 대/소문자 구분을 무시할 수 있습니다. 해당 형식을 찾을 수 없는 경우 선택적으로 예외가 throw됩니다.</summary>
      <param name="className">가져올 <see cref="T:System.Type" />의 이름입니다.</param>
      <param name="throwOnError">형식을 찾을 수 없는 경우 예외를 throw하려면 <see langword="true" />이고, <see langword="false" />을 반환하려면 <see langword="null" />입니다.</param>
      <param name="ignoreCase">
        <see langword="true" />이면 검색은 대/소문자를 구분합니다. <see langword="false" />이면 검색은 대/소문자를 구분하지 않습니다.</param>
      <returns>지정된 형식이 이 모듈에 선언되어 있으면 해당 형식이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" />의 길이가 0이거나 1023보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Security.SecurityException">요청된 <see cref="T:System.Type" />이 공용이 아니고 호출자가 현재 어셈블리 외부에서 공용이 아닌 개체를 리플렉션할 수 있는 <see cref="T:System.Security.Permissions.ReflectionPermission" />을 가지고 있지 않은 경우</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">클래스 이니셜라이저가 호출되고 예외를 throw합니다.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" />가 <see langword="true" />이고 지정된 형식을 찾을 수 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypes">
      <summary>이 모듈 내에 정의된 클래스를 모두 반환합니다.</summary>
      <returns>이 인스턴스가 리플렉션하는 모듈 내에 정의된 형식이 들어 있는 배열입니다.</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">모듈에 있는 하나 이상의 클래스를 로드할 수 없는 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>이 모듈에 지정된 특성 형식이 적용되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="attributeType">테스트할 사용자 지정 특성의 형식입니다.</param>
      <param name="inherit">이 인수는 이 형식의 개체에 대해 무시됩니다.</param>
      <returns>하나 이상의 <paramref name="attributeType" /> 인스턴스가 이 모듈에 적용되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" />이 런타임에 제공되는 <see cref="T:System.Type" /> 개체가 아닌 경우. 예를 들어 <paramref name="attributeType" />이 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 개체인 경우입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsResource">
      <summary>이 개체가 리소스인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 개체가 리소스이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MDStreamVersion">
      <summary>메타데이터 스트림 버전을 가져옵니다.</summary>
      <returns>메타데이터 스트림 버전을 나타내는 32비트 정수입니다. 두 개의 상위 바이트는 주 버전 번호를 나타내고 두 개의 하위 바이트는 부 버전 번호를 나타냅니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MetadataToken">
      <summary>메타데이터에서 현재 동적 모듈을 식별하는 토큰을 가져옵니다.</summary>
      <returns>메타데이터에서 현재 모듈을 식별하는 정수 토큰입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ModuleVersionId">
      <summary>모듈의 두 버전 간을 구분하는 데 사용할 수 있는 UUID(범용 고유 식별자)를 가져옵니다.</summary>
      <returns>모듈의 두 버전 간을 구분하는 데 사용할 수 있는 <see cref="T:System.Guid" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Name">
      <summary>메모리 내 모듈임을 나타내는 문자열입니다.</summary>
      <returns>메모리 내 모듈임을 나타내는 텍스트입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveField(System.Int32,System.Type[],System.Type[])">
      <summary>지정된 제네릭 형식 매개 변수로 정의되는 컨텍스트에서 지정된 메타데이터 토큰으로 식별되는 필드를 반환합니다.</summary>
      <param name="metadataToken">모듈의 필드를 식별하는 메타데이터 토큰입니다.</param>
      <param name="genericTypeArguments">해당 토큰이 범위 내에 있는 형식의 제네릭 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나, 형식이 제네릭이 아닌 경우에는 <see langword="null" />입니다.</param>
      <param name="genericMethodArguments">해당 토큰이 범위 내에 있는 메서드의 제네릭 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드가 제네릭이 아닌 경우에는 <see langword="null" />입니다.</param>
      <returns>지정된 메타데이터 토큰으로 식별되는 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 필드의 토큰이 아닌 경우
또는
<paramref name="metadataToken" />이 식별하는 필드의 부모 <see langword="TypeSpec" />이 <see langword="var" />(제네릭 형식의 형식 매개 변수) 또는 <see langword="mvar" />(제네릭 메서드의 형식 매개 변수) 요소 형식이 포함된 시그니처를 사용하고, <paramref name="genericTypeArguments" />와 <paramref name="genericMethodArguments" /> 중 하나 또는 둘 다에 대해 필요한 제네릭 형식 인수를 제공하지 않은 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 유효한 토큰이 아닌 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMember(System.Int32,System.Type[],System.Type[])">
      <summary>지정된 제네릭 형식 매개 변수로 정의되는 컨텍스트에서 지정된 메타데이터 토큰으로 식별되는 형식 또는 멤버를 반환합니다.</summary>
      <param name="metadataToken">모듈에 있는 형식이나 멤버를 식별하는 메타데이터 토큰입니다.</param>
      <param name="genericTypeArguments">해당 토큰이 범위 내에 있는 형식의 제네릭 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나, 형식이 제네릭이 아닌 경우에는 <see langword="null" />입니다.</param>
      <param name="genericMethodArguments">해당 토큰이 범위 내에 있는 메서드의 제네릭 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드가 제네릭이 아닌 경우에는 <see langword="null" />입니다.</param>
      <returns>지정된 메타데이터 토큰으로 식별되는 형식이나 멤버를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 형식이나 멤버의 토큰이 아닌 경우
또는
<paramref name="metadataToken" />이 <see langword="MethodSpec" />(제네릭 형식의 형식 매개 변수) 또는 <see langword="TypeSpec" />(제네릭 메서드의 형식 매개 변수) 요소 형식이 포함된 시그니처를 사용하는 <see langword="var" /> 또는 <see langword="mvar" />이고, <paramref name="genericTypeArguments" />와 <paramref name="genericMethodArguments" /> 중 하나 또는 둘 다에 대해 필요한 제네릭 형식 인수를 제공하지 않은 경우
또는
<paramref name="metadataToken" />이 속성 또는 이벤트를 식별하는 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 유효한 토큰이 아닌 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary>지정된 제네릭 형식 매개 변수로 정의되는 컨텍스트에서 지정된 메타데이터 토큰으로 식별되는 메서드 또는 생성자를 반환합니다.</summary>
      <param name="metadataToken">모듈의 메서드나 생성자를 식별하는 메타데이터 토큰입니다.</param>
      <param name="genericTypeArguments">해당 토큰이 범위 내에 있는 형식의 제네릭 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나, 형식이 제네릭이 아닌 경우에는 <see langword="null" />입니다.</param>
      <param name="genericMethodArguments">해당 토큰이 범위 내에 있는 메서드의 제네릭 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드가 제네릭이 아닌 경우에는 <see langword="null" />입니다.</param>
      <returns>지정된 메타데이터 토큰으로 식별되는 메서드를 나타내는 <see cref="T:System.Reflection.MethodBase" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 메서드나 생성자의 토큰이 아닌 경우
또는
<paramref name="metadataToken" />이 <see langword="MethodSpec" />(제네릭 형식의 형식 매개 변수) 또는 <see langword="var" />(제네릭 메서드의 형식 매개 변수) 요소 형식이 포함된 시그니처를 사용하는 <see langword="mvar" />이고, <paramref name="genericTypeArguments" />와 <paramref name="genericMethodArguments" /> 중 하나 또는 둘 다에 대해 필요한 제네릭 형식 인수를 제공하지 않은 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 유효한 토큰이 아닌 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveSignature(System.Int32)">
      <summary>메타데이터 토큰으로 식별되는 시그니처 blob을 반환합니다.</summary>
      <param name="metadataToken">모듈에 있는 시그니처를 식별하는 메타데이터 토큰입니다.</param>
      <returns>시그니처 blob을 나타내는 바이트의 배열입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 유효한 <see langword="MemberRef" />, <see langword="MethodDef" />, <see langword="TypeSpec" />, 시그니처 또는 <see langword="FieldDef" /> 토큰이 아닌 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 유효한 토큰이 아닌 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)">
      <summary>지정된 메타데이터 토큰으로 식별되는 문자열을 반환합니다.</summary>
      <param name="metadataToken">모듈의 문자열 힙에 있는 문자열을 식별하는 메타데이터 토큰입니다.</param>
      <returns>메타데이터 문자열 힙의 문자열 값이 포함된 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 문자열의 토큰이 아닌 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 유효한 토큰이 아닌 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary>지정된 제네릭 형식 매개 변수로 정의되는 컨텍스트에서 지정된 메타데이터 토큰으로 식별되는 형식을 반환합니다.</summary>
      <param name="metadataToken">모듈의 형식을 식별하는 메타데이터 토큰입니다.</param>
      <param name="genericTypeArguments">해당 토큰이 범위 내에 있는 형식의 제네릭 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나, 형식이 제네릭이 아닌 경우에는 <see langword="null" />입니다.</param>
      <param name="genericMethodArguments">해당 토큰이 범위 내에 있는 메서드의 제네릭 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드가 제네릭이 아닌 경우에는 <see langword="null" />입니다.</param>
      <returns>지정된 메타데이터 토큰으로 식별되는 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 형식의 토큰이 아닌 경우
또는
<paramref name="metadataToken" />이 <see langword="TypeSpec" />(제네릭 형식의 형식 매개 변수) 또는 <see langword="var" />(제네릭 메서드의 형식 매개 변수) 요소 형식이 포함된 시그니처를 사용하는 <see langword="mvar" />이고, <paramref name="genericTypeArguments" />와 <paramref name="genericMethodArguments" /> 중 하나 또는 둘 다에 대해 필요한 제네릭 형식 인수를 제공하지 않은 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 유효한 토큰이 아닌 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ScopeName">
      <summary>동적 모듈의 이름을 나타내는 문자열을 가져옵니다.</summary>
      <returns>동적 모듈의 이름입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>특성을 나타내는 지정된 BLOB(Binary Large Object)를 사용하여 이 모듈에 사용자 지정 특성을 적용합니다.</summary>
      <param name="con">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute">특성을 나타내는 바이트 BLOB입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>사용자 지정 특성 작성기를 사용하여 이 모듈에 사용자 지정 특성을 적용합니다.</summary>
      <param name="customBuilder">적용할 사용자 지정 특성을 지정하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.Reflection.Emit.PropertyBuilder">
      <summary>형식에 대한 속성을 정의합니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>이 속성에 연결된 다른 메서드 중 하나를 추가합니다.</summary>
      <param name="mdBuilder">다른 메서드를 나타내는 <see langword="MethodBuilder" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Attributes">
      <summary>이 속성의 특성을 가져옵니다.</summary>
      <returns>이 속성의 특성입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanRead">
      <summary>속성을 읽을 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>이 속성을 읽을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
      <summary>속성에 쓸 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>이 속성에 쓸 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
      <summary>이 멤버를 선언하는 클래스를 가져옵니다.</summary>
      <returns>이 멤버를 선언하는 클래스에 대한 <see langword="Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
      <summary>이 속성에 대한 공용 및 비공용 <see langword="get" /> 및 <see langword="set" /> 접근자의 배열을 반환합니다.</summary>
      <param name="nonPublic">public이 아닌 메서드를 <see langword="MethodInfo" /> 배열에 반환해야 하는지 여부를 나타냅니다. non-public 메서드를 포함해야 하는 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <returns>일치하는 public 및 public이 아닌 접근자를 포함하는 <see langword="MethodInfo" /> 형식의 배열을 반환하거나 이 속성에 일치하는 접근자가 없는 경우에는 빈 배열을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
      <summary>이 속성에 대한 사용자 지정 특성의 배열을 모두 반환합니다.</summary>
      <param name="inherit">
        <see langword="true" />이면 이 속성의 상속 체인을 따라 사용자 지정 특성을 찾습니다</param>
      <returns>모든 사용자 지정 특성의 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
        <see cref="T:System.Type" />으로 식별된 사용자 지정 특성의 배열을 반환합니다.</summary>
      <param name="attributeType">형식으로 식별된 사용자 지정 특성의 배열입니다.</param>
      <param name="inherit">
        <see langword="true" />이면 이 속성의 상속 체인을 따라 사용자 지정 특성을 찾습니다</param>
      <returns>이 리플렉션된 멤버에 정의된 사용자 지정 특성의 배열이거나 이 멤버에 정의된 특성이 없는 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
      <summary>이 속성에 대한 public 및 public이 아닌 get 접근자를 반환합니다.</summary>
      <param name="nonPublic">public이 아닌 get 접근자를 반환해야 하는지 여부를 나타냅니다. non-public 메서드를 포함해야 하는 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <returns>
        <paramref name="nonPublic" />이 <see langword="MethodInfo" />인 경우 get 접근자를 나타내는 <see langword="true" /> 개체입니다. <paramref name="nonPublic" />이 <see langword="null" />이고 get 접근자가 public이 아닌 경우 또는 <paramref name="nonPublic" />이 <see langword="false" />이고 get 접근자가 없는 경우 <see langword="true" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
      <summary>해당 속성에 대한 인덱스 매개 변수의 배열을 모두 반환합니다.</summary>
      <returns>인덱스에 대한 매개 변수가 들어 있는 <see langword="ParameterInfo" /> 형식의 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
      <summary>이 속성의 set 접근자를 반환합니다.</summary>
      <param name="nonPublic">public이 아닌 경우 접근자를 반환할지 여부를 나타냅니다. non-public 메서드를 포함해야 하는 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <returns>다음 표에 표시된 것처럼 이 속성의 <see langword="Set" /> 메서드 또는 <see langword="null" />입니다.
  값 
  조건 
  이 속성에 대한 Set 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체입니다.  
  
  Set 접근자가 public인 경우  
  
 <paramref name="nonPublic" />이 true이고 public이 아닌 메서드가 반환될 수 있는 경우  
  
  null 
 <paramref name="nonPublic" />이 true이지만 속성이 읽기 전용인 경우  
  
 <paramref name="nonPublic" />이 false이고 set 접근자가 public이 아닌 경우</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
      <summary>속성의 getter 메서드를 호출하여 인덱싱된 속성의 값을 가져옵니다.</summary>
      <param name="obj">속성 값이 반환될 개체입니다.</param>
      <param name="index">인덱싱된 속성에 대한 선택적 인덱스 값입니다. 인덱싱되지 않은 속성에 대해서는 이 값이 <see langword="null" />이어야 합니다.</param>
      <returns>지정된 인덱싱된 속성의 값입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>지정된 바인딩, 인덱스 및 <see langword="CultureInfo" />가 있는 속성의 값을 가져옵니다.</summary>
      <param name="obj">속성 값이 반환될 개체입니다.</param>
      <param name="invokeAttr">호출 특성입니다. 이것은 <see langword="BindingFlags" />, <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" /> 또는 <see langword="GetProperty" /> 등과 같은 <see langword="SetProperty" />의 비트 플래그여야 합니다. 적합한 호출 특성을 지정해야 합니다. 정적 멤버를 호출하려는 경우 <see langword="Static" />의 <see langword="BindingFlags" /> 플래그를 설정해야 합니다.</param>
      <param name="binder">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see langword="MemberInfo" /> 개체의 검색을 가능하게 하는 개체입니다. <paramref name="binder" />가 <see langword="null" />이면 기본 바인더가 사용됩니다.</param>
      <param name="index">인덱싱된 속성에 대한 선택적 인덱스 값입니다. 인덱싱되지 않은 속성에 대해서는 이 값이 <see langword="null" />이어야 합니다.</param>
      <param name="culture">리소스를 지역화할 문화권을 나타내는 <see langword="CultureInfo" /> 개체입니다. 리소스가 이 문화권에 대해 지역화되지 않으면 <see langword="CultureInfo.Parent" /> 메서드가 연속적으로 호출되어 일치하는 문화권 정보를 검색합니다. 이 값이 <see langword="null" />이면 <see langword="CultureInfo" /> 속성에서 <see langword="CultureInfo.CurrentUICulture" />를 가져옵니다.</param>
      <returns>
        <paramref name="obj" />의 속성 값을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>
        <paramref name="attributeType" />의 인스턴스가 이 속성에 하나 이상 정의되어 있는지 여부를 나타냅니다.</summary>
      <param name="attributeType">사용자 지정 특성이 적용되는 <see langword="Type" /> 개체입니다.</param>
      <param name="inherit">이 속성의 상속 체인을 따라 사용자 지정 특성을 찾을 것인지 여부를 지정합니다.</param>
      <returns>이 속성에 <paramref name="attributeType" /> 인스턴스가 하나 이상 정의되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Module">
      <summary>현재 속성을 선언하는 형식이 정의될 모듈을 가져옵니다.</summary>
      <returns>현재 속성을 선언하는 형식이 정의된 <see cref="T:System.Reflection.Module" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Name">
      <summary>이 멤버의 이름을 가져옵니다.</summary>
      <returns>이 멤버의 이름이 포함된 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
      <summary>이 속성의 필드 형식을 가져옵니다.</summary>
      <returns>이 속성의 형식입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
      <summary>
        <see langword="MemberInfo" />의 이 인스턴스를 가져오는 데 사용된 클래스 개체를 가져옵니다.</summary>
      <returns>이 <see langword="Type" /> 개체를 얻는 데 사용된 <see langword="MemberInfo" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
      <summary>이 속성의 기본값을 설정합니다.</summary>
      <param name="defaultValue">이 속성의 기본값입니다.</param>
      <exception cref="T:System.InvalidOperationException">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
      <exception cref="T:System.ArgumentException">속성이 지원되는 형식 중 하나가 아닌 경우
또는
<paramref name="defaultValue" />의 형식이 속성의 형식과 일치하지 않는 경우
또는
속성이 <see cref="T:System.Object" /> 형식 또는 다른 참조 형식이고, <paramref name="defaultValue" />가 <see langword="null" />이 아니고, 값을 참조 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>지정된 사용자 지정 특성 BLOB를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">포함하는 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>속성 값을 가져오는 메서드를 설정합니다.</summary>
      <param name="mdBuilder">속성 값을 가져오는 메서드를 나타내는 <see langword="MethodBuilder" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>속성 값을 설정하는 메서드를 설정합니다.</summary>
      <param name="mdBuilder">속성 값을 설정하는 메서드를 나타내는 <see langword="MethodBuilder" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
      <summary>인덱스 속성에 대한 선택적 인덱스 값을 사용하여 속성 값을 설정합니다.</summary>
      <param name="obj">속성 값이 설정될 개체입니다.</param>
      <param name="value">이 속성의 새 값입니다.</param>
      <param name="index">인덱싱된 속성에 대한 선택적 인덱스 값입니다. 인덱싱되지 않은 속성에 대해서는 이 값이 <see langword="null" />이어야 합니다.</param>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>지정된 개체의 속성 값을 지정된 값으로 설정합니다.</summary>
      <param name="obj">속성 값이 반환될 개체입니다.</param>
      <param name="value">이 속성의 새 값입니다.</param>
      <param name="invokeAttr">호출 특성입니다. 이것은 <see langword="BindingFlags" />, <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" /> 또는 <see langword="GetProperty" /> 등과 같은 <see langword="SetProperty" />의 비트 플래그여야 합니다. 적합한 호출 특성을 지정해야 합니다. 정적 멤버를 호출하려는 경우 <see langword="Static" />의 <see langword="BindingFlags" /> 플래그를 설정해야 합니다.</param>
      <param name="binder">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see langword="MemberInfo" /> 개체의 검색을 가능하게 하는 개체입니다. <paramref name="binder" />가 <see langword="null" />이면 기본 바인더가 사용됩니다.</param>
      <param name="index">인덱싱된 속성에 대한 선택적 인덱스 값입니다. 인덱싱되지 않은 속성에 대해서는 이 값이 <see langword="null" />이어야 합니다.</param>
      <param name="culture">리소스를 지역화할 문화권을 나타내는 <see langword="CultureInfo" /> 개체입니다. 리소스가 이 문화권에 대해 지역화되지 않으면 <see langword="CultureInfo.Parent" /> 메서드가 연속적으로 호출되어 일치하는 문화권 정보를 검색합니다. 이 값이 <see langword="null" />이면 <see langword="CultureInfo" /> 속성에서 <see langword="CultureInfo.CurrentUICulture" />를 가져옵니다.</param>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="T:System.Reflection.Emit.TypeBuilder">
      <summary>런타임 시 클래스의 새 인스턴스를 정의하고 만듭니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)">
      <summary>이 형식이 구현하는 인터페이스를 추가합니다.</summary>
      <param name="interfaceType">이 형식이 구현하는 인터페이스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Assembly">
      <summary>이 형식 정의를 포함하는 동적 어셈블리를 검색합니다.</summary>
      <returns>읽기 전용입니다. 이 형식 정의를 포함하는 동적 어셈블리를 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName">
      <summary>어셈블리의 표시 이름으로 정규화된 이 형식의 전체 이름을 반환합니다.</summary>
      <returns>읽기 전용입니다. 어셈블리의 표시 이름으로 정규화된 이 형식의 전체 이름입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.BaseType">
      <summary>이 형식의 기본 형식을 가져옵니다.</summary>
      <returns>읽기 전용입니다. 이 형식의 기본 형식을 가져옵니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateType">
      <summary>해당 클래스에 대한 <see cref="T:System.Type" /> 개체를 만듭니다. 클래스의 필드 및 메서드를 정의한 후에 <see langword="CreateType" />을 호출하여 해당 클래스의 <see langword="Type" /> 개체를 로드합니다.</summary>
      <returns>이 클래스에 대한 새 <see cref="T:System.Type" /> 개체를 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">바깥쪽 형식이 만들어지지 않았습니다.
또는
이 형식이 비추상 형식이고 추상 메서드가 포함된 경우
또는
이 형식이 추상 클래스 또는 인터페이스가 아니고 메서드 본문이 없는 메서드가 들어 있는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Reflection.Emit.ILGenerator" />에 잘못된 레이블 콘텐츠가 있는 경우: <see cref="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)" />을 호출하지 않고 레이블을 정의했습니다.</exception>
      <exception cref="T:System.NotSupportedException">형식에 잘못된 MSIL(Microsoft Intermediate Language) 코드가 들어 있는 경우
또는
분기 대상을 1바이트 오프셋으로 지정했지만 분기 대상이 분기에서 128바이트 이상 떨어져 있는 경우</exception>
      <exception cref="T:System.TypeLoadException">형식을 로드할 수 없는 경우. 예를 들어 호출 규칙 <see cref="F:System.Reflection.CallingConventions.HasThis" />가 있는 <see langword="static" /> 메서드가 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo">
      <summary>이 형식을 나타내는 <see cref="T:System.Reflection.TypeInfo" /> 개체를 가져옵니다.</summary>
      <returns>이 형식을 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod">
      <summary>현재 제네릭 형식 매개 변수를 선언하는 메서드를 가져옵니다.</summary>
      <returns>현재 형식이 제네릭 형식 매개 변수이면 현재 형식을 선언하는 메서드를 나타내는 <see cref="T:System.Reflection.MethodBase" />이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringType">
      <summary>해당 형식을 선언한 형식을 반환합니다.</summary>
      <returns>읽기 전용입니다. 해당 형식을 선언한 형식입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
      <summary>지정된 특성 및 서명을 사용하여 새 생성자를 형식에 추가합니다.</summary>
      <param name="attributes">생성자의 특성입니다.</param>
      <param name="callingConvention">생성자의 호출 규칙입니다.</param>
      <param name="parameterTypes">생성자의 매개 변수 형식입니다.</param>
      <returns>정의된 생성자입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])">
      <summary>지정된 특성, 서명 및 사용자 지정 수정자를 사용하여 새 생성자를 형식에 추가합니다.</summary>
      <param name="attributes">생성자의 특성입니다.</param>
      <param name="callingConvention">생성자의 호출 규칙입니다.</param>
      <param name="parameterTypes">생성자의 매개 변수 형식입니다.</param>
      <param name="requiredCustomModifiers">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수에 필요한 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="optionalCustomModifiers">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수의 선택적 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <returns>정의된 생성자입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="requiredCustomModifiers" /> 또는 <paramref name="optionalCustomModifiers" />의 크기가 <paramref name="parameterTypes" />의 크기와 같지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.
또는
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)">
      <summary>매개 변수가 없는 생성자를 정의합니다. 여기에 정의된 생성자는 부모의 매개 변수가 없는 생성자를 호출하기만 하면 됩니다.</summary>
      <param name="attributes">생성자에 적용될 특성을 나타내는 <see langword="MethodAttributes" /> 개체입니다.</param>
      <returns>생성자를 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">부모 형식(기본 형식)에 매개 변수가 없는 생성자가 없습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.
또는
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)">
      <summary>지정된 이름, 특성 및 이벤트 형식을 사용하여 형식에 새 이벤트를 추가합니다.</summary>
      <param name="name">이벤트의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes">이벤트의 특성입니다.</param>
      <param name="eventtype">이벤트의 형식입니다.</param>
      <returns>정의된 이벤트입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 길이가 0입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우
또는
<paramref name="eventtype" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
      <summary>지정된 이름, 특성 및 필드 형식을 사용하여 형식에 새 필드를 추가합니다.</summary>
      <param name="fieldName">필드의 이름입니다. <paramref name="fieldName" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="type">필드의 형식</param>
      <param name="attributes">필드의 특성입니다.</param>
      <returns>정의된 필드입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldName" />의 길이가 0입니다.
또는
<paramref name="type" />이 System.Void입니다.
또는
이 필드의 부모 클래스에 대한 전체 크기가 지정되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fieldName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)">
      <summary>지정된 이름, 특성, 필드 형식 및 사용자 지정 한정자를 사용하여 형식에 새 필드를 추가합니다.</summary>
      <param name="fieldName">필드의 이름입니다. <paramref name="fieldName" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="type">필드의 형식</param>
      <param name="requiredCustomModifiers">
        <see cref="T:Microsoft.VisualC.IsConstModifier" /> 같은 필드에 대한 필수 사용자 지정 한정자를 나타내는 형식의 배열입니다.</param>
      <param name="optionalCustomModifiers">
        <see cref="T:Microsoft.VisualC.IsConstModifier" />와 같은 필드에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열입니다.</param>
      <param name="attributes">필드의 특성입니다.</param>
      <returns>정의된 필드입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldName" />의 길이가 0입니다.
또는
<paramref name="type" />이 System.Void입니다.
또는
이 필드의 부모 클래스에 대한 전체 크기가 지정되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fieldName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])">
      <summary>현재 형식에 대한 제네릭 형식 매개 변수를 정의하고 해당 번호 및 이름을 지정한 후, 해당 제약 조건을 설정하는 데 사용할 수 있는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체 배열을 반환합니다.</summary>
      <param name="names">제네릭 형식 매개 변수의 이름 배열입니다.</param>
      <returns>현재 형식에 대한 제네릭 형식 매개 변수 제약 조건을 정의하는 데 사용할 수 있는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체 배열입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 형식에 대해 제네릭 형식 매개 변수가 이미 정의되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="names" />가 <see langword="null" />인 경우
또는
<paramref name="names" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" />가 빈 배열인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>PE(이식 가능) 파일의 .sdata 섹션에서 초기화되지 않은 데이터 필드를 정의합니다.</summary>
      <param name="name">데이터를 참조하는 데 사용되는 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="data">데이터의 BLOB입니다.</param>
      <param name="attributes">필드에 대한 특성입니다.</param>
      <returns>데이터를 참조할 필드입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 길이가 0입니다.
또는
데이터의 크기가 0보다 작거나 같습니다. 또는 0x3f0000보다 크거나 같습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 또는 <paramref name="data" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />이 이전에 호출되었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)">
      <summary>지정된 이름 및 메서드 특성을 사용하여 새 메서드를 형식에 추가합니다.</summary>
      <param name="name">메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes">메서드의 특성입니다.</param>
      <returns>새로 정의된 메서드를 나타내는 <see cref="T:System.Reflection.Emit.MethodBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 길이가 0입니다.
또는
이 메서드의 부모 형식은 인터페이스이고 이 메서드는 가상(Visual basic에서<see langword="Overridable" /> )이 아닙니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.
또는
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)">
      <summary>지정된 이름, 메서드 특성 및 호출 규칙을 사용하여 형식에 새 메서드를 추가합니다.</summary>
      <param name="name">메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes">메서드의 특성입니다.</param>
      <param name="callingConvention">메서드의 호출 규칙입니다.</param>
      <returns>새로 정의된 메서드를 나타내는 <see cref="T:System.Reflection.Emit.MethodBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 길이가 0입니다.
또는
이 메서드의 부모 형식이 인터페이스이고 이 메서드가 가상(Visual Basic에서 <see langword="Overridable" />)이 아닙니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.
또는
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>지정된 이름, 메서드 특성, 호출 규칙 및 메서드 서명을 사용하여 형식에 새 메서드를 추가합니다.</summary>
      <param name="name">메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes">메서드의 특성입니다.</param>
      <param name="callingConvention">메서드의 호출 규칙입니다.</param>
      <param name="returnType">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes">메서드의 매개 변수 형식입니다.</param>
      <returns>새로 정의된 메서드를 나타내는 <see cref="T:System.Reflection.Emit.MethodBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 길이가 0입니다.
또는
이 메서드의 부모 형식은 인터페이스이고 이 메서드는 가상(Visual basic에서<see langword="Overridable" /> )이 아닙니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.
또는
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>지정된 이름, 메서드 특성, 호출 규칙, 메서드 서명 및 사용자 지정 한정자를 사용하여 형식에 새 메서드를 추가합니다.</summary>
      <param name="name">메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes">메서드의 특성입니다.</param>
      <param name="callingConvention">메서드의 호출 규칙입니다.</param>
      <param name="returnType">메서드의 반환 형식입니다.</param>
      <param name="returnTypeRequiredCustomModifiers">메서드의 반환 형식에 대한 필수 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 필수 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="returnTypeOptionalCustomModifiers">메서드의 반환 형식에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 선택적 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypes">메서드의 매개 변수 형식입니다.</param>
      <param name="parameterTypeRequiredCustomModifiers">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수에 필요한 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypeOptionalCustomModifiers">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수의 선택적 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <returns>새로 추가된 메서드를 나타내는 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 길이가 0입니다.
또는
이 메서드의 부모 형식은 인터페이스이고 이 메서드는 가상(Visual Basic에서 <see langword="Overridable" />)이 아닙니다.
또는
<paramref name="parameterTypeRequiredCustomModifiers" /> 또는 <paramref name="parameterTypeOptionalCustomModifiers" />의 크기가 <paramref name="parameterTypes" />의 크기와 같지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.
또는
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>지정된 이름, 메서드 특성 및 메서드 서명을 사용하여 형식에 새 메서드를 추가합니다.</summary>
      <param name="name">메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes">메서드의 특성입니다.</param>
      <param name="returnType">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes">메서드의 매개 변수 형식입니다.</param>
      <returns>정의된 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 길이가 0입니다.
또는
이 메서드의 부모 형식은 인터페이스이고 이 메서드는 가상(Visual basic에서<see langword="Overridable" /> )이 아닙니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.
또는
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>잠재적으로 다른 이름을 사용하여 지정된 메서드 선언을 구현하는 지정된 메서드 본문을 지정 합니다.</summary>
      <param name="methodInfoBody">사용할 메서드의 본문입니다. 이는 <see langword="MethodBuilder" /> 개체여야 합니다.</param>
      <param name="methodInfoDeclaration">선언이 사용될 메서드입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="methodInfoBody" />이(가) 이 클래스에 속하지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="methodInfoBody" /> 또는 <paramref name="methodInfoDeclaration" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.
또는
<paramref name="methodInfoBody" />의 선언 형식이 이 <see cref="T:System.Reflection.Emit.TypeBuilder" />가 나타내는 형식이 아닙니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
      <summary>지정된 이름의 중첩 형식을 정의합니다.</summary>
      <param name="name">형식의 약식 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <returns>정의된 중첩 형식입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 길이가 0이거나 1023보다 큽니다.
또는
이 작업을 수행하면 현재 어셈블리에 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" />이 중복된 형식이 만들어집니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)">
      <summary>이름 및 특성이 지정된 경우 중첩된 형식을 정의합니다.</summary>
      <param name="name">형식의 약식 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr">형식의 특성입니다.</param>
      <returns>정의된 중첩 형식입니다.</returns>
      <exception cref="T:System.ArgumentException">중첩된 특성이 지정되지 않았습니다.
또는
이 형식이 봉인되어 있습니다.
또는
이 형식은 배열입니다.
또는
이 형식은 인터페이스지만 중첩된 형식은 인터페이스가 아닙니다.
또는
<paramref name="name" />의 길이가 0이거나 1023보다 큽니다.
또는
이 작업을 수행하면 현재 어셈블리에 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" />이 중복된 형식이 만들어집니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>해당 이름, 특성 및 확장되는 형식이 지정된 경우 중첩된 형식을 정의합니다.</summary>
      <param name="name">형식의 약식 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr">형식의 특성입니다.</param>
      <param name="parent">중첩된 형식이 확장하는 형식입니다.</param>
      <returns>정의된 중첩 형식입니다.</returns>
      <exception cref="T:System.ArgumentException">중첩된 특성이 지정되지 않았습니다.
또는
이 형식이 봉인되어 있습니다.
또는
이 형식은 배열입니다.
또는
이 형식은 인터페이스지만 중첩된 형식은 인터페이스가 아닙니다.
또는
<paramref name="name" />의 길이가 0이거나 1023보다 큽니다.
또는
이 작업을 수행하면 현재 어셈블리에 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" />이 중복된 형식이 만들어집니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>해당 이름, 특성, 형식의 총 크기 및 해당 형식이 확장하는 형식을 지정하여 중첩된 형식을 정의합니다.</summary>
      <param name="name">형식의 약식 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr">형식의 특성입니다.</param>
      <param name="parent">중첩된 형식이 확장하는 형식입니다.</param>
      <param name="typeSize">형식의 총 크기입니다.</param>
      <returns>정의된 중첩 형식입니다.</returns>
      <exception cref="T:System.ArgumentException">중첩된 특성이 지정되지 않았습니다.
또는
이 형식이 봉인되어 있습니다.
또는
이 형식은 배열입니다.
또는
이 형식은 인터페이스지만 중첩된 형식은 인터페이스가 아닙니다.
또는
<paramref name="name" />의 길이가 0이거나 1023보다 큽니다.
또는
이 작업을 수행하면 현재 어셈블리에 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" />이 중복된 형식이 만들어집니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>해당 이름, 특성, 해당 형식이 확장하는 형식, 압축 크기를 지정하여 중첩된 형식을 정의합니다.</summary>
      <param name="name">형식의 약식 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr">형식의 특성입니다.</param>
      <param name="parent">중첩된 형식이 확장하는 형식입니다.</param>
      <param name="packSize">형식의 압축 크기입니다.</param>
      <returns>정의된 중첩 형식입니다.</returns>
      <exception cref="T:System.ArgumentException">중첩된 특성이 지정되지 않았습니다.
또는
이 형식이 봉인되어 있습니다.
또는
이 형식은 배열입니다.
또는
이 형식은 인터페이스지만 중첩된 형식은 인터페이스가 아닙니다.
또는
<paramref name="name" />의 길이가 0이거나 1023보다 큽니다.
또는
이 작업을 수행하면 현재 어셈블리에 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" />이 중복된 형식이 만들어집니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary>해당 이름, 특성, 크기 및 해당 형식이 확장하는 형식을 지정하여 중첩된 형식을 정의합니다.</summary>
      <param name="name">형식의 약식 이름입니다. <paramref name="name" />에는 포함된 null이 있을 수 없습니다.</param>
      <param name="attr">형식의 특성입니다.</param>
      <param name="parent">중첩된 형식이 확장하는 형식입니다.</param>
      <param name="packSize">형식의 압축 크기입니다.</param>
      <param name="typeSize">형식의 총 크기입니다.</param>
      <returns>정의된 중첩 형식입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>해당 이름, 특성, 해당 형식이 확장하는 형식, 구현하는 인터페이스를 지정하여 중첩된 형식을 정의합니다.</summary>
      <param name="name">형식의 약식 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr">형식의 특성입니다.</param>
      <param name="parent">중첩된 형식이 확장하는 형식입니다.</param>
      <param name="interfaces">중첩된 형식이 구현하는 인터페이스입니다.</param>
      <returns>정의된 중첩 형식입니다.</returns>
      <exception cref="T:System.ArgumentException">중첩된 특성이 지정되지 않았습니다.
또는
이 형식이 봉인되어 있습니다.
또는
이 형식은 배열입니다.
또는
이 형식은 인터페이스지만 중첩된 형식은 인터페이스가 아닙니다.
또는
<paramref name="name" />의 길이가 0이거나 1023보다 큽니다.
또는
이 작업을 수행하면 현재 어셈블리에 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" />이 중복된 형식이 만들어집니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우
또는
<paramref name="interfaces" /> 배열의 요소가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>해당 이름, 메서드가 정의된 DLL의 이름, 메서드의 특성, 메서드의 호출 규칙, 메서드의 반환 형식, 메서드의 매개 변수 형식 및 <see langword="PInvoke" /> 플래그를 지정하여 <see langword="PInvoke" /> 메서드를 정의합니다.</summary>
      <param name="name">
        <see langword="PInvoke" /> 메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="dllName">
        <see langword="PInvoke" /> 메서드가 정의된 DLL의 이름입니다.</param>
      <param name="attributes">메서드의 특성입니다.</param>
      <param name="callingConvention">메서드의 호출 규칙입니다.</param>
      <param name="returnType">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes">메서드 매개 변수의 형식입니다.</param>
      <param name="nativeCallConv">네이티브 호출 규칙입니다.</param>
      <param name="nativeCharSet">메서드의 네이티브 문자 집합입니다.</param>
      <returns>정의된 <see langword="PInvoke" /> 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException">메서드가 정적이 아닙니다.
또는
부모 형식이 인터페이스입니다.
또는
abstract 메서드입니다.
또는
메서드가 이전에 정의되었습니다.
또는
<paramref name="name" /> 또는 <paramref name="dllName" />의 길이가 0입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 또는 <paramref name="dllName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">포함하는 형식은 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 만든 것입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>해당 이름, 메서드가 정의된 DLL의 이름, 진입점의 이름, 메서드의 특성, 메서드의 호출 규칙, 메서드의 반환 형식, 메서드의 매개 변수 형식 및 <see langword="PInvoke" /> 플래그를 지정하여 <see langword="PInvoke" /> 메서드를 정의합니다.</summary>
      <param name="name">
        <see langword="PInvoke" /> 메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="dllName">
        <see langword="PInvoke" /> 메서드가 정의된 DLL의 이름입니다.</param>
      <param name="entryName">DLL의 진입점 이름입니다.</param>
      <param name="attributes">메서드의 특성입니다.</param>
      <param name="callingConvention">메서드의 호출 규칙입니다.</param>
      <param name="returnType">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes">메서드 매개 변수의 형식입니다.</param>
      <param name="nativeCallConv">네이티브 호출 규칙입니다.</param>
      <param name="nativeCharSet">메서드의 네이티브 문자 집합입니다.</param>
      <returns>정의된 <see langword="PInvoke" /> 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException">메서드가 정적이 아닙니다.
또는
부모 형식이 인터페이스입니다.
또는
abstract 메서드입니다.
또는
메서드가 이전에 정의되었습니다.
또는
<paramref name="name" />, <paramref name="dllName" /> 또는 <paramref name="entryName" />의 길이가 0입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />, <paramref name="dllName" /> 또는 <paramref name="entryName" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">포함하는 형식은 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 만든 것입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][])">
      <summary>해당 이름, 메서드가 정의된 DLL의 이름, 진입점의 이름, 메서드의 특성, 메서드의 호출 규칙, 메서드의 반환 형식, 메서드의 매개 변수 형식, <see langword="PInvoke" /> 플래그, 매개 변수/반환 형식에 대한 사용자 지정 한정자를 지정하여 <see langword="PInvoke" /> 메서드를 정의합니다.</summary>
      <param name="name">
        <see langword="PInvoke" /> 메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="dllName">
        <see langword="PInvoke" /> 메서드가 정의된 DLL의 이름입니다.</param>
      <param name="parameterTypeOptionalCustomModifiers">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수의 선택적 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="nativeCallConv">네이티브 호출 규칙입니다.</param>
      <param name="nativeCharSet">메서드의 네이티브 문자 집합입니다.</param>
      <param name="entryName">DLL의 진입점 이름입니다.</param>
      <param name="attributes">메서드의 특성입니다.</param>
      <param name="callingConvention">메서드의 호출 규칙입니다.</param>
      <param name="returnType">메서드의 반환 형식입니다.</param>
      <param name="returnTypeRequiredCustomModifiers">메서드의 반환 형식에 대한 필수 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 필수 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="returnTypeOptionalCustomModifiers">메서드의 반환 형식에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 선택적 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypes">메서드 매개 변수의 형식입니다.</param>
      <param name="parameterTypeRequiredCustomModifiers">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수에 필요한 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <returns>정의된 <see langword="PInvoke" /> 메서드를 나타내는 <see cref="T:System.Reflection.Emit.MethodBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException">메서드가 정적이 아닙니다.
또는
부모 형식이 인터페이스입니다.
또는
abstract 메서드입니다.
또는
메서드가 이전에 정의되었습니다.
또는
<paramref name="name" />, <paramref name="dllName" /> 또는 <paramref name="entryName" />의 길이가 0입니다.
또는
<paramref name="parameterTypeRequiredCustomModifiers" /> 또는 <paramref name="parameterTypeOptionalCustomModifiers" />의 크기가 <paramref name="parameterTypes" />의 크기와 같지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />, <paramref name="dllName" /> 또는 <paramref name="entryName" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.
또는
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>지정된 이름, 특성, 호출 규칙 및 속성 서명을 사용하여 형식에 새 속성을 추가합니다.</summary>
      <param name="name">속성의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes">속성의 특성입니다.</param>
      <param name="callingConvention">속성 접근자의 호출 규칙입니다.</param>
      <param name="returnType">속성의 반환 형식입니다.</param>
      <param name="parameterTypes">속성의 매개 변수 형식입니다.</param>
      <returns>정의된 속성입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 길이가 0입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우
또는
<paramref name="parameterTypes" /> 배열의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>지정된 이름, 호출 규칙, 속성 서명 및 사용자 지정 한정자를 사용하여 형식에 새 속성을 추가합니다.</summary>
      <param name="name">속성의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes">속성의 특성입니다.</param>
      <param name="callingConvention">속성 접근자의 호출 규칙입니다.</param>
      <param name="returnType">속성의 반환 형식입니다.</param>
      <param name="returnTypeRequiredCustomModifiers">속성의 반환 형식에 대한 필수 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 필수 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="returnTypeOptionalCustomModifiers">속성의 반환 형식에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 선택적 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypes">속성의 매개 변수 형식입니다.</param>
      <param name="parameterTypeRequiredCustomModifiers">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수에 필요한 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypeOptionalCustomModifiers">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수의 선택적 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <returns>정의된 속성입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 길이가 0입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />입니다.
또는
<paramref name="parameterTypes" /> 배열의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])">
      <summary>지정된 이름 및 속성 서명을 사용하여 형식에 새 속성을 추가합니다.</summary>
      <param name="name">속성의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes">속성의 특성입니다.</param>
      <param name="returnType">속성의 반환 형식입니다.</param>
      <param name="parameterTypes">속성의 매개 변수 형식입니다.</param>
      <returns>정의된 속성입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 길이가 0입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우
또는
<paramref name="parameterTypes" /> 배열의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>지정된 이름, 속성 서명 및 사용자 지정 한정자를 사용하여 형식에 새 속성을 추가합니다.</summary>
      <param name="name">속성의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes">속성의 특성입니다.</param>
      <param name="returnType">속성의 반환 형식입니다.</param>
      <param name="returnTypeRequiredCustomModifiers">속성의 반환 형식에 대한 필수 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 필수 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="returnTypeOptionalCustomModifiers">속성의 반환 형식에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 선택적 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypes">속성의 매개 변수 형식입니다.</param>
      <param name="parameterTypeRequiredCustomModifiers">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수에 필요한 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypeOptionalCustomModifiers">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수의 선택적 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <returns>정의된 속성입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 길이가 0입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우
또는
<paramref name="parameterTypes" /> 배열의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer">
      <summary>이 형식에 대한 이니셜라이저를 정의합니다.</summary>
      <returns>형식 이니셜라이저를 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">포함하는 형식은 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 만든 것입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>PE(이식 가능) 파일의 <see langword=".sdata" /> 섹션에서 초기화되지 않은 데이터 필드를 정의합니다.</summary>
      <param name="name">데이터를 참조하는 데 사용되는 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="size">데이터 필드의 크기입니다.</param>
      <param name="attributes">필드에 대한 특성입니다.</param>
      <returns>데이터를 참조할 필드입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 길이가 0입니다.
또는
<paramref name="size" />가 0보다 작거나 같습니다. 또는 0x003f0000보다 크거나 같습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.FullName">
      <summary>해당 형식의 전체 경로를 검색합니다.</summary>
      <returns>읽기 전용입니다. 해당 형식의 전체 경로를 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes">
      <summary>현재 제네릭 형식 매개 변수의 공 분산과 특수 제약 조건을 나타내는 값을 가져옵니다.</summary>
      <returns>현재 제네릭 형식 매개 변수의 공 분산 및 특수 제약 조건을 설명하는 <see cref="T:System.Reflection.GenericParameterAttributes" /> 값의 비트 조합입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition">
      <summary>매개 변수를 선언한 제네릭 형식의 형식 매개 변수 목록에서 형식 매개 변수의 위치를 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 개체가 제네릭 형식 매개 변수를 나타내는 경우, 매개 변수를 선언한 제네릭 형식의 형식 매개 변수 목록에서 형식 매개 변수의 위치이며, 나타내지 않는 경우에는 정의되어 있지 않습니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)">
      <summary>제네릭 형식 정의의 지정된 생성자에 해당하는 생성된 특정 제네릭 형식의 생성자를 반환합니다.</summary>
      <param name="type">해당 생성자가 반환되는 생성된 제네릭 형식입니다.</param>
      <param name="constructor">
        <paramref name="type" />의 제네릭 형식 정의에 있는 생성자로, 반환할 <paramref name="type" />의 생성자를 지정합니다.</param>
      <returns>
        <paramref name="type" />의 제네릭 형식 정의에 속하는 생성자를 지정하는 <paramref name="constructor" />에 해당하는 <paramref name="type" />의 생성자를 나타내는 <see cref="T:System.Reflection.ConstructorInfo" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" />이 제네릭 형식을 나타내지 않습니다.
또는
<paramref name="type" /> 이 <see cref="T:System.Reflection.Emit.TypeBuilder" />형식이 아닌 경우
또는
<paramref name="constructor" />의 선언 형식이 제네릭 형식 정의가 아닙니다.
또는
<paramref name="constructor" />의 선언 형식이 <paramref name="type" />의 제네릭 형식 정의가 아닙니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>지정된 대로 이 클래스에 대해 정의된 public 또는 non-public 생성자를 나타내는 <see cref="T:System.Reflection.ConstructorInfo" /> 개체 배열을 반환합니다.</summary>
      <param name="bindingAttr">이는 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등에서처럼 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>이 클래스에 대해 정의된 지정된 생성자를 나타내는 <see cref="T:System.Reflection.ConstructorInfo" /> 개체 배열을 반환합니다. 생성자가 정의되지 않은 경우 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)">
      <summary>이 형식에 대해 정의된 모든 사용자 지정 특성을 반환합니다.</summary>
      <param name="inherit">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</param>
      <returns>이 형식의 모든 사용자 지정 특성을 나타내는 개체 배열을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 불완전한 형식에 대해 지원되지 않습니다. <see cref="M:System.Type.GetType" />을 사용하여 형식을 검색하고 반환된 <see cref="T:System.Type" />에 대해 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />를 호출합니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>지정된 형식에 할당할 수 있는 현재 형식의 모든 사용자 지정 특성을 반환합니다.</summary>
      <param name="attributeType">검색할 특성의 형식입니다. 이 형식에 할당할 수 있는 특성만 반환됩니다.</param>
      <param name="inherit">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</param>
      <returns>현재 형식에 정의된 사용자 지정 특성의 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 불완전한 형식에 대해 지원되지 않습니다. <see cref="M:System.Type.GetType" /> 을 사용하여 형식을 검색하고 반환된 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> 에 대해 <see cref="T:System.Type" />를 호출합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">형식은 기본 런타임 시스템에서 제공하는 형식이어야 합니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetElementType">
      <summary>이 메서드를 호출하면 <see cref="T:System.NotSupportedException" />이 항상 throw됩니다.</summary>
      <returns>이 메서드는 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>지정된 이름의 이벤트를 반환합니다.</summary>
      <param name="name">검색할 이벤트의 이름입니다.</param>
      <param name="bindingAttr">검색을 제한하는 <see cref="T:System.Reflection.BindingFlags" /> 값의 비트 조합입니다.</param>
      <returns>지정한 이름을 가진 이 형식이 선언하거나 상속한 이벤트를 나타내는 <see cref="T:System.Reflection.EventInfo" /> 개체이거나, 일치 항목이 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents">
      <summary>이 형식에 의해 선언되거나 상속되는 public 이벤트를 반환합니다.</summary>
      <returns>이 형식에 의해 선언되거나 상속되는 public 이벤트를 나타내는 <see cref="T:System.Reflection.EventInfo" /> 개체의 배열을 반환합니다. public 이벤트가 없는 경우 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>이 형식으로 선언되는 public 이벤트 및 public이 아닌 이벤트를 반환합니다.</summary>
      <param name="bindingAttr">검색을 제한하는 <see cref="T:System.Reflection.BindingFlags" /> 값의 비트 조합입니다.</param>
      <returns>이 형식에 의해 선언되거나 상속되는 이벤트 중 지정된 바인딩 플래그와 일치하는 이벤트를 나타내는 <see cref="T:System.Reflection.EventInfo" /> 개체의 배열을 반환합니다. 일치하는 이벤트가 없으면 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>지정된 이름에 지정된 필드를 반환합니다.</summary>
      <param name="name">가져올 필드의 이름입니다.</param>
      <param name="bindingAttr">이는 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등에서처럼 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>public 또는 non-public 한정자와 지정된 이름을 사용하여 이 형식에 의해 선언되거나 상속된 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" /> 개체를 반환합니다. 일치하는 항목이 없으면 <see langword="null" />이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)">
      <summary>제네릭 형식 정의의 지정된 필드에 해당하는 생성된 특정 제네릭 형식의 필드를 반환합니다.</summary>
      <param name="type">해당 필드가 반환되는 생성된 제네릭 형식입니다.</param>
      <param name="field">
        <paramref name="type" /> 제네릭 형식 정의에 있는 필드로, 반환할 <paramref name="type" /> 필드를 지정합니다.</param>
      <returns>
        <paramref name="type" />의 제네릭 형식 정의에 속하는 필드를 지정하는 <paramref name="field" />에 해당하는 <paramref name="type" />의 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" />이 제네릭 형식을 나타내지 않습니다.
또는
<paramref name="type" /> 이 <see cref="T:System.Reflection.Emit.TypeBuilder" />형식이 아닌 경우
또는
<paramref name="field" />의 선언 형식이 제네릭 형식 정의가 아닙니다.
또는
<paramref name="field" />의 선언 형식이 <paramref name="type" />의 제네릭 형식 정의가 아닙니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>이 형식으로 선언되는 public 필드 및 public이 아닌 필드를 반환합니다.</summary>
      <param name="bindingAttr">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" /> 개체 배열을 반환합니다. 필드가 없으면 지정된 대로 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments">
      <summary>제네릭 형식 정의의 형식 매개 변수나 제네릭 형식의 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Type" /> 개체의 배열입니다. 배열의 요소는 제네릭 형식의 형식 인수 또는 제네릭 형식 정의의 형식 매개 변수를 나타냅니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition">
      <summary>현재 형식을 가져올 수 없는 제네릭 형식 정의를 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns>현재 형식을 가져올 수 있는 제네릭 형식 정의를 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">현재 형식은 제네릭이 아닙니다. 즉, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />이 <see langword="false" />를 반환합니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)">
      <summary>지정된 인터페이스 이름과 일치하는 정규화된 이름을 사용하여 이 클래스에 의해 (직접 또는 간접적으로) 구현된 인터페이스를 반환합니다.</summary>
      <param name="name">인터페이스의 이름입니다.</param>
      <param name="ignoreCase">
        <see langword="true" />이면 검색은 대/소문자를 구분합니다. <see langword="false" />이면 검색은 대/소문자를 구분하지 않습니다.</param>
      <returns>구현된 인터페이스를 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다. 이름이 일치하는 인터페이스를 찾을 수 없으면 null을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)">
      <summary>요청된 인터페이스에 대한 인터페이스 매핑을 반환합니다.</summary>
      <param name="interfaceType">매핑을 검색해야 할 인터페이스의 <see cref="T:System.Type" />입니다.</param>
      <returns>요청된 인터페이스 매핑을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaces">
      <summary>이 형식과 기본 형식에 대해 구현된 모든 인터페이스의 배열을 반환합니다.</summary>
      <returns>구현된 인터페이스를 나타내는 <see cref="T:System.Type" /> 개체의 배열을 반환합니다. 정의된 것이 없으면 빈 배열이 반환됩니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>지정된 대로 이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 모든 메서드를 반환합니다.</summary>
      <param name="name">멤버의 이름입니다.</param>
      <param name="type">반환할 멤버의 형식입니다.</param>
      <param name="bindingAttr">이는 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등에서처럼 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>
        <paramref name="nonPublic" />이 사용될 경우 이 형식에 대해 정의된 public 및 public이 아닌 멤버를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체의 배열을 반환하고, 사용되지 않을 경우 public 멤버만 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 메서드의 멤버를 반환합니다.</summary>
      <param name="bindingAttr">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>이 형식에 의해 선언되거나 상속되는 public 및 non-public 멤버를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체 배열을 반환합니다. 일치하는 멤버가 없으면 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)">
      <summary>제네릭 형식 정의의 지정된 메서드에 해당하는 생성된 특정 제네릭 형식의 메서드를 반환합니다.</summary>
      <param name="type">해당 메서드가 반환되는 생성된 제네릭 형식입니다.</param>
      <param name="method">
        <paramref name="type" />의 제네릭 형식 정의에 있는 메서드로, 반환할 <paramref name="type" />의 메서드를 지정합니다.</param>
      <returns>
        <paramref name="type" />의 제네릭 형식 정의에 속하는 메서드를 지정하는 <paramref name="method" />에 해당하는 <paramref name="type" />의 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 제네릭 메서드 정의가 아닌 제네릭 메서드입니다.
또는
<paramref name="type" />이 제네릭 형식을 나타내지 않습니다.
또는
<paramref name="type" /> 이 <see cref="T:System.Reflection.Emit.TypeBuilder" />형식이 아닌 경우
또는
<paramref name="method" />의 선언 형식이 제네릭 형식 정의가 아닙니다.
또는
<paramref name="method" />의 선언 형식이 <paramref name="type" />의 제네릭 형식 정의가 아닙니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>지정된 대로 이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 모든 메서드를 반환합니다.</summary>
      <param name="bindingAttr">이는 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등에서처럼 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>
        <paramref name="nonPublic" />이 사용될 경우 이 형식에 대해 정의된 public 및 public이 아닌 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체의 배열을 반환하고, 그렇지 않은 경우 public 메서드만 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>이 형식에 의해 선언되는 public 중첩 형식 및 public이 아닌 중첩 형식을 반환합니다.</summary>
      <param name="name">가져올 중첩 형식의 이름이 포함된 <see cref="T:System.String" />입니다.</param>
      <param name="bindingAttr">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.
또는
public 메서드에 대해 대소문자 구분 검색을 수행하는 경우 0입니다.</param>
      <returns>지정된 요구 사항과 일치하는 중첩 형식을 나타내는 <see cref="T:System.Type" /> 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 중첩된 형식을 반환합니다.</summary>
      <param name="bindingAttr">이는 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등에서처럼 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>지정된 바인딩 제약 조건과 일치하는 현재 <see cref="T:System.Type" /> 내에 중첩된 모든 형식을 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.
현재 <see cref="T:System.Type" /> 내에 중첩된 형식이 없거나 중첩된 형식 중 해당 바인딩 제약 조건과 일치하는 형식이 없을 경우 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>지정된 대로 이 형식에 의해 선언되거나 상속되는 public 및 non-public 속성을 모두 반환합니다.</summary>
      <param name="bindingAttr">이 호출의 특성입니다. 이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns>
        <paramref name="nonPublic" />이 사용될 경우 이 형식에 대해 정의된 public 및 non-public 속성을 나타내는 <see langword="PropertyInfo" /> 개체의 배열을 반환하고, 사용되지 않을 경우 public 속성만 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GUID">
      <summary>이 형식의 GUID를 검색합니다.</summary>
      <returns>읽기 전용입니다. 이 형식의 GUID를 검색합니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 불완전한 형식에 대해 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>지정된 멤버를 호출합니다. 호출해야 할 메서드에 액세스할 수 있어야 하며 이 메서드가 지정된 바인더 및 호출 특성의 제약 조건 하에서 지정된 인수 목록과 가장 구체적으로 일치하는 항목을 제공해야 합니다.</summary>
      <param name="name">호출할 멤버의 이름입니다. 이 항목은 생성자, 메서드, 속성 또는 필드일 수 있습니다. 적합한 호출 특성을 지정해야 합니다. 빈 문자열을 멤버의 이름으로 전달하여 클래스의 기본 멤버를 호출할 수 있습니다.</param>
      <param name="invokeAttr">호출 특성입니다. 이 항목은 <see langword="BindingFlags" />의 비트 플래그여야 합니다.</param>
      <param name="binder">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see langword="MemberInfo" /> 개체의 검색을 가능하게 하는 개체입니다. 바인더가 <see langword="null" />이면 기본 바인더가 사용됩니다. <see cref="T:System.Reflection.Binder" />을 참조하세요.</param>
      <param name="target">지정한 멤버를 호출할 개체입니다. 멤버가 정적이면 이 매개 변수가 무시됩니다.</param>
      <param name="args">인수 목록입니다. 이 항목은 호출해야 할 멤버의 매개 변수 개수, 순서 및 형식을 포함하는 개체 배열입니다. 매개 변수가 없으면 이 값이 null이어야 합니다.</param>
      <param name="modifiers">호출할 멤버의 인수와 연결된 특성을 나타내는 요소를 가진 <paramref name="args" />와 길이가 동일한 배열입니다. 메타데이터에 있는 매개 변수에 특성이 연결되어 있습니다. 이러한 항목은 다양한 상호 운용성 서비스에 사용됩니다. 자세한 내용은 메타데이터 사양을 참조하세요.</param>
      <param name="culture">형식의 강제 변환을 제어하는 데 사용되는 <see langword="CultureInfo" /> 의 인스턴스입니다. 이 매개 변수가 null이면 현재 스레드에 대한 <see langword="CultureInfo" />가 사용됩니다. 예를 들어 1,000은 각 문화권마다 다르게 표현되므로 1,000을 나타내는 문자열을 배정도 값으로 변환하려면 이 매개 변수가 필요합니다.</param>
      <param name="namedParameters">
        <paramref name="namedParameters" /> 배열의 각 매개 변수는 <paramref name="args" /> 배열의 해당 요소에 있는 값을 가져옵니다. <paramref name="args" />의 길이가 <paramref name="namedParameters" />의 길이보다 크면 남은 인수 값이 순서대로 전달됩니다.</param>
      <returns>호출된 멤버의 반환 값을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 불완전한 형식에 대해 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)">
      <summary>지정된 <see cref="T:System.Type" />을 이 개체에 할당할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="c">테스트할 개체입니다.</param>
      <returns>
        <paramref name="c" /> 매개 변수와 현재 형식이 동일한 형식을 나타내는 경우, 현재 형식이 <paramref name="c" />의 상속 계층 구조 안에 있는 경우, 또는 현재 형식이 <paramref name="c" />에서 지원하는 인터페이스인 경우 <see langword="true" />입니다. 이러한 조건 중 올바른 조건이 없거나 <paramref name="c" />가 <see langword="null" />이면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsConstructedGenericType">
      <summary>이 개체가 생성된 제네릭 형식을 나타내는지를 지정하는 값을 가져옵니다.</summary>
      <returns>이 개체가 생성된 제네릭 형식을 나타내면<see langword="true" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsCreated">
      <summary>현재 동적 형식이 만들어졌는지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 메서드가 호출되었으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>사용자 지정 특성이 현재 형식에 적용되는지 여부를 결정합니다.</summary>
      <param name="attributeType">검색할 특성의 형식입니다. 이 형식에 할당할 수 있는 특성만 반환됩니다.</param>
      <param name="inherit">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</param>
      <returns>
        <paramref name="attributeType" />의 하나 이상의 인스턴스 또는 <paramref name="attributeType" />에서 파생된 특성이 이 형식에 정의되어 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 현재 불완전한 형식에 대해 지원되지 않습니다. <see cref="M:System.Type.GetType" />을 사용하여 형식을 검색하고 반환된 <see cref="T:System.Type" />에 대해 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />를 호출합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" />이 정의되어 있지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter">
      <summary>현재 형식이 제네릭 형식 매개 변수인지를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 개체가 제네릭 형식 매개 변수를 나타내면 <see langword="true" />이고, 나타내지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericType">
      <summary>현재 형식이 제네릭 형식인지를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 개체가 나타내는 형식이 제네릭이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition">
      <summary>현재 <see cref="T:System.Reflection.Emit.TypeBuilder" />가 다른 제네릭 형식을 생성하는 데 사용될 수 있는 제네릭 형식 정의를 나타내는지를 가리키는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Reflection.Emit.TypeBuilder" /> 개체가 제네릭 형식 정의를 나타내면 <see langword="true" />이고, 나타내지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical">
      <summary>현재 형식이 보안에 중요한 형식이거나 보안 안전에 중요한 형식이어서 중요한 작업을 수행할 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 형식이 보안에 중요한 형식이거나 보안 안전에 중요한 형식인 경우 <see langword="true" />이고 투명 형식인 경우 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 동적 형식이 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 메서드를 호출하여 생성되지 않았습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical">
      <summary>현재 형식이 보안 안전에 중요한 형식인지 즉, 중요한 작업을 수행할 수 있고 투명 코드로 액세스할 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 형식이 보안 안전에 중요한 형식인 경우 <see langword="true" />이고 보안에 중요한 형식이거나 투명 형식인 경우 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 동적 형식이 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 메서드를 호출하여 생성되지 않았습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent">
      <summary>현재 형식이 투명하여 중요한 작업을 수행할 수 없는지를 나타내는 값을 가져옵니다.</summary>
      <returns>형식이 보안 투명인 경우 <see langword="true" />이고, 보안 투명이 아닌 경우 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 동적 형식이 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 메서드를 호출하여 생성되지 않았습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)">
      <summary>이 형식이 지정된 형식에서 파생되었는지 여부를 확인합니다.</summary>
      <param name="c">확인할 <see cref="T:System.Type" />입니다.</param>
      <returns>읽기 전용입니다. 이 형식이 <paramref name="c" /> 형식과 동일하거나 <paramref name="c" /> 형식의 하위 형식이면 <see langword="true" />를 반환하고, 동일하지 않거나 하위 형식이 아니면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType">
      <summary>하한이 0인 현재 형식의 1차원 배열을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns>해당 요소 형식이 하한이 0인 현재 형식인 1차원 배열 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)">
      <summary>지정된 차수의 현재 형식 배열을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <param name="rank">배열의 차수입니다.</param>
      <returns>현재 형식의 1차원 배열을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" />가 유효한 배열 차원이 아닙니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeByRefType">
      <summary>
        <see langword="ref" /> 매개 변수(Visual Basic의 경우 <see langword="ByRef" />) 매개 변수로 전달될 때 현재 형식을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns>
        <see langword="ref" /> 매개 변수(Visual Basic의 경우 <see langword="ByRef" />) 매개 변수로 전달될 때 현재 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])">
      <summary>형식 배열의 요소를 현재 제네릭 형식 정의의 형식 매개 변수로 대체하며 생성된 결과 형식을 반환합니다.</summary>
      <param name="typeArguments">현재 제네릭 형식 정의의 형식 매개 변수로 대체할 형식 배열입니다.</param>
      <returns>
        <see cref="T:System.Type" />의 요소를 현재 제네릭 형식의 형식 매개 변수로 대체하여 생성된 형식을 나타내는 <paramref name="typeArguments" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">현재 형식이 제네릭 형식의 정의를 나타내지 않습니다. 즉, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />이 <see langword="false" />를 반환합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" />가 <see langword="null" />인 경우
또는
<paramref name="typeArguments" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArguments" />의 요소에 대한 <see cref="P:System.Type.Module" /> 속성이 <see langword="null" />입니다.
또는
<paramref name="typeArguments" />의 임의 요소 모듈의 <see cref="P:System.Reflection.Module.Assembly" /> 속성이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakePointerType">
      <summary>현재 형식에 대한 관리되지 않는 포인터의 형식을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns>현재 형식에 대한 관리되지 않는 포인터의 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Module">
      <summary>이 형식 정의를 포함하는 동적 모듈을 검색합니다.</summary>
      <returns>읽기 전용입니다. 이 형식 정의를 포함하는 동적 모듈을 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Name">
      <summary>이 형식의 이름을 검색합니다.</summary>
      <returns>읽기 전용입니다. 이 형식의 <see cref="T:System.String" /> 이름을 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Namespace">
      <summary>이 <see langword="TypeBuilder" />가 정의되어 있는 네임스페이스를 검색합니다.</summary>
      <returns>읽기 전용입니다. 이 <see langword="TypeBuilder" /> 가 정의되어 있는 네임스페이스를 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.PackingSize">
      <summary>이 형식의 압축 크기를 검색합니다.</summary>
      <returns>읽기 전용입니다. 이 형식의 압축 크기를 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ReflectedType">
      <summary>이 형식은 획득하는 데 사용한 형식을 반환합니다.</summary>
      <returns>읽기 전용입니다. 이 형식은 획득하는 데 사용한 형식입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>지정된 사용자 지정 특성 blob을 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)">
      <summary>현재 생성 중인 형식의 기본 형식을 설정합니다.</summary>
      <param name="parent">새 기본 형식입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.
또는
<paramref name="parent" /><see langword="null" />이고, 현재 인스턴스가 특성에 <see cref="F:System.Reflection.TypeAttributes.Abstract" />가 포함되지 않은 인터페이스를 나타냅니다.
또는
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parent" />가 인터페이스입니다. 이 예외 상태는 .NET Framework 버전 2.0에 새로 추가되었습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Size">
      <summary>형식의 전체 크기를 검색합니다.</summary>
      <returns>읽기 전용입니다. 이 형식의 전체 크기를 검색 합니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.ToString">
      <summary>네임스페이스를 제외한 형식의 이름을 반환합니다.</summary>
      <returns>읽기 전용입니다. 네임스페이스를 제외한 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeHandle">
      <summary>동적 모듈에서 지원되지 않습니다.</summary>
      <returns>읽기 전용입니다.</returns>
      <exception cref="T:System.NotSupportedException">동적 모듈에서 지원되지 않습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType">
      <summary>이 <see langword="TypeBuilder" />에 대한 내부 시스템 형식을 반환합니다.</summary>
      <returns>읽기 전용입니다. 내부 시스템 형식을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 형식은 열거형이지만 기본 시스템 형식이 없습니다.</exception>
    </member>
    <member name="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize">
      <summary>형식에 대한 총 크기가 지정되지 않았음을 나타냅니다.</summary>
    </member>
  </members>
</doc>
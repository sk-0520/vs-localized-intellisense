<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Runtime.InteropServices</name>
  </assembly>
  <members>
    <member name="T:System.DataMisalignedException">
      <summary vsli:raw="The exception that is thrown when a unit of data is read from or written to an address that is not a multiple of the data size. This class cannot be inherited.">데이터 크기의 배수가 아닌 주소에서 데이터 단위를 읽거나 쓰면 이 예외가 throw됩니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class.">
        <see cref="T:System.DataMisalignedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class using the specified error message.">지정된 오류 메시지를 사용하여 <see cref="T:System.DataMisalignedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; object that describes the error. The content of &lt;paramref name=&quot;message&quot; /&gt; is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">오류를 설명하는 <see cref="T:System.String" /> 개체입니다. <paramref name="message" /> 내용은 사용자의 이해를 돕기 위한 것입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class using the specified error message and underlying exception.">지정된 오류 메시지와 내부 예외를 사용하여 <see cref="T:System.DataMisalignedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; object that describes the error. The content of &lt;paramref name=&quot;message&quot; /&gt; is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">오류를 설명하는 <see cref="T:System.String" /> 개체입니다. <paramref name="message" /> 내용은 사용자의 이해를 돕기 위한 것입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt;. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 <see cref="T:System.DataMisalignedException" />의 원인이 되는 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary vsli:raw="The exception that is thrown when a DLL specified in a DLL import cannot be found.">DLL 가져오기에 지정된 DLL을 찾을 수 없을 때 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with default properties.">기본 속성을 사용하여 <see cref="T:System.DllNotFoundException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with serialized data.">serialize된 데이터를 사용하여 <see cref="T:System.DllNotFoundException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; that holds the serialized object data about the exception being thrown.">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; that contains contextual information about the source or destination.">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <see cref="T:System.Runtime.Serialization.StreamingContext" />입니다.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with a specified error message.">지정된 오류 메시지를 사용하여 <see cref="T:System.DllNotFoundException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.DllNotFoundException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.IO.UnmanagedMemoryAccessor">
      <summary vsli:raw="Provides random access to unmanaged blocks of memory from managed code.">관리 코드에서 관리되지 않는 메모리 블록에 임의로 액세스할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class.">
        <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class with a specified buffer, offset, and capacity.">지정된 버퍼, 오프셋 및 용량을 사용하여 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">접근자가 포함될 버퍼입니다.</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">접근자를 시작할 바이트입니다.</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">할당할 메모리 크기(바이트)입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" />와 <paramref name="capacity" />를 더한 값이 <paramref name="buffer" />보다 큽니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="offset" /> 또는 <paramref name="capacity" />가 0보다 작습니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" />와 <paramref name="capacity" />을 더한 값이 주소 공간의 위쪽 끝에서 래핑됩니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class with a specified buffer, offset, capacity, and access right.">지정된 버퍼, 오프셋, 용량 및 액세스 권한을 사용하여 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">접근자가 포함될 버퍼입니다.</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">접근자를 시작할 바이트입니다.</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">할당할 메모리 크기(바이트)입니다.</param>
      <param name="access" vsli:raw="The type of access allowed to the memory. The default is &lt;see cref=&quot;F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite&quot; /&gt;.">메모리에 허용되는 액세스 형식입니다. 기본값은 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" />와 <paramref name="capacity" />를 더한 값이 <paramref name="buffer" />보다 큽니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;access&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot; /&gt; enumeration value.">
        <paramref name="offset" /> 또는 <paramref name="capacity" />가 0보다 작습니다.
또는
<paramref name="access" />가 유효한 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 열거형 값이 아닙니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" />와 <paramref name="capacity" />을 더한 값이 주소 공간의 위쪽 끝에서 래핑됩니다.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanRead">
      <summary vsli:raw="Determines whether the accessor is readable.">접근자가 읽을 수 있는지 여부를 확인합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is readable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">접근자가 읽을 수 있으면 <see langword="true" />이고, 읽을 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanWrite">
      <summary vsli:raw="Determines whether the accessory is writable.">접근자가 쓸 수 있는지 여부를 확인합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is writable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">접근자가 쓸 수 있으면 <see langword="true" />이고, 쓸 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.Capacity">
      <summary vsli:raw="Gets the capacity of the accessor.">접근자의 용량을 가져옵니다.</summary>
      <returns vsli:raw="The capacity of the accessor.">접근자의 용량입니다.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt;.">
        <see cref="T:System.IO.UnmanagedMemoryAccessor" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.IO.UnmanagedMemoryAccessor" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary vsli:raw="Sets the initial values for the accessor.">접근자의 초기 값을 설정합니다.</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">접근자가 포함될 버퍼입니다.</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">접근자를 시작할 바이트입니다.</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">할당할 메모리 크기(바이트)입니다.</param>
      <param name="access" vsli:raw="The type of access allowed to the memory. The default is &lt;see cref=&quot;F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite&quot; /&gt;.">메모리에 허용되는 액세스 형식입니다. 기본값은 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" />와 <paramref name="capacity" />를 더한 값이 <paramref name="buffer" />보다 큽니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;access&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot; /&gt; enumeration value.">
        <paramref name="offset" /> 또는 <paramref name="capacity" />가 0보다 작습니다.
또는
<paramref name="access" />가 유효한 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 열거형 값이 아닙니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" />와 <paramref name="capacity" />을 더한 값이 주소 공간의 위쪽 끝에서 래핑됩니다.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.IsOpen">
      <summary vsli:raw="Determines whether the accessor is currently open by a process.">프로세스에서 현재 접근자가 열려 있는지 여부를 확인합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is open; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">접근자가 열려 있으면 <see langword="true" />이고,  닫혀 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)">
      <summary vsli:raw="Reads a structure of type &lt;paramref name=&quot;T&quot; /&gt; from the accessor into a provided reference.">접근자의 <paramref name="T" /> 형식 구조체를 제공된 참조로 읽어옵니다.</summary>
      <param name="position" vsli:raw="The position in the accessor at which to begin reading.">읽기를 시작할 접근자의 위치입니다.</param>
      <param name="structure" vsli:raw="The structure to contain the read data.">읽은 데이터가 포함될 구조체입니다.</param>
      <typeparam name="T" vsli:raw="The type of structure.">구조체의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read in a structure of type &lt;paramref name=&quot;T&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;T&quot; /&gt; is a value type that contains one or more reference types.">
        <paramref name="position" />가 형식 <paramref name="T" />의 구조를 읽은 후 바이트 수가 충분하지 않습니다.
또는
<see langword="T" />는 하나 이상의 참조 형식을 포함하는 값 형식입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads structures of type &lt;paramref name=&quot;T&quot; /&gt; from the accessor into an array of type &lt;paramref name=&quot;T&quot; /&gt;.">접근자의 <paramref name="T" /> 형식 구조체를 <paramref name="T" /> 형식의 배열로 읽어옵니다.</summary>
      <param name="position" vsli:raw="The number of bytes in the accessor at which to begin reading.">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="array" vsli:raw="The array to contain the structures read from the accessor.">접근자에서 읽은 구조체가 포함될 배열입니다.</param>
      <param name="offset" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; in which to place the first copied structure.">복사한 첫 번째 구조체를 배치할 <paramref name="array" />의 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of structures of type &lt;c&gt;T&lt;/c&gt; to read from the accessor.">접근자에서 읽을 <c>T</c> 형식의 구조체 수입니다.</param>
      <typeparam name="T" vsli:raw="The type of structure.">구조체의 형식입니다.</typeparam>
      <returns vsli:raw="The number of structures read into &lt;paramref name=&quot;array&quot; /&gt;. This value can be less than &lt;paramref name=&quot;count&quot; /&gt; if there are fewer structures available, or zero if the end of the accessor is reached.">
        <paramref name="array" />로 읽어온 구조체 수입니다. 이 값은 사용 가능한 구조체 수가 적은 경우 <paramref name="count" />보다 작을 수 있으며 접근자의 끝에 도달하면 0이 됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is not large enough to contain &lt;paramref name=&quot;count&quot; /&gt; of structures (starting from &lt;paramref name=&quot;position&quot; /&gt;).">
        <paramref name="array" />은 구조(<paramref name="count" />에서 시작)의 <paramref name="position" />을 포함할 만큼 충분히 크지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)">
      <summary vsli:raw="Reads a Boolean value from the accessor.">접근자에서 부울 값을 읽습니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 또는 <see langword="false" /></returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)">
      <summary vsli:raw="Reads a byte value from the accessor.">접근자에서 바이트 값을 읽습니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns vsli:raw="The value that was read.">읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)">
      <summary vsli:raw="Reads a character from the accessor.">접근자에서 문자를 읽습니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns vsli:raw="The value that was read.">읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)">
      <summary vsli:raw="Reads a decimal value from the accessor.">접근자에서 10진수 값을 읽습니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns vsli:raw="The value that was read.">읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.  &#xA;  &#xA; -or-  &#xA;  &#xA; The decimal to read is invalid.">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.
또는
읽을 십진수가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)">
      <summary vsli:raw="Reads a double-precision floating-point value from the accessor.">접근자에서 배정밀도 부동 소수점 값을 읽습니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns vsli:raw="The value that was read.">읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)">
      <summary vsli:raw="Reads a 16-bit integer from the accessor.">접근자에서 16비트 정수를 읽습니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns vsli:raw="The value that was read.">읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)">
      <summary vsli:raw="Reads a 32-bit integer from the accessor.">접근자에서 32비트 정수를 읽습니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns vsli:raw="The value that was read.">읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)">
      <summary vsli:raw="Reads a 64-bit integer from the accessor.">접근자에서 64비트 정수를 읽습니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns vsli:raw="The value that was read.">읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)">
      <summary vsli:raw="Reads an 8-bit signed integer from the accessor.">접근자에서 부호 있는 8비트 정수를 읽습니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns vsli:raw="The value that was read.">읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)">
      <summary vsli:raw="Reads a single-precision floating-point value from the accessor.">접근자에서 단정밀도 부동 소수점 값을 읽습니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns vsli:raw="The value that was read.">읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)">
      <summary vsli:raw="Reads an unsigned 16-bit integer from the accessor.">접근자에서 부호 없는 16비트 정수를 읽습니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns vsli:raw="The value that was read.">읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)">
      <summary vsli:raw="Reads an unsigned 32-bit integer from the accessor.">접근자에서 부호 없는 32비트 정수를 읽습니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns vsli:raw="The value that was read.">읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)">
      <summary vsli:raw="Reads an unsigned 64-bit integer from the accessor.">접근자에서 부호 없는 64비트 정수를 읽습니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns vsli:raw="The value that was read.">읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)">
      <summary vsli:raw="Writes a Boolean value into the accessor.">접근자에 부울 값을 씁니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)">
      <summary vsli:raw="Writes a byte value into the accessor.">접근자에 바이트 값을 씁니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)">
      <summary vsli:raw="Writes a character into the accessor.">접근자에 문자를 씁니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)">
      <summary vsli:raw="Writes a decimal value into the accessor.">접근자에 10진수 값을 씁니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.  &#xA;  &#xA; -or-  &#xA;  &#xA; The decimal is invalid.">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.
또는
십진수가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value into the accessor.">접근자에 <see langword="Double" /> 값을 씁니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)">
      <summary vsli:raw="Writes a 16-bit integer into the accessor.">접근자에 16비트 정수를 씁니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)">
      <summary vsli:raw="Writes a 32-bit integer into the accessor.">접근자에 32비트 정수를 씁니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)">
      <summary vsli:raw="Writes a 64-bit integer into the accessor.">접근자에 64비트 정수를 씁니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after position to write a value.">값을 쓸 수 있는 위치 다음에 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)">
      <summary vsli:raw="Writes an 8-bit integer into the accessor.">접근자에 8비트 정수를 씁니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; into the accessor.">접근자에 <see langword="Single" />을(를) 씁니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)">
      <summary vsli:raw="Writes an unsigned 16-bit integer into the accessor.">접근자에 부호 없는 16비트 정수를 씁니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)">
      <summary vsli:raw="Writes an unsigned 32-bit integer into the accessor.">접근자에 부호 없는 32비트 정수를 씁니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)">
      <summary vsli:raw="Writes an unsigned 64-bit integer into the accessor.">접근자에 부호 없는 64비트 정수를 씁니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)">
      <summary vsli:raw="Writes a structure into the accessor.">접근자에 구조체를 씁니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="structure" vsli:raw="The structure to write.">기록할 구조체입니다.</param>
      <typeparam name="T" vsli:raw="The type of structure.">구조체의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes in the accessor after &lt;paramref name=&quot;position&quot; /&gt; to write a structure of type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="position" />가 형식 <paramref name="T" />의 구조를 쓴 후 상위 노드에 바이트 수가 충분하지 않습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes structures from an array of type &lt;paramref name=&quot;T&quot; /&gt; into the accessor.">
        <paramref name="T" /> 형식 배열의 구조체를 접근자에 씁니다.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="array" vsli:raw="The array to write into the accessor.">접근자에 쓸 배열입니다.</param>
      <param name="offset" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; to start writing from.">쓰기를 시작할 <paramref name="array" />의 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of structures in &lt;paramref name=&quot;array&quot; /&gt; to write.">
        <paramref name="array" />에서 쓸 구조체 수입니다.</param>
      <typeparam name="T" vsli:raw="The type of structure.">구조체의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes in the accessor after &lt;paramref name=&quot;position&quot; /&gt; to write the number of structures specified by &lt;paramref name=&quot;count&quot; /&gt;.">
        <paramref name="position" />가 <paramref name="count" />에서 지정한 구조의 수를 쓴 후 상위 노드에 바이트 수가 충분하지 않습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우
또는
<paramref name="offset" /> 또는 <paramref name="count" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="T:System.IO.UnmanagedMemoryStream">
      <summary>관리 코드에서 관리되지 않는 메모리 블록에 액세스할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor">
      <summary>
        <see cref="T:System.IO.UnmanagedMemoryStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.Security.SecurityException">사용자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
      <summary>지정된 위치와 메모리 길이를 사용하여 <see cref="T:System.IO.UnmanagedMemoryStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="pointer">관리되지 않는 메모리 위치에 대한 포인터입니다.</param>
      <param name="length">사용할 메모리의 길이입니다.</param>
      <exception cref="T:System.Security.SecurityException">사용자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 값이 0보다 작은 경우
또는
<paramref name="length" />가 오버플로를 발생시킬 만큼 큰 경우</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>지정된 위치, 메모리 길이, 총 메모리 양 및 파일 액세스 값을 사용하여 <see cref="T:System.IO.UnmanagedMemoryStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="pointer">관리되지 않는 메모리 위치에 대한 포인터입니다.</param>
      <param name="length">사용할 메모리의 길이입니다.</param>
      <param name="capacity">시스템에 할당된 총 메모리 양입니다.</param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 값 중 하나입니다.</param>
      <exception cref="T:System.Security.SecurityException">사용자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 값이 0보다 작은 경우
또는
<paramref name="capacity" /> 값이 0보다 작은 경우
또는
<paramref name="length" /> 값이 <paramref name="capacity" /> 값보다 큰 경우</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>지정된 오프셋과 길이를 사용하여 안전한 버퍼에서 <see cref="T:System.IO.UnmanagedMemoryStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer">관리되지 않는 메모리 스트림이 포함될 버퍼입니다.</param>
      <param name="offset">관리되지 않는 메모리 스트림을 시작할 버퍼의 바이트 위치입니다.</param>
      <param name="length">관리되지 않는 메모리 스트림의 길이입니다.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>지정된 오프셋, 길이 및 파일 액세스를 사용하여 안전한 버퍼에서 <see cref="T:System.IO.UnmanagedMemoryStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer">관리되지 않는 메모리 스트림이 포함될 버퍼입니다.</param>
      <param name="offset">관리되지 않는 메모리 스트림을 시작할 버퍼의 바이트 위치입니다.</param>
      <param name="length">관리되지 않는 메모리 스트림의 길이입니다.</param>
      <param name="access">관리되지 않는 메모리 스트림에 대한 파일 액세스 모드입니다.</param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanRead">
      <summary>스트림이 읽기를 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>생성자가 스트림 읽기를 포함하지 않는 <paramref name="access" /> 매개 변수를 사용하여 개체를 만들었고 스트림이 닫혔으면 <see langword="false" />이고, 그렇지 않으면 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanSeek">
      <summary>스트림이 검색을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>스트림이 닫혔으면 <see langword="false" />이고, 그렇지 않으면 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanWrite">
      <summary>스트림이 쓰기를 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>생성자가 쓰기를 지원하는 <paramref name="access" /> 매개 변수 값을 사용하여 개체를 만들었거나 매개 변수가 없는 생성자가 개체를 만들었거나 스트림이 닫혔으면 <see langword="false" />이고, 그렇지 않으면 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Capacity">
      <summary>스트림에 할당된 스트림 길이(크기) 또는 총 메모리 양(용량)을 가져옵니다.</summary>
      <returns>스트림의 크기 또는 용량입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.UnmanagedMemoryStream" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Flush">
      <summary>
        <see cref="M:System.IO.Stream.Flush" /> 메서드를 재정의하여 아무런 작업도 수행되지 않도록 합니다.</summary>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" /> 메서드를 재정의하여 지정된 경우 작업을 취소하지만 다른 작업이 수행되지 않도록 합니다.</summary>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 플러시 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>관리되지 않는 메모리 위치에 대한 포인터를 사용하여 <see cref="T:System.IO.UnmanagedMemoryStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="pointer">관리되지 않는 메모리 위치에 대한 포인터입니다.</param>
      <param name="length">사용할 메모리의 길이입니다.</param>
      <param name="capacity">시스템에 할당된 총 메모리 양입니다.</param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 값 중 하나입니다.</param>
      <exception cref="T:System.Security.SecurityException">사용자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 값이 0보다 작은 경우
또는
<paramref name="capacity" /> 값이 0보다 작은 경우
또는
<paramref name="length" /> 값이 오버플로를 발생시킬 만큼 큰 경우</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>지정된 오프셋, 길이 및 파일 액세스를 사용하여 안전한 버퍼에서 <see cref="T:System.IO.UnmanagedMemoryStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer">관리되지 않는 메모리 스트림이 포함될 버퍼입니다.</param>
      <param name="offset">관리되지 않는 메모리 스트림을 시작할 버퍼의 바이트 위치입니다.</param>
      <param name="length">관리되지 않는 메모리 스트림의 길이입니다.</param>
      <param name="access">관리되지 않는 메모리 스트림에 대한 파일 액세스 모드입니다.</param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Length">
      <summary>스트림의 데이터 길이를 가져옵니다.</summary>
      <returns>스트림의 데이터 길이입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Position">
      <summary>스트림 내의 현재 위치를 가져오거나 설정합니다.</summary>
      <returns>스트림 내의 현재 위치입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">위치가 0보다 작은 값으로 설정된 경우 또는 위치가 <see cref="F:System.Int32.MaxValue" />보다 크거나 현재 포인터에 추가될 때 오버플로가 발생할 경우</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.PositionPointer">
      <summary>스트림 내의 현재 위치를 기준으로 스트림에 대한 바이트 포인터를 가져오거나 설정합니다.</summary>
      <returns>바이트 포인터입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException">현재 위치가 스트림의 용량보다 큰 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">설정할 위치가 현재 스트림에서 올바르지 않은 경우</exception>
      <exception cref="T:System.IO.IOException">포인터가 스트림의 시작 위치 값보다 낮은 값으로 설정되는 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Runtime.InteropServices.SafeBuffer" />에 사용할 수 있도록 스트림이 초기화되었습니다. <see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /> 속성은 <see cref="T:System.Byte" /> 포인터를 사용하여 초기화된 스트림에만 사용할 수 있습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>지정된 바이트 수를 지정된 배열로 읽어 들입니다.</summary>
      <param name="buffer">이 메서드는 지정된 바이트 배열의 값이 <paramref name="offset" />과 (<paramref name="offset" /> + <paramref name="count" /> - 1) 사이에서 현재 원본으로부터 읽어온 바이트로 교체된 상태로 반환됩니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="offset">현재 스트림에서 읽은 데이터를 저장하기 시작하는 <paramref name="buffer" />의 바이트 오프셋(0부터 시작)입니다.</param>
      <param name="count">현재 스트림에서 읽을 최대 바이트 수입니다.</param>
      <returns>버퍼로 읽어온 총 바이트 수입니다. 이 바이트 수는 현재 바이트가 충분하지 않은 경우 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달하면 0이 됩니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.NotSupportedException">내부 메모리가 읽기를 지원하지 않는 경우
또는
<see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /> 속성은 <see langword="false" />로 설정됩니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 매개 변수가 <see langword="null" />로 설정된 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 매개 변수가 0보다 작습니다.
또는
<paramref name="count" /> 매개 변수가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">버퍼 배열 길이에서 <paramref name="offset" /> 매개 변수를 뺀 값이 <paramref name="count" /> 매개 변수보다 작은 경우</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Span{System.Byte})">
      <summary>이 비관리형 메모리 스트림의 모든 바이트를 지정된 바이트 범위로 읽어들입니다.</summary>
      <param name="destination">이 메서드가 반환될 때 이 범위에는 비관리형 메모리 스트림의 모든 바이트가 포함됩니다.</param>
      <returns>대상으로 읽어들인 총 바이트 수입니다.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>지정된 바이트 수를 지정된 배열로 비동기 방식으로 읽어 들입니다.</summary>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="offset">스트림의 데이터를 쓰기 시작할 <paramref name="buffer" />의 바이트 오프셋입니다.</param>
      <param name="count">읽을 최대 바이트 수입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 버퍼 안으로 읽어들인 총 바이트 수를 포함합니다. 현재 사용할 수 있는 바이트 수가 요청된 수보다 작을 경우 결과 값이 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>비관리형 메모리 스트림 바이트를 비동기적으로 메모리 영역으로 읽어들입니다.</summary>
      <param name="buffer">비동기 메서드가 완료되면 이 메모리 영역에는 비관리형 메모리 스트림에서 읽은 모든 바이트가 포함됩니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 읽기 작업을 나타내며 버퍼로 읽어들인 총 바이트 수를 래핑하는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadByte">
      <summary>스트림에서 바이트를 읽고 스트림 내 위치를 한 바이트씩 앞으로 이동하거나 스트림 끝일 경우 -1을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Int32" /> 개체로 캐스팅된 부호 없는 바이트이거나, 스트림의 끝에 있는 경우 -1입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.NotSupportedException">내부 메모리가 읽기를 지원하지 않는 경우
또는
현재 위치가 스트림의 끝에 있는 경우</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>현재 스트림의 현재 위치를 주어진 값으로 설정합니다.</summary>
      <param name="offset">검색을 시작할 <c>원점</c>에 상대적인 위치입니다.</param>
      <param name="loc">
        <see cref="T:System.IO.SeekOrigin" /> 형식의 값을 사용하여 시작, 끝 또는 현재 위치를 <c>원점</c>에 대한 참조 지점으로 지정합니다.</param>
      <returns>스트림 내의 새 위치입니다.</returns>
      <exception cref="T:System.IO.IOException">스트림의 시작 위치 앞에서 검색하려고 한 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 값이 스트림의 최대 크기보다 큰 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="loc" />이 잘못되었습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
      <summary>스트림의 길이를 지정된 값으로 설정합니다.</summary>
      <param name="value">스트림의 길이입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.NotSupportedException">내부 메모리가 쓰기를 지원하지 않는 경우
또는
스트림에 쓰려고 하는데 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> 속성이 <see langword="false" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">지정된 <paramref name="value" />가 스트림의 용량을 초과한 경우
또는
지정된 <paramref name="value" />가 음수인 경우</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>버퍼의 데이터를 사용하여 현재 스트림에 바이트 블록을 씁니다.</summary>
      <param name="buffer">현재 스트림으로 복사할 바이트가 들어 있는 바이트 배열입니다.</param>
      <param name="offset">현재 스트림으로 바이트를 복사하기 시작할 버퍼의 오프셋입니다.</param>
      <param name="count">현재 스트림에 쓸 바이트 수입니다.</param>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.NotSupportedException">내부 메모리가 쓰기를 지원하지 않는 경우
또는
스트림에 쓰려고 하는데 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> 속성이 <see langword="false" />인 경우
또는
<paramref name="count" /> 값이 스트림의 용량보다 큰 경우
또는
위치가 스트림 용량의 끝에 있는 경우</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">지정된 매개 변수 중 하나가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 매개 변수에서 <paramref name="buffer" /> 매개 변수의 길이를 뺀 값이 <paramref name="count" /> 매개 변수보다 작은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>제공된 바이트 범위에서 데이터를 사용하여 현재 비관리형 메모리 스트림에 바이트 블록을 씁니다.</summary>
      <param name="source">현재 비관리형 메모리 스트림에 바이트를 복사할 바이트 범위입니다.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>바이트의 시퀀스를 현재 스트림에 비동기적으로 쓰고 쓰여진 바이트 수만큼 이 스트림 내의 현재 위치를 앞으로 이동한 후 취소 요청을 모니터링합니다.</summary>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="offset">스트림으로 바이트를 복사하기 시작할 <paramref name="buffer" />의 바이트 오프셋(0부터 시작)입니다.</param>
      <param name="count">쓸 최대 바이트 수입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>바이트 범위를 현재 스트림에 비동기적으로 쓰고 쓰여진 바이트 수만큼 이 스트림 내의 현재 위치를 앞으로 이동한 후 취소 요청을 모니터링합니다.</summary>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
      <summary>파일 스트림의 현재 위치에 바이트를 씁니다.</summary>
      <param name="value">스트림에 쓰여지는 바이트 값입니다.</param>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.NotSupportedException">내부 메모리가 쓰기를 지원하지 않는 경우
또는
스트림에 쓰려고 하는데 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> 속성이 <see langword="false" />인 경우
또는
현재 위치가 스트림 용량의 끝에 있는 경우</exception>
      <exception cref="T:System.IO.IOException">제공된 <paramref name="value" />로 인해 스트림이 최대 용량을 초과하는 경우</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IDispatchConstantAttribute">
      <summary vsli:raw="Indicates that the default value for the attributed field or parameter is an instance of &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;, where the &lt;see cref=&quot;P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">특성 사용 필드나 매개 변수의 기본값이 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />의 인스턴스임을 나타냅니다. 여기서 <see cref="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject" />는 <see langword="null" />입니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.IDispatchConstantAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.CompilerServices.IDispatchConstantAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IDispatchConstantAttribute.Value">
      <summary vsli:raw="Gets the &lt;see langword=&quot;IDispatch&quot; /&gt; constant stored in this attribute.">이 특성에 저장된 <see langword="IDispatch" /> 상수를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;IDispatch&quot; /&gt; constant stored in this attribute. Only &lt;see langword=&quot;null&quot; /&gt; is allowed for an &lt;see langword=&quot;IDispatch&quot; /&gt; constant value.">이 특성에 저장된 <see langword="IDispatch" /> 상수입니다. <see langword="null" /> 상수 값에는 <see langword="IDispatch" />만 허용됩니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary vsli:raw="Indicates that the default value for the attributed field or parameter is an instance of &lt;see cref=&quot;T:System.Runtime.InteropServices.UnknownWrapper&quot; /&gt;, where the &lt;see cref=&quot;P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This class cannot be inherited.">특성 사용 필드나 매개 변수의 기본값이 <see cref="T:System.Runtime.InteropServices.UnknownWrapper" />의 인스턴스임을 나타냅니다. 여기서 <see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" />는 <see langword="null" />입니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.IUnknownConstantAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary vsli:raw="Gets the &lt;see langword=&quot;IUnknown&quot; /&gt; constant stored in this attribute.">이 특성에 저장된 <see langword="IUnknown" /> 상수를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;IUnknown&quot; /&gt; constant stored in this attribute. Only &lt;see langword=&quot;null&quot; /&gt; is allowed for an &lt;see langword=&quot;IUnknown&quot; /&gt; constant value.">이 특성에 저장된 <see langword="IUnknown" /> 상수입니다. <see langword="null" /> 상수 값에는 <see langword="IUnknown" />만 허용됩니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary vsli:raw="Allows an unmanaged method to call a managed method.">관리되지 않는 메서드는 관리되는 메서드를 호출할 수 있습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary vsli:raw="Encapsulates an array and an offset within the specified array.">지정된 배열 내에서 배열 및 오프셋을 캡슐화합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; structure.">
        <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="array" vsli:raw="A managed array.">관리되는 배열입니다.</param>
      <param name="offset" vsli:raw="The offset in bytes, of the element to be passed through platform invoke.">플랫폼 호출을 통해 전달될 요소의 오프셋(바이트)입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The array is larger than 2 gigabytes (GB).">배열이 2GB(기가바이트)보다 큰 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the specified object matches the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object.">지정된 개체가 현재 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체와 일치하는지 여부를 나타냅니다.</summary>
      <param name="obj" vsli:raw="Object to compare with this instance.">이 인스턴스와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object matches this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">개체가 이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Indicates whether the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object matches the current instance.">지정된 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체가 현재 인스턴스와 일치하는지 여부를 나타냅니다.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with this instance.">이 인스턴스와 비교할 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object matches the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체가 현재 인스턴스와 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary vsli:raw="Returns the managed array referenced by this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt;.">이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />에서 참조한 관리되는 배열을 반환합니다.</summary>
      <returns vsli:raw="The managed array this instance references.">이 인스턴스가 참조하는 관리되는 배열입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary vsli:raw="Returns a hash code for this value type.">이 값 형식에 대한 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="The hash code for this instance.">이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary vsli:raw="Returns the offset provided when this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; was constructed.">이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />이 생성될 때 제공된 오프셋을 반환합니다.</summary>
      <returns vsli:raw="The offset for this instance.">이 인스턴스의 오프셋입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; objects have the same value.">지정된 두 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체의 값이 같은지를 확인합니다.</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;b&quot; /&gt; parameter.">
        <paramref name="b" /> 매개 변수와 비교할 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체입니다.</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;a&quot; /&gt; parameter.">
        <paramref name="a" /> 매개 변수와 비교할 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;a&quot; /&gt; is the same as the value of &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />의 값이 <paramref name="a" />의 값과 같으면 <paramref name="b" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; objects no not have the same value.">지정된 두 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체의 값이 같은지 여부를 확인합니다.</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;b&quot; /&gt; parameter.">
        <paramref name="b" /> 매개 변수와 비교할 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체입니다.</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;a&quot; /&gt; parameter.">
        <paramref name="a" /> 매개 변수와 비교할 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;a&quot; /&gt; is not the same as the value of &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="a" />의 값이 <paramref name="b" />의 값과 같지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary vsli:raw="Specifies whether the type should be marshaled using the Automation marshaler or a custom proxy and stub.">자동화 마샬러 또는 사용자 지정 프록시 및 스텁을 사용하여 형식의 마샬링 여부를 지정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.AutomationProxyAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="val" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class should be marshaled using the Automation Marshaler; &lt;see langword=&quot;false&quot; /&gt; if a proxy stub marshaler should be used.">자동화 마샬러를 사용하여 클래스를 마샬링해야 하면 <see langword="true" />이고, 프록시 스텁 마샬러를 사용해야 하면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary vsli:raw="Gets a value indicating the type of marshaler to use.">사용할 마샬러 형식을 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class should be marshaled using the Automation Marshaler; &lt;see langword=&quot;false&quot; /&gt; if a proxy stub marshaler should be used.">자동화 마샬러를 사용하여 클래스를 마샬링해야 하면 <see langword="true" />이고, 프록시 스텁 마샬러를 사용해야 하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary vsli:raw="Controls whether Unicode characters are converted to the closest matching ANSI characters.">유니코드 문자가 가장 일치하는 ANSI 문자로 변환되는지 여부를 제어합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BestFitMappingAttribute&quot; /&gt; class set to the value of the &lt;see cref=&quot;P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping&quot; /&gt; property.">
        <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> 속성 값으로 설정된 <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="BestFitMapping" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that best-fit mapping is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />는 가장 적합한 매핑 기능이 활성화된다는 것을 나타내고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary vsli:raw="Gets the best-fit mapping behavior when converting Unicode characters to ANSI characters.">유니코드 문자를 ANSI 문자로 변환할 때 가장 적합한 매핑 동작을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if best-fit mapping is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">가장 적합한 매핑이 활성화된 경우에는 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI '?' character.">ANSI "?" 문자로 변환되는 매핑할 수 없는 유니코드 문자가 나오면 예외를 throw하거나 throw하지 않습니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary vsli:raw="Marshals data of type &lt;see langword=&quot;VT_BSTR&quot; /&gt; from managed to unmanaged code. This class cannot be inherited.">
        <see langword="VT_BSTR" /> 형식의 데이터를 관리 코드에서 비관리 코드로 마샬링합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; object.">지정된 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 개체를 사용하여 <see cref="T:System.Object" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The object to wrap and marshal as &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">래핑하여 <see langword="VT_BSTR" />로 마샬링할 개체합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.String&quot; /&gt; object.">지정된 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 개체를 사용하여 <see cref="T:System.String" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The object to wrap and marshal as &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">래핑하여 <see langword="VT_BSTR" />로 마샬링할 개체합니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary vsli:raw="Gets the wrapped &lt;see cref=&quot;T:System.String&quot; /&gt; object to marshal as type &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">
        <see langword="VT_BSTR" /> 형식으로 마샬링할 래핑된 <see cref="T:System.String" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="The object that is wrapped by &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.BStrWrapper" />로 래핑되는 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary vsli:raw="Specifies the calling convention required to call methods implemented in unmanaged code.">비관리 코드에서 구현된 메서드를 호출하는 데 필요한 호출 규칙을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary vsli:raw="The caller cleans the stack. This enables calling functions with &lt;see langword=&quot;varargs&quot; /&gt;, which makes it appropriate to use for methods that accept a variable number of parameters, such as &lt;see langword=&quot;Printf&quot; /&gt;.">호출자가 스택을 정리합니다. <see langword="varargs" />를 사용하여 함수를 호출할 수 있으므로 <see langword="Printf" />와 같은 가변 개수의 매개 변수를 허용하는 메서드에 사용하기에 적합합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary vsli:raw="This calling convention is not supported.">이 호출 규칙이 지원되지 않습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary vsli:raw="The callee cleans the stack.">호출 수신자가 스택을 정리합니다. 이는 플랫폼 호출을 사용하여 관리되지 않는 함수를 호출하는 기본 규칙입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary vsli:raw="The first parameter is the &lt;see langword=&quot;this&quot; /&gt; pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.">첫 번째 매개 변수는 <see langword="this" /> 포인터이며 레지스터 ECX에 저장됩니다. 다른 매개 변수는 스택에 푸시됩니다. 이 호출 규칙은 관리되지 않는 DLL에서 내보낸 클래스의 메서드를 호출하는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary vsli:raw="This member is not actually a calling convention, but instead uses the default platform calling convention.">이 멤버는 실제로는 호출 규칙이 아니라 기본 플랫폼 호출 규칙을 사용합니다. 예를 들어, Windows에서는 기본값이 <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" />이고 Windows CE .NET에서는 기본값이 <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary vsli:raw="Indicates the type of class interface to be generated for a class exposed to COM, if an interface is generated at all.">인터페이스가 생성될 경우 COM에 노출된 클래스에 대해 생성될 클래스 인터페이스의 형식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; enumeration value.">지정된 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 열거형 값을 사용하여 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="classInterfaceType" vsli:raw="Describes the type of interface that is generated for a class.">클래스에 대해 생성되는 인터페이스의 형식을 설명합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; enumeration member.">지정된 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 열거형 멤버를 사용하여 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="classInterfaceType" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; values that describes the type of interface that is generated for a class.">클래스에 대해 생성된 인터페이스의 형식을 설명하는 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 값 중 하나입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; value that describes which type of interface should be generated for the class.">클래스에 대해 어떤 형식의 인터페이스가 생성되어야 하는지를 설명하는 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 값을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; value that describes which type of interface should be generated for the class.">클래스에 대해 어떤 형식의 인스턴스가 생성되어야 하는지를 설명하는 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary vsli:raw="Identifies the type of class interface that is generated for a class.">클래스에 대해 생성되는 클래스 인터페이스의 형식을 식별합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary vsli:raw="&lt;para&gt;Indicates that the class only supports late binding for COM clients. A &lt;see langword=&quot;dispinterface&quot; /&gt; for the class is automatically exposed to COM clients on request. The type library produced by Tlbexp.exe (Type Library Exporter) does not contain type information for the &lt;see langword=&quot;dispinterface&quot; /&gt; in order to prevent clients from caching the DISPIDs of the interface. The &lt;see langword=&quot;dispinterface&quot; /&gt; does not exhibit the versioning problems described in &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; because clients can only late-bind to the interface.&lt;/para&gt;&lt;para&gt;This is the default setting for &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;.&lt;/para&gt;">클래스가 COM 클라이언트에 대해 런타임에 바인딩만 지원함을 나타냅니다. 클래스의 <see langword="dispinterface" />는 요청 시 COM 클라이언트에 자동으로 노출됩니다. Tlbexp.exe(Type Library Exporter)에서 생성된 형식 라이브러리는 클라이언트가 인터페이스의 DISPID를 캐시하지 못하게 하기 위해 <see langword="dispinterface" />에 대한 형식 정보를 포함하지 않습니다. 클라이언트는 런타임에만 인터페이스에 바인딩할 수 있으므로 <see langword="dispinterface" />에는 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />에서 설명한 버전 관리 문제가 나타내지 않습니다.
이것은 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />의 기본 설정입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary vsli:raw="Indicates that a dual class interface is automatically generated for the class and exposed to COM. Type information is produced for the class interface and published in the type library. Using &lt;see langword=&quot;AutoDual&quot; /&gt; is strongly discouraged because of the versioning limitations described in &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;.">이중 클래스 인터페이스가 클래스에 대해 자동으로 생성되고 COM에 노출됨을 나타냅니다. 클래스 인터페이스에 대해 형식 정보가 생성되어 형식 라이브러리에 게시됩니다. <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />에서 설명하는 것처럼 버전 관리 제한 때문에 <see langword="AutoDual" />은 사용하지 않아야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary vsli:raw="&lt;para&gt;Indicates that no class interface is generated for the class. If no interfaces are implemented explicitly, the class can only provide late-bound access through the &lt;see langword=&quot;IDispatch&quot; /&gt; interface. This is the recommended setting for &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;. Using &lt;see langword=&quot;ClassInterfaceType.None&quot; /&gt; is the only way to expose functionality through interfaces implemented explicitly by the class.&lt;/para&gt;&lt;para&gt;Tlbexp.exe (Type Library Exporter) exposes the first public, COM-visible interface implemented by the class as the default interface of the coclass. In .NET Framework 2.0 and later versions, you can specify the default interface exposed to COM by using the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute&quot; /&gt; attribute. If the class implements no interfaces, the first public, COM-visible interface implemented by a base class becomes the default interface (starting with the most recently derived base class and working backward). Tlbexp.exe exposes &lt;see langword=&quot;_Object&quot; /&gt; as the default interface if neither the class nor its base classes implement interfaces.&lt;/para&gt;">해당 클래스에 대해 클래스 인터페이스가 생성되지 않음을 나타냅니다. 명시적으로 구현되는 인터페이스가 없으면 런타임에 바인딩될 때 <see langword="IDispatch" /> 인터페이스를 통해서만 클래스에 액세스할 수 있습니다. 이것이 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />에 대해 권장되는 설정입니다. 클래스에서 명시적으로 구현한 인터페이스를 통해 기능을 노출시키는 유일한 방법은 <see langword="ClassInterfaceType.None" />을 사용하는 것입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary vsli:raw="Specifies the class identifier of a coclass imported from a type library.">형식 라이브러리에서 가져온 coclass의 클래스 식별자를 지정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CoClassAttribute&quot; /&gt; with the class identifier of the original coclass.">원본 coclass의 클래스 식별자를 사용하여 <see cref="T:System.Runtime.InteropServices.CoClassAttribute" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="coClass" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class identifier of the original coclass.">원본 coclass의 클래스 식별자를 포함하는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary vsli:raw="Gets the class identifier of the original coclass.">원본 coclass의 클래스 식별자를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the class identifier of the original coclass.">원본 coclass의 클래스 식별자를 포함하는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary vsli:raw="Indicates the COM alias for a parameter or field type.">매개 변수 또는 필드 형식의 COM 별칭을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAliasNameAttribute&quot; /&gt; class with the alias for the attributed field or parameter.">특성 사용 필드 또는 매개 변수에 대한 별칭을 사용하여 <see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="alias" vsli:raw="The alias for the field or parameter as found in the type library when it was imported.">필드 또는 매개 변수를 가져올 때 형식 라이브러리에서 찾은 필드 또는 매개 변수에 대한 별칭입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary vsli:raw="Gets the alias for the field or parameter as found in the type library when it was imported.">필드 또는 매개 변수를 가져올 때 형식 라이브러리에서 찾은 필드 또는 매개 변수에 대한 별칭을 가져옵니다.</summary>
      <returns vsli:raw="The alias for the field or parameter as found in the type library when it was imported.">필드 또는 매개 변수를 가져올 때 형식 라이브러리에서 찾은 필드 또는 매개 변수에 대한 별칭입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary vsli:raw="Permits late-bound registration of an event handler.">이벤트 처리기의 런타임에 바인딩된 등록을 허용합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; class by using the specified type and a name of the event on the type.">지정된 형식과 해당 형식의 이벤트 이름을 사용하여 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The type of object.">개체의 형식입니다.</param>
      <param name="eventName" vsli:raw="The name of an event on &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" />의 이벤트 이름입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Attaches an event handler to a COM object.">이벤트 처리기를 COM 개체에 연결합니다.</summary>
      <param name="target" vsli:raw="The target object that the event delegate should bind to.">이벤트 대리자가 바인딩될 대상 개체입니다.</param>
      <param name="handler" vsli:raw="The event delegate.">이벤트 대리자입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary vsli:raw="Gets the attributes for this event.">이 이벤트에 대한 특성을 가져옵니다.</summary>
      <returns vsli:raw="The read-only attributes for this event.">이 이벤트에 대한 읽기 전용 특성입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary vsli:raw="Gets the class that declares this member.">이 멤버를 선언하는 클래스를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the class that declares this member.">이 멤버를 선언하는 클래스에 대한 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary vsli:raw="Gets the method that was used to add an event handler delegate to the event source.">이벤트 처리기 대리자를 이벤트 소스에 추가하는 데 사용된 메서드를 가져옵니다.</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">public이 아닌 메서드를 반환하려면 <see langword="true" />를 설정하고, 그렇지 않으면 <see langword="false" />를 설정합니다.</param>
      <returns vsli:raw="The method that was used to add an event handler delegate to the event source.">이벤트 처리기 대리자를 이벤트 소스에 추가하는 데 사용된 메서드입니다.</returns>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" />이 <see langword="true" />이고 이벤트 처리기 대리자를 추가하는 데 사용된 메서드가 public이 아니지만 호출자가 public이 아닌 메서드를 리플렉션할 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets an array that contains all the custom attributes that are applied to this member.">파생 클래스에서 재정의된 경우 이 멤버에 적용된 사용자 지정 특성을 모두 포함하는 배열을 가져옵니다.</summary>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 멤버의 상속 체인을 검색하여 특성을 찾으려면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="An array that contains all the custom attributes, or an array that has no elements if no attributes were defined.">모든 사용자 지정 특성을 포함하는 배열이거나, 정의된 특성이 없는 경우 요소가 없는 배열입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.">이 멤버가 리플렉션 전용 컨텍스트에 로드된 형식에 속하는 경우. 방법: 리플렉션 전용 컨텍스트에 어셈블리 로드를 참조하세요.</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="A custom attribute type cannot be loaded.">사용자 지정 특성 형식을 로드할 수 없는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets an array that contains all the custom attributes of the specified type that are applied to this member.">파생 클래스에서 재정의된 경우 이 멤버에 적용된, 지정된 형식의 사용자 지정 특성을 모두 포함하는 배열을 가져옵니다.</summary>
      <param name="attributeType" vsli:raw="The attribute type to search for. Only attributes that are assignable to this type can be returned.">검색할 특성 형식입니다. 이 형식에 할당할 수 있는 특성만 반환할 수 있습니다.</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 멤버의 상속 체인을 검색하여 특성을 찾으려면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="An array that contains all the custom attributes of the specified type, or an array that has no elements if no attributes were defined.">지정된 형식의 모든 사용자 지정 특성을 포함하는 배열이거나, 정의된 특성이 없는 경우 요소가 없는 배열입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context">이 멤버가 리플렉션 전용 컨텍스트에 로드된 형식에 속하는 경우. 방법: 리플렉션 전용 컨텍스트에 어셈블리 로드</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="A custom attribute type cannot be loaded.">사용자 지정 특성 형식을 로드할 수 없는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributesData">
      <summary vsli:raw="Returns a list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects for the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt;.">현재 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />의 <see cref="T:System.Reflection.CustomAttributeData" /> 개체 목록을 반환합니다.</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt;.">현재 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />에 적용된 특성에 대한 데이터를 나타내는 <see cref="T:System.Reflection.CustomAttributeData" /> 개체의 제네릭 목록입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetOtherMethods(System.Boolean)">
      <summary vsli:raw="Returns the public or non-public methods that have been associated with an event in metadata.">메타데이터의 이벤트에 연결된 public 또는 public이 아닌 메서드를 반환합니다.</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">public이 아닌 메서드를 포함하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="An array representing the methods that have been associated with the event in metadata. If there are no such methods, an empty array is returned.">메타데이터의 이벤트에 연결된 메서드를 나타내는 배열입니다. 해당되는 메서드가 없으면 빈 배열이 반환됩니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, returns the method that was called when the event was raised.">파생 클래스에서 재정의된 경우 이벤트가 발생했을 때 호출된 메서드를 반환합니다.</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">public이 아닌 메서드를 반환하려면 <see langword="true" />를 설정하고, 그렇지 않으면 <see langword="false" />를 설정합니다.</param>
      <returns vsli:raw="The object that was called when the event was raised.">이벤트가 발생했을 때 호출된 개체입니다.</returns>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" />이 <see langword="true" />이고 이벤트 처리기 대리자를 추가하는 데 사용된 메서드가 public이 아니지만 호출자가 public이 아닌 메서드를 리플렉션할 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, retrieves the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object for removing a method of the event.">파생 클래스에서 재정의된 경우 해당 이벤트의 메서드를 제거하기 위해 <see cref="T:System.Reflection.MethodInfo" /> 개체를 검색합니다.</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">public이 아닌 메서드를 반환하려면 <see langword="true" />를 설정하고, 그렇지 않으면 <see langword="false" />를 설정합니다.</param>
      <returns vsli:raw="The method that was used to remove an event handler delegate from the event source.">이벤트 처리기 대리자를 이벤트 소스에서 제거하는 데 사용된 메서드입니다.</returns>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" />이 <see langword="true" />이고 이벤트 처리기 대리자를 추가하는 데 사용된 메서드가 public이 아니지만 호출자가 public이 아닌 메서드를 리플렉션할 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether one or more instances of the specified attribute are applied to this member.">지정된 특성을 가진 하나 이상의 인스턴스가 이 멤버에 적용되었는지 여부를 나타냅니다.</summary>
      <param name="attributeType" vsli:raw="The attribute type to search for.">검색할 특성 형식입니다.</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 멤버의 상속 체인을 검색하여 특성을 찾으려면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified attribute has been applied to this member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 특성이 이 멤버에 적용되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.MetadataToken">
      <summary vsli:raw="Gets the metadata token associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">현재 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 개체와 연결된 메타데이터 토큰을 가져옵니다.</summary>
      <returns vsli:raw="A 32-bit Integer that represents the metadata token.">메타 데이터 토큰을 나타내는 32 비트 정수입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Module">
      <summary vsli:raw="Gets the module associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">현재 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 개체와 연결된 모듈을 가져옵니다.</summary>
      <returns vsli:raw="The module associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">현재 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 개체와 연결 된 모듈입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary vsli:raw="Gets the name of the current member.">현재 멤버의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of this member.">이 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary vsli:raw="Gets the class object that was used to initialize this instance.">이 인스턴스를 초기화하는 데 사용된 클래스 개체를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to initialize the current object.">현재 개체를 초기화하는 데 사용된 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Detaches an event handler from a COM object.">COM 개체에서 이벤트 처리기를 분리합니다.</summary>
      <param name="target" vsli:raw="The target object that the event delegate is bound to.">이벤트 대리자가 바인딩되는 대상 개체입니다.</param>
      <param name="handler" vsli:raw="The event delegate.">이벤트 대리자입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The event does not have a public &lt;see langword=&quot;remove&quot; /&gt; accessor.">이 이벤트에 public <see langword="remove" /> 접근자가 없는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The handler that was passed in cannot be used.">전달된 처리기를 사용할 수 없는 경우</exception>
      <exception cref="T:System.Reflection.TargetException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt; and the event is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; is not declared on the target.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch &lt;see cref=&quot;T:System.Exception&quot; /&gt; instead.">Windows 스토어 앱용 .NET 또는 이식 가능한 클래스 라이브러리에서 대신 <see cref="T:System.Exception" />을 catch합니다.  
  

            
  
 <paramref name="target" /> 매개 변수가 <see langword="null" />이고 이벤트가 static이 아닌 경우  
  
또는 
<see cref="T:System.Reflection.EventInfo" /> 가 대상에서 선언되지 않은 경우</exception>
      <exception cref="T:System.MethodAccessException" vsli:raw="The caller does not have access permission to the member.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch the base class exception, &lt;see cref=&quot;T:System.MemberAccessException&quot; /&gt;, instead.">Windows 스토어 앱용 .NET 또는 이식 가능한 클래스 라이브러리에서 대신 기본 클래스 예외 <see cref="T:System.MemberAccessException" />을 catch합니다.  
  

            
  
 호출자에게 멤버에 대한 액세스 권한이 없는 경우</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary vsli:raw="Indicates to a COM client that all classes in the current version of an assembly are compatible with classes in an earlier version of the assembly.">현재 어셈블리 버전의 모든 클래스가 이전 어셈블리 버전의 클래스와 호환된다는 것을 COM 클라이언트에 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComCompatibleVersionAttribute&quot; /&gt; class with the major version, minor version, build, and revision numbers of the assembly.">주 버전, 부 버전, 빌드 번호 및 수정 번호를 사용하여 <see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="major" vsli:raw="The major version number of the assembly.">어셈블리의 주 버전 번호입니다.</param>
      <param name="minor" vsli:raw="The minor version number of the assembly.">어셈블리의 부 버전 번호입니다.</param>
      <param name="build" vsli:raw="The build number of the assembly.">어셈블리의 빌드 번호입니다.</param>
      <param name="revision" vsli:raw="The revision number of the assembly.">어셈블리의 수정 번호입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary vsli:raw="Gets the build number of the assembly.">어셈블리의 빌드 번호를 가져옵니다.</summary>
      <returns vsli:raw="The build number of the assembly.">어셈블리의 빌드 번호입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the assembly.">어셈블리의 주 버전 번호를 가져옵니다.</summary>
      <returns vsli:raw="The major version number of the assembly.">어셈블리의 주 버전 번호입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the assembly.">어셈블리의 부 버전 번호를 가져옵니다.</summary>
      <returns vsli:raw="The minor version number of the assembly.">어셈블리의 부 버전 번호입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary vsli:raw="Gets the revision number of the assembly.">어셈블리의 수정 번호를 가져옵니다.</summary>
      <returns vsli:raw="The revision number of the assembly.">어셈블리의 수정 번호입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary vsli:raw="Indicates that information was lost about a class or interface when it was imported from a type library to an assembly.">형식 라이브러리에서 어셈블리로 클래스 또는 인터페이스를 가져올 때 클래스 또는 인터페이스에 대한 정보가 손실되었음을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ComConversionLossAttribute&quot; /&gt; class.">
        <see langword="ComConversionLossAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary vsli:raw="Specifies a default interface to expose to COM. This class cannot be inherited.">COM에 노출할 기본 인터페이스를 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Type&quot; /&gt; object as the default interface exposed to COM.">지정된 <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> 개체를 COM에 노출되는 기본 인터페이스로 설정하여 <see cref="T:System.Type" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="defaultInterface" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; value indicating the default interface to expose to COM.">COM에 노출할 기본 인터페이스를 나타내는 <see cref="T:System.Type" /> 값입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the default interface to expose to COM.">COM에 노출할 기본 인터페이스를 지정하는 <see cref="T:System.Type" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the default interface to expose to COM.">COM에 노출할 기본 인터페이스를 지정하는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary vsli:raw="Identifies the source interface and the class that implements the methods of the event interface that is generated when a coclass is imported from a COM type library.">COM 형식 라이브러리에서 coclass를 가져올 때 생성되는 이벤트 인터페이스의 메서드를 구현하는 원본 인터페이스 및 클래스를 식별합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComEventInterfaceAttribute&quot; /&gt; class with the source interface and event provider class.">소스 인터페이스와 이벤트 공급자 클래스를 사용하여 <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="SourceInterface" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the original source interface from the type library. COM uses this interface to call back to the managed class.">형식 라이브러리의 원본 소스 인터페이스를 포함하는 <see cref="T:System.Type" />입니다. COM에서는 이 인터페이스를 사용하여 관리되는 클래스를 다시 호출합니다.</param>
      <param name="EventProvider" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class that implements the methods of the event interface.">이벤트 인터페이스의 메서드를 구현하는 클래스를 포함하는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary vsli:raw="Gets the class that implements the methods of the event interface.">이벤트 인터페이스의 메서드를 구현하는 클래스를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class that implements the methods of the event interface.">이벤트 인터페이스의 메서드를 구현하는 클래스를 포함하는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary vsli:raw="Gets the original source interface from the type library.">형식 라이브러리에서 원본 소스 인터페이스를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the source interface.">소스 인터페이스를 포함하는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary vsli:raw="Provides methods that enable .NET delegates that handle events to be added and removed from COM objects.">이벤트를 처리하는 .NET Framework 대리자를 COM 개체에 추가 및 제거할 수 있는 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary vsli:raw="Adds a delegate to the invocation list of events originating from a COM object.">COM 개체에서 발생된 이벤트의 호출 목록에 대리자를 추가합니다.</summary>
      <param name="rcw" vsli:raw="The COM object that triggers the events the caller would like to respond to.">호출자가 응답하려고 하는 이벤트를 트리거하는 COM 개체입니다.</param>
      <param name="iid" vsli:raw="The identifier of the source interface used by the COM object to trigger events.">COM 개체에서 이벤트를 트리거하기 위해 사용하는 소스 인터페이스의 식별자입니다.</param>
      <param name="dispid" vsli:raw="The dispatch identifier of the method on the source interface.">소스 인터페이스의 메서드에 대한 디스패치 식별자입니다.</param>
      <param name="d" vsli:raw="The delegate to invoke when the COM event is fired.">COM 이벤트가 발생될 때 호출할 대리자입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary vsli:raw="Removes a delegate from the invocation list of events originating from a COM object.">COM 개체에서 발생된 이벤트의 호출 목록에서 대리자를 제거합니다.</summary>
      <param name="rcw" vsli:raw="The COM object the delegate is attached to.">대리자가 연결될 COM 개체입니다.</param>
      <param name="iid" vsli:raw="The identifier of the source interface used by the COM object to trigger events.">COM 개체에서 이벤트를 트리거하기 위해 사용하는 소스 인터페이스의 식별자입니다.</param>
      <param name="dispid" vsli:raw="The dispatch identifier of the method on the source interface.">소스 인터페이스의 메서드에 대한 디스패치 식별자입니다.</param>
      <param name="d" vsli:raw="The delegate to remove from the invocation list.">호출 목록에서 제거할 대리자입니다.</param>
      <returns vsli:raw="The delegate that was removed from the invocation list.">호출 목록에서 제거된 대리자입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary vsli:raw="The exception that is thrown when an unrecognized HRESULT is returned from a COM method call.">COM 메서드 호출에서 인식할 수 없는 HRESULT가 반환되는 경우에 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with default values.">기본값을 사용하여 <see cref="T:System.Runtime.InteropServices.COMException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class from serialization data.">serialization 데이터로부터 <see cref="T:System.Runtime.InteropServices.COMException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that holds the serialized object data.">serialize된 개체 데이터를 유지하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that supplies the contextual information about the source or destination.">소스 또는 대상에 대한 컨텍스트 정보를 제공하는 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified message.">지정된 메시지를 사용하여 <see cref="T:System.Runtime.InteropServices.COMException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">예외에 대한 이유를 나타내는 메시지입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Runtime.InteropServices.COMException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified message and error code.">지정된 메시지와 오류 코드를 사용하여 <see cref="T:System.Runtime.InteropServices.COMException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that indicates the reason the exception occurred.">예외가 발생한 이유를 나타내는 메시지입니다.</param>
      <param name="errorCode" vsli:raw="The error code (HRESULT) value associated with this exception.">이 예외와 관련된 오류 코드(HRESULT) 값입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary vsli:raw="Converts the contents of the exception to a string.">예외의 내용을 문자열로 변환합니다.</summary>
      <returns vsli:raw="A string containing the &lt;see cref=&quot;P:System.Exception.HResult&quot; /&gt;, &lt;see cref=&quot;P:System.Exception.Message&quot; /&gt;, &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt;, and &lt;see cref=&quot;P:System.Exception.StackTrace&quot; /&gt; properties of the exception.">예외의 <see cref="P:System.Exception.HResult" />, <see cref="P:System.Exception.Message" />, <see cref="P:System.Exception.InnerException" /> 및 <see cref="P:System.Exception.StackTrace" /> 속성을 포함하는 문자열입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary vsli:raw="Indicates that the attributed type was previously defined in COM.">특성 사용 형식이 COM에서 미리 정의되었다는 것을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComImportAttribute&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary vsli:raw="Identifies how to expose an interface to COM.">COM에 인터페이스를 노출하는 방법을 확인합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary vsli:raw="Indicates that the interface is exposed to COM as a dual interface, which enables both early and late binding. &lt;see cref=&quot;F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual&quot; /&gt; is the default value.">인터페이스가 초기 바인딩 및 런타임에 바인딩을 둘 다 가능하게 하는 이중 인터페이스로 COM에 노출됨을 나타냅니다. 기본값은 <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" />입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary vsli:raw="Indicates that an interface is exposed to COM as a dispinterface, which enables late binding only.">인터페이스가 런타임에 바인딩만 가능하게 하는 dispinterface로 COM에 노출됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary vsli:raw="Indicates that an interface is exposed to COM as a Windows Runtime interface.">인터페이스가 COM에 Windows 런타임 인터페이스로 노출됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary vsli:raw="Indicates that an interface is exposed to COM as an interface that is derived from IUnknown, which enables only early binding.">인터페이스에서 초기 바인딩만 가능하게 하는 IUnknown에서 파생된 인터페이스로 COM에 노출됨을 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary vsli:raw="Describes the type of a COM member.">COM 멤버의 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary vsli:raw="The member is a normal method.">멤버는 일반 메서드입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary vsli:raw="The member gets properties.">멤버는 속성을 가져옵니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary vsli:raw="The member sets properties.">멤버는 속성을 설정합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary vsli:raw="Specifies the method to call when you register an assembly for use from COM; this enables the execution of user-written code during the registration process.">COM에서 사용할 어셈블리를 등록할 때 호출할 메서드를 지정합니다. 이렇게 하면 등록 중에 사용자가 작성한 코드를 실행할 수 있습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComRegisterFunctionAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary vsli:raw="Identifies a list of interfaces that are exposed as COM event sources for the attributed class.">특성 사용 클래스에 대한 COM 이벤트 원본으로 노출된 인터페이스의 목록을 확인합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the name of the event source interface.">이벤트 소스 인터페이스의 이름을 사용하여 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="sourceInterfaces" vsli:raw="A null-delimited list of fully qualified event source interface names.">정규화된 이벤트 소스 인터페이스 이름의 null 구분 목록입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the type to use as a source interface.">소스 인터페이스로 사용할 형식을 사용하여 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="sourceInterface" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source interface.">소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">소스 인터페이스로 사용할 형식을 사용하여 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">기본 소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">소스 인터페이스로 사용할 형식을 사용하여 <see langword="ComSourceInterfacesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">기본 소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
      <param name="sourceInterface3" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">소스 인터페이스로 사용할 형식을 사용하여 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">기본 소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
      <param name="sourceInterface3" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
      <param name="sourceInterface4" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary vsli:raw="Gets the fully qualified name of the event source interface.">이벤트 소스 인터페이스의 정규화된 이름을 가져옵니다.</summary>
      <returns vsli:raw="The fully qualified name of the event source interface.">이벤트 소스 인터페이스의 정규화된 이름입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary vsli:raw="Specifies the requested behavior when setting up an advise sink or a caching connection with an object.">advise 싱크나 개체와의 캐시 연결을 설정할 때 요청되는 동작을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary vsli:raw="For data advisory connections, assures accessibility to data.">데이터 advise 연결의 경우, 데이터에 대한 액세스 가능성을 보장합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary vsli:raw="For data advisory connections (&lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt;), this flag requests the data object not to send data when it calls &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;.">데이터 advise 연결(<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> 또는 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />)의 경우, 이 플래그는 <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />를 호출할 때 데이터 개체에서 데이터를 보내지 않도록 요청합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary vsli:raw="Requests that the object make only one change notification or cache update before deleting the connection.">연결을 삭제하기 전에 개체에서 하나의 변경 알림만 만들거나 캐시를 업데이트하도록 요청합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary vsli:raw="Requests that the object not wait for the data or view to change before making an initial call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; (for data or view advisory connections) or updating the cache (for cache connections).">데이터가 변경될 때까지 기다리지 않고 개체에서 <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />에 대한 초기 호출(데이터 또는 뷰 advise 연결의 경우) 또는 캐시 업데이트(캐시 연결의 경우)를 수행하도록 요청합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary vsli:raw="This value is used by DLL object applications and object handlers that perform the drawing of their objects.">이 값은 DLL 개체 애플리케이션과 해당 개체의 그리기를 수행하는 개체 처리기에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary vsli:raw="Synonym for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN&quot; /&gt;, which is used more often.">보다 일반적으로 사용되는 <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN" />의 동의어입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary vsli:raw="For cache connections, this flag updates the cached representation only when the object containing the cache is saved.">캐시 연결의 경우, 이 플래그는 캐시가 들어 있는 개체가 저장될 때만 캐시된 표현을 업데이트합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary vsli:raw="Stores the parameters that are used during a moniker binding operation.">모니커 바인딩 작업 중에 사용되는 매개 변수를 저장합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary vsli:raw="Specifies the size, in bytes, of the &lt;see langword=&quot;BIND_OPTS&quot; /&gt; structure.">
        <see langword="BIND_OPTS" /> 구조체의 크기를 바이트 단위로 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary vsli:raw="Indicates the amount of time (clock time in milliseconds, as returned by the &lt;see langword=&quot;GetTickCount&quot; /&gt; function) that the caller specified to complete the binding operation.">호출자가 바인딩 작업을 완료하도록 지정한 시간(<see langword="GetTickCount" /> 함수가 반환하는 밀리초 단위의 시간)을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary vsli:raw="Controls aspects of moniker binding operations.">모니커 바인딩 작업의 여러 측면을 제어합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary vsli:raw="Represents flags that should be used when opening the file that contains the object identified by the moniker.">모니커가 식별한 개체가 들어 있는 파일을 열 때 사용해야 하는 플래그를 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary vsli:raw="Contains a pointer to a bound-to &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure, &lt;see cref=&quot;T:System.Runtime.InteropServices.VARDESC&quot; /&gt; structure, or an &lt;see langword=&quot;ITypeComp&quot; /&gt; interface.">바인딩 대상 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 구조체, <see cref="T:System.Runtime.InteropServices.VARDESC" /> 구조체 또는 <see langword="ITypeComp" /> 인터페이스에 대한 포인터를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary vsli:raw="Represents a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure.">
        <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 구조체에 대한 포인터를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary vsli:raw="Represents a pointer to an &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ITypeComp&quot; /&gt; interface.">
        <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp" /> 인터페이스에 대한 포인터를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary vsli:raw="Represents a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.VARDESC&quot; /&gt; structure.">
        <see cref="T:System.Runtime.InteropServices.VARDESC" /> 구조체에 대한 포인터를 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary vsli:raw="Identifies the calling convention used by a method described in a METHODDATA structure.">METHODDATA 구조체에서 설명한 메서드에서 사용하는 호출 규칙을 식별합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary vsli:raw="Indicates that the C declaration (CDECL) calling convention is used for a method.">메서드에 대해 C 선언(CDECL) 호출 규칙이 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary vsli:raw="Indicates that the Macintosh Pascal (MACPASCAL) calling convention is used for a method.">메서드에 대해 Macintosh Pascal(MACPASCAL) 호출 규칙이 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary vsli:raw="Indicates the end of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.CALLCONV&quot; /&gt; enumeration.">
        <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" /> 열거형의 끝을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary vsli:raw="Indicates that the Macintosh Programmers' Workbench (MPW) CDECL calling convention is used for a method.">메서드에 대해 Macintosh Programmers' Workbench(MPW) CDECL 호출 규칙이 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary vsli:raw="Indicates that the Macintosh Programmers' Workbench (MPW) PASCAL calling convention is used for a method.">메서드에 대해 Macintosh Programmers' Workbench(MPW) PASCAL 호출 규칙이 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary vsli:raw="Indicates that the MSC Pascal (MSCPASCAL) calling convention is used for a method.">메서드에 대해 MSC Pascal(MSCPASCAL) 호출 규칙이 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary vsli:raw="Indicates that the Pascal calling convention is used for a method.">메서드에 대해 Pascal 호출 규칙이 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary vsli:raw="This value is reserved for future use.">이 값은 나중에 사용할 수 있도록 예약되었습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary vsli:raw="Indicates that the standard calling convention (STDCALL) is used for a method.">메서드에 대해 표준 호출 규칙(STDCALL)이 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary vsli:raw="Indicates that the standard SYSCALL calling convention is used for a method.">메서드에 대해 표준 SYSCALL 호출 규칙이 사용됨을 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary vsli:raw="Describes a connection that exists to a given connection point.">지정된 연결점에 대해 존재하는 연결을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary vsli:raw="Represents a connection token that is returned from a call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />에 대한 호출에서 반환되는 연결 토큰을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary vsli:raw="Represents a pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface on a connected advisory sink. The caller must call &lt;see langword=&quot;IUnknown::Release&quot; /&gt; on this pointer when the &lt;see langword=&quot;CONNECTDATA&quot; /&gt; structure is no longer needed.">연결된 advise 싱크의 <see langword="IUnknown" /> 인터페이스에 대한 포인터를 나타냅니다. <see langword="IUnknown::Release" /> 구조체가 더 이상 필요하지 않으면 호출자는 이 포인터에서 <see langword="CONNECTDATA" />를 호출해야 합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary vsli:raw="Specifies the direction of the data flow in the &lt;paramref name=&quot;dwDirection&quot; /&gt; parameter of the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; method. This determines the formats that the resulting enumerator can enumerate.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 메서드의 <paramref name="dwDirection" /> 매개 변수에서 설정되는 데이터 흐름의 방향을 지정합니다. 이 메서드는 결과 열거자가 열거할 수 있는 형식을 결정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary vsli:raw="Requests that &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; supply an enumerator for the formats that can be specified in &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" />가 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />에 지정할 수 있는 형식에 대한 열거자를 제공하도록 요청합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary vsli:raw="Requests that &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; supply an enumerator for the formats that can be specified in &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" />가 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />에 지정할 수 있는 형식에 대한 열거자를 제공하도록 요청합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary vsli:raw="Identifies the type description being bound to.">바인딩되는 형식 설명을 식별합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary vsli:raw="Indicates that a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure was returned.">
        <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 구조체가 반환되었음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary vsli:raw="Indicates that an &lt;see langword=&quot;IMPLICITAPPOBJ&quot; /&gt; was returned.">
        <see langword="IMPLICITAPPOBJ" />가 반환되었음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary vsli:raw="Indicates an end-of-enumeration marker.">열거형 마커의 끝을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary vsli:raw="Indicates that no match was found.">일치하는 항목을 찾을 수 없음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary vsli:raw="Indicates that a &lt;see langword=&quot;TYPECOMP&quot; /&gt; was returned.">
        <see langword="TYPECOMP" />가 반환되었음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary vsli:raw="Indicates that a &lt;see langword=&quot;VARDESC&quot; /&gt; was returned.">
        <see langword="VARDESC" />가 반환되었음을 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary vsli:raw="Contains the arguments passed to a method or property by &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">
        <see langword="IDispatch::Invoke" />를 통해 메서드 또는 속성에 전달된 인수를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary vsli:raw="Represents the count of arguments.">인수의 수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary vsli:raw="Represents the count of named arguments.">명명된 인수의 수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary vsli:raw="Represents the dispatch IDs of named arguments.">명명된 인수의 디스패치 ID를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary vsli:raw="Represents a reference to the array of arguments.">인수 배열에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary vsli:raw="Specifies the desired data or view aspect of the object when drawing or getting data.">데이터를 그리거나 가져올 때 개체의 원하는 데이터 또는 뷰 모양을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary vsli:raw="A representation of an object that lets that object be displayed as an embedded object inside a container. This value is typically specified for compound document objects. The presentation can be provided for the screen or printer.">개체를 컨테이너 내에 포함 개체로 표시하는 데 사용할 수 있는 개체 표현입니다. 일반적으로 복합 문서 개체에 대해 이 값을 지정합니다. 이 표시 방식은 화면 또는 프린터에 대해 제공될 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary vsli:raw="A representation of an object on the screen as though it were printed to a printer using the Print command from the File menu. The described data may represent a sequence of pages.">파일 메뉴에서 인쇄 명령을 사용하여 프린터로 인쇄할 때와 같은 방식으로 화면에 개체를 표현합니다. 설명된 데이터가 페이지 순서를 나타낼 수도 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary vsli:raw="An iconic representation of an object.">개체의 아이콘 표현입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary vsli:raw="A thumbnail representation of an object that lets that object be displayed in a browsing tool. The thumbnail is approximately a 120 by 120 pixel, 16-color (recommended), device-independent bitmap potentially wrapped in a metafile.">해당 개체를 검색 도구에 표시할 때 사용할 수 있는 개체의 축소판 표현입니다. 축소판은 메타파일에 래핑될 수 있는 약 120x120픽셀 크기의, 16색(권장) 디바이스 독립적 비트맵입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary vsli:raw="Contains the type description and process transfer information for a variable, function, or a function parameter.">변수, 함수 또는 함수 매개 변수에 대한 형식 설명과 프로세스 전달 정보를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary vsli:raw="Contains information about an element.">요소에 대한 정보를 포함합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary vsli:raw="Contains information about an element.">요소에 대한 정보를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary vsli:raw="Contains information for remoting the element.">요소 원격화 정보를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary vsli:raw="Contains information about the parameter.">매개 변수에 대한 정보를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary vsli:raw="Identifies the type of the element.">요소의 형식을 식별합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary vsli:raw="Describes the exceptions that occur during &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">
        <see langword="IDispatch::Invoke" />에서 발생하는 예외를 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary vsli:raw="Describes the error intended for the customer.">고객을 위한 오류를 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary vsli:raw="Contains the fully-qualified drive, path, and file name of a Help file that contains more information about the error.">오류에 대한 자세한 정보를 포함하는 도움말 파일의 정규화된 드라이브, 경로 및 파일 이름을 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary vsli:raw="Indicates the name of the source of the exception. Typically, this is an application name.">예외 소스의 이름을 나타냅니다. 일반적으로 이 이름은 애플리케이션 이름입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary vsli:raw="Indicates the Help context ID of the topic within the Help file.">도움말 파일 내에서 해당 항목의 도움말 컨텍스트 ID를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary vsli:raw="Represents a pointer to a function that takes an &lt;see cref=&quot;T:System.Runtime.InteropServices.EXCEPINFO&quot; /&gt; structure as an argument and returns an HRESULT value. If deferred fill-in is not desired, this field is set to &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.EXCEPINFO" /> 구조체를 인수로 사용하고 HRESULT 값을 반환하는 함수에 대한 포인터를 나타냅니다. 지연된 채우기가 적절하지 않으면 이 필드는 <see langword="null" />로 설정됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary vsli:raw="This field is reserved; it must be set to &lt;see langword=&quot;null&quot; /&gt;.">이 필드는 예약되어 있으므로 <see langword="null" />로 설정해야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary vsli:raw="A return value describing the error.">오류를 설명하는 반환 값입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary vsli:raw="Represents an error code identifying the error.">오류를 식별하는 오류 코드를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary vsli:raw="This field is reserved; it must be set to 0.">이 필드는 예약되어 있으므로 0으로 설정해야 합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary vsli:raw="Represents the number of 100-nanosecond intervals since January 1, 1601. This structure is a 64-bit value.">1601년 1월 1일 이후 경과한 100나노초 간격의 수를 나타냅니다. 이 구조체는 64비트 값입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary vsli:raw="Specifies the high 32 bits of the &lt;see langword=&quot;FILETIME&quot; /&gt;.">
        <see langword="FILETIME" />의 상위 32비트를 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary vsli:raw="Specifies the low 32 bits of the &lt;see langword=&quot;FILETIME&quot; /&gt;.">
        <see langword="FILETIME" />의 하위 32비트를 지정합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary vsli:raw="Represents a generalized Clipboard format.">일반화된 클립보드 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary vsli:raw="Specifies the particular clipboard format of interest.">원하는 특정 클립보드 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary vsli:raw="Specifies one of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DVASPECT&quot; /&gt; enumeration constants that indicates how much detail should be contained in the rendering.">렌더링 상세 수준을 나타내는 <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 열거형 상수 중 하나를 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary vsli:raw="Specifies part of the aspect when the data must be split across page boundaries.">데이터를 여러 페이지로 분할해야 할 때의 모양을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary vsli:raw="Specifies a pointer to a &lt;see langword=&quot;DVTARGETDEVICE&quot; /&gt; structure containing information about the target device that the data is being composed for.">데이터가 작성되는 대상 디바이스에 대한 정보가 들어 있는 <see langword="DVTARGETDEVICE" /> 구조체에 대한 포인터를 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary vsli:raw="Specifies one of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; enumeration constants, which indicates the type of storage medium used to transfer the object's data.">개체의 데이터를 전송하는 데 사용되는 스토리지 미디어 형식을 나타내는 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 열거형 상수 중 하나를 지정합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary vsli:raw="Defines a function description.">함수 설명을 정의합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary vsli:raw="Specifies the calling convention of a function.">함수의 호출 규칙을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary vsli:raw="Counts the total number of parameters.">총 매개 변수 수를 계산합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary vsli:raw="Counts the optional parameters.">선택적인 매개 변수를 계산합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary vsli:raw="Counts the permitted return values.">허용된 반환 값을 계산합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary vsli:raw="Contains the return type of the function.">함수의 반환 형식을 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary vsli:raw="Specifies whether the function is virtual, static, or dispatch-only.">함수가 가상 함수인지 정적 함수인지 또는 디스패치 전용인지 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary vsli:raw="Specifies the type of a property function.">속성 함수의 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary vsli:raw="Indicates the array of &lt;see cref=&quot;F:System.Runtime.InteropServices.ELEMDESC&quot; /&gt;.">
        <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" />의 크기를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary vsli:raw="Stores the count of errors a function can return on a 16-bit system.">16비트 시스템에서 함수가 반환할 수 있는 오류 수를 저장합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary vsli:raw="Identifies the function member ID.">함수 멤버 ID를 식별합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary vsli:raw="Specifies the offset in the VTBL for &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL&quot; /&gt;.">
        <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" />의 VTBL에 있는 오프셋을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary vsli:raw="Indicates the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCFLAGS&quot; /&gt; of a function.">함수의 <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" />를 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary vsli:raw="Identifies the constants that define the properties of a function.">함수의 속성을 정의하는 상수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary vsli:raw="The function that supports data binding.">데이터 바인딩을 지원하는 함수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary vsli:raw="The function that best represents the object. Only one function in a type can have this attribute.">개체를 가장 잘 표현하는 함수입니다. 형식에 있는 한 함수만 이 특성을 가질 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type of &quot;abc&quot;. If such a member is found, and is flagged as an accessor function for an element of the default collection, a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.">컴파일러가 “abc” 형식에서 이름이 “xyz”인 멤버를 찾는 최적화를 허용합니다. 이러한 멤버를 발견하여 기본 컬렉션의 요소에 대한 접근자 함수로 플래그하면, 호출은 해당 멤버 함수로 생성됩니다. 모듈에서 허용되지 않고 dispinterface와 인터페이스의 멤버에서 허용됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary vsli:raw="The function that is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE&quot; /&gt; must also be set.">사용자에게 바인딩할 수 있는 것으로 표시되는 함수입니다. <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" />도 설정되어야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary vsli:raw="The function should not be displayed to the user, although it exists and is bindable.">함수가 존재하고 바인딩 가능하더라도 사용자에게 표시되면 안 됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary vsli:raw="Mapped as individual bindable properties.">별개의 바인딩 가능한 속성으로 매핑되었습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary vsli:raw="The property appears in an object browser, but not in a properties browser.">이 속성은 속성 브라우저가 아니라 개체 브라우저에 나타납니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary vsli:raw="Tags the interface as having default behaviors.">인터페이스가 기본 동작을 사용하는 것으로 표시합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary vsli:raw="When set, any call to a method that sets the property results first in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;. The implementation of &lt;see langword=&quot;OnRequestEdit&quot; /&gt; determines if the call is allowed to set the property.">설정된 경우, 속성을 설정하는 메서드를 호출하면 먼저 <see langword="IPropertyNotifySink::OnRequestEdit" />가 호출됩니다. <see langword="OnRequestEdit" />를 구현하면 호출이 속성을 설정하도록 허용될지 결정됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary vsli:raw="The function should not be accessible from macro languages. This flag is intended for system-level functions or functions that type browsers should not display.">매크로 언어에서 함수에 액세스해서는 안 됩니다. 이 플래그는 시스템 수준 함수 또는 형식 브라우저가 표시하지 않는 함수를 위한 것입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary vsli:raw="The function returns an object that is a source of events.">이 함수는 이벤트의 소스인 개체를 반환합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary vsli:raw="The type information member is the default member for display in the user interface.">형식 정보 멤버는 사용자 인터페이스에 표시하는 기본 멤버입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary vsli:raw="The function supports &lt;see langword=&quot;GetLastError&quot; /&gt;. If an error occurs during the function, the caller can call &lt;see langword=&quot;GetLastError&quot; /&gt; to retrieve the error code.">이 함수는 <see langword="GetLastError" />를 지원합니다. 함수에서 오류가 발생하면 호출자가 <see langword="GetLastError" />를 호출하여 오류 코드를 검색할 수 있습니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary vsli:raw="Defines how to access a function.">함수에 액세스하는 방법을 정의합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary vsli:raw="The function can be accessed only through &lt;see langword=&quot;IDispatch&quot; /&gt;.">함수는 <see langword="IDispatch" />를 통해서만 액세스됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary vsli:raw="The function is accessed by &lt;see langword=&quot;static&quot; /&gt; address and takes an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">함수는 <see langword="static" /> 주소로 액세스되고 암시적인 <see langword="this" /> 포인터를 사용합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary vsli:raw="The function is accessed through the virtual function table (VTBL), and takes an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">함수는 VTBL(가상 함수 테이블)을 통해 액세스되고 암시적인 <see langword="this" /> 포인터를 사용합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary vsli:raw="The function is accessed by &lt;see langword=&quot;static&quot; /&gt; address and does not take an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">함수는 <see langword="static" /> 주소로 액세스되고 암시적인 <see langword="this" /> 포인터를 사용하지 않습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary vsli:raw="The function is accessed in the same way as &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL&quot; /&gt;, except the function has an implementation.">이 함수는 구현된다는 점을 제외하고는 <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" />과 동일한 방식으로 액세스됩니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary vsli:raw="Provides a managed definition of the &lt;see langword=&quot;IAdviseSink&quot; /&gt; interface.">
        <see langword="IAdviseSink" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has changed from the running state to the loaded state.  This method is called by a server.">등록된 모든 advise 싱크에 개체가 실행 상태에서 로드된 상태로 변경되었음을 알립니다.  이 메서드는 서버에서 호출됩니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Notifies all data objects currently registered advisory sinks that data in the object has changed.">모든 데이터 개체의 현재 등록된 advise 싱크에 개체의 데이터가 변경되었음을 알립니다.</summary>
      <param name="format" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt;, passed by reference, which describes the format, target device, rendering, and storage information of the calling data object.">호출 데이터 개체의 형식, 대상 디바이스, 렌더링 및 스토리지 정보를 설명하는 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />로, 참조로 전달됩니다.</param>
      <param name="stgmedium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;, passed by reference, which defines the storage medium (global memory, disk file, storage object, stream object, Graphics Device Interface (GDI) object, or undefined) and ownership of that medium for the calling data object.">호출 데이터 개체의 스토리지 미디어(글로벌 메모리, 디스크 파일, 스토리지 개체, 스트림 개체, GDI(Graphics Device Interface) 개체 또는 정의되지 않은 미디어)와 해당 미디어의 소유권을 정의하는 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />로, 참조로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has been renamed. This method is called by a server.">등록된 모든 advise 싱크에 개체 이름이 바뀌었음을 알립니다. 이 메서드는 서버에서 호출됩니다.</summary>
      <param name="moniker" vsli:raw="A pointer to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on the new full moniker of the object.">개체의 새로운 전체 모니커에 있는 <see langword="IMoniker" /> 인터페이스에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has been saved. This method is called by a server.">등록된 모든 advise 싱크에 개체가 저장되었음을 알립니다. 이 메서드는 서버에서 호출됩니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary vsli:raw="Notifies an object's registered advisory sinks that its view has changed. This method is called by a server.">개체의 등록된 advise 싱크에 개체 뷰가 변경되었음을 알립니다. 이 메서드는 서버에서 호출됩니다.</summary>
      <param name="aspect" vsli:raw="The aspect, or view, of the object. Contains a value taken from the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DVASPECT&quot; /&gt; enumeration.">개체의 모양 또는 뷰입니다. <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 열거형에서 가져온 값이 포함되어 있습니다.</param>
      <param name="index" vsli:raw="The portion of the view that has changed. Currently, only -1 is valid.">변경된 뷰 부분입니다. 현재 -1만 유효합니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface.">
        <see langword="IBindCtx" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary vsli:raw="Enumerates the strings that are the keys of the internally maintained table of contextual object parameters.">내부적으로 유지되는 컨텍스트 개체 매개 변수 테이블의 키인 문자열을 열거합니다.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the object parameter enumerator. This parameter is passed uninitialized.">이 메서드는 반환될 때 개체 매개 변수 열거자에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary vsli:raw="Returns the current binding options stored in the current bind context.">현재 바인드 컨텍스트에 저장되어 있는 현재 바인딩 옵션을 반환합니다.</summary>
      <param name="pbindopts" vsli:raw="A pointer to the structure to receive the binding options.">바인딩 옵션을 받는 구조체에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary vsli:raw="Looks up the given key in the internally maintained table of contextual object parameters and returns the corresponding object, if one exists.">내부적으로 유지되는 컨텍스트 개체 매개 변수 테이블에서 지정한 키를 조회한 다음 해당하는 개체가 있으면 이를 반환합니다.</summary>
      <param name="pszKey" vsli:raw="The name of the object to search for.">검색할 개체의 이름입니다.</param>
      <param name="ppunk" vsli:raw="When this method returns, contains the object interface pointer. This parameter is passed uninitialized.">이 메서드는 반환될 때 개체 인터페이스 포인터를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary vsli:raw="Returns access to the Running Object Table (ROT) relevant to this binding process.">이 바인딩 프로세스와 관련된 ROT(실행 개체 테이블)에 대한 액세스를 반환합니다.</summary>
      <param name="pprot" vsli:raw="When this method returns, contains a reference to the Running Object Table (ROT). This parameter is passed uninitialized.">이 메서드는 반환될 때 ROT(실행 개체 테이블)에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary vsli:raw="Registers the passed object as one of the objects that has been bound during a moniker operation and that should be released when the operation is complete.">전달된 개체를 모니커 작업을 하는 동안 바인딩되고 작업이 완료되면 해제되어야 하는 개체 중 하나로 등록합니다.</summary>
      <param name="punk" vsli:raw="The object to register for release.">해제하기 위해 등록할 개체입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary vsli:raw="Registers the specified object pointer under the specified name in the internally maintained table of object pointers.">지정된 개체 포인터를 내부적으로 유지되는 개체 포인터 테이블에 지정된 이름으로 등록합니다.</summary>
      <param name="pszKey" vsli:raw="The name to register &lt;paramref name=&quot;punk&quot; /&gt; with.">
        <paramref name="punk" />를 등록할 이름입니다.</param>
      <param name="punk" vsli:raw="The object to register.">등록할 개체입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary vsli:raw="Releases all the objects currently registered with the bind context by using the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)" /> 메서드를 사용하여 바인드 컨텍스트에 현재 등록되어 있는 모든 개체를 해제합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary vsli:raw="Removes the object from the set of registered objects that need to be released.">등록된 개체의 집합에서 해제해야 하는 개체를 제거합니다.</summary>
      <param name="punk" vsli:raw="The object to unregister for release.">해제하기 위해 등록 취소할 개체입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary vsli:raw="Revokes the registration of the object currently found under the specified key in the internally maintained table of contextual object parameters, if that key is currently registered.">내부적으로 유지되는 컨텍스트 개체 매개 변수 테이블의 지정된 키가 현재 등록되어 있으면 해당 키 아래에 있는 개체의 등록을 취소합니다.</summary>
      <param name="pszKey" vsli:raw="The key to unregister.">등록 취소할 키입니다.</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the specified key was successfully removed from the table; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">지정된 키가 테이블에서 성공적으로 제거되었으면 <see langword="S_OK" /><see langword="HRESULT" /> 값이고, 그렇지 않으면 <see langword="S_FALSE" /><see langword="HRESULT" /> 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary vsli:raw="Stores a block of parameters in the bind context. These parameters will apply to later &lt;see langword=&quot;UCOMIMoniker&quot; /&gt; operations that use this bind context.">매개 변수 블록을 바인드 컨텍스트에 저장합니다. 이러한 매개 변수는 이 바인드 컨텍스트를 사용하는 나중 <see langword="UCOMIMoniker" /> 작업에 적용됩니다.</summary>
      <param name="pbindopts" vsli:raw="The structure containing the binding options to set.">설정할 바인딩 옵션이 들어 있는 구조체입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IConnectionPoint&quot; /&gt; interface.">
        <see langword="IConnectionPoint" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary vsli:raw="Establishes an advisory connection between the connection point and the caller's sink object.">연결점과 호출자의 싱크 개체 사이에 권장되는 연결을 설치합니다.</summary>
      <param name="pUnkSink" vsli:raw="A reference to the sink to receive calls for the outgoing interface managed by this connection point.">이 연결점이 관리하는 송신 인터페이스의 호출을 받는 싱크에 대한 참조입니다.</param>
      <param name="pdwCookie" vsli:raw="When this method returns, contains the connection cookie. This parameter is passed uninitialized.">이 메서드는 반환될 때 연결 쿠키를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary vsli:raw="Creates an enumerator object for iteration through the connections that exist to this connection point.">이 연결점에 있는 접속을 통해 반복적으로 열거자 개체를 만듭니다.</summary>
      <param name="ppEnum" vsli:raw="When this method returns, contains the newly created enumerator. This parameter is passed uninitialized.">이 메서드는 반환될 때 새로 만든 열거자를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary vsli:raw="Returns the IID of the outgoing interface managed by this connection point.">이 연결점이 관리하는 송신 인터페이스의 IID를 반환합니다.</summary>
      <param name="pIID" vsli:raw="When this parameter returns, contains the IID of the outgoing interface managed by this connection point. This parameter is passed uninitialized.">이 매개 변수는 반환될 때, 이 연결점이 관리하는 송신 인터페이스의 IID를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface pointer to the connectable object that conceptually owns this connection point.">이 연결점을 개념적으로 소유하는 연결 가능한 개체에 대한 <see langword="IConnectionPointContainer" /> 인터페이스 포인터를 검색합니다.</summary>
      <param name="ppCPC" vsli:raw="When this parameter returns, contains the connectable object's &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface. This parameter is passed uninitialized.">이 매개 변수는 반환될 때, 연결 가능한 개체의 <see langword="IConnectionPointContainer" /> 인터페이스를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary vsli:raw="Terminates an advisory connection previously established through the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 메서드를 통해 이전에 설치된 권장된 연결을 종료합니다</summary>
      <param name="dwCookie" vsli:raw="The connection cookie previously returned from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt; method.">이전에 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 메서드에서 반환된 연결 쿠키입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface.">
        <see langword="IConnectionPointContainer" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary vsli:raw="Creates an enumerator of all the connection points supported in the connectable object, one connection point per IID.">IID마다 하나의 연결점이 있는 연결 가능한 개체에서 지원되는 모든 연결점의 열거자를 만듭니다.</summary>
      <param name="ppEnum" vsli:raw="When this method returns, contains the interface pointer of the enumerator. This parameter is passed uninitialized.">이 메서드는 반환될 때 열거자의 인터페이스 포인터를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary vsli:raw="Asks the connectable object if it has a connection point for a particular IID, and if so, returns the &lt;see langword=&quot;IConnectionPoint&quot; /&gt; interface pointer to that connection point.">연결 가능한 개체가 특수한 하나의 IID에 대해 하나의 연결점을 가지는지 여부를 묻습니다. 연결점을 가지는 경우 해당 연결점에 대한 <see langword="IConnectionPoint" /> 인터페이스 포인터를 반환합니다.</summary>
      <param name="riid" vsli:raw="A reference to the outgoing interface IID whose connection point is being requested.">연결점이 요구되고 있는 송신 인터페이스 IID에 대한 참조입니다.</param>
      <param name="ppCP" vsli:raw="When this method returns, contains the connection point that manages the outgoing interface &lt;paramref name=&quot;riid&quot; /&gt;. This parameter is passed uninitialized.">이 메서드는 반환될 때. 송신 인터페이스 <paramref name="riid" />를 관리하는 연결 지점을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IDataObject&quot; /&gt; interface.">
        <see langword="IDataObject" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary vsli:raw="Creates a connection between a data object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.">데이터 개체와 advise 싱크 간의 연결을 만듭니다. 이 메서드는 advise 싱크를 지원하는 개체에 의해 호출되며, advise 싱크가 개체의 데이터 변경 내용에 대한 알림을 받을 수 있도록 합니다.</summary>
      <param name="pFormatetc" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.">이후의 알림에 사용될 형식, 대상 디바이스, 모양 및 미디어를 정의하는 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체로, 참조로 전달됩니다.</param>
      <param name="advf" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ADVF&quot; /&gt; values that specifies a group of flags for controlling the advisory connection.">advise 연결을 제어하기 위한 플래그 그룹을 지정하는 <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 값 중 하나입니다.</param>
      <param name="adviseSink" vsli:raw="A pointer to the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IAdviseSink&quot; /&gt; interface on the advisory sink that will receive the change notification.">변경 알림을 받을 advise 싱크의 <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 인터페이스에 대한 포인터입니다.</param>
      <param name="connection" vsli:raw="When this method returns, contains a pointer to a DWORD token that identifies this connection. You can use this token later to delete the advisory connection by passing it to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)&quot; /&gt;. If this value is zero, the connection was not established. This parameter is passed uninitialized.">이 메서드가 반환될 때 이 연결을 식별하는 DWORD 토큰에 대한 포인터를 포함합니다. 나중에 이 토큰을 사용하여 advise 연결을 삭제할 수 있습니다. 이 토큰을 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" />에 전달하면 됩니다. 연결이 설정되지 않은 경우에는 이 값이 0입니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The advisory connection was created.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; E_NOTIMPL&lt;/term&gt;&lt;description&gt; This method is not implemented on the data object.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; There is an invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; There is an invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_ADVISENOTSUPPORTED&lt;/term&gt;&lt;description&gt; The data object does not support change notification.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">이 메서드는 표준 반환 값 E_INVALIDARG, E_UNEXPECTED 및 E_OUTOFMEMORY와 함께 다음 값을 지원합니다.
  값 
  설명 
  S_OK 
  advise 연결을 만든 경우  
  
  E_NOTIMPL 
  이 메서드가 데이터 개체에 구현되지 않은 경우  
  
  DV_E_LINDEX 
  <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />의 값이 잘못된 경우(현재 -1만 지원됨)  
  
  DV_E_FORMATETC 
  <paramref name="pFormatetc" /> 매개 변수의 값이 잘못된 경우  
  
  OLE_E_ADVISENOTSUPPORTED 
  데이터 개체에서 변경 알림을 지원하지 않는 경우</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary vsli:raw="Destroys a notification connection that had been previously established.">이전에 설정된 알림 연결을 제거합니다.</summary>
      <param name="connection" vsli:raw="A DWORD token that specifies the connection to remove. Use the value returned by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)&quot; /&gt; when the connection was originally established.">제거할 연결을 지정하는 DWORD 토큰입니다. 연결이 처음부터 설정되어 있었으면 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" />에서 반환된 값을 사용합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary vsli:raw="Creates an object that can be used to enumerate the current advisory connections.">현재 advise 연결을 열거하는 데 사용할 수 있는 개체를 만듭니다.</summary>
      <param name="enumAdvise" vsli:raw="When this method returns, contains an &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA&quot; /&gt; that receives the interface pointer to the new enumerator object. If the implementation sets &lt;paramref name=&quot;enumAdvise&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;, there are no connections to advisory sinks at this time. This parameter is passed uninitialized.">이 메서드가 반환될 때 새 열거자 개체에 대한 인터페이스 포인터를 받는 <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" />를 포함합니다. 구현에서 <paramref name="enumAdvise" />를 <see langword="null" />로 설정한 경우 이 시점에서는 advise 싱크에 대한 연결이 없습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns vsli:raw="This method supports the standard return value E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The enumerator object is successfully instantiated or there are no connections.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_ADVISENOTSUPPORTED&lt;/term&gt;&lt;description&gt; This object does not support advisory notifications.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">이 메서드는 표준 반환 값 E_OUTOFMEMORY와 함께 다음 값을 지원합니다.
  값  
  
  설명  
  
  S_OK  
  
  이 열거자 개체가 성공적으로 인스턴스화되었거나 연결이 없는 경우  
  
  OLE_E_ADVISENOTSUPPORTED  
  
  이 개체에서 advise 알림을 지원하지 않는 경우</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary vsli:raw="Creates an object for enumerating the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures for a data object. These structures are used in calls to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;.">데이터 개체의 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체를 열거하기 위한 개체를 만듭니다. 이러한 구조체는 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 또는 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />를 호출할 때 사용됩니다.</summary>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DATADIR&quot; /&gt; values that specifies the direction of the data.">데이터의 방향을 지정하는 <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> 값 중 하나입니다.</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The enumerator object was successfully created.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; E_NOTIMPL&lt;/term&gt;&lt;description&gt; The direction specified by the &lt;paramref name=&quot;direction&quot; /&gt; parameter is not supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_S_USEREG&lt;/term&gt;&lt;description&gt; Requests that OLE enumerate the formats from the registry.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">이 메서드는 표준 반환 값 E_INVALIDARG 및 E_OUTOFMEMORY와 함께 다음 값을 지원합니다.
  값 
  설명 
  S_OK 
  열거자 개체를 성공적으로 만든 경우  
  
  E_NOTIMPL 
  <paramref name="direction" /> 매개 변수로 지정된 방향이 지원되지 않는 경우  
  
  OLE_S_USEREG 
  OLE에서 레지스트리의 형식을 열거하도록 요청할 경우</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary vsli:raw="Provides a standard &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure that is logically equivalent to a more complex structure. Use this method to determine whether two different &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures would return the same data, removing the need for duplicate rendering.">보다 복잡한 구조체와 논리적으로 일치하는 표준 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체를 제공합니다. 이 메서드를 사용하면 서로 다른 두 개의 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체에서 동일한 데이터를 반환하는지 여부를 확인하여 중복 렌더링이 필요하지 않게 할 수 있습니다.</summary>
      <param name="formatIn" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; member is not significant in this case and should be ignored.">호출자가 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />와 같은 후속 호출에서 데이터를 검색하는 데 사용하려는 형식, 미디어 및 대상 디바이스를 정의하는 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 구조체에 대한 포인터로, 참조로 전달됩니다. 이 경우 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 멤버는 중요하지 않으므로 무시됩니다.</param>
      <param name="formatOut" vsli:raw="When this method returns, contains a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure that contains the most general information possible for a specific rendering, making it canonically equivalent to &lt;c&gt;formatetcIn&lt;/c&gt;. The caller must allocate this structure and the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)&quot; /&gt; method must fill in the data. To retrieve data in a subsequent call such as &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;, the caller uses the supplied value of &lt;paramref name=&quot;formatOut&quot; /&gt;, unless the value supplied is &lt;see langword=&quot;null&quot; /&gt;. This value is &lt;see langword=&quot;null&quot; /&gt; if the method returns &lt;see langword=&quot;DATA_S_SAMEFORMATETC&quot; /&gt;. The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; member is not significant in this case and should be ignored. This parameter is passed uninitialized.">이 메서드가 반환될 때 특정 렌더링에 사용할 수 있는 가장 일반적인 정보가 포함된 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체에 대한 포인터를 <c>formatetcIn</c>과 같은 형식으로 포함합니다. 호출자는 이 구조체를 할당하고 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> 메서드가 데이터를 채워야 합니다. <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />와 같은 후속 호출에서 데이터를 검색하려는 경우 호출자는 제공된 <paramref name="formatOut" /> 값을 사용합니다. 단, 제공된 값이 <see langword="null" />이 아니어야 합니다. 메서드가 <see langword="null" />를 반환할 경우 이 값은 <see langword="DATA_S_SAMEFORMATETC" />입니다. 이 경우 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 멤버는 중요하지 않으므로 무시됩니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The returned &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure is different from the one that was passed.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DATA_S_SAMEFORMATETC&lt;/term&gt;&lt;description&gt; The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures are the same and &lt;see langword=&quot;null&quot; /&gt; is returned in the &lt;paramref name=&quot;formatOut&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; There is an invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; There is an invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_NOTRUNNING&lt;/term&gt;&lt;description&gt; The application is not running.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">이 메서드는 표준 반환 값 E_INVALIDARG, E_UNEXPECTED 및 E_OUTOFMEMORY와 함께 다음 값을 지원합니다.
  값 
  설명 
  S_OK 
  반환된 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체가 전달된 구조체와 다른 경우  
  
  DATA_S_SAMEFORMATETC 
  <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체가 같고 <paramref name="formatOut" /> 매개 변수에서 <see langword="null" />이 반환된 경우  
  
  DV_E_LINDEX 
  <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />의 값이 잘못된 경우(현재 -1만 지원됨)  
  
  DV_E_FORMATETC 
  <paramref name="pFormatetc" /> 매개 변수의 값이 잘못된 경우  
  
  OLE_E_NOTRUNNING 
  애플리케이션이 실행되고 있지 않은 경우</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Obtains data from a source data object. The &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; method, which is called by a data consumer, renders the data described in the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure and transfers it through the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure. The caller then assumes responsibility for releasing the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure.">소스 데이터 개체에서 데이터를 가져옵니다. 데이터 소비자에 의해 호출되는 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 메서드는 지정된 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체에 설명된 데이터를 렌더링하고, 지정된 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 구조체를 통해 이 데이터를 전송합니다. 그러면 호출자는 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 구조체를 해제하는 역할을 맡습니다.</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.">데이터를 전달할 때 사용할 형식, 미디어 및 대상 디바이스를 정의하는 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체에 대한 포인터로, 참조로 전달됩니다. 메서드에서 지정된 미디어 중 가장 적합한 미디어를 선택할 수 있도록 부울 OR 연산자를 사용하여 둘 이상의 미디어를 지정할 수도 있습니다.</param>
      <param name="medium" vsli:raw="When this method returns, contains a pointer to the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure that indicates the storage medium containing the returned data through its &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed&quot; /&gt; member, and the responsibility for releasing the medium through the value of its &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member. If &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the receiver of the medium is responsible for releasing it; otherwise, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; points to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface on the appropriate object so its &lt;see langword=&quot;Release&quot; /&gt; method can be called. The medium must be allocated and filled in by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. This parameter is passed uninitialized.">이 메서드가 반환될 때 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 멤버를 통해 반환된 데이터가 들어 있는 스토리지 미디어와 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> 멤버의 값을 통해 해당 미디어를 해제하는 역할을 하는 항목을 나타내는 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 구조체에 대한 포인터를 포함합니다. <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" />가 <see langword="null" />이면 미디어의 수신기에서 미디어를 해제해야 하고, 그렇지 않으면 ,<see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" />는 <see langword="IUnknown" /> 메서드를 호출할 수 있도록 적절한 개체의 <see langword="Release" /> 인터페이스를 가리킵니다. 이 미디어는 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />로 할당되고 채워져야 합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Obtains data from a source data object. This method, which is called by a data consumer, differs from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; method in that the caller must allocate and free the specified storage medium.">소스 데이터 개체에서 데이터를 가져옵니다. 데이터 소비자가 호출하는 이 메서드는 지정된 스토리지 미디어를 호출자가 할당하고 해제해야 한다는 점에서 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 메서드와 차이가 있습니다.</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt;, and only the following &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; values are valid: &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE&quot; /&gt;, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM&quot; /&gt;, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL&quot; /&gt;, or &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE&quot; /&gt;.">데이터를 전달할 때 사용할 형식, 미디어 및 대상 디바이스를 정의하는 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체에 대한 포인터로, 참조로 전달됩니다. <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />에서는 미디어를 하나만 지정할 수 있으며 유효한 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 값은 <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" /> 또는 <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" />뿐입니다.</param>
      <param name="medium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;, passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. The caller must also free the medium. The implementation of this method must always supply a value of &lt;see langword=&quot;null&quot; /&gt; for the &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure that this parameter points to.">전송될 데이터가 들어 있는 스토리지 미디어를 정의하는 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />으로, 참조로 전달됩니다. 이 미디어는 호출자에 의해 할당되고 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />에 의해 채워져야 합니다. 또는 호출자가 미디어를 해제해야 합니다. 이 메서드의 구현에서는 이 매개 변수가 가리키는 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 구조체의 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 멤버에 대해 항상 <see langword="null" /> 값을 제공해야 합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary vsli:raw="Determines whether the data object is capable of rendering the data described in the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure. Objects attempting a paste or drop operation can call this method before calling &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; to get an indication of whether the operation may be successful.">데이터 개체가 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체에 설명된 데이터를 렌더링할 수 있는지 여부를 확인합니다. 붙여넣기 또는 놓기 작업을 시도하는 개체에서는 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />를 호출하기 전에 이 메서드를 호출하여 해당 작업을 수행할 수 있는지 여부를 나타내는 값을 가져올 수 있습니다.</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use for the query.">쿼리에 사용할 형식, 미디어 및 대상 디바이스를 정의하는 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체에 대한 포인터로, 참조로 전달됩니다.</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; A subsequent call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; would probably be successful.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; An invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; An invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_TYMED&lt;/term&gt;&lt;description&gt; An invalid &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed&quot; /&gt; value.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_DVASPECT&lt;/term&gt;&lt;description&gt; An invalid &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect&quot; /&gt; value.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_NOTRUNNING&lt;/term&gt;&lt;description&gt; The application is not running.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">이 메서드는 표준 반환 값 E_INVALIDARG, E_UNEXPECTED 및 E_OUTOFMEMORY와 함께 다음 값을 지원합니다.
  값 
  설명 
  S_OK 
  이후의 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 호출에 성공할 수 있는 경우  
  
  DV_E_LINDEX 
  <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />의 값이 잘못된 경우(현재 -1만 지원됨)  
  
  DV_E_FORMATETC 
  <paramref name="pFormatetc" /> 매개 변수의 값이 잘못된 경우  
  
  DV_E_TYMED 
  <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> 값이 잘못되었습니다.  
  
  DV_E_DVASPECT 
  <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> 값이 잘못되었습니다.  
  
  OLE_E_NOTRUNNING 
  애플리케이션이 실행되고 있지 않은 경우</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary vsli:raw="Transfers data to the object that implements this method. This method is called by an object that contains a data source.">이 메서드를 구현하는 개체에 데이터를 전송합니다. 이 메서드는 데이터 소스가 들어 있는 개체에서 호출됩니다.</summary>
      <param name="formatIn" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.">스토리지 미디어에 들어 있는 데이터를 해석할 때 데이터 개체에서 사용하는 형식을 정의하는 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체로, 참조로 전달됩니다.</param>
      <param name="medium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure, passed by reference, that defines the storage medium in which the data is being passed.">전달될 데이터가 들어 있는 스토리지 미디어를 정의하는 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 구조체로, 참조로 전달됩니다.</param>
      <param name="release" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that the data object called, which implements &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; function. &lt;see langword=&quot;false&quot; /&gt; to specify that the caller retains ownership of the storage medium, and the data object called uses the storage medium for the duration of the call only.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />를 구현하는 호출된 데이터 개체가 호출이 반환된 후에 스토리지 미디어를 소유하도록 지정하려면 <see langword="true" />를 지정합니다. 이렇게 하면 데이터 개체에서는 미디어를 사용한 후 <see langword="ReleaseStgMedium" /> 함수를 호출하여 미디어를 해제해야 합니다. 호출자가 스토리지 미디어의 소유권을 갖고 호출된 데이터 개체에서는 호출하는 동안에만 스토리지 미디어를 사용하도록 지정하려면 <see langword="false" />를 지정합니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary vsli:raw="Contains information needed for transferring a structure element, parameter, or function return value between processes.">구조체 요소, 매개 변수, 프로세스간 함수 반환 값을 전달하는데 필요한 정보가 들어 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary vsli:raw="Reserved; set to &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="null" />로 설정되어 예약되었습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary vsli:raw="Indicates an &lt;see cref=&quot;T:System.Runtime.InteropServices.IDLFLAG&quot; /&gt; value describing the type.">형식을 설명하는 <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> 값을 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary vsli:raw="Describes how to transfer a structure element, parameter, or function return value between processes.">구조체 요소, 매개 변수 또는 함수 반환 값을 한 프로세스에서 다른 프로세스로 전송하는 방법을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary vsli:raw="The parameter passes information from the caller to the callee.">매개 변수는 호출자에서 호출 수신자로 정보를 전달합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary vsli:raw="The parameter is the local identifier of a client application.">매개 변수가 클라이언트 애플리케이션의 로컬 식별자입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary vsli:raw="The parameter returns information from the callee to the caller.">매개 변수가 호출 수신자에게서 호출자에게로 정보를 반환합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary vsli:raw="The parameter is the return value of the member.">매개 변수가 멤버의 반환 값입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary vsli:raw="Does not specify whether the parameter passes or receives information.">매개 변수가 정보를 전달하는지 아니면 정보를 받는지 지정하지 않습니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumConnectionPoints&quot; /&gt; interface.">
        <see langword="IEnumConnectionPoints" /> 인터페이스의 정의를 관리합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">현재 열거자와 열거 상태가 같은 새 열거자를 만듭니다.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">이 메서드가 반환될 때 새로 만들어진 열거자에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">열거형 시퀀스에서 지정된 수의 항목을 검색합니다.</summary>
      <param name="celt" vsli:raw="The number of &lt;see langword=&quot;IConnectionPoint&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">
        <paramref name="rgelt" />에서 반환할 <see langword="IConnectionPoint" /> 참조의 수입니다.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.">이 메서드는 반환될 때 열거된 연결에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of connections enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">이 메서드는 반환될 때 <paramref name="rgelt" />에 열거된 연결의 실제 수에 대한 참조를 포함합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <paramref name="pceltFetched" /> 매개 변수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">열거형 시퀀스를 시작 부분으로 다시 설정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">열거형 시퀀스에서 지정된 수의 항목을 건너뜁니다.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">열거형에서 건너뛸 요소 수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">건너뛴 항목 수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumConnections&quot; /&gt; interface.">
        <see langword="IEnumConnections" /> 인터페이스의 정의를 관리합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">현재 열거자와 열거 상태가 같은 새 열거자를 만듭니다.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">이 메서드가 반환될 때 새로 만들어진 열거자에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">열거형 시퀀스에서 지정된 수의 항목을 검색합니다.</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.CONNECTDATA&quot; /&gt; structures to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">
        <paramref name="rgelt" />에서 반환할 <see cref="T:System.Runtime.InteropServices.CONNECTDATA" /> 구조체의 수입니다.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.">이 메서드는 반환될 때 열거된 연결에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of connections enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">이 메서드는 반환될 때 <paramref name="rgelt" />에 열거된 연결의 실제 수에 대한 참조를 포함합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <paramref name="pceltFetched" /> 매개 변수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">열거형 시퀀스를 시작 부분으로 다시 설정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">열거형 시퀀스에서 지정된 수의 항목을 건너뜁니다.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">열거형에서 건너뛸 요소 수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">건너뛴 항목 수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IEnumFORMATETC&quot; /&gt; interface.">
        <see langword="IEnumFORMATETC" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current enumerator.">현재 열거자와 열거 상태가 같은 새 열거자를 만듭니다.</summary>
      <param name="newEnum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">이 메서드가 반환될 때 새로 만들어진 열거자에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">열거형 시퀀스에서 지정된 수의 항목을 검색합니다.</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">
        <paramref name="rgelt" />에서 반환할 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 참조의 수입니다.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; references. This parameter is passed uninitialized.">이 메서드가 반환될 때 열거된 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 참조에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of references enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;. This parameter is passed uninitialized.">이 메서드가 반환될 때 <paramref name="rgelt" />에 열거된 실제 참조 수에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <paramref name="pceltFetched" /> 매개 변수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">열거형 시퀀스를 시작 부분으로 다시 설정합니다.</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">값이 <see langword="S_OK" />인 HRESULT입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">열거형 시퀀스에서 지정된 수의 항목을 건너뜁니다.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">열거형에서 건너뛸 요소 수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">건너뛴 항목 수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumMoniker&quot; /&gt; interface.">
        <see langword="IEnumMoniker" /> 인터페이스의 정의를 관리합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">현재 열거자와 열거 상태가 같은 새 열거자를 만듭니다.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">이 메서드가 반환될 때 새로 만들어진 열거자에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">열거형 시퀀스에서 지정된 수의 항목을 검색합니다.</summary>
      <param name="celt" vsli:raw="The number of monikers to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">
        <paramref name="rgelt" />에서 반환할 모니커의 수입니다.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated monikers. This parameter is passed uninitialized.">이 메서드는 반환될 때 열거된 모니커에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of monikers enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">이 메서드는 반환될 때 <paramref name="rgelt" />에 열거된 모니커의 실제 수에 대한 참조를 포함합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <paramref name="pceltFetched" /> 매개 변수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">열거형 시퀀스를 시작 부분으로 다시 설정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">열거형 시퀀스에서 지정된 수의 항목을 건너뜁니다.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">열거형에서 건너뛸 요소 수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">건너뛴 항목 수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IEnumSTATDATA&quot; /&gt; interface.">
        <see langword="IEnumSTATDATA" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current enumerator.">현재 열거자와 열거 상태가 같은 새 열거자를 만듭니다.</summary>
      <param name="newEnum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">이 메서드가 반환될 때 새로 만들어진 열거자에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">열거형 시퀀스에서 지정된 수의 항목을 검색합니다.</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STATDATA&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">
        <paramref name="rgelt" />에서 반환할 <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 참조의 수입니다.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STATDATA&quot; /&gt; references. This parameter is passed uninitialized.">이 메서드가 반환될 때 열거된 <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 참조에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pceltFetched" vsli:raw="When this parameter returns, contains a reference to the actual number of references enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;. This parameter is passed uninitialized.">이 매개 변수가 반환될 때 <paramref name="rgelt" />에 열거된 실제 참조 수에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <paramref name="pceltFetched" /> 매개 변수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">열거형 시퀀스를 시작 부분으로 다시 설정합니다.</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">값이 <see langword="S_OK" />인 HRESULT입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">열거형 시퀀스에서 지정된 수의 항목을 건너뜁니다.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">열거형에서 건너뛸 요소 수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">건너뛴 항목 수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumString&quot; /&gt; interface.">
        <see langword="IEnumString" /> 인터페이스의 정의를 관리합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">현재 열거자와 열거 상태가 같은 새 열거자를 만듭니다.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">이 메서드가 반환될 때 새로 만들어진 열거자에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">열거형 시퀀스에서 지정된 수의 항목을 검색합니다.</summary>
      <param name="celt" vsli:raw="The number of strings to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">
        <paramref name="rgelt" />에서 반환할 문자열의 수입니다.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated strings. This parameter is passed uninitialized.">이 메서드는 반환될 때 열거형 문자열에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of strings enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">이 메서드는 반환될 때, <paramref name="rgelt" />에 열거된 문자열의 실제 수에 대한 참조를 포함합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <paramref name="pceltFetched" /> 매개 변수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">열거형 시퀀스를 시작 부분으로 다시 설정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">열거형 시퀀스에서 지정된 수의 항목을 건너뜁니다.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">열거형에서 건너뛸 요소 수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">건너뛴 항목 수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumVARIANT&quot; /&gt; interface.">
        <see langword="IEnumVARIANT" /> 인터페이스의 정의를 관리합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">현재 열거자와 열거 상태가 같은 새 열거자를 만듭니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT&quot; /&gt; reference to the newly created enumerator.">새로 만든 열거자에 대한 <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" /> 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">열거형 시퀀스에서 지정된 수의 항목을 검색합니다.</summary>
      <param name="celt" vsli:raw="The number of elements to return in &lt;c&gt;rgelt&lt;/c&gt;.">
        <c>rgelt</c>에서 반환할 요소 수입니다.</param>
      <param name="rgVar" vsli:raw="When this method returns, contains a reference to the enumerated elements. This parameter is passed uninitialized.">이 메서드는 반환될 때 열거된 요소에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of elements enumerated in &lt;c&gt;rgelt&lt;/c&gt;.">이 메서드는 반환될 때 <c>rgelt</c>에 열거된 요소의 실제 수에 대한 참조를 포함합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <paramref name="pceltFetched" /> 매개 변수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">열거형 시퀀스를 시작 부분으로 다시 설정합니다.</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">값이 <see langword="S_OK" />인 HRESULT입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">열거형 시퀀스에서 지정된 수의 항목을 건너뜁니다.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">열거형에서 건너뛸 요소 수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">건너뛴 요소 수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IMoniker&quot; /&gt; interface, with COM functionality from &lt;see langword=&quot;IPersist&quot; /&gt; and &lt;see langword=&quot;IPersistStream&quot; /&gt;.">
        <see langword="IMoniker" />와 <see langword="IPersist" />의 COM 기능이 있는 <see langword="IPersistStream" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary vsli:raw="Uses the moniker to bind to the object that it identifies.">모니커를 사용하여 모니커가 식별하는 개체에 바인딩합니다.</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context object used in this binding operation.">이 바인딩 작업에서 사용되는 바인딩 컨텍스트 개체의 <see langword="IBindCtx" /> 인터페이스에 대한 참조입니다.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">현재 모니커가 구성 모니커의 일부인 경우 해당 모니커의 왼쪽에 있는 모니커에 대한 참조입니다.</param>
      <param name="riidResult" vsli:raw="The interface identifier (IID) of the interface that the client intends to use to communicate with the object that the moniker identifies.">모니커가 식별하는 개체와 통신하기 위해 클라이언트에서 사용할 인터페이스의 IID(인터페이스 식별자)입니다.</param>
      <param name="ppvResult" vsli:raw="When this method returns, contains a reference to the interface requested by &lt;paramref name=&quot;riidResult&quot; /&gt;. This parameter is passed uninitialized.">이 메서드는 반환될 때 <paramref name="riidResult" />에서 요청한 인터페이스에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary vsli:raw="Retrieves an interface pointer to the storage that contains the object identified by the moniker.">모니커로 식별된 개체가 들어 있는 스토리지에 대한 인터페이스 포인터를 검색합니다.</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context object used during this binding operation.">이 바인딩 작업을 수행하는 동안 사용되는 바인드 컨텍스트 개체의 <see langword="IBindCtx" /> 인터페이스에 대한 참조입니다.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">현재 모니커가 구성 모니커의 일부인 경우 해당 모니커의 왼쪽에 있는 모니커에 대한 참조입니다.</param>
      <param name="riid" vsli:raw="The interface identifier (IID) of the storage interface requested.">요청된 스토리지 인터페이스의 IID(인터페이스 식별자)입니다.</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the interface requested by &lt;paramref name=&quot;riid&quot; /&gt;. This parameter is passed uninitialized.">이 메서드는 반환될 때 <paramref name="riid" />에서 요청한 인터페이스에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Creates a new moniker based on the common prefix that this moniker shares with another moniker.">이 모니커와 다른 모니커가 공유하는 공통 접두사를 사용하여 새 모니커를 만듭니다.</summary>
      <param name="pmkOther" vsli:raw="A reference to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on another moniker to compare with the current moniker for a common prefix.">현재 모니커와 공통 접두사를 비교할 다른 모니커의 <see langword="IMoniker" /> 인터페이스에 대한 참조입니다.</param>
      <param name="ppmkPrefix" vsli:raw="When this method returns, contains the moniker that is the common prefix of the current moniker and &lt;paramref name=&quot;pmkOther&quot; /&gt;. This parameter is passed uninitialized.">이 메서드는 반환될 때 현재 모니커와 <paramref name="pmkOther" />의 공통 접두사인 모니커를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Combines the current moniker with another moniker, creating a new composite moniker.">이 모니커와 다른 모니커를 조합하여 새로운 구성 모니커를 만듭니다.</summary>
      <param name="pmkRight" vsli:raw="A reference to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on a moniker to append to the end of the current moniker.">현재 모니커의 끝에 추가할 모니커의 <see langword="IMoniker" /> 인터페이스에 대한 참조입니다.</param>
      <param name="fOnlyIfNotGeneric" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the caller requires a nongeneric composition. The operation proceeds only if &lt;paramref name=&quot;pmkRight&quot; /&gt; is a moniker class that the current moniker can combine with in some way other than forming a generic composite. &lt;see langword=&quot;false&quot; /&gt; to indicate that the method can create a generic composite if necessary.">호출자가 제네릭이 아닌 구성을 요구한다는 것을 나타내려면 <see langword="true" />입니다. <paramref name="pmkRight" />가 현재 모니커가 제네릭 구성을 만드는 것과 다른 방법으로 결합할 수 있는 모니커 클래스인 경우에만 작업이 진행됩니다. 이 메서드가 필요한 경우 제네릭 구성을 만들 수 있음을 나타내려면 <see langword="false" />입니다.</param>
      <param name="ppmkComposite" vsli:raw="When this method returns, contains a reference to the resulting composite moniker. This parameter is passed uninitialized.">이 메서드는 반환될 때 만들어지는 구성 모니커에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Supplies a pointer to an enumerator that can enumerate the components of a composite moniker.">구성 모니커의 구성 요소를 열거할 수 있는 열거자에 대한 포인터를 제공합니다.</summary>
      <param name="fForward" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enumerate the monikers from left to right. &lt;see langword=&quot;false&quot; /&gt; to enumerate from right to left.">모니커를 왼쪽에서 오른쪽으로 열거하려면 <see langword="true" />이고, 오른쪽에서 왼쪽으로 열거하려면 <see langword="false" />입니다.</param>
      <param name="ppenumMoniker" vsli:raw="When this method returns, contains a reference to the enumerator object for the moniker. This parameter is passed uninitialized.">이 메서드는 반환될 때 모니커의 열거자 개체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary vsli:raw="Retrieves the class identifier (CLSID) of an object.">개체의 CLSID(클래스 식별자)를 검색합니다.</summary>
      <param name="pClassID" vsli:raw="When this method returns, contains the CLSID. This parameter is passed uninitialized.">이 메서드는 반환될 때 CLSID를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary vsli:raw="Gets the display name, which is a user-readable representation of the current moniker.">사용자가 현재 모니커를 읽을 수 있도록 표현하는 표시 이름을 가져옵니다.</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this operation.">이 작업에서 사용할 바인드 컨텍스트에 대한 참조입니다.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">현재 모니커가 구성 모니커의 일부인 경우 해당 모니커의 왼쪽에 있는 모니커에 대한 참조입니다.</param>
      <param name="ppszDisplayName" vsli:raw="When this method returns, contains the display name string. This parameter is passed uninitialized.">이 메서드는 반환될 때 표시 이름 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary vsli:raw="Returns the size, in bytes, of the stream needed to save the object.">개체를 저장하는 데 필요한 스트림의 크기를 바이트 단위로 반환합니다.</summary>
      <param name="pcbSize" vsli:raw="When this method returns, contains a &lt;see langword=&quot;long&quot; /&gt; value indicating the size, in bytes, of the stream needed to save this object. This parameter is passed uninitialized.">이 메서드는 반환될 때 이 개체를 저장하는 데 필요한 스트림의 크기를 바이트 단위로 나타내는 <see langword="long" /> 값을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Provides a number representing the time that the object identified by the current moniker was last changed.">현재 모니커에서 식별한 개체가 마지막으로 변경된 시간을 나타내는 숫자를 제공합니다.</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">이 바인딩 작업에서 사용할 바인드 컨텍스트에 대한 참조입니다.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">현재 모니커가 구성 모니커의 일부인 경우 해당 모니커의 왼쪽에 있는 모니커에 대한 참조입니다.</param>
      <param name="pFileTime" vsli:raw="When this method returns, contains the time of the last change. This parameter is passed uninitialized.">이 메서드는 반환될 때 마지막으로 변경한 시간을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary vsli:raw="Calculates a 32-bit integer using the internal state of the moniker.">모니커의 내부 상태를 사용하여 32비트 정수를 계산합니다.</summary>
      <param name="pdwHash" vsli:raw="When this method returns, contains the hash value for this moniker. This parameter is passed uninitialized.">이 메서드는 반환될 때 이 모니커에 대한 해시 값을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Provides a moniker that, when composed to the right of the current moniker or one of similar structure, composes to nothing.">현재 모니커 또는 구조가 비슷한 모니커의 오른쪽에 구성되면 구성이 이루어지지 않는 모니커를 제공합니다.</summary>
      <param name="ppmk" vsli:raw="When this method returns, contains a moniker that is the inverse of the current moniker. This parameter is passed uninitialized.">이 메서드는 반환될 때 현재 모니커와 반대되는 모니커를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary vsli:raw="Checks the object for changes since it was last saved.">마지막으로 저장된 이후 개체의 변경 사항을 검사합니다.</summary>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the object has changed; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">개체가 변경되었으면 <see langword="S_OK" /><see langword="HRESULT" /> 값이고, 그렇지 않으면 <see langword="S_FALSE" /><see langword="HRESULT" /> 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Compares the current moniker with a specified moniker and indicates whether they are identical.">현재 모니커를 지정된 모니커와 비교하여 두 모니커가 같은지 여부를 나타냅니다.</summary>
      <param name="pmkOtherMoniker" vsli:raw="A reference to the moniker to use for comparison.">비교할 모니커에 대한 참조입니다.</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the monikers are identical; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">모니커가 동일하면 <see langword="S_OK" /><see langword="HRESULT" /> 값이고, 그렇지 않으면 <see langword="S_FALSE" /><see langword="HRESULT" /> 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Determines whether the object that is identified by the current moniker is currently loaded and running.">현재 모니커에서 식별한 개체가 현재 로드되고 실행되는지 여부를 확인합니다.</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">이 바인딩 작업에서 사용할 바인드 컨텍스트에 대한 참조입니다.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker if the current moniker is part of a composite.">현재 모니커가 구성 모니커의 일부인 경우 현재 모니커의 왼쪽에 있는 모니커에 대한 참조입니다.</param>
      <param name="pmkNewlyRunning" vsli:raw="A reference to the moniker most recently added to the Running Object Table (ROT).">가장 최근에 ROT(실행 개체 테이블)에 추가된 모니커에 대한 참조입니다.</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is running; an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is not running; or an &lt;see langword=&quot;E_UNEXPECTED&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">
        <see langword="S_OK" />
        <see langword="HRESULT" /> 값(모니커가 실행 중인 경우), <see langword="S_FALSE" /><see langword="HRESULT" /> 값(모니커가 실행 중이 아닌 경우) 또는 <see langword="E_UNEXPECTED" /><see langword="HRESULT" /> 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary vsli:raw="Indicates whether this moniker is of one of the system-supplied moniker classes.">모니커가 시스템에 제공된 모니커 클래스 중의 하나인지 여부를 나타냅니다.</summary>
      <param name="pdwMksys" vsli:raw="When this method returns, contains a pointer to an integer that is one of the values from the &lt;see langword=&quot;MKSYS&quot; /&gt; enumeration, and refers to one of the COM moniker classes. This parameter is passed uninitialized.">이 메서드는 반환될 때 <see langword="MKSYS" /> 열거형의 값 중 하나이며 COM 모니커 클래스 중 하나를 참조하는 정수에 대한 포인터를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is a system moniker; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">모니커가 시스템 모니커이면 <see langword="S_OK" /><see langword="HRESULT" /> 값이고, 그렇지 않으면 <see langword="S_FALSE" /><see langword="HRESULT" /> 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary vsli:raw="Initializes an object from the stream where it was previously saved.">이전에 개체가 저장된 스트림에서 해당 개체를 초기화합니다.</summary>
      <param name="pStm" vsli:raw="The stream that the object is loaded from.">개체가 로드되는 스트림입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Reads as many characters of the specified display name as the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)&quot; /&gt; understands and builds a moniker corresponding to the portion read.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)" />에서 이해할 수 있을 만큼 지정된 표시 이름의 문자를 읽고, 읽은 부분에 해당하는 모니커를 빌드합니다.</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">이 바인딩 작업에서 사용할 바인드 컨텍스트에 대한 참조입니다.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker that has been built from the display name up to this point.">표시 이름에서 이 지점까지 빌드된 모니커에 대한 참조입니다.</param>
      <param name="pszDisplayName" vsli:raw="A reference to the string containing the remaining display name to parse.">구문 분석할 나머지 표시 이름이 들어 있는 문자열에 대한 참조입니다.</param>
      <param name="pchEaten" vsli:raw="When this method returns, contains the number of characters that were consumed in parsing &lt;paramref name=&quot;pszDisplayName&quot; /&gt;. This parameter is passed uninitialized.">이 메서드는 반환될 때 <paramref name="pszDisplayName" />을 구문 분석할 때 사용한 문자 수를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="ppmkOut" vsli:raw="When this method returns, contains a reference to the moniker that was built from &lt;paramref name=&quot;pszDisplayName&quot; /&gt;. This parameter is passed uninitialized.">이 메서드는 반환될 때 <paramref name="pszDisplayName" />에서 빌드된 모니커에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Returns a reduced moniker, which is another moniker that refers to the same object as the current moniker but can be bound with equal or greater efficiency.">현재 모니커와 같은 개체를 참조하지만 더 크거나 같은 효율로 바인딩될 수 있는 다른 모니커인 축소된 모니커를 반환합니다.</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context to use in this binding operation.">이 바인딩 작업에 사용할 바인드 컨텍스트의 <see langword="IBindCtx" /> 인터페이스에 대한 참조입니다.</param>
      <param name="dwReduceHowFar" vsli:raw="A value that specifies how far the current moniker should be reduced.">현재 모니커를 얼마나 축소할지 지정하는 값입니다.</param>
      <param name="ppmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker.">현재 모니커의 왼쪽에 있는 모니커에 대한 참조입니다.</param>
      <param name="ppmkReduced" vsli:raw="When this method returns, contains a reference to the reduced form of the current moniker, which can be &lt;see langword=&quot;null&quot; /&gt; if an error occurs or if the current moniker is reduced to nothing. This parameter is passed uninitialized.">이 메서드는 반환될 때 현재 모니커의 축소된 형식에 대한 참조를 포함합니다. 이 참조는 오류가 발생하거나 현재 모니커가 축소되지 않을 경우 <see langword="null" />이 될 수 있습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Supplies a moniker that, when appended to the current moniker (or one with a similar structure), yields the specified moniker.">현재 모니커나 구조가 비슷한 모니커에 추가될 때 지정된 모니커를 생성하는 모니커를 제공합니다.</summary>
      <param name="pmkOther" vsli:raw="A reference to the moniker to which a relative path should be taken.">상대 경로를 사용할 모니커에 대한 참조입니다.</param>
      <param name="ppmkRelPath" vsli:raw="When this method returns, contains a reference to the relative moniker. This parameter is passed uninitialized.">이 메서드는 반환될 때 상대 모니커에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary vsli:raw="Saves an object to the specified stream.">개체를 지정된 스트림에 저장합니다.</summary>
      <param name="pStm" vsli:raw="The stream to which the object is saved.">개체를 저장할 스트림입니다.</param>
      <param name="fClearDirty" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to clear the modified flag after the save is complete; otherwise &lt;see langword=&quot;false&quot; /&gt;.">저장이 완료된 후 수정된 플래그를 지우려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary vsli:raw="Defines the attributes of an implemented or inherited interface of a type.">구현되거나 상속된 인터페이스 형식의 특성을 정의합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary vsli:raw="The interface or dispinterface represents the default for the source or sink.">인터페이스나 dispinterface는 소스나 싱크의 기본값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary vsli:raw="Sinks receive events through the virtual function table (VTBL).">싱크는 VTBL(가상 함수 테이블)을 통해 이벤트를 받습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary vsli:raw="The member should not be displayed or programmable by users.">사용자가 멤버를 표시하거나 프로그래밍할 수 없어야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary vsli:raw="This member of a coclass is called rather than implemented.">coclass의 이 멤버는 구현되는 것이 아니라 호출됩니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary vsli:raw="Specifies how to invoke a function by &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">
        <see langword="IDispatch::Invoke" />를 사용하여 함수를 호출하는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary vsli:raw="The member is called using a normal function invocation syntax.">일반 함수 호출 구문을 통해 멤버가 호출됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary vsli:raw="The function is invoked using a normal property access syntax.">일반 속성 액세스 구문을 통해 함수가 호출됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary vsli:raw="The function is invoked using a property value assignment syntax.">속성 값 할당 구문을 통해 함수가 호출됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary vsli:raw="The function is invoked using a property reference assignment syntax.">속성 참조 할당 구문을 통해 함수가 호출됩니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IPersistFile&quot; /&gt; interface, with functionality from &lt;see langword=&quot;IPersist&quot; /&gt;.">
        <see langword="IPersistFile" />의 기능이 있는 <see langword="IPersist" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary vsli:raw="Retrieves the class identifier (CLSID) of an object.">개체의 CLSID(클래스 식별자)를 검색합니다.</summary>
      <param name="pClassID" vsli:raw="When this method returns, contains a reference to the CLSID. This parameter is passed uninitialized.">이 메서드는 반환될 때 CLSID에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary vsli:raw="Retrieves either the absolute path to the current working file of the object or, if there is no current working file, the default file name prompt of the object.">개체의 현재 작업 파일의 절대 경로를 검색하거나 현재 작업 파일이 없는 경우에는 개체의 기본 파일 이름 프롬프트를 검색합니다.</summary>
      <param name="ppszFileName" vsli:raw="When this method returns, contains the address of a pointer to a zero-terminated string containing the path for the current file, or the default file name prompt (such as *.txt). This parameter is passed uninitialized.">이 메서드는 반환될 때 현재 파일의 경로가 들어 있는 0으로 끝나는 문자열에 대한 포인터의 주소 또는 기본 파일 이름 프롬프트(예: *.txt)를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary vsli:raw="Checks an object for changes since it was last saved to its current file.">현재 파일에 마지막으로 저장된 이후 개체의 변경 사항을 검사합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the file has changed since it was last saved; &lt;see langword=&quot;S_FALSE&quot; /&gt; if the file has not changed since it was last saved.">마지막으로 저장된 이후 파일이 변경되었으면 <see langword="S_OK" />이고, 변경되지 않았으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary vsli:raw="Opens the specified file and initializes an object from the file contents.">지정된 파일을 열고 파일 내용에서 개체를 초기화합니다.</summary>
      <param name="pszFileName" vsli:raw="A zero-terminated string containing the absolute path of the file to open.">열려는 파일의 절대 경로가 들어 있는 0으로 끝나는 문자열입니다.</param>
      <param name="dwMode" vsli:raw="A combination of values from the &lt;see langword=&quot;STGM&quot; /&gt; enumeration to indicate the access mode in which to open &lt;paramref name=&quot;pszFileName&quot; /&gt;.">
        <paramref name="pszFileName" />을 열 액세스 모드를 표시할 <see langword="STGM" /> 열거형에 있는 값의 조합입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary vsli:raw="Saves a copy of the object into the specified file.">지정된 파일에 개체의 복사본을 저장합니다.</summary>
      <param name="pszFileName" vsli:raw="A zero-terminated string containing the absolute path of the file to which the object is saved.">개체가 저장되는 파일의 절대 경로가 들어 있는 0으로 끝나는 문자열입니다.</param>
      <param name="fRemember" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to used the &lt;paramref name=&quot;pszFileName&quot; /&gt; parameter as the current working file; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="pszFileName" /> 매개 변수를 현재 작업 파일로 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary vsli:raw="Notifies the object that it can write to its file.">개체가 해당 파일에 쓸 수 있다는 것을 개체에 알립니다.</summary>
      <param name="pszFileName" vsli:raw="The absolute path of the file where the object was previously saved.">개체가 이미 저장되어 있는 파일의 절대 경로입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IRunningObjectTable&quot; /&gt; interface.">
        <see langword="IRunningObjectTable" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Enumerates the objects currently registered as running.">실행 중 등록된 개체를 열거합니다.</summary>
      <param name="ppenumMoniker" vsli:raw="When this method returns, contains the new enumerator for the Running Object Table (ROT). This parameter is passed uninitialized.">이 메서드는 반환될 때 ROT(실행 개체 테이블)에 대한 새 열거자를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary vsli:raw="Returns the registered object if the supplied object name is registered as running.">제공된 개체 이름이 실행 중에 등록되면 등록된 개체를 반환합니다.</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">ROT(실행 개체 테이블)에서 검색할 모니커에 대한 참조입니다.</param>
      <param name="ppunkObject" vsli:raw="When this method returns, contains the requested running object. This parameter is passed uninitialized.">이 메서드는 반환될 때 요청한 실행 개체를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">작업의 성공이나 실패를 나타내는 <see langword="HRESULT" /> 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Searches for this moniker in the Running Object Table (ROT) and reports the recorded time of change, if present.">ROT(실행 개체 테이블)에서 이 모니커를 검색하고 기록된 변경 시간이 있으면 이를 보고합니다.</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">ROT(실행 개체 테이블)에서 검색할 모니커에 대한 참조입니다.</param>
      <param name="pfiletime" vsli:raw="When this object returns, contains the objects last change time. This parameter is passed uninitialized.">이 개체는 반환될 때 개체가 마지막으로 변경된 시간을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">작업의 성공이나 실패를 나타내는 <see langword="HRESULT" /> 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Determines whether the specified moniker is currently registered in the Running Object Table (ROT).">지정한 모니커가 ROT(실행 개체 테이블)에 현재 등록되어 있는지 여부를 확인합니다.</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">ROT(실행 개체 테이블)에서 검색할 모니커에 대한 참조입니다.</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">작업의 성공이나 실패를 나타내는 <see langword="HRESULT" /> 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Notes the time that a particular object changed so &lt;see langword=&quot;IMoniker::GetTimeOfLastChange&quot; /&gt; can report an appropriate change time.">특정 개체가 변경된 시간을 기록하여 <see langword="IMoniker::GetTimeOfLastChange" />가 해당 변경 시간을 보고할 수 있도록 합니다.</summary>
      <param name="dwRegister" vsli:raw="The Running Object Table (ROT) entry of the changed object.">변경된 개체의 ROT(실행 개체 테이블) 항목입니다.</param>
      <param name="pfiletime" vsli:raw="A reference to the object's last change time.">개체가 마지막으로 변경된 시간에 대한 참조입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Registers that the supplied object has entered the running state.">제공된 개체가 실행 상태로 들어갔음을 등록합니다.</summary>
      <param name="grfFlags" vsli:raw="Specifies whether the Running Object Table's (ROT) reference to &lt;paramref name=&quot;punkObject&quot; /&gt; is weak or strong, and controls access to the object through its entry in the ROT.">
        <paramref name="punkObject" />에 대한 ROT(실행 개체 테이블)의 참조가 약한지 강한지 여부를 지정하여 ROT에 있는 항목을 통해 개체에 액세스하는 것을 제어합니다.</param>
      <param name="punkObject" vsli:raw="A reference to the object being registered as running.">실행 중 등록되는 개체에 대한 참조입니다.</param>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker that identifies &lt;paramref name=&quot;punkObject&quot; /&gt;.">
        <paramref name="punkObject" />를 식별하는 모니커에 대한 참조입니다.</param>
      <returns vsli:raw="A value that can be used to identify this ROT entry in subsequent calls to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)" /> 또는 <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)" />에 대한 이후 호출에서 이 ROT 항목을 식별하는 데 사용할 수 있는 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary vsli:raw="Unregisters the specified object from the Running Object Table (ROT).">ROT(실행 개체 테이블)에서 지정한 개체의 등록을 취소합니다.</summary>
      <param name="dwRegister" vsli:raw="The Running Object Table (ROT) entry to revoke.">취소할 ROT(실행 개체 테이블) 항목입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IStream&quot; /&gt; interface, with &lt;see langword=&quot;ISequentialStream&quot; /&gt; functionality.">
        <see langword="IStream" /> 기능이 있는 <see langword="ISequentialStream" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary vsli:raw="Creates a new stream object with its own seek pointer that references the same bytes as the original stream.">동일한 바이트를 원래의 스트림으로 참조하는 자체 검색 포인터를 사용하여 새 스트림 개체를 만듭니다.</summary>
      <param name="ppstm" vsli:raw="When this method returns, contains the new stream object. This parameter is passed uninitialized.">이 메서드는 반환될 때 새 스트림 개체를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary vsli:raw="Ensures that any changes made to a stream object that is open in transacted mode are reflected in the parent storage.">트랜잭트 모드에서 열려 있는 스트림 개체에 대한 변경 사항이 모두 부모 스토리지에 반영되도록 합니다.</summary>
      <param name="grfCommitFlags" vsli:raw="A value that controls how the changes for the stream object are committed.">스트림 개체에 대한 변경 사항이 커밋되는 방법을 제어하는 값입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.">스트림에 있는 현재 검색 포인터에서 다른 스트림에 있는 현재 검색 포인터로 지정된 바이트 수를 복사합니다.</summary>
      <param name="pstm" vsli:raw="A reference to the destination stream.">대상 스트림에 대한 참조입니다.</param>
      <param name="cb" vsli:raw="The number of bytes to copy from the source stream.">소스 스트림에서 복사할 바이트 수입니다.</param>
      <param name="pcbRead" vsli:raw="On successful return, contains the actual number of bytes read from the source.">반환이 성공적이면, 소스에서 읽은 실제 바이트 수를 포함합니다.</param>
      <param name="pcbWritten" vsli:raw="On successful return, contains the actual number of bytes written to the destination.">반환이 성공적이면, 대상에 쓰여진 실제 바이트 수를 포함합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary vsli:raw="Restricts access to a specified range of bytes in the stream.">스트림에서 지정된 바이트 범위로 액세스하는 것을 제한합니다.</summary>
      <param name="libOffset" vsli:raw="The byte offset for the beginning of the range.">시작 범위에 대한 바이트 오프셋입니다.</param>
      <param name="cb" vsli:raw="The length of the range, in bytes, to restrict.">제한할 범위의 길이(바이트)입니다.</param>
      <param name="dwLockType" vsli:raw="The requested restrictions on accessing the range.">범위에 액세스할 때 필요한 제한입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary vsli:raw="Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.">현재 검색 포인터에서 스트림 개체에서 메모리 시작까지 지정된 바이트 수를 읽습니다.</summary>
      <param name="pv" vsli:raw="When this method returns, contains the data read from the stream. This parameter is passed uninitialized.">이 메서드는 반환될 때 해당 스트림에서 읽은 데이터를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="cb" vsli:raw="The number of bytes to read from the stream object.">스트림 개체에서 읽을 바이트 수입니다.</param>
      <param name="pcbRead" vsli:raw="A pointer to a &lt;see langword=&quot;ULONG&quot; /&gt; variable that receives the actual number of bytes read from the stream object.">스트림 개체에서 읽은 실제 바이트 수를 받는 <see langword="ULONG" /> 변수에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary vsli:raw="Discards all changes that have been made to a transacted stream since the last &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)&quot; /&gt; call.">마지막 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" /> 호출 이후 트랜잭트 스트림에서 일어난 모든 변경 내용을 삭제합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary vsli:raw="Changes the seek pointer to a new location relative to the beginning of the stream, to the end of the stream, or to the current seek pointer.">검색 포인터를 스트림의 시작 부분, 스트림의 끝 부분 또는 현재 검색 포인터와 관련된 새 위치로 변경합니다.</summary>
      <param name="dlibMove" vsli:raw="The displacement to add to &lt;paramref name=&quot;dwOrigin&quot; /&gt;.">
        <paramref name="dwOrigin" />에 추가할 변위입니다.</param>
      <param name="dwOrigin" vsli:raw="The origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file.">검색할 원점입니다. 원점은 파일의 시작, 현재 검색 포인터 또는 파일의 끝일 수 있습니다.</param>
      <param name="plibNewPosition" vsli:raw="On successful return, contains the offset of the seek pointer from the beginning of the stream.">반환이 성공적이면, 스트림의 시작 부분에서 검색 포인터의 오프셋을 포함합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary vsli:raw="Changes the size of the stream object.">스트림 개체의 크기를 변경합니다.</summary>
      <param name="libNewSize" vsli:raw="The new size of the stream as a number of bytes.">바이트 단위로 표현된 스트림의 새 크기입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.STATSTG&quot; /&gt; structure for this stream.">이 스트림에 대한 <see cref="T:System.Runtime.InteropServices.STATSTG" /> 구조를 검색합니다.</summary>
      <param name="pstatstg" vsli:raw="When this method returns, contains a &lt;see langword=&quot;STATSTG&quot; /&gt; structure that describes this stream object. This parameter is passed uninitialized.">이 메서드는 반환될 때 이 스트림 개체를 설명하는 <see langword="STATSTG" /> 구조체를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="grfStatFlag" vsli:raw="Members in the &lt;see langword=&quot;STATSTG&quot; /&gt; structure that this method does not return, thus saving some memory allocation operations.">이 메서드가 반환되지 않으므로 메모리 할당 작업이 없는 <see langword="STATSTG" /> 구조체의 멤버입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary vsli:raw="Removes the access restriction on a range of bytes previously restricted with the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)&quot; /&gt; method.">이전에 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" /> 메서드를 통해 제한한 바이트의 범위에 대한 액세스 제한을 제거합니다.</summary>
      <param name="libOffset" vsli:raw="The byte offset for the beginning of the range.">시작 범위에 대한 바이트 오프셋입니다.</param>
      <param name="cb" vsli:raw="The length, in bytes, of the range to restrict.">제한할 범위의 길이(바이트)입니다.</param>
      <param name="dwLockType" vsli:raw="The access restrictions previously placed on the range.">이전에 범위에 배치된 액세스 제한입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a specified number of bytes into the stream object starting at the current seek pointer.">현재 검색 포인터에서 스트림 개체 시작에 지정된 바이트 수를 씁니다.</summary>
      <param name="pv" vsli:raw="The buffer to write this stream to.">이 스트림을 쓸 버퍼입니다.</param>
      <param name="cb" vsli:raw="The number of bytes to write to the stream.">스트림에 쓸 바이트 수입니다.</param>
      <param name="pcbWritten" vsli:raw="On successful return, contains the actual number of bytes written to the stream object. If the caller sets this pointer to &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;, this method does not provide the actual number of bytes written.">반환이 성공적이면, 스트림 개체에 쓰여진 실제 바이트 수를 포함합니다. 호출자가 이 포인터를 <see cref="F:System.IntPtr.Zero" />로 설정하면 이 메서드는 쓰여진 실제 바이트 수를 제공하지 않습니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface.">
        <see langword="ITypeComp" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary vsli:raw="Maps a name to a member of a type, or binds global variables and functions contained in a type library.">이름을 형식 멤버에 매핑하거나 형식 라이브러리에 있는 전역 변수와 함수를 바인딩합니다.</summary>
      <param name="szName" vsli:raw="The name to bind.">바인딩할 이름입니다.</param>
      <param name="lHashVal" vsli:raw="A hash value for &lt;paramref name=&quot;szName&quot; /&gt; computed by &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt;.">
        <see langword="LHashValOfNameSys" />를 사용하여 계산되는 <paramref name="szName" />의 해시 값입니다.</param>
      <param name="wFlags" vsli:raw="A flags word containing one or more of the invoke flags defined in the &lt;see langword=&quot;INVOKEKIND&quot; /&gt; enumeration.">여기에 사용된 단어 flags는 <see langword="INVOKEKIND" /> 열거형에 정의된 하나 이상의 호출 플래그를 나타냅니다.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains a reference to the type description that contains the item to which it is bound, if a &lt;see langword=&quot;FUNCDESC&quot; /&gt; or &lt;see langword=&quot;VARDESC&quot; /&gt; was returned. This parameter is passed uninitialized.">이 메서드는 반환될 때 <see langword="FUNCDESC" /> 또는 <see langword="VARDESC" />가 반환된 경우 바인딩 대상 항목이 들어 있는 형식 설명에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pDescKind" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;DESCKIND&quot; /&gt; enumerator that indicates whether the name bound-to is a &lt;see langword=&quot;VARDESC&quot; /&gt;, &lt;see langword=&quot;FUNCDESC&quot; /&gt;, or &lt;see langword=&quot;TYPECOMP&quot; /&gt;. This parameter is passed uninitialized.">이 메서드는 반환될 때 바인딩되는 이름이 <see langword="DESCKIND" />, <see langword="VARDESC" />인지 또는 <see langword="FUNCDESC" />인지 표시하는 <see langword="TYPECOMP" /> 열거자에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pBindPtr" vsli:raw="When this method returns, contains a reference to the bound-to &lt;see langword=&quot;VARDESC&quot; /&gt;, &lt;see langword=&quot;FUNCDESC&quot; /&gt;, or &lt;see langword=&quot;ITypeComp&quot; /&gt; interface. This parameter is passed uninitialized.">이 메서드는 반환될 때 바인딩 대상 <see langword="VARDESC" />, <see langword="FUNCDESC" /> 및 <see langword="ITypeComp" /> 인터페이스에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Binds to the type descriptions contained within a type library.">형식 라이브러리에 있는 형식 설명에 바인딩합니다.</summary>
      <param name="szName" vsli:raw="The name to bind.">바인딩할 이름입니다.</param>
      <param name="lHashVal" vsli:raw="A hash value for &lt;paramref name=&quot;szName&quot; /&gt; determined by &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt;.">
        <see langword="LHashValOfNameSys" />를 사용하여 확인되는 <paramref name="szName" />의 해시 값입니다.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains a reference to an &lt;see langword=&quot;ITypeInfo&quot; /&gt; of the type to which &lt;paramref name=&quot;szName&quot; /&gt; was bound. This parameter is passed uninitialized.">이 메서드는 반환될 때 <paramref name="szName" />이 바인딩된 대상 형식의 <see langword="ITypeInfo" />에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to an &lt;see langword=&quot;ITypeComp&quot; /&gt; variable. This parameter is passed uninitialized.">이 메서드는 반환될 때 <see langword="ITypeComp" /> 변수에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary vsli:raw="Provides the managed definition of the Component Automation ITypeInfo interface.">구성 요소 자동화 ITypeInfo 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary vsli:raw="Retrieves the addresses of static functions or variables, such as those defined in a DLL.">DLL에 정의된 것과 같은 정적 함수나 변수의 주소를 검색합니다.</summary>
      <param name="memid" vsli:raw="The member ID of the &lt;see langword=&quot;static&quot; /&gt; member's address to retrieve.">검색할 <see langword="static" /> 멤버 주소의 멤버 ID입니다.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies whether the member is a property, and if so, what kind.">멤버가 속성인지 여부와 속성일 경우 종류를 지정하는 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 값 중 하나입니다.</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;static&quot; /&gt; member. This parameter is passed uninitialized.">이 메서드는 반환될 때 <see langword="static" /> 멤버에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary vsli:raw="Creates a new instance of a type that describes a component class (coclass).">구성 요소 클래스(coclass)를 설명하는 형식의 새 인스턴스를 만듭니다.</summary>
      <param name="pUnkOuter" vsli:raw="The object that acts as the controlling &lt;see langword=&quot;IUnknown&quot; /&gt;.">제어용 <see langword="IUnknown" />으로 작용하는 개체입니다.</param>
      <param name="riid" vsli:raw="The IID of the interface that the caller uses to communicate with the resulting object.">호출자가 결과 개체와 통신하기 위해 사용하는 인터페이스의 IID입니다.</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the created object. This parameter is passed uninitialized.">이 메서드는 반환될 때 만들어진 개체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary vsli:raw="Retrieves the type library that contains this type description and its index within that type library.">이 형식 설명과 해당 형식 라이브러리에 있는 인덱스를 포함하는 형식 라이브러리를 검색합니다.</summary>
      <param name="ppTLB" vsli:raw="When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.">이 메서드는 반환될 때 포함하는 형식 라이브러리에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pIndex" vsli:raw="When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.">이 메서드는 반환될 때 포함하는 형식 라이브러리에 있는 형식 설명의 인덱스에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Retrieves a description or specification of an entry point for a function in a DLL.">DLL에 있는 함수에 대한 진입점의 설명 또는 사양을 검색합니다.</summary>
      <param name="memid" vsli:raw="The ID of the member function whose DLL entry description is to be returned.">DLL 항목 설명이 반환되는 멤버 함수의 ID입니다.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by &lt;paramref name=&quot;memid&quot; /&gt;.">
        <paramref name="memid" />로 식별되는 멤버 종류를 지정하는 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 값 중 하나입니다.</param>
      <param name="pBstrDllName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;paramref name=&quot;pBstrDllName&quot; /&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the DLL.">
        <see langword="null" />이 아니면 함수는 DLL의 이름을 포함하는 <see langword="BSTR" />에 <paramref name="pBstrDllName" />을 설정합니다.</param>
      <param name="pBstrName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;c&gt;lpbstrName&lt;/c&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the entry point.">
        <see langword="null" />이 아니면 함수는 진입점의 이름을 포함하는 <see langword="BSTR" />에 <c>lpbstrName</c>을 설정합니다.</param>
      <param name="pwOrdinal" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, and the function is defined by an ordinal, then &lt;c&gt;lpwOrdinal&lt;/c&gt; is set to point to the ordinal.">
        <see langword="null" />이 아니고 함수가 서수에 의해 정의되면 <c>lpwOrdinal</c>이 서수를 가리키도록 설정됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.">설명서 문자열, 전체 도움말 파일 이름과 경로, 지정된 형식 설명에 대한 도움말 항목의 컨텍스트 ID를 검색합니다.</summary>
      <param name="index" vsli:raw="The ID of the member whose documentation is to be returned.">설명서가 반환되는 멤버의 ID입니다.</param>
      <param name="strName" vsli:raw="When this method returns, contains the name of the item method. This parameter is passed uninitialized.">이 메서드는 반환될 때 항목 메서드의 이름을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">이 메서드가 반환될 때 지정된 항목에 대한 설명서 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.">이 메서드는 반환될 때 지정한 항목과 연관된 도움말 컨텍스트에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.">이 메서드는 반환될 때 도움말 파일의 정규화된 이름을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure that contains information about a specified function.">지정된 함수에 대한 정보가 들어 있는 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 구조체를 검색합니다.</summary>
      <param name="index" vsli:raw="The index of the function description to return.">반환할 함수 설명의 인덱스입니다.</param>
      <param name="ppFuncDesc" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure that describes the specified function. This parameter is passed uninitialized.">이 메서드는 반환될 때 지정한 함수를 설명하는 <see langword="FUNCDESC" /> 구조체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary vsli:raw="Maps between member names and member IDs, and parameter names and parameter IDs.">멤버 이름과 멤버 ID, 매개 변수 이름과 매개 변수 ID를 매핑합니다.</summary>
      <param name="rgszNames" vsli:raw="An array of names to map.">매핑할 이름 배열입니다.</param>
      <param name="cNames" vsli:raw="The count of names to map.">매핑할 이름의 수입니다.</param>
      <param name="pMemId" vsli:raw="When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.">이 메서드는 반환될 때 이름 매핑이 저장될 배열에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.IMPLTYPEFLAGS&quot; /&gt; value for one implemented interface or base interface in a type description.">형식 설명의 구현된 인터페이스나 기본 인터페이스에 대한 <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 값을 검색합니다.</summary>
      <param name="index" vsli:raw="The index of the implemented interface or base interface.">구현된 인터페이스나 기본 인터페이스의 인덱스입니다.</param>
      <param name="pImplTypeFlags" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;IMPLTYPEFLAGS&quot; /&gt; enumeration. This parameter is passed uninitialized.">이 메서드는 반환될 때 <see langword="IMPLTYPEFLAGS" /> 열거형에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary vsli:raw="Retrieves marshaling information.">마샬링 정보를 검색합니다.</summary>
      <param name="memid" vsli:raw="The member ID that indicates which marshaling information is needed.">마샬링 정보가 필요함을 나타내는 멤버 ID입니다.</param>
      <param name="pBstrMops" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;opcode&quot; /&gt; string used in marshaling the fields of the structure described by the referenced type description, or returns &lt;see langword=&quot;null&quot; /&gt; if there is no information to return. This parameter is passed uninitialized.">이 메서드는 반환될 때 참조된 형식 설명에 설명된 구조체의 필드를 마샬링하는 데 사용한 <see langword="opcode" /> 문자열에 대한 참조를 포함합니다. 반환할 정보가 없으면 <see langword="null" />을 반환합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.">지정한 함수 ID에 해당하는 지정한 멤버 ID를 가진 변수(속성, 메서드 및 해당 매개 변수의 이름)를 검색합니다.</summary>
      <param name="memid" vsli:raw="The ID of the member whose name (or names) is to be returned.">이름 또는 이름들을 반환할 멤버의 ID입니다.</param>
      <param name="rgBstrNames" vsli:raw="When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.">이 메서드는 반환되면, 멤버와 연관된 이름을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="cMaxNames" vsli:raw="The length of the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array.">
        <paramref name="rgBstrNames" /> 배열의 길이입니다.</param>
      <param name="pcNames" vsli:raw="When this method returns, contains the number of names in the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array. This parameter is passed uninitialized.">이 메서드는 반환될 때 <paramref name="rgBstrNames" /> 배열에 이름 수를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the referenced type descriptions if a type description references other type descriptions.">형식 설명에서 다른 형식 설명을 참조할 경우 참조된 형식 설명을 검색합니다.</summary>
      <param name="hRef" vsli:raw="A handle to the referenced type description to return.">반환할 참조된 형식 설명에 대한 핸들입니다.</param>
      <param name="ppTI" vsli:raw="When this method returns, contains the referenced type description. This parameter is passed uninitialized.">이 메서드는 반환될 때 참조된 형식 설명을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the type description of the implemented interface types if a type description describes a COM class.">형식 설명이 COM 클래스를 설명할 경우 구현된 인터페이스 형식에 대한 형식 설명을 검색합니다.</summary>
      <param name="index" vsli:raw="The index of the implemented type whose handle is returned.">핸들이 반환되는 구현된 형식의 인덱스입니다.</param>
      <param name="href" vsli:raw="When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.">이 메서드는 반환될 때 구현된 인터페이스의 핸들에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure that contains the attributes of the type description.">형식 설명의 특성이 들어 있는 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 구조체를 검색합니다.</summary>
      <param name="ppTypeAttr" vsli:raw="When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.">이 메서드는 반환될 때 이 형식 설명의 특성을 포함하는 구조체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface for the type description, which enables a client compiler to bind to the type description's members.">클라이언트 컴파일러가 형식 설명의 멤버를 바인딩할 수 있도록 하는 형식 설명에 대한 <see langword="ITypeComp" /> 인터페이스를 검색합니다.</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface of the containing type library. This parameter is passed uninitialized.">이 메서드는 반환될 때 포함하는 형식 라이브러리의 <see langword="ITypeComp" /> 인터페이스에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable.">지정된 변수를 설명하는 <see langword="VARDESC" /> 구조를 검색합니다.</summary>
      <param name="index" vsli:raw="The index of the variable description to return.">반환할 변수 설명의 인덱스입니다.</param>
      <param name="ppVarDesc" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable. This parameter is passed uninitialized.">이 메서드는 반환될 때 지정한 변수를 설명하는 <see langword="VARDESC" /> 구조체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary vsli:raw="Invokes a method, or accesses a property of an object, that implements the interface described by the type description.">메서드를 호출하거나 개체의 속성에 액세스하여 형식 설명에서 설명한 인터페이스를 구현합니다.</summary>
      <param name="pvInstance" vsli:raw="A reference to the interface described by this type description.">이 형식 설명에 설명된 인터페이스에 대한 참조입니다.</param>
      <param name="memid" vsli:raw="A value that identifies the interface member.">인터페이스 멤버를 식별하는 값입니다.</param>
      <param name="wFlags" vsli:raw="Flags that describe the context of the invoke call.">Invoke 호출의 컨텍스트를 설명하는 플래그입니다.</param>
      <param name="pDispParams" vsli:raw="A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.">인수의 배열, 명명된 인수에 대한 인수 DISPID의 배열 및 배열에 있는 요소의 개수가 들어 있는 구조체에 대한 참조입니다.</param>
      <param name="pVarResult" vsli:raw="A reference to the location at which the result is to be stored. If &lt;paramref name=&quot;wFlags&quot; /&gt; specifies &lt;see langword=&quot;DISPATCH_PROPERTYPUT&quot; /&gt; or &lt;see langword=&quot;DISPATCH_PROPERTYPUTREF&quot; /&gt;, &lt;paramref name=&quot;pVarResult&quot; /&gt; is ignored. Set to &lt;see langword=&quot;null&quot; /&gt; if no result is desired.">결과를 저장할 위치에 대한 참조입니다. <paramref name="wFlags" />가 <see langword="DISPATCH_PROPERTYPUT" /> 또는 <see langword="DISPATCH_PROPERTYPUTREF" />를 지정하는 경우에는 <paramref name="pVarResult" />가 무시됩니다. 결과가 필요하지 않으면 <see langword="null" />로 설정합니다.</param>
      <param name="pExcepInfo" vsli:raw="A pointer to an exception information structure, which is filled in only if &lt;see langword=&quot;DISP_E_EXCEPTION&quot; /&gt; is returned.">예외 정보 구조체에 대한 포인터로, <see langword="DISP_E_EXCEPTION" />이 반환되는 경우에만 채워집니다.</param>
      <param name="puArgErr" vsli:raw="If &lt;see langword=&quot;Invoke&quot; /&gt; returns &lt;see langword=&quot;DISP_E_TYPEMISMATCH&quot; /&gt;, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates the index within &lt;c&gt;rgvarg&lt;/c&gt; of the argument with the incorrect type. If more than one argument returns an error, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates only the first argument with an error. This parameter is passed uninitialized.">
        <see langword="Invoke" />가 <see langword="DISP_E_TYPEMISMATCH" />를 반환하는 경우 <paramref name="puArgErr" />는 형식이 잘못된 인수의 <c>rgvarg</c> 내에 있는 인덱스를 나타냅니다. 둘 이상의 인수가 오류를 반환하면 <paramref name="puArgErr" />는 오류를 포함하는 첫 번째 인수만 나타냅니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">이전에 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 메서드에서 반환한 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 구조체를 해제합니다.</summary>
      <param name="pFuncDesc" vsli:raw="A reference to the &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure to release.">해제할 <see langword="FUNCDESC" /> 구조체에 대한 참조입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)&quot; /&gt; method.">이전에 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 메서드에서 반환한 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 구조체를 해제합니다.</summary>
      <param name="pTypeAttr" vsli:raw="A reference to the &lt;see langword=&quot;TYPEATTR&quot; /&gt; structure to release.">해제할 <see langword="TYPEATTR" /> 구조체에 대한 참조입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see langword=&quot;VARDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">이전에 <see langword="VARDESC" /> 메서드에서 반환한 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 구조체를 해제합니다.</summary>
      <param name="pVarDesc" vsli:raw="A reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure to release.">해제할 <see langword="VARDESC" /> 구조체에 대한 참조입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeInfo2&quot; /&gt; interface.">
        <see langword="ITypeInfo2" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary vsli:raw="Retrieves the addresses of static functions or variables, such as those defined in a DLL.">DLL에 정의된 것과 같은 정적 함수나 변수의 주소를 검색합니다.</summary>
      <param name="memid" vsli:raw="The member ID of the &lt;see langword=&quot;static&quot; /&gt; member's address to retrieve.">검색할 <see langword="static" /> 멤버 주소의 멤버 ID입니다.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies whether the member is a property, and if so, what kind.">멤버가 속성인지 여부와 속성일 경우 종류를 지정하는 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 값 중 하나입니다.</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;static&quot; /&gt; member. This parameter is passed uninitialized.">이 메서드는 반환될 때 <see langword="static" /> 멤버에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary vsli:raw="Creates a new instance of a type that describes a component class (coclass).">구성 요소 클래스(coclass)를 설명하는 형식의 새 인스턴스를 만듭니다.</summary>
      <param name="pUnkOuter" vsli:raw="An object that acts as the controlling &lt;see langword=&quot;IUnknown&quot; /&gt;.">제어용 <see langword="IUnknown" />으로 작용하는 개체입니다.</param>
      <param name="riid" vsli:raw="The IID of the interface that the caller uses to communicate with the resulting object.">호출자가 결과 개체와 통신하기 위해 사용하는 인터페이스의 IID입니다.</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the created object. This parameter is passed uninitialized.">이 메서드는 반환될 때 만들어진 개체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary vsli:raw="Gets all custom data items for the library.">라이브러리에 대한 모든 사용자 지정 데이터 항목을 가져옵니다.</summary>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">모든 사용자 지정 데이터 항목을 보유하는 <see langword="CUSTDATA" />에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all custom data from the specified function.">지정한 함수에서 모든 사용자 지정 데이터를 가져옵니다.</summary>
      <param name="index" vsli:raw="The index of the function to get the custom data for.">사용자 지정 데이터를 가져올 함수의 인덱스입니다.</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">모든 사용자 지정 데이터 항목을 보유하는 <see langword="CUSTDATA" />에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all custom data for the specified implementation type.">지정된 구현 형식에 대한 모든 사용자 지정 데이터를 가져옵니다.</summary>
      <param name="index" vsli:raw="The index of the implementation type for the custom data.">사용자 지정 데이터에 대한 구현 형식의 인덱스입니다.</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt; which holds all custom data items.">모든 사용자 지정 데이터 항목을 보유하는 <see langword="CUSTDATA" />에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all of the custom data for the specified function parameter.">지정된 함수 매개 변수에 대한 모든 사용자 지정 데이터를 가져옵니다.</summary>
      <param name="indexFunc" vsli:raw="The index of the function to get the custom data for.">사용자 지정 데이터를 가져올 함수의 인덱스입니다.</param>
      <param name="indexParam" vsli:raw="The index of the parameter of this function to get the custom data for.">사용자 지정 데이터를 가져올 이 함수의 매개 변수 인덱스입니다.</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">모든 사용자 지정 데이터 항목을 보유하는 <see langword="CUSTDATA" />에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets the variable for the custom data.">사용자 지정 데이터에 대한 변수를 가져옵니다.</summary>
      <param name="index" vsli:raw="The index of the variable to get the custom data for.">사용자 지정 데이터를 가져올 변수의 인덱스입니다.</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">모든 사용자 지정 데이터 항목을 보유하는 <see langword="CUSTDATA" />에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary vsli:raw="Retrieves the type library that contains this type description and its index within that type library.">이 형식 설명과 해당 형식 라이브러리에 있는 인덱스를 포함하는 형식 라이브러리를 검색합니다.</summary>
      <param name="ppTLB" vsli:raw="When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.">이 메서드는 반환될 때 포함하는 형식 라이브러리에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pIndex" vsli:raw="When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.">이 메서드는 반환될 때 포함하는 형식 라이브러리에 있는 형식 설명의 인덱스에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data.">사용자 지정 데이터를 가져옵니다.</summary>
      <param name="guid" vsli:raw="The GUID used to identify the data.">데이터을 식별하는 데 사용되는 GUID입니다.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">이 메서드가 반환될 때 검색된 데이터를 넣을 위치를 지정하는 <see langword="Object" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Retrieves a description or specification of an entry point for a function in a DLL.">DLL에 있는 함수에 대한 진입점의 설명 또는 사양을 검색합니다.</summary>
      <param name="memid" vsli:raw="The ID of the member function whose DLL entry description is to be returned.">DLL 항목 설명이 반환되는 멤버 함수의 ID입니다.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by &lt;paramref name=&quot;memid&quot; /&gt;.">
        <paramref name="memid" />로 식별되는 멤버 종류를 지정하는 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 값 중 하나입니다.</param>
      <param name="pBstrDllName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;paramref name=&quot;pBstrDllName&quot; /&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the DLL.">
        <see langword="null" />이 아니면 함수는 DLL의 이름을 포함하는 <see langword="BSTR" />에 <paramref name="pBstrDllName" />을 설정합니다.</param>
      <param name="pBstrName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;c&gt;lpbstrName&lt;/c&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the entry point.">
        <see langword="null" />이 아니면 함수는 진입점의 이름을 포함하는 <see langword="BSTR" />에 <c>lpbstrName</c>을 설정합니다.</param>
      <param name="pwOrdinal" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, and the function is defined by an ordinal, then &lt;c&gt;lpwOrdinal&lt;/c&gt; is set to point to the ordinal.">
        <see langword="null" />이 아니고 함수가 서수에 의해 정의되면 <c>lpwOrdinal</c>이 서수를 가리키도록 설정됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.">설명서 문자열, 전체 도움말 파일 이름과 경로, 지정된 형식 설명에 대한 도움말 항목의 컨텍스트 ID를 검색합니다.</summary>
      <param name="index" vsli:raw="The ID of the member whose documentation is to be returned.">설명서가 반환되는 멤버의 ID입니다.</param>
      <param name="strName" vsli:raw="When this method returns, contains the name of the item method. This parameter is passed uninitialized.">이 메서드는 반환될 때 항목 메서드의 이름을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">이 메서드가 반환될 때 지정된 항목에 대한 설명서 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.">이 메서드는 반환될 때 지정한 항목과 연관된 도움말 컨텍스트에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.">이 메서드는 반환될 때 도움말 파일의 정규화된 이름을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.">설명서 문자열, 전체 도움말 파일 이름 및 경로, 사용할 지역화 컨텍스트, 도움말 파일의 라이브러리 도움말 항목에 대한 컨텍스트 ID를 검색합니다.</summary>
      <param name="memid" vsli:raw="The member identifier for the type description.">형식 설명에 대한 멤버 식별자입니다.</param>
      <param name="pbstrHelpString" vsli:raw="When this method returns, contains a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the specified item. If the caller does not need the item name, &lt;paramref name=&quot;pbstrHelpString&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">이 메서드는 반환될 때 지정된 항목의 이름이 포함된 <see langword="BSTR" />을 포함합니다. 호출자에게 항목 이름이 필요 없는 경우 <paramref name="pbstrHelpString" />은 <see langword="null" />일 수 있습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pdwHelpStringContext" vsli:raw="When this method returns, contains the Help localization context. If the caller does not need the Help context, &lt;paramref name=&quot;pdwHelpStringContext&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">이 메서드의 반환 값에 도움말 지역화 컨텍스트가 포함됩니다. 호출자에게 도움말 컨텍스트가 필요 없는 경우 <paramref name="pdwHelpStringContext" />는 <see langword="null" />일 수 있습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pbstrHelpStringDll" vsli:raw="When this method returns, contains a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the fully qualified name of the file containing the DLL used for the Help file. If the caller does not need the file name, &lt;paramref name=&quot;pbstrHelpStringDll&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">이 메서드의 반환 값에 도움말 파일에 사용되는 DLL이 들어 있는 파일의 정규화된 이름이 포함된 <see langword="BSTR" />이 포함됩니다. 호출자에게 파일 이름이 필요 없는 경우 <paramref name="pbstrHelpStringDll" />은 <see langword="null" />일 수 있습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data from the specified function.">지정된 함수에서 사용자 지정 데이터를 가져옵니다.</summary>
      <param name="index" vsli:raw="The index of the function to get the custom data for.">사용자 지정 데이터를 가져올 함수의 인덱스입니다.</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">데이터을 식별하는 데 사용되는 GUID입니다.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specified where to put the data. This parameter is passed uninitialized.">이 메서드가 반환될 때 데이터를 넣을 위치를 지정하는 <see langword="Object" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure that contains information about a specified function.">지정된 함수에 대한 정보가 들어 있는 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 구조체를 검색합니다.</summary>
      <param name="index" vsli:raw="The index of the function description to return.">반환할 함수 설명의 인덱스입니다.</param>
      <param name="ppFuncDesc" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure that describes the specified function. This parameter is passed uninitialized.">이 메서드는 반환될 때 지정한 함수를 설명하는 <see langword="FUNCDESC" /> 구조체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary vsli:raw="Binds to a specific member based on a known DISPID, where the member name is not known (for example, when binding to a default member).">알려진 DISPID를 기준으로 특정 멤버에 바인딩합니다. 여기서는 멤버 이름이 알려져 있지 않습니다(예: 기본 멤버에 바인딩할 경우).</summary>
      <param name="memid" vsli:raw="The member identifier.">멤버 식별자입니다.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by memid.">memid로 식별되는 멤버의 종류를 지정하는 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 값 중 하나입니다.</param>
      <param name="pFuncIndex" vsli:raw="When this method returns, contains an index into the function. This parameter is passed uninitialized.">이 메서드의 반환 값에는 함수에 대한 인덱스가 포함됩니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary vsli:raw="Maps between member names and member IDs, and parameter names and parameter IDs.">멤버 이름과 멤버 ID, 매개 변수 이름과 매개 변수 ID를 매핑합니다.</summary>
      <param name="rgszNames" vsli:raw="An array of names to map.">매핑할 이름 배열입니다.</param>
      <param name="cNames" vsli:raw="The count of names to map.">매핑할 이름의 수입니다.</param>
      <param name="pMemId" vsli:raw="When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.">이 메서드는 반환될 때 이름 매핑이 저장될 배열에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the implementation type of the custom data.">사용자 지정 데이터의 구현 형식을 가져옵니다.</summary>
      <param name="index" vsli:raw="The index of the implementation type for the custom data.">사용자 지정 데이터에 대한 구현 형식의 인덱스입니다.</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">데이터을 식별하는 데 사용되는 GUID입니다.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">이 메서드가 반환될 때 검색된 데이터를 넣을 위치를 지정하는 <see langword="Object" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.IMPLTYPEFLAGS&quot; /&gt; value for one implemented interface or base interface in a type description.">형식 설명의 구현된 인터페이스나 기본 인터페이스에 대한 <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 값을 검색합니다.</summary>
      <param name="index" vsli:raw="The index of the implemented interface or base interface.">구현된 인터페이스나 기본 인터페이스의 인덱스입니다.</param>
      <param name="pImplTypeFlags" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;IMPLTYPEFLAGS&quot; /&gt; enumeration. This parameter is passed uninitialized.">이 메서드는 반환될 때 <see langword="IMPLTYPEFLAGS" /> 열거형에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary vsli:raw="Retrieves marshaling information.">마샬링 정보를 검색합니다.</summary>
      <param name="memid" vsli:raw="The member ID that indicates which marshaling information is needed.">마샬링 정보가 필요함을 나타내는 멤버 ID입니다.</param>
      <param name="pBstrMops" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;opcode&quot; /&gt; string used in marshaling the fields of the structure described by the referenced type description, or returns &lt;see langword=&quot;null&quot; /&gt; if there is no information to return. This parameter is passed uninitialized.">이 메서드는 반환될 때 참조된 형식 설명에 설명된 구조체의 필드를 마샬링하는 데 사용한 <see langword="opcode" /> 문자열에 대한 참조를 포함합니다. 반환할 정보가 없으면 <see langword="null" />을 반환합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.">지정한 함수 ID에 해당하는 지정한 멤버 ID를 가진 변수(속성, 메서드 및 해당 매개 변수의 이름)를 검색합니다.</summary>
      <param name="memid" vsli:raw="The ID of the member whose name (or names) is to be returned.">이름 또는 이름들을 반환할 멤버의 ID입니다.</param>
      <param name="rgBstrNames" vsli:raw="When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.">이 메서드는 반환되면, 멤버와 연관된 이름을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="cMaxNames" vsli:raw="The length of the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array.">
        <paramref name="rgBstrNames" /> 배열의 길이입니다.</param>
      <param name="pcNames" vsli:raw="When this method returns, contains the number of names in the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array. This parameter is passed uninitialized.">이 메서드는 반환될 때 <paramref name="rgBstrNames" /> 배열에 이름 수를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the specified custom data parameter.">지정된 사용자 지정 데이터 매개 변수를 가져옵니다.</summary>
      <param name="indexFunc" vsli:raw="The index of the function to get the custom data for.">사용자 지정 데이터를 가져올 함수의 인덱스입니다.</param>
      <param name="indexParam" vsli:raw="The index of the parameter of this function to get the custom data for.">사용자 지정 데이터를 가져올 이 함수의 매개 변수 인덱스입니다.</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">데이터을 식별하는 데 사용되는 GUID입니다.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">이 메서드가 반환될 때 검색된 데이터를 넣을 위치를 지정하는 <see langword="Object" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the referenced type descriptions, if a type description references other type descriptions.">형식 설명에서 다른 형식 설명을 참조할 경우 참조된 형식 설명을 검색합니다.</summary>
      <param name="hRef" vsli:raw="A handle to the referenced type description to return.">반환할 참조된 형식 설명에 대한 핸들입니다.</param>
      <param name="ppTI" vsli:raw="When this method returns, contains the referenced type description. This parameter is passed uninitialized.">이 메서드는 반환될 때 참조된 형식 설명을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the type description of the implemented interface types, if a type description describes a COM class.">형식 설명이 COM 클래스를 설명할 경우 구현된 인터페이스 형식에 대한 형식 설명을 검색합니다.</summary>
      <param name="index" vsli:raw="The index of the implemented type whose handle is returned.">핸들이 반환되는 구현된 형식의 인덱스입니다.</param>
      <param name="href" vsli:raw="When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.">이 메서드는 반환될 때 구현된 인터페이스의 핸들에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure that contains the attributes of the type description.">형식 설명의 특성이 들어 있는 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 구조체를 검색합니다.</summary>
      <param name="ppTypeAttr" vsli:raw="When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.">이 메서드는 반환될 때 이 형식 설명의 특성을 포함하는 구조체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface for the type description, which enables a client compiler to bind to the type description's members.">클라이언트 컴파일러가 형식 설명의 멤버를 바인딩할 수 있도록 하는 형식 설명에 대한 <see langword="ITypeComp" /> 인터페이스를 검색합니다.</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;ITypeComp&quot; /&gt; of the containing type library. This parameter is passed uninitialized.">이 메서드는 반환될 때 포함하는 형식 라이브러리의 <see langword="ITypeComp" />에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary vsli:raw="Returns the type flags without any allocations. This method returns a &lt;see langword=&quot;DWORD&quot; /&gt; type flag, which expands the type flags without growing the &lt;see langword=&quot;TYPEATTR&quot; /&gt; (type attribute).">할당 없이 형식 플래그를 반환합니다. 이 메서드는 <see langword="TYPEATTR" />(형식 특성)을 늘리지 않으면서 형식 플래그를 확장하는 <see langword="DWORD" /> 형식 플래그를 확장합니다.</summary>
      <param name="pTypeFlags" vsli:raw="When this method returns, contains a &lt;see langword=&quot;DWORD&quot; /&gt; reference to a &lt;see langword=&quot;TYPEFLAG&quot; /&gt;. This parameter is passed uninitialized.">이 메서드는 반환될 때 <see langword="TYPEFLAG" />에 대한 <see langword="DWORD" /> 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Returns the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration quickly, without doing any allocations.">할당을 수행하지 않고 <see langword="TYPEKIND" /> 열거형을 빠르게 반환합니다.</summary>
      <param name="pTypeKind" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration. This parameter is passed uninitialized.">이 메서드는 반환될 때 <see langword="TYPEKIND" /> 열거형에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the variable for the custom data.">사용자 지정 데이터에 대한 변수를 가져옵니다.</summary>
      <param name="index" vsli:raw="The index of the variable to get the custom data for.">사용자 지정 데이터를 가져올 변수의 인덱스입니다.</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">데이터을 식별하는 데 사용되는 GUID입니다.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">이 메서드가 반환될 때 검색된 데이터를 넣을 위치를 지정하는 <see langword="Object" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable.">지정된 변수를 설명하는 <see langword="VARDESC" /> 구조를 검색합니다.</summary>
      <param name="index" vsli:raw="The index of the variable description to return.">반환할 변수 설명의 인덱스입니다.</param>
      <param name="ppVarDesc" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable. This parameter is passed uninitialized.">이 메서드는 반환될 때 지정한 변수를 설명하는 <see langword="VARDESC" /> 구조체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary vsli:raw="Binds to a specific member based on a known &lt;see langword=&quot;DISPID&quot; /&gt;, where the member name is not known (for example, when binding to a default member).">알려진 <see langword="DISPID" />를 기준으로 특정 멤버에 바인딩합니다. 여기서는 멤버 이름이 알려져 있지 않습니다(예: 기본 멤버에 바인딩할 경우).</summary>
      <param name="memid" vsli:raw="The member identifier.">멤버 식별자입니다.</param>
      <param name="pVarIndex" vsli:raw="When this method returns, contains an index of &lt;paramref name=&quot;memid&quot; /&gt;. This parameter is passed uninitialized.">이 메서드의 반환 값에는 <paramref name="memid" />의 인덱스가 포함됩니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary vsli:raw="Invokes a method, or accesses a property of an object, that implements the interface described by the type description.">메서드를 호출하거나 개체의 속성에 액세스하여 형식 설명에서 설명한 인터페이스를 구현합니다.</summary>
      <param name="pvInstance" vsli:raw="A reference to the interface described by this type description.">이 형식 설명에 설명된 인터페이스에 대한 참조입니다.</param>
      <param name="memid" vsli:raw="Identifier of the interface member.">인터페이스 멤버의 식별자입니다.</param>
      <param name="wFlags" vsli:raw="Flags describing the context of the invoke call.">Invoke 호출의 컨텍스트를 설명하는 플래그입니다.</param>
      <param name="pDispParams" vsli:raw="A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.">인수의 배열, 명명된 인수에 대한 인수 DISPID의 배열 및 배열에 있는 요소의 개수가 들어 있는 구조체에 대한 참조입니다.</param>
      <param name="pVarResult" vsli:raw="A reference to the location at which the result is to be stored. If &lt;paramref name=&quot;wFlags&quot; /&gt; specifies &lt;see langword=&quot;DISPATCH_PROPERTYPUT&quot; /&gt; or &lt;see langword=&quot;DISPATCH_PROPERTYPUTREF&quot; /&gt;, &lt;paramref name=&quot;pVarResult&quot; /&gt; is ignored. Set to &lt;see langword=&quot;null&quot; /&gt; if no result is desired.">결과를 저장할 위치에 대한 참조입니다. <paramref name="wFlags" />가 <see langword="DISPATCH_PROPERTYPUT" /> 또는 <see langword="DISPATCH_PROPERTYPUTREF" />를 지정하는 경우에는 <paramref name="pVarResult" />가 무시됩니다. 결과가 필요하지 않으면 <see langword="null" />로 설정합니다.</param>
      <param name="pExcepInfo" vsli:raw="A pointer to an exception information structure, which is filled in only if &lt;see langword=&quot;DISP_E_EXCEPTION&quot; /&gt; is returned.">예외 정보 구조체에 대한 포인터로, <see langword="DISP_E_EXCEPTION" />이 반환되는 경우에만 채워집니다.</param>
      <param name="puArgErr" vsli:raw="If &lt;see langword=&quot;Invoke&quot; /&gt; returns &lt;see langword=&quot;DISP_E_TYPEMISMATCH&quot; /&gt;, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates the index of the argument with incorrect type. If more than one argument returns an error, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates only the first argument with an error.">
        <see langword="Invoke" />가 <see langword="DISP_E_TYPEMISMATCH" />를 반환하는 경우 <paramref name="puArgErr" />는 형식이 잘못된 인수의 인덱스를 나타냅니다. 둘 이상의 인수가 오류를 반환하면 <paramref name="puArgErr" />는 오류를 포함하는 첫 번째 인수만 나타냅니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">이전에 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 메서드에서 반환한 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 구조체를 해제합니다.</summary>
      <param name="pFuncDesc" vsli:raw="A reference to the &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure to release.">해제할 <see langword="FUNCDESC" /> 구조체에 대한 참조입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)&quot; /&gt; method.">이전에 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 메서드에서 반환한 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 구조체를 해제합니다.</summary>
      <param name="pTypeAttr" vsli:raw="A reference to the &lt;see langword=&quot;TYPEATTR&quot; /&gt; structure to release.">해제할 <see langword="TYPEATTR" /> 구조체에 대한 참조입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see langword=&quot;VARDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">이전에 <see langword="VARDESC" /> 메서드에서 반환한 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 구조체를 해제합니다.</summary>
      <param name="pVarDesc" vsli:raw="A reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure to release.">해제할 <see langword="VARDESC" /> 구조체에 대한 참조입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeLib&quot; /&gt; interface.">
        <see langword="ITypeLib" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary vsli:raw="Finds occurrences of a type description in a type library.">형식 라이브러리에 들어 있는 형식 설명의 항목을 찾습니다.</summary>
      <param name="szNameBuf" vsli:raw="The name to search for. This is an in/out parameter.">검색할 이름입니다. 이는 in/out 매개 변수입니다.</param>
      <param name="lHashVal" vsli:raw="A hash value to speed up the search, computed by the &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt; function. If &lt;paramref name=&quot;lHashVal&quot; /&gt; is 0, a value is computed.">검색 속도를 높이기 위한 해시 값이며 <see langword="LHashValOfNameSys" /> 함수에서 계산됩니다. <paramref name="lHashVal" />이 0이면 값이 계산됩니다.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains an array of pointers to the type descriptions that contain the name specified in &lt;paramref name=&quot;szNameBuf&quot; /&gt;. This parameter is passed uninitialized.">이 메서드는 반환될 때 <paramref name="szNameBuf" />에 지정된 이름을 포함하는 형식 설명에 대한 포인터의 배열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="rgMemId" vsli:raw="An array of the &lt;see langword=&quot;MEMBERID&quot; /&gt; 's of the found items; &lt;paramref name=&quot;rgMemId&quot; /&gt; [i] is the &lt;see langword=&quot;MEMBERID&quot; /&gt; that indexes into the type description specified by &lt;paramref name=&quot;ppTInfo&quot; /&gt; [i]. Cannot be &lt;see langword=&quot;null&quot; /&gt;.">발견된 항목에 대한 <see langword="MEMBERID" />의 배열 <paramref name="rgMemId" />[i]는 <paramref name="ppTInfo" />[i]에서 지정한 형식 설명으로 인덱스를 만드는 <see langword="MEMBERID" />이며 <see langword="null" />일 수 없습니다.</param>
      <param name="pcFound" vsli:raw="On entry, indicates how many instances to look for. For example, &lt;paramref name=&quot;pcFound&quot; /&gt; = 1 can be called to find the first occurrence. The search stops when one instance is found.  &#xA;  &#xA; On exit, indicates the number of instances that were found. If the &lt;see langword=&quot;in&quot; /&gt; and &lt;see langword=&quot;out&quot; /&gt; values of &lt;paramref name=&quot;pcFound&quot; /&gt; are identical, there might be more type descriptions that contain the name.">항목에서 찾을 인스턴스의 수를 나타냅니다. 예를 들어, 첫 번째 항목을 찾기 위해 <paramref name="pcFound" /> = 1을 호출할 수 있습니다. 이때 인스턴스를 하나 발견하면 검색을 중지합니다.
종료할 때 발견한 인스턴스의 수를 알려 줍니다. <paramref name="pcFound" />의 <see langword="in" />과 <see langword="out" />의 값이 동일하면 이름을 포함하는 형식 설명이 더 많을 수 있습니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.">라이브러리의 설명서 문자열, 전체 도움말 파일 이름과 경로, 도움말 파일의 라이브러리 도움말 항목에 대한 컨텍스트 식별자를 검색합니다.</summary>
      <param name="index" vsli:raw="The index of the type description whose documentation is to be returned.">반환될 설명서가 있는 형식 설명의 인덱스입니다.</param>
      <param name="strName" vsli:raw="When this method returns, contains a string that represents the name of the specified item. This parameter is passed uninitialized.">이 메서드는 반환될 때 지정한 항목의 이름을 나타내는 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="strDocString" vsli:raw="When this method returns, contains a string that represents the documentation string for the specified item. This parameter is passed uninitialized.">이 메서드는 반환될 때 지정한 항목의 설명서 문자열을 나타내는 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.">이 메서드는 반환될 때 지정한 항목과 연관된 도움말 컨텍스트 식별자를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains a string that represents the fully qualified name of the Help file. This parameter is passed uninitialized.">이 메서드는 반환될 때 도움말 파일의 정규화된 이름을 나타내는 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves the structure that contains the library's attributes.">라이브러리의 특성이 들어 있는 구조를 검색합니다.</summary>
      <param name="ppTLibAttr" vsli:raw="When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.">이 메서드는 반환될 때 라이브러리의 특성을 포함하는 구조체를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Enables a client compiler to bind to a library's types, variables, constants, and global functions.">클라이언트 컴파일러가 라이브러리의 형식, 변수, 상수 및 전역 함수를 바인딩할 수 있도록 합니다.</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains an instance of a &lt;see langword=&quot;ITypeComp&quot; /&gt; instance for this &lt;see langword=&quot;ITypeLib&quot; /&gt;. This parameter is passed uninitialized.">이 메서드는 반환될 때 이 <see langword="ITypeComp" />에 대한 <see langword="ITypeLib" /> 인스턴스의 인스턴스를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the specified type description in the library.">라이브러리에서 지정된 형식 설명을 검색합니다.</summary>
      <param name="index" vsli:raw="The index of the &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface to return.">반환할 <see langword="ITypeInfo" /> 인터페이스의 인덱스입니다.</param>
      <param name="ppTI" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeInfo&quot; /&gt; describing the type referenced by &lt;paramref name=&quot;index&quot; /&gt;. This parameter is passed uninitialized.">이 메서드는 반환될 때 <paramref name="index" />가 참조하는 형식을 설명하는 <see langword="ITypeInfo" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary vsli:raw="Returns the number of type descriptions in the type library.">형식 라이브러리에 있는 형식 설명의 수를 반환합니다.</summary>
      <returns vsli:raw="The number of type descriptions in the type library.">형식 라이브러리에 있는 형식 설명의 수입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the type description that corresponds to the specified GUID.">지정된 GUID에 해당하는 형식 설명을 검색합니다.</summary>
      <param name="guid" vsli:raw="The IID of the interface or CLSID of the class whose type info is requested.">형식 정보가 필요한 클래스 CLSID 또는 인터페이스 IID입니다.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains the requested &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface. This parameter is passed uninitialized.">이 메서드는 반환될 때 요청한 <see langword="ITypeInfo" /> 인터페이스를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Retrieves the type of a type description.">형식 설명의 형식을 검색합니다.</summary>
      <param name="index" vsli:raw="The index of the type description within the type library.">형식 라이브러리에 있는 형식 설명의 인덱스입니다.</param>
      <param name="pTKind" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration for the type description. This parameter is passed uninitialized.">이 메서드는 반환될 때 형식 설명의 <see langword="TYPEKIND" /> 열거형에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary vsli:raw="Indicates whether a passed-in string contains the name of a type or member described in the library.">라이브러리에 설명되어 있는 형식이나 멤버의 이름이 전달된 문자열에 들어 있는지 여부를 나타냅니다.</summary>
      <param name="szNameBuf" vsli:raw="The string to test. This is an in/out parameter.">테스트할 문자열입니다. 이는 in/out 매개 변수입니다.</param>
      <param name="lHashVal" vsli:raw="The hash value of &lt;paramref name=&quot;szNameBuf&quot; /&gt;.">
        <paramref name="szNameBuf" />의 해시 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;szNameBuf&quot; /&gt; was found in the type library; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="szNameBuf" />가 형식 라이브러리에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary vsli:raw="Releases the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPELIBATTR&quot; /&gt; structure originally obtained from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)&quot; /&gt; method.">
        <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> 메서드에서 처음 가져온 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 구조체를 해제합니다.</summary>
      <param name="pTLibAttr" vsli:raw="The &lt;see langword=&quot;TLIBATTR&quot; /&gt; structure to release.">해제할 <see langword="TLIBATTR" /> 구조체입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary vsli:raw="Provides a managed definition of the &lt;see langword=&quot;ITypeLib2&quot; /&gt; interface.">
        <see langword="ITypeLib2" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary vsli:raw="Finds occurrences of a type description in a type library.">형식 라이브러리에 들어 있는 형식 설명의 항목을 찾습니다.</summary>
      <param name="szNameBuf" vsli:raw="The name to search for.">검색할 이름입니다.</param>
      <param name="lHashVal" vsli:raw="A hash value to speed up the search, computed by the &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt; function. If &lt;paramref name=&quot;lHashVal&quot; /&gt; is 0, a value is computed.">검색 속도를 높이기 위한 해시 값이며 <see langword="LHashValOfNameSys" /> 함수에서 계산됩니다. <paramref name="lHashVal" />이 0이면 값이 계산됩니다.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains an array of pointers to the type descriptions that contain the name specified in &lt;paramref name=&quot;szNameBuf&quot; /&gt;. This parameter is passed uninitialized.">이 메서드는 반환될 때 <paramref name="szNameBuf" />에 지정된 이름을 포함하는 형식 설명에 대한 포인터의 배열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="rgMemId" vsli:raw="When this method returns, contains an array of the &lt;see langword=&quot;MEMBERID&quot; /&gt;s of the found items; &lt;paramref name=&quot;rgMemId&quot; /&gt; [i] is the &lt;see langword=&quot;MEMBERID&quot; /&gt; that indexes into the type description specified by &lt;paramref name=&quot;ppTInfo&quot; /&gt; [i]. This parameter cannot be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">이 메서드가 반환될 때 찾은 항목에 대한 <see langword="MEMBERID" />의 배열을 포함합니다. <paramref name="rgMemId" />[i]는 <paramref name="ppTInfo" />[i]에서 지정한 형식 설명으로 인덱싱하는 <see langword="MEMBERID" />입니다. 이 매개 변수는 <see langword="null" />일 수 없습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pcFound" vsli:raw="On entry, a value, passed by reference, that indicates how many instances to look for. For example, &lt;paramref name=&quot;pcFound&quot; /&gt; = 1 can be called to find the first occurrence. The search stops when one instance is found.  &#xA;  &#xA; On exit, indicates the number of instances that were found. If the &lt;see langword=&quot;in&quot; /&gt; and &lt;see langword=&quot;out&quot; /&gt; values of &lt;paramref name=&quot;pcFound&quot; /&gt; are identical, there might be more type descriptions that contain the name.">메서드가 시작될 때 참조로 전달되는 값으로, 찾을 인스턴스의 수를 나타냅니다. 예를 들어, 첫 번째 항목을 찾기 위해 <paramref name="pcFound" /> = 1을 호출할 수 있습니다. 이때 인스턴스를 하나 발견하면 검색을 중지합니다.
종료할 때 발견한 인스턴스의 수를 알려 줍니다. <paramref name="pcFound" />의 <see langword="in" />과 <see langword="out" />의 값이 동일하면 이름을 포함하는 형식 설명이 더 많을 수 있습니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary vsli:raw="Gets all custom data items for the library.">라이브러리에 대한 모든 사용자 지정 데이터 항목을 가져옵니다.</summary>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">모든 사용자 지정 데이터 항목을 보유하는 <see langword="CUSTDATA" />에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data.">사용자 지정 데이터를 가져옵니다.</summary>
      <param name="guid" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; , passed by reference, that is used to identify the data.">데이터를 식별하는 데 사용되고 참조로 전달되는 <see cref="T:System.Guid" />입니다.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an object that specifies where to put the retrieved data. This parameter is passed uninitialized.">이 메서드가 반환될 때 검색된 데이터를 넣을 위치를 지정하는 개체를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.">라이브러리의 설명서 문자열, 전체 도움말 파일 이름과 경로, 도움말 파일의 라이브러리 도움말 항목에 대한 컨텍스트 식별자를 검색합니다.</summary>
      <param name="index" vsli:raw="An index of the type description whose documentation is to be returned.">설명서를 반환할 형식 설명의 인덱스입니다.</param>
      <param name="strName" vsli:raw="When this method returns, contains a string that specifies the name of the specified item. This parameter is passed uninitialized.">이 메서드가 반환될 때 지정된 항목의 이름을 나타내는 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">이 메서드가 반환될 때 지정된 항목에 대한 설명서 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.">이 메서드는 반환될 때 지정한 항목과 연관된 도움말 컨텍스트 식별자를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains a string that specifies the fully qualified name of the Help file. This parameter is passed uninitialized.">이 메서드가 반환될 때 도움말 파일의 정규화된 이름을 나타내는 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.">라이브러리의 설명서 문자열, 전체 도움말 파일 이름 및 경로, 사용할 지역화 컨텍스트, 도움말 파일의 라이브러리 도움말 항목에 대한 컨텍스트 ID를 검색합니다.</summary>
      <param name="index" vsli:raw="An index of the type description whose documentation is to be returned; if &lt;paramref name=&quot;index&quot; /&gt; is -1, the documentation for the library is returned.">설명서가 반환될 형식 설명의 인덱스이거나, <paramref name="index" />가 -1이면 라이브러리의 설명서가 반환됩니다.</param>
      <param name="pbstrHelpString" vsli:raw="When this method returns, contains a BSTR that specifies the name of the specified item. If the caller does not need the item name, &lt;paramref name=&quot;pbstrHelpString&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">이 메서드의 반환 값에는 지정된 항목의 이름을 지정하는 BSTR이 포함됩니다. 호출자에게 항목 이름이 필요 없는 경우 <paramref name="pbstrHelpString" />은 <see langword="null" />일 수 있습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pdwHelpStringContext" vsli:raw="When this method returns, contains the Help localization context. If the caller does not need the Help context, &lt;paramref name=&quot;pdwHelpStringContext&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">이 메서드의 반환 값에 도움말 지역화 컨텍스트가 포함됩니다. 호출자에게 도움말 컨텍스트가 필요 없는 경우 <paramref name="pdwHelpStringContext" />는 <see langword="null" />일 수 있습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pbstrHelpStringDll" vsli:raw="When this method returns, contains a BSTR that specifies the fully qualified name of the file containing the DLL used for Help file. If the caller does not need the file name, &lt;paramref name=&quot;pbstrHelpStringDll&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">이 메서드의 반환 값에 도움말 파일에 사용되는 DLL이 들어 있는 파일의 정규화된 이름을 지정하는 BSTR이 포함됩니다. 호출자에게 파일 이름이 필요 없는 경우 <paramref name="pbstrHelpStringDll" />은 <see langword="null" />일 수 있습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves the structure that contains the library's attributes.">라이브러리의 특성이 들어 있는 구조를 검색합니다.</summary>
      <param name="ppTLibAttr" vsli:raw="When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.">이 메서드는 반환될 때 라이브러리의 특성을 포함하는 구조체를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary vsli:raw="Returns statistics about a type library that are required for efficient sizing of hash tables.">해시 테이블의 크기를 효율적으로 조정하는 데 필요한 형식 라이브러리에 대한 통계를 반환합니다.</summary>
      <param name="pcUniqueNames" vsli:raw="A pointer to a count of unique names. If the caller does not need this information, set to &lt;see langword=&quot;null&quot; /&gt;.">고유 이름의 개수에 대한 포인터입니다. 호출자가 이 정보를 필요로 하지 않으면 <see langword="null" />로 설정합니다.</param>
      <param name="pcchUniqueNames" vsli:raw="When this method returns, contains a pointer to a change in the count of unique names. This parameter is passed uninitialized.">이 메서드가 반환될 때 고유 이름 개수의 변경 내용에 대한 포인터를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Enables a client compiler to bind to a library's types, variables, constants, and global functions.">클라이언트 컴파일러가 라이브러리의 형식, 변수, 상수 및 전역 함수를 바인딩할 수 있도록 합니다.</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeComp&quot; /&gt; instance for this &lt;see langword=&quot;ITypeLib&quot; /&gt;. This parameter is passed uninitialized.">이 메서드가 반환될 때 이 <see langword="ITypeComp" />에 대한 <see langword="ITypeLib" /> 인스턴스를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the specified type description in the library.">라이브러리에서 지정된 형식 설명을 검색합니다.</summary>
      <param name="index" vsli:raw="An index of the &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface to return.">반환할 <see langword="ITypeInfo" /> 인터페이스의 인덱스입니다.</param>
      <param name="ppTI" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeInfo&quot; /&gt; describing the type referenced by &lt;paramref name=&quot;index&quot; /&gt;. This parameter is passed uninitialized.">이 메서드는 반환될 때 <paramref name="index" />가 참조하는 형식을 설명하는 <see langword="ITypeInfo" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary vsli:raw="Returns the number of type descriptions in the type library.">형식 라이브러리에 있는 형식 설명의 수를 반환합니다.</summary>
      <returns vsli:raw="The number of type descriptions in the type library.">형식 라이브러리에 있는 형식 설명의 수입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the type description that corresponds to the specified GUID.">지정된 GUID에 해당하는 형식 설명을 검색합니다.</summary>
      <param name="guid" vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt;, passed by reference, that represents the IID of the &lt;see langword=&quot;CLSID&quot; /&gt; interface of the class whose type info is requested.">형식 정보가 필요한 클래스에 대한 <see langword="CLSID" />의 인터페이스 IID를 나타내는 <see cref="T:System.Guid" />로, 참조로 전달됩니다.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains the requested &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface. This parameter is passed uninitialized.">이 메서드는 반환될 때 요청한 <see langword="ITypeInfo" /> 인터페이스를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Retrieves the type of a type description.">형식 설명의 형식을 검색합니다.</summary>
      <param name="index" vsli:raw="The index of the type description within the type library.">형식 라이브러리에 있는 형식 설명의 인덱스입니다.</param>
      <param name="pTKind" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration for the type description. This parameter is passed uninitialized.">이 메서드는 반환될 때 형식 설명의 <see langword="TYPEKIND" /> 열거형에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary vsli:raw="Indicates whether a passed-in string contains the name of a type or member described in the library.">라이브러리에 설명되어 있는 형식이나 멤버의 이름이 전달된 문자열에 들어 있는지 여부를 나타냅니다.</summary>
      <param name="szNameBuf" vsli:raw="The string to test.">테스트할 문자열입니다.</param>
      <param name="lHashVal" vsli:raw="The hash value of &lt;paramref name=&quot;szNameBuf&quot; /&gt;.">
        <paramref name="szNameBuf" />의 해시 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;szNameBuf&quot; /&gt; was found in the type library; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="szNameBuf" />가 형식 라이브러리에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary vsli:raw="Releases the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPELIBATTR&quot; /&gt; structure originally obtained from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)&quot; /&gt; method.">
        <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> 메서드에서 처음 가져온 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 구조체를 해제합니다.</summary>
      <param name="pTLibAttr" vsli:raw="The &lt;see langword=&quot;TLIBATTR&quot; /&gt; structure to release.">해제할 <see langword="TLIBATTR" /> 구조체입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary vsli:raw="Defines flags that apply to type libraries.">형식 라이브러리에 해당하는 플래그를 정의합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary vsli:raw="The type library describes controls and should not be displayed in type browsers intended for nonvisual objects.">형식 라이브러리는 컨트롤을 설명하고 보이지 않는 개체용 형식 브라우저에 표시되지 않아야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary vsli:raw="The type library exists in a persisted form on disk.">형식 라이브러리는 디스크에서 지속된 형식으로 존재합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary vsli:raw="The type library should not be displayed to users, although its use is not restricted. The type library should be used by controls. Hosts should create a new type library that wraps the control with extended properties.">형식 라이브러리는 용도가 제한되어 있지 않지만 사용자에게 표시되어서는 안 됩니다. 형식 라이브러리는 컨트롤에 의해 사용되어야 합니다. 호스트는 확장된 속성을 사용하여 컨트롤을 래핑하는 새 형식 라이브러리를 만들어야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary vsli:raw="The type library is restricted, and should not be displayed to users.">형식 라이브러리는 제한되어 있으며, 사용자에게 표시되어서는 안 됩니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary vsli:raw="Contains information about how to transfer a structure element, parameter, or function return value between processes.">구조체 요소, 매개 변수, 프로세스 간 함수 반환 값을 전달하는 방법에 대한 필요한 정보가 들어 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary vsli:raw="Represents a pointer to a value that is being passed between processes.">프로세스 간에 전달되는 값에 대한 포인터를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary vsli:raw="Represents bitmask values that describe the structure element, parameter, or return value.">구조체 요소, 매개 변수 또는 반환 값을 설명하는 비트 마스크 값을 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary vsli:raw="Describes how to transfer a structure element, parameter, or function return value between processes.">구조체 요소, 매개 변수 또는 함수 반환 값을 한 프로세스에서 다른 프로세스로 전송하는 방법을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary vsli:raw="The parameter has custom data.">매개 변수에 사용자 지정 데이터가 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary vsli:raw="The parameter has default behaviors defined.">매개 변수에 정의된 기본 동작이 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary vsli:raw="The parameter passes information from the caller to the callee.">매개 변수는 호출자에서 호출 수신자로 정보를 전달합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary vsli:raw="The parameter is the local identifier of a client application.">매개 변수가 클라이언트 애플리케이션의 로컬 식별자입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary vsli:raw="The parameter is optional.">매개 변수는 선택 사항입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary vsli:raw="The parameter returns information from the callee to the caller.">매개 변수가 호출 수신자에게서 호출자에게로 정보를 반환합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary vsli:raw="The parameter is the return value of the member.">매개 변수가 멤버의 반환 값입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary vsli:raw="Does not specify whether the parameter passes or receives information.">매개 변수가 정보를 전달하는지 아니면 정보를 받는지 지정하지 않습니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;STATDATA&quot; /&gt; structure.">
        <see langword="STATDATA" /> 구조체의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ADVF&quot; /&gt; enumeration value that determines when the advisory sink is notified of changes in the data.">advise 싱크에서 데이터의 변경 내용에 대한 알림을 받을 시기를 결정하는 <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 열거형 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IAdviseSink&quot; /&gt; interface that will receive change notifications.">변경 알림을 받을 <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 인터페이스를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary vsli:raw="Represents the token that uniquely identifies the advisory connection. This token is returned by the method that sets up the advisory connection.">advise 연결을 고유하게 식별하는 토큰을 나타냅니다. 이 토큰은 advise 연결을 설정하는 메서드에 의해 반환됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure for the data of interest to the advise sink. The advise sink receives notification of changes to the data specified by this &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure.">advise 싱크에 대한 대상 데이터의 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체를 나타냅니다. advise 싱크는 이 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체에 지정된 데이터에 대한 변경 알림을 받습니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary vsli:raw="Contains statistical information about an open storage, stream, or byte-array object.">열려 있는 스토리지, 스트림 또는 바이트 배열 개체에 대한 통계 정보를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary vsli:raw="Specifies the last access time for this storage, stream, or byte array.">이 스토리지, 스트림 또는 바이트 배열에 대한 마지막 액세스 시간을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary vsli:raw="Specifies the size, in bytes, of the stream or byte array.">스트림 또는 바이트 배열의 크기를 바이트 단위로 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary vsli:raw="Indicates the class identifier for the storage object.">스토리지 개체에 대한 클래스 식별자를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary vsli:raw="Indicates the creation time for this storage, stream, or byte array.">이 스토리지, 스트림 또는 바이트 배열을 만든 시간을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary vsli:raw="Indicates the types of region locking supported by the stream or byte array.">이 스트림 또는 바이트 배열이 지원하는 영역 잠금 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary vsli:raw="Indicates the access mode that was specified when the object was opened.">개체가 열렸을때 명시된 액세스 모드를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary vsli:raw="Indicates the current state bits of the storage object (the value most recently set by the &lt;see langword=&quot;IStorage::SetStateBits&quot; /&gt; method).">
        <see langword="IStorage::SetStateBits" /> 메서드가 설정한 가장 최근 값인 스토리지 개체의 현재 상태를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary vsli:raw="Indicates the last modification time for this storage, stream, or byte array.">이 스토리지, 스트림 또는 바이트 배열에 대한 최종 수정 시간을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary vsli:raw="Represents a pointer to a null-terminated string containing the name of the object described by this structure.">이 구조체가 설명하는 개체의 이름이 들어 있으며 null로 끝나는 문자열에 대한 포인터를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary vsli:raw="Reserved for future use.">나중에 사용하기 위해 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary vsli:raw="Indicates the type of storage object, which is one of the values from the &lt;see langword=&quot;STGTY&quot; /&gt; enumeration.">
        <see langword="STGTY" /> 열거형의 값 중 하나인 스토리지 개체의 형식을 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;STGMEDIUM&quot; /&gt; structure.">
        <see langword="STGMEDIUM" /> 구조체의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary vsli:raw="Represents a pointer to an interface instance that allows the sending process to control the way the storage is released when the receiving process calls the &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; function. If &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; uses default procedures to release the storage; otherwise, &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; uses the specified &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">받는 프로세스가 <see langword="ReleaseStgMedium" /> 함수를 호출할 때 보내는 프로세스에서 스토리지를 해제하는 방법을 제어할 수 있도록 하는 인터페이스 인스턴스에 대한 포인터를 나타냅니다. <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" />가 <see langword="null" />이면 <see langword="ReleaseStgMedium" />에서는 기본 프로시저를 사용하여 스토리지를 해제하고, 그렇지 않으면 <see langword="ReleaseStgMedium" />에서는 지정된 <see langword="IUnknown" /> 인터페이스를 사용합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary vsli:raw="Specifies the type of storage medium. The marshaling and unmarshaling routines use this value to determine which union member was used. This value must be one of the elements of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; enumeration.">스토리지 미디어 형식을 지정합니다. 마샬링 및 역마샬링 루틴에서는 이 값을 사용하여 공용 구조체 멤버가 사용되었는지를 확인합니다. 이 값은 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 열거형의 요소 중 하나여야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary vsli:raw="Represents a handle, string, or interface pointer that the receiving process can use to access the data being transferred.">받는 프로세스에서 전송 중인 데이터에 액세스하는 데 사용할 수 있는 핸들, 문자열 또는 인터페이스 포인터를 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary vsli:raw="Identifies the target operating system platform.">대상 운영 체제 플랫폼을 식별합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary vsli:raw="The target operating system for the type library is Apple Macintosh. By default, all data fields are aligned on even-byte boundaries.">형식 라이브러리에 대한 대상 운영 체제는 Apple Macintosh입니다. 기본적으로 모든 데이터 필드는 짝수 바이트 경계로 맞추어집니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary vsli:raw="The target operating system for the type library is 16-bit Windows systems. By default, data fields are packed.">형식 라이브러리에 대한 대상 운영 체제는 16비트 Windows 시스템입니다. 기본적으로 데이터 필드는 패킹됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary vsli:raw="The target operating system for the type library is 32-bit Windows systems. By default, data fields are naturally aligned (for example, 2-byte integers are aligned on even-byte boundaries; 4-byte integers are aligned on quad-word boundaries, and so on).">형식 라이브러리에 대한 대상 운영 체제는 32비트 Windows 시스템입니다. 기본적으로 데이터 필드는 저절로 맞추어지는데 예를 들면 2바이트 정수는 짝수 바이트 경계로, 4바이트 정수는 네 단어 경계 등으로 맞추어집니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary vsli:raw="The target operating system for the type library is 64-bit Windows systems.">형식 라이브러리에 대한 대상 운영 체제는 64비트 Windows 시스템입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;TYMED&quot; /&gt; structure.">
        <see langword="TYMED" /> 구조체의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary vsli:raw="The storage medium is an enhanced metafile. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteEnhMetaFile&quot; /&gt; to delete the bitmap.">스토리지 미디어가 확장 메타파일입니다. <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 멤버가 <see langword="null" />이면 대상 프로세스에서 <see langword="DeleteEnhMetaFile" />을 사용하여 비트맵을 삭제해야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary vsli:raw="The storage medium is a disk file identified by a path. If the &lt;see langword=&quot;STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;OpenFile&quot; /&gt; to delete the file.">스토리지 미디어가 경로로 식별되는 디스크 파일입니다. <see langword="STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 멤버가 <see langword="null" />이면 대상 프로세스에서 <see langword="OpenFile" />을 사용하여 파일을 삭제해야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary vsli:raw="The storage medium is a Graphics Device Interface (GDI) component (HBITMAP). If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteObject&quot; /&gt; to delete the bitmap.">스토리지 미디어가 GDI(그래픽 디바이스 인터페이스) 구성 요소(HBITMAP)입니다. <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 멤버가 <see langword="null" />이면 대상 프로세스에서 <see langword="DeleteObject" />을 사용하여 비트맵을 삭제해야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary vsli:raw="The storage medium is a global memory handle (HGLOBAL). Allocate the global handle with the GMEM_SHARE flag. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;GlobalFree&quot; /&gt; to release the memory.">스토리지 미디어가 글로벌 메모리 핸들(HGLOBAL)입니다. 이 전역 핸들은 GMEM_SHARE 플래그를 사용하여 할당합니다. <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 멤버가 <see langword="null" />이면 대상 프로세스에서 <see langword="GlobalFree" />를 사용하여 메모리를 해제해야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary vsli:raw="The storage medium is a storage component identified by an &lt;see langword=&quot;IStorage&quot; /&gt; pointer. The data is in the streams and storages contained by this &lt;see langword=&quot;IStorage&quot; /&gt; instance. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is not &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;IStorage::Release&quot; /&gt; to release the storage component.">스토리지 미디어가 <see langword="IStorage" /> 포인터로 식별되는 스토리지 구성 요소입니다. 데이터는 이 <see langword="IStorage" /> 인스턴스에 포함된 스트림 및 스토리지에 있습니다. <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 멤버가 <see langword="null" />이 아니면 대상 프로세스에서 <see langword="IStorage::Release" />를 사용하여 스토리지 구성 요소를 해제해야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary vsli:raw="The storage medium is a stream object identified by an &lt;see langword=&quot;IStream&quot; /&gt; pointer. Use &lt;see langword=&quot;ISequentialStream::Read&quot; /&gt; to read the data. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is not &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;IStream::Release&quot; /&gt; to release the stream component.">스토리지 미디어가 <see langword="IStream" /> 포인터로 식별되는 스트림 개체입니다. 이 데이터를 읽으려면 <see langword="ISequentialStream::Read" />를 사용합니다. <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 멤버가 <see langword="null" />이 아니면 대상 프로세스에서 <see langword="IStream::Release" />를 사용하여 스트림 구성 요소를 해제해야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary vsli:raw="The storage medium is a metafile (HMETAFILE). Use the Windows or WIN32 functions to access the metafile's data. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteMetaFile&quot; /&gt; to delete the bitmap.">스토리지 미디어가 메타파일(HMETAFILE)입니다. 이 메타파일의 데이터에 액세스하려면 Windows 또는 WIN32 함수를 사용합니다. <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 멤버가 <see langword="null" />이면 대상 프로세스에서 <see langword="DeleteMetaFile" />을 사용하여 비트맵을 삭제해야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary vsli:raw="No data is being passed.">전달 중인 데이터가 없습니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary vsli:raw="Contains attributes of a &lt;see langword=&quot;UCOMITypeInfo&quot; /&gt;.">
        <see langword="UCOMITypeInfo" />의 특성을 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary vsli:raw="Specifies the byte alignment for an instance of this type.">이 형식의 인스턴스에 대해 바이트 맞춤을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary vsli:raw="The size of an instance of this type.">이 형식의 인스턴스 크기입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary vsli:raw="The size of this type's virtual method table (VTBL).">이 형식의 VTBL(가상 메서드 테이블)의 크기입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary vsli:raw="Indicates the number of functions on the interface this structure describes.">이 구조에서 설명하는 인터페이스에 관한 함수의 수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary vsli:raw="Indicates the number of implemented interfaces on the interface this structure describes.">이 구조에서 설명하는 인터페이스에 대해 구현된 인터페이스의 수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary vsli:raw="Indicates the number of variables and data fields on the interface described by this structure.">이 구조체에서 기술하는 인터페이스의 변수 및 데이터 필드 수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary vsli:raw="Reserved for future use.">나중에 사용하기 위해 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary vsli:raw="The GUID of the type information.">형식 정보의 GUID입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary vsli:raw="IDL attributes of the described type.">설명된 형식의 IDL 특성입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary vsli:raw="Locale of member names and documentation strings.">멤버 이름과 설명서 문자열의 로캘입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary vsli:raw="Reserved for future use.">나중에 사용하기 위해 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary vsli:raw="A constant used with the &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.memidConstructor&quot; /&gt; and &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.memidDestructor&quot; /&gt; fields.">
        <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" /> 및 <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" /> 필드에 사용된 상수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary vsli:raw="ID of constructor, or &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL&quot; /&gt; if none.">생성자의 ID이거나, 없으면 <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> 입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary vsli:raw="ID of destructor, or &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL&quot; /&gt; if none.">소멸자의 ID이거나, 없으면 <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> 입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary vsli:raw="If &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.typekind&quot; /&gt; == &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS&quot; /&gt;, specifies the type for which this type is an alias.">
        <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" /> == <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" />이면 이 형식이 별칭인 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEKIND&quot; /&gt; value describing the type this information describes.">이 정보가 설명하는 형식을 설명하는 <see cref="T:System.Runtime.InteropServices.TYPEKIND" /> 값입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary vsli:raw="Major version number.">주 버전 번호입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary vsli:raw="Minor version number.">부 버전 번호입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; value describing this information.">이 정보를 설명하는 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> 값입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary vsli:raw="Describes the type of a variable, return type of a function, or the type of a function parameter.">변수의 형식, 함수의 반환 형식 또는 함수 매개 변수의 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary vsli:raw="If the variable is &lt;see langword=&quot;VT_SAFEARRAY&quot; /&gt; or &lt;see langword=&quot;VT_PTR&quot; /&gt;, the &lt;see langword=&quot;lpValue&quot; /&gt; field contains a pointer to a &lt;see langword=&quot;TYPEDESC&quot; /&gt; that specifies the element type.">변수가 <see langword="VT_SAFEARRAY" />나 <see langword="VT_PTR" />이면, <see langword="lpValue" /> 필드에 요소 형식을 지정하는 <see langword="TYPEDESC" />에 대한 포인터가 들어 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary vsli:raw="Indicates the variant type for the item described by this &lt;see langword=&quot;TYPEDESC&quot; /&gt;.">이 <see langword="TYPEDESC" />가 설명한 항목에 대한 변형 형식을 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary vsli:raw="Defines the properties and attributes of a type description.">형식 설명의 속성과 특성을 정의합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary vsli:raw="The class supports aggregation.">이 클래스는 집계를 지원합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary vsli:raw="A type description that describes an &lt;see langword=&quot;Application&quot; /&gt; object.">
        <see langword="Application" /> 개체를 설명하는 형식 설명입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary vsli:raw="Instances of the type can be created by &lt;see langword=&quot;ITypeInfo::CreateInstance&quot; /&gt;.">이 형식의 인스턴스는 <see langword="ITypeInfo::CreateInstance" />가 만들 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary vsli:raw="The type is a control from which other types will be derived and should not be displayed to users.">이 형식은 다른 형식을 파생시킨 컨트롤이며, 사용자에게 표시되지 않아야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary vsli:raw="Indicates that the interface derives from &lt;see langword=&quot;IDispatch&quot; /&gt;, either directly or indirectly. This flag is computed; there is no Object Description Language for the flag.">이 인터페이스가 <see langword="IDispatch" />에서 직접적이든 간접적이든 파생됨을 나타냅니다. 이 플래그는 계산되므로 해당 플래그에 대한 ODL(Object Description Language)이 없습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary vsli:raw="The interface supplies both &lt;see langword=&quot;IDispatch&quot; /&gt; and VTBL binding.">이 인터페이스는 <see langword="IDispatch" />와 VTBL 바인딩을 모두 지원합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary vsli:raw="The type should not be displayed to browsers.">이 형식이 브라우저에 나타나면 안 됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary vsli:raw="The type is licensed.">이 형식은 허가되었습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary vsli:raw="The interface cannot add members at run time.">이 인터페이스는 런타임에서 멤버를 추가할 수 없습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary vsli:raw="The types used in the interface are fully compatible with Automation, including VTBL binding support. Setting dual on an interface sets both this flag and the  &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL&quot; /&gt;. This flag is not allowed on dispinterfaces.">인터페이스에서 사용된 형식은 VTBL바인딩 지원을 포함하여 Automation과 완벽하게 호환됩니다. 인터페이스에서 dual을 설정하면 이 플래그와 <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" />이 모두 설정됩니다. dispinterface에서는 이 플래그를 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary vsli:raw="The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.">이 형식은 미리 정의됩니다. 클라이언트 애플리케이션은 이 특성을 가진 개체의 단일 인스턴스를 자동으로 만들어야 합니다. 개체를 가리키는 변수의 이름은 개체의 클래스 이름과 동일합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary vsli:raw="Indicates that the interface will be using a proxy/stub dynamic link library. This flag specifies that the type library proxy should not be unregistered when the type library is unregistered.">인터페이스가 프록시/스텁 동적 연결 라이브러리를 사용할 것임을 나타냅니다. 이 플래그는 형식 라이브러리가 등록 취소될 때에도 형식 라이브러리 프록시의 등록이 취소되지 않음을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary vsli:raw="The object supports &lt;see langword=&quot;IConnectionPointWithDefault&quot; /&gt;, and has default behaviors.">이 개체는 <see langword="IConnectionPointWithDefault" />를 지원하며 기본 동작을 수행합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary vsli:raw="Should not be accessible from macro languages. This flag is intended for system-level types or types that type browsers should not display.">매크로 언어에서 액세스해서는 안 됩니다. 이 플래그는 시스템 수준 형식 또는 형식 브라우저가 표시하지 않는 형식을 위한 것입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary vsli:raw="Indicates base interfaces should be checked for name resolution before checking children, which is the reverse of the default behavior.">자식을 확인하기 전에 기본 인터페이스의 이름을 확인을 했는지를 나타냅니다. 이것은 기본 동작과 반대입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary vsli:raw="Specifies various types of data and functions.">데이터와 함수의 여러 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary vsli:raw="A type that is an alias for another type.">다른 형식의 별칭인 형식입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary vsli:raw="A set of implemented components interfaces.">구현되는 구성 요소 인터페이스 집합입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary vsli:raw="A set of methods and properties that are accessible through &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;. By default, dual interfaces return &lt;see langword=&quot;TKIND_DISPATCH&quot; /&gt;.">
        <see langword="IDispatch::Invoke" />를 통해 액세스할 수 있는 메서드와 속성 집합입니다. 기본적으로 이중 인터페이스는 <see langword="TKIND_DISPATCH" />를 반환합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary vsli:raw="A set of enumerators.">열거자 집합입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary vsli:raw="A type that has virtual functions, all of which are pure.">가상 함수가 있는 형식입니다. 이때 모든 가상 함수는 순수 가상 함수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary vsli:raw="End-of-enumeration marker.">열거형 마커의 끝입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary vsli:raw="A module that can have only static functions and data (for example, a DLL).">정적 함수와 데이터(예: DLL)만 포함할 수 있는 모듈입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary vsli:raw="A structure with no methods.">메서드가 없는 구조체입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary vsli:raw="A union of all members that have an offset of zero.">오프셋 0이 있는 모든 멤버의 공용 구조체입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary vsli:raw="Identifies a particular type library and provides localization support for member names.">특정 형식 라이브러리를 식별하고 멤버 이름에 대한 지역화 지원을 제공합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary vsli:raw="Represents a globally unique library ID of a type library.">형식 라이브러리의 전역 고유 라이브러리 ID를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary vsli:raw="Represents a locale ID of a type library.">형식 라이브러리의 로캘 ID를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary vsli:raw="Represents the target hardware platform of a type library.">형식 라이브러리의 대상 하드웨어 플랫폼을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary vsli:raw="Represents library flags.">라이브러리 플래그를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary vsli:raw="Represents the major version number of a type library.">형식 라이브러리의 주 버전 번호를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary vsli:raw="Represents the minor version number of a type library.">형식 라이브러리의 부 버전 번호를 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary vsli:raw="Describes a variable, constant, or data member.">변수, 상수 또는 데이터 멤버를 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary vsli:raw="Contains information about a variable.">변수에 대한 정보를 포함합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary vsli:raw="Contains information about a variable.">변수에 대한 정보를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary vsli:raw="Describes a symbolic constant.">기호화된 상수를 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary vsli:raw="Indicates the offset of this variable within the instance.">인스턴스에 있는 이 변수의 오프셋을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary vsli:raw="Contains the variable type.">변수 형식을 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary vsli:raw="This field is reserved for future use.">이 필드는 나중에 사용되도록 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary vsli:raw="Indicates the member ID of a variable.">변수의 멤버 ID를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary vsli:raw="Defines how to marshal a variable.">변수를 마샬링하는 방법을 정의합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary vsli:raw="Defines the properties of a variable.">변수의 속성을 정의합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary vsli:raw="Identifies the constants that define the properties of a variable.">변수의 속성을 정의하는 상수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary vsli:raw="The variable supports data binding.">이 변수는 데이터 바인딩을 지원합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary vsli:raw="The variable is the single property that best represents the object. Only one variable in type information can have this attribute.">변수는 개체를 가장 잘 표현하는 단일 속성입니다. 형식 정보에 있는 유일한 변수가 이러한 특성을 가질 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type of &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.">컴파일러가 “abc” 형식에서 이름이 “xyz”인 멤버를 찾는 최적화를 허용합니다. 이러한 멤버를 발견하여 기본 컬렉션의 요소에 대한 접근자 함수로써 플래그하면, 호출은 해당 멤버 함수로 생성됩니다. 모듈에서 허용되지 않고 dispinterface와 인터페이스의 멤버에서 허용됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary vsli:raw="The variable is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE&quot; /&gt; must also be set.">해당 변수는 사용자에게 바인딩할 수 있는 것으로 표시됩니다. <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" />도 설정되어야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary vsli:raw="The variable should not be displayed to the user in a browser, although it exists and is bindable.">이 변수가 존재하고 있고 바인딩할 수 있지만 사용자의 브라우저에 표시되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary vsli:raw="The variable is mapped as individual bindable properties.">변수는 별개의 바인딩 가능한 속성으로 매핑됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary vsli:raw="The variable appears in an object browser, but not in a properties browser.">이 변수는 속성 브라우저가 아니라 개체 브라우저에 나타납니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary vsli:raw="Assignment to the variable should not be allowed.">변수로의 할당은 허용되지 않습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary vsli:raw="Tags the interface as having default behaviors.">인터페이스가 기본 동작을 사용하는 것으로 표시합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary vsli:raw="When set, any attempt to directly change the property results in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;. The implementation of &lt;see langword=&quot;OnRequestEdit&quot; /&gt; determines if the change is accepted.">설정 시 속성을 직접 변경하려고 하면 <see langword="IPropertyNotifySink::OnRequestEdit" />이 호출됩니다. <see langword="OnRequestEdit" />가 구현되면 변경 사항이 적용될지 결정됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary vsli:raw="The variable should not be accessible from macro languages. This flag is intended for system-level variables or variables that you do not want type browsers to display.">매크로 언어에서 변수에 액세스해서는 안 됩니다. 이 플래그는 시스템 수준 변수 또는 형식 브라우저가 표시되지 않는 변수를 위한 플래그입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary vsli:raw="The variable returns an object that is a source of events.">변수는 이벤트의 소스인 개체를 반환합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary vsli:raw="The variable is the default display in the user interface.">변수가 사용자 인터페이스에 기본적으로 표시됩니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary vsli:raw="Defines the kind of variable.">변수의 종류를 정의합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary vsli:raw="The &lt;see langword=&quot;VARDESC&quot; /&gt; structure describes a symbolic constant. There is no memory associated with it.">
        <see langword="VARDESC" /> 구조체는 기호화된 상수를 설명합니다. 이 상수와 연결된 메모리는 없습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary vsli:raw="The variable can be accessed only through &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">
        <see langword="IDispatch::Invoke" />를 통해서만 변수에 액세스할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary vsli:raw="The variable is a field or member of the type. It exists at a fixed offset within each instance of the type.">변수가 형식의 필드 또는 멤버입니다. 이 변수는 형식의 각 인스턴스 내에서 고정 오프셋 위치에 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary vsli:raw="There is only one instance of the variable.">변수의 인스턴스가 하나만 있습니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary vsli:raw="Specifies the method to call when you unregister an assembly for use from COM; this allows for the execution of user-written code during the unregistration process.">COM에서 사용할 어셈블리의 등록을 취소할 때 호출할 메서드를 지정합니다. 이렇게 하면 등록 취소 중에 사용자가 작성한 코드를 실행할 수 있습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_CY&quot; /&gt;.">마샬러가 <see langword="VT_CY" />으로 마샬링할 개체를 래핑합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CurrencyWrapper&quot; /&gt; class with the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">래핑하여 <see langword="Decimal" /> 형식으로 마샬링할 <see langword="VT_CY" />을 사용하여 <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="obj" vsli:raw="The &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as &lt;see langword=&quot;VT_CY&quot; /&gt;.">래핑하여 <see langword="Decimal" />로 마샬링할 <see langword="VT_CY" />입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CurrencyWrapper&quot; /&gt; class with the object containing the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">래핑하여 <see langword="Decimal" /> 형식으로 마샬링할 <see langword="VT_CY" />을 포함하는 개체를 사용하여 <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="obj" vsli:raw="The object containing the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as &lt;see langword=&quot;VT_CY&quot; /&gt;.">래핑하여 <see langword="Decimal" />로 마샬링할 <see langword="VT_CY" />을 포함하는 개체입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter is not a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; type.">
        <paramref name="obj" /> 매개 변수가 <see cref="T:System.Decimal" /> 형식이 아닌 경우</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary vsli:raw="Gets the wrapped object to be marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">
        <see langword="VT_CY" /> 형식으로 마샬링할 래핑된 개체를 가져옵니다.</summary>
      <returns vsli:raw="The wrapped object to be marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">
        <see langword="VT_CY" /> 형식으로 마샬링할 래핑된 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)&quot; /&gt; method's IUnknown::QueryInterface calls can use the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface.">
        <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> 메서드의 IUnknown::QueryInterface 호출에서 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 인터페이스를 사용할 수 있는지 여부를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary vsli:raw="IUnknown::QueryInterface method calls can use the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface. When you use this value, the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)&quot; /&gt; method overload functions like the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)&quot; /&gt; overload.">IUnknown::QueryInterface 메서드 호출은 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 인터페이스를 사용할 수 있습니다. 이 값을 사용하면 <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> 메서드 오버로드는 <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" /> 오버로드와 비슷하게 동작합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary vsli:raw="IUnknown::QueryInterface method calls should ignore the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface.">IUnknown::QueryInterface 메서드 호출은 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 인터페이스를 무시해야 합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary vsli:raw="Provides return values for the &lt;see cref=&quot;M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> 메서드의 반환 값을 제공합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary vsli:raw="The interface for a specific interface ID is not available. In this case, the returned interface is &lt;see langword=&quot;null&quot; /&gt;. E_NOINTERFACE is returned to the caller of IUnknown::QueryInterface.">특정 인터페이스 ID에 대한 인터페이스는 사용할 수 없습니다. 이 경우 반환되는 인터페이스는 <see langword="null" />입니다. E_NOINTERFACE가 IUnknown::QueryInterface의 호출자로 반환됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary vsli:raw="The interface pointer that is returned from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)&quot; /&gt; method can be used as the result of IUnknown::QueryInterface.">
        <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> 메서드에서 반환된 인터페이스 포인터를 IUnknown::QueryInterface의 결과로 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary vsli:raw="The custom &lt;see langword=&quot;QueryInterface&quot; /&gt; was not used. Instead, the default implementation of IUnknown::QueryInterface should be used.">사용자 지정 <see langword="QueryInterface" />는 사용되지 않습니다. 대신 IUnknown::QueryInterface의 기본 구현이 사용되어야 합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary vsli:raw="Specifies the value of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; enumeration. This class cannot be inherited.">
        <see cref="T:System.Runtime.InteropServices.CharSet" /> 열거형의 값을 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultCharSetAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; value.">지정된 <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> 값을 사용하여 <see cref="T:System.Runtime.InteropServices.CharSet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="charSet" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; values.">
        <see cref="T:System.Runtime.InteropServices.CharSet" /> 값 중 하나입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary vsli:raw="Gets the default value of &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; for any call to &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt;.">모든 <see cref="T:System.Runtime.InteropServices.CharSet" /> 호출에 사용되는 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />의 기본값을 가져옵니다.</summary>
      <returns vsli:raw="The default value of &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; for any call to &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt;.">모든 <see cref="T:System.Runtime.InteropServices.CharSet" /> 호출에 사용되는 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />의 기본값입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute">
      <summary vsli:raw="Specifies the paths that are used to search for DLLs that provide functions for platform invokes.">플랫폼 호출 기능을 제공하는 DLL을 검색하는 데 사용되는 경로를 지정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; class, specifying the paths to use when searching for the targets of platform invokes.">플랫폼 대상의 검색을 호출할 때 사용할 경로를 지정하여 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="paths" vsli:raw="A bitwise combination of enumeration values that specify the paths that the &lt;c&gt;LoadLibraryEx&lt;/c&gt; function searches during platform invokes.">
        <c>LoadLibraryEx</c> 함수가 플랫폼 호출 중에 검색하는 경로를 지정하는 열거형 값의 비트 조합입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.Paths">
      <summary vsli:raw="Gets a bitwise combination of enumeration values that specify the paths that the &lt;c&gt;LoadLibraryEx&lt;/c&gt; function searches during platform invokes.">
        <c>LoadLibraryEx</c> 함수가 플랫폼 호출 중에 검색하는 경로를 지정하는 열거형 값의 비트 조합을 가져옵니다.</summary>
      <returns vsli:raw="A bitwise combination of enumeration values that specify search paths for platform invokes.">플랫폼을 호출의 검색 경로를 지정하는 열거형 값의 비트 조합입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary vsli:raw="Sets the default value of a parameter when called from a language that supports default parameters. This class cannot be inherited.">기본 매개 변수를 지원하는 언어에서 호출할 경우 매개 변수의 기본값을 설정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultParameterValueAttribute&quot; /&gt; class with the default value of a parameter.">매개 변수 기본값을 사용하여 <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="An object that represents the default value of a parameter.">매개 변수의 기본값을 나타내는 개체입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary vsli:raw="Gets the default value of a parameter.">매개 변수의 기본값을 가져옵니다.</summary>
      <returns vsli:raw="An object that represents the default value of a parameter.">매개 변수의 기본값을 나타내는 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_DISPATCH&quot; /&gt;.">마샬러가 <see langword="VT_DISPATCH" />으로 마샬링할 개체를 래핑합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt; class with the object being wrapped.">래핑할 개체를 사용하여 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="obj" vsli:raw="The object to be wrapped and converted to &lt;see cref=&quot;F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH&quot; /&gt;.">래핑되고 <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" />로 변환될 개체입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a class or an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;obj&quot; /&gt; does not support &lt;see langword=&quot;IDispatch&quot; /&gt;.">
        <paramref name="obj" />가 클래스 또는 배열이 아닌 경우
또는
<paramref name="obj" />는 <see langword="IDispatch" />를 지원하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter was marked with a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComVisibleAttribute&quot; /&gt; attribute that was passed a value of &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;obj&quot; /&gt; parameter inherits from a type marked with a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComVisibleAttribute&quot; /&gt; attribute that was passed a value of &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" /> 매개 변수가 <see langword="false" /> 값으로 전달된 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 특성으로 표시되었습니다.
또는
<paramref name="obj" /> 매개 변수가 <see langword="false" /> 값으로 전달된 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 특성으로 표시된 형식에서 상속합니다.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary vsli:raw="Gets the object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />로 래핑될 개체를 가져옵니다.</summary>
      <returns vsli:raw="The object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />에서 래핑한 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary vsli:raw="Specifies the COM dispatch identifier (DISPID) of a method, field, or property.">메서드, 필드 또는 속성의 COM DISPID(디스패치 식별자)를 지정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;DispIdAttribute&quot; /&gt; class with the specified DISPID.">지정된 DISPID를 사용하여 <see langword="DispIdAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dispId" vsli:raw="The DISPID for the member.">멤버의 DISPID입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary vsli:raw="Gets the DISPID for the member.">멤버의 DISPID를 가져옵니다.</summary>
      <returns vsli:raw="The DISPID for the member.">멤버의 DISPID입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary vsli:raw="Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.">관리되지 않는 DLL(동적 연결 라이브러리)에서 특성 사용 해당 메서드를 정적 진입점으로 노출함을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt; class with the name of the DLL containing the method to import.">가져올 메서드가 포함된 DLL의 이름을 사용하여 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dllName" vsli:raw="The name of the DLL that contains the unmanaged method. In .NET Framework, this can include an assembly display name, if the DLL is included in an assembly.">관리되지 않는 메서드를 포함하는 DLL의 이름입니다. DLL이 어셈블리에 포함되어 있는 경우 이 이름에는 어셈블리 표시 이름이 포함될 수 있습니다.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary vsli:raw="Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.">유니코드 문자를 ANSI 문자로 변환할 때 가장 적합한 매핑 동작을 활성화 또는 비활성화합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary vsli:raw="Indicates the calling convention of an entry point.">진입점의 호출 규칙을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary vsli:raw="Indicates how to marshal string parameters to the method and controls name mangling.">문자열 매개 변수를 메서드로 마샬링하는 방법을 지정하고 이름 관리를 제어합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary vsli:raw="Indicates the name or ordinal of the DLL entry point to be called.">호출할 DLL 진입점의 이름 또는 서수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary vsli:raw="Controls whether the &lt;see cref=&quot;F:System.Runtime.InteropServices.DllImportAttribute.CharSet&quot; /&gt; field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.">
        <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> 필드로 인해 공용 언어 런타임이 지정된 이름 이외의 진입점 이름을 관리되지 않는 DLL에서 검색할지 여부를 제어합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary vsli:raw="Indicates whether unmanaged methods that have &lt;see langword=&quot;HRESULT&quot; /&gt; return values are directly translated or whether &lt;see langword=&quot;HRESULT&quot; /&gt; return values are automatically converted to exceptions.">
        <see langword="HRESULT" /> 또는 <see langword="retval" /> 반환 값이 있는 관리되지 않는 메서드가 직접 변환되는지 아니면 <see langword="HRESULT" /> 또는 <see langword="retval" /> 반환 값이 자동으로 예외로 변환되는지 여부를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary vsli:raw="Indicates whether the callee sets an error (&lt;see langword=&quot;SetLastError&quot; /&gt; on Windows or &lt;see langword=&quot;errno&quot; /&gt; on other platforms) before returning from the attributed method.">특성 사용 메서드에서 반환하기 전에 호출 수신자가 <see langword="SetLastError" /> Windows API 함수를 호출할지 여부를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI &quot;?&quot; character.">ANSI "?" 문자로 변환되는 매핑할 수 없는 유니코드 문자가 나오면 예외를 throw하거나 throw하지 않습니다.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary vsli:raw="Gets the name of the DLL file that contains the entry point.">진입점을 포함하는 DLL 파일의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the DLL file that contains the entry point.">진입점을 포함하는 DLL 파일의 이름입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportResolver">
      <summary vsli:raw="Provides a delegate used to resolve native libraries via callback.">콜백을 통해 네이티브 라이브러리를 확인하는 데 사용되는 대리자를 제공합니다.</summary>
      <param name="libraryName" vsli:raw="The native library to resolve.">확인할 네이티브 라이브러리입니다.</param>
      <param name="assembly" vsli:raw="The assembly requesting the resolution.">확인을 요청하는 어셈블리입니다.</param>
      <param name="searchPath" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; on the PInvoke, if any. Otherwise, the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; on the assembly, if any. Otherwise &lt;see langword=&quot;null&quot; /&gt;.">PInvoke의 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" />입니다(있는 경우). 그렇지 않으면 어셈블리에 있는 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" />입니다(있는 경우). 그렇지 않은 경우에는 <see langword="null" />입니다.</param>
      <returns vsli:raw="The handle for the loaded native library on success, or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; on failure.">성공 시에는 로드된 네이티브 라이브러리의 핸들이며, 실패 시에는 <see cref="F:System.IntPtr.Zero" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportSearchPath">
      <summary vsli:raw="Specifies the paths that are used to search for DLLs that provide functions for platform invokes.">플랫폼 호출 기능을 제공하는 DLL을 검색하는 데 사용되는 경로를 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.ApplicationDirectory">
      <summary vsli:raw="Include the application directory in the DLL search path.">DLL 검색 경로에 애플리케이션 디렉터리를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory">
      <summary vsli:raw="When searching for assembly dependencies, include the directory that contains the assembly itself, and search that directory first. When used in Native AOT and single-file deployment models, the application's installation directory is considered the &quot;assembly directory&quot; and is searched.">어셈블리 종속성을 검색할 때 어셈블리 자체를 포함하는 디렉터리와 함께 해당 디렉터리 목록을 검색합니다. 이 값은 경로가 Win32 LoadLibraryEx 함수에 전달되기 전에 .NET Framework에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior">
      <summary vsli:raw="Search the application directory, and then call the Win32 LoadLibraryEx function with the &lt;c&gt;LOAD_WITH_ALTERED_SEARCH_PATH&lt;/c&gt; flag. This value is ignored if any other value is specified. Operating systems that do not support the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; attribute use this value, and ignore other values.">애플리케이션 디렉터리를 검색하고 <c>LOAD_WITH_ALTERED_SEARCH_PATH</c> 플래그가 있는 Win32 LoadLibraryEx 함수를 호출합니다. 이 값은 다른 값이 지정되는 경우 무시됩니다. <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> 특성을 지원하지 않는 운영 체제는 이 값을 사용하고 다른 값은 무시합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories">
      <summary vsli:raw="Include the application directory, the &lt;see langword=&quot;%WinDir%\System32&quot; /&gt; directory, and user directories in the DLL search path.">애플리케이션 디렉터리인 <see langword="%WinDir%\System32" /> 디렉터리를 포함하고 DLL 검색 경로에 사용자 디렉터리를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.System32">
      <summary vsli:raw="Include the &lt;see langword=&quot;%WinDir%\System32&quot; /&gt; directory in the DLL search path.">DLL 검색 경로에 <see langword="%WinDir%\System32" /> 디렉터리를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UseDllDirectoryForDependencies">
      <summary vsli:raw="Search for the dependencies of a DLL in the folder where the DLL is located before searching other folders.">다른 폴더를 검색하기 전에 DLL이 위치한 폴더에서 DLL의 종속성을 검색합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UserDirectories">
      <summary vsli:raw="Include any path that was explicitly added to the process-wide search path by using the Win32 &lt;c&gt;AddDllDirectory&lt;/c&gt; function.">Win32 <c>AddDllDirectory</c> 함수를 사용하여 프로세스 전체 검색 경로에 명시적으로 추가되었던 모든 경로를 포함합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_ERROR&quot; /&gt;.">마샬러가 <see langword="VT_ERROR" />으로 마샬링할 개체를 래핑합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with the HRESULT that corresponds to the exception supplied.">제공된 예외에 해당하는 HRESULT를 사용하여 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="e" vsli:raw="The exception to be converted to an error code.">오류 코드로 변환될 예외입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with the HRESULT of the error.">오류의 HRESULT를 사용하여 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="errorCode" vsli:raw="The HRESULT of the error.">오류의 HRESULT입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with an object containing the HRESULT of the error.">오류의 HRESULT가 들어 있는 개체를 사용하여 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="errorCode" vsli:raw="The object containing the HRESULT of the error.">오류의 HRESULT가 들어 있는 개체입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;errorCode&quot; /&gt; parameter is not an &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">
        <paramref name="errorCode" /> 매개 변수가 <see cref="T:System.Int32" /> 형식이 아닙니다.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary vsli:raw="Gets the error code of the wrapper.">래퍼의 오류 코드를 가져옵니다.</summary>
      <returns vsli:raw="The HRESULT of the error.">오류의 HRESULT입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary vsli:raw="Supplies an explicit &lt;see cref=&quot;T:System.Guid&quot; /&gt; when an automatic GUID is undesirable.">자동 GUID가 부적당할 경우 명시적 <see cref="T:System.Guid" />를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.GuidAttribute&quot; /&gt; class with the specified GUID.">지정된 GUID를 사용하는 <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="guid" vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt; to be assigned.">할당할 <see cref="T:System.Guid" />입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Guid&quot; /&gt; of the class.">클래스의 <see cref="T:System.Guid" />를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt; of the class.">클래스의 <see cref="T:System.Guid" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary vsli:raw="Tracks outstanding handles and forces a garbage collection when the specified threshold is reached.">지정된 임계값에 도달하는 경우 미처리 핸들을 추적하고 가비지 수집을 수행합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; class using a name and a threshold at which to begin handle collection.">핸들 수집을 시작할 임계값과 이름을 사용하여 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="A name for the collector. This parameter allows you to name collectors that track handle types separately.">수집기의 이름입니다. 이 매개 변수를 사용하면 핸들 형식을 개별적으로 추적하는 수집기의 이름을 지정할 수 있습니다.</param>
      <param name="initialThreshold" vsli:raw="A value that specifies the point at which collections should begin.">수집을 시작할 시점을 지정하는 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter is less than 0.">
        <paramref name="initialThreshold" /> 매개 변수가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; class using a name, a threshold at which to begin handle collection, and a threshold at which handle collection must occur.">이름, 핸들 수집을 시작할 임계값 및 핸들 수집을 반드시 시작해야 하는 임계값을 사용하여 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="A name for the collector.  This parameter allows you to name collectors that track handle types separately.">수집기의 이름입니다.  이 매개 변수를 사용하면 핸들 형식을 개별적으로 추적하는 수집기의 이름을 지정할 수 있습니다.</param>
      <param name="initialThreshold" vsli:raw="A value that specifies the point at which collections should begin.">수집을 시작할 시점을 지정하는 값입니다.</param>
      <param name="maximumThreshold" vsli:raw="A value that specifies the point at which collections must occur. This should be set to the maximum number of available handles.">수집을 반드시 시작해야 하는 시점을 지정하는 값입니다. 이 매개 변수에는 사용할 수 있는 최대 핸들 수를 설정해야 합니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;maximumThreshold&quot; /&gt; parameter is less than 0.">
        <paramref name="initialThreshold" /> 매개 변수가 0보다 작은 경우
또는
<paramref name="maximumThreshold" /> 매개 변수가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;maximumThreshold&quot; /&gt; parameter is less than the &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter.">
        <paramref name="maximumThreshold" /> 매개 변수가 <paramref name="initialThreshold" /> 매개 변수보다 작은 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary vsli:raw="Increments the current handle count.">현재 핸들 수를 늘립니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Count&quot; /&gt; property is less than 0.">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> 속성이 0보다 작은 경우</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary vsli:raw="Gets the number of handles collected.">수집된 핸들의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of handles collected.">수집된 핸들의 수입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary vsli:raw="Gets a value that specifies the point at which collections should begin.">수집을 시작할 시점을 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="A value that specifies the point at which collections should begin.">수집을 시작할 시점을 지정하는 값입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary vsli:raw="Gets a value that specifies the point at which collections must occur.">수집을 반드시 시작해야 하는 시점을 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="A value that specifies the point at which collections must occur.">수집을 반드시 시작해야 하는 시점을 지정하는 값입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary vsli:raw="Gets the name of a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; object.">
        <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 개체의 이름을 가져옵니다.</summary>
      <returns vsli:raw="This &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Name&quot; /&gt; property allows you to name collectors that track handle types separately.">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Name" /> 속성을 사용하면 핸들 형식을 개별적으로 추적하는 수집기의 이름을 지정할 수 있습니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary vsli:raw="Decrements the current handle count.">현재 핸들 수를 줄입니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Count&quot; /&gt; property is less than 0.">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> 속성이 0보다 작은 경우</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary vsli:raw="Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.">플랫폼 호출을 사용하여 관리되지 않는 코드에 전달되는 리소스에 대한 핸들을 보유하는 관리되는 개체를 래핑합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; class with the object to wrap and a handle to the resource used by unmanaged code.">래핑할 개체와 비관리 코드가 사용하는 리소스 핸들을 사용하여 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="wrapper" vsli:raw="A managed object that should not be finalized until the platform invoke call returns.">플랫폼 호출이 반환할 때까지 종료해서는 안 될 관리되는 개체입니다.</param>
      <param name="handle" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that indicates a handle to a resource.">리소스 핸들을 나타내는 <see cref="T:System.IntPtr" />입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary vsli:raw="Gets the handle to a resource.">리소스 핸들을 가져옵니다.</summary>
      <returns vsli:raw="The handle to a resource.">리소스 핸들입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary vsli:raw="Returns the handle to a resource of the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">지정된 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 개체의 리소스 핸들을 반환합니다.</summary>
      <param name="value" vsli:raw="The object that needs a handle.">핸들이 필요한 개체입니다.</param>
      <returns vsli:raw="The handle to a resource of the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">지정된 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 개체의 리소스 핸들입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary vsli:raw="Returns the internal integer representation of a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">
        <see cref="T:System.Runtime.InteropServices.HandleRef" /> 개체의 내부 정수 표현을 반환합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object to retrieve an internal integer representation from.">내부 정수 표현을 검색할 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 개체입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; object that represents a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">
        <see cref="T:System.IntPtr" /> 개체를 나타내는 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary vsli:raw="Gets the object holding the handle to a resource.">리소스 핸들을 보유하고 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="The object holding the handle to a resource.">리소스 핸들을 보유하고 있는 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary vsli:raw="Provides a way for clients to access the actual object, rather than the adapter object handed out by a custom marshaler.">클라이언트에서 사용자 지정 마샬러가 제공한 어댑터 개체가 아니라 실제 개체에 액세스할 수 있는 방법을 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary vsli:raw="Provides access to the underlying object wrapped by a custom marshaler.">사용자 지정 마샬러에서 래핑한 내부 개체에 액세스할 수 있습니다.</summary>
      <returns vsli:raw="The object contained by the adapter object.">어댑터 개체에 포함된 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary vsli:raw="Enables users to write activation code for managed objects that extend &lt;see cref=&quot;T:System.MarshalByRefObject&quot; /&gt;.">사용자가 <see cref="T:System.MarshalByRefObject" />를 확장하는 관리되는 개체에 활성화 코드를 쓸 수 있게 합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary vsli:raw="Creates a new instance of the specified type.">지정한 형식의 새 인스턴스를 만듭니다.</summary>
      <param name="serverType" vsli:raw="The type to activate.">활성화할 형식입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.MarshalByRefObject&quot; /&gt; associated with the specified type.">지정한 형식과 연결된 <see cref="T:System.MarshalByRefObject" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary vsli:raw="Provides custom wrappers for handling method calls.">메서드 호출 처리를 위한 사용자 지정 래퍼를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary vsli:raw="Performs necessary cleanup of the managed data when it is no longer needed.">관리되는 데이터가 필요 없는 경우 이 데이터의 필요한 정리 작업을 수행합니다.</summary>
      <param name="ManagedObj" vsli:raw="The managed object to be destroyed.">소멸될 관리되는 개체입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary vsli:raw="Performs necessary cleanup of the unmanaged data when it is no longer needed.">관리되지 않는 데이터가 필요 없는 경우 이 데이터의 필요한 정리 작업을 수행합니다.</summary>
      <param name="pNativeData" vsli:raw="A pointer to the unmanaged data to be destroyed.">소멸될 관리되지 않는 데이터에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary vsli:raw="Returns the size of the native data to be marshaled.">마샬링될 네이티브 데이터의 크기를 반환합니다.</summary>
      <returns vsli:raw="The size, in bytes, of the native data.">네이티브 데이터의 크기(바이트)입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary vsli:raw="Converts the managed data to unmanaged data.">관리되는 데이터를 관리되지 않는 데이터로 변환합니다.</summary>
      <param name="ManagedObj" vsli:raw="The managed object to be converted.">변환될 관리되는 개체입니다.</param>
      <returns vsli:raw="A pointer to the COM view of the managed object.">관리되는 개체의 COM 뷰에 대한 포인터입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary vsli:raw="Converts the unmanaged data to managed data.">관리되지 않는 데이터를 관리되는 데이터로 변환합니다.</summary>
      <param name="pNativeData" vsli:raw="A pointer to the unmanaged data to be wrapped.">래핑될 관리되지 않는 형식에 대한 포인터입니다.</param>
      <returns vsli:raw="An object that represents the managed view of the COM data.">COM 데이터의 관리되는 뷰를 나타내는 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary vsli:raw="Enables developers to provide a custom, managed implementation of the IUnknown::QueryInterface(REFIID riid, void **ppvObject) method.">개발자가 IUnknown::QueryInterface(REFIID riid, void **ppvObject) 메서드의 관리되는 사용자 지정 구현을 제공할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary vsli:raw="Returns an interface according to a specified interface ID.">지정된 인터페이스 ID에 따라 인터페이스를 반환합니다.</summary>
      <param name="iid" vsli:raw="The GUID of the requested interface.">요청된 인터페이스의 GUID입니다.</param>
      <param name="ppv" vsli:raw="A reference to the requested interface, when this method returns.">이 메서드에서 반환할 때 요청된 인터페이스에 대한 참조입니다.</param>
      <returns vsli:raw="One of the enumeration values that indicates whether a custom implementation of IUnknown::QueryInterface was used.">IUnknown::QueryInterface의 사용자 지정 구현이 사용되었는지 여부를 나타내는 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary vsli:raw="Indicates that the types defined within an assembly were originally defined in a type library.">어셈블리 내부에서 정의된 형식이 처음에 형식 라이브러리에서 정의되었음을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute&quot; /&gt; class with the name of the original type library file.">원본 형식 라이브러리 파일의 이름을 사용하여 <see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tlbFile" vsli:raw="The location of the original type library file.">원본 형식 라이브러리 파일의 위치입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary vsli:raw="Gets the name of the original type library file.">원본 형식 라이브러리 파일의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the original type library file.">원본 형식 라이브러리 파일의 이름입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary vsli:raw="Indicates whether a managed interface is dual, dispatch-only, or &lt;see langword=&quot;IUnknown&quot; /&gt; -only when exposed to COM.">관리되는 인터페이스를 COM에 노출할 경우 이중 인터페이스인지, 디스패치 전용 인터페이스인지 또는 <see langword="IUnknown" /> 전용 인터페이스인지 여부를 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InterfaceTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; enumeration member.">지정된 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 열거형 멤버를 사용하여 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="interfaceType" vsli:raw="Describes how the interface should be exposed to COM clients.">인터페이스를 COM 클라이언트에 노출하는 방법을 설명합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InterfaceTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; enumeration member.">지정된 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 열거형 멤버를 사용하여 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="interfaceType" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; values that describes how the interface should be exposed to COM clients.">인터페이스를 COM에 노출시키는 방법을 설명하는 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 값 중 하나입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; value that describes how the interface should be exposed to COM.">인터페이스를 COM에 노출하는 방법을 설명하는 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 값을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; value that describes how the interface should be exposed to COM.">인터페이스를 COM에 노출하는 방법을 설명하는 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary vsli:raw="The exception thrown when an invalid COM object is used.">잘못된 COM 개체가 사용된 경우 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;InvalidComObjectException&quot; /&gt; with default properties.">기본 속성을 사용하여 <see langword="InvalidComObjectException" />의 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;COMException&quot; /&gt; class from serialization data.">serialization 데이터로부터 <see langword="COMException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;InvalidComObjectException&quot; /&gt; with a message.">메시지를 사용하여 <see langword="InvalidComObjectException" />의 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">예외에 대한 이유를 나타내는 메시지입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InvalidComObjectException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary vsli:raw="The exception thrown by the marshaler when it encounters an argument of a variant type that can not be marshaled to managed code.">관리 코드에 마샬링 할 수 없는 변형 형식의 인수를 만날 때 마샬러가 발생시키는 예외입니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class with default values.">기본값을 사용하여 <see langword="InvalidOleVariantTypeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class from serialization data.">serialization 데이터로부터 <see langword="InvalidOleVariantTypeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class with a specified message.">지정된 메시지를 사용하여 <see langword="InvalidOleVariantTypeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">예외에 대한 이유를 나타내는 메시지입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InvalidOleVariantTypeException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary vsli:raw="Indicates that a method's unmanaged signature expects a locale identifier (LCID) parameter.">메서드의 관리되지 않는 시그니처에 LCID(로캘 식별자) 매개 변수가 필요함을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;LCIDConversionAttribute&quot; /&gt; class with the position of the LCID in the unmanaged signature.">관리되지 않는 시그니처의 해당 LCID 위치로 <see langword="LCIDConversionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="lcid" vsli:raw="Indicates the position of the LCID argument in the unmanaged signature, where 0 is the first argument.">관리되지 않는 시그니처의 해당 LCID 인수 위치를 나타냅니다. 여기서 0은 첫 번째 인수입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary vsli:raw="Gets the position of the LCID argument in the unmanaged signature.">관리되지 않는 시그니처에서 LCID 인수의 위치를 가져옵니다.</summary>
      <returns vsli:raw="The position of the LCID argument in the unmanaged signature, where 0 is the first argument.">관리되지 않는 시그니처에서 LCID 인수의 위치입니다. 여기서 0은 첫 번째 인수입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute">
      <summary vsli:raw="Provides support for user customization of interop stubs in managed-to-COM interop scenarios.">관리-COM interop 시나리오에서 interop 스텁의 사용자 지정에 대한 지원을 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute&quot; /&gt; class with the specified class type and method name.">지정된 클래스 형식과 메서드 이름을 사용하여 <see cref="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="classType" vsli:raw="The class that contains the required stub method.">필요한 스텁 메서드가 포함된 클래스입니다.</param>
      <param name="methodName" vsli:raw="The name of the stub method.">스텁 메서드의 이름입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;methodName&quot; /&gt; cannot be found.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is not static or non-generic.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method's parameter list does not match the expected parameter list for the stub.">
        <paramref name="methodName" />을 찾을 수 없습니다.
또는
메서드가 정적 또는 제네릭 메서드가 아닙니다.
또는
메서드의 매개 변수 목록이 스텁에 예상되는 매개 변수 목록과 일치하지 않습니다.</exception>
      <exception cref="T:System.MethodAccessException" vsli:raw="The interface that contains the managed interop method has no access to the stub method, because the stub method has private or protected accessibility, or because of a security issue.">관리되는 interop 메서드를 포함하는 인터페이스는 스텁 메서드가 프라이빗 또는 보호된 접근성을 갖거나 보안 문제 때문에 스텁 메서드에 액세스하지 못합니다.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType">
      <summary vsli:raw="Gets the class that contains the required stub method.">필요한 스텁 메서드가 포함된 클래스를 가져옵니다.</summary>
      <returns vsli:raw="The class that contains the customized interop stub.">사용자 지정된 interop 스텁이 포함된 클래스입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName">
      <summary vsli:raw="Gets the name of the stub method.">스텁 메서드의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of a customized interop stub.">사용자 지정된 interop 스텁의 이름입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary vsli:raw="Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.">관리되지 않는 메모리를 할당하고, 관리되지 않는 메모리 블록을 복사하고, 관리되는 형식을 관리되지 않는 형식으로 변환하는 메서드의 컬렉션 및 비관리 코드와 상호 작용할 때 사용되는 기타 메서드의 컬렉션을 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary vsli:raw="Increments the reference count on the specified interface.">지정된 인터페이스의 참조 횟수를 증가시킵니다.</summary>
      <param name="pUnk" vsli:raw="The interface reference count to increment.">증가시킬 인터페이스 참조 횟수입니다.</param>
      <returns vsli:raw="The new value of the reference count on the &lt;paramref name=&quot;pUnk&quot; /&gt; parameter.">
        <paramref name="pUnk" /> 매개 변수에 대한 참조 횟수의 새 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary vsli:raw="Allocates a block of memory of specified size from the COM task memory allocator.">COM 작업 메모리 할당자에서 지정된 크기의 메모리 블록을 할당합니다.</summary>
      <param name="cb" vsli:raw="The size of the block of memory to be allocated.">할당될 메모리 블록 크기입니다.</param>
      <returns vsli:raw="An integer representing the address of the block of memory allocated. This memory must be released with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)&quot; /&gt;.">할당된 메모리 블록 주소를 나타내는 정수입니다. 이 메모리는 <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />을 사용하여 해제되어야 합니다.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">메모리가 부족하여 요청을 만족시킬 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary vsli:raw="Allocates memory from the unmanaged memory of the process by using the specified number of bytes.">지정된 바이트 수를 사용하여 프로세스의 관리되지 않는 메모리에서 메모리를 할당합니다.</summary>
      <param name="cb" vsli:raw="The required number of bytes in memory.">메모리에서 필요한 바이트 수 입니다.</param>
      <returns vsli:raw="A pointer to the newly allocated memory. This memory must be released using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt; method.">새로 할당된 메모리에 대한 포인터입니다. 이 메모리는 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 메서드를 사용하여 해제되어야 합니다.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">메모리가 부족하여 요청을 만족시킬 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary vsli:raw="Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.">지정된 바이트 수에 대한 포인터를 사용하여 프로세스의 관리되지 않는 메모리에서 메모리를 할당합니다.</summary>
      <param name="cb" vsli:raw="The required number of bytes in memory.">메모리에서 필요한 바이트 수 입니다.</param>
      <returns vsli:raw="A pointer to the newly allocated memory. This memory must be released using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt; method.">새로 할당된 메모리에 대한 포인터입니다. 이 메모리는 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 메서드를 사용하여 해제되어야 합니다.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">메모리가 부족하여 요청을 만족시킬 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary vsli:raw="Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.">어떤 컨텍스트에서 RCW(런타임 호출 가능 래퍼)를 정리에 사용할 수 있는지 여부를 나타냅니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are any RCWs available for cleanup; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">정리에 사용할 수 있는 RCW가 하나라도 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary vsli:raw="Gets an interface pointer identified by the specified moniker.">지정된 모니커로 식별되는 인터페이스 포인터를 가져옵니다.</summary>
      <param name="monikerName" vsli:raw="The moniker corresponding to the desired interface pointer.">원하는 인터페이스 포인터에 해당하는 모니커입니다.</param>
      <returns vsli:raw="An object containing a reference to the interface pointer identified by the &lt;paramref name=&quot;monikerName&quot; /&gt; parameter. A moniker is a name, and in this case, the moniker is defined by an interface.">
        <paramref name="monikerName" /> 매개 변수로 식별되는 인터페이스 포인터에 대한 참조가 있는 개체입니다. 모니커는 이름이며 이 경우에는 인터페이스로 정의됩니다.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="An unrecognized HRESULT was returned by the unmanaged &lt;see langword=&quot;BindToMoniker&quot; /&gt; method.">인식할 수 없는 HRESULT가 관리되지 않는 <see langword="BindToMoniker" /> 메서드에서 반환되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary vsli:raw="Changes the strength of an object's COM Callable Wrapper (CCW) handle.">개체의 CCW(COM Callable Wrapper) 핸들 강도를 변경합니다.</summary>
      <param name="otp" vsli:raw="The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.">CCW에 참조 횟수가 계산된 핸들이 있는 개체입니다. CCW의 참조 횟수가 0보다 크면 핸들이 강하고, 그렇지 않으면 핸들이 약합니다.</param>
      <param name="fIsWeak" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to change the strength of the handle on the &lt;paramref name=&quot;otp&quot; /&gt; parameter to weak, regardless of its reference count; &lt;see langword=&quot;false&quot; /&gt; to reset the handle strength on &lt;paramref name=&quot;otp&quot; /&gt; to be reference counted.">참조 횟수에 관계없이 <paramref name="otp" /> 매개 변수에 대한 핸들 강도를 약하게 변경하려면 <see langword="true" />이고, 참조 횟수가 계산될 <paramref name="otp" />에 대한 핸들 강도를 다시 설정하려면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary vsli:raw="Notifies the runtime to clean up all Runtime Callable Wrappers (RCWs) allocated in the current context.">현재의 컨텍스트에서 할당된 모든 RCW(런타임 호출 가능 래퍼)를 정리하도록 런타임에 알립니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.">관리되는 8비트 부호 없는 1차원 정수 배열의 데이터를 관리되지 않는 메모리 포인터로 복사합니다.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">복사할 1차원 배열입니다.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">소스 배열에서 복사를 시작해야 할 인덱스(0부터 시작)입니다.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">복사할 대상 메모리 포인터입니다.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 및 <paramref name="length" />가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.">관리되는 1차원 문자 배열의 데이터를 관리되지 않는 메모리 포인터로 복사합니다.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">복사할 1차원 배열입니다.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">소스 배열에서 복사를 시작해야 할 인덱스(0부터 시작)입니다.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">복사할 대상 메모리 포인터입니다.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 및 <paramref name="length" />가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="startIndex" />, <paramref name="destination" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.">관리되는 1차원 배정밀도 부동 소수점 수 배열의 데이터를 관리되지 않는 메모리 포인터로 복사합니다.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">복사할 1차원 배열입니다.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">소스 배열에서 복사를 시작해야 할 인덱스(0부터 시작)입니다.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">복사할 대상 메모리 포인터입니다.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 및 <paramref name="length" />가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.">관리되는 16비트 부호 있는 1차원 정수 배열의 데이터를 관리되지 않는 메모리 포인터로 복사합니다.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">복사할 1차원 배열입니다.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">소스 배열에서 복사를 시작해야 할 인덱스(0부터 시작)입니다.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">복사할 대상 메모리 포인터입니다.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 및 <paramref name="length" />가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.">관리되는 32비트 부호 있는 1차원 정수 배열의 데이터를 관리되지 않는 메모리 포인터로 복사합니다.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">복사할 1차원 배열입니다.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">소스 배열에서 복사를 시작해야 할 인덱스(0부터 시작)입니다.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">복사할 대상 메모리 포인터입니다.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 및 <paramref name="length" />가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.">관리되는 64비트 부호 있는 1차원 정수 배열의 데이터를 관리되지 않는 메모리 포인터로 복사합니다.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">복사할 1차원 배열입니다.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">소스 배열에서 복사를 시작해야 할 인덱스(0부터 시작)입니다.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">복사할 대상 메모리 포인터입니다.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 및 <paramref name="length" />가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.">관리되지 않는 메모리 포인터의 데이터를 관리되는 8비트 부호 없는 정수 배열로 복사합니다.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">복사할 메모리 포인터입니다.</param>
      <param name="destination" vsli:raw="The array to copy to.">복사할 대상 배열입니다.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">대상 배열에서 복사를 시작해야 할 0부터 시작하는 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed character array.">관리되지 않는 메모리 포인터의 데이터를 관리되는 문자 배열로 복사합니다.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">복사할 메모리 포인터입니다.</param>
      <param name="destination" vsli:raw="The array to copy to.">복사할 대상 배열입니다.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">대상 배열에서 복사를 시작해야 할 0부터 시작하는 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.">관리되지 않는 메모리 포인터의 데이터를 관리되는 배정밀도 부동 소수점 수 배열로 복사합니다.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">복사할 메모리 포인터입니다.</param>
      <param name="destination" vsli:raw="The array to copy to.">복사할 대상 배열입니다.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">대상 배열에서 복사를 시작해야 할 0부터 시작하는 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.">관리되지 않는 메모리 포인터의 데이터를 관리되는 16비트 부호 있는 정수 배열로 복사합니다.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">복사할 메모리 포인터입니다.</param>
      <param name="destination" vsli:raw="The array to copy to.">복사할 대상 배열입니다.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">대상 배열에서 복사를 시작해야 할 0부터 시작하는 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.">관리되지 않는 메모리 포인터의 데이터를 관리되는 32비트 부호 있는 정수 배열로 복사합니다.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">복사할 메모리 포인터입니다.</param>
      <param name="destination" vsli:raw="The array to copy to.">복사할 대상 배열입니다.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">대상 배열에서 복사를 시작해야 할 0부터 시작하는 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.">관리되지 않는 메모리 포인터의 데이터를 관리되는 64비트 부호 있는 정수 배열로 복사합니다.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">복사할 메모리 포인터입니다.</param>
      <param name="destination" vsli:raw="The array to copy to.">복사할 대상 배열입니다.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">대상 배열에서 복사를 시작해야 할 0부터 시작하는 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; array.">관리되지 않는 메모리 포인터의 데이터를 관리되는 <see cref="T:System.IntPtr" /> 배열에 복사합니다.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">복사할 메모리 포인터입니다.</param>
      <param name="destination" vsli:raw="The array to copy to.">복사할 대상 배열입니다.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">대상 배열에서 복사를 시작해야 할 0부터 시작하는 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.">관리되지 않는 메모리 포인터의 데이터를 관리되는 단정밀도 부동 소수점 수 배열로 복사합니다.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">복사할 메모리 포인터입니다.</param>
      <param name="destination" vsli:raw="The array to copy to.">복사할 대상 배열입니다.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">대상 배열에서 복사를 시작해야 할 0부터 시작하는 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; array to an unmanaged memory pointer.">관리되는 <see cref="T:System.IntPtr" /> 배열의 데이터를 관리되지 않는 메모리 포인터에 복사합니다.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">복사할 1차원 배열입니다.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">소스 배열에서 복사를 시작해야 할 인덱스(0부터 시작)입니다.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">복사할 대상 메모리 포인터입니다.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.">관리되는 1차원 단정밀도 부동 소수점 수 배열의 데이터를 관리되지 않는 메모리 포인터로 복사합니다.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">복사할 1차원 배열입니다.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">소스 배열에서 복사를 시작해야 할 인덱스(0부터 시작)입니다.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">복사할 대상 메모리 포인터입니다.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 및 <paramref name="length" />가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary vsli:raw="Aggregates a managed object with the specified COM object.">지정된 COM 개체를 사용하여 관리되는 개체를 집계합니다.</summary>
      <param name="pOuter" vsli:raw="The outer &lt;see langword=&quot;IUnknown&quot; /&gt; pointer.">외부 <see langword="IUnknown" /> 포인터입니다.</param>
      <param name="o" vsli:raw="An object to aggregate.">집계할 개체입니다.</param>
      <returns vsli:raw="The inner &lt;see langword=&quot;IUnknown&quot; /&gt; pointer of the managed object.">관리되는 개체의 내부 <see langword="IUnknown" /> 포인터입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is a Windows Runtime object.">
        <paramref name="o" />가 Windows 런타임 개체입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Aggregates a managed object of the specified type with the specified COM object.">[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 COM 개체를 사용하여 지정된 형식의 관리되는 개체를 집계합니다.</summary>
      <param name="pOuter" vsli:raw="The outer IUnknown pointer.">외부 IUnknown 포인터입니다.</param>
      <param name="o" vsli:raw="The managed object to aggregate.">집계할 관리되는 개체입니다.</param>
      <typeparam name="T" vsli:raw="The type of the managed object to aggregate.">집계할 관리되는 개체의 형식입니다.</typeparam>
      <returns vsli:raw="The inner IUnknown pointer of the managed object.">관리되는 개체의 내부 IUnknown 포인터입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is a Windows Runtime object.">
        <paramref name="o" />가 Windows 런타임 개체입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary vsli:raw="Wraps the specified COM object in an object of the specified type.">지정된 형식의 개체에 지정된 COM 개체를 래핑합니다.</summary>
      <param name="o" vsli:raw="The object to be wrapped.">래핑될 개체입니다.</param>
      <param name="t" vsli:raw="The type of wrapper to create.">만들 래퍼의 형식입니다.</param>
      <returns vsli:raw="The newly wrapped object that is an instance of the desired type.">원하는 형식의 인스턴스인 새로 래핑된 개체입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; must derive from &lt;see langword=&quot;__ComObject&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;t&quot; /&gt; is a Windows Runtime type.">
        <paramref name="t" />는 <see langword="__ComObject" />에서 파생되어야 합니다.
또는
<paramref name="t" />가 Windows 런타임 형식인 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; cannot be converted to the destination type because it does not support all required interfaces.">
        <paramref name="o" />는 필요한 모든 인터페이스를 지원하지는 않으므로 대상 개체로 변환될 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Wraps the specified COM object in an object of the specified type.">[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 형식의 개체에 지정된 COM 개체를 래핑합니다.</summary>
      <param name="o" vsli:raw="The object to be wrapped.">래핑될 개체입니다.</param>
      <typeparam name="T" vsli:raw="The type of object to wrap.">래핑할 개체의 형식입니다.</typeparam>
      <typeparam name="TWrapper" vsli:raw="The type of object to return.">반환할 개체의 형식입니다.</typeparam>
      <returns vsli:raw="The newly wrapped object.">새로 래핑된 개체입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;typeparamref name=&quot;T&quot; /&gt; must derive from &lt;see langword=&quot;__ComObject&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;typeparamref name=&quot;T&quot; /&gt; is a Windows Runtime type.">
        <typeparamref name="T" />는 <see langword="__ComObject" />에서 파생되어야 합니다.
또는
<typeparamref name="T" />가 Windows 런타임 형식인 경우</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; cannot be converted to the &lt;paramref name=&quot;TWrapper&quot; /&gt; because it does not support all required interfaces.">
        <paramref name="o" />가 원하는 모든 인터페이스를 지원하지 않으므로 <paramref name="TWrapper" />으로 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary vsli:raw="Frees all substructures that the specified unmanaged memory block points to.">지정된 관리되지 않는 메모리 블록이 가리키는 모든 하위 구조체를 해제합니다.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">관리되지 않는 메모리 블록에 대한 포인터입니다.</param>
      <param name="structuretype" vsli:raw="Type of a formatted class. This provides the layout information necessary to delete the buffer in the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">형식이 지정된 클래스의 형식으로, <paramref name="ptr" /> 매개 변수에 있는 버퍼를 삭제하는 데 필요한 레이아웃 정보를 제공합니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structureType&quot; /&gt; has an automatic layout. Use sequential or explicit instead.">
        <paramref name="structureType" />에 Auto 레이아웃이 지정된 경우. 대신 Sequential 또는 Explicit 레이아웃을 사용합니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Frees all substructures of a specified type that the specified unmanaged memory block points to.">[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 관리되지 않는 메모리 블록이 가리키는 지정된 형식의 모든 하위 구조체를 해제합니다.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">관리되지 않는 메모리 블록에 대한 포인터입니다.</param>
      <typeparam name="T" vsli:raw="The type of the formatted structure. This provides the layout information necessary to delete the buffer in the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">형식이 지정된 구조체의 형식입니다. <paramref name="ptr" /> 매개 변수에 있는 버퍼를 삭제하는 데 필요한 레이아웃 정보를 제공합니다.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;typeparamref name=&quot;T&quot; /&gt; has an automatic layout. Use sequential or explicit instead.">
        <typeparamref name="T" />에 Auto 레이아웃이 지정된 경우. 대신 Sequential 또는 Explicit 레이아웃을 사용합니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary vsli:raw="Releases all references to a Runtime Callable Wrapper (RCW) by setting its reference count to 0.">참조 횟수를 0으로 설정하여, RCW(런타임 호출 가능 래퍼)에 대한 모든 참조를 해제합니다.</summary>
      <param name="o" vsli:raw="The RCW to be released.">해제할 RCW입니다.</param>
      <returns vsli:raw="The new value of the reference count of the RCW associated with the &lt;paramref name=&quot;o&quot; /&gt; parameter, which is 0 (zero) if the release is successful.">
        <paramref name="o" /> 매개 변수에 연결된 RCW의 새 참조 횟수 값입니다. 해제 작업을 성공적으로 마치면 값이 0입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is not a valid COM object.">
        <paramref name="o" />가 올바른 개체 범위가 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary vsli:raw="Frees a &lt;see langword=&quot;BSTR&quot; /&gt; using the COM SysFreeString function.">COM SysFreeString 함수를 사용하여 <see langword="BSTR" />을 해제합니다.</summary>
      <param name="ptr" vsli:raw="The address of the BSTR to be freed.">해제할 BSTR의 주소입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary vsli:raw="Frees a block of memory allocated by the unmanaged COM task memory allocator.">관리되지 않는 COM 작업 메모리 할당자에서 할당한 메모리 블록을 해제합니다.</summary>
      <param name="ptr" vsli:raw="The address of the memory to be freed.">해제할 메모리의 주소입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary vsli:raw="Frees memory previously allocated from the unmanaged memory of the process.">프로세스의 관리되지 않는 메모리에서 이전에 할당한 메모리를 해제합니다.</summary>
      <param name="hglobal" vsli:raw="The handle returned by the original matching call to &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 호출과 일치하는 원본 호출에서 반환되는 핸들입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary vsli:raw="Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).">지정된 형식에 대한 GUID(Globally Unique Identifier)를 반환하거나 형식 라이브러리 내보내기(TlbExp.exe)에 사용되는 알고리즘을 사용하여 GUID를 생성합니다.</summary>
      <param name="type" vsli:raw="The type to generate a GUID for.">GUID를 생성할 형식입니다.</param>
      <returns vsli:raw="An identifier for the specified type.">지정된 형식의 식별자입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary vsli:raw="Returns a programmatic identifier (ProgID) for the specified type.">지정된 형식에 대한 ProgID(프로그래밍 식별자)를 반환합니다.</summary>
      <param name="type" vsli:raw="The type to get a ProgID for.">ProgID를 가져올 형식입니다.</param>
      <returns vsli:raw="The ProgID of the specified type.">지정된 형식의 ProgID입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; parameter is not a class that can be create by COM. The class must be public, have a public parameterless constructor, and be COM visible.">
        <paramref name="type" /> 매개 변수가 COM에서 만들 수 없는 클래스인 경우. 이 클래스는 공용이며, 공용 매개 변수가 없는 생성자를 가지며, COM에 표시됩니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary vsli:raw="Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.">지정된 개체의 지정된 인터페이스를 나타내는 IUnknown 인터페이스에 대한 포인터를 반환합니다. 사용자 지정 쿼리 인터페이스 액세스가 기본적으로 사용됩니다.</summary>
      <param name="o" vsli:raw="The object that provides the interface.">인터페이스를 제공하는 개체입니다.</param>
      <param name="T" vsli:raw="The type of interface that is requested.">요청된 인터페이스의 형식입니다.</param>
      <returns vsli:raw="The interface pointer that represents the specified interface for the object.">개체에 대해 지정된 인터페이스를 나타내는 인터페이스 포인터입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is a generic type definition.">
        <typeparamref name="T" /> 매개 변수가 인터페이스가 아닌 경우
또는
COM에 해당 형식이 표시되지 않는 경우
또는
<typeparamref name="T" /> 매개 변수는 제네릭 형식 정의입니다.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter does not support the requested interface.">
        <paramref name="o" /> 매개 변수가 요청된 인터페이스를 지원하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> 매개 변수가 <see langword="null" />인 경우
또는
<typeparamref name="T" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary vsli:raw="Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.">지정된 개체의 지정된 인터페이스를 나타내는 IUnknown 인터페이스에 대한 포인터를 반환합니다. 사용자 지정 쿼리 인터페이스 액세스는 지정된 사용자 지정 모드에 의해 제어됩니다.</summary>
      <param name="o" vsli:raw="The object that provides the interface.">인터페이스를 제공하는 개체입니다.</param>
      <param name="T" vsli:raw="The type of interface that is requested.">요청된 인터페이스의 형식입니다.</param>
      <param name="mode" vsli:raw="One of the enumeration values that indicates whether to apply an &lt;see langword=&quot;IUnknown::QueryInterface&quot; /&gt; customization that is supplied by an &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />에서 제공하는 <see langword="IUnknown::QueryInterface" /> 사용자 지정을 적용하는지 여부를 나타내는 열거형 값 중 하나입니다.</param>
      <returns vsli:raw="The interface pointer that represents the interface for the object.">개체에 대한 인터페이스를 나타내는 인터페이스 포인터입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is a generic type definition.">
        <typeparamref name="T" /> 매개 변수가 인터페이스가 아닌 경우
또는
COM에 해당 형식이 표시되지 않는 경우
또는
<typeparamref name="T" /> 매개 변수는 제네릭 형식 정의입니다.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The object &lt;paramref name=&quot;o&quot; /&gt; does not support the requested interface.">
        <paramref name="o" /> 개체가 요청된 인터페이스를 지원하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> 매개 변수가 <see langword="null" />인 경우
또는
<typeparamref name="T" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns a pointer to an IUnknown interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.">[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 형식의 개체에 지정된 인터페이스를 나타내는 IUnknown 인터페이스에 대한 포인터를 반환합니다. 사용자 지정 쿼리 인터페이스 액세스가 기본적으로 사용됩니다.</summary>
      <param name="o" vsli:raw="The object that provides the interface.">인터페이스를 제공하는 개체입니다.</param>
      <typeparam name="T" vsli:raw="The type of &lt;paramref name=&quot;o&quot; /&gt;.">
        <paramref name="o" />의 형식입니다.</typeparam>
      <typeparam name="TInterface" vsli:raw="The type of interface to return.">반환할 인터페이스의 형식입니다.</typeparam>
      <returns vsli:raw="The interface pointer that represents the &lt;paramref name=&quot;TInterface&quot; /&gt; interface.">
        <paramref name="TInterface" /> 인터페이스를 나타내는 인터페이스 포인터입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;TInterface&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is an open generic type.">
        <paramref name="TInterface" /> 매개 변수가 인터페이스가 아닌 경우
또는
COM에 해당 형식이 표시되지 않는 경우
또는
<typeparamref name="T" /> 매개 변수는 개방형 제네릭 형식입니다.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter does not support the &lt;paramref name=&quot;TInterface&quot; /&gt; interface.">
        <paramref name="o" /> 매개 변수가 <paramref name="TInterface" /> 인터페이스를 지원하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary vsli:raw="Retrieves data that is referenced by the specified key from the specified COM object.">지정된 COM 개체에서 지정된 키를 사용하여 참조되는 데이터를 검색합니다.</summary>
      <param name="obj" vsli:raw="The COM object that contains the data that you want.">필요한 데이터가 들어 있는 COM 개체입니다.</param>
      <param name="key" vsli:raw="The key in the internal hash table of &lt;paramref name=&quot;obj&quot; /&gt; to retrieve the data from.">데이터를 검색할 <paramref name="obj" />의 내부 해시 테이블에 있는 키입니다.</param>
      <returns vsli:raw="The data represented by the &lt;paramref name=&quot;key&quot; /&gt; parameter in the internal hash table of the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">
        <paramref name="obj" /> 매개 변수의 내부 해시 테이블에서 <paramref name="key" /> 매개 변수가 나타내는 데이터입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="obj" />가 <see langword="null" />인 경우
또는
<paramref name="key" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a COM object.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;obj&quot; /&gt; is a Windows Runtime object.">
        <paramref name="obj" />가 COM 개체가 아닌 경우
또는
<paramref name="obj" />가 Windows 런타임 개체입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary vsli:raw="Converts an unmanaged function pointer to a delegate.">관리되지 않는 함수 포인터를 대리자로 변환합니다.</summary>
      <param name="ptr" vsli:raw="The unmanaged function pointer to be converted.">변환할 관리되지 않는 함수 포인터입니다.</param>
      <param name="t" vsli:raw="The type of the delegate to be returned.">반환될 대리자의 형식입니다.</param>
      <returns vsli:raw="A delegate instance that can be cast to the appropriate delegate type.">적절한 대리자 형식으로 캐스팅될 수 있는 대리자 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is not a delegate or is generic.">
        <paramref name="t" /> 매개 변수가 대리자가 아니거나 제네릭인 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;ptr&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> 매개 변수가 <see langword="null" />인 경우
또는
<paramref name="t" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an unmanaged function pointer to a delegate of a specified type.">[.NET Framework 4.5.1 이상 버전에서 지원됨]
관리되지 않는 함수 포인터를 지정된 형식의 대리자로 변환합니다.</summary>
      <param name="ptr" vsli:raw="The unmanaged function pointer to convert.">변환할 관리되지 않는 함수 포인터입니다.</param>
      <typeparam name="TDelegate" vsli:raw="The type of the delegate to return.">반환할 대리자의 형식입니다.</typeparam>
      <returns vsli:raw="A instance of the specified delegate type.">지정된 대리자 형식의 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;TDelegate&quot; /&gt; generic parameter is not a delegate, or it is an open generic type.">
        <paramref name="TDelegate" /> 제네릭 매개 변수가 대리자가 아니거나 개방형 제네릭 형식입니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;ptr&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary vsli:raw="Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.">COM에 노출될 때 형식의 가상 함수 테이블(v-table 또는 VTBL)에서 마지막 슬롯을 검색합니다.</summary>
      <param name="t" vsli:raw="A type that represents an interface or class.">인터페이스나 클래스를 나타내는 형식입니다.</param>
      <returns vsli:raw="The last VTBL slot of the interface when exposed to COM. If the &lt;paramref name=&quot;t&quot; /&gt; parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.">COM에 노출될 때 인터페이스의 마지막 VTBL 슬롯입니다. <paramref name="t" /> 매개 변수가 클래스인 경우 반환된 VTBL 슬롯은 클래스에서 생성되는 인터페이스에 있는 마지막 슬롯입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary vsli:raw="Retrieves a code that identifies the type of the exception that occurred.">발생한 예외의 형식을 식별하는 코드를 검색합니다.</summary>
      <returns vsli:raw="The type of the exception.">예외의 형식입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary vsli:raw="Converts the specified HRESULT error code to a corresponding &lt;see cref=&quot;T:System.Exception&quot; /&gt; object.">지정된 HRESULT 오류 코드를 해당하는 <see cref="T:System.Exception" /> 개체로 변환합니다.</summary>
      <param name="errorCode" vsli:raw="The HRESULT to be converted.">변환할 HRESULT입니다.</param>
      <returns vsli:raw="An object that represents the converted HRESULT, or &lt;see langword=&quot;null&quot; /&gt; if the HRESULT value doesn't represent an error code (for example, &lt;see langword=&quot;S_OK&quot; /&gt; or &lt;see langword=&quot;S_FALSE&quot; /&gt;).">변환된 HRESULT를 나타내는 개체 또는 HRESULT 값이 오류 코드(예: <see langword="S_OK" /> 또는 <see langword="S_FALSE" />)를 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary vsli:raw="Converts the specified HRESULT error code to a corresponding &lt;see cref=&quot;T:System.Exception&quot; /&gt; object, with additional error information passed in an IErrorInfo interface for the exception object.">예외 개체에 대한 IErrorInfo 인터페이스에 전달된 추가 오류 정보를 사용하여 지정된 HRESULT 오류 코드를 해당하는 <see cref="T:System.Exception" /> 개체로 변환합니다.</summary>
      <param name="errorCode" vsli:raw="The HRESULT to be converted.">변환할 HRESULT입니다.</param>
      <param name="errorInfo" vsli:raw="A pointer to the &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface that provides more information about the error. You can specify &lt;c&gt;IntPtr(0)&lt;/c&gt; to use the current &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface, or &lt;c&gt;IntPtr(-1)&lt;/c&gt; to ignore the current &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface and construct the exception just from the error code.">오류에 대한 추가 정보를 제공하는 <see langword="IErrorInfo" /> 인터페이스에 대한 포인터입니다. 현재 <see langword="IErrorInfo" /> 인터페이스를 사용하려면 <c>IntPtr(0)</c>을 지정하고, 현재 <see langword="IErrorInfo" /> 인터페이스를 무시하고 오류 코드에서만 예외를 생성하려면 <c>IntPtr(-1)</c>을 지정합니다.</param>
      <returns vsli:raw="An object that represents the converted HRESULT and information obtained from &lt;paramref name=&quot;errorInfo&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if an HRESULT value doesn't represent an error code (for example, &lt;see langword=&quot;S_OK&quot; /&gt; or &lt;see langword=&quot;S_FALSE&quot; /&gt;).">변환된 HRESULT를 나타내는 개체 및 <paramref name="errorInfo" />에서 얻은 정보 또는 HRESULT 값이 오류 코드(예: <see langword="S_OK" /> 또는 <see langword="S_FALSE" />)를 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary vsli:raw="Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.">예외에 대한 컴퓨터 독립적 설명과 예외가 발생할 때 스레드에 대해 존재하는 컴퓨터 상태에 대한 정보를 검색합니다.</summary>
      <returns vsli:raw="A pointer to an EXCEPTION_POINTERS structure.">EXCEPTION_POINTERS 구조체에 대한 포인터입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary vsli:raw="Converts a delegate into a function pointer that is callable from unmanaged code.">대리자를 비관리 코드에서 호출할 수 있는 함수 포인터로 변환합니다.</summary>
      <param name="d" vsli:raw="The delegate to be passed to unmanaged code.">비관리 코드에 전달할 대리자입니다.</param>
      <returns vsli:raw="A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.">비관리 코드에 전달할 수 있는 값입니다. 비관리 코드에서는 이 값을 사용하여 관리되는 내부 대리자를 호출할 수 있습니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is a generic type definition.">
        <paramref name="d" /> 매개 변수는 제네릭 형식 정의입니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="d" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.">[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 형식의 대리자를 관리되지 않는 코드에서 호출할 수 있는 함수 포인터로 변환합니다.</summary>
      <param name="d" vsli:raw="The delegate to be passed to unmanaged code.">비관리 코드에 전달할 대리자입니다.</param>
      <typeparam name="TDelegate" vsli:raw="The type of delegate to convert.">변환할 대리자의 형식입니다.</typeparam>
      <returns vsli:raw="A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.">비관리 코드에 전달할 수 있는 값입니다. 비관리 코드에서는 이 값을 사용하여 관리되는 내부 대리자를 호출할 수 있습니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is a generic type definition.">
        <paramref name="d" /> 매개 변수는 제네릭 형식 정의입니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="d" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary vsli:raw="Returns the instance handle (HINSTANCE) for the specified module.">지정된 모듈의 인스턴스 핸들(HINSTANCE)을 반환합니다.</summary>
      <param name="m" vsli:raw="The module whose HINSTANCE is desired.">HINSTANCE가 필요한 모듈입니다.</param>
      <returns vsli:raw="The HINSTANCE for &lt;paramref name=&quot;m&quot; /&gt;; or -1 if the module does not have an HINSTANCE.">
        <paramref name="m" />에 대한 HINSTANCE이거나 모듈에 HINSTANCE가 없을 경우는 -1입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="m" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary vsli:raw="Converts the specified exception to an HRESULT.">지정된 예외를 HRESULT로 변환합니다.</summary>
      <param name="e" vsli:raw="The exception to convert to an HRESULT.">HRESULT로 변환할 예외입니다.</param>
      <returns vsli:raw="The HRESULT mapped to the supplied exception.">해당 예외로 매핑되는 HRESULT입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary vsli:raw="Returns the HRESULT corresponding to the last error incurred by Win32 code executed using &lt;see cref=&quot;T:System.Runtime.InteropServices.Marshal&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.Marshal" />을 사용하여 실행된 Win32 코드에서 발생한 마지막 오류에 해당하는 HRESULT를 반환합니다.</summary>
      <returns vsli:raw="The HRESULT corresponding to the last Win32 error code.">마지막 Win32 오류 코드에 해당하는 HRESULT입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary vsli:raw="Returns an IDispatch interface from a managed object.">관리되는 개체에서 IDispatch 인터페이스를 반환합니다.</summary>
      <param name="o" vsli:raw="The object whose &lt;see langword=&quot;IDispatch&quot; /&gt; interface is requested.">
        <see langword="IDispatch" /> 인터페이스가 요청되는 개체입니다.</param>
      <returns vsli:raw="The &lt;see langword=&quot;IDispatch&quot; /&gt; pointer for the &lt;paramref name=&quot;o&quot; /&gt; parameter.">
        <paramref name="o" /> 매개 변수에 대한 <see langword="IDispatch" /> 포인터입니다.</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; does not support the requested interface.">
        <paramref name="o" />가 요청된 인터페이스를 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary vsli:raw="Returns an IUnknown interface from a managed object.">관리되는 개체에서 IUnknown 인터페이스를 반환합니다.</summary>
      <param name="o" vsli:raw="The object whose &lt;see langword=&quot;IUnknown&quot; /&gt; interface is requested.">
        <see langword="IUnknown" /> 인터페이스가 요청되는 개체입니다.</param>
      <returns vsli:raw="The &lt;see langword=&quot;IUnknown&quot; /&gt; pointer for the &lt;paramref name=&quot;o&quot; /&gt; parameter.">
        <paramref name="o" /> 매개 변수에 대한 <see langword="IUnknown" /> 포인터입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary vsli:raw="Returns the error code returned by the last unmanaged function that was called using platform invoke that has the &lt;see cref=&quot;F:System.Runtime.InteropServices.DllImportAttribute.SetLastError&quot; /&gt; flag set.">
        <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> 플래그가 설정된 플랫폼 호출을 사용하여 호출된 관리되지 않는 마지막 함수에서 반환하는 오류 코드를 반환합니다.</summary>
      <returns vsli:raw="The last error code set by a call to the Win32 SetLastError function.">Win32 SetLastError 함수에 대한 호출로 설정된 마지막 오류 코드입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary vsli:raw="Converts an object to a COM VARIANT.">개체를 COM VARIANT로 변환합니다.</summary>
      <param name="obj" vsli:raw="The object for which to get a COM VARIANT.">COM VARIANT를 가져올 개체입니다.</param>
      <param name="pDstNativeVariant" vsli:raw="A pointer to receive the VARIANT that corresponds to the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">
        <paramref name="obj" /> 매개 변수에 해당하는 VARIANT를 받을 포인터입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter is an instance of a generic type.">
        <paramref name="obj" /> 매개 변수는 제네릭 형식의 인스턴스입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an object of a specified type to a COM VARIANT.">[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 형식의 개체를 COM VARIANT로 변환합니다.</summary>
      <param name="obj" vsli:raw="The object for which to get a COM VARIANT.">COM VARIANT를 가져올 개체입니다.</param>
      <param name="pDstNativeVariant" vsli:raw="A pointer to receive the VARIANT that corresponds to the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">
        <paramref name="obj" /> 매개 변수에 해당하는 VARIANT를 받을 포인터입니다.</param>
      <typeparam name="T" vsli:raw="The type of the object to convert.">변환할 개체의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary vsli:raw="Returns an instance of a type that represents a COM object by a pointer to its IUnknown interface.">IUnknown 인터페이스에 대한 포인터를 사용하여 COM 개체를 나타내는 형식의 인스턴스를 반환합니다.</summary>
      <param name="pUnk" vsli:raw="A pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">
        <see langword="IUnknown" /> 인터페이스에 대한 포인터입니다.</param>
      <returns vsli:raw="An object that represents the specified unmanaged COM object.">지정된 관리되지 않는 COM 개체를 나타내는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pUnk&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">
        <paramref name="pUnk" />가 <see cref="F:System.IntPtr.Zero" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary vsli:raw="Converts a COM VARIANT to an object.">COM VARIANT를 개체로 변환합니다.</summary>
      <param name="pSrcNativeVariant" vsli:raw="A pointer to a COM VARIANT.">COM VARIANT에 대한 포인터입니다.</param>
      <returns vsli:raw="An object that corresponds to the &lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; parameter.">
        <paramref name="pSrcNativeVariant" /> 매개 변수에 해당하는 개체입니다.</returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; is not a valid VARIANT type.">
        <paramref name="pSrcNativeVariant" />가 유효한 VARIANT 형식이 아닌 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; has an unsupported type.">
        <paramref name="pSrcNativeVariant" />가 지원되지 않는 형식인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts a COM VARIANT to an object of a specified type.">[.NET Framework 4.5.1 이상 버전에서 지원됨]
COM VARIANT를 지정된 형식의 개체로 변환합니다.</summary>
      <param name="pSrcNativeVariant" vsli:raw="A pointer to a COM VARIANT.">COM VARIANT에 대한 포인터입니다.</param>
      <typeparam name="T" vsli:raw="The type to which to convert the COM VARIANT.">COM VARIANT를 변환할 형식입니다.</typeparam>
      <returns vsli:raw="An object of the specified type that corresponds to the &lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; parameter.">
        <paramref name="pSrcNativeVariant" /> 매개 변수에 해당하는 지정된 형식의 개체입니다.</returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; is not a valid VARIANT type.">
        <paramref name="pSrcNativeVariant" />가 유효한 VARIANT 형식이 아닌 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; has an unsupported type.">
        <paramref name="pSrcNativeVariant" />가 지원되지 않는 형식인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary vsli:raw="Converts an array of COM VARIANTs to an array of objects.">COM VARIANT의 배열을 개체 배열로 변환합니다.</summary>
      <param name="aSrcNativeVariant" vsli:raw="A pointer to the first element of an array of COM VARIANTs.">COM VARIANT 배열의 첫 번째 요소에 대한 포인터입니다.</param>
      <param name="cVars" vsli:raw="The count of COM VARIANTs in &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">
        <paramref name="aSrcNativeVariant" />에서 COM VARIANT의 수입니다.</param>
      <returns vsli:raw="An object array that corresponds to &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">
        <paramref name="aSrcNativeVariant" />에 해당하는 개체 배열입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;cVars&quot; /&gt; is a negative number.">
        <paramref name="cVars" />가 음수입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an array of COM VARIANTs to an array of a specified type.">[.NET Framework 4.5.1 이상 버전에서 지원됨]
COM VARIANT의 배열을 지정된 형식의 배열로 변환합니다.</summary>
      <param name="aSrcNativeVariant" vsli:raw="A pointer to the first element of an array of COM VARIANTs.">COM VARIANT 배열의 첫 번째 요소에 대한 포인터입니다.</param>
      <param name="cVars" vsli:raw="The count of COM VARIANTs in &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">
        <paramref name="aSrcNativeVariant" />에서 COM VARIANT의 수입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array to return.">반환할 배열의 형식입니다.</typeparam>
      <returns vsli:raw="An array of &lt;typeparamref name=&quot;T&quot; /&gt; objects that corresponds to &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">
        <typeparamref name="T" />에 해당하는 <paramref name="aSrcNativeVariant" /> 개체 배열입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;cVars&quot; /&gt; is a negative number.">
        <paramref name="cVars" />가 음수입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary vsli:raw="Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.">사용자 정의 메서드가 포함된 가상 함수 테이블(v-table 또는 VTBL)의 첫 번째 슬롯을 가져옵니다.</summary>
      <param name="t" vsli:raw="A type that represents an interface or a class.">인터페이스나 클래스를 나타내는 형식입니다.</param>
      <returns vsli:raw="The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on IUnknown, and 7 if the interface is based on IDispatch.">사용자 정의 메서드가 포함된 첫 번째 VTBL 슬롯입니다. IUnknown을 기준으로 하는 인터페이스의 경우 첫 번째 슬롯은 3이고, IDispatch를 기준으로 하는 인터페이스의 경우 7입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is not visible from COM.">
        <paramref name="t" />가 COM에 표시되지 않는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary vsli:raw="Returns a managed object of a specified type that represents a COM object.">COM 개체를 나타내는 지정된 형식의 관리되는 개체를 반환합니다.</summary>
      <param name="pUnk" vsli:raw="A pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface of the unmanaged object.">관리되지 않는 개체의 <see langword="IUnknown" /> 인터페이스에 대한 포인터입니다.</param>
      <param name="t" vsli:raw="The type of the requested managed class.">요청된 관리되는 클래스의 형식입니다.</param>
      <returns vsli:raw="An instance of the class corresponding to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the requested unmanaged COM object.">요청된 관리되지 않는 COM 개체를 나타내는 <see cref="T:System.Type" /> 개체에 해당하는 클래스의 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is not attributed with &lt;see cref=&quot;T:System.Runtime.InteropServices.ComImportAttribute&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;t&quot; /&gt; is a Windows Runtime type.">
        <paramref name="t" /> 특성이 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />가 아닌 경우
또는
<paramref name="t" />가 Windows 런타임 형식인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)">
      <summary vsli:raw="Returns the type associated with the specified class identifier (CLSID).">지정된 CLSID(클래스 식별자)와 연관된 형식을 반환합니다.</summary>
      <param name="clsid" vsli:raw="The CLSID of the type to return.">반환할 형식의 CLSID입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;System.__ComObject&quot; /&gt; regardless of whether the CLSID is valid.">
        <see langword="System.__ComObject" /> CLSID가 유효한지 여부에 관계 없습니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary vsli:raw="Retrieves the name of the type represented by an ITypeInfo object.">ITypeInfo 개체가 나타내는 형식의 이름을 검색합니다.</summary>
      <param name="typeInfo" vsli:raw="An object that represents an &lt;see langword=&quot;ITypeInfo&quot; /&gt; pointer.">
        <see langword="ITypeInfo" /> 포인터를 나타내는 개체입니다.</param>
      <returns vsli:raw="The name of the type that the &lt;paramref name=&quot;typeInfo&quot; /&gt; parameter points to.">
        <paramref name="typeInfo" /> 매개 변수가 가리키는 형식의 이름입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;typeInfo&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeInfo" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary vsli:raw="Creates a unique Runtime Callable Wrapper (RCW) object for a given IUnknown interface.">주어진 IUnknown 인터페이스에 고유한 RCW(런타임 호출 가능 래퍼)를 만듭니다.</summary>
      <param name="unknown" vsli:raw="A managed pointer to an &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">
        <see langword="IUnknown" /> 인터페이스에 대한 관리되는 포인터입니다.</param>
      <returns vsli:raw="A unique RCW for the specified &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">지정된 <see langword="IUnknown" /> 인터페이스에 대한 고유한 RCW입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary vsli:raw="Indicates whether a specified object represents a COM object.">지정된 개체가 COM 개체를 나타낼지 여부를 나타냅니다.</summary>
      <param name="o" vsli:raw="The object to check.">검사할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;o&quot; /&gt; parameter is a COM type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="o" /> 매개 변수가 COM 형식이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)">
      <summary vsli:raw="Indicates whether a type is visible to COM clients.">형식이 COM 클라이언트에 표시되는지 여부를 나타냅니다.</summary>
      <param name="t" vsli:raw="The type to check for COM visibility.">COM 표시 여부를 확인할 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is visible to COM; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">형식이 COM에 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary vsli:raw="Returns the field offset of the unmanaged form of the managed class.">관리되는 클래스의 관리되지 않는 형식의 필드 오프셋을 반환합니다.</summary>
      <param name="t" vsli:raw="A value type or formatted reference type that specifies the managed class. You must apply the &lt;see cref=&quot;T:System.Runtime.InteropServices.StructLayoutAttribute&quot; /&gt; to the class.">관리되는 클래스를 지정하는 값 형식이나 서식이 지정된 참조 형식입니다. 클래스에 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />를 적용해야 합니다.</param>
      <param name="fieldName" vsli:raw="The field within the &lt;paramref name=&quot;t&quot; /&gt; parameter.">
        <paramref name="t" /> 매개 변수에 있는 필드입니다.</param>
      <returns vsli:raw="The offset, in bytes, for the &lt;paramref name=&quot;fieldName&quot; /&gt; parameter within the specified class that is declared by platform invoke.">플랫폼 호출로 선언된 지정된 클래스 내의 <paramref name="fieldName" /> 매개 변수에 대한 오프셋(바이트)입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.">클래스를 구조체로 내보낼 수 없거나 필드가 공용이 아닌 경우 .NET Framework 버전 2.0 이상에서는 이 필드가 private 필드일 수 있습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the field offset of the unmanaged form of a specified managed class.">[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 관리되는 클래스의 관리되지 않는 형식의 필드 오프셋을 반환합니다.</summary>
      <param name="fieldName" vsli:raw="The name of the field in the &lt;paramref name=&quot;T&quot; /&gt; type.">
        <paramref name="T" /> 형식의 필드 이름입니다.</param>
      <typeparam name="T" vsli:raw="A managed value type or formatted reference type. You must apply the &lt;see cref=&quot;T:System.Runtime.InteropServices.StructLayoutAttribute&quot; /&gt; attribute to the class.">관리되는 값 또는 formatted 참조 형식입니다. 클래스에 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 특성을 적용해야 합니다.</typeparam>
      <returns vsli:raw="The offset, in bytes, for the &lt;paramref name=&quot;fieldName&quot; /&gt; parameter within the specified class that is declared by platform invoke.">플랫폼 호출로 선언된 지정된 클래스 내의 <paramref name="fieldName" /> 매개 변수에 대한 오프셋(바이트)입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary vsli:raw="Executes one-time method setup tasks without calling the method.">메서드를 호출하지 않고 메서드 설정 작업을 한 번에 실행합니다.</summary>
      <param name="m" vsli:raw="The method to be checked.">검사할 메서드입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="m" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is not a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object.">
        <paramref name="m" /> 매개 변수가 <see cref="T:System.Reflection.MethodInfo" /> 개체가 아닌 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary vsli:raw="Performs a pre-link check for all methods on a class.">클래스의 모든 메서드에 대해 링크 전 검사를 수행합니다.</summary>
      <param name="c" vsli:raw="The class whose methods are to be checked.">메서드를 검사할 클래스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;c&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="c" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary vsli:raw="Copies all characters up to the first null character from an unmanaged ANSI or UTF-8 string to a managed &lt;see cref=&quot;T:System.String&quot; /&gt;, and widens each character to UTF-16.">관리되지 않는 ANSI 문자열에서 첫 번째 null 문자가 나올 때까지의 모든 문자를 관리되는 <see cref="T:System.String" />으로 복사하고 각 ANSI 문자를 유니코드로 확장합니다.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">관리되지 않는 문자열의 첫 문자 주소입니다.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string. If &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns a null string.">관리되지 않는 ANSI 문자열의 복사본을 보유하는 관리되는 문자열입니다. <paramref name="ptr" />이 <see langword="null" />이면 메서드가 null 문자열을 반환합니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt;, copies a specified number of characters from an unmanaged ANSI or UTF-8 string into it, and widens each character to UTF-16.">관리되는 <see cref="T:System.String" />을 할당하고, 관리되지 않는 ANSI 문자열에서 지정된 수의 문자를 해당 개체로 복사한 다음 각 ANSI 문자를 유니코드로 확장합니다.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">관리되지 않는 문자열의 첫 문자 주소입니다.</param>
      <param name="len" vsli:raw="The byte count of the input string to copy.">복사할 입력 문자열의 바이트 수입니다.</param>
      <returns vsli:raw="A managed string that holds a copy of the native string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> 매개 변수의 값이 <see langword="null" />이 아니면 네이티브 ANSI 문자열의 복사본을 보유하는 관리되는 문자열이고, 그렇지 않으면 이 메서드에서 <see langword="null" />을 반환합니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; is less than zero.">
        <paramref name="len" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from a string stored in unmanaged memory into it.">관리되는 <see cref="T:System.String" />을 할당하고 관리되지 않는 메모리에 저장된 문자열에서 첫 번째 null이 나올 때까지의 모든 문자를 해당 개체로 복사합니다.</summary>
      <param name="ptr" vsli:raw="For Unicode platforms, the address of the first Unicode character.&#xA;&#xA; -or-&#xA;&#xA; For ANSI platforms, the address of the first ANSI character.">유니코드 플랫폼의 경우 첫째 유니코드 문자의 주소입니다.
또는
ANSI 플랫폼의 경우 첫 번째 ANSI 문자의 주소입니다.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> 매개 변수의 값이 <see langword="null" />가 아니면 관리되지 않는 문자열의 복사본을 보유하는 관리되는 문자열이고, 그렇지 않으면 이 메서드에서 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies the specified number of characters from a string stored in unmanaged memory into it.">관리되는 <see cref="T:System.String" />을 할당하고 관리되지 않는 메모리에 저장된 문자열에서 지정된 수의 문자를 그 안에 복사합니다.</summary>
      <param name="ptr" vsli:raw="For Unicode platforms, the address of the first Unicode character.&#xA;&#xA; -or-&#xA;&#xA; For ANSI platforms, the address of the first ANSI character.">유니코드 플랫폼의 경우 첫째 유니코드 문자의 주소입니다.
또는
ANSI 플랫폼의 경우 첫 번째 ANSI 문자의 주소입니다.</param>
      <param name="len" vsli:raw="The number of characters to copy.">복사할 문자 수입니다.</param>
      <returns vsli:raw="A managed string that holds a copy of the native string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> 매개 변수의 값이 <see langword="null" />이 아니면 네이티브 문자열의 복사본이 들어 있는 관리되는 문자열이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; is less than zero.">
        <paramref name="len" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a binary string (BSTR) stored in unmanaged memory into it.">관리되는 <see cref="T:System.String" />을 할당하고 관리되지 않는 메모리에 저장된 BSTR(이진 문자열)을 그 안에 복사합니다.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">관리되지 않는 문자열의 첫 문자 주소입니다.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string.">관리되지 않는 문자열의 복사본을 보유하는 관리되는 문자열입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; equals &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">
        <paramref name="ptr" />가 <see cref="F:System.IntPtr.Zero" />와 같습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from an unmanaged Unicode string into it.">관리되는 <see cref="T:System.String" />을 할당하고 관리되지 않는 유니코드 문자열에서 첫 번째 null이 나올 때까지의 모든 문자를 해당 개체로 복사합니다.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">관리되지 않는 문자열의 첫 문자 주소입니다.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> 매개 변수의 값이 <see langword="null" />가 아니면 관리되지 않는 문자열의 복사본을 보유하는 관리되는 문자열이고, 그렇지 않으면 이 메서드에서 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a specified number of characters from an unmanaged Unicode string into it.">관리되는 <see cref="T:System.String" />을 할당하고 관리되지 않는 유니코드 문자열의 지정된 문자 수를 그 안에 복사합니다.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">관리되지 않는 문자열의 첫 문자 주소입니다.</param>
      <param name="len" vsli:raw="The number of Unicode characters to copy.">복사할 유니코드 문자 수입니다.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> 매개 변수의 값이 <see langword="null" />가 아니면 관리되지 않는 문자열의 복사본을 보유하는 관리되는 문자열이고, 그렇지 않으면 이 메서드에서 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)">
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string." />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)">
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string." />
      <param name="byteLen" vsli:raw="The number of bytes to copy." />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary vsli:raw="Marshals data from an unmanaged block of memory to a managed object.">관리되지 않는 메모리 블록의 데이터를 관리되는 개체로 마샬링합니다.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">관리되지 않는 메모리 블록에 대한 포인터입니다.</param>
      <param name="structure" vsli:raw="The object to which the data is to be copied. This must be an instance of a formatted class.">데이터가 복사될 대상 개체입니다. 이 개체는 형식이 지정된 클래스의 인스턴스여야 합니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Structure layout is not sequential or explicit.&#xA;&#xA; -or-&#xA;&#xA; Structure is a boxed value type.">구조체 레이아웃이 Sequential 또는 Explicit이 아닌 경우
또는
구조체가 boxed 값 형식인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary vsli:raw="Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.">관리되지 않는 메모리 블록의 데이터를 지정된 형식의 새로 할당된 관리되는 개체로 마샬링합니다.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">관리되지 않는 메모리 블록에 대한 포인터입니다.</param>
      <param name="structureType" vsli:raw="The type of object to be created. This object must represent a formatted class or a structure.">만들 개체의 형식입니다. 이 개체는 서식이 지정된 클래스나 구조체를 나타내야 합니다.</param>
      <returns vsli:raw="A managed object containing the data pointed to by the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">
        <paramref name="ptr" /> 매개 변수가 가리키는 데이터가 있는 관리되는 개체입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;structureType&quot; /&gt; parameter layout is not sequential or explicit.&#xA;&#xA; -or-&#xA;&#xA; The &lt;paramref name=&quot;structureType&quot; /&gt; parameter is a generic type definition.">
        <paramref name="structureType" /> 매개 변수 레이아웃이 Sequential 또는 Explicit이 아닌 경우
또는
<paramref name="structureType" /> 매개 변수는 제네릭 형식 정의입니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;structureType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="structureType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.MissingMethodException" vsli:raw="The class specified by &lt;paramref name=&quot;structureType&quot; /&gt; does not have an accessible parameterless constructor.">
        <paramref name="structureType" />에서 지정한 클래스에는 액세스할 수 있는 매개 변수가 없는 생성자가 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.">[.NET Framework 4.5.1 이상 버전에서 지원됨]
관리되지 않는 메모리 블록의 데이터를 제네릭 형식 매개 변수에 의해 지정된 형식의 새로 할당된 관리되는 개체로 마샬링합니다.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">관리되지 않는 메모리 블록에 대한 포인터입니다.</param>
      <typeparam name="T" vsli:raw="The type of the object to which the data is to be copied. This must be a formatted class or a structure.">데이터가 복사될 개체의 형식입니다. 이 개체는 서식이 지정된 클래스나 구조체여야 합니다.</typeparam>
      <returns vsli:raw="A managed object that contains the data that the &lt;paramref name=&quot;ptr&quot; /&gt; parameter points to.">
        <paramref name="ptr" /> 매개 변수가 가리키는 데이터가 있는 관리되는 개체입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The layout of &lt;typeparamref name=&quot;T&quot; /&gt; is not sequential or explicit.">
        <typeparamref name="T" /> 레이아웃이 Sequential 또는 Explicit이 아닌 경우</exception>
      <exception cref="T:System.MissingMethodException" vsli:raw="The class specified by &lt;typeparamref name=&quot;T&quot; /&gt; does not have an accessible parameterless constructor.">
        <typeparamref name="T" />에서 지정한 클래스에는 액세스할 수 있는 매개 변수가 없는 생성자가 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from an unmanaged block of memory to a managed object of the specified type.">[.NET Framework 4.5.1 이상 버전에서 지원됨]
관리되지 않는 메모리 블록의 데이터를 지정된 형식의 관리되는 개체로 마샬링합니다.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">관리되지 않는 메모리 블록에 대한 포인터입니다.</param>
      <param name="structure" vsli:raw="The object to which the data is to be copied.">데이터가 복사될 대상 개체입니다.</param>
      <typeparam name="T" vsli:raw="The type of &lt;paramref name=&quot;structure&quot; /&gt;. This must be a formatted class.">
        <paramref name="structure" />의 형식입니다. 형식이 지정된 클래스여야 합니다.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="Structure layout is not sequential or explicit.">구조체 레이아웃이 Sequential 또는 Explicit이 아닌 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary vsli:raw="Requests a pointer to a specified interface from a COM object.">COM 개체에서 지정된 인터페이스에 대한 포인터를 요청합니다.</summary>
      <param name="pUnk" vsli:raw="The interface to be queried.">쿼리될 인터페이스입니다.</param>
      <param name="iid" vsli:raw="The interface identifier (IID) of the requested interface.">요청된 인터페이스의 IID(인터페이스 식별자)입니다.</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the returned interface.">이 메서드는 반환될 때 반환된 인터페이스에 대한 참조를 포함합니다.</param>
      <returns vsli:raw="An HRESULT that indicates the success or failure of the call.">호출의 성공이나 실패를 나타내는 HRESULT입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary vsli:raw="Reads a single byte from unmanaged memory.">관리되지 않는 메모리에서 싱글바이트를 읽습니다.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">읽을 관리되지 않는 메모리의 주소입니다.</param>
      <returns vsli:raw="The byte read from unmanaged memory.">관리되지 않는 메모리에서 읽은 바이트입니다.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a single byte at a given offset (or index) from unmanaged memory.">관리되지 않는 메모리의 지정된 오프셋(또는 인덱스) 위치에서 싱글바이트를 읽습니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">읽을 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns vsli:raw="The byte read from unmanaged memory at the given offset.">관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 바이트입니다.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary vsli:raw="Reads a single byte at a given offset (or index) from unmanaged memory.">관리되지 않는 메모리의 지정된 오프셋(또는 인덱스) 위치에서 싱글바이트를 읽습니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">소스 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns vsli:raw="The byte read from unmanaged memory at the given offset.">관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 바이트입니다.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary vsli:raw="Reads a 16-bit signed integer from unmanaged memory.">관리되지 않는 메모리에서 16비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">읽을 관리되지 않는 메모리의 주소입니다.</param>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory.">관리되지 않는 메모리에서 읽은 16비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 16-bit signed integer at a given offset from unmanaged memory.">관리되지 않는 메모리의 지정된 오프셋 위치에서 16비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">읽을 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory at the given offset.">관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 16비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 16-bit signed integer at a given offset from unmanaged memory.">관리되지 않는 메모리의 지정된 오프셋 위치에서 16비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">소스 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory at the given offset.">관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 16비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary vsli:raw="Reads a 32-bit signed integer from unmanaged memory.">관리되지 않는 메모리에서 32비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">읽을 관리되지 않는 메모리의 주소입니다.</param>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory.">관리되지 않는 메모리에서 읽은 32비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 32-bit signed integer at a given offset from unmanaged memory.">관리되지 않는 메모리의 지정된 오프셋 위치에서 32비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">읽을 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory.">관리되지 않는 메모리에서 읽은 32비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 32-bit signed integer at a given offset from unmanaged memory.">관리되지 않는 메모리의 지정된 오프셋 위치에서 32비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">소스 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory at the given offset.">관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 32비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary vsli:raw="Reads a 64-bit signed integer from unmanaged memory.">관리되지 않는 메모리에서 64비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">읽을 관리되지 않는 메모리의 주소입니다.</param>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory.">관리되지 않는 메모리에서 읽은 64비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 64-bit signed integer at a given offset from unmanaged memory.">관리되지 않는 메모리의 지정된 오프셋 위치에서 64비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">읽을 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory at the given offset.">관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 64비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 64-bit signed integer at a given offset from unmanaged memory.">관리되지 않는 메모리의 지정된 오프셋 위치에서 64비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">소스 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory at the given offset.">관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 64비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary vsli:raw="Reads a processor native-sized integer from unmanaged memory.">관리되지 않는 메모리에서 프로세서의 기본 크기로 지정된 정수를 읽습니다.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">읽을 관리되지 않는 메모리의 주소입니다.</param>
      <returns vsli:raw="The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.">관리되지 않는 메모리에서 읽은 정수입니다. 32비트 컴퓨터에서는 32비트 정수가 반환되고 64비트 컴퓨터에서는 64비트 정수가 반환됩니다.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a processor native sized integer at a given offset from unmanaged memory.">관리되지 않는 메모리의 지정된 오프셋 위치에서 프로세서의 기본 크기로 지정된 정수를 읽습니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">읽을 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns vsli:raw="The integer read from unmanaged memory at the given offset.">관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary vsli:raw="Reads a processor native sized integer from unmanaged memory.">관리되지 않는 메모리에서 프로세서의 기본 크기로 지정된 정수를 읽습니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">소스 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns vsli:raw="The integer read from unmanaged memory at the given offset.">관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary vsli:raw="Resizes a block of memory previously allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />을 사용하여 이전에 할당된 메모리 블록 크기를 조정합니다.</summary>
      <param name="pv" vsli:raw="A pointer to memory allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />을 사용하여 할당된 메모리에 대한 포인터입니다.</param>
      <param name="cb" vsli:raw="The new size of the allocated block.">할당된 블록의 새 크기입니다.</param>
      <returns vsli:raw="An integer representing the address of the reallocated block of memory. This memory must be released with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)&quot; /&gt;.">다시 할당된 메모리 블록 주소를 나타내는 정수입니다. 이 메모리는 <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />을 사용하여 해제되어야 합니다.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">메모리가 부족하여 요청을 만족시킬 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Resizes a block of memory previously allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />을 사용하여 이전에 할당된 메모리 블록 크기를 조정합니다.</summary>
      <param name="pv" vsli:raw="A pointer to memory allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />을 사용하여 할당된 메모리에 대한 포인터입니다.</param>
      <param name="cb" vsli:raw="The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type &lt;see cref=&quot;T:System.IntPtr&quot; /&gt;. If you pass a pointer, it is treated as a size.">할당된 블록의 새 크기입니다. 이것은 포인터가 아니라 요청하는 바이트 수로, 형식 <see cref="T:System.IntPtr" />로 캐스팅합니다. 포인터를 전달하면 크기로 처리됩니다.</param>
      <returns vsli:raw="A pointer to the reallocated memory. This memory must be released using &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt;.">다시 할당된 메모리에 대한 포인터입니다. 이 메모리는 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />을 사용하여 해제되어야 합니다.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">메모리가 부족하여 요청을 만족시킬 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary vsli:raw="Decrements the reference count on the specified interface.">지정된 인터페이스의 참조 횟수를 감소시킵니다.</summary>
      <param name="pUnk" vsli:raw="The interface to release.">해제할 인터페이스입니다.</param>
      <returns vsli:raw="The new value of the reference count on the interface specified by the &lt;paramref name=&quot;pUnk&quot; /&gt; parameter.">
        <paramref name="pUnk" /> 매개 변수에서 지정하는 인터페이스에 대한 참조 횟수의 새 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary vsli:raw="Decrements the reference count of the Runtime Callable Wrapper (RCW) associated with the specified COM object.">지정된 COM 개체와 연결된 지정된 RCW(런타임 호출 가능 래퍼)의 참조 횟수를 감소시킵니다.</summary>
      <param name="o" vsli:raw="The COM object to release.">해제할 COM 개체입니다.</param>
      <returns vsli:raw="The new value of the reference count of the RCW associated with &lt;paramref name=&quot;o&quot; /&gt;. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.">
        <paramref name="o" />와 연결된 RCW 참조 횟수의 새 값입니다. RCW는 참조를 호출하는 관리되는 클라이언트의 수에 관계없이 래핑된 COM 개체에 대한 참조를 하나만 유지하므로 일반적으로 이 값은 0이 됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is not a valid COM object.">
        <paramref name="o" />가 올바른 개체 범위가 아닌 경우</exception>
      <exception cref="T:System.NullReferenceException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary vsli:raw="Allocates an unmanaged binary string (BSTR) and copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into it.">관리되지 않는 이진 문자열(BSTR)을 할당하고 관리되는 <see cref="T:System.Security.SecureString" /> 개체의 내용을 복사합니다.</summary>
      <param name="s" vsli:raw="The managed object to copy.">복사할 관리되는 개체입니다.</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">관리되지 않는 메모리에서 <paramref name="s" /> 매개 변수가 복사된 주소 또는 null 개체가 제공된 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">관리되는 <see cref="T:System.Security.SecureString" /> 개체의 내용을 관리되지 않는 COM 작업 할당자에서 할당된 메모리 블록으로 복사합니다.</summary>
      <param name="s" vsli:raw="The managed object to copy.">복사할 관리되는 개체입니다.</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">관리되지 않는 메모리에서 <paramref name="s" /> 매개 변수가 복사된 주소 또는 null 개체가 제공된 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">관리되는 <see cref="T:System.Security.SecureString" /> 개체의 내용을 관리되지 않는 COM 작업 할당자에서 할당된 메모리 블록으로 복사합니다.</summary>
      <param name="s" vsli:raw="The managed object to copy.">복사할 관리되는 개체입니다.</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">관리되지 않는 메모리에서 <paramref name="s" /> 매개 변수가 복사된 주소 또는 null 개체가 제공된 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">복사할 때 ANSI 형식으로 변환하여 관리되는 <see cref="T:System.Security.SecureString" />의 내용을 관리되지 않는 메모리로 복사합니다.</summary>
      <param name="s" vsli:raw="The managed object to copy.">복사할 관리되는 개체입니다.</param>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied, or 0 if a null object was supplied.">관리되지 않는 메모리에서 <paramref name="s" /> 매개 변수가 복사된 주소이거나 null 개체가 제공된 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into unmanaged memory.">관리되는 <see cref="T:System.Security.SecureString" /> 개체의 콘텐츠를 관리되지 않는 메모리로 복사합니다.</summary>
      <param name="s" vsli:raw="The managed object to copy.">복사할 관리되는 개체입니다.</param>
      <returns vsli:raw="The address, in unmanaged memory, where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is a &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object whose length is 0.">관리되지 않는 메모리에서 <paramref name="s" />가 복사된 주소이거나 <paramref name="s" />가 길이가 0인 <see cref="T:System.Security.SecureString" /> 개체인 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary vsli:raw="Sets data referenced by the specified key in the specified COM object.">지정된 COM 개체에서 지정된 키가 참조하는 데이터를 설정합니다.</summary>
      <param name="obj" vsli:raw="The COM object in which to store the data.">데이터를 저장할 COM 개체입니다.</param>
      <param name="key" vsli:raw="The key in the internal hash table of the COM object in which to store the data.">데이터를 저장할 COM 개체의 내부 해시 테이블에 있는 키입니다.</param>
      <param name="data" vsli:raw="The data to set.">설정할 데이터입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data was set successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">데이터가 성공적으로 설정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="obj" />가 <see langword="null" />인 경우
또는
<paramref name="key" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a COM object.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;obj&quot; /&gt; is a Windows Runtime object.">
        <paramref name="obj" />가 COM 개체가 아닌 경우
또는
<paramref name="obj" />가 Windows 런타임 개체입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary vsli:raw="Returns the unmanaged size of an object in bytes.">개체의 관리되지 않는 크기(바이트)를 반환합니다.</summary>
      <param name="structure" vsli:raw="The object whose size is to be returned.">크기가 반환되는 개체입니다.</param>
      <returns vsli:raw="The size of the specified object in unmanaged code.">비관리 코드에서 지정된 개체의 크기입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;structure&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="structure" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary vsli:raw="Returns the size of an unmanaged type in bytes.">관리되지 않는 형식의 크기(바이트)를 반환합니다.</summary>
      <param name="t" vsli:raw="The type whose size is to be returned.">크기가 반환되는 형식입니다.</param>
      <returns vsli:raw="The size of the specified type in unmanaged code.">비관리 코드에서 지정된 형식의 크기입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is a generic type definition.">
        <paramref name="t" /> 매개 변수는 제네릭 형식 정의입니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the size of an unmanaged type in bytes.">[.NET Framework 4.5.1 이상 버전에서 지원됨]
관리되지 않는 형식의 크기(바이트)를 반환합니다.</summary>
      <typeparam name="T" vsli:raw="The type whose size is to be returned.">크기가 반환되는 형식입니다.</typeparam>
      <returns vsli:raw="The size, in bytes, of the type that is specified by the &lt;typeparamref name=&quot;T&quot; /&gt; generic type parameter.">
        <typeparamref name="T" /> 제네릭 형식 매개 변수로 지정된 형식의 크기(바이트 단위)입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the unmanaged size of an object of a specified type in bytes.">[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 형식의 개체의 관리되지 않은 크기를 반환합니다(바이트 단위).</summary>
      <param name="structure" vsli:raw="The object whose size is to be returned.">크기가 반환되는 개체입니다.</param>
      <typeparam name="T" vsli:raw="The type of the &lt;paramref name=&quot;structure&quot; /&gt; parameter.">
        <paramref name="structure" /> 매개 변수의 형식입니다.</typeparam>
      <returns vsli:raw="The size, in bytes, of the specified object in unmanaged code.">비관리 코드에서 지정된 개체의 크기(바이트)입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;structure&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="structure" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary vsli:raw="Allocates a BSTR and copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into it.">BSTR을 할당하고 관리되는 <see cref="T:System.String" />의 내용을 그 안에 복사합니다.</summary>
      <param name="s" vsli:raw="The managed string to be copied.">복사할 관리되는 문자열입니다.</param>
      <returns vsli:raw="An unmanaged pointer to the &lt;see langword=&quot;BSTR&quot; /&gt;, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is null.">
        <see langword="BSTR" />에 대한 관리되지 않는 포인터 또는 <paramref name="s" />가 null인 경우 0입니다.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">사용 가능한 메모리가 부족한 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The length for &lt;paramref name=&quot;s&quot; /&gt; is out of range.">
        <paramref name="s" />의 길이가 범위를 벗어난 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">관리되는 <see cref="T:System.String" />의 내용을 관리되지 않는 COM 작업 할당자에서 할당된 메모리 블록으로 복사합니다.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">복사할 관리되는 문자열입니다.</param>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">문자열에 할당된 메모리 블록에 대한 포인터를 나타내는 정수이거나 <paramref name="s" />가 <see langword="null" />인 경우 0입니다.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">사용 가능한 메모리가 부족한 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> 매개 변수가 운영 체제에서 허용되는 최대 길이를 초과하는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">관리되는 <see cref="T:System.String" />의 내용을 관리되지 않는 COM 작업 할당자에서 할당된 메모리 블록으로 복사합니다.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">복사할 관리되는 문자열입니다.</param>
      <returns vsli:raw="The allocated memory block, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">할당된 메모리 블록이거나 <paramref name="s" />가 <see langword="null" />인 경우 0입니다.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">사용 가능한 메모리가 부족한 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The length for &lt;paramref name=&quot;s&quot; /&gt; is out of range.">
        <paramref name="s" />의 길이가 범위를 벗어난 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">관리되는 <see cref="T:System.String" />의 내용을 관리되지 않는 COM 작업 할당자에서 할당된 메모리 블록으로 복사합니다.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">복사할 관리되는 문자열입니다.</param>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if s is &lt;see langword=&quot;null&quot; /&gt;.">문자열에 할당된 메모리 블록에 대한 포인터를 나타내는 정수이거나 s가 <see langword="null" />인 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> 매개 변수가 운영 체제에서 허용되는 최대 길이를 초과하는 경우</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)">
      <param name="s" vsli:raw="A managed string to be copied." />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">복사할 때 ANSI 형식으로 변환하여 관리되는 <see cref="T:System.String" />의 내용을 관리되지 않는 메모리로 복사합니다.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">복사할 관리되는 문자열입니다.</param>
      <returns vsli:raw="The address, in unmanaged memory, to where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">관리되지 않는 메모리에서 <paramref name="s" />가 복사된 주소이거나 <paramref name="s" />가 <see langword="null" />인 경우 0입니다.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">사용 가능한 메모리가 부족한 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> 매개 변수가 운영 체제에서 허용되는 최대 길이를 초과하는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory, converting into ANSI format if required.">필요할 때 ANSI 형식으로 변환하여 관리되는 <see cref="T:System.String" />의 내용을 관리되지 않는 메모리로 복사합니다.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">복사할 관리되는 문자열입니다.</param>
      <returns vsli:raw="The address, in unmanaged memory, to where the string was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">관리되지 않는 메모리에서 문자열이 복사된 주소이거나 <paramref name="s" />가 <see langword="null" />인 경우 0입니다.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory.">관리되는 <see cref="T:System.String" />의 내용을 관리되지 않는 메모리로 복사합니다.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">복사할 관리되는 문자열입니다.</param>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">관리되지 않는 메모리에서 <paramref name="s" />가 복사된 주소이거나 <paramref name="s" />가 <see langword="null" />인 경우 0입니다.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The method could not allocate enough native heap memory.">메서드가 충분한 네이티브 힙 메모리를 할당할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> 매개 변수가 운영 체제에서 허용되는 최대 길이를 초과하는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary vsli:raw="Marshals data from a managed object to an unmanaged block of memory.">관리되는 개체의 데이터를 관리되지 않는 메모리 블록으로 마샬링합니다.</summary>
      <param name="structure" vsli:raw="A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.">마샬링될 데이터가 있는 관리되는 개체입니다. 이 개체는 구조체이거나 형식이 지정된 클래스의 인스턴스여야 합니다.</param>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory, which must be allocated before this method is called.">관리되지 않는 메모리 블록에 대한 포인터로서 이 메서드가 호출되기 전에 할당되어야 합니다.</param>
      <param name="fDeleteOld" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to call the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)&quot; /&gt; method on the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before this method copies the data. The block must contain valid data. Note that passing &lt;see langword=&quot;false&quot; /&gt; when the memory block already contains data can lead to a memory leak.">이 메서드가 데이터를 복사하기 전에 <paramref name="ptr" /> 매개 변수에 대해 <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> 메서드를 호출하려면 <see langword="true" />입니다. 블록에는 유효한 데이터가 있어야 합니다. 메모리 블록에 이미 데이터가 포함되어 있을 때 <see langword="false" />를 전달하면 메모리 누수가 발생할 수 있습니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structure&quot; /&gt; is a reference type that is not a formatted class.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;structure&quot; /&gt; is an instance of a generic type (in the .NET Framework 4.5 and earlier versions only).">
        <paramref name="structure" />가 형식이 지정된 클래스가 아닌 참조 형식인 경우
또는
<paramref name="structure" />은 제네릭 형식(.NET Framework 4.5 및 이전 버전에만 해당)의 인스턴스입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from a managed object of a specified type to an unmanaged block of memory.">[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 형식의 관리되는 개체의 데이터를 관리되지 않는 메모리 블록으로 마샬링합니다.</summary>
      <param name="structure" vsli:raw="A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.">마샬링될 데이터가 있는 관리되는 개체입니다. 이 개체는 구조체이거나 형식이 지정된 클래스의 인스턴스여야 합니다.</param>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory, which must be allocated before this method is called.">관리되지 않는 메모리 블록에 대한 포인터로서 이 메서드가 호출되기 전에 할당되어야 합니다.</param>
      <param name="fDeleteOld" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to call the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)&quot; /&gt; method on the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before this method copies the data. The block must contain valid data. Note that passing &lt;see langword=&quot;false&quot; /&gt; when the memory block already contains data can lead to a memory leak.">이 메서드가 데이터를 복사하기 전에 <paramref name="ptr" /> 매개 변수에 대해 <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> 메서드를 호출하려면 <see langword="true" />입니다. 블록에는 유효한 데이터가 있어야 합니다. 메모리 블록에 이미 데이터가 포함되어 있을 때 <see langword="false" />를 전달하면 메모리 누수가 발생할 수 있습니다.</param>
      <typeparam name="T" vsli:raw="The type of the managed object.">관리되는 개체의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structure&quot; /&gt; is a reference type that is not a formatted class.">
        <paramref name="structure" />가 형식이 지정된 클래스가 아닌 참조 형식인 경우</exception>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary vsli:raw="Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.">시스템의 기본 문자 크기를 나타냅니다. 유니코드 시스템의 경우 기본값이 2이고, ANSI 시스템의 경우 1입니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary vsli:raw="Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.">현재 운영 체제에서 DBCS(더블바이트 문자 집합)의 최대 크기(바이트)를 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary vsli:raw="Throws an exception with a specific failure HRESULT value.">오류가 있는 특정 HRESULT 값을 사용하여 예외를 throw합니다.</summary>
      <param name="errorCode" vsli:raw="The HRESULT corresponding to the desired exception.">해당 예외에 해당하는 HRESULT입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary vsli:raw="Throws an exception with a specific failure HRESULT, based on the specified IErrorInfo interface.">지정된 IErrorInfo 인터페이스에 따라 특정 오류 HRESULT가 포함된 예외를 발생시킵니다.</summary>
      <param name="errorCode" vsli:raw="The HRESULT corresponding to the desired exception.">해당 예외에 해당하는 HRESULT입니다.</param>
      <param name="errorInfo" vsli:raw="A pointer to the IErrorInfo interface that provides more information about the error. You can specify &lt;c&gt;IntPtr(0)&lt;/c&gt; to use the current IErrorInfo interface, or &lt;c&gt;IntPtr(-1)&lt;/c&gt; to ignore the current IErrorInfo interface and construct the exception just from the error code.">오류에 대한 추가 정보를 제공하는 IErrorInfo 인터페이스에 대한 포인터입니다. 현재 IErrorInfo 인터페이스를 사용하려면 <c>IntPtr(0)</c>을 지정하고, 현재 IErrorInfo 인터페이스를 무시하고 오류 코드에서만 예외를 생성하려면 <c>IntPtr(-1)</c>을 지정합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary vsli:raw="Gets the address of the element at the specified index inside the specified array.">지정된 배열의 지정된 인덱스에 있는 요소의 주소를 가져옵니다.</summary>
      <param name="arr" vsli:raw="The array that contains the desired element.">필요한 요소가 포함된 배열입니다.</param>
      <param name="index" vsli:raw="The index in the &lt;paramref name=&quot;arr&quot; /&gt; parameter of the desired element.">원하는 요소의 <paramref name="arr" /> 매개 변수에 있는 인덱스입니다.</param>
      <returns vsli:raw="The address of &lt;paramref name=&quot;index&quot; /&gt; inside &lt;paramref name=&quot;arr&quot; /&gt;.">
        <paramref name="index" />에 있는 <paramref name="arr" /> 주소입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Gets the address of the element at the specified index in an array of a specified type.">[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 형식의 배열에 지정된 인덱스에 있는 요소의 주소를 가져옵니다.</summary>
      <param name="arr" vsli:raw="The array that contains the desired element.">필요한 요소가 포함된 배열입니다.</param>
      <param name="index" vsli:raw="The index of the desired element in the &lt;paramref name=&quot;arr&quot; /&gt; array.">
        <paramref name="arr" /> 배열에서 원하는 요소의 인덱스입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array.">배열의 형식입니다.</typeparam>
      <returns vsli:raw="The address of &lt;paramref name=&quot;index&quot; /&gt; in &lt;paramref name=&quot;arr&quot; /&gt;.">
        <paramref name="index" />에 있는 <paramref name="arr" /> 주소입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory.">관리되지 않는 메모리에 싱글바이트 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">관리되지 않는 메모리에서 값을 쓸 주소입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory at a specified offset.">관리되지 않는 메모리의 지정된 오프셋 위치에 싱글바이트 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">관리되지 않는 메모리에서 값을 쓸 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory at a specified offset.">관리되지 않는 메모리의 지정된 오프셋 위치에 싱글바이트 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">대상 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary vsli:raw="Writes a character as a 16-bit integer value to unmanaged memory.">관리되지 않는 메모리에 16비트 정수 값으로 문자를 씁니다.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">관리되지 않는 메모리에서 값을 쓸 주소입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary vsli:raw="Writes a 16-bit integer value to unmanaged memory.">관리되지 않는 메모리에 16비트 정수 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">관리되지 않는 메모리에서 값을 쓸 주소입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">관리되지 않는 메모리의 지정된 오프셋 위치에 16비트 부호 있는 정수 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The base address in the native heap to write to.">네이티브 힙에서 값을 쓸 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary vsli:raw="Writes a 16-bit signed integer value into unmanaged memory at a specified offset.">관리되지 않는 메모리의 지정된 오프셋 위치에 16비트 부호 있는 정수 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">관리되지 않는 메모리에서 값을 쓸 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">관리되지 않는 메모리의 지정된 오프셋 위치에 16비트 부호 있는 정수 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">대상 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">관리되지 않는 메모리의 지정된 오프셋 위치에 16비트 부호 있는 정수 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">대상 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value to unmanaged memory.">관리되지 않는 메모리에 부호 있는 32비트 정수 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">관리되지 않는 메모리에서 값을 쓸 주소입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value into unmanaged memory at a specified offset.">관리되지 않는 메모리의 지정된 오프셋 위치에 32비트 부호 있는 정수 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">관리되지 않는 메모리에서 값을 쓸 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value to unmanaged memory at a specified offset.">관리되지 않는 메모리의 지정된 오프셋 위치에 32비트 부호 있는 정수 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">대상 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory at a specified offset.">관리되지 않는 메모리의 지정된 오프셋 위치에 64비트 부호 있는 정수 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write.">데이터를 쓸 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory.">관리되지 않는 메모리에 부호 있는 64비트 정수 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">관리되지 않는 메모리에서 값을 쓸 주소입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory at a specified offset.">관리되지 않는 메모리의 지정된 오프셋 위치에 64비트 부호 있는 정수 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">대상 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a processor native-sized integer value to unmanaged memory at a specified offset.">관리되지 않는 메모리의 지정된 오프셋 위치에 프로세서의 기본 크기로 지정된 정수 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">관리되지 않는 메모리에서 값을 쓸 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Writes a processor native sized integer value into unmanaged memory.">관리되지 않는 메모리에 프로세서의 기본 크기로 지정된 정수 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">관리되지 않는 메모리에서 값을 쓸 주소입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a processor native sized integer value to unmanaged memory.">관리되지 않는 메모리에 프로세서의 기본 크기로 지정된 정수 값을 씁니다.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">대상 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary vsli:raw="Frees a BSTR pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" /> 메서드를 사용하여 할당된 BSTR 포인터를 해제합니다.</summary>
      <param name="s" vsli:raw="The address of the &lt;see langword=&quot;BSTR&quot; /&gt; to free.">해제할 <see langword="BSTR" />의 주소입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" /> 메서드를 사용하여 할당한 관리되지 않는 문자열 포인터를 해제합니다.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">해제할 관리되지 않는 문자열의 주소입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" /> 메서드를 사용하여 할당한 관리되지 않는 문자열 포인터를 해제합니다.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">해제할 관리되지 않는 문자열의 주소입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)">
      <param name="s" vsli:raw="The address of the unmanaged string to free." />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" /> 메서드를 사용하여 할당한 관리되지 않는 문자열 포인터를 해제합니다.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">해제할 관리되지 않는 문자열의 주소입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" /> 메서드를 사용하여 할당한 관리되지 않는 문자열 포인터를 해제합니다.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">해제할 관리되지 않는 문자열의 주소입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary vsli:raw="Indicates how to marshal the data between managed and unmanaged code.">관리 코드와 비관리 코드 간에 데이터를 마샬링하는 방법을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value.">지정된 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 값을 사용하여 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="unmanagedType" vsli:raw="The value the data is to be marshaled as.">데이터를 마샬링할 값입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; enumeration member.">지정된 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 열거형 멤버를 사용하여 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="unmanagedType" vsli:raw="The value the data is to be marshaled as.">데이터를 마샬링할 값입니다.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary vsli:raw="Specifies the element type of the unmanaged &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.LPArray&quot; /&gt; or &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.ByValArray&quot; /&gt;.">관리되지 않는 <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> 또는 <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" />의 요소 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary vsli:raw="Specifies the parameter index of the unmanaged &lt;see langword=&quot;iid_is&quot; /&gt; attribute used by COM.">COM에서 사용하는 관리되지 않는 <see langword="iid_is" /> 특성의 매개 변수 인덱스를 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary vsli:raw="Provides additional information to a custom marshaler.">사용자 지정 마샬러에 추가 정보를 제공합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary vsli:raw="Specifies the fully qualified name of a custom marshaler.">사용자 지정 마샬러의 정규화된 이름을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary vsli:raw="Implements &lt;see cref=&quot;F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&quot; /&gt; as a type.">
        <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" />을 형식으로 구현합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary vsli:raw="Indicates the element type of the &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">
        <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />의 요소 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary vsli:raw="Indicates the user-defined element type of the &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">
        <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />의 사용자 정의 요소 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary vsli:raw="Indicates the number of elements in the fixed-length array or the number of characters (not bytes) in a string to import.">가져올 고정 길이 배열의 요소 개수 또는 문자열의 문자 수(바이트 수가 아님)를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary vsli:raw="Indicates the zero-based parameter that contains the count of array elements, similar to &lt;see langword=&quot;size_is&quot; /&gt; in COM.">COM에 있는 <see langword="size_is" />와 같이 배열 요소의 수가 들어 있고 0부터 시작하는 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value the data is to be marshaled as.">데이터를 마샬링할 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 값을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value the data is to be marshaled as.">데이터를 마샬링할 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary vsli:raw="The exception that is thrown by the marshaler when it encounters a &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; it does not support.">지원되지 않는 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" />가 나타날 때 마샬러에서 throw하는 예외입니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class with default properties.">기본 속성을 사용하여 <see langword="MarshalDirectiveException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class from serialization data.">serialization 데이터로부터 <see langword="MarshalDirectiveException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class with a specified error message.">지정된 오류 메시지를 사용하여 <see langword="MarshalDirectiveException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The error message that specifies the reason for the exception.">예외의 원인을 지정하는 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalDirectiveException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.NativeLibrary">
      <summary vsli:raw="Provides APIs for managing native libraries.">네이티브 라이브러리를 관리하기 위한 API를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)">
      <summary vsli:raw="Frees a loaded library with the specified OS handle, or takes no action if the input handle is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">지정된 OS 핸들을 사용하여 로드된 라이브러리를 해제하거나 입력 핸들이 <see cref="F:System.IntPtr.Zero" />인 경우 아무런 작업도 수행하지 않습니다.</summary>
      <param name="handle" vsli:raw="The native library OS handle to be freed.">해제될 네이티브 라이브러리 OS 핸들입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)">
      <summary vsli:raw="Gets the address of an exported symbol.">내보낸 기호의 주소를 가져옵니다.</summary>
      <param name="handle" vsli:raw="The native library OS handle.">네이티브 라이브러리 OS 핸들입니다.</param>
      <param name="name" vsli:raw="The name of the exported symbol.">내보낸 기호의 이름입니다.</param>
      <returns vsli:raw="The address of the symbol.">기호의 주소입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handle&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handle" /> 또는 <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.EntryPointNotFoundException" vsli:raw="The symbol is not found.">기호를 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)">
      <summary vsli:raw="Provides a simple API for loading a native library that wraps the OS loader and uses default flags.">OS 로더를 래핑하고 기본 플래그를 사용하는 네이티브 라이브러리를 로드하기 위한 간단한 API를 제공합니다.</summary>
      <param name="libraryPath" vsli:raw="The name of the native library to be loaded.">로드할 네이티브 라이브러리의 이름입니다.</param>
      <returns vsli:raw="The OS handle for the loaded native library.">로드된 네이티브 라이브러리의 OS 핸들입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.DllNotFoundException" vsli:raw="The library can't be found.">라이브러리를 찾을 수 없습니다.</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The library is not valid.">라이브러리가 올바르지 않습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
      <summary vsli:raw="Provides a high-level API for loading a native library.">네이티브 라이브러리를 로드하기 위한 상위 수준 API를 제공합니다.</summary>
      <param name="libraryName" vsli:raw="The name of the native library to be loaded.">로드할 네이티브 라이브러리의 이름입니다.</param>
      <param name="assembly" vsli:raw="The assembly loading the native library.">네이티브 라이브러리를 로드하는 어셈블리입니다.</param>
      <param name="searchPath" vsli:raw="The search path.">검색 경로입니다.</param>
      <returns vsli:raw="The OS handle for the loaded library.">로드된 라이브러리의 OS 핸들입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryName&quot; /&gt; or &lt;paramref name=&quot;assembly&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryName" /> 또는 <paramref name="assembly" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; is not a &lt;see langword=&quot;RuntimeAssembly&quot; /&gt;.">
        <paramref name="assembly" />가 <see langword="RuntimeAssembly" />가 아닌 경우</exception>
      <exception cref="T:System.DllNotFoundException" vsli:raw="The library can't be found.">라이브러리를 찾을 수 없습니다.</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The library is not valid.">라이브러리가 올바르지 않습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)">
      <summary vsli:raw="Sets a callback for resolving native library imports from an assembly.">어셈블리에서 네이티브 라이브러리 가져오기를 확인하기 위한 콜백을 설정합니다.</summary>
      <param name="assembly" vsli:raw="The assembly for which the resolver is registered.">해결 프로그램이 등록된 어셈블리입니다.</param>
      <param name="resolver" vsli:raw="The resolver callback to register.">등록할 확인자 콜백입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; or &lt;paramref name=&quot;resolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="assembly" /> 또는 paramref name="resolver" /&gt;는 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A resolver is already set for this assembly.">이 어셈블리에 대한 해결 프로그램이 이미 설정되어 있습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)">
      <summary vsli:raw="Gets the address of an exported symbol and returns a value that indicates whether the method call succeeded.">내보낸 기호의 주소를 가져오고 메서드 호출이 성공했는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="handle" vsli:raw="The native library OS handle.">네이티브 라이브러리 OS 핸들입니다.</param>
      <param name="name" vsli:raw="The name of the exported symbol.">내보낸 기호의 이름입니다.</param>
      <param name="address" vsli:raw="When the method returns, contains the symbol address, if it exists.">메서드가 반환될 때 기호 주소(있는 경우)를 포함합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the address of the exported symbol was found successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메서드가 성공적으로 반환되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handle&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handle" /> 또는 <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)">
      <summary vsli:raw="Provides a simple API for loading a native library and returns a value that indicates whether the operation succeeded.">네이티브 라이브러리를 로드하기 위한 간단한 API를 제공하고 작업이 성공했는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="libraryPath" vsli:raw="The name of the native library to be loaded.">로드할 네이티브 라이브러리의 이름입니다.</param>
      <param name="handle" vsli:raw="When the method returns, the OS handle of the loaded native library.">메서드가 반환될 때 로드된 네이티브 라이브러리의 OS 핸들입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the native library was loaded successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">네이티브 라이브러리가 성공적으로 로드되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)">
      <summary vsli:raw="Provides a high-level API that loads a native library and returns a value that indicates whether the operation succeeded.">네이티브 라이브러리를 로드하고 작업이 성공했는지 여부를 나타내는 값을 반환하는 상위 수준 API를 제공합니다.</summary>
      <param name="libraryName" vsli:raw="The name of the native library to be loaded.">로드할 네이티브 라이브러리의 이름입니다.</param>
      <param name="assembly" vsli:raw="The assembly loading the native library.">네이티브 라이브러리를 로드하는 어셈블리입니다.</param>
      <param name="searchPath" vsli:raw="The search path.">검색 경로입니다.</param>
      <param name="handle" vsli:raw="When the method returns, the OS handle of the loaded native library.">메서드가 반환될 때 로드된 네이티브 라이브러리의 OS 핸들입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the native library was loaded successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">로드 작업이 성공적으로 수행되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; or &lt;paramref name=&quot;assembly&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> 또는 <paramref name="assembly" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; is not a &lt;see langword=&quot;RuntimeAssembly&quot; /&gt;.">
        <paramref name="assembly" />가 <see langword="RuntimeAssembly" />가 아닌 경우</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary vsli:raw="Indicates that a parameter is optional.">매개 변수가 옵션임을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;OptionalAttribute&quot; /&gt; class with default values.">기본값을 사용하여 <see langword="OptionalAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary vsli:raw="Indicates that the HRESULT signature transformation that takes place during COM interop calls should be suppressed.">COM interop 호출 중에 발생하는 HRESULT 또는 <see langword="retval" /> 시그니처 변환을 생략해야 함을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.PreserveSigAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary vsli:raw="Indicates that the attributed assembly is a primary interop assembly.">특성 사용 어셈블리가 주 interop 어셈블리임을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute&quot; /&gt; class with the major and minor version numbers of the type library for which this assembly is the primary interop assembly.">이 어셈블리가 주 interop 어셈블리인 형식 라이브러리의 주 및 부 버전 번호로 <see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="major" vsli:raw="The major version of the type library for which this assembly is the primary interop assembly.">이 어셈블리가 주 interop 어셈블리인 형식 라이브러리의 주 버전입니다.</param>
      <param name="minor" vsli:raw="The minor version of the type library for which this assembly is the primary interop assembly.">이 어셈블리가 주 interop 어셈블리인 형식 라이브러리의 부 버전입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the type library for which this assembly is the primary interop assembly.">이 어셈블리가 주 interop 어셈블리인 형식 라이브러리의 주 버전 번호를 가져옵니다.</summary>
      <returns vsli:raw="The major version number of the type library for which this assembly is the primary interop assembly.">이 어셈블리가 주 interop 어셈블리인 형식 라이브러리의 주 버전 번호입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the type library for which this assembly is the primary interop assembly.">이 어셈블리가 주 interop 어셈블리인 형식 라이브러리의 부 버전 번호를 가져옵니다.</summary>
      <returns vsli:raw="The minor version number of the type library for which this assembly is the primary interop assembly.">이 어셈블리가 주 interop 어셈블리인 형식 라이브러리의 부 버전 번호입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary vsli:raw="Allows the user to specify the ProgID of a class.">사용자가 클래스의 ProgID를 지정할 수 있게 합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ProgIdAttribute&quot; /&gt; with the specified ProgID.">지정된 ProgId를 사용하여 <see langword="ProgIdAttribute" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="progId" vsli:raw="The ProgID to be assigned to the class.">클래스에 할당할 ProgID입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary vsli:raw="Gets the ProgID of the class.">클래스의 ProgID를 가져옵니다.</summary>
      <returns vsli:raw="The ProgID of the class.">클래스의 ProgID입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary vsli:raw="Provides a collection of &lt;see langword=&quot;static&quot; /&gt; methods that return information about the common language runtime environment.">공용 언어 런타임 환경에 대한 정보를 반환하는 <see langword="static" /> 메서드 컬렉션을 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary vsli:raw="Tests whether the specified assembly is loaded in the global assembly cache.">지정된 어셈블리가 전역 어셈블리 캐시에 로드되는지 테스트합니다.</summary>
      <param name="a" vsli:raw="The assembly to test.">테스트할 어셈블리입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the assembly is loaded in the global assembly cache; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">어셈블리가 전역 어셈블리 캐시에 로드되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary vsli:raw="Returns the directory where the common language runtime is installed.">공용 언어 런타임이 설치된 디렉터리를 반환합니다.</summary>
      <returns vsli:raw="A string that contains the path to the directory where the common language runtime is installed.">공용 언어 런타임이 설치된 디렉터리 경로를 포함하는 문자열입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)">
      <summary vsli:raw="Returns the specified interface on the specified class.">지정된 클래스의 지정된 인터페이스를 반환합니다.</summary>
      <param name="clsid" vsli:raw="The identifier for the desired class.">원하는 클래스의 식별자입니다.</param>
      <param name="riid" vsli:raw="The identifier for the desired interface.">원하는 인터페이스의 식별자입니다.</param>
      <returns vsli:raw="An unmanaged pointer to the requested interface.">요청된 인터페이스에 대한 관리되지 않는 포인터입니다.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="IUnknown::QueryInterface failure.">IUnknown::QueryInterface 실패.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)">
      <summary vsli:raw="Returns an instance of a type that represents a COM object by a pointer to its &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">
        <see langword="IUnknown" /> 인터페이스에 대한 포인터를 사용하여 COM 개체를 나타내는 형식의 인스턴스를 반환합니다.</summary>
      <param name="clsid" vsli:raw="The identifier for the desired class.">원하는 클래스의 식별자입니다.</param>
      <param name="riid" vsli:raw="The identifier for the desired interface.">원하는 인터페이스의 식별자입니다.</param>
      <returns vsli:raw="An object that represents the specified unmanaged COM object.">지정된 관리되지 않는 COM 개체를 나타내는 개체입니다.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="IUnknown::QueryInterface failure.">IUnknown::QueryInterface 실패.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary vsli:raw="Gets the version number of the common language runtime that's running the current process.">현재 프로세스에서 실행되는 공용 언어 런타임의 버전 번호를 가져옵니다.</summary>
      <returns vsli:raw="A string containing the version number of the common language runtime.">공용 언어 런타임의 버전 번호를 포함하는 문자열입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary vsli:raw="Gets the path to the system configuration file.">시스템 구성 파일 경로를 가져옵니다.</summary>
      <returns vsli:raw="The path to the system configuration file.">시스템 구성 파일 경로입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary vsli:raw="The exception thrown when the rank of an incoming &lt;see langword=&quot;SAFEARRAY&quot; /&gt; does not match the rank specified in the managed signature.">들어오는 <see langword="SAFEARRAY" />의 순위가 관리되는 시그니처에서 지정된 순위와 일치하지 않을 경우 발생한 예외입니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with default values.">기본값을 사용하여 <see langword="SafeArrayTypeMismatchException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class from serialization data.">serialization 데이터로부터 <see langword="SafeArrayTypeMismatchException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayRankMismatchException&quot; /&gt; class with the specified message.">지정된 메시지를 사용하여 <see langword="SafeArrayRankMismatchException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">예외에 대한 이유를 나타내는 메시지입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeArrayRankMismatchException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary vsli:raw="The exception thrown when the type of the incoming &lt;see langword=&quot;SAFEARRAY&quot; /&gt; does not match the type specified in the managed signature.">들어오는 <see langword="SAFEARRAY" />의 형식이 관리되는 시그니처에서 지정된 형식과 일치하지 않을 경우 발생한 예외입니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with default values.">기본값을 사용하여 <see langword="SafeArrayTypeMismatchException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class from serialization data.">serialization 데이터로부터 <see langword="SafeArrayTypeMismatchException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with the specified message.">지정된 메시지를 사용하여 <see langword="SafeArrayTypeMismatchException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">예외에 대한 이유를 나타내는 메시지입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeArrayTypeMismatchException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeBuffer">
      <summary>읽기 및 쓰기에 사용할 수 있는 제어되는 메모리 버퍼를 제공합니다. 제어되는 버퍼 외부의 메모리에 액세스(언더런 및 오버런)하려고 하면 예외가 발생됩니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 클래스의 새 인스턴스를 만들고 버퍼 핸들이 안정적으로 해제될지 여부를 지정합니다.</summary>
      <param name="ownsHandle">종료 단계에서 핸들을 안정적으로 해제하려면 <see langword="true" />이고, 안정적으로 해제할 수 없게 하려면 <see langword="false" />(권장되지 않음)입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 개체에서 메모리 블록에 대한 포인터를 가져옵니다.</summary>
      <param name="pointer">
        <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 개체 내부에서 포인터를 받기 위해 참조에서 전달하는 바이트 포인터입니다. 이 메서드를 호출하기 전에 이 포인터를 <see langword="null" />로 설정해야 합니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 메서드가 호출되지 않았습니다.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
      <summary>버퍼의 크기(바이트)를 가져옵니다.</summary>
      <returns>메모리 버퍼의 바이트 수입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 메서드가 호출되지 않았습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
      <summary>지정된 요소 수 및 요소 크기를 사용하여 메모리 버퍼의 할당 크기를 지정합니다. <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 인스턴스를 사용하려면 먼저 이 메서드를 호출해야 합니다.</summary>
      <param name="numElements">버퍼의 요소 수입니다.</param>
      <param name="sizeOfEachElement">버퍼의 각 요소 크기입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" />가 0보다 작은 경우
또는
<paramref name="sizeOfEachElement" />가 0보다 작은 경우
또는
<paramref name="numElements" />에 <paramref name="sizeOfEachElement" />를 곱한 크기가 사용 가능한 주소 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
      <summary>메모리 영역의 할당 크기(바이트)를 정의합니다. <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 인스턴스를 사용하려면 먼저 이 메서드를 호출해야 합니다.</summary>
      <param name="numBytes">버퍼의 바이트 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numBytes" />가 0보다 작은 경우
또는
<paramref name="numBytes" />가 사용 가능한 주소 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
      <summary>값 형식의 수를 지정하여 메모리 영역의 할당 크기를 정의합니다. <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 인스턴스를 사용하려면 먼저 이 메서드를 호출해야 합니다.</summary>
      <param name="numElements">메모리를 할당할 값 형식의 요소 수입니다.</param>
      <typeparam name="T">메모리를 할당할 값 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" />가 0보다 작은 경우
또는
<paramref name="numElements" />는 각 요소의 크기를 곱한 것으로 사용 가능한 주소 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
      <summary>메모리의 지정된 오프셋 위치에서 값 형식을 읽습니다.</summary>
      <param name="byteOffset">값 형식을 읽어올 위치입니다. 정렬 문제를 고려해야 할 수 있습니다.</param>
      <typeparam name="T">읽을 값 형식입니다.</typeparam>
      <returns>메모리에서 읽어온 값 형식입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 메서드가 호출되지 않았습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>메모리의 오프셋 시작 위치에서 지정된 수의 값 형식을 읽어서 이를 배열의 인덱스 시작 위치에 씁니다.</summary>
      <param name="byteOffset">읽기를 시작할 위치입니다.</param>
      <param name="array">쓸 출력 배열입니다.</param>
      <param name="index">출력 배열에서 쓰기를 시작할 위치입니다.</param>
      <param name="count">입력 배열에서 읽어서 출력 배열에 쓸 값 형식의 수입니다.</param>
      <typeparam name="T">읽을 값 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우
또는
<paramref name="count" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">배열에서 인덱스를 뺀 길이가 <paramref name="count" />보다 작은 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 메서드가 호출되지 않았습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
      <summary>
        <see cref="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)" /> 메서드에서 가져온 포인터를 해제합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 메서드가 호출되지 않았습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
      <summary>메모리의 지정된 위치에 값 형식을 씁니다.</summary>
      <param name="byteOffset">쓰기를 시작할 위치입니다. 정렬 문제를 고려해야 할 수 있습니다.</param>
      <param name="value">작성할 값입니다.</param>
      <typeparam name="T">쓸 값 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 메서드가 호출되지 않았습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>입력 배열의 지정된 위치에서 시작하여 바이트를 읽어 메모리 위치에 지정된 수의 값 형식을 씁니다.</summary>
      <param name="byteOffset">메모리에서 쓸 위치입니다.</param>
      <param name="array">입력 배열입니다.</param>
      <param name="index">배열에서 읽기를 시작할 오프셋입니다.</param>
      <param name="count">쓸 값 형식의 수입니다.</param>
      <typeparam name="T">쓸 값 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">입력 배열에서 <paramref name="index" />를 뺀 길이가 <paramref name="count" />보다 작습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 메서드가 호출되지 않았습니다.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary vsli:raw="Represents structured exception handling (SEH) errors.">SEH(구조적 예외 처리기) 오류를 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class.">
        <see cref="T:System.Runtime.InteropServices.SEHException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class from serialization data.">serialization 데이터로부터 <see cref="T:System.Runtime.InteropServices.SEHException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class with a specified message.">지정된 메시지를 사용하여 <see cref="T:System.Runtime.InteropServices.SEHException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">예외에 대한 이유를 나타내는 메시지입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Runtime.InteropServices.SEHException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary vsli:raw="Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.">예외를 복구할 수 있는지 여부와 예외가 throw된 위치부터 코드를 계속 진행할 수 있는지 여부를 나타냅니다.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;, because resumable exceptions are not implemented.">다시 시작할 수 있는 예외가 아직 구현되지 않았으므로 항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.StandardOleMarshalObject">
      <summary vsli:raw="Replaces the standard common language runtime (CLR) free-threaded marshaler with the standard OLE STA marshaler.">표준 CLR(공용 언어 런타임) 자유 스레드된 마샬러를 표준 OLE STA 마샬러로 바꿉니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StandardOleMarshalObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.StandardOleMarshalObject&quot; /&gt; class.">
        <see cref="T:System.Runtime.InteropServices.StandardOleMarshalObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary vsli:raw="Provides support for type equivalence.">동일 형식에 대한 지원을 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeIdentifierAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> 클래스의 새 인스턴스를 만듭니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeIdentifierAttribute&quot; /&gt; class with the specified scope and identifier.">지정된 범위와 식별자를 사용하여 <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> 클래스의 새 인스턴스를 만듭니다.</summary>
      <param name="scope" vsli:raw="The first type equivalence string.">첫 번째 동일 형식 문자열입니다.</param>
      <param name="identifier" vsli:raw="The second type equivalence string.">두 번째 동일 형식 문자열입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary vsli:raw="Gets the value of the &lt;paramref name=&quot;identifier&quot; /&gt; parameter that was passed to the &lt;see cref=&quot;M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)&quot; /&gt; constructor.">
        <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> 생성자에 전달된 <paramref name="identifier" /> 매개 변수의 값을 가져옵니다.</summary>
      <returns vsli:raw="The value of the constructor's &lt;paramref name=&quot;identifier&quot; /&gt; parameter.">생성자의 <paramref name="identifier" /> 매개 변수 값입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary vsli:raw="Gets the value of the &lt;paramref name=&quot;scope&quot; /&gt; parameter that was passed to the &lt;see cref=&quot;M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)&quot; /&gt; constructor.">
        <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> 생성자에 전달된 <paramref name="scope" /> 매개 변수의 값을 가져옵니다.</summary>
      <returns vsli:raw="The value of the constructor's &lt;paramref name=&quot;scope&quot; /&gt; parameter.">생성자의 <paramref name="scope" /> 매개 변수 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCFLAGS&quot; /&gt; that were originally imported for this method from the COM type library.">처음에 COM 형식 라이브러리에서 이 메서드로 가져온 <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" />가 들어 있습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibFuncAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value.">지정된 <see langword="TypeLibFuncAttribute" /> 값을 사용하여 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for the attributed method as found in the type library it was imported from.">가져온 형식 라이브러리에 있는 특성 사용 메서드에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 값입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibFuncAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value.">지정된 <see langword="TypeLibFuncAttribute" /> 값을 사용하여 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for the attributed method as found in the type library it was imported from.">가져온 형식 라이브러리에 있는 특성 사용 메서드에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 값입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibFuncAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for this method.">이 메서드에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 값을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for this method.">이 메서드에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see langword=&quot;FUNCFLAGS&quot; /&gt; in the COM type library from where this method was imported.">이 메서드를 가져온 COM 형식 라이브러리에 있는 <see langword="FUNCFLAGS" />의 처음 설정을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable">
      <summary vsli:raw="The function that supports data binding.">데이터 바인딩을 지원하는 함수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultBind">
      <summary vsli:raw="The function that best represents the object. Only one function in a type information can have this attribute.">개체를 가장 잘 표현하는 함수입니다. 형식 정보에 있는 한 함수만 이 특성을 가질 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultCollelem">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.">컴파일러가 "abc" 형식의 "xyz"로 명명된 멤버를 찾는 경우 최적화를 허용합니다. 이러한 멤버를 발견하여 기본 컬렉션의 요소에 대한 접근자 함수로써 플래그하면, 호출은 해당 멤버 함수로 생성됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDisplayBind">
      <summary vsli:raw="The function that is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable&quot; /&gt; must also be set.">사용자에게 바인딩할 수 있는 것으로 표시되는 함수입니다. <see cref="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable" />도 설정되어야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FHidden">
      <summary vsli:raw="The function should not be displayed to the user, although it exists and is bindable.">함수가 존재하고 바인딩 가능하더라도 사용자에게 표시되면 안 됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FImmediateBind">
      <summary vsli:raw="The function is mapped as individual bindable properties.">함수는 별개의 바인딩 가능한 속성으로 매핑됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FNonBrowsable">
      <summary vsli:raw="The property appears in an object browser, but not in a properties browser.">이 속성은 속성 브라우저가 아니라 개체 브라우저에 나타납니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FReplaceable">
      <summary vsli:raw="Tags the interface as having default behaviors.">인터페이스가 기본 동작을 사용하는 것으로 표시합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRequestEdit">
      <summary vsli:raw="When set, any call to a method that sets the property results first in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;.">설정된 경우, 속성을 설정하는 메서드를 호출하면 먼저 <see langword="IPropertyNotifySink::OnRequestEdit" />가 호출됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level functions or functions that type browsers should not display.">이 플래그는 시스템 수준 함수 또는 형식 브라우저가 표시하지 않는 함수를 위한 것입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FSource">
      <summary vsli:raw="The function returns an object that is a source of events.">이 함수는 이벤트의 소스인 개체를 반환합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUiDefault">
      <summary vsli:raw="The type information member is the default member for display in the user interface.">형식 정보 멤버는 사용자 인터페이스에 표시하는 기본 멤버입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUsesGetLastError">
      <summary vsli:raw="The function supports &lt;see langword=&quot;GetLastError&quot; /&gt;.">이 함수는 <see langword="GetLastError" />를 지원합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibImportClassAttribute">
      <summary vsli:raw="Specifies which &lt;see cref=&quot;T:System.Type&quot; /&gt; exclusively uses an interface. This class cannot be inherited.">인터페이스를 단독으로 사용하는 <see cref="T:System.Type" />을 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibImportClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibImportClassAttribute&quot; /&gt; class specifying the &lt;see cref=&quot;T:System.Type&quot; /&gt; that exclusively uses an interface.">인터페이스를 단독으로 사용하는 <see cref="T:System.Runtime.InteropServices.TypeLibImportClassAttribute" />을 지정하여 <see cref="T:System.Type" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="importClass" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">인터페이스를 단독으로 사용하는 <see cref="T:System.Type" /> 개체입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibImportClassAttribute.Value">
      <summary vsli:raw="Gets the name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">인터페이스를 단독으로 사용하는 <see cref="T:System.Type" /> 개체의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">인터페이스를 단독으로 사용하는 <see cref="T:System.Type" /> 개체의 이름입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; that were originally imported for this type from the COM type library.">처음에 COM 형식 라이브러리에서 이 형식으로 가져온 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" />가 들어 있습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value.">지정된 <see langword="TypeLibTypeAttribute" /> 값을 사용하여 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for the attributed type as found in the type library it was imported from.">가져온 형식 라이브러리에 있는 특성 사용 형식에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 값입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value.">지정된 <see langword="TypeLibTypeAttribute" /> 값을 사용하여 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for the attributed type as found in the type library it was imported from.">가져온 형식 라이브러리에 있는 특성 사용 형식에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 값입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibTypeAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for this type.">이 형식에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 값을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for this type.">이 형식에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; in the COM type library from which the type was imported.">이 형식을 가져온 COM 형식 라이브러리에 있는 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" />의 처음 설정을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAggregatable">
      <summary vsli:raw="The class supports aggregation.">이 클래스는 집계를 지원합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAppObject">
      <summary vsli:raw="A type description that describes an &lt;see langword=&quot;Application&quot; /&gt; object.">
        <see langword="Application" /> 개체를 설명하는 형식 설명입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate">
      <summary vsli:raw="Instances of the type can be created by &lt;see langword=&quot;ITypeInfo::CreateInstance&quot; /&gt;.">이 형식의 인스턴스는 <see langword="ITypeInfo::CreateInstance" />가 만들 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FControl">
      <summary vsli:raw="The type is a control from which other types will be derived, and should not be displayed to users.">이 형식은 다른 형식을 파생시킨 컨트롤이며, 사용자에게 보이면 안 됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable">
      <summary vsli:raw="Indicates that the interface derives from &lt;see langword=&quot;IDispatch&quot; /&gt;, either directly or indirectly.">이 인터페이스가 <see langword="IDispatch" />에서 직접적이든 간접적이든 파생됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDual">
      <summary vsli:raw="The interface supplies both &lt;see langword=&quot;IDispatch&quot; /&gt; and V-table binding.">이 인터페이스는 <see langword="IDispatch" />와 vtable 테이블 바인딩을 모두 지원합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FHidden">
      <summary vsli:raw="The type should not be displayed to browsers.">이 형식이 브라우저에 나타나면 안 됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FLicensed">
      <summary vsli:raw="The type is licensed.">이 형식은 허가되었습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FNonExtensible">
      <summary vsli:raw="The interface cannot add members at run time.">이 인터페이스는 런타임에서 멤버를 추가할 수 없습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FOleAutomation">
      <summary vsli:raw="The types used in the interface are fully compatible with Automation, including vtable binding support.">인터페이스에서 사용된 형식은 vtable 바인딩 지원을 포함하여 Automation과 완벽하게 호환됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FPreDeclId">
      <summary vsli:raw="The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.">이 형식은 미리 정의됩니다. 클라이언트 애플리케이션은 이 특성을 가진 개체의 단일 인스턴스를 자동으로 만들어야 합니다. 개체를 가리키는 변수의 이름은 개체의 클래스 이름과 동일합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReplaceable">
      <summary vsli:raw="The object supports &lt;see langword=&quot;IConnectionPointWithDefault&quot; /&gt;, and has default behaviors.">이 개체는 <see langword="IConnectionPointWithDefault" />를 지원하며 기본 동작을 수행합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level types or types that type browsers should not display.">이 플래그는 시스템 수준 형식 또는 형식 브라우저가 표시하지 않는 형식을 위한 것입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReverseBind">
      <summary vsli:raw="Indicates base interfaces should be checked for name resolution before checking child interfaces. This is the reverse of the default behavior.">자식 인터페이스를 확인하기 전에 기본 인터페이에 대해 이름 확인을 수행해야 함을 나타냅니다. 이는 기본 동작과는 반대입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.VARFLAGS&quot; /&gt; that were originally imported for this field from the COM type library.">처음에 COM 형식 라이브러리에서 이 필드로 가져온 <see cref="T:System.Runtime.InteropServices.VARFLAGS" />가 들어 있습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value.">지정된 <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> 값을 사용하여 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for the attributed field as found in the type library it was imported from.">가져온 형식 라이브러리에 있는 특성 사용 필드에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 값입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value.">지정된 <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> 값을 사용하여 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for the attributed field as found in the type library it was imported from.">가져온 형식 라이브러리에 있는 특성 사용 필드에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 값입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVarAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for this field.">이 필드에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 값을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for this field.">이 필드에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see cref=&quot;T:System.Runtime.InteropServices.VARFLAGS&quot; /&gt; in the COM type library from which the variable was imported.">이 변수를 가져온 COM 형식 라이브러리에 있는 <see cref="T:System.Runtime.InteropServices.VARFLAGS" />의 처음 설정을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable">
      <summary vsli:raw="The variable supports data binding.">이 변수는 데이터 바인딩을 지원합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultBind">
      <summary vsli:raw="The variable is the single property that best represents the object. Only one variable in a type info can have this value.">변수는 개체를 가장 잘 표현하는 단일 속성입니다. 형식 정보에 있는 단 하나의 변수만 이 값을 가질 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultCollelem">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.">컴파일러가 "abc" 형식의 "xyz"로 명명된 멤버를 찾는 경우 최적화를 허용합니다. 이러한 멤버를 발견하여 기본 컬렉션의 요소에 대한 접근자 함수로써 플래그하면, 호출은 해당 멤버 함수로 생성됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDisplayBind">
      <summary vsli:raw="The variable is displayed as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable&quot; /&gt; must also be set.">변수는 바인딩할 수 있는 것으로 표시되며, <see cref="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable" />도 설정되어야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FHidden">
      <summary vsli:raw="The variable should not be displayed in a browser, though it exists and is bindable.">이 변수가 존재하고 있고 바인딩할 수 있지만 브라우저에 표시되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FImmediateBind">
      <summary vsli:raw="The variable is mapped as individual bindable properties.">변수는 별개의 바인딩 가능한 속성으로 매핑됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FNonBrowsable">
      <summary vsli:raw="The variable appears in an object browser, but not in a properties browser.">이 변수는 속성 브라우저가 아니라 개체 브라우저에 나타납니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReadOnly">
      <summary vsli:raw="Assignment to the variable should not be allowed.">변수로의 할당은 허용되지 않습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReplaceable">
      <summary vsli:raw="Tags the interface as having default behaviors.">인터페이스가 기본 동작을 사용하는 것으로 표시합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRequestEdit">
      <summary vsli:raw="Indicates that the property supports the COM &lt;see langword=&quot;OnRequestEdit&quot; /&gt; notification.">속성이 COM의 <see langword="OnRequestEdit" /> 알림을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level functions or functions that type browsers should not display.">이 플래그는 시스템 수준 함수 또는 형식 브라우저가 표시하지 않는 함수를 위한 것입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FSource">
      <summary vsli:raw="The variable returns an object that is a source of events.">변수는 이벤트의 소스인 개체를 반환합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FUiDefault">
      <summary vsli:raw="The default display in the user interface.">사용자 인터페이스에 있는 기본 표시입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVersionAttribute">
      <summary vsli:raw="Specifies the version number of an exported type library.">내보낸 형식 라이브러리의 버전 번호를 지정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVersionAttribute.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVersionAttribute&quot; /&gt; class with the major and minor version numbers of the type library.">형식 라이브러리의 주 및 부 버전 번호를 사용하여 <see cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="major" vsli:raw="The major version number of the type library.">형식 라이브러리의 주 버전 번호입니다.</param>
      <param name="minor" vsli:raw="The minor version number of the type library.">형식 라이브러리의 부 버전 번호입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the type library.">형식 라이브러리의 주 버전 번호를 가져옵니다.</summary>
      <returns vsli:raw="The major version number of the type library.">형식 라이브러리의 주 버전 번호입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the type library.">형식 라이브러리의 부 버전 번호를 가져옵니다.</summary>
      <returns vsli:raw="The minor version number of the type library.">형식 라이브러리의 부 버전 번호입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_UNKNOWN&quot; /&gt;.">마샬러가 <see langword="VT_UNKNOWN" />으로 마샬링할 개체를 래핑합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnknownWrapper&quot; /&gt; class with the object to be wrapped.">래핑할 개체를 사용하여 <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="obj" vsli:raw="The object being wrapped.">래핑 중인 개체입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary vsli:raw="Gets the object contained by this wrapper.">이 래퍼에 포함된 개체를 가져옵니다.</summary>
      <returns vsli:raw="The wrapped object.">래핑된 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary vsli:raw="Controls the marshaling behavior of a delegate signature passed as an unmanaged function pointer to or from unmanaged code. This class cannot be inherited.">관리되지 않는 함수 포인터로 비관리 코드에 전달하거나 비관리 코드로부터 전달된 대리자 시그니처의 마샬링 동작을 제어합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute&quot; /&gt; class with the specified calling convention.">지정된 호출 규칙을 사용하여 <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="callingConvention" vsli:raw="The specified calling convention.">지정된 호출 규칙입니다.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary vsli:raw="Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.">유니코드 문자를 ANSI 문자로 변환할 때 가장 적합한 매핑 동작을 활성화 또는 비활성화합니다.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary vsli:raw="Gets the value of the calling convention.">호출 규칙의 값을 가져옵니다.</summary>
      <returns vsli:raw="The value of the calling convention specified by the &lt;see cref=&quot;M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)&quot; /&gt; constructor.">
        <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" /> 생성자에 지정된 호출 규칙의 값입니다.</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary vsli:raw="Indicates how to marshal string parameters to the method, and controls name mangling.">문자열 매개 변수를 메서드로 마샬링하는 방법을 지정하고 이름 변환을 제어합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary vsli:raw="Indicates whether the callee calls the &lt;see langword=&quot;SetLastError&quot; /&gt; Windows API function before returning from the attributed method.">특성 사용 메서드에서 반환하기 전에 호출 수신자가 <see langword="SetLastError" /> Windows API 함수를 호출할지 여부를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI &quot;?&quot; character.">ANSI "?" 문자로 변환되는 매핑할 수 없는 유니코드 문자가 나오면 예외를 throw하거나 throw하지 않습니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>매개 변수나 필드를 비관리 코드로 마샬링하는 방법을 식별합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>싱글 바이트 길이 접두사가 있는 ANSI 문자열입니다. <see cref="T:System.String" /> 데이터 형식에 이 멤버를 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>런타임에서 개체의 형식을 결정하고 해당 형식으로 개체를 마샬링하는 동적 형식입니다. 이 메서드는 플랫폼 호출 메서드에만 유효합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>4바이트 부울 값(<see langword="true" /> != 0, <see langword="false" /> = 0)입니다. Win32 BOOL 형식입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>더블바이트 길이 접두사가 있는 유니코드 문자열입니다. COM의 기본 문자열인 이 멤버는 <see cref="T:System.String" /> 데이터 형식에 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>
        <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" /> 속성이 <see langword="ByValArray" />로 설정된 경우, <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 필드는 배열에 있는 요소의 수를 나타내도록 설정되어야 합니다. <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> 필드는 문자열 형식 간을 구분해야 하는 경우 배열 요소의 <see cref="T:System.Runtime.InteropServices.UnmanagedType" />을 포함할 수도 있습니다. 이 <see cref="T:System.Runtime.InteropServices.UnmanagedType" />은 구조체에서 필드로 나타나는 요소가 있는 배열에만 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>구조체 내에 나타나는 인라인 고정 길이 문자 배열에 사용됩니다. <see langword="ByValTStr" /> 형식은 구조체 내에서 C 스타일의 고정 크기 문자열 (예: <c>char s[5]</c>)처럼 동작합니다. <see langword="ByValTStr" />과 함께 사용되는 문자 형식은 포함하는 구조체에 적용된 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 특성의 <see cref="T:System.Runtime.InteropServices.CharSet" /> 인수에 의해 결정됩니다. 항상 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 필드를 사용하여 배열의 크기를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>통화 형식입니다. <see langword="Decimal" /> 대신 COM 통화 형식으로 10진 값을 마샬링하기 위해 <see cref="T:System.Decimal" />에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>
        <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> 또는 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" /> 필드와 함께 사용될 때 사용자 지정 마샬러 클래스를 지정합니다. <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> 필드는 사용자 지정 마샬러에 추가 정보를 전달하는 데 사용할 수 있습니다. 이 멤버는 모든 참조 형식에 사용할 수 있습니다. 이 멤버는 매개 변수 및 반환 값에만 사용할 수 있습니다. 필드에는 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>
        <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> 또는 <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" />에 연결되어 있으며, 내보낸 형식 라이브러리에서 매개 변수를 HRESULT로 내보내도록 하는 네이티브 형식입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>C 스타일 함수 포인터로 사용할 수 있는 정수입니다. 이 멤버는 <see cref="T:System.Delegate" /> 데이터 형식 또는 <see cref="T:System.Delegate" />에서 상속된 형식에 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.HString">
      <summary>Windows 런타임 문자열입니다. <see cref="T:System.String" /> 데이터 형식에 이 멤버를 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>부호 있는 1바이트 정수입니다. 이 멤버를 사용하여 부울 값을 1바이트 C 스타일 <see langword="bool" />(<see langword="true" /> = 1, <see langword="false" /> = 0)로 변환할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>부호 있는 2바이트 정수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>부호 있는 4바이트 정수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>부호 있는 8바이트 정수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>COM <see langword="IDispatch" /> 포인터(Microsoft Visual Basic 6.0의<see langword="Object" /> )입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IInspectable">
      <summary>Windows 런타임 인터페이스 포인터입니다. <see cref="T:System.Object" /> 데이터 형식에 이 멤버를 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>COM 인터페이스 포인터. 인터페이스의 <see cref="T:System.Guid" />는 클래스 메타데이터에서 얻을 수 있습니다. 정확한 인터페이스 형식 또는 클래스에 적용할 경우 기본 인터페이스 형식을 지정하려면 이 멤버를 사용하세요. 이 멤버를 <see cref="T:System.Object" /> 데이터 형식에 적용하면 <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" />과 같은 동작이 생성됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>COM <see langword="IUnknown" /> 포인터입니다. <see cref="T:System.Object" /> 데이터 형식에 이 멤버를 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>C 스타일 배열의 첫 번째 요소에 대한 포인터입니다. 관리되는 코드에서 관리되지 않는 코드로 마샬링하면 배열의 길이는 관리되는 배열의 길이에 의해 결정됩니다. 비관리 코드에서 관리 코드로 마샬링할 때 배열의 길이는 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 및 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" /> 필드에서 결정되며, 문자열 형식 간을 구분해야 하는 경우 필요에 따라 배열 내 요소의 관리되지 않는 형식이 뒤에 옵니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>싱글 바이트 null로 끝나는 ANSI 문자열입니다. <see cref="T:System.String" /> 및 <see cref="T:System.Text.StringBuilder" /> 데이터 형식에 이 멤버를 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>관리되는 서식이 지정된 클래스를 마샬링할 때 사용하는 C 스타일 구조체에 대한 포인터입니다. 이 메서드는 플랫폼 호출 메서드에만 유효합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>플랫폼 종속 문자열: Windows 98에서는 ANSI, Windows NT 및 Windows XP에서는 유니코드를 지원합니다. <see langword="LPTStr" /> 형식의 문자열은 내보낼 수 없으므로 이 값은 플랫폼 호출에 대해서만 지원되고 COM interop에 대해서는 지원되지 않습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPUTF8Str">
      <summary>UTF-8로 인코딩된 문자열에 대한 포인터입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>2바이트 null로 끝나는 유니코드 문자열입니다. 관리되지 않는 <see langword="CoTaskMemAlloc" /> 함수를 사용하여 문자열을 작성한 경우가 아니면 관리되지 않는 문자열과 함께 <see langword="LPWStr" /> 값을 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>4바이트 부동 소수점 수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>8바이트 부동 소수점 수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>형식, 차수, 관련된 배열 데이터의 범위를 전달하는 자동 기술 배열인 <see langword="SafeArray" />입니다. 이 멤버를 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" /> 필드와 함께 사용하여 기본 요소 형식을 재정의할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>형식이 지정된 관리되는 클래스와 값 형식을 마샬링하는 데 사용되는 VARIANT입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>플랫폼 종속의 부호 있는 정수: 32비트 Windows에서는 4바이트, 64비트 Windows에서는 8바이트입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>플랫폼 종속의 부호 없는 정수: 32비트 Windows에서는 4바이트, 64비트 Windows에서는 8바이트입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>길이 접두사가 있는 플랫폼 종속 <see langword="char" /> 문자열: Windows 98의 ANSI, Windows NT의 유니코드. BSTR과와 비슷한 이 멤버는 거의 사용하지 않습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>부호 없는 1바이트 정수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>부호 없는 2바이트 정수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>부호 없는 4바이트 정수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>부호 없는 8바이트 정수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>2바이트 OLE 정의 VARIANT_BOOL 형식(<see langword="true" /> = -1, <see langword="false" /> = 0)입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>Visual Basic에서 비관리 코드의 문자열을 변경하고 결과를 관리 코드에 반영되도록 하는 데 사용할 수 있는 값입니다. 이 값은 플랫폼 호출에만 지원됩니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary vsli:raw="Indicates how to marshal the array elements when an array is marshaled from managed to unmanaged code as a &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">배열이 관리 코드에서 비관리 코드로 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />로 마샬링될 때 배열 요소가 마샬링될 방법을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;SAFEARRAY&quot; /&gt; pointer.">
        <see langword="SAFEARRAY" /> 포인터를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary vsli:raw="Indicates length prefixed bytes.">길이 접두사가 있는 바이트를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary vsli:raw="Indicates that a blob contains an object.">blob이 개체를 포함하고 있다는 것을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary vsli:raw="Indicates a Boolean value.">부울 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary vsli:raw="Indicates a BSTR string.">BSTR 문자열을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary vsli:raw="Indicates that a value is a reference.">값이 참조임을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary vsli:raw="Indicates a C style array.">C 스타일 배열을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary vsli:raw="Indicates the clipboard format.">클립보드 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary vsli:raw="Indicates a class ID.">클래스 ID를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary vsli:raw="Indicates a currency value.">통화 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary vsli:raw="Indicates a DATE value.">DATE 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;decimal&quot; /&gt; value.">
        <see langword="decimal" /> 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;IDispatch&quot; /&gt; pointer.">
        <see langword="IDispatch" /> 포인터를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary vsli:raw="Indicates that a value was not specified.">값이 지정되지 않았음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary vsli:raw="Indicates an SCODE.">SCODE를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary vsli:raw="Indicates a FILETIME value.">FILETIME 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary vsli:raw="Indicates an HRESULT.">HRESULT를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;char&quot; /&gt; value.">
        <see langword="char" /> 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;short&quot; /&gt; integer.">
        <see langword="short" /> 정수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;long&quot; /&gt; integer.">
        <see langword="long" /> 정수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary vsli:raw="Indicates a 64-bit integer.">64비트 정수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary vsli:raw="Indicates an integer value.">정수 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary vsli:raw="Indicates a null-terminated string.">null로 끝나는 문자열을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary vsli:raw="Indicates a wide string terminated by &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="null" />로 끝나는 와이드 문자열을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary vsli:raw="Indicates a null value, similar to a null value in SQL.">SQL의 null 값과 비슷한 null 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary vsli:raw="Indicates a pointer type.">포인터 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;float&quot; /&gt; value.">
        <see langword="float" /> 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;double&quot; /&gt; value.">
        <see langword="double" /> 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary vsli:raw="Indicates a user defined type.">사용자 정의된 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary vsli:raw="Indicates a SAFEARRAY. Not valid in a VARIANT.">SAFEARRAY를 나타냅니다. VARIANT에서는 유효하지 않습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary vsli:raw="Indicates that the name of a storage follows.">그 뒤에 스토리지 이름이 나온다는 것을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary vsli:raw="Indicates that a storage contains an object.">스토리지가 개체를 포함하고 있음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary vsli:raw="Indicates that the name of a stream follows.">그 뒤에 스트림 이름이 나온다는 것을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary vsli:raw="Indicates that a stream contains an object.">스트림이 개체를 포함하고 있음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;byte&quot; /&gt;.">
        <see langword="byte" />를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt;&lt;see langword=&quot;short&quot; /&gt;.">
        <see langword="unsigned" />
        <see langword="short" />를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt;&lt;see langword=&quot;long&quot; /&gt;.">
        <see langword="unsigned" />
        <see langword="long" />를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary vsli:raw="Indicates an 64-bit unsigned integer.">부호 없는 64비트 정수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt; integer value.">
        <see langword="unsigned" /> 정수 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;IUnknown&quot; /&gt; pointer.">
        <see langword="IUnknown" /> 포인터를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary vsli:raw="Indicates a user defined type.">사용자 정의된 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary vsli:raw="Indicates a VARIANT &lt;see langword=&quot;far&quot; /&gt; pointer.">VARIANT <see langword="far" /> 포인터를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary vsli:raw="Indicates a simple, counted array.">셀 수 있는 단순한 배열을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary vsli:raw="Indicates a C style &lt;see langword=&quot;void&quot; /&gt;.">C 스타일 <see langword="void" />를 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary vsli:raw="Marshals data of type &lt;see langword=&quot;VT_VARIANT | VT_BYREF&quot; /&gt; from managed to unmanaged code. This class cannot be inherited.">
        <see langword="VT_VARIANT | VT_BYREF" /> 형식의 데이터를 관리 코드에서 비관리 코드로 마샬링합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; class for the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; parameter.">지정된 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 매개 변수에 대해 <see cref="T:System.Object" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="obj" vsli:raw="The object to marshal.">마샬링할 개체입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary vsli:raw="Gets the object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; object.">
        <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 개체로 래핑된 개체를 가져옵니다.</summary>
      <returns vsli:raw="The object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; object.">
        <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 개체로 래핑된 개체입니다.</returns>
    </member>
    <member name="T:System.Security.SecureString">
      <summary vsli:raw="Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.">더 이상 필요 없게 되면 컴퓨터 메모리에서 삭제되는 텍스트처럼 기밀을 유지해야 하는 텍스트를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Security.SecureString.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; class.">
        <see cref="T:System.Security.SecureString" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this instance.">이 인스턴스의 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This operation is not supported on this platform.">이 작업이 이 플랫폼에서 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; class from a subarray of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects.  &#xA;  &#xA; This constructor is not CLS-compliant. The CLS-compliant alternative is &lt;see cref=&quot;M:System.Security.SecureString.#ctor&quot; /&gt;.">
        <see cref="T:System.Char" /> 개체의 하위 배열에서 <see cref="T:System.Security.SecureString" /> 클래스의 새 인스턴스를 초기화합니다.
이 생성자는 CLS 규격이 아닙니다. CLS 규격 대체 항목은 <see cref="M:System.Security.SecureString.#ctor" />입니다.</summary>
      <param name="value" vsli:raw="A pointer to an array of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects.">
        <see cref="T:System.Char" /> 개체의 배열에 대한 포인터입니다.</param>
      <param name="length" vsli:raw="The number of elements of &lt;paramref name=&quot;value&quot; /&gt; to include in the new instance.">새 인스턴스에 포함할 <paramref name="value" />의 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; is less than zero or greater than 65,536.">
        <paramref name="length" />가 0보다 작거나 65,536보다 큽니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This operation is not supported on this platform.">이 작업이 이 플랫폼에서 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Security.SecureString.AppendChar(System.Char)">
      <summary vsli:raw="Appends a character to the end of the current secure string.">현재 보안 문자열의 끝에 문자를 추가합니다.</summary>
      <param name="c" vsli:raw="A character to append to this secure string.">이 보안 문자열에 추가할 문자입니다.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">이 보안 문자열이 이미 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">이 보안 문자열이 읽기 전용인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="Performing this operation would make the length of this secure string greater than 65,536 characters.">이 작업을 수행하면 이 보안 문자열의 길이가 65536문자보다 커집니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.Security.SecureString.Clear">
      <summary vsli:raw="Deletes the value of the current secure string.">현재 보안 문자열의 값을 삭제합니다.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">이 보안 문자열이 이미 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">이 보안 문자열이 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Security.SecureString.Copy">
      <summary vsli:raw="Creates a copy of the current secure string.">현재 보안 문자열의 복사본을 만듭니다.</summary>
      <returns vsli:raw="A duplicate of this secure string.">이 보안 문자열의 복제본입니다.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">이 보안 문자열이 이미 삭제된 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.Security.SecureString.Dispose">
      <summary vsli:raw="Releases all resources used by the current &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object.">현재 <see cref="T:System.Security.SecureString" /> 개체에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
      <summary vsli:raw="Inserts a character in this secure string at the specified index position.">이 보안 문자열의 지정한 인덱스 위치에 문자를 삽입합니다.</summary>
      <param name="index" vsli:raw="The index position where parameter &lt;paramref name=&quot;c&quot; /&gt; is inserted.">
        <paramref name="c" /> 매개 변수가 삽입될 인덱스 위치입니다.</param>
      <param name="c" vsli:raw="The character to insert.">삽입할 문자입니다.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">이 보안 문자열이 이미 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">이 보안 문자열이 읽기 전용인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than the length of this secure string.  &#xA;  &#xA; -or-  &#xA;  &#xA; Performing this operation would make the length of this secure string greater than 65,536 characters.">
        <paramref name="index" />가 0보다 작거나 이 보안 문자열의 길이보다 큰 경우
또는
이 작업을 수행하면 이 보안 문자열의 길이가 65536문자보다 커집니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.Security.SecureString.IsReadOnly">
      <summary vsli:raw="Indicates whether this secure string is marked read-only.">이 보안 문자열이 읽기 전용으로 표시되었는지를 나타냅니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this secure string is marked read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 보안 문자열이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">이 보안 문자열이 이미 삭제된 경우</exception>
    </member>
    <member name="P:System.Security.SecureString.Length">
      <summary vsli:raw="Gets the number of characters in the current secure string.">현재 보안 문자열의 문자 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects in this secure string.">이 보안 문자열에 있는 <see cref="T:System.Char" /> 개체의 수입니다.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">이 보안 문자열이 이미 삭제된 경우</exception>
    </member>
    <member name="M:System.Security.SecureString.MakeReadOnly">
      <summary vsli:raw="Makes the text value of this secure string read-only.">이 보안 문자열의 텍스트 값을 읽기 전용으로 만듭니다.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">이 보안 문자열이 이미 삭제된 경우</exception>
    </member>
    <member name="M:System.Security.SecureString.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the character at the specified index position from this secure string.">이 보안 문자열에서 지정한 인덱스 위치의 문자를 제거합니다.</summary>
      <param name="index" vsli:raw="The index position of a character in this secure string.">이 보안 문자열에서 문자의 인덱스 위치입니다.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">이 보안 문자열이 이미 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">이 보안 문자열이 읽기 전용인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than or equal to the length of this secure string.">
        <paramref name="index" />가 0보다 작거나 이 보안 문자열의 길이보다 크거나 같은 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
      <summary vsli:raw="Replaces the existing character at the specified index position with another character.">지정한 인덱스 위치의 기존 문자를 다른 문자로 바꿉니다.</summary>
      <param name="index" vsli:raw="The index position of an existing character in this secure string.">이 보안 문자열에서 기존 문자의 인덱스 위치입니다.</param>
      <param name="c" vsli:raw="A character that replaces the existing character.">기존 문자를 바꾸는 문자입니다.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">이 보안 문자열이 이미 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">이 보안 문자열이 읽기 전용인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than or equal to the length of this secure string.">
        <paramref name="index" />가 0보다 작거나 이 보안 문자열의 길이보다 크거나 같은 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</exception>
    </member>
    <member name="T:System.Security.SecureStringMarshal">
      <summary vsli:raw="Provides a collection of methods for allocating unmanaged memory and copying unmanaged memory blocks.">관리되지 않는 메모리를 할당하고 관리되지 않는 메모리 블록을 복사하는 메서드의 컬렉션을 제공합니다.</summary>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">관리되는 <see cref="T:System.Security.SecureString" /> 개체의 내용을 관리되지 않는 COM 작업 할당자에서 할당된 메모리 블록으로 복사합니다.</summary>
      <param name="s" vsli:raw="The managed object to copy.">복사할 관리되는 개체입니다.</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">관리되지 않는 메모리에서 <paramref name="s" /> 매개 변수가 복사된 주소 또는 null 개체가 제공된 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">관리되는 <see cref="T:System.Security.SecureString" /> 개체의 내용을 관리되지 않는 COM 작업 할당자에서 할당된 메모리 블록으로 복사합니다.</summary>
      <param name="s" vsli:raw="The managed object to copy.">복사할 관리되는 개체입니다.</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">관리되지 않는 메모리에서 <paramref name="s" /> 매개 변수가 복사된 주소 또는 null 개체가 제공된 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">복사할 때 ANSI 형식으로 변환하여 관리되는 <see cref="T:System.Security.SecureString" />의 내용을 관리되지 않는 메모리로 복사합니다.</summary>
      <param name="s" vsli:raw="The managed object to copy.">복사할 관리되는 개체입니다.</param>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied, or 0 if a null object was supplied.">관리되지 않는 메모리에서 <paramref name="s" /> 매개 변수가 복사된 주소이거나 null 개체가 제공된 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into unmanaged memory.">관리되는 <see cref="T:System.Security.SecureString" /> 개체의 콘텐츠를 관리되지 않는 메모리로 복사합니다.</summary>
      <param name="s" vsli:raw="The managed object to copy.">복사할 관리되는 개체입니다.</param>
      <returns vsli:raw="The address, in unmanaged memory, where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is a &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object whose length is 0.">관리되지 않는 메모리에서 <paramref name="s" />가 복사된 주소이거나 <paramref name="s" />가 길이가 0인 <see cref="T:System.Security.SecureString" /> 개체인 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">사용 가능한 메모리가 부족한 경우</exception>
    </member>
  </members>
</doc>
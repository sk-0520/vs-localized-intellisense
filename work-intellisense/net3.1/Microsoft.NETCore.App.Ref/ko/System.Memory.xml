<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Memory</name>
  </assembly>
  <members>
    <member name="T:System.Buffers.ArrayBufferWriter`1">
      <summary>다음에 해당하는 힙 기반, 배열 기반 출력 싱크를 나타냅니다. <typeparam name="T" /> 데이터를 쓸 수 있습니다.</summary>
      <typeparam name="T">이 <see cref="T:System.Buffers.ArrayBufferWriter`1" /> 인스턴스에 있는 항목의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor">
      <summary>기본 초기 용량을 사용하여 데이터를 쓸 수 있는 <see cref="T:System.Buffers.ArrayBufferWriter`1" />의 인스턴스를 만듭니다.</summary>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor(System.Int32)">
      <summary>지정된 초기 용량을 사용하여 데이터를 쓸 수 있는 <see cref="T:System.Buffers.ArrayBufferWriter`1" />의 인스턴스를 만듭니다.</summary>
      <param name="initialCapacity">기본 버퍼를 초기화하는 데 필요한 최소 용량입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCapacity" />가 0보다 작거나 같은 경우</exception>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.Advance(System.Int32)">
      <summary>
        <see cref="T:System.Buffers.IBufferWriter`1" /> 항목이 출력 <paramref name="count" /><see cref="T:System.Span`1" />/에 작성되었음을 <see cref="T:System.Memory`1" />에 알립니다.</summary>
      <param name="count">기록된 항목의 개수입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.InvalidOperationException">메서드 호출은 기본 버퍼의 끝을 지나서 이동하려고 합니다.</exception>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.Capacity">
      <summary>기본 버퍼 내의 총 공간 크기를 가져옵니다.</summary>
      <returns>기본 버퍼의 총 용량입니다.</returns>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.Clear">
      <summary>기본 버퍼에 기록된 데이터를 지웁니다.</summary>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.FreeCapacity">
      <summary>기본 버퍼를 강제로 늘리지 않고 쓸 수 있는 사용 가능한 공간의 크기를 가져옵니다.</summary>
      <returns>기본 버퍼를 강제로 증가 시 키 지 않고 쓸 수 있는 공간입니다.</returns>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.GetMemory(System.Int32)">
      <summary>
        <see cref="T:System.Memory`1" />에 의해 지정된 길이 이상에 작성할 <paramref name="sizeHint" />를 반환합니다.</summary>
      <param name="sizeHint">
        <see cref="T:System.Memory`1" />의 최소 요청 길이입니다.</param>
      <returns>길이가 <see cref="T:System.Memory`1" /> 이상인 <paramref name="sizeHint" />입니다.  <paramref name="sizeHint" />가 제공되지 않거나 0과 같으면 비어 있지 않은 일부 버퍼가 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="sizeHint" />가 음수입니다.</exception>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.GetSpan(System.Int32)">
      <summary>지정된 길이 이상에 작성할 <see cref="T:System.Span`1" />을 반환합니다.</summary>
      <param name="sizeHint">
        <see cref="T:System.Span`1" />의 최소 요청 길이입니다.</param>
      <returns>길이가 <paramref name="sizeHint" /> 이상의 범위입니다. <paramref name="sizeHint" />가 제공되지 않거나 0과 같으면 비어 있지 않은 일부 버퍼가 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="sizeHint" />가 음수입니다.</exception>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenCount">
      <summary>기본 버퍼에 기록된 데이터의 양을 가져옵니다.</summary>
      <returns>내부 버퍼에 기록 되는 데이터의 양입니다.</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenMemory">
      <summary>지금까지 기본 버퍼에 기록된 데이터를 포함하는 <see cref="T:System.ReadOnlyMemory`1" />을 가져옵니다.</summary>
      <returns>내부 버퍼에 기록 되는 데이터입니다.</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenSpan">
      <summary>지금까지 기본 버퍼에 기록된 데이터를 포함하는 <see cref="T:System.ReadOnlySpan`1" />을 가져옵니다.</summary>
      <returns>내부 버퍼에 기록 되는 데이터입니다.</returns>
    </member>
    <member name="T:System.Buffers.Binary.BinaryPrimitives">
      <summary>특정 endian을 사용하여 기본 형식으로 바이트를 읽습니다.</summary>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int16" />을 big endian으로 읽습니다.</summary>
      <param name="source">읽을 읽기 전용 범위입니다.</param>
      <returns>Big endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" />이 너무 작아 <see cref="T:System.Int16" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int16" />을 little endian으로 읽습니다.</summary>
      <param name="source">읽을 읽기 전용 범위입니다.</param>
      <returns>Little endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" />이 너무 작아 <see cref="T:System.Int16" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int32" />을 big endian으로 읽습니다.</summary>
      <param name="source">읽을 읽기 전용 범위입니다.</param>
      <returns>Big endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" />이 너무 작아 <see cref="T:System.Int32" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int32" />을 little endian으로 읽습니다.</summary>
      <param name="source">읽을 읽기 전용 범위입니다.</param>
      <returns>Little endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" />이 너무 작아 <see cref="T:System.Int32" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int64" />을 big endian으로 읽습니다.</summary>
      <param name="source">읽을 읽기 전용 범위입니다.</param>
      <returns>Big endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" />이 너무 작아 <see cref="T:System.Int64" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int64" />을 little endian으로 읽습니다.</summary>
      <param name="source">읽을 읽기 전용 범위입니다.</param>
      <returns>Little endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" />이 너무 작아 <see cref="T:System.Int64" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt16" />을 big endian으로 읽습니다.</summary>
      <param name="source">읽을 읽기 전용 범위입니다.</param>
      <returns>Big endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" />이 너무 작아 <see cref="T:System.UInt16" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt16" />을 little endian으로 읽습니다.</summary>
      <param name="source">읽을 읽기 전용 범위입니다.</param>
      <returns>Little endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" />이 너무 작아 <see cref="T:System.UInt16" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt32" />을 big endian으로 읽습니다.</summary>
      <param name="source">읽을 읽기 전용 범위입니다.</param>
      <returns>Big endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" />이 너무 작아 <see cref="T:System.UInt32" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt32" />을 little endian으로 읽습니다.</summary>
      <param name="source">읽을 바이트의 읽기 전용 범위입니다.</param>
      <returns>Little endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" />이 너무 작아 <see cref="T:System.UInt32" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt64" />을 big endian으로 읽습니다.</summary>
      <param name="source">읽을 바이트의 읽기 전용 범위입니다.</param>
      <returns>Big endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" />이 너무 작아 <see cref="T:System.UInt64" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt64" />을 little endian으로 읽습니다.</summary>
      <param name="source">읽을 바이트의 읽기 전용 범위입니다.</param>
      <returns>Little endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" />이 너무 작아 <see cref="T:System.UInt64" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Byte)">
      <summary>지정된 <see cref="T:System.Byte" /> 값의 endian 스왑을 수행하여 기본 값을 역순으로 바꿉니다. 그러면 <see cref="T:System.Byte" />에 대해 아무 작업도 수행하지 않습니다.</summary>
      <param name="value">역순으로 바꿀 값입니다.</param>
      <returns>수정되지 않은 전달된 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int16)">
      <summary>지정된 <see cref="T:System.Int16" /> 값의 endian 스왑을 수행하여 기본 값을 역순으로 바꿉니다.</summary>
      <param name="value">역순으로 바꿀 값입니다.</param>
      <returns>역순된 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int32)">
      <summary>지정된 <see cref="T:System.Int32" /> 값의 endian 스왑을 수행하여 기본 값을 역순으로 바꿉니다.</summary>
      <param name="value">역순으로 바꿀 값입니다.</param>
      <returns>역순된 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int64)">
      <summary>지정된 <see cref="T:System.Int64" /> 값의 endian 스왑을 수행하여 기본 값을 역순으로 바꿉니다.</summary>
      <param name="value">역순으로 바꿀 값입니다.</param>
      <returns>역순된 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.SByte)">
      <summary>지정된 <see cref="T:System.SByte" /> 값의 endian 스왑을 수행하여 기본 값을 역순으로 바꿉니다. 그러면 <see cref="T:System.SByte" />에 대해 아무 작업도 수행하지 않습니다.</summary>
      <param name="value">역순으로 바꿀 값입니다.</param>
      <returns>수정되지 않은 전달된 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt16)">
      <summary>지정된 <see cref="T:System.UInt16" /> 값의 endian 스왑을 수행하여 기본 값을 역순으로 바꿉니다.</summary>
      <param name="value">역순으로 바꿀 값입니다.</param>
      <returns>역순된 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt32)">
      <summary>지정된 <see cref="T:System.UInt32" /> 값의 endian 스왑을 수행하여 기본 값을 역순으로 바꿉니다.</summary>
      <param name="value">역순으로 바꿀 값입니다.</param>
      <returns>역순된 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt64)">
      <summary>지정된 <see cref="T:System.UInt64" /> 값의 endian 스왑을 수행하여 기본 값을 역순으로 바꿉니다.</summary>
      <param name="value">역순으로 바꿀 값입니다.</param>
      <returns>역순된 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16BigEndian(System.ReadOnlySpan{System.Byte},System.Int16@)">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int16" />을 big endian으로 읽습니다.</summary>
      <param name="source">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 big endian으로 읽은 값입니다.</param>
      <returns>범위가 <see langword="true" />을 포함할 정도로 충분히 크면 <see cref="T:System.Int16" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.Int16@)">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int16" />을 little endian으로 읽습니다.</summary>
      <param name="source">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 little endian으로 읽은 값입니다.</param>
      <returns>범위가 <see langword="true" />을 포함할 정도로 충분히 크면 <see cref="T:System.Int16" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32BigEndian(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int32" />을 big endian으로 읽습니다.</summary>
      <param name="source">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 big endian으로 읽은 값입니다.</param>
      <returns>범위가 <see langword="true" />을 포함할 정도로 충분히 크면 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int32" />을 little endian으로 읽습니다.</summary>
      <param name="source">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 little endian으로 읽은 값입니다.</param>
      <returns>범위가 <see langword="true" />을 포함할 정도로 충분히 크면 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64BigEndian(System.ReadOnlySpan{System.Byte},System.Int64@)">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int64" />을 big endian으로 읽습니다.</summary>
      <param name="source">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 big endian으로 읽은 값입니다.</param>
      <returns>범위가 <see langword="true" />을 포함할 정도로 충분히 크면 <see cref="T:System.Int64" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.Int64@)">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int64" />을 little endian으로 읽습니다.</summary>
      <param name="source">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 little endian으로 읽은 값입니다.</param>
      <returns>범위가 <see langword="true" />을 포함할 정도로 충분히 크면 <see cref="T:System.Int64" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16BigEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt16" />을 big endian으로 읽습니다.</summary>
      <param name="source">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 big endian으로 읽은 값입니다.</param>
      <returns>범위가 <see langword="true" />를 포함할 정도로 충분히 크면 <see cref="T:System.UInt16" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt16" />을 little endian으로 읽습니다.</summary>
      <param name="source">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 little endian으로 읽은 값입니다.</param>
      <returns>범위가 <see langword="true" />를 포함할 정도로 충분히 크면 <see cref="T:System.UInt16" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32BigEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt32" />을 big endian으로 읽습니다.</summary>
      <param name="source">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 big endian으로 읽은 값입니다.</param>
      <returns>범위가 <see langword="true" />를 포함할 정도로 충분히 크면 <see cref="T:System.UInt32" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt32" />을 little endian으로 읽습니다.</summary>
      <param name="source">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 little endian으로 읽은 값입니다.</param>
      <returns>범위가 <see langword="true" />를 포함할 정도로 충분히 크면 <see cref="T:System.UInt32" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64BigEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt64" />을 big endian으로 읽습니다.</summary>
      <param name="source">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 big endian으로 읽은 값입니다.</param>
      <returns>범위가 <see langword="true" />를 포함할 정도로 충분히 크면 <see cref="T:System.UInt64" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)">
      <summary>바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt64" />을 little endian으로 읽습니다.</summary>
      <param name="source">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 little endian으로 읽은 값입니다.</param>
      <returns>범위가 <see langword="true" />를 포함할 정도로 충분히 크면 <see cref="T:System.UInt64" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16BigEndian(System.Span{System.Byte},System.Int16)">
      <summary>
        <see cref="T:System.Int16" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <returns>범위가 <see langword="true" />을 포함할 정도로 충분히 크면 <see cref="T:System.Int16" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16LittleEndian(System.Span{System.Byte},System.Int16)">
      <summary>
        <see cref="T:System.Int16" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <returns>범위가 <see langword="true" />을 포함할 정도로 충분히 크면 <see cref="T:System.Int16" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32BigEndian(System.Span{System.Byte},System.Int32)">
      <summary>
        <see cref="T:System.Int32" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <returns>범위가 <see langword="true" />을 포함할 정도로 충분히 크면 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32LittleEndian(System.Span{System.Byte},System.Int32)">
      <summary>
        <see cref="T:System.Int32" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <returns>범위가 <see langword="true" />을 포함할 정도로 충분히 크면 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64BigEndian(System.Span{System.Byte},System.Int64)">
      <summary>
        <see cref="T:System.Int64" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <returns>범위가 <see langword="true" />을 포함할 정도로 충분히 크면 <see cref="T:System.Int64" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64LittleEndian(System.Span{System.Byte},System.Int64)">
      <summary>
        <see cref="T:System.Int64" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <returns>범위가 <see langword="true" />을 포함할 정도로 충분히 크면 <see cref="T:System.Int64" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)">
      <summary>
        <see cref="T:System.UInt16" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <returns>범위가 <see langword="true" />를 포함할 정도로 충분히 크면 <see cref="T:System.UInt16" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)">
      <summary>
        <see cref="T:System.UInt16" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <returns>범위가 <see langword="true" />를 포함할 정도로 충분히 크면 <see cref="T:System.UInt16" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)">
      <summary>
        <see cref="T:System.UInt32" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <returns>범위가 <see langword="true" />를 포함할 정도로 충분히 크면 <see cref="T:System.UInt32" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)">
      <summary>
        <see cref="T:System.UInt32" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <returns>범위가 <see langword="true" />를 포함할 정도로 충분히 크면 <see cref="T:System.UInt32" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)">
      <summary>
        <see cref="T:System.UInt64" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <returns>범위가 <see langword="true" />를 포함할 정도로 충분히 크면 <see cref="T:System.UInt64" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)">
      <summary>
        <see cref="T:System.UInt64" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <returns>범위가 <see langword="true" />를 포함할 정도로 충분히 크면 <see cref="T:System.UInt64" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16BigEndian(System.Span{System.Byte},System.Int16)">
      <summary>
        <see cref="T:System.Int16" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.Int16" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16LittleEndian(System.Span{System.Byte},System.Int16)">
      <summary>
        <see cref="T:System.Int16" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.Int16" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32BigEndian(System.Span{System.Byte},System.Int32)">
      <summary>
        <see cref="T:System.Int32" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.Int32" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32LittleEndian(System.Span{System.Byte},System.Int32)">
      <summary>
        <see cref="T:System.Int32" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.Int32" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64BigEndian(System.Span{System.Byte},System.Int64)">
      <summary>
        <see cref="T:System.Int64" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.Int64" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64LittleEndian(System.Span{System.Byte},System.Int64)">
      <summary>
        <see cref="T:System.Int64" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.Int64" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)">
      <summary>
        <see cref="T:System.UInt16" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.UInt16" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)">
      <summary>
        <see cref="T:System.UInt16" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.UInt16" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)">
      <summary>
        <see cref="T:System.UInt32" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.UInt32" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)">
      <summary>
        <see cref="T:System.UInt32" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.UInt32" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)">
      <summary>
        <see cref="T:System.UInt64" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.UInt64" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)">
      <summary>
        <see cref="T:System.UInt64" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.UInt64" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="T:System.Buffers.BuffersExtensions">
      <summary>
        <see cref="T:System.Buffers.ReadOnlySequence`1" />에 대한 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.CopyTo``1(System.Buffers.ReadOnlySequence{``0},System.Span{``0})">
      <summary>
        <see cref="T:System.Buffers.ReadOnlySequence`1" />을 지정된 <see cref="T:System.Span`1" />에 복사합니다.</summary>
      <param name="source">소스 <see cref="T:System.Buffers.ReadOnlySequence`1" />입니다.</param>
      <param name="destination">대상 <see cref="T:System.Span`1" />입니다.</param>
      <typeparam name="T">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />항목의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.PositionOf``1(System.Buffers.ReadOnlySequence{``0},``0)">
      <summary>
        <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 처음으로 나오는 <paramref name="item" />의 위치를 반환합니다.</summary>
      <param name="source">소스 <see cref="T:System.Buffers.ReadOnlySequence`1" />입니다.</param>
      <param name="value">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 찾을 항목입니다.</param>
      <typeparam name="T">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />항목의 형식입니다.</typeparam>
      <returns>
        <see cref="M:System.SequencePosition.GetInteger" /> 메서드가 처음으로 나오는 <paramref name="item" />의 위치를 반환하는 개체 또는 <see langword="Nullable&lt;SequencePosition&gt;.HasValue" /> 속성이 <see langword="false" />인 개체입니다.</returns>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.ToArray``1(System.Buffers.ReadOnlySequence{``0})">
      <summary>
        <see cref="T:System.Buffers.ReadOnlySequence`1" />을 배열로 변환합니다.</summary>
      <param name="sequence">배열로 변환할 읽기 전용 시퀀스입니다.</param>
      <typeparam name="T">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />항목의 형식입니다.</typeparam>
      <returns>현재 읽기 전용 시퀀스에서 데이터를 포함하는 배열입니다.</returns>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.Write``1(System.Buffers.IBufferWriter{``0},System.ReadOnlySpan{``0})">
      <summary>
        <paramref name="value" />라는 콘텐츠를 <paramref name="writer" />로 작성합니다.</summary>
      <param name="writer">
        <paramref name="value" />를 작성할 버퍼 기록기입니다.</param>
      <param name="value">
        <paramref name="writer" />에 작성될 읽기 전용 범위입니다.</param>
      <typeparam name="T">
        <see cref="T:System.ReadOnlySpan`1" />항목의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="writer" />이 <paramref name="value" />보다 짧습니다.</exception>
    </member>
    <member name="T:System.Buffers.IBufferWriter`1">
      <summary>
        <typeparamref name="T" /> 데이터를 쓸 수 있는 출력 싱크를 나타냅니다.</summary>
      <typeparam name="T">에 있는 <see cref="T:System.Buffers.IBufferWriter`1" />항목의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.Advance(System.Int32)">
      <summary>
        <paramref name="count" /> 데이터 항목이 <see cref="T:System.Span`1" /> 또는 <see cref="T:System.Memory`1" /> 출력에 작성되었음을 <see cref="T:System.Buffers.IBufferWriter`1" />에 알립니다.</summary>
      <param name="count">
        <see cref="T:System.Span`1" /> 또는 <see cref="T:System.Memory`1" />에 작성된 데이터 항목의 수입니다.</param>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.GetMemory(System.Int32)">
      <summary>요청된 크기(<paramref name="sizeHint" />로 지정됨) 이상인 작성할 <see cref="T:System.Memory`1" />을 반환합니다.</summary>
      <param name="sizeHint">반환되는 <see cref="T:System.Memory`1" />의 최소 길이입니다. 0인 경우 비어 있지 않은 버퍼가 반환됩니다.</param>
      <returns>크기가 <paramref name="sizeHint" /> 이상인 <see cref="T:System.Memory`1" />입니다. <paramref name="sizeHint" />가 0인 경우 비어 있지 않은 버퍼를 반환합니다.</returns>
      <exception cref="T:System.OutOfMemoryException">요청된 버퍼 크기를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.GetSpan(System.Int32)">
      <summary>요청된 크기(<paramref name="sizeHint" />로 지정됨) 이상인 작성할 <see cref="T:System.Span`1" />을 반환합니다.</summary>
      <param name="sizeHint">반환되는 <see cref="T:System.Span`1" />의 최소 길이입니다. 0인 경우 비어 있지 않은 버퍼가 반환됩니다.</param>
      <returns>크기가 <paramref name="sizeHint" /> 이상인 <see cref="T:System.Span`1" />입니다. <paramref name="sizeHint" />가 0인 경우 비어 있지 않은 버퍼를 반환합니다.</returns>
    </member>
    <member name="T:System.Buffers.MemoryPool`1">
      <summary>메모리 블록의 풀을 나타냅니다.</summary>
      <typeparam name="T">메모리 풀에 있는 항목의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.#ctor">
      <summary>메모리 풀의 인스턴스를 새로 만듭니다.</summary>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Dispose">
      <summary>메모리 풀에서 사용된 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Dispose(System.Boolean)">
      <summary>메모리 풀에서 사용된 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 로 설정합니다.</param>
    </member>
    <member name="P:System.Buffers.MemoryPool`1.MaxBufferSize">
      <summary>이 풀에서 지원되는 최대 버퍼 크기를 가져옵니다.</summary>
      <returns>이 풀에서 지 원하는 최대 버퍼 크기입니다.</returns>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Rent(System.Int32)">
      <summary>최소한 T의 <paramref name="minBufferSize" /> 요소를 보유할 수 있는 메모리 블록을 반환합니다.</summary>
      <param name="minBufferSize">메모리 풀에서 보유할 수 있는 <typeparamref name="T" /> 요소의 최소 수입니다. -1 값은 풀의 기본 크기로 설정된 메모리 풀을 반환합니다.</param>
      <returns>최소한 T의 <paramref name="minBufferSize" /> 요소를 보유할 수 있는 메모리 블록입니다.</returns>
    </member>
    <member name="P:System.Buffers.MemoryPool`1.Shared">
      <summary>배열을 기반으로 하는 메모리 풀의 싱글톤 인스턴스를 가져옵니다.</summary>
      <returns>메모리 풀의 singleton 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Buffers.OperationStatus">
      <summary>인접하지 않은 여러 버퍼에 포함된 입력을 처리하도록 지원하는 범위 기반 작업에서 반환될 수 있는 값을 정의합니다.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.DestinationTooSmall">
      <summary>입력은 최대한 대상 버퍼에 맞게 부분적으로 처리됩니다. 호출자는 대상 버퍼를 확대하고, 버퍼를 적절하게 분할하고, 다시 시도할 수 있습니다.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.Done">
      <summary>전체 입력 버퍼가 처리되면 작업이 완료됩니다.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.InvalidData">
      <summary>처리할 수 없는 잘못된 바이트가 포함된 입력입니다. 입력이 부분적으로 처리되는 경우 대상에는 일부 결과가 포함됩니다. 이렇게 하면 입력에 추가된 추가 데이터로 인해 잘못된 시퀀스가 유효해질 수 없게 됩니다.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.NeedMoreData">
      <summary>입력은 소비될 수 있는 입력의 유효한 최신 청크까지 부분적으로 처리됩니다. 호출자는 더 많은 데이터를 사용하여 처리되지 않은 나머지 입력을 연결하고, 버퍼를 적절하게 분할하고, 다시 시도할 수 있습니다.</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySequence`1">
      <summary>여러 개의 <typeparamref name="T" />를 순차적으로 읽을 수 있는 시퀀스를 나타냅니다.</summary>
      <typeparam name="T">읽기 전용 시퀀스의 요소 형식입니다.</typeparam>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(`0[])">
      <summary>
        <paramref name="array" />에서 <see cref="T:System.Buffers.ReadOnlySequence`1" />의 인스턴스를 만듭니다.</summary>
      <param name="array">읽기 전용 시퀀스를 만들 원본 배열입니다.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>배열 섹션에서 <see cref="T:System.Buffers.ReadOnlySequence`1" />의 인스턴스를 만듭니다.</summary>
      <param name="array">읽기 전용 시퀀스를 만들 원본 배열입니다.</param>
      <param name="start">읽기 전용 시퀀스에 포함할 배열 중 첫 번째 요소의 인덱스(0부터 시작)입니다.</param>
      <param name="length">읽기 전용 시퀀스에 포함할 요소 수입니다.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(System.Buffers.ReadOnlySequenceSegment{`0},System.Int32,System.Buffers.ReadOnlySequenceSegment{`0},System.Int32)">
      <summary>시작과 끝 세그먼트 및 해당하는 인덱스에 의해 표시된 연결 메모리 목록에서 <see cref="T:System.Buffers.ReadOnlySequence`1" />의 인스턴스를 만듭니다.</summary>
      <param name="startSegment">연결된 메모리 목록의 초기 노드입니다.</param>
      <param name="startIndex">
        <paramref name="startSegment" /> 내 시퀀스의 시작 위치입니다.</param>
      <param name="endSegment">연결된 메모리 목록의 마지막 노드입니다.</param>
      <param name="endIndex">
        <paramref name="endSegment" /> 내에서 시퀀스의 끝 위치입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startSegment" /> 또는 <paramref name="endSegment" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startSegment" />가 <paramref name="endSegment" />와 다른 경우에도, 실행 중인 <paramref name="startSegment" />의 인덱스는 실행 중인 <paramref name="endSegment" />의 인덱스보다 큽니다.
또는
<paramref name="startSegment" />는 <paramref name="endSegment" />와 같지만 <paramref name="endIndex" />는 <paramref name="startIndex" />보다 작습니다.
또는
<paramref name="startIndex" />는 <paramref name="startSegment" />의 기본 메모리 블록의 길이보다 큽니다.</exception>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(System.ReadOnlyMemory{`0})">
      <summary>
        <see cref="T:System.ReadOnlyMemory`1" />에서 <see cref="T:System.Buffers.ReadOnlySequence`1" />의 인스턴스를 만듭니다.</summary>
      <param name="memory">
        <typeparamref name="T" /> 형식 요소 메모리의 읽기 전용 블록입니다.</param>
    </member>
    <member name="F:System.Buffers.ReadOnlySequence`1.Empty">
      <summary>빈 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 반환합니다.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.End">
      <summary>
        <see cref="T:System.Buffers.ReadOnlySequence`1" />의 끝에 배치합니다.</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySequence`1.Enumerator">
      <summary>
        <see cref="T:System.Buffers.ReadOnlySequence`1" />에 대한 열거자를 나타냅니다.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Enumerator.#ctor(System.Buffers.ReadOnlySequence{`0}@)">
      <summary>열거자를 초기화합니다.</summary>
      <param name="sequence">열거할 <see cref="T:System.Buffers.ReadOnlySequence`1" />입니다.</param>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Enumerator.Current">
      <summary>현재 <see cref="T:System.ReadOnlyMemory`1" />를 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.ReadOnlyMemory`1" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Enumerator.MoveNext">
      <summary>
        <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 다음 <see cref="T:System.ReadOnlyMemory`1" />로 이동합니다.</summary>
      <returns>열거자가 다음 항목으로 성공적으로 이동한 경우 <see langword="true" />이며, 시퀀스의 끝에 도달한 경우에는 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.First">
      <summary>첫 번째 세그먼트에서 <see cref="T:System.ReadOnlyMemory`1" />을 가져옵니다.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.FirstSpan">
      <summary>첫 번째 세그먼트에서 <see cref="T:System.ReadOnlySpan`1" />을 가져옵니다.</summary>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetEnumerator">
      <summary>
        <see cref="T:System.Buffers.ReadOnlySequence`1" />에 대한 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Buffers.ReadOnlySequence`1" />에 대한 열거자를 반환합니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetPosition(System.Int64)">
      <summary>시퀀스의 시작에서 <paramref name="offset" />의 <see cref="T:System.SequencePosition" />을 새로 반환합니다.</summary>
      <param name="offset">시퀀스 시작의 오프셋입니다.</param>
      <returns>시퀀스 시작의 지정된 <paramref name="offset" />에서 시작되는 시퀀스 위치를 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetPosition(System.Int64,System.SequencePosition)">
      <summary>
        <paramref name="origin" /> 위치의 지정된 오프셋에서 시작하는 새 <see cref="T:System.SequencePosition" />을 반환합니다.</summary>
      <param name="offset">지정된 <paramref name="origin" /> 시퀀스 위치의 오프셋입니다.</param>
      <param name="origin">오프셋을 시작할 지점을 나타내는 시퀀스 위치입니다.</param>
      <returns>지정된 <paramref name="origin" /> 위치 개체의 <paramref name="offset" /> 위치에서 시작하는 시퀀스 위치를 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.IsEmpty">
      <summary>
        <see cref="T:System.Buffers.ReadOnlySequence`1" />가 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.IsSingleSegment">
      <summary>
        <see cref="T:System.Buffers.ReadOnlySequence`1" />에 <see cref="T:System.ReadOnlyMemory`1" /> 단일 세그먼트가 포함되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>읽기 전용 시퀀스가 비어 있으면 <see langword="true" />이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Length">
      <summary>
        <see cref="T:System.Buffers.ReadOnlySequence`1" />의 길이를 가져옵니다.</summary>
      <returns>읽기 전용 시퀀스의 길이입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int32,System.Int32)">
      <summary>
        <paramref name="length" /> 항목을 사용하여 <paramref name="start" />에서 시작하는 현재 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start">이 조각을 시작할 인덱스입니다.</param>
      <param name="length">조각의 길이입니다.</param>
      <returns>
        <paramref name="start" /> 인덱스에서 시작하는 현재 범위에서 <paramref name="length" /> 요소로 이루어진 조각입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int32,System.SequencePosition)">
      <summary>
        <paramref name="start" />에서 시작하여 <paramref name="end" />(제외)로 끝나는 현재 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start">이 조각을 시작할 인덱스입니다.</param>
      <param name="end">조각의 끝(제외) <see cref="T:System.SequencePosition" />입니다.</param>
      <returns>현재 읽기 전용 시퀀스에서 <paramref name="end" /> 시퀀스 위치를 포함하지 않고 <paramref name="start" /> 인덱스의 항목으로 이루어진 조각입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64)">
      <summary>지정된 인덱스에서 시작하여 읽기 전용 시퀀스의 끝까지 이어지도록 현재 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start">이 조각을 시작할 시작 인덱스입니다.</param>
      <returns>인덱스 <paramref name="start" />에서 시작하여 현재 읽기 전용 시퀀스의 끝까지 계속되는 슬라이스입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64,System.Int64)">
      <summary>
        <paramref name="length" /> 항목을 사용하여 <paramref name="start" />에서 시작하도록 지정된 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start">이 조각을 시작할 인덱스입니다.</param>
      <param name="length">조각의 길이입니다.</param>
      <returns>
        <paramref name="start" /> 인덱스에서 시작하는 현재 범위에서 <paramref name="length" /> 요소로 이루어진 조각입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64,System.SequencePosition)">
      <summary>
        <paramref name="start" />에서 시작하여 <paramref name="end" />(제외)로 끝나는 현재 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start">이 조각을 시작할 인덱스입니다.</param>
      <param name="end">조각의 끝(제외)입니다.</param>
      <returns>현재 읽기 전용 시퀀스에서 <paramref name="end" /> 시퀀스 위치를 포함하지 않고 <paramref name="start" /> 인덱스의 항목으로 이루어진 조각입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition)">
      <summary>지정된 시퀀스 위치에서 시작하여 읽기 전용 시퀀스의 끝까지 이어지도록 현재 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start">이 조각을 시작할 시작(포괄) <see cref="T:System.SequencePosition" />입니다.</param>
      <returns>시퀀스 위치 <paramref name="start" />에서 시작하여 현재 읽기 전용 시퀀스의 끝까지 계속되는 슬라이스입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.Int32)">
      <summary>
        <paramref name="length" /> 항목을 사용하여 <paramref name="start" />에서 시작하는 현재 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start">이 조각을 시작할 시작(포괄) <see cref="T:System.SequencePosition" />입니다.</param>
      <param name="length">조각의 길이입니다.</param>
      <returns>시퀀스 위치<paramref name="start" />에서 시작하는 현재 인스턴스의 <paramref name="length" /> 요소로 이루어진 조각입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.Int64)">
      <summary>
        <paramref name="length" /> 항목을 사용하여 <paramref name="start" />에서 시작하는 현재 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start">이 조각을 시작할 시작(포괄) <see cref="T:System.SequencePosition" />입니다.</param>
      <param name="length">조각의 길이입니다.</param>
      <returns>시퀀스 위치<paramref name="start" />에서 시작하는 현재 인스턴스의 <paramref name="length" /> 요소로 이루어진 조각입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.SequencePosition)">
      <summary>
        <paramref name="start" />에서 시작하여 <paramref name="end" />(제외)로 끝나는 현재 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start">이 조각을 시작할 시작(포괄) <see cref="T:System.SequencePosition" />입니다.</param>
      <param name="end">조각의 끝(제외) <see cref="T:System.SequencePosition" />입니다.</param>
      <returns>현재 읽기 전용 시퀀스에서 <paramref name="start" /> 시퀀스 위치부터 <paramref name="end" /> 시퀀스 위치의 항목으로 구성되지만 포함하지 않는 조각입니다.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Start">
      <summary>
        <see cref="T:System.Buffers.ReadOnlySequence`1" />의 시작에 배치합니다.</summary>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.ToString">
      <summary>현재 시퀀스를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 시퀀스를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.TryGet(System.SequencePosition@,System.ReadOnlyMemory{`0}@,System.Boolean)">
      <summary>
        <paramref name="position" /> 뒤에서 다음 세그먼트를 검색하고, 작업이 성공했는지를 나타내는 값을 반환합니다.</summary>
      <param name="position">현재 시퀀스 위치입니다.</param>
      <param name="memory">
        <paramref name="position" /> 뒤에서 다음 세그먼트를 포함하는 읽기 전용 메모리 범위입니다.</param>
      <param name="advance">
        <paramref name="position" />이 다음 세그먼트의 시작이어야 하는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>메서드가 다음 세그먼트를 반환한 경우 <see langword="true" />를 반환하고, 읽기 전용 시퀀스의 끝에 도달한 경우 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="T:System.Buffers.ReadOnlySequenceSegment`1">
      <summary>
        <see cref="T:System.ReadOnlyMemory`1" /> 노드의 연결된 목록을 나타냅니다.</summary>
      <typeparam name="T">읽기 전용 시퀀스 세그먼트에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Buffers.ReadOnlySequenceSegment`1.#ctor">
      <summary>
        <see cref="T:System.Buffers.ReadOnlySequenceSegment`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.Memory">
      <summary>현재 노드에서 <see cref="T:System.ReadOnlyMemory`1" /> 값을 가져오거나 설정합니다.</summary>
      <returns>현재 노드의 <see cref="T:System.ReadOnlyMemory`1" /> 값입니다.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.Next">
      <summary>다음 노드를 가져오거나 설정합니다.</summary>
      <returns>다음 노드입니다.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.RunningIndex">
      <summary>현재 노드 앞에 있는 노드 길이의 합을 가져오거나 설정합니다.</summary>
      <returns>현재 노드 앞에 있는 노드 길이의 합계입니다.</returns>
    </member>
    <member name="T:System.Buffers.SequenceReader`1">
      <summary>성능과 최소 또는 0 힙 할당에 중점을 두어 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 이진 및 텍스트 데이터를 읽는 메서드를 제공합니다.</summary>
      <typeparam name="T">읽기 전용 시퀀스의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.#ctor(System.Buffers.ReadOnlySequence{`0})">
      <summary>지정된 <see cref="T:System.Buffers.SequenceReader`1" />에 대해 <see cref="T:System.Buffers.ReadOnlySequence`1" />을 만듭니다.</summary>
      <param name="sequence">
        <see cref="T:System.Buffers.SequenceReader`1" />을 만들 수 있는 읽기 전용 시퀀스입니다.</param>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.Advance(System.Int64)">
      <summary>reader를 지정된 항목 수만큼 앞으로 이동시킵니다.</summary>
      <param name="count">진행할 항목의 개수입니다.</param>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePast(`0)">
      <summary>지정된 <paramref name="value" />의 이전 연속 인스턴스를 지나서 이동합니다.</summary>
      <param name="value">reader가 이동하는 지난 값입니다.</param>
      <returns>reader가 이동하는 위치의 수입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0)">
      <summary>두 개의 지정된 값 중 하나가 연속 인스턴스를 지나서 이동합니다.</summary>
      <param name="value0">건너뛸 첫 번째 값입니다.</param>
      <param name="value1">건너뛸 두 번째 값입니다.</param>
      <returns>reader가 이동하는 위치의 수입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0)">
      <summary>세 개의 지정된 값 중 하나가 연속 인스턴스를 지나서 이동합니다.</summary>
      <param name="value0">건너뛸 첫 번째 값입니다.</param>
      <param name="value1">건너뛸 두 번째 값입니다.</param>
      <param name="value2">건너뛸 세 번째 값입니다.</param>
      <returns>reader가 이동하는 위치의 수입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0,`0)">
      <summary>네 개의 지정된 값 중 하나가 연속 인스턴스를 지나서 이동합니다.</summary>
      <param name="value0">건너뛸 첫 번째 값입니다.</param>
      <param name="value1">건너뛸 두 번째 값입니다.</param>
      <param name="value2">건너뛸 세 번째 값입니다.</param>
      <param name="value3">건너뛸 네 번째 값입니다.</param>
      <returns>reader가 이동하는 위치의 수입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(System.ReadOnlySpan{`0})">
      <summary>지정된 <paramref name="values" />의 모든 연속 인스턴스를 건너뜁니다.</summary>
      <param name="values">건너뛸 값입니다.</param>
      <returns>reader가 이동하는 위치의 수입니다.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Consumed">
      <summary>reader에서 처리한 <typeparamref name="T" /> 값의 총 수를 가져옵니다.</summary>
      <returns>판독기에서 처리 한 값의 총 수입니다.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.CurrentSpan">
      <summary>
        <see cref="T:System.Span`1" />에 현재 세그먼트가 포함된 <see cref="P:System.Buffers.SequenceReader`1.Sequence" />을 가져옵니다.</summary>
      <returns>시퀀스의 현재 세그먼트를 포함 하는 범위입니다.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.CurrentSpanIndex">
      <summary>
        <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />의 인덱스를 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />의 인덱스입니다.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.End">
      <summary>
        <see cref="P:System.Buffers.SequenceReader`1.Sequence" />에 데이터가 더 이상 없는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Buffers.SequenceReader`1.Sequence" />에 더 이상 데이터가 없을 때 <see langword="true" /> 합니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.IsNext(`0,System.Boolean)">
      <summary>지정된 값이 시퀀스의 다음인지 여부를 확인합니다.</summary>
      <param name="next">다음 항목을 비교할 값입니다.</param>
      <param name="advancePast">발견되는 경우 <see langword="true" /> 값을 지나서 이동하려면 <paramref name="next" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>값이 시퀀스의 다음에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)">
      <summary>읽기 전용 범위에 지정된 값이 시퀀스의 다음인지 확인합니다.</summary>
      <param name="next">다음 항목을 비교하는 범위입니다.</param>
      <param name="advancePast">발견되는 경우 <see langword="true" /> 값을 지나서 이동하려면 <paramref name="next" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>값이 시퀀스의 다음에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Length">
      <summary>reader의 <see cref="P:System.Buffers.SequenceReader`1.Sequence" />의 항목 수를 가져옵니다.</summary>
      <returns>판독기의 <see cref="P:System.Buffers.SequenceReader`1.Sequence" />에 있는 항목의 수입니다.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Position">
      <summary>
        <see cref="P:System.Buffers.SequenceReader`1.Sequence" />의 현재 위치를 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Buffers.SequenceReader`1.Sequence" />의 현재 위치입니다.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Remaining">
      <summary>reader의 <see cref="P:System.Buffers.SequenceReader`1.Sequence" />에 나머지 항목을 가져옵니다.</summary>
      <returns>판독기의 <see cref="P:System.Buffers.SequenceReader`1.Sequence" />에 있는 나머지 항목</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.Rewind(System.Int64)">
      <summary>reader를 지정된 항목 수만큼 뒤로 이동시킵니다.</summary>
      <param name="count">항목의 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" />가 음수이거나 <see cref="P:System.Buffers.SequenceReader`1.Consumed" />보다 큽니다.</exception>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Sequence">
      <summary>reader의 기본 <see cref="T:System.Buffers.ReadOnlySequence`1" />을 가져옵니다.</summary>
      <returns>판독기에 대 한 기본 읽기 전용 시퀀스입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryAdvanceTo(`0,System.Boolean)">
      <summary>지정된 구분 기호를 검색하고 필요에 따라 있는 경우 이를 지나서 이동합니다.</summary>
      <param name="delimiter">검색할 구분 기호입니다.</param>
      <param name="advancePastDelimiter">발견되는 경우 <see langword="true" />를 지나서 이동하면 <paramref name="delimiter" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>지정된 <see langword="true" />가 있으면 <paramref name="delimiter" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryAdvanceToAny(System.ReadOnlySpan{`0},System.Boolean)">
      <summary>지정된 구분 기호 중 하나를 검색하고 필요에 따라 찾은 첫 번째 구분 기호를 지나서 이동합니다.</summary>
      <param name="delimiters">검색할 구분 기호입니다.</param>
      <param name="advancePastDelimiter">지정된 <see langword="true" />의 첫 번째 인스턴스를 지나서 이동하려면 <paramref name="delimiters" />이고, 구분 기호를 지나서 이동하지 않으려면 <see langword="false" />입니다.</param>
      <returns>지정된 <see langword="true" />가 있으면 <paramref name="delimiters" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryCopyTo(System.Span{`0})">
      <summary>데이터를 채울 수 있는 충분한 데이터가 있는 경우 현재 위치에서 지정된 대상 범위로 데이터를 복사합니다.</summary>
      <param name="destination">복사할 대상 범위입니다.</param>
      <returns>
        <see langword="true" /> 범위를 완전히 채울 수 있는 충분한 데이터가 있으면 <paramref name="destination" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryPeek(`0@)">
      <summary>reader를 이동하지 않고 다음 값을 관찰합니다.</summary>
      <param name="value">다음 값 또는 reader의 끝에 있는 경우 기본값입니다.</param>
      <returns>reader가 해당 끝에 있지 않고 미리 보기 작업이 성공하면 <see langword="true" />이고, reader의 끝에 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryRead(`0@)">
      <summary>다음 값을 읽고 reader를 진행합니다.</summary>
      <param name="value">다음 값 또는 reader의 끝에 있는 경우 기본값입니다.</param>
      <returns>reader가 해당 끝에 있지 않고 일기 작업이 성공하면 <see langword="true" />이고, reader의 끝에 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,`0,System.Boolean)">
      <summary>
        <paramref name="delimiter" /> 앞에 오는 구분 기호를 무시하고 지정된 <paramref name="delimiterEscape" />까지 모든 항목을 읽으려고 시도합니다.</summary>
      <param name="sequence">메서드가 반환될 때 읽은 데이터(있는 경우)를 포함합니다.</param>
      <param name="delimiter">찾아야 할 구분 기호입니다.</param>
      <param name="delimiterEscape">바로 다음 <paramref name="delimiter" />를 건너뛸 것임을 나타내는 값입니다.</param>
      <param name="advancePastDelimiter">발견되는 경우 <see langword="true" />를 지나서 이동하면 <paramref name="delimiter" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>
        <see langword="true" />가 있으면 <paramref name="delimiter" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,System.Boolean)">
      <summary>지정된 <paramref name="delimiter" />까지 모든 항목을 읽으려고 시도합니다.</summary>
      <param name="sequence">메서드가 반환될 때 읽은 데이터(있는 경우)를 포함합니다.</param>
      <param name="delimiter">찾아야 할 구분 기호입니다.</param>
      <param name="advancePastDelimiter">발견되는 경우 <see langword="true" />를 지나서 이동하면 <paramref name="delimiter" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>
        <see langword="true" />가 있으면 <paramref name="delimiter" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary>읽기 전용 범위로 지정된 전체 구분 기호가 일치할 때까지 데이터 읽기를 시도합니다.</summary>
      <param name="sequence">메서드가 반환될 때 읽은 데이터(있는 경우)를 포함합니다.</param>
      <param name="delimiter">하나 이상의 구분 기호를 포함하는 읽기 전용 범위입니다.</param>
      <param name="advancePastDelimiter">발견되는 경우 <see langword="true" />를 지나서 이동하면 <paramref name="delimiter" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>
        <see langword="true" />가 있으면 <paramref name="delimiter" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,`0,System.Boolean)">
      <summary>
        <paramref name="delimiter" /> 앞에 오는 구분 기호를 무시하고 지정된 <paramref name="delimiterEscape" />까지 모든 항목을 읽으려고 시도합니다.</summary>
      <param name="span">메서드가 반환될 때 읽은 데이터(있는 경우)를 포함합니다.</param>
      <param name="delimiter">찾아야 할 구분 기호입니다.</param>
      <param name="delimiterEscape">바로 다음 <paramref name="delimiter" />를 건너뛸 것임을 나타내는 값입니다.</param>
      <param name="advancePastDelimiter">발견되는 경우 <see langword="true" />를 지나서 이동하면 <paramref name="delimiter" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>
        <see langword="true" />가 있으면 <paramref name="delimiter" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,System.Boolean)">
      <summary>지정된 <paramref name="delimiter" />까지 모든 항목을 읽으려고 시도합니다.</summary>
      <param name="span">메서드가 반환될 때 읽은 데이터(있는 경우)를 포함합니다.</param>
      <param name="delimiter">찾아야 할 구분 기호입니다.</param>
      <param name="advancePastDelimiter">발견되는 경우 <see langword="true" />를 지나서 이동하면 <paramref name="delimiter" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>
        <see langword="true" />가 있으면 <paramref name="delimiter" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadToAny(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary>지정된 <paramref name="delimiters" />까지 모든 항목을 읽으려고 시도합니다.</summary>
      <param name="sequence">메서드가 반환될 때 읽은 데이터(있는 경우)를 포함합니다.</param>
      <param name="delimiters">찾아야 할 구분 기호입니다.</param>
      <param name="advancePastDelimiter">지정된 <see langword="true" /> 중 하나에서 처음 발견된 인스턴스를 지나 이동하면 <paramref name="delimiters" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>
        <see langword="true" />가 발견되었으면 <paramref name="delimiters" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadToAny(System.ReadOnlySpan{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary>지정된 <paramref name="delimiters" />까지 모든 항목을 읽으려고 시도합니다.</summary>
      <param name="span">메서드가 반환될 때 읽은 데이터(있는 경우)를 포함합니다.</param>
      <param name="delimiters">찾아야 할 구분 기호입니다.</param>
      <param name="advancePastDelimiter">지정된 <see langword="true" /> 중 하나에서 처음 발견된 인스턴스를 지나 이동하면 <paramref name="delimiters" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>
        <see langword="true" />가 발견되었으면 <paramref name="delimiters" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.UnreadSpan">
      <summary>
        <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />의 읽지 않은 부분을 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />의 읽지 않은 부분입니다.</returns>
    </member>
    <member name="T:System.Buffers.SequenceReaderExtensions">
      <summary>이진 데이터에서 endian 특정 숫자 값을 읽는 데 사용할 수 있는 <see cref="T:System.Buffers.SequenceReader`1" /> 클래스의 확장된 기능을 제공합니다.</summary>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int16@)">
      <summary>
        <see cref="T:System.Int16" />을 big endian으로 읽으려고 합니다.</summary>
      <param name="reader">값을 읽어올 바이트 시퀀스 판독기 인스턴스입니다.</param>
      <param name="value">메서드가 반환할 때 바이트 시퀀스 판독기에서 big endian으로 읽은 값입니다.</param>
      <returns>읽기 작업이 성공하면 <see langword="true" />이고, <see langword="false" />에 대한 데이터가 충분하지 않으면 <see cref="T:System.Int16" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int32@)">
      <summary>
        <see cref="T:System.Int32" />을 big endian으로 읽으려고 합니다.</summary>
      <param name="reader">값을 읽어올 바이트 시퀀스 판독기입니다.</param>
      <param name="value">메서드가 반환할 때 바이트 시퀀스 판독기에서 big endian으로 읽은 값입니다.</param>
      <returns>읽기 작업이 성공하면 <see langword="true" />이고, <see langword="false" />에 대한 데이터가 충분하지 않으면 <see cref="T:System.Int32" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int64@)">
      <summary>
        <see cref="T:System.Int64" />을 big endian으로 읽으려고 합니다.</summary>
      <param name="reader">값을 읽어올 바이트 시퀀스 판독기 인스턴스입니다.</param>
      <param name="value">메서드가 반환할 때 바이트 시퀀스 판독기에서 big endian으로 읽은 값입니다.</param>
      <returns>읽기 작업이 성공하면 <see langword="true" />이고, <see langword="false" />에 대한 데이터가 충분하지 않으면 <see cref="T:System.Int64" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int16@)">
      <summary>
        <see cref="T:System.Int16" />를 little endian으로 읽으려고 합니다.</summary>
      <param name="reader">값을 읽어올 바이트 시퀀스 판독기 인스턴스입니다.</param>
      <param name="value">메서드가 반환할 때 바이트 시퀀스 판독기에서 little endian으로 읽은 값입니다.</param>
      <returns>읽기 작업이 성공하면 <see langword="true" />이고, <see langword="false" />에 대한 데이터가 충분하지 않으면 <see cref="T:System.Int16" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int32@)">
      <summary>
        <see cref="T:System.Int32" />를 little endian으로 읽으려고 합니다.</summary>
      <param name="reader">값을 읽어올 바이트 시퀀스 판독기 인스턴스입니다.</param>
      <param name="value">메서드가 반환할 때 바이트 시퀀스 판독기에서 little endian으로 읽은 값입니다.</param>
      <returns>읽기 작업이 성공하면 <see langword="true" />이고, <see langword="false" />에 대한 데이터가 충분하지 않으면 <see cref="T:System.Int32" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int64@)">
      <summary>
        <see cref="T:System.Int64" />를 little endian으로 읽으려고 합니다.</summary>
      <param name="reader">값을 읽어올 바이트 시퀀스 판독기 인스턴스입니다.</param>
      <param name="value">메서드가 반환할 때 바이트 시퀀스 판독기에서 little endian으로 읽은 값입니다.</param>
      <returns>읽기 작업이 성공하면 <see langword="true" />이고, <see langword="false" />에 대한 데이터가 충분하지 않으면 <see cref="T:System.Int64" />입니다.</returns>
    </member>
    <member name="T:System.Buffers.StandardFormat">
      <summary>실제 문자열을 사용하지 않고 표준 서식 문자열을 나타냅니다.</summary>
    </member>
    <member name="M:System.Buffers.StandardFormat.#ctor(System.Char,System.Byte)">
      <summary>
        <see cref="T:System.Buffers.StandardFormat" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="symbol">‘G’, ‘D’ 또는 ‘X’ 등의 형식별 형식 지정자입니다.</param>
      <param name="precision">0~99 사이의 선택적 전체 자릿수 또는 특수 값 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />(기본값)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="symbol" />은 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />이 아니며, 해당 값은 <see cref="F:System.Buffers.StandardFormat.MaxPrecision" />보다 큽니다.
또는
<paramref name="symbol" />를 <see cref="T:System.Byte" />로 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Buffers.StandardFormat.Equals(System.Buffers.StandardFormat)">
      <summary>지정된 <see cref="T:System.Buffers.StandardFormat" />이 현재 인스턴스와 동일한지를 나타내는 값을 반환합니다.</summary>
      <param name="other">현재 인스턴스와 비교할 형식입니다.</param>
      <returns>두 인스턴스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Equals(System.Object)">
      <summary>지정된 개체가 현재 인스턴스와 동일한 <see cref="T:System.Buffers.StandardFormat" /> 개체인지를 나타내는 값을 반환합니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>두 인스턴스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.HasPrecision">
      <summary>형식에 정의된 전체 자릿수가 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>형식에 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />이외의 전체 자릿수가 있으면 <see langword="true" /> 합니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.IsDefault">
      <summary>현재 인스턴스가 기본 형식인지를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 인스턴스가 기본 형식 인지 여부를 <see langword="true" /> 합니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="F:System.Buffers.StandardFormat.MaxPrecision">
      <summary>유효한 최대 전체 자릿수 값을 정의합니다.</summary>
    </member>
    <member name="F:System.Buffers.StandardFormat.NoPrecision">
      <summary>형식이 전체 자릿수를 사용하지 않거나 해당 전체 자릿수가 지정되지 않았음을 나타냅니다.</summary>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Equality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)">
      <summary>두 <see cref="T:System.Buffers.StandardFormat" /> 인스턴스가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 형식입니다.</param>
      <param name="right">비교할 두 번째 형식입니다.</param>
      <returns>두 인스턴스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Implicit(System.Char)~System.Buffers.StandardFormat">
      <summary>
        <see cref="T:System.Buffers.StandardFormat" /> 전체 자릿수를 사용하여 문자를 <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> 인스턴스로 변환합니다.</summary>
      <param name="symbol">
        <see cref="T:System.Buffers.StandardFormat" /> 값으로 변환할 문자입니다.</param>
      <returns>
        <paramref name="symbol" />과 동일한 <see cref="P:System.Buffers.StandardFormat.Symbol" /> 속성 및 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />과 동일한 <see cref="P:System.Buffers.StandardFormat.Precision" /> 속성을 가진 형식입니다.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Inequality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)">
      <summary>두 개의 <see cref="T:System.Buffers.StandardFormat" /> 인스턴스가 다른지를 확인합니다.</summary>
      <param name="left">비교할 첫 번째 형식입니다.</param>
      <param name="right">비교할 두 번째 형식입니다.</param>
      <returns>두 개의 형식이 다른 경우 <see langword="true" />이고 같은 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Parse(System.ReadOnlySpan{System.Char})">
      <summary>
        <see langword="ReadOnlySpan&lt;System.Char&gt;" />를 <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> 전체 자릿수를 사용하여 <see cref="T:System.Buffers.StandardFormat" /> 인스턴스로 변환합니다.</summary>
      <param name="format">구문 분석할 문자를 포함하는 읽기 전용 범위입니다.</param>
      <returns>
        <see cref="P:System.Buffers.StandardFormat.Symbol" /> 속성 값이 <paramref name="format" />의 문자이고 <see cref="P:System.Buffers.StandardFormat.Precision" /> 속성 값이 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />인 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Parse(System.String)">
      <summary>클래식 .NET 표준 형식 문자열을 <see cref="T:System.Buffers.StandardFormat" /> 인스턴스로 변환합니다.</summary>
      <param name="format">클래식 .NET 표준 형식 문자열입니다.</param>
      <returns>형식입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" />이 유효한 형식 문자열이 아닙니다.</exception>
    </member>
    <member name="P:System.Buffers.StandardFormat.Precision">
      <summary>형식의 전체 자릿수 구성 요소를 가져옵니다.</summary>
      <returns>
        <see cref="F:System.Buffers.StandardFormat.NoPrecision" />수 있거나 0에서 9 사이의 범위를 지정할 수 있는 전체 자릿수 구성 요소입니다.</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.Symbol">
      <summary>형식의 문자 구성 요소를 가져옵니다.</summary>
      <returns>형식의 문자 구성 요소입니다.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.ToString">
      <summary>이 형식의 문자열 표현을 반환합니다.</summary>
      <returns>이 형식의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.TryParse(System.ReadOnlySpan{System.Char},System.Buffers.StandardFormat@)">
      <summary>
        <see langword="ReadOnlySpan&lt;Char&gt;" />를 <see cref="T:System.Buffers.StandardFormat" /> 인스턴스로 변환하려고 시도하고 구문 분석 작업의 성공 여부를 나타내는 값을 반환합니다.</summary>
      <param name="format">변환할 문자를 포함하는 읽기 전용 범위입니다.</param>
      <param name="result">이 메서드가 반환될 경우 작업에 성공하면 구문 분석된 <see cref="T:System.Buffers.StandardFormat" /> 인스턴스가 포함되어 있습니다.</param>
      <returns>구문 분석 작업에 성공하면 <see langword="true" />이고 실패하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Buffers.Text.Base64">
      <summary>base 64로 표현되는 이진 데이터와 UTF-8 인코딩 텍스트 간의 변환입니다.</summary>
    </member>
    <member name="M:System.Buffers.Text.Base64.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <summary>base 64로 나타낸 UTF-8 인코딩 텍스트의 범위를 이진 데이터로 디코딩합니다. 입력이 4의 배수가 아닌 경우 최대한 가장 가까운 4의 배수로 디코딩됩니다.</summary>
      <param name="utf8">디코딩되어야 하는 UTF-8 인코딩 텍스트(base 64)를 포함하는 입력 범위입니다.</param>
      <param name="bytes">작업의 결과인 디코딩된 이진 데이터를 포함하는 출력 범위입니다.</param>
      <param name="bytesConsumed">작업 중에 사용된 입력 바이트 수입니다. 필요한 경우 후속 호출에서 입력을 분할하는 데 사용될 수 있습니다.</param>
      <param name="bytesWritten">입력 범위에 작성된 바이트 수입니다. 필요한 경우 후속 호출에서 출력을 분할하는 데 사용될 수 있습니다.</param>
      <param name="isFinalBlock">입력 범위에 디코딩할 전체 데이터가 포함되는 경우 <see langword="true" />(기본값)입니다. 입력 범위에 더 많은 데이터를 팔로우해야 하는 부분 데이터가 포함되는 경우 <see langword="false" />입니다.</param>
      <returns>디코딩 작업의 상태를 나타내는 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.DecodeFromUtf8InPlace(System.Span{System.Byte},System.Int32@)">
      <summary>UTF-8 인코딩 텍스트(base 64)의 범위를 이진 데이터로 디코딩합니다. 디코딩된 이진 출력은 입력에 포함된 텍스트 데이터보다 작습니다(이 작업은 데이터를 압축함). 입력이 4의 배수가 아닌 경우 이 메서드는 데이터를 디코딩하지 않습니다.</summary>
      <param name="buffer">디코딩되어야 하는 base-64 텍스트 데이터를 포함하는 입력 범위입니다.</param>
      <param name="bytesWritten">버퍼에 작성된 바이트 수입니다.</param>
      <returns>디코딩 작업의 상태를 나타내는 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.EncodeToUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <summary>이진 데이터의 범위를 base 64로 나타낸 UTF-8 인코딩 텍스트로 인코딩합니다.</summary>
      <param name="bytes">디코딩되어야 하는 이진 데이터를 포함하는 입력 범위입니다.</param>
      <param name="utf8">작업의 결과인 UTF-8 인코딩 텍스트(base 64)를 포함하는 출력 범위입니다.</param>
      <param name="bytesConsumed">작업 중에 사용된 입력 바이트 수입니다. 필요한 경우 후속 호출에서 입력을 분할하는 데 사용될 수 있습니다.</param>
      <param name="bytesWritten">입력 범위에 작성된 바이트 수입니다. 필요한 경우 후속 호출에서 출력을 분할하는 데 사용될 수 있습니다.</param>
      <param name="isFinalBlock">입력 범위에 인코딩할 전체 데이터가 포함되는 경우 <see langword="true" />(기본값)입니다. 입력 범위에 더 많은 데이터를 팔로우해야 하는 부분 데이터가 포함되는 경우 <see langword="false" />입니다.</param>
      <returns>인코딩 작업의 상태를 나타내는 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.EncodeToUtf8InPlace(System.Span{System.Byte},System.Int32,System.Int32@)">
      <summary>이진 데이터(내부)의 범위를 base 64로 나타낸 UTF-8 인코딩 텍스트로 인코딩합니다. 인코딩된 텍스트 출력은 입력에 포함된 이진 데이터보다 큽니다(이 작업은 데이터를 확장함).</summary>
      <param name="buffer">디코딩되어야 하는 이진 데이터를 포함하는 입력 범위입니다. 메서드는 바로 전환을 수행하기 때문에 작업의 결과를 저장할 수 있을 만큼 커야 합니다.</param>
      <param name="dataLength">인코딩되어야 하는 버퍼에 포함된 이진 데이터의 바이트 수입니다. 이 값은 버퍼 길이보다 작아야 합니다.</param>
      <param name="bytesWritten">버퍼에 작성된 바이트 수입니다.</param>
      <returns>인코딩 작업의 상태를 나타내는 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.GetMaxDecodedFromUtf8Length(System.Int32)">
      <summary>지정된 길이의 바이트 범위 내에서 base-64 인코딩 텍스트를 디코딩해야 하는 경우 결과의 최대 길이(바이트 단위)를 반환합니다.</summary>
      <param name="length">바이트 범위의 크기입니다.</param>
      <returns>결과의 최대 길이(바이트 단위)입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" />가 0보다 작습니다.</exception>
    </member>
    <member name="M:System.Buffers.Text.Base64.GetMaxEncodedToUtf8Length(System.Int32)">
      <summary>지정된 길이의 바이트 범위 내에서 이진 데이터를 인코딩해야 하는 경우 결과의 최대 길이(바이트 단위)를 반환합니다.</summary>
      <param name="length">바이트 범위의 크기입니다.</param>
      <returns>결과의 최대 길이(바이트 단위)입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">인코딩이 데이터를 4/3으로 확장하므로 <paramref name="length" />는 0보다 작거나 1610612733보다 큽니다.</exception>
    </member>
    <member name="T:System.Buffers.Text.Utf8Formatter">
      <summary>일반 데이터 형식을 Utf8 문자열로 서식을 지정하는 정적 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Boolean,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>
        <see cref="T:System.Boolean" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value">형식을 지정할 값입니다.</param>
      <param name="destination">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format">사용할 표준 형식입니다.</param>
      <returns>서식 지정 작업이 성공하면 <see langword="true" />이고, <see langword="false" />가 너무 작으면 <paramref name="buffer" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Byte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>
        <see cref="T:System.Byte" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value">형식을 지정할 값입니다.</param>
      <param name="destination">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format">사용할 표준 형식입니다.</param>
      <returns>서식 지정 작업이 성공하면 <see langword="true" />이고, <see langword="false" />가 너무 작으면 <paramref name="buffer" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTime,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>
        <see cref="T:System.DateTime" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value">형식을 지정할 값입니다.</param>
      <param name="destination">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format">사용할 표준 형식입니다.</param>
      <returns>서식 지정 작업이 성공하면 <see langword="true" />이고, <see langword="false" />가 너무 작으면 <paramref name="buffer" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTimeOffset,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>
        <see cref="T:System.DateTimeOffset" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value">형식을 지정할 값입니다.</param>
      <param name="destination">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format">사용할 표준 형식입니다.</param>
      <returns>서식 지정 작업이 성공하면 <see langword="true" />이고, <see langword="false" />가 너무 작으면 <paramref name="buffer" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Decimal,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>
        <see cref="T:System.Decimal" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value">형식을 지정할 값입니다.</param>
      <param name="destination">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format">사용할 표준 형식입니다.</param>
      <returns>서식 지정 작업이 성공하면 <see langword="true" />이고, <see langword="false" />가 너무 작으면 <paramref name="buffer" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Double,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>
        <see cref="T:System.Double" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value">형식을 지정할 값입니다.</param>
      <param name="destination">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format">사용할 표준 형식입니다.</param>
      <returns>서식 지정 작업이 성공하면 <see langword="true" />이고, <see langword="false" />가 너무 작으면 <paramref name="buffer" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Guid,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>
        <see cref="T:System.Guid" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value">형식을 지정할 값입니다.</param>
      <param name="destination">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format">사용할 표준 형식입니다.</param>
      <returns>서식 지정 작업이 성공하면 <see langword="true" />이고, <see langword="false" />가 너무 작으면 <paramref name="buffer" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>
        <see cref="T:System.Int16" />를 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value">형식을 지정할 값입니다.</param>
      <param name="destination">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format">사용할 표준 형식입니다.</param>
      <returns>서식 지정 작업이 성공하면 <see langword="true" />이고, <see langword="false" />가 너무 작으면 <paramref name="buffer" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>
        <see cref="T:System.Int32" />를 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value">형식을 지정할 값입니다.</param>
      <param name="destination">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format">사용할 표준 형식입니다.</param>
      <returns>서식 지정 작업이 성공하면 <see langword="true" />이고, <see langword="false" />가 너무 작으면 <paramref name="buffer" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>
        <see cref="T:System.Int64" />를 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value">형식을 지정할 값입니다.</param>
      <param name="destination">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format">사용할 표준 형식입니다.</param>
      <returns>서식 지정 작업이 성공하면 <see langword="true" />이고, <see langword="false" />가 너무 작으면 <paramref name="buffer" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.SByte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>
        <see cref="T:System.SByte" />를 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value">형식을 지정할 값입니다.</param>
      <param name="destination">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format">사용할 표준 형식입니다.</param>
      <returns>서식 지정 작업이 성공하면 <see langword="true" />이고, <see langword="false" />가 너무 작으면 <paramref name="buffer" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Single,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>
        <see cref="T:System.Single" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value">형식을 지정할 값입니다.</param>
      <param name="destination">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format">사용할 표준 형식입니다.</param>
      <returns>서식 지정 작업이 성공하면 <see langword="true" />이고, <see langword="false" />가 너무 작으면 <paramref name="buffer" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.TimeSpan,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>
        <see cref="T:System.TimeSpan" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value">형식을 지정할 값입니다.</param>
      <param name="destination">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format">사용할 표준 형식입니다.</param>
      <returns>서식 지정 작업이 성공하면 <see langword="true" />이고, <see langword="false" />가 너무 작으면 <paramref name="buffer" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>
        <see cref="T:System.UInt16" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value">형식을 지정할 값입니다.</param>
      <param name="destination">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format">사용할 표준 형식입니다.</param>
      <returns>서식 지정 작업이 성공하면 <see langword="true" />이고, <see langword="false" />가 너무 작으면 <paramref name="buffer" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>
        <see cref="T:System.UInt32" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value">형식을 지정할 값입니다.</param>
      <param name="destination">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format">사용할 표준 형식입니다.</param>
      <returns>서식 지정 작업이 성공하면 <see langword="true" />이고, <see langword="false" />가 너무 작으면 <paramref name="buffer" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>
        <see cref="T:System.UInt64" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value">형식을 지정할 값입니다.</param>
      <param name="destination">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format">사용할 표준 형식입니다.</param>
      <returns>서식 지정 작업이 성공하면 <see langword="true" />이고, <see langword="false" />가 너무 작으면 <paramref name="buffer" />입니다.</returns>
    </member>
    <member name="T:System.Buffers.Text.Utf8Parser">
      <summary>Utf8 문자열을 일반 데이터 형식으로 구문 분석하는 정적 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)">
      <summary>Utf8 문자열 시작 시 <see cref="T:System.Boolean" />를 구문 분석합니다.</summary>
      <param name="source">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat">Utf8 문자열의 예상된 형식입니다.</param>
      <returns>성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)">
      <summary>Utf8 문자열 시작 시 <see cref="T:System.Byte" />를 구문 분석합니다.</summary>
      <param name="source">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat">Utf8 문자열의 예상된 형식입니다.</param>
      <returns>성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)">
      <summary>Utf8 문자열 시작 시 <see cref="T:System.DateTime" />를 구문 분석합니다.</summary>
      <param name="source">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat">Utf8 문자열의 예상된 형식입니다.</param>
      <returns>성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)">
      <summary>Utf8 문자열 시작 시 <see cref="T:System.DateTimeOffset" />를 구문 분석합니다.</summary>
      <param name="source">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat">Utf8 문자열의 예상된 형식입니다.</param>
      <returns>성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)">
      <summary>Utf8 문자열 시작 시 <see cref="T:System.Decimal" />를 구문 분석합니다.</summary>
      <param name="source">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat">Utf8 문자열의 예상된 형식입니다.</param>
      <returns>성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)">
      <summary>Utf8 문자열 시작 시 <see cref="T:System.Double" />를 구문 분석합니다.</summary>
      <param name="source">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat">Utf8 문자열의 예상된 형식입니다.</param>
      <returns>성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)">
      <summary>Utf8 문자열 시작 시 <see cref="T:System.Guid" />를 구문 분석합니다.</summary>
      <param name="source">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat">Utf8 문자열의 예상된 형식입니다.</param>
      <returns>성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)">
      <summary>Utf8 문자열 시작 시 <see cref="T:System.Int16" />를 구문 분석합니다.</summary>
      <param name="source">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat">Utf8 문자열의 예상된 형식입니다.</param>
      <returns>성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)">
      <summary>Utf8 문자열 시작 시 <see cref="T:System.Int32" />를 구문 분석합니다.</summary>
      <param name="source">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat">Utf8 문자열의 예상된 형식입니다.</param>
      <returns>성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)">
      <summary>Utf8 문자열 시작 시 <see cref="T:System.Int64" />를 구문 분석합니다.</summary>
      <param name="source">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat">Utf8 문자열의 예상된 형식입니다.</param>
      <returns>성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)">
      <summary>Utf8 문자열 시작 시 <see cref="T:System.SByte" />를 구문 분석합니다.</summary>
      <param name="source">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat">Utf8 문자열의 예상된 형식입니다.</param>
      <returns>성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)">
      <summary>Utf8 문자열 시작 시 <see cref="T:System.Single" />를 구문 분석합니다.</summary>
      <param name="source">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat">Utf8 문자열의 예상된 형식입니다.</param>
      <returns>성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)">
      <summary>Utf8 문자열 시작 시 <see cref="T:System.TimeSpan" />를 구문 분석합니다.</summary>
      <param name="source">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat">Utf8 문자열의 예상된 형식입니다.</param>
      <returns>성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)">
      <summary>Utf8 문자열 시작 시 <see cref="T:System.UInt16" />를 구문 분석합니다.</summary>
      <param name="source">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat">Utf8 문자열의 예상된 형식입니다.</param>
      <returns>성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)">
      <summary>Utf8 문자열 시작 시 <see cref="T:System.UInt32" />를 구문 분석합니다.</summary>
      <param name="source">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat">Utf8 문자열의 예상된 형식입니다.</param>
      <returns>성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)">
      <summary>Utf8 문자열 시작 시 <see cref="T:System.UInt64" />를 구문 분석합니다.</summary>
      <param name="source">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat">Utf8 문자열의 예상된 형식입니다.</param>
      <returns>성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.MemoryExtensions">
      <summary>
        <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" />, <see cref="T:System.ReadOnlySpan`1" />와 같은 메모리 및 범위 관련 형식에 대한 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String)">
      <summary>대상 문자열 부분에 대해 새로운 <see langword="ReadOnlyMemory&lt;Char&gt;" />를 만듭니다.</summary>
      <param name="text">대상 문자열입니다.</param>
      <returns>문자열의 읽기 전용 문자 메모리 표현 또는 <paramref name="text" />가 <see langword="null" />인 경우 <see langword="default" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Index)">
      <summary>지정된 인덱스에서 시작하는 대상 문자열 부분에 대해 새로운 <see langword="ReadOnlyMemory&lt;Char&gt;" />를 만듭니다.</summary>
      <param name="text">대상 문자열입니다.</param>
      <param name="startIndex">이 조각을 시작할 인덱스입니다.</param>
      <returns>문자열의 읽기 전용 문자 메모리 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Int32)">
      <summary>지정된 문자 위치에서 시작하는 대상 문자열 부분에 대해 새로운 <see langword="ReadOnlyMemory&lt;Char&gt;" />를 만듭니다.</summary>
      <param name="text">대상 문자열입니다.</param>
      <param name="start">이 조각을 시작할 인덱스입니다.</param>
      <returns>문자열의 읽기 전용 문자 메모리 표현 또는 <paramref name="text" />가 <see langword="null" />인 경우 <see langword="default" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />는 <paramref name="text" />의 범위에 없습니다.(<paramref name="start" />는 &lt; 0 또는 &gt; <c>text.Length</c>입니다.)</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Int32,System.Int32)">
      <summary>길이가 있는 지정된 위치에서 시작하는 대상 문자열 부분에 대해 새로운 <see langword="ReadOnlyMemory&lt;Char&gt;" />를 만듭니다.</summary>
      <param name="text">대상 문자열입니다.</param>
      <param name="start">이 조각을 시작할 인덱스입니다.</param>
      <param name="length">조각에 대한 원하는 길이입니다.</param>
      <returns>문자열의 읽기 전용 문자 메모리 표현 또는 <paramref name="text" />가 <see langword="null" />인 경우 <see langword="default" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />, <paramref name="length" /> 또는 <paramref name="start" /> + <paramref name="length" />는 <paramref name="text" />의 범위에 없습니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Range)">
      <summary>대상 문자열의 지정된 범위에 대해 새로운 <see langword="ReadOnlyMemory&lt;Char&gt;" />를 만듭니다.</summary>
      <param name="text">대상 문자열입니다.</param>
      <param name="range">조각화된 문자열의 시작과 길이를 나타내는 범위입니다.</param>
      <returns>문자열의 읽기 전용 문자 메모리 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[])">
      <summary>대상 배열에 대해 새 메모리 영역을 만듭니다.</summary>
      <param name="array">변환할 배열입니다.</param>
      <typeparam name="T">배열의 형식입니다.</typeparam>
      <returns>배열의 전체 또는 부분에 대한 메모리 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Index)">
      <summary>배열 끝의 지정된 인덱스에서 시작하는 대상 배열 부분에 대해 새 메모리 영역을 만듭니다.</summary>
      <param name="array">변환할 배열입니다.</param>
      <param name="startIndex">배열의 첫 번째 위치입니다.</param>
      <typeparam name="T">배열의 형식입니다.</typeparam>
      <returns>배열의 전체 또는 부분에 대한 메모리 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32)">
      <summary>배열 끝의 지정된 위치에서 시작하는 대상 배열 부분에 대해 새 메모리 영역을 만듭니다.</summary>
      <param name="array">대상 배열입니다.</param>
      <param name="start">메모리를 시작할 인덱스입니다.</param>
      <typeparam name="T">배열의 형식입니다.</typeparam>
      <returns>배열의 전체 또는 부분에 대한 메모리 표현입니다.</returns>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="array" />은 공변(covariant)이고, 배열의 형식은 정확히 <see langword="T[]" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> 인덱스는 0보다 작거나 <see langword="array.Length" />보다 큽니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32,System.Int32)">
      <summary>지정된 길이를 사용하여 지정된 위치에서 시작하는 대상 배열 부분에 대해 새 메모리 영역을 만듭니다.</summary>
      <param name="array">대상 배열입니다.</param>
      <param name="start">메모리 영역을 시작할 인덱스입니다.</param>
      <param name="length">메모리 영역에 있는 항목 수입니다.</param>
      <typeparam name="T">배열의 형식입니다.</typeparam>
      <returns>배열의 전체 또는 부분에 대한 메모리 표현입니다.</returns>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="array" />은 공변(covariant)이고, 배열의 형식은 정확히 <see langword="T[]" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />, <paramref name="length" /> 또는 <paramref name="start" /> + <paramref name="length" />가 <paramref name="array" />의 범위에 없습니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Range)">
      <summary>범위의 포괄 시작 인덱스에서 시작하여 범위의 단독 끝 인덱스에서 끝나는 대상 배열 부분에 대해 새 메모리 영역을 만듭니다.</summary>
      <param name="array">변환할 배열입니다.</param>
      <param name="range">배열에서 변환할 범위입니다.</param>
      <typeparam name="T">배열의 형식입니다.</typeparam>
      <returns>배열의 전체 또는 부분에 대한 메모리 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0})">
      <summary>대상 배열 세그먼트 부분에 대해 새 메모리 영역을 만듭니다.</summary>
      <param name="segment">변환할 세그먼트입니다.</param>
      <typeparam name="T">세그먼트의 형식입니다.</typeparam>
      <returns>세그먼트의 메모리 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32)">
      <summary>세그먼트 끝까지 지정된 위치에서 시작하는 대상 배열 세그먼트 부분에 대해 새 메모리 영역을 만듭니다.</summary>
      <param name="segment">대상 배열 세그먼트입니다.</param>
      <param name="start">메모리를 시작할 인덱스입니다.</param>
      <typeparam name="T">배열의 형식입니다.</typeparam>
      <returns>배열의 전체 또는 부분에 대한 메모리 표현입니다.</returns>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="segment" />는 공변(covariant)이고, <paramref name="segment" />의 형식은 정확히 <see langword="T[]" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />가 0보다 작거나 <see langword="segment.Count" />보다 큽니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <summary>지정된 길이를 사용하여 지정된 위치에서 시작하는 대상 배열 세그먼트 부분에 대해 새 메모리 영역을 만듭니다.</summary>
      <param name="segment">대상 배열 세그먼트입니다.</param>
      <param name="start">메모리를 시작할 인덱스입니다.</param>
      <param name="length">메모리의 항목 수입니다.</param>
      <typeparam name="T">배열의 형식입니다.</typeparam>
      <returns>배열의 전체 또는 부분에 대한 메모리 표현입니다.</returns>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="segment" />은 공변(covariant)이고, 배열의 형식은 정확히 <see langword="T[]" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />, <paramref name="length" /> 또는 <paramref name="start" /> + <paramref name="length" />가 <paramref name="segment" />의 범위에 없습니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String)">
      <summary>지정된 문자 수에 대해 지정된 위치에서 대상 문자열 부분에 대한 새 읽기 전용 범위를 만듭니다.</summary>
      <param name="text">대상 문자열입니다.</param>
      <returns>문자열의 읽기 전용 범위 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String,System.Int32)">
      <summary>지정된 위치에서 문자열의 끝까지 대상 문자열 부분에 대해 새 읽기 전용 범위를 만듭니다.</summary>
      <param name="text">대상 문자열입니다.</param>
      <param name="start">이 조각을 시작할 인덱스입니다.</param>
      <returns>문자열의 읽기 전용 범위 표현입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />가 0보다 작거나 <see langword="text.Length" />보다 큽니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String,System.Int32,System.Int32)">
      <summary>문자열에 대해 새 읽기 전용 범위를 만듭니다.</summary>
      <param name="text">대상 문자열입니다.</param>
      <param name="start">이 조각을 시작할 인덱스입니다.</param>
      <param name="length">조각에 대한 원하는 길이입니다.</param>
      <returns>문자열의 읽기 전용 범위 표현입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />, <paramref name="length" /> 또는 <paramref name="start" /> + <paramref name="length" />는 <paramref name="text" />의 범위에 없습니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[])">
      <summary>대상 배열에 새 범위를 만듭니다.</summary>
      <param name="array">변환할 배열입니다.</param>
      <typeparam name="T">배열의 형식입니다.</typeparam>
      <returns>배열의 범위 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Index)">
      <summary>
        <see cref="T:System.Index" /> 값으로 정의되는 대상 배열 부분에 대해 새 범위를 만듭니다.</summary>
      <param name="array">변환할 배열입니다.</param>
      <param name="startIndex">시작 인덱스입니다.</param>
      <typeparam name="T">배열 형식입니다.</typeparam>
      <returns>배열의 범위 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32)">
      <summary>배열 끝의 지정된 위치에서 시작하여 대상 배열 부분에 대해 새 범위를 만듭니다.</summary>
      <param name="array">변환할 배열입니다.</param>
      <param name="start">배열이 변환되는 초기 인덱스입니다.</param>
      <typeparam name="T">배열의 형식입니다.</typeparam>
      <returns>배열의 범위 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32,System.Int32)">
      <summary>지정된 길이에 대해 지정된 위치에서 시작하는 대상 배열 부분에 대해 새 범위를 만듭니다.</summary>
      <param name="array">대상 배열입니다.</param>
      <param name="start">범위를 시작할 인덱스입니다.</param>
      <param name="length">범위의 항목 수입니다.</param>
      <typeparam name="T">배열의 형식입니다.</typeparam>
      <returns>배열의 범위 표현입니다.</returns>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="array" />은 공변(covariant)이고, 배열의 형식은 정확히 <see langword="T[]" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />, <paramref name="length" /> 또는 <paramref name="start" /> + <paramref name="length" />는 <paramref name="text" />의 범위에 없습니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Range)">
      <summary>
        <see cref="T:System.Range" /> 값으로 정의된 대상 배열 부분에 대해 새 범위를 만듭니다.</summary>
      <param name="array">변환할 배열입니다.</param>
      <param name="range">변환할 배열의 범위입니다.</param>
      <typeparam name="T">배열의 형식입니다.</typeparam>
      <returns>배열의 범위 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0})">
      <summary>대상 배열 세그먼트에 대해 새 범위를 만듭니다.</summary>
      <param name="segment">변환할 배열 세그먼트입니다.</param>
      <typeparam name="T">배열 세그먼트의 형식입니다.</typeparam>
      <returns>배열 세그먼트의 범위 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Index)">
      <summary>지정된 인덱스에서 시작하여 세그먼트 끝에서 끝나는 대상 배열 세그먼트 부분에 대해 새 범위를 만듭니다.</summary>
      <param name="segment">대상 배열 세그먼트입니다.</param>
      <param name="startIndex">범위를 시작할 인덱스입니다.</param>
      <typeparam name="T">배열 세그먼트의 형식입니다.</typeparam>
      <returns>배열 세그먼트의 범위 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32)">
      <summary>지정된 위치에서 세그먼트 끝까지 대상 배열 세그먼트 부분에 대해 새 범위를 만듭니다.</summary>
      <param name="segment">대상 배열 세그먼트입니다.</param>
      <param name="start">범위를 시작할 인덱스입니다.</param>
      <typeparam name="T">배열 세그먼트의 형식입니다.</typeparam>
      <returns>배열 세그먼트의 범위 표현입니다.</returns>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="segment" />은 공변(covariant)이고, 배열의 형식은 정확히 <see langword="T[]" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />가 0보다 작거나 <see langword="segment.Count" />보다 큽니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <summary>지정된 길이에 대해 지정된 위치에서 대상 배열 세그먼트 부분에 대해 새 범위를 만듭니다.</summary>
      <param name="segment">대상 배열 세그먼트입니다.</param>
      <param name="start">범위를 시작할 인덱스입니다.</param>
      <param name="length">범위의 항목 수입니다.</param>
      <typeparam name="T">배열 세그먼트의 형식입니다.</typeparam>
      <returns>배열의 범위 표현입니다.</returns>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="segment" />은 공변(covariant)이고, 배열의 형식은 정확히 <see langword="T[]" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />, <paramref name="length" /> 또는 <paramref name="start" /> + <paramref name="length" />가 <paramref name="segment" />의 범위에 없습니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Range)">
      <summary>범위 시작 및 끝 인덱스를 사용하여 대상 배열 세그먼트 부분에 대해 새 범위를 만듭니다.</summary>
      <param name="segment">대상 배열 세그먼트입니다.</param>
      <param name="range">배열을 조각화하는 데 사용할 시작 및 끝 인덱스를 포함하는 범위입니다.</param>
      <typeparam name="T">배열 세그먼트의 형식입니다.</typeparam>
      <returns>배열 세그먼트의 범위 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``1(System.ReadOnlySpan{``0},System.IComparable{``0})">
      <summary>지정한 <see cref="T:System.ReadOnlySpan`1" /> 제네릭 인터페이스를 사용하여 정렬된 전체 <see cref="T:System.IComparable`1" />에서 값을 검색합니다.</summary>
      <param name="span">검색할 정렬된 <see cref="T:System.ReadOnlySpan`1" />입니다.</param>
      <param name="comparable">비교할 때 사용할 <see cref="T:System.IComparable`1" />입니다.</param>
      <typeparam name="T">범위의 요소 형식입니다.</typeparam>
      <returns>
        <paramref name="comparable" />이 있으면 정렬된 <paramref name="span" />에 있는 <paramref name="comparable" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="comparable" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.ReadOnlySpan`1.Length" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparable" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})">
      <summary>지정한 <see cref="T:System.Span`1" /> 제네릭 인터페이스를 사용하여 정렬된 전체 <see cref="T:System.IComparable`1" />에서 값을 검색합니다.</summary>
      <param name="span">검색할 정렬된 <see cref="T:System.Span`1" />입니다.</param>
      <param name="comparable">비교할 때 사용할 <see cref="T:System.IComparable`1" />입니다.</param>
      <typeparam name="T">범위의 요소 형식입니다.</typeparam>
      <returns>
        <paramref name="comparable" />이 있으면 정렬된 <paramref name="span" />에 있는 <paramref name="comparable" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="comparable" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Span`1.Length" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparable" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``0,``1)">
      <summary>지정한 <see cref="T:System.ReadOnlySpan`1" /> 제네릭 형식을 사용하여 정렬된 전체 <typeparamref name="TComparer" />에서 지정된 값을 검색합니다.</summary>
      <param name="span">검색할 정렬된 <see cref="T:System.ReadOnlySpan`1" />입니다.</param>
      <param name="value">찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="comparer">비교할 때 사용할 <typeparamref name="TComparer" />입니다.</param>
      <typeparam name="T">범위의 요소 형식입니다.</typeparam>
      <typeparam name="TComparer">의 특정 형식 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</typeparam>
      <returns>
        <paramref name="value" />이 있으면 정렬된 <paramref name="span" />에 있는 <paramref name="value" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="value" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.ReadOnlySpan`1.Length" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``1)">
      <summary>지정한 <see cref="T:System.ReadOnlySpan`1" /> 제네릭 형식을 사용하여 정렬된 전체 <typeparamref name="TComparable" />에서 값을 검색합니다.</summary>
      <param name="span">검색할 정렬된 <see cref="T:System.ReadOnlySpan`1" />입니다.</param>
      <param name="comparable">비교할 때 사용할 <typeparamref name="TComparable" />입니다.</param>
      <typeparam name="T">범위의 요소 형식입니다.</typeparam>
      <typeparam name="TComparable">의 특정 형식 <see cref="T:System.IComparable`1" />입니다.</typeparam>
      <returns>
        <paramref name="comparable" />이 있으면 정렬된 <paramref name="span" />에 있는 <paramref name="comparable" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="comparable" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.ReadOnlySpan`1.Length" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparable" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)">
      <summary>지정한 <see cref="T:System.Span`1" /> 제네릭 형식을 사용하여 정렬된 전체 <typeparamref name="TComparer" />에서 지정된 값을 검색합니다.</summary>
      <param name="span">검색할 정렬된 <see cref="T:System.Span`1" />입니다.</param>
      <param name="value">찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="comparer">비교할 때 사용할 <typeparamref name="TComparer" />입니다.</param>
      <typeparam name="T">범위의 요소 형식입니다.</typeparam>
      <typeparam name="TComparer">의 특정 형식 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</typeparam>
      <returns>
        <paramref name="value" />이 있으면 정렬된 <paramref name="span" />에 있는 <paramref name="value" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="value" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Span`1.Length" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)">
      <summary>지정한 <see cref="T:System.Span`1" /> 제네릭 형식을 사용하여 정렬된 전체 <typeparamref name="TComparable" />에서 값을 검색합니다.</summary>
      <param name="span">검색할 정렬된 <see cref="T:System.Span`1" />입니다.</param>
      <param name="comparable">비교할 때 사용할 <typeparamref name="TComparable" />입니다.</param>
      <typeparam name="T">범위의 요소 형식입니다.</typeparam>
      <typeparam name="TComparable">의 특정 형식 <see cref="T:System.IComparable`1" />입니다.</typeparam>
      <returns>
        <paramref name="comparable" />이 있으면 정렬된 <paramref name="span" />에 있는 <paramref name="comparable" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="comparable" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Span`1.Length" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparable" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.MemoryExtensions.CompareTo(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>지정된 문자열 비교를 사용하여 한 문자 범위를 다른 문자 범위와 비교하고, 정렬 순서에서 상대 위치를 나타내는 정수를 반환합니다.</summary>
      <param name="span">소스 범위입니다.</param>
      <param name="other">소스 범위와 비교할 값입니다.</param>
      <param name="comparisonType">
        <paramref name="span" /> 및 <paramref name="other" />를 비교하는 방법을 결정하는 열거형 값입니다.</param>
      <returns>
        <paramref name="span" /> 및 <paramref name="other" />의 상대 순서를 나타내는 부호 있는 정수입니다.   - 0보다 작은 경우 <paramref name="span" />이 <paramref name="other" />보다 앞에 옵니다.   - 0인 경우 <paramref name="span" />는 <paramref name="other" />와 같습니다.   - 0보다 큰 경우 <paramref name="span" />은 <paramref name="other" />의 뒤에 옵니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>지정된 값이 읽기 전용 문자 범위 내에서 발생하는지 여부를 나타냅니다.</summary>
      <param name="span">소스 범위입니다.</param>
      <param name="value">소스 범위 내에서 검색할 값입니다.</param>
      <param name="comparisonType">
        <paramref name="span" /> 및 <paramref name="value" />의 문자를 비교하는 방법을 결정하는 열거형 값입니다.</param>
      <returns>
        <paramref name="value" />가 범위 내에서 발생하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains``1(System.ReadOnlySpan{``0},``0)">
      <summary>지정된 값을 읽기 전용 범위에서 찾을 수 있는지를 나타냅니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value">검색할 값입니다.</param>
      <typeparam name="T">범위의 형식입니다.</typeparam>
      <returns>찾은 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains``1(System.Span{``0},``0)">
      <summary>범위에서 지정된 값을 찾을 수 있는지를 나타냅니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value">검색할 값입니다.</param>
      <typeparam name="T">범위에 있는 요소의 형식입니다.</typeparam>
      <returns>찾은 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.CopyTo``1(``0[],System.Memory{``0})">
      <summary>배열의 내용을 메모리 영역에 복사합니다.</summary>
      <param name="source">복사할 항목이 있는 배열입니다.</param>
      <param name="destination">항목을 복사할 메모리입니다.</param>
      <typeparam name="T">배열의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException">대상이 소스 배열보다 짧습니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.CopyTo``1(``0[],System.Span{``0})">
      <summary>배열의 내용을 범위에 복사합니다.</summary>
      <param name="source">복사할 항목이 있는 배열입니다.</param>
      <param name="destination">항목을 복사할 범위입니다.</param>
      <typeparam name="T">배열의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException">대상 범위가 소스 배열보다 짧습니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>지정한 <paramref name="comparisonType" /> 옵션을 사용하여 비교할 때 <paramref name="span" />의 끝부분과 지정한 <paramref name="value" />이 일치하는지 여부를 확인합니다.</summary>
      <param name="span">소스 범위입니다.</param>
      <param name="value">소스 범위의 끝과 비교할 시퀀스입니다.</param>
      <param name="comparisonType">
        <paramref name="span" /> 및 <paramref name="value" />를 비교하는 방법을 결정하는 열거형 값입니다.</param>
      <returns>
        <paramref name="value" />가 <paramref name="span" />의 끝부분과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>지정된 시퀀스가 읽기 전용 범위 끝에 표시되는지 여부를 확인합니다.</summary>
      <param name="span">소스 범위입니다.</param>
      <param name="value">소스 범위의 끝과 비교할 시퀀스입니다.</param>
      <typeparam name="T">범위의 형식입니다.</typeparam>
      <returns>
        <paramref name="value" />가 <paramref name="span" />의 끝부분과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>지정된 시퀀스가 범위 끝에 표시되는지 여부를 확인합니다.</summary>
      <param name="span">소스 범위입니다.</param>
      <param name="value">소스 범위의 끝과 비교할 시퀀스입니다.</param>
      <typeparam name="T">범위의 형식입니다.</typeparam>
      <returns>
        <paramref name="value" />가 <paramref name="span" />의 끝부분과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.EnumerateRunes(System.ReadOnlySpan{System.Char})">
      <summary>제공된 읽기 전용 범위에서 <see cref="T:System.Text.Rune" />의 열거형을 반환합니다.</summary>
      <param name="span">소스 범위입니다.</param>
      <returns>rune 열거자입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.EnumerateRunes(System.Span{System.Char})">
      <summary>제공된 범위에서 <see cref="T:System.Text.Rune" />의 열거형을 반환합니다.</summary>
      <param name="span">소스 범위입니다.</param>
      <returns>rune 열거자입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Equals(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>지정한 <paramref name="comparisonType" /> 옵션을 사용하여 비교할 때 이 <paramref name="span" />과 지정된 <paramref name="other" /> 범위에 동일한 문자가 있는지를 확인합니다.</summary>
      <param name="span">소스 범위입니다.</param>
      <param name="other">소스 범위와 비교할 값입니다.</param>
      <param name="comparisonType">
        <paramref name="span" /> 및 <paramref name="other" />를 비교하는 방법을 결정하는 열거형 값입니다.</param>
      <returns>같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>현재 <paramref name="span" />에서 지정된 <paramref name="value" />가 맨 처음 발생하는 0부터 시작하는 인덱스를 보고합니다.</summary>
      <param name="span">소스 범위입니다.</param>
      <param name="value">소스 범위 내에서 검색할 값입니다.</param>
      <param name="comparisonType">
        <paramref name="span" /> 및 <paramref name="value" />를 비교하는 방법을 결정하는 열거형 값입니다.</param>
      <returns>범위에 있는 값의 발생 인덱스입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)">
      <summary>지정한 값을 검색하고 맨 처음 발생하는 인덱스를 반환합니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value">검색할 값입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 값의 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>지정한 시퀀스를 검색하고 맨 처음 발생하는 인덱스를 반환합니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value">검색할 시퀀스입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 값의 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},``0)">
      <summary>지정한 값을 검색하고 맨 처음 발생하는 인덱스를 반환합니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value">검색할 값입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 값의 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>지정한 시퀀스를 검색하고 맨 처음 발생하는 인덱스를 반환합니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value">검색할 시퀀스입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 값의 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">
      <summary>논리 OR 연산자를 사용하여 IndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 첫 번째 인덱스를 검색합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value0">검색할 값 중 하나입니다.</param>
      <param name="value1">검색할 값 중 하나입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 값의 첫 번째 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">
      <summary>논리 OR 연산자를 사용하여 IndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 첫 번째 인덱스를 검색합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value0">검색할 값 중 하나입니다.</param>
      <param name="value1">검색할 값 중 하나입니다.</param>
      <param name="value2">검색할 값 중 하나입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 값의 첫 번째 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>논리 OR 연산자를 사용하여 IndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 첫 번째 인덱스를 검색합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="values">검색할 값의 집합입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 값의 첫 번째 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0)">
      <summary>논리 OR 연산자를 사용하여 IndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 첫 번째 인덱스를 검색합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value0">검색할 값 중 하나입니다.</param>
      <param name="value1">검색할 값 중 하나입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 값의 첫 번째 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0,``0)">
      <summary>논리 OR 연산자를 사용하여 IndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 첫 번째 인덱스를 검색합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value0">검색할 값 중 하나입니다.</param>
      <param name="value1">검색할 값 중 하나입니다.</param>
      <param name="value2">검색할 값 중 하나입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 값의 첫 번째 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>논리 OR 연산자를 사용하여 IndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 첫 번째 인덱스를 검색합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="values">검색할 값의 집합입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 값의 첫 번째 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IsWhiteSpace(System.ReadOnlySpan{System.Char})">
      <summary>지정된 범위에 공백 문자만 포함되어 있는지를 나타냅니다.</summary>
      <param name="span">소스 범위입니다.</param>
      <returns>범위에 공백 문자만 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>현재 <paramref name="span" />에서 지정된 <paramref name="value" />가 마지막으로 발생하는 0부터 시작하는 인덱스를 보고합니다.</summary>
      <param name="span">소스 범위입니다.</param>
      <param name="value">소스 범위 내에서 검색할 값입니다.</param>
      <param name="comparisonType">
        <paramref name="span" /> 및 <paramref name="value" />를 비교하는 방법을 결정하는 열거형 값입니다.</param>
      <returns>범위에 있는 값의 마지막 발생 인덱스입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},``0)">
      <summary>지정한 값을 검색하고 마지막으로 발생하는 인덱스를 반환합니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value">검색할 값입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>지정한 시퀀스를 검색하고 마지막으로 발생하는 인덱스를 반환합니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value">검색할 시퀀스입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},``0)">
      <summary>지정한 값을 검색하고 마지막으로 발생하는 인덱스를 반환합니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value">검색할 값입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>지정한 시퀀스를 검색하고 마지막으로 발생하는 인덱스를 반환합니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value">검색할 시퀀스입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">
      <summary>논리 OR 연산자를 사용하여 LastIndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 마지막 인덱스를 검색합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value0">검색할 값 중 하나입니다.</param>
      <param name="value1">검색할 값 중 하나입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 모든 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">
      <summary>논리 OR 연산자를 사용하여 LastIndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 마지막 인덱스를 검색합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value0">검색할 값 중 하나입니다.</param>
      <param name="value1">검색할 값 중 하나입니다.</param>
      <param name="value2">검색할 값 중 하나입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 모든 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>논리 OR 연산자를 사용하여 LastIndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 마지막 인덱스를 검색합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="values">검색할 값의 집합입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 모든 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0)">
      <summary>논리 OR 연산자를 사용하여 LastIndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 마지막 인덱스를 검색합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value0">검색할 값 중 하나입니다.</param>
      <param name="value1">검색할 값 중 하나입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 모든 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0,``0)">
      <summary>논리 OR 연산자를 사용하여 LastIndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 마지막 인덱스를 검색합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value0">검색할 값 중 하나입니다.</param>
      <param name="value1">검색할 값 중 하나입니다.</param>
      <param name="value2">검색할 값 중 하나입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 모든 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>논리 OR 연산자를 사용하여 LastIndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 마지막 인덱스를 검색합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="values">검색할 값의 집합입니다.</param>
      <typeparam name="T">범위 및 값의 형식입니다.</typeparam>
      <returns>범위에 있는 모든 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>두 읽기 전용 시퀀스가 메모리에서 겹치는지 여부를 확인합니다.</summary>
      <param name="span">첫 번째 시퀀스입니다.</param>
      <param name="other">두 번째 시퀀스입니다.</param>
      <typeparam name="T">읽기 전용 시퀀스의 elmeents 형식입니다.</typeparam>
      <returns>두 시퀀스가 겹치면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32@)">
      <summary>두 읽기 전용 시퀀스가 메모리에서 겹치는지 여부를 확인하고 요소 오프셋을 출력합니다.</summary>
      <param name="span">첫 번째 시퀀스입니다.</param>
      <param name="other">두 번째 시퀀스입니다.</param>
      <param name="elementOffset" />
      <typeparam name="T">범위에 있는 요소의 형식입니다.</typeparam>
      <returns>두 시퀀스가 겹치면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>범위와 읽기 전용 범위가 메모리에서 겹치는지 여부를 확인합니다.</summary>
      <param name="span">비교할 범위입니다.</param>
      <param name="other">비교할 읽기 전용 범위입니다.</param>
      <typeparam name="T">범위에 있는 요소의 형식입니다.</typeparam>
      <returns>두 시퀀스가 겹치면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)">
      <summary>범위와 읽기 전용 범위가 메모리에서 겹치는지 여부를 확인하고 요소 오프셋을 출력합니다.</summary>
      <param name="span">비교할 첫 번째 시퀀스입니다.</param>
      <param name="other">비교할 두 번째 시퀀스입니다.</param>
      <param name="elementOffset">메서드가 반환될 때 <paramref name="span" />과 <paramref name="other" /> 간의 오프셋을 포함합니다.</param>
      <typeparam name="T">범위에 있는 요소의 형식입니다.</typeparam>
      <returns>두 시퀀스가 겹치면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Reverse``1(System.Span{``0})">
      <summary>전체 범위에 있는 요소의 시퀀스를 역순으로 바꿉니다.</summary>
      <param name="span">역순으로 바꿀 범위입니다.</param>
      <typeparam name="T">범위에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.MemoryExtensions.SequenceCompareTo``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>IComparable{T}.CompareTo(T)를 사용하여 해당 요소를 비교하여 두 읽기 전용 시퀀스의 상대 순서를 확인합니다.</summary>
      <param name="span">비교할 첫 번째 시퀀스입니다.</param>
      <param name="other">비교할 두 번째 시퀀스입니다.</param>
      <typeparam name="T">시퀀스의 요소 형식입니다.</typeparam>
      <returns>
        <paramref name="span" /> 및 <paramref name="other" />의 상대 순서를 나타내는 부호 있는 정수입니다.   - 0보다 작은 경우 <paramref name="span" />이 <paramref name="other" />보다 앞에 옵니다.   - 0인 경우 <paramref name="span" />는 <paramref name="other" />와 같습니다.   - 0보다 큰 경우 <paramref name="span" />은 <paramref name="other" />의 뒤에 옵니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceCompareTo``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>IComparable{T}.CompareTo(T)를 사용하여 요소를 비교하여 범위 및 읽기 전용 범위의 상대 순서를 확인합니다.</summary>
      <param name="span">비교할 범위입니다.</param>
      <param name="other">비교할 읽기 전용 범위입니다.</param>
      <typeparam name="T">범위에 있는 요소의 형식입니다.</typeparam>
      <returns>
        <paramref name="span" /> 및 <paramref name="other" />의 상대 순서를 나타내는 부호 있는 정수입니다.   - 0보다 작은 경우 <paramref name="span" />이 <paramref name="other" />보다 앞에 옵니다.   - 0인 경우 <paramref name="span" />는 <paramref name="other" />와 같습니다.   - 0보다 큰 경우 <paramref name="span" />은 <paramref name="other" />의 뒤에 옵니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>IEquatable{T}.Equals(T)를 사용하여 요소를 비교하여 두 개의 읽기 전용 시퀀스가 동일한지 여부를 확인합니다.</summary>
      <param name="span">비교할 첫 번째 시퀀스입니다.</param>
      <param name="other">비교할 두 번째 시퀀스입니다.</param>
      <typeparam name="T">시퀀스의 요소 형식입니다.</typeparam>
      <returns>두 시퀀스가 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>IEquatable{T}.Equals(T)를 사용하여 요소를 비교하여 범위 및 읽기 전용 범위가 같은지 여부를 확인합니다.</summary>
      <param name="span">비교할 범위입니다.</param>
      <param name="other">비교할 읽기 전용 범위입니다.</param>
      <typeparam name="T">시퀀스의 요소 형식입니다.</typeparam>
      <returns>두 시퀀스가 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>지정한 <see cref="T:System.StringComparison" /> 값을 사용하여 비교할 때 읽기 전용 문자 범위가 지정된 값으로 시작하는지 여부를 확인합니다.</summary>
      <param name="span">소스 범위입니다.</param>
      <param name="value">소스 범위의 시작과 비교할 시퀀스입니다.</param>
      <param name="comparisonType">
        <paramref name="span" /> 및 <paramref name="value" />를 비교하는 방법을 결정하는 열거형 값입니다.</param>
      <returns>
        <paramref name="value" />가 <paramref name="span" />의 시작 부분과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>지정된 시퀀스가 읽기 전용 범위의 시작 부분에 표시되는지 여부를 확인합니다.</summary>
      <param name="span">검색할 읽기 전용 문자 범위입니다.</param>
      <param name="value">
        <paramref name="span" />의 시작 부분에서 검색할 시퀀스입니다.</param>
      <typeparam name="T">범위에 있는 요소의 형식입니다.</typeparam>
      <returns>
        <paramref name="value" />가 <paramref name="span" />의 시작 부분과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>지정된 시퀀스가 범위의 시작 부분에 표시되는지 여부를 확인합니다.</summary>
      <param name="span">검색할 범위입니다.</param>
      <param name="value">
        <paramref name="span" />의 시작 부분에서 검색할 시퀀스입니다.</param>
      <typeparam name="T">범위에 있는 요소의 형식입니다.</typeparam>
      <returns>
        <paramref name="value" />가 <paramref name="span" />의 시작 부분과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.ToLower(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)">
      <summary>지정된 문화권의 대/소문자 규칙을 사용하여 각 문자를 소문자로 변환하여 소스 범위에서 대상으로 문자를 복사합니다.</summary>
      <param name="source">소스 범위입니다.</param>
      <param name="destination">변환된 문자를 포함하는 대상 범위입니다.</param>
      <param name="culture">문화권별 대/소문자 규칙을 제공하는 개체입니다.</param>
      <returns>대상 범위에 쓰이는 문자 수입니다. 대상이 너무 작으면 -1을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">소스 및 대상 버퍼가 겹칩니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToLowerInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <summary>고정 문화권의 대/소문자 규칙을 사용하여 각 문자를 소문자로 변환하여 소스 범위에서 대상으로 문자를 복사합니다.</summary>
      <param name="source">소스 범위입니다.</param>
      <param name="destination">변환된 문자를 포함하는 대상 범위입니다.</param>
      <returns>대상 범위에 쓰이는 문자 수입니다. 대상이 너무 작으면 -1을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">소스 및 대상 버퍼가 겹칩니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToUpper(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)">
      <summary>지정된 문화권의 대/소문자 규칙을 사용하여 각 문자를 대문자로 변환하여 소스 범위에서 대상으로 문자를 복사합니다.</summary>
      <param name="source">소스 범위입니다.</param>
      <param name="destination">변환된 문자를 포함하는 대상 범위입니다.</param>
      <param name="culture">문화권별 대/소문자 규칙을 제공하는 개체입니다.</param>
      <returns>대상 범위에 쓰이는 문자 수입니다. 대상이 너무 작으면 -1을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">소스 및 대상 버퍼가 겹칩니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToUpperInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <summary>고정 문화권의 대/소문자 규칙을 사용하여 각 문자를 대문자로 변환하여 소스 범위에서 대상으로 문자를 복사합니다.</summary>
      <param name="source">소스 범위입니다.</param>
      <param name="destination">변환된 문자를 포함하는 대상 범위입니다.</param>
      <returns>대상 범위에 쓰이는 문자 수입니다. 대상이 너무 작으면 -1을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">소스 및 대상 버퍼가 겹칩니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.Memory{System.Char})">
      <summary>문자 메모리 영역에서 선행 및 후행 공백 문자를 모두 제거합니다.</summary>
      <param name="memory">제거할 문자가 있는 소스 메모리입니다.</param>
      <returns>잘린 문자 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlyMemory{System.Char})">
      <summary>읽기 전용 문자 메모리 영역에서 선행 및 후행 공백 문자를 모두 제거합니다.</summary>
      <param name="memory">제거할 문자가 있는 소스 메모리입니다.</param>
      <returns>잘린 문자 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char})">
      <summary>읽기 전용 문자 범위에서 선행 및 후행 공백 문자를 모두 제거합니다.</summary>
      <param name="span">제거할 문자가 있는 소스 범위입니다.</param>
      <returns>잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.Char)">
      <summary>읽기 전용 문자 범위에서 지정된 문자의 선행 및 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="span">제거할 문자가 있는 소스 범위입니다.</param>
      <param name="trimChar">찾아서 제거할 지정된 문자입니다.</param>
      <returns>잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>읽기 전용 범위에 지정된 문자 집합의 선행 및 후행 발생 항목을 읽기 전용 문자 범위에서 모두 제거합니다.</summary>
      <param name="span">제거할 문자가 있는 소스 범위입니다.</param>
      <param name="trimChars">제거할 문자 집합을 포함하는 범위입니다.</param>
      <returns>잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.Span{System.Char})">
      <summary>문자 범위에서 선행 및 후행 공백 문자를 모두 제거합니다.</summary>
      <param name="span">제거할 문자가 있는 소스 범위입니다.</param>
      <returns>잘린 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Memory{``0},``0)">
      <summary>메모리 영역에서 지정된 요소의 선행 및 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="memory">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElement">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T">메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary>읽기 전용 범위에 지정된 요소 집합의 선행 및 후행 발생 항목을 메모리 영역에서 모두 제거합니다.</summary>
      <param name="memory">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElements">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T">메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},``0)">
      <summary>읽기 전용 메모리 영역에서 지정된 요소의 선행 및 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="memory">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElement">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T">읽기 전용 메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 읽기 전용 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary>읽기 전용 범위에 지정된 요소 집합의 선행 및 후행 발생 항목을 읽기 전용 메모리 영역에서 모두 제거합니다.</summary>
      <param name="memory">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElements">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T">읽기 전용 메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 읽기 전용 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},``0)">
      <summary>읽기 전용 범위에서 지정된 요소의 선행 및 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="span">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElement">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T">읽기 전용 범위에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 읽기 전용 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>읽기 전용 범위에 지정된 요소 집합의 선행 및 후행 발생 항목을 읽기 전용 영역에서 모두 제거합니다.</summary>
      <param name="span">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElements">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T">읽기 전용 범위에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 읽기 전용 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Span{``0},``0)">
      <summary>범위에서 지정된 요소의 선행 및 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="span">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElement">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T">범위에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>읽기 전용 범위에 지정된 요소 집합의 선행 및 후행 발생 항목을 범위에서 모두 제거합니다.</summary>
      <param name="span">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElements">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T">범위에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.Memory{System.Char})">
      <summary>문자 메모리 영역에서 후행 공백 문자를 모두 제거합니다.</summary>
      <param name="memory">제거할 문자가 있는 소스 메모리입니다.</param>
      <returns>잘린 문자 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlyMemory{System.Char})">
      <summary>읽기 전용 문자 메모리 영역에서 후행 공백 문자를 모두 제거합니다.</summary>
      <param name="memory">제거할 문자가 있는 소스 메모리입니다.</param>
      <returns>잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char})">
      <summary>읽기 전용 문자 범위에서 후행 공백 문자를 모두 제거합니다.</summary>
      <param name="span">제거할 문자가 있는 소스 범위입니다.</param>
      <returns>잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.Char)">
      <summary>읽기 전용 범위에서 지정된 문자의 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="span">제거할 문자가 있는 소스 범위입니다.</param>
      <param name="trimChar">찾아서 제거할 지정된 문자입니다.</param>
      <returns>잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>읽기 전용 범위에서 지정된 문자 집합의 후행 발생 항목을 읽기 전용 문자 범위에서 모두 제거합니다.</summary>
      <param name="span">제거할 문자가 있는 소스 범위입니다.</param>
      <param name="trimChars">제거할 문자 집합을 포함하는 범위입니다.</param>
      <returns>잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.Span{System.Char})">
      <summary>문자 범위에서 후행 공백 문자를 모두 제거합니다.</summary>
      <param name="span">제거할 문자가 있는 소스 범위입니다.</param>
      <returns>잘린 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},``0)">
      <summary>문자 메모리 영역에서 지정된 요소의 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="memory">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElement">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T">메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary>읽기 전용 범위에 지정된 요소 집합의 후행 발생 항목을 메모리 영역에서 모두 제거합니다.</summary>
      <param name="memory">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElements">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T">메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},``0)">
      <summary>읽기 전용 메모리 영역에서 지정된 요소의 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="memory">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElement">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T">읽기 전용 메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 읽기 전용 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary>읽기 전용 범위에 지정된 요소 집합의 후행 발생 항목을 읽기 전용 메모리 영역에서 모두 제거합니다.</summary>
      <param name="memory">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElements">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T">읽기 전용 메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 읽기 전용 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},``0)">
      <summary>읽기 전용 범위에서 지정된 요소의 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="span">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElement">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T">읽기 전용 범위에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 읽기 전용 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>읽기 전용 범위에 지정된 요소 집합의 후행 발생 항목을 읽기 전용 범위에서 모두 제거합니다.</summary>
      <param name="span">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElements">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T">읽기 전용 범위에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 읽기 전용 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},``0)">
      <summary>범위에서 지정된 요소의 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="span">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElement">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T">범위에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>읽기 전용 범위에 지정된 요소 집합의 후행 발생 항목을 범위에서 모두 제거합니다.</summary>
      <param name="span">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElements">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T">범위에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.Memory{System.Char})">
      <summary>메모리 영역에서 선행 공백 문자를 모두 제거합니다.</summary>
      <param name="memory">제거할 문자가 있는 소스 메모리입니다.</param>
      <returns>잘린 문자 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlyMemory{System.Char})">
      <summary>읽기 전용 메모리 영역에서 선행 공백 문자를 모두 제거합니다.</summary>
      <param name="memory">제거할 문자가 있는 소스 메모리입니다.</param>
      <returns>잘린 읽기 전용 문자 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char})">
      <summary>읽기 전용 범위에서 선행 공백 문자를 모두 제거합니다.</summary>
      <param name="span">제거할 문자가 있는 소스 범위입니다.</param>
      <returns>잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.Char)">
      <summary>범위에서 지정된 문자의 선행 발생 항목을 모두 제거합니다.</summary>
      <param name="span">제거할 문자가 있는 소스 범위입니다.</param>
      <param name="trimChar">찾아서 제거할 지정된 문자입니다.</param>
      <returns>잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>읽기 전용 범위에 지정된 문자 집합의 선행 발생 항목을 범위에서 모두 제거합니다.</summary>
      <param name="span">제거할 문자가 있는 소스 범위입니다.</param>
      <param name="trimChars">제거할 문자 집합을 포함하는 범위입니다.</param>
      <returns>잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.Span{System.Char})">
      <summary>범위에서 선행 공백 문자를 모두 제거합니다.</summary>
      <param name="span">제거할 문자가 있는 소스 범위입니다.</param>
      <returns>잘린 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},``0)">
      <summary>메모리 영역에서 지정된 요소의 선행 발생 항목을 모두 제거합니다.</summary>
      <param name="memory">제거할 요소가 있는 소스 메모리 영역입니다.</param>
      <param name="trimElement">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T">메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary>읽기 전용 범위에 지정된 요소 집합의 선행 발생 항목을 메모리 영역에서 모두 제거합니다.</summary>
      <param name="memory">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElements">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T">메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},``0)">
      <summary>메모리 영역에서 지정된 요소의 선행 발생 항목을 모두 제거합니다.</summary>
      <param name="memory">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElement">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T">읽기 전용 메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 읽기 전용 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary>읽기 전용 범위에 지정된 요소 집합의 선행 발생 항목을 메모리 영역에서 모두 제거합니다.</summary>
      <param name="memory">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElements">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T">읽기 전용 메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 읽기 전용 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},``0)">
      <summary>범위에서 지정된 요소의 선행 발생 항목을 모두 제거합니다.</summary>
      <param name="span">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElement">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T">읽기 전용 범위에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 읽기 전용 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>읽기 전용 범위에 지정된 요소 집합의 선행 발생 항목을 범위에서 모두 제거합니다.</summary>
      <param name="span">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElements">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T">읽기 전용 범위에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 읽기 전용 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},``0)">
      <summary>범위에서 지정된 요소의 선행 발생 항목을 모두 제거합니다.</summary>
      <param name="span">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElement">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T">범위에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>읽기 전용 범위에 지정된 요소 집합의 선행 발생 항목을 범위에서 모두 제거합니다.</summary>
      <param name="span">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElements">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T">범위에 있는 요소의 형식입니다.</typeparam>
      <returns>잘린 범위입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MemoryMarshal">
      <summary>
        <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" /> 및 <see cref="T:System.ReadOnlySpan`1" />과 상호 운영할 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})">
      <summary>한 가지 기본 형식 <see cref="T:System.ReadOnlySpan`1" />의 <paramref name="T" />을 <see langword="ReadOnlySpan&lt;Byte&gt;" />로 캐스팅합니다.</summary>
      <param name="span">변환할 소스 조각입니다.</param>
      <typeparam name="T">읽기 전용 범위에 있는 항목의 형식입니다.</typeparam>
      <returns>
        <see cref="T:System.Byte" /> 형식의 읽기 전용 범위입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" />에는 참조 또는 포인터가 있습니다.</exception>
      <exception cref="T:System.OverflowException">새 <see cref="P:System.ReadOnlySpan`1.Length" />의 <see cref="T:System.ReadOnlySpan`1" /> 속성이 <see cref="F:System.Int32.MaxValue" />를 초과합니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})">
      <summary>한 가지 기본 형식 <see cref="T:System.Span`1" />의 <paramref name="T" />을 <see langword="Span&lt;Byte&gt;" />로 캐스팅합니다.</summary>
      <param name="span">변환할 소스 조각입니다.</param>
      <typeparam name="T">범위에 있는 항목의 형식입니다.</typeparam>
      <returns>
        <see cref="T:System.Byte" /> 형식의 범위입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" />에는 참조 또는 포인터가 있습니다.</exception>
      <exception cref="T:System.OverflowException">새 <see cref="P:System.Span`1.Length" />의 <see cref="T:System.Span`1" /> 속성이 <see cref="F:System.Int32.MaxValue" />를 초과합니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})">
      <summary>
        <see cref="T:System.Memory`1" />에서 <see cref="T:System.ReadOnlyMemory`1" /> 인스턴스를 만듭니다.</summary>
      <param name="memory">읽기 전용 메모리 버퍼입니다.</param>
      <typeparam name="T">읽기 전용 메모리 버퍼에 있는 항목의 형식입니다.</typeparam>
      <returns>
        <see cref="T:System.ReadOnlyMemory`1" />과 동일한 메모리를 나타내는 메모리 블록입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.ReadOnlySpan{System.Byte})">
      <summary>읽기 전용 바이트 범위를 <paramref name="T" /> 형식의 구조에 대한 읽기 전용 참조로 재해석합니다.</summary>
      <param name="span">재해석에 대한 읽기 전용 범위입니다.</param>
      <typeparam name="T">반환 된 참조의 형식입니다.</typeparam>
      <returns>
        <paramref name="T" /> 형식의 구조에 대한 읽기 전용 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.Span{System.Byte})">
      <summary>바이트 범위를 <paramref name="T" /> 형식의 구조에 대한 참조로 재해석합니다.</summary>
      <param name="span">재해석할 범위입니다.</param>
      <typeparam name="T">반환 된 참조의 형식입니다.</typeparam>
      <returns>
        <paramref name="T" /> 형식의 구조에 대한 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})">
      <summary>한 가지 기본 형식의 읽기 전용 범위를 또 다른 기본 형식의 읽기 전용 범위로 캐스팅합니다.</summary>
      <param name="span">변환할 소스 조각입니다.</param>
      <typeparam name="TFrom">소스 범위의 형식입니다.</typeparam>
      <typeparam name="TTo">대상 범위의 형식입니다.</typeparam>
      <returns>변환된 읽기 전용 범위입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TFrom" /> 또는 <paramref name="TTo" />에는 참조 또는 포인터가 있습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})">
      <summary>한 가지 기본 형식의 범위를 또 다른 기본 형식의 범위로 캐스팅합니다.</summary>
      <param name="span">변환할 소스 조각입니다.</param>
      <typeparam name="TFrom">소스 범위의 형식입니다.</typeparam>
      <typeparam name="TTo">대상 범위의 형식입니다.</typeparam>
      <returns>변환된 범위입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TFrom" /> 또는 <paramref name="TTo" />에는 참조 또는 포인터가 있습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)">
      <summary>
        <paramref name="start" /> 인덱스에서 시작하고 <paramref name="length" /> 항목으로 구성된 미리 고정된 대상 배열의 일부에 대한 새 메모리 버퍼를 만듭니다.</summary>
      <param name="array">미리 고정된 소스 배열입니다.</param>
      <param name="start">메모리 블록을 시작할 <paramref name="array" />의 인덱스입니다.</param>
      <param name="length">메모리 블록에 포함할 항목 수입니다.</param>
      <typeparam name="T">배열의 형식입니다.</typeparam>
      <returns>
        <paramref name="array" />의 지정된 요소에 대한 메모리 블록입니다. <paramref name="array" />가 <see langword="null" />이거나 <paramref name="start" /> 및 <paramref name="length" />가 0이면 메서드는 <see cref="T:System.Memory`1" /> 0의 <see cref="P:System.Memory`1.Length" /> 인스턴스를 반환합니다.</returns>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="array" />는 공변(covariant)이고, <paramref name="array" />의 형식은 정확히 <paramref name="T[]" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> 또는 끝 인덱스가 0~<see cref="P:System.Array.Length" /> 범위를 벗어납니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)">
      <summary>일반 관리형 개체의 일부에 대한 새 읽기 전용 범위를 만듭니다.</summary>
      <param name="reference">데이터에 대한 참조입니다.</param>
      <param name="length">
        <paramref name="T" />에 포함된 <paramref name="reference" /> 요소 수입니다.</param>
      <typeparam name="T">데이터 항목의 형식입니다.</typeparam>
      <returns>읽기 전용 범위입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)">
      <summary>일반 관리형 개체의 일부에 대한 새 범위를 만듭니다.</summary>
      <param name="reference">데이터에 대한 참조입니다.</param>
      <param name="length">
        <paramref name="T" />에 포함된 <paramref name="reference" /> 요소 수입니다.</param>
      <typeparam name="T">데이터 항목의 형식입니다.</typeparam>
      <returns>범위입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})">
      <summary>인덱스 0에 있는 읽기 전용 범위의 요소에 대한 참조를 반환합니다.</summary>
      <param name="span">참조가 검색되는 읽기 전용 범위입니다.</param>
      <typeparam name="T">범위에 있는 항목의 형식입니다.</typeparam>
      <returns>인덱스 0의 요소에 대한 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})">
      <summary>인덱스 0에 있는 범위의 요소에 대한 참조를 반환합니다.</summary>
      <param name="span">참조가 검색되는 범위입니다.</param>
      <typeparam name="T">범위에 있는 항목의 형식입니다.</typeparam>
      <returns>인덱스 0의 요소에 대한 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})">
      <summary>읽기 전용 범위(바이트)를 벗어난 <param name="T" /> 형식의 구조체를 읽습니다.</summary>
      <param name="source">읽기 전용 범위입니다.</param>
      <typeparam name="T">읽기 전용 범위에서 검색할 항목의 형식입니다.</typeparam>
      <returns>읽기 전용 범위에서 검색된 구조체입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" />에는 참조 또는 포인터가 있습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" />는 <paramref name="T" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})">
      <summary>지정된 읽기 전용 메모리 버퍼의 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 보기를 만듭니다.</summary>
      <param name="memory">읽기 전용 메모리 버퍼입니다.</param>
      <typeparam name="T">읽기 전용 메모리 버퍼에 있는 항목의 형식입니다.</typeparam>
      <returns>열거 가능한 <paramref name="memory" />의 보기입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)">
      <summary>기본 메모리 버퍼에서 배열 세그먼트를 가져오려고 합니다. 반환 값은 작업의 성공을 나타냅니다.</summary>
      <param name="memory">읽기 전용 메모리 버퍼입니다.</param>
      <param name="segment">이 메서드가 반환되면 기본 읽기 전용 메모리 버퍼에서 검색된 배열 세그먼트가 포함됩니다. 메서드가 실패하면 메서드는 기본 배열 세그먼트를 반환합니다.</param>
      <typeparam name="T">읽기 전용 메모리 버퍼에 있는 항목의 형식입니다.</typeparam>
      <returns>메서드 호출이 성공하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)">
      <summary>기본 읽기 전용 메모리 버퍼에서 <see cref="T:System.Buffers.MemoryManager`1" />을 검색하려고 합니다.</summary>
      <param name="memory">메모리 관리자를 가져올 읽기 전용 메모리 버퍼입니다.</param>
      <param name="manager">메서드가 반환되면 <paramref name="memory" />의 관리자입니다.</param>
      <typeparam name="T">읽기 전용 메모리 버퍼에 있는 항목의 형식입니다.</typeparam>
      <typeparam name="TManager">검색할 <see cref="T:System.Buffers.MemoryManager`1" />의 형식입니다.</typeparam>
      <returns>메서드가 메모리 관리자를 검색한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)">
      <summary>기본 읽기 전용 메모리 버퍼에서 <see cref="T:System.Buffers.MemoryManager`1" />, 시작 인덱스 및 길이를 검색하려고 합니다.</summary>
      <param name="memory">메모리 관리자를 가져올 읽기 전용 메모리 버퍼입니다.</param>
      <param name="manager">메서드가 반환되면 <paramref name="memory" />의 관리자입니다.</param>
      <param name="start">메서드가 반환되면 <paramref name="manager" />가 나타나는 <paramref name="memory" />의 시작부터 오프셋입니다.</param>
      <param name="length">메서드가 반환되면 <paramref name="manager" />가 나타나는 <paramref name="memory" />의 길이입니다.</param>
      <typeparam name="T">읽기 전용 메모리 버퍼에 있는 항목의 형식입니다.</typeparam>
      <typeparam name="TManager">검색할 <see cref="T:System.Buffers.MemoryManager`1" />의 형식입니다.</typeparam>
      <returns>메서드가 성공한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)">
      <summary>
        <see langword="System.ReadOnlyMemory&lt;Char&gt;" />에서 기본 문자열을 가져오려고 합니다.</summary>
      <param name="memory">문자 블록을 포함하는 읽기 전용 메모리입니다.</param>
      <param name="text">메서드가 반환되면 메모리 버퍼에 포함된 문자열입니다.</param>
      <param name="start">
        <paramref name="text" />의 시작 위치입니다.</param>
      <param name="length">
        <paramref name="text" />에 있는 문자 수입니다.</param>
      <returns>메서드가 기본 문자열을 성공적으로 검색하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)">
      <summary>읽기 전형 바이트 범위에서 <paramref name="T" /> 형식의 구조체를 읽으려고 합니다.</summary>
      <param name="source">읽기 전용 범위(바이트)입니다.</param>
      <param name="value">메서드가 반환되면 <paramref name="T" />의 인스턴스입니다.</param>
      <typeparam name="T">검색할 구조체의 형식입니다.</typeparam>
      <returns>메서드가 구조체의 인스턴스를 검색하는 데 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" />에는 참조 또는 포인터가 있습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)">
      <summary>
        <paramref name="T" /> 형식의 구조체를 바이트 범위로 쓰려고 합니다.</summary>
      <param name="destination">구조체를 포함할 범위(바이트)입니다.</param>
      <param name="value">범위에 기록할 구조체입니다.</param>
      <typeparam name="T">구조체의 형식입니다.</typeparam>
      <returns>쓰기 작업에 성공한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 범위가 너무 작아서 <see langword="false" />를 포함할 수 없는 경우 메서드는 <paramref name="T" />를 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" />에는 참조 또는 포인터가 있습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)">
      <summary>
        <paramref name="T" /> 형식의 구조체를 바이트 범위로 씁니다.</summary>
      <param name="destination">구조체를 포함할 범위(바이트)입니다.</param>
      <param name="value">범위에 기록할 구조체입니다.</param>
      <typeparam name="T">구조체의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" />에는 참조 또는 포인터가 있습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="destination" />이 너무 작아 <paramref name="value" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SequenceMarshal">
      <summary>
        <see cref="T:System.Buffers.ReadOnlySequence`1" />와의 상호 운용을 위한 메서드 컬렉션을 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetArray``1(System.Buffers.ReadOnlySequence{``0},System.ArraySegment{``0}@)">
      <summary>기본 읽기 전용 시퀀스에서 배열 세그먼트를 가져옵니다.</summary>
      <param name="sequence">배열 세그먼트를 검색할 읽기 전용 시퀀스입니다.</param>
      <param name="segment">반환된 배열 세그먼트입니다.</param>
      <typeparam name="T">읽기 전용 시퀀스의 형식입니다.</typeparam>
      <returns>배열 세그먼트를 검색할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" /> 및 기본 배열 세그먼트가 반환됩니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlyMemory``1(System.Buffers.ReadOnlySequence{``0},System.ReadOnlyMemory{``0}@)">
      <summary>지정된 읽기 전용 시퀀스에서 읽기 전용 메모리 검색을 시도합니다.</summary>
      <param name="sequence">메모리를 검색할 읽기 전용 시퀀스입니다.</param>
      <param name="memory">T 형식의 반환된 읽기 전용 메모리입니다.</param>
      <typeparam name="T">읽기 전용 시퀀스의 형식입니다.</typeparam>
      <returns>읽기 전용 메모리를 검색할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlySequenceSegment``1(System.Buffers.ReadOnlySequence{``0},System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@,System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@)">
      <summary>지정된 읽기 전용 시퀀스에서 읽기 전용 시퀀스 세그먼트 검색을 시도합니다.</summary>
      <param name="sequence">읽기 전용 시퀀스 세그먼트를 검색할 읽기 전용 시퀀스입니다.</param>
      <param name="startSegment">시작 읽기 전용 시퀀스 세그먼트입니다.</param>
      <param name="startIndex">초기 위치입니다.</param>
      <param name="endSegment">끝 읽기 전용 시퀀스 세그먼트입니다.</param>
      <param name="endIndex">최종 위치입니다.</param>
      <typeparam name="T">읽기 전용 시퀀스의 형식입니다.</typeparam>
      <returns>읽기 전용 시퀀스 세그먼트를 검색할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryRead``1(System.Buffers.SequenceReader{System.Byte}@,``0@)">
      <summary>버퍼에서 지정된 형식 읽기를 시도합니다. 임의 구조체와 함께 이 메서드를 사용하는 것은 위험합니다. 자세한 내용은 설명 부분을 참조하세요.</summary>
      <param name="reader">시퀀스 판독기에 대한 참조입니다.</param>
      <param name="value">읽기에 성공한 경우 반환되는 값입니다. 실패한 경우(공간 부족으로 인해) <paramref name="value" />는 <see langword="default" />가 됩니다.</param>
      <typeparam name="T">값의 형식입니다.</typeparam>
      <returns>읽기 시도에 성공했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.SequencePosition">
      <summary>인접하지 않은 메모리 집합의 위치를 나타냅니다. 이 형식의 속성은 해당 속성을 만든 형식으로만 해석되어야 합니다.</summary>
    </member>
    <member name="M:System.SequencePosition.#ctor(System.Object,System.Int32)">
      <summary>
        <see cref="T:System.SequencePosition" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="object">인접하지 않은 메모리 집합입니다.</param>
      <param name="integer">
        <paramref name="object" /> 내의 위치입니다.</param>
    </member>
    <member name="M:System.SequencePosition.Equals(System.Object)">
      <summary>현재 인스턴스가 다른 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>
        <paramref name="obj" />가 <see cref="T:System.SequencePosition" /> 유형이고 현재 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.SequencePosition.Equals(System.SequencePosition)">
      <summary>현재 인스턴스와 다른 <see cref="T:System.SequencePosition" />이 같은지 나타냅니다.</summary>
      <param name="other">현재 인스턴스와 비교할 시퀀스 위치입니다.</param>
      <returns>두 인스턴스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.SequencePosition.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.SequencePosition.GetInteger">
      <summary>이 <see cref="T:System.SequencePosition" />의 정수 부분을 반환합니다.</summary>
      <returns>이 시퀀스 위치의 정수 부분입니다.</returns>
    </member>
    <member name="M:System.SequencePosition.GetObject">
      <summary>이 <see cref="T:System.SequencePosition" />의 개체 부분을 반환합니다.</summary>
      <returns>이 시퀀스 위치의 개체 부분입니다.</returns>
    </member>
    <member name="T:System.Text.SpanRuneEnumerator">
      <summary>UTF-16 텍스트가 포함된 범위로 표현된 <see cref="T:System.Text.Rune" /> 값의 열거자를 제공합니다.</summary>
    </member>
    <member name="P:System.Text.SpanRuneEnumerator.Current">
      <summary>열거자의 현재 위치에 있는 <see cref="T:System.Text.Rune" />를 가져옵니다.</summary>
      <returns>열거자의 현재 위치 에 있는입니다. <see cref="T:System.Text.Rune" /></returns>
    </member>
    <member name="M:System.Text.SpanRuneEnumerator.GetEnumerator">
      <summary>현재 열거자 인스턴스를 반환합니다.</summary>
      <returns>현재 열거자 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Text.SpanRuneEnumerator.MoveNext">
      <summary>열거자를 범위의 다음 <see cref="T:System.Text.Rune" />으로 이동합니다.</summary>
      <returns>열거자가 다음 항목으로 성공적으로 이동한 경우 <see langword="true" />이며, 범위의 끝에 도달한 경우에는 <see langword="false" />입니다.</returns>
    </member>
  </members>
</doc>
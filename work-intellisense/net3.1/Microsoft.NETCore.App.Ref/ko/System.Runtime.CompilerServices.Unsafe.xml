<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.CompilerServices.Unsafe</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.CompilerServices.Unsafe">
      <summary>포인터 조작을 위한 일반적인 하위 수준 기능을 포함합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)">
      <summary>지정된 참조에 요소 오프셋을 추가합니다.</summary>
      <param name="source">오프셋을 더할 참조입니다.</param>
      <param name="elementOffset">더할 오프셋입니다.</param>
      <typeparam name="T">형식 참조입니다.</typeparam>
      <returns>포인터에 대한 오프셋의 추가를 반영하는 새로운 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)">
      <summary>지정된 참조에 요소 오프셋을 추가합니다.</summary>
      <param name="source">오프셋을 더할 참조입니다.</param>
      <param name="elementOffset">더할 오프셋입니다.</param>
      <typeparam name="T">형식 참조입니다.</typeparam>
      <returns>포인터에 대한 오프셋의 추가를 반영하는 새로운 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)">
      <summary>지정된 void 포인터에 요소 오프셋을 추가합니다.</summary>
      <param name="source">오프셋을 추가할 void 포인터입니다.</param>
      <param name="elementOffset">더할 오프셋입니다.</param>
      <typeparam name="T">Void 포인터의 형식입니다.</typeparam>
      <returns>지정된 포인터에 오프셋 추가를 반영하는 새 void 포인터입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)">
      <summary>지정된 참조에 바이트 오프셋을 추가합니다.</summary>
      <param name="source">오프셋을 더할 참조입니다.</param>
      <param name="byteOffset">더할 오프셋입니다.</param>
      <typeparam name="T">형식 참조입니다.</typeparam>
      <returns>포인터에 대한 바이트 오프셋의 추가를 반영하는 새로운 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)">
      <summary>지정된 참조가 동일한 위치를 가리키는지 여부를 결정합니다.</summary>
      <param name="left">비교할 첫 번째 참조입니다.</param>
      <param name="right">비교할 두 번째 참조입니다.</param>
      <typeparam name="T">형식 참조입니다.</typeparam>
      <returns>
        <see langword="true" /> 및 <paramref name="left" />이 동일한 위치를 가리키며 <paramref name="right" />이며, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)">
      <summary>지정된 개체를 지정된 형식으로 캐스팅합니다.</summary>
      <param name="o">캐스트할 개체입니다.</param>
      <typeparam name="T">개체를 캐스팅할 수 있는 형식입니다.</typeparam>
      <returns>지정된 형식에 캐스트된 원본 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)">
      <summary>지정된 참조를 형식 <typeparamref name="TTo" />의 값에 대한 참조로 재해석합니다.</summary>
      <param name="source">재해석할 참조입니다.</param>
      <typeparam name="TFrom">다시 해석할 참조의 형식입니다.</typeparam>
      <typeparam name="TTo">원하는 형식 참조입니다.</typeparam>
      <returns>형식 <typeparamref name="TTo" />의 값에 대한 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)">
      <summary>지정된 by-ref 매개 변수에 대한 포인터를 반환합니다.</summary>
      <param name="value">포인터를 얻은 개체입니다.</param>
      <typeparam name="T">개체의 형식입니다.</typeparam>
      <returns>지정된 값에 대한 포인터입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)">
      <summary>지정된 읽기 전용 참조를 참조로 재해석합니다.</summary>
      <param name="source">재해석에 대한 읽기 전용 참조입니다.</param>
      <typeparam name="T">형식 참조입니다.</typeparam>
      <returns>형식 <typeparamref name="T" />의 값에 대한 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)">
      <summary>지정된 위치를 형식 <typeparamref name="T" />의 값에 대한 참조로 재해석합니다.</summary>
      <param name="source">참조할 값의 위치입니다.</param>
      <typeparam name="T">해석 된 위치의 형식입니다.</typeparam>
      <returns>형식 <typeparamref name="T" />의 값에 대한 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)">
      <summary>지정된 참조부터 원점에서 대상까지의 바이트 오프셋을 결정합니다.</summary>
      <param name="origin">원본에 대한 참조입니다.</param>
      <param name="target">대상에 대한 참조입니다.</param>
      <typeparam name="T">형식 참조입니다.</typeparam>
      <returns>원점에서 대상(즉 <paramref name="target" /> - <paramref name="origin" />)까지 바이트 오프셋입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)">
      <summary>지정된 위치에 형식 <typeparamref name="T" />의 값을 복사합니다.</summary>
      <param name="destination">복사할 위치입니다.</param>
      <param name="source">복사할 값에 대한 포인터입니다.</param>
      <typeparam name="T">복사할 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)">
      <summary>지정된 위치에 형식 <typeparamref name="T" />의 값을 복사합니다.</summary>
      <param name="destination">복사할 위치입니다.</param>
      <param name="source">복사할 값에 대한 참조입니다.</param>
      <typeparam name="T">복사할 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)">
      <summary>원본 주소에서 대상 주소로 바이트를 복사합니다.</summary>
      <param name="destination">복사할 대상 주소입니다.</param>
      <param name="source">복사할 원본 주소입니다.</param>
      <param name="byteCount">복사할 바이트 수입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)">
      <summary>원본 주소에서 대상 주소로 바이트를 복사합니다.</summary>
      <param name="destination">복사할 대상 주소입니다.</param>
      <param name="source">복사할 원본 주소입니다.</param>
      <param name="byteCount">복사할 바이트 수입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)">
      <summary>주소의 아키텍처 종속 맞춤을 가정하지 않고 원본 주소에서 대상 주소로 바이트를 복사합니다.</summary>
      <param name="destination">복사할 대상 주소입니다.</param>
      <param name="source">복사할 원본 주소입니다.</param>
      <param name="byteCount">복사할 바이트 수입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)">
      <summary>주소의 아키텍처 종속 맞춤을 가정하지 않고 원본 주소에서 대상 주소로 바이트를 복사합니다.</summary>
      <param name="destination">복사할 대상 주소입니다.</param>
      <param name="source">복사할 원본 주소입니다.</param>
      <param name="byteCount">복사할 바이트 수입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)">
      <summary>지정된 초기 값으로 주어진 위치에서 메모리 블록을 초기화합니다.</summary>
      <param name="startAddress">초기화할 메모리 블록의 시작 주소입니다.</param>
      <param name="value">블록을 초기화할 값입니다.</param>
      <param name="byteCount">초기화할 바이트 수입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)">
      <summary>지정된 초기 값으로 주어진 위치에서 메모리 블록을 초기화합니다.</summary>
      <param name="startAddress">초기화할 메모리 블록의 시작 주소입니다.</param>
      <param name="value">블록을 초기화할 값입니다.</param>
      <param name="byteCount">초기화할 바이트 수입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)">
      <summary>주소의 아키텍처 종속 맞춤을 가정하지 않고 지정된 초기 값으로 주어진 위치에서 메모리 블록을 초기화합니다.</summary>
      <param name="startAddress">초기화할 메모리 블록의 시작 주소입니다.</param>
      <param name="value">블록을 초기화할 값입니다.</param>
      <param name="byteCount">초기화할 바이트 수입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)">
      <summary>주소의 아키텍처 종속 맞춤을 가정하지 않고 지정된 초기 값으로 주어진 위치에서 메모리 블록을 초기화합니다.</summary>
      <param name="startAddress">초기화할 메모리 블록의 시작 주소입니다.</param>
      <param name="value">블록을 초기화할 값입니다.</param>
      <param name="byteCount">초기화할 바이트 수입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)">
      <summary>지정된 참조가 지정된 다른 참조보다 큰지를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 값입니다.</param>
      <param name="right">비교할 두 번째 값입니다.</param>
      <typeparam name="T">참조의 형식입니다.</typeparam>
      <returns>
        <see langword="true" />이 <paramref name="left" />보다 크면 <paramref name="right" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)">
      <summary>지정된 참조가 지정된 다른 참조보다 작은지를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 값입니다.</param>
      <param name="right">비교할 두 번째 값입니다.</param>
      <typeparam name="T">참조의 형식입니다.</typeparam>
      <returns>
        <see langword="true" />가 <paramref name="left" />보다 작으면 <paramref name="right" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)">
      <summary>지정된 위치에서 형식 <typeparamref name="T" />의 값을 읽습니다.</summary>
      <param name="source">읽을 위치입니다.</param>
      <typeparam name="T">읽을 형식입니다.</typeparam>
      <returns>지정된 위치에서 읽은 형식 <typeparamref name="T" />의 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)">
      <summary>주소의 아키텍처 종속 맞춤을 가정하지 않고 지정된 위치에서 형식 <typeparamref name="T" />의 값을 읽습니다.</summary>
      <param name="source">읽을 위치입니다.</param>
      <typeparam name="T">읽을 형식입니다.</typeparam>
      <returns>지정된 위치에서 읽은 형식 <typeparamref name="T" />의 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)">
      <summary>주소의 아키텍처 종속 맞춤을 가정하지 않고 지정된 위치에서 형식 <typeparamref name="T" />의 값을 읽습니다.</summary>
      <param name="source">읽을 위치입니다.</param>
      <typeparam name="T">읽을 형식입니다.</typeparam>
      <returns>지정된 위치에서 읽은 형식 <typeparamref name="T" />의 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1">
      <summary>지정된 형식 매개 변수의 개체 크기를 반환합니다.</summary>
      <typeparam name="T">해당 크기를 검색 하는 개체의 형식입니다.</typeparam>
      <returns>형식 <typeparamref name="T" />의 개체 크기입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)">
      <summary>지정된 참조에서 요소 오프셋을 뺍니다.</summary>
      <param name="source">오프셋을 뺄 참조입니다.</param>
      <param name="elementOffset">뺄 오프셋입니다.</param>
      <typeparam name="T">형식 참조입니다.</typeparam>
      <returns>포인터에서 오프셋의 빼기를 반영하는 새로운 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)">
      <summary>지정된 참조에서 요소 오프셋을 뺍니다.</summary>
      <param name="source">오프셋을 뺄 참조입니다.</param>
      <param name="elementOffset">뺄 오프셋입니다.</param>
      <typeparam name="T">형식 참조입니다.</typeparam>
      <returns>포인터에서 오프셋의 빼기를 반영하는 새로운 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)">
      <summary>지정된 void 포인터에서 요소 오프셋을 뺍니다.</summary>
      <param name="source">오프셋을 뺄 void 포인터입니다.</param>
      <param name="elementOffset">뺄 오프셋입니다.</param>
      <typeparam name="T">Void 포인터의 형식입니다.</typeparam>
      <returns>지정된 포인터에서 오프셋 빼기를 반영하는 새 void 포인터입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)">
      <summary>지정된 참조에서 바이트 오프셋을 뺍니다.</summary>
      <param name="source">오프셋을 뺄 참조입니다.</param>
      <param name="byteOffset">뺄 오프셋입니다.</param>
      <typeparam name="T">형식 참조입니다.</typeparam>
      <returns>포인터에서 바이트 오프셋의 빼기를 반영하는 새로운 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Unbox``1(System.Object)">
      <summary>boxed 값에 대해 <see langword="mutable ref" />를 반환합니다.</summary>
      <param name="box">unboxing할 값입니다.</param>
      <typeparam name="T">Unboxing 할 형식입니다.</typeparam>
      <returns>boxed 값 <see langword="mutable ref" />에 대해 <paramref name="box" />를 반환합니다.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="box" />가 <see langword="null" />이며 <typeparamref name="T" />는 nullable이 아닌 값 형식입니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="box" />가 boxed 값 형식이 아닙니다.
-또는-
<paramref name="box" />가 boxed <typeparamref name="T" />가 아닙니다.</exception>
      <exception cref="T:System.TypeLoadException">
        <typeparamref name="T" /> 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)">
      <summary>지정된 위치에 형식 <typeparamref name="T" />의 값을 작성합니다.</summary>
      <param name="destination">작성할 위치입니다.</param>
      <param name="value">작성할 값입니다.</param>
      <typeparam name="T">쓸 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)">
      <summary>주소의 아키텍처 종속 맞춤을 가정하지 않고 지정된 위치에서 형식 <typeparamref name="T" />의 값을 작성합니다.</summary>
      <param name="destination">작성할 위치입니다.</param>
      <param name="value">작성할 값입니다.</param>
      <typeparam name="T">쓸 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)">
      <summary>주소의 아키텍처 종속 맞춤을 가정하지 않고 지정된 위치에서 형식 <typeparamref name="T" />의 값을 작성합니다.</summary>
      <param name="destination">작성할 위치입니다.</param>
      <param name="value">작성할 값입니다.</param>
      <typeparam name="T">쓸 값의 형식입니다.</typeparam>
    </member>
  </members>
</doc>
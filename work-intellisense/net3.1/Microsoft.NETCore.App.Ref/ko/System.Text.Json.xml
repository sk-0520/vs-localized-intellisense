<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct handles comments.">
        <see cref="T:System.Text.Json.Utf8JsonReader" /> 구조체가 주석을 처리하는 방법을 정의합니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary vsli:raw="Allows comments within the JSON input and treats them as valid tokens. While reading, the caller can access the comment values.">JSON 입력 내에서 주석을 허용하고 유효한 토큰으로 간주합니다. 읽는 동안 호출자는 주석 값에 액세스할 수 있습니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary vsli:raw="Doesn't allow comments within the JSON input. Comments are treated as invalid JSON if found, and a &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; is thrown. This is the default value.">JSON 입력 내에서 주석을 허용하지 않습니다. 주석이 발견되면 잘못된 JSON으로 간주되고 <see cref="T:System.Text.Json.JsonException" />이 throw됩니다. 기본값입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary vsli:raw="Allows comments within the JSON input and ignores them. The &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; behaves as if no comments are present.">JSON 입력 내에서 주석을 허용하고 무시합니다. <see cref="T:System.Text.Json.Utf8JsonReader" />는 주석이 없는 것처럼 동작합니다.</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary vsli:raw="Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values.">데이터 값을 자동으로 인스턴스화하지 않고 JSON 값의 구조적 콘텐츠를 검사하는 메커니즘을 제공합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonDocument&quot;&gt;&lt;/xref&gt; instance.">이 <see cref="T:System.Text.Json.JsonDocument" /> 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a sequence as UTF-8-encoded text representing a single JSON value into a JsonDocument.">시퀀스를 단일 JSON 바이트 값을 나타내는 UTF-8로 인코딩된 텍스트로 구문 분석하여 JsonDocument로 변환합니다.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">구문 분석할 JSON 텍스트입니다.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">구문 분석하는 동안 판독기 동작을 제어하는 옵션입니다.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 값의 JsonDocument 표현입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" />은 유효한 단일 JSON 값을 나타내지 않습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" />에 지원되지 않는 옵션이 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">
        <see cref="T:System.IO.Stream" />을 단일 JSON 값을 나타내는 UTF-8로 인코딩된 데이터로 구문 분석하여 JsonDocument로 변환합니다. 완료될 때까지 스트림을 읽습니다.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">구문 분석할 JSON 데이터입니다.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">구문 분석하는 동안 판독기 동작을 제어하는 옵션입니다.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 값의 JsonDocument 표현입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" />은 유효한 단일 JSON 값을 나타내지 않습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" />에 지원되지 않는 옵션이 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses memory as UTF-8-encoded text representing a single JSON value into a JsonDocument.">메모리를 단일 JSON 바이트 값을 나타내는 UTF-8로 인코딩된 텍스트로 구문 분석하여 JsonDocument로 변환합니다.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">구문 분석할 JSON 텍스트입니다.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">구문 분석하는 동안 판독기 동작을 제어하는 옵션입니다.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 값의 JsonDocument 표현입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" />은 유효한 단일 JSON 값을 나타내지 않습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" />에 지원되지 않는 옵션이 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON value into a JsonDocument.">단일 JSON 문자 값을 나타내는 텍스트를 구문 분석하여 JsonDocument로 변환합니다.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">구문 분석할 JSON 텍스트입니다.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">구문 분석하는 동안 판독기 동작을 제어하는 옵션입니다.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 값의 JsonDocument 표현입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" />은 유효한 단일 JSON 값을 나타내지 않습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" />에 지원되지 않는 옵션이 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON string value into a JsonDocument.">단일 JSON 문자열 값을 나타내는 텍스트를 구문 분석하여 JsonDocument로 변환합니다.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">구문 분석할 JSON 텍스트입니다.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">구문 분석하는 동안 판독기 동작을 제어하는 옵션입니다.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 값의 JsonDocument 표현입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" />은 유효한 단일 JSON 값을 나타내지 않습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" />에 지원되지 않는 옵션이 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">
        <see cref="T:System.IO.Stream" />을 단일 JSON 값을 나타내는 UTF-8로 인코딩된 데이터로 구문 분석하여 JsonDocument로 변환합니다. 완료될 때까지 스트림을 읽습니다.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">구문 분석할 JSON 데이터입니다.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">구문 분석하는 동안 판독기 동작을 제어하는 옵션입니다.</param>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests.">취소 요청을 모니터링할 토큰입니다.</param>
      <returns vsli:raw="A task to produce a JsonDocument representation of the JSON value.">JSON 값의 JsonDocument 표현을 생성하는 작업입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" />은 유효한 단일 JSON 값을 나타내지 않습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" />에 지원되지 않는 옵션이 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary vsli:raw="Parses one JSON value (including objects or arrays) from the provided reader.">제공된 판독기에서 단일 JSON 값(개체 또는 배열 포함)을 구문 분석합니다.</summary>
      <param name="reader" vsli:raw="The reader to read.">읽을 판독기입니다.</param>
      <returns vsli:raw="A JsonDocument representing the value (and nested values) read from the reader.">판독기에서 읽은 값(및 중첩된 값)을 나타내는 JsonDocument입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" />에 지원되지 않는 옵션이 있습니다.
-또는-
현재 <paramref name="reader" /> 토큰은 값을 시작하거나 표시하지 않습니다.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">판독기에서 값을 읽을 수 없습니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary vsli:raw="Gets the root element of this JSON document.">이 JSON 문서의 루트 요소를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the document.">문서의 값을 나타내는 <see cref="T:System.Text.Json.JsonElement" />입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary vsli:raw="Attempts to parse one JSON value (including objects or arrays) from the provided reader.">제공된 판독기에서 단일 JSON 값(개체 또는 배열 포함)을 구문 분석하려고 합니다.</summary>
      <param name="reader" vsli:raw="The reader to read.">읽을 판독기입니다.</param>
      <param name="document" vsli:raw="When the method returns, contains the parsed document.">메서드가 반환되면 구문 분석된 문서가 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a value was read and parsed into a JsonDocument; &lt;see langword=&quot;false&quot; /&gt; if the reader ran out of data while parsing. All other situations result in an exception being thrown.">값을 읽고 JsonDocument로 구문 분석한 경우 <see langword="true" />이고, 구문 분석하는 동안 판독기에 데이터가 부족한 경우 <see langword="false" />입니다. 다른 모든 상황에서는 예외가 발생합니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" />에 지원되지 않는 옵션이 있습니다.
-또는-
현재 <paramref name="reader" /> 토큰은 값을 시작하거나 표시하지 않습니다.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">판독기에서 값을 읽을 수 없습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the document to the provided writer as a JSON value.">제공된 기록기에 문서를 JSON 값으로 씁니다.</summary>
      <param name="writer" vsli:raw="The writer to which to write the document.">문서를 작성할 기록기입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this &lt;see cref=&quot;P:System.Text.Json.JsonDocument.RootElement&quot; /&gt; would result in invalid JSON.">이 <see cref="P:System.Text.Json.JsonElement.ValueKind" />의 <see cref="P:System.Text.Json.JsonDocument.RootElement" />로 인해 JSON이 잘못될 수 있습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when parsing JSON to create a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">JSON을 구문 분석하여 <see cref="T:System.Text.Json.JsonDocument" />를 만들 때 사용자 지정 동작을 정의할 수 있는 기능을 사용자에게 제공합니다.</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">읽고 있는 JSON 페이로드 내에서 개체 또는 배열의 JSON 값 목록 끝에 추가 쉼표가 허용되는지(그리고 무시되는지) 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. Default is &lt;see langword=&quot;false&quot; /&gt;">개체 또는 배열에서 JSON 값 목록의 끝에 추가 쉼표를 사용할 수 있으면이 고, 그렇지 않으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" /></returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; handles comments when reading through the JSON data.">JSON 데이터를 읽을 때 <see cref="T:System.Text.Json.JsonDocument" />에서 주석을 처리하는 방법을 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">주석을 처리 하는 방법을 나타내는 열거형 값 중 하나입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">주석 처리 열거형이 지원되지 않거나 <see cref="T:System.Text.Json.JsonCommentHandling" /> 열거형 범위에 포함되지 않는 값으로 설정되어 있습니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when parsing JSON data, with the default (that is, 0) indicating a maximum depth of 64.">최대 깊이 64를 나타내는 기본값(즉, 0)을 사용하여, JSON 데이터를 구문 분석할 때 허용되는 최대 깊이를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The maximum depth allowed when parsing JSON data.">JSON 데이터를 구문 분석할 때 허용 되는 최대 깊이입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">최대 깊이가 음수 값으로 설정된 경우</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary vsli:raw="Represents a specific JSON value within a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">
        <see cref="T:System.Text.Json.JsonDocument" /> 내에서 특정 JSON 값을 나타냅니다.</summary>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary vsli:raw="Represents an enumerator for the contents of a JSON array.">JSON 배열 콘텐츠의 열거자를 나타냅니다.</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ArrayEnumerator&quot;&gt;&lt;/xref&gt; instance.">이 <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" /> 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">배열에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">열거자를 컬렉션의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션 전체에서 반복하는 데 사용할 수 있는 <see cref="T:System.Text.Json.JsonElement" /> 배열의 열거자입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary vsli:raw="Gets a JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">원래 <see cref="T:System.Text.Json.JsonDocument" />의 수명을 초과하여 안전하게 저장할 수 있는 JsonElement를 가져옵니다.</summary>
      <returns vsli:raw="A JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">원래 <see cref="T:System.Text.Json.JsonDocument" />의 수명을 초과하여 안전하게 저장할 수 있는 JsonElement입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary vsli:raw="Gets an enumerator to enumerate the values in the JSON array represented by this JsonElement.">이 JsonElement로 표현된 JSON 배열의 값을 열거하는 열거자를 가져옵니다.</summary>
      <returns vsli:raw="An enumerator to enumerate the values in the JSON array represented by this JsonElement.">이 JsonElement로 표현된 JSON 배열의 값을 열거하는 열거자입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Array" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary vsli:raw="Gets an enumerator to enumerate the properties in the JSON object represented by this JsonElement.">이 JsonElement로 표현된 JSON 개체의 속성을 열거하는 열거자를 가져옵니다.</summary>
      <returns vsli:raw="An enumerator to enumerate the properties in the JSON object represented by this JsonElement.">이 JsonElement로 표현된 JSON 개체의 속성을 열거하는 열거자입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Object" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary vsli:raw="Gets the number of values contained within the current array value.">현재 배열 값에 포함된 값의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of values contained within the current array value.">현재 배열 값에 포함된 값의 수입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Array" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">요소 값을 <see cref="T:System.Boolean" />으로 가져옵니다.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">요소 값은 <see cref="T:System.Boolean" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.True&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.False&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.True" />도 <see cref="F:System.Text.Json.JsonValueKind.False" />도 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.Byte" />로 가져옵니다.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">현재 JSON 숫자는 <see cref="T:System.Byte" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">값은 <see cref="T:System.Byte" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary vsli:raw="Gets the value of the element as a byte array.">요소의 값을 바이트 배열로 가져옵니다.</summary>
      <returns vsli:raw="The value decoded as a byte array.">바이트 배열로 디코딩된 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text and hence cannot be decoded to bytes.">값은 Base 64 텍스트로 인코딩되지 않으므로 바이트로 디코딩할 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">요소 값을 <see cref="T:System.DateTime" />으로 가져옵니다.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">요소 값은 <see cref="T:System.DateTime" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">값은 <see cref="T:System.DateTime" />으로 읽을 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">요소 값을 <see cref="T:System.DateTimeOffset" />으로 가져옵니다.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">요소 값은 <see cref="T:System.DateTimeOffset" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">값은 <see cref="T:System.DateTimeOffset" />으로 읽을 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.Decimal" />로 가져옵니다.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">현재 JSON 숫자는 <see cref="T:System.Decimal" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">값은 <see cref="T:System.Decimal" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.Double" />로 가져옵니다.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">현재 JSON 숫자는 <see cref="T:System.Double" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">값은 <see cref="T:System.Double" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">요소 값을 <see cref="T:System.Guid" />으로 가져옵니다.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">요소 값은 <see cref="T:System.Guid" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">값은 <see cref="T:System.Guid" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.Int16" />로 가져옵니다.</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">현재 JSON 숫자는 <see cref="T:System.Int16" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">값은 <see cref="T:System.Int16" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.Int32" />로 가져옵니다.</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">현재 JSON 숫자는 <see cref="T:System.Int32" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">값은 <see cref="T:System.Int32" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.Int64" />로 가져옵니다.</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">현재 JSON 숫자는 <see cref="T:System.Int64" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">값은 <see cref="T:System.Int64" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;utf8PropertyName&quot; /&gt;.">
        <see cref="T:System.Text.Json.JsonElement" />으로 식별된 필수 속성 값을 나타내는 <paramref name="utf8PropertyName" />를 가져옵니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 representation (with no Byte-Order-Mark (BOM)) of the name of the property to return.">반환할 속성 이름에 대한 UTF-8 표현(BOM(바이트 순서 표시) 없음)입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">요청한 속성 값을 나타내는 <see cref="T:System.Text.Json.JsonElement" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Object" />가 아닙니다.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">요청한 이름의 속성을 찾을 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">
        <see cref="T:System.Text.Json.JsonElement" />으로 식별된 필수 속성 값을 나타내는 <paramref name="propertyName" />를 가져옵니다.</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">값이 반환될 속성의 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">요청한 속성 값을 나타내는 <see cref="T:System.Text.Json.JsonElement" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Object" />가 아닙니다.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">요청한 이름의 속성을 찾을 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">
        <see cref="T:System.Text.Json.JsonElement" />으로 식별된 필수 속성 값을 나타내는 <paramref name="propertyName" />를 가져옵니다.</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">값이 반환될 속성의 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">요청한 속성 값을 나타내는 <see cref="T:System.Text.Json.JsonElement" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Object" />가 아닙니다.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">요청한 이름의 속성을 찾을 수 없습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary vsli:raw="Gets a string that represents the original input data backing this value.">이 값을 지원하는 원래 입력 데이터를 나타내는 문자열을 가져옵니다.</summary>
      <returns vsli:raw="The original input data backing this value.">이 값을 지원하는 원래 입력 데이터입니다.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.SByte" />로 가져옵니다.</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">현재 JSON 숫자는 <see cref="T:System.SByte" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">값은 <see cref="T:System.SByte" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.Single" />로 가져옵니다.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">현재 JSON 숫자는 <see cref="T:System.Single" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">값은 <see cref="T:System.Single" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">요소 값을 <see cref="T:System.String" />으로 가져옵니다.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">요소 값은 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />도 <see cref="F:System.Text.Json.JsonValueKind.Null" />도 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.UInt16" />로 가져옵니다.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">현재 JSON 숫자는 <see cref="T:System.UInt16" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">값은 <see cref="T:System.UInt16" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.UInt32" />로 가져옵니다.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">현재 JSON 숫자는 <see cref="T:System.UInt32" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">값은 <see cref="T:System.UInt32" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.UInt64" />로 가져옵니다.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">현재 JSON 숫자는 <see cref="T:System.UInt64" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">값은 <see cref="T:System.UInt64" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary vsli:raw="Gets the value at the specified index if the current value is an &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">현재 값이 <see cref="F:System.Text.Json.JsonValueKind.Array" />이면 지정한 인덱스에서 값을 가져옵니다.</summary>
      <param name="index" vsli:raw="The item index.">항목 인덱스입니다.</param>
      <returns vsli:raw="The value at the specified index.">지정한 인덱스의 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Array" />가 아닙니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not in the range [0, &lt;see cref=&quot;M:System.Text.Json.JsonElement.GetArrayLength&quot; /&gt;()).">
        <paramref name="index" />는 [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()] 범위에 있지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary vsli:raw="Represents an enumerator for the properties of a JSON object.">JSON 개체의 속성에 대한 열거자를 나타냅니다.</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ObjectEnumerator&quot;&gt;&lt;/xref&gt; instance.">이 <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" /> 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates the properties of an object.">개체의 속성을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the object.">개체를 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">열거자를 컬렉션의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Text.Json.JsonProperty" /> 개체의 열거자입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary vsli:raw="Gets a string representation for the current value appropriate to the value type.">값 형식에 적합한 현재 값에 대한 문자열 표현을 가져옵니다.</summary>
      <returns vsli:raw="A string representation for the current value appropriate to the value type.">값 형식에 적합한 현재 값에 대한 문자열 표현입니다.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.Byte" />로 나타내려고 합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">메서드가 반환되면 변환에 성공한 경우 현재 JSON 숫자에 해당하는 바이트가 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">숫자를 <see langword="true" />로 나타낼 수 있으면 <see cref="T:System.Byte" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a byte array, assuming that it is Base64 encoded.">Base64로 인코딩된 것으로 가정하고 현재 JSON 문자열을 바이트 배열로 표시하려고 시도합니다.</summary>
      <param name="value" vsli:raw="If the method succeeds, contains the decoded binary representation of the Base64 text.">메서드가 성공하면 Base64 텍스트의 디코딩된 이진 표현을 포함합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전체 토큰 값이 유효한 Base 64 텍스트로 인코딩되고 바이트에 성공적으로 디코딩할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">현재 JSON 문자열을 <see cref="T:System.DateTime" />으로 나타내려고 합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">이 메서드가 반환되면 현재 JSON 문자열에 해당하는 날짜 및 시간 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">문자열을 <see langword="true" />로 나타낼 수 있으면 <see cref="T:System.DateTime" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">현재 JSON 문자열을 <see cref="T:System.DateTimeOffset" />으로 나타내려고 합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">이 메서드가 반환되면 현재 JSON 문자열에 해당하는 날짜 및 시간이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">문자열을 <see langword="true" />로 나타낼 수 있으면 <see cref="T:System.DateTimeOffset" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.Decimal" />로 나타내려고 합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드가 반환되면 현재 JSON 숫자에 해당하는 10진수가 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">숫자를 <see langword="true" />로 나타낼 수 있으면 <see cref="T:System.Decimal" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.Double" />로 나타내려고 합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드가 반환되면 현재 JSON 숫자에 해당하는 배정밀도 부동 소수점 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">숫자를 <see langword="true" />로 나타낼 수 있으면 <see cref="T:System.Double" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">현재 JSON 문자열을 <see cref="T:System.Guid" />으로 나타내려고 합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">이 메서드가 반환되면 현재 JSON 문자열에 해당하는 GUID가 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">문자열을 <see langword="true" />로 나타낼 수 있으면 <see cref="T:System.Guid" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.Int16" />로 나타내려고 합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">메서드가 반환되면 변환에 성공한 경우 현재 JSON 숫자에 해당하는 16비트 정수가 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">숫자를 <see langword="true" />로 나타낼 수 있으면 <see cref="T:System.Int16" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.Int32" />로 나타내려고 합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드가 반환되면 현재 JSON 숫자에 해당하는 32비트 정수 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">숫자를 <see langword="true" />로 나타낼 수 있으면 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.Int64" />로 나타내려고 합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드가 반환되면 현재 JSON 숫자에 해당하는 64비트 정수 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">숫자를 <see langword="true" />로 나타낼 수 있으면 <see cref="T:System.Int64" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;utf8PropertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">현재 개체에서 <paramref name="utf8PropertyName" />이라는 속성을 찾고 해당 속성이 있는지 여부를 나타내는 값을 반환합니다. 속성이 있으면 메서드에서 해당 값을 <paramref name="value" /> 인수에 할당합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.">반환할 속성 이름에 대한 UTF-8 표현(BOM(바이트 순서 표시) 없음)입니다.</param>
      <param name="value" vsli:raw="Receives the value of the located property.">찾은 속성 값을 받습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">속성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Object" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">현재 개체에서 <paramref name="propertyName" />이라는 속성을 찾고 해당 속성이 있는지 여부를 나타내는 값을 반환합니다. 속성이 있으면 메서드에서 해당 값을 <paramref name="value" /> 인수에 할당합니다.</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">찾으려는 속성의 이름입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">이 메서드가 반환되면 지정한 속성 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">속성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Object" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, its value is assigned to the &lt;paramref name=&quot;value&quot; /&gt; argument.">현재 개체에서 <paramref name="propertyName" />이라는 속성을 찾고 해당 속성이 있는지 여부를 나타내는 값을 반환합니다. 속성이 있으면 해당 값이 <paramref name="value" /> 인수에 할당됩니다.</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">찾으려는 속성의 이름입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">이 메서드가 반환되면 지정한 속성 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">속성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Object" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.SByte" />로 나타내려고 합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">메서드가 반환되면 변환에 성공한 경우 현재 JSON 숫자에 해당하는 부호 있는 바이트가 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">숫자를 <see langword="true" />로 나타낼 수 있으면 <see cref="T:System.SByte" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.Single" />로 나타내려고 합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드가 반환되면 현재 JSON 숫자에 해당하는 단정밀도 부동 소수점 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">숫자를 <see langword="true" />로 나타낼 수 있으면 <see cref="T:System.Single" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.UInt16" />로 나타내려고 합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">메서드가 반환되면 변환에 성공한 경우 현재 JSON 숫자에 해당하는 부호 없는 16비트 정수가 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">숫자를 <see langword="true" />로 나타낼 수 있으면 <see cref="T:System.UInt16" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.UInt32" />로 나타내려고 합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드가 반환되면 현재 JSON 숫자에 해당하는 부호 없는 32비트 정수 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">숫자를 <see langword="true" />로 나타낼 수 있으면 <see cref="T:System.UInt32" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">현재 JSON 숫자를 <see cref="T:System.UInt64" />로 나타내려고 합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드가 반환되면 현재 JSON 숫자에 해당하는 부호 없는 64비트 정수 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">숫자를 <see langword="true" />로 나타낼 수 있으면 <see cref="T:System.UInt64" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the text represented by a UTF8-encoded byte span to the string value of this element.">UTF8으로 인코딩된 바이트 범위로 표시되는 텍스트를 이 요소의 문자열 값과 비교합니다.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">비교할 UTF-8로 인코딩된 텍스트입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element has the same UTF-8 encoding as&#xA;              &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 요소의 문자열 값이 <see langword="true" />와 동일한 UTF-8 인코딩을 가지면 <paramref name="utf8Text" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares a specified read-only character span to the string value of this element.">지정된 읽기 전용 문자 범위를 이 요소의 문자열 값과 비교합니다.</summary>
      <param name="text" vsli:raw="The text to compare against.">비교할 대상인 텍스트입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 요소의 문자열 값이 <see langword="true" />와 일치하면 <paramref name="text" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary vsli:raw="Compares a specified string to the string value of this element.">지정된 문자열을 이 요소의 문자열 값과 비교합니다.</summary>
      <param name="text" vsli:raw="The text to compare against.">비교할 대상인 텍스트입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 요소의 문자열 값이 <see langword="true" />와 일치하면 <paramref name="text" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />가 아닙니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary vsli:raw="Gets the type of the current JSON value.">현재 JSON 값의 형식을 가져옵니다.</summary>
      <returns vsli:raw="The type of the current JSON value.">현재 JSON 값의 형식입니다.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the element to the specified writer as a JSON value.">지정된 기록기에 요소를 JSON 값으로 씁니다.</summary>
      <param name="writer" vsli:raw="The writer to which to write the element.">요소를 작성할 기록기입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this value is &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Undefined&quot; /&gt;.">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />는 <see cref="F:System.Text.Json.JsonValueKind.Undefined" />입니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary vsli:raw="Provides methods to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON.">UTF-8 또는 UTF-16 인코딩 텍스트를 JSON에 적합한 형식으로 변환하는 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a UTF-8 text value as a JSON string.">UTF-8 텍스트 값을 JSON 문자열로 인코딩합니다.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded text to convert to JSON encoded text.">JSON 인코딩 텍스트로 변환할 UTF-8 인코딩된 텍스트입니다.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">문자열을 이스케이프할 때 사용할 인코더입니다. 기본 인코더를 사용하려는 경우에는 <see langword="null" />입니다.</param>
      <returns vsli:raw="The encoded JSON text.">인코딩된 JSON 텍스트입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;utf8Value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains invalid UTF-8 bytes.">
        <paramref name="utf8Value" />이 너무 큰 경우
또는
<paramref name="utf8Value" />에 잘못된 UTF-8 바이트가 들어 있는 경우</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a specified text value as a JSON string.">지정된 텍스트 값을 JSON 문자열로 인코딩합니다.</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">JSON 인코딩된 텍스트로 변환할 값입니다.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">문자열을 이스케이프할 때 사용할 인코더입니다. 기본 인코더를 사용하려는 경우에는 <see langword="null" />입니다.</param>
      <returns vsli:raw="The encoded JSON text.">인코딩된 JSON 텍스트입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" />이 너무 큰 경우
또는
<paramref name="value" />에 잘못된 UTF-16 문자가 들어 있는 경우</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes the string text value as a JSON string.">문자열 텍스트 값을 JSON 문자열로 인코딩합니다.</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">JSON 인코딩된 텍스트로 변환할 값입니다.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">문자열을 이스케이프할 때 사용할 인코더입니다. 기본 인코더를 사용하려는 경우에는 <see langword="null" />입니다.</param>
      <returns vsli:raw="The encoded JSON text.">인코딩된 JSON 텍스트입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" />이 너무 큰 경우
또는
<paramref name="value" />에 잘못된 UTF-16 문자가 들어 있는 경우</exception>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary vsli:raw="Gets the UTF-8 encoded representation of the pre-encoded JSON text.">미리 인코딩된 JSON 텍스트의 UTF-8 인코딩 표현을 가져옵니다.</summary>
      <returns vsli:raw="The UTF-8 encoded representation of the pre-encoded JSON text.">미리 인코딩된 JSON 텍스트의 u t f-8로 인코딩된 표현입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance and a specified object, which must also be a &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance, have the same value.">이 인스턴스와 지정된 개체(<see cref="T:System.Text.Json.JsonEncodedText" /> 인스턴스여야 함)의 값이 같은지를 확인합니다.</summary>
      <param name="obj" vsli:raw="The object to compare to this instance.">이 인스턴스와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 인스턴스와 <paramref name="obj" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Determines whether this instance and another specified &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance have the same value.">이 인스턴스와 지정된 다른 <see cref="T:System.Text.Json.JsonEncodedText" /> 인스턴스의 값이 같은지를 확인합니다.</summary>
      <param name="other" vsli:raw="The object to compare to this instance.">이 인스턴스와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance and &lt;paramref name=&quot;other&quot; /&gt; have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 인스턴스와 <paramref name="other" />의 값이 같으면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt;.">이 <see cref="T:System.Text.Json.JsonEncodedText" />의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="The hash code for this instance.">이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary vsli:raw="Converts the value of this instance to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">이 인스턴스의 값을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <returns vsli:raw="The underlying UTF-16 encoded string.">기본 UTF-16 인코딩 문자열입니다.</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary vsli:raw="Defines a custom exception object that is thrown when invalid JSON text is encountered, the defined maximum depth is passed, or the JSON text is not compatible with the type of a property on an object.">잘못된 JSON 텍스트가 발견되거나, 정의된 최대 깊이가 전달되거나, JSON 텍스트가 개체의 속성 형식과 호환되지 않을 때 throw되는 사용자 지정 예외 개체를 정의합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class.">
        <see cref="T:System.Text.Json.JsonException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Creates a new exception object with serialized data.">직렬화된 데이터로 새 예외 개체를 만듭니다.</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">throw되는 예외에 대한 serialize된 개체 데이터입니다.</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class with a specified error message.">지정된 오류 메시지를 사용하여 <see cref="T:System.Text.Json.JsonException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The context-specific error message.">컨텍스트별 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class, with a specified error message and a reference to the inner exception that is the cause of this exception.">지정된 오류 메시지와 해당 예외의 원인인 내부 예외를 참조하여, <see cref="T:System.Text.Json.JsonException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The context-specific error message.">컨텍스트별 오류 메시지입니다.</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">현재 예외를 발생시킨 예외입니다.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary vsli:raw="Creates a new exception object to relay error information to the user.">사용자에게 오류 정보를 릴레이하기 위해 새로운 예외 개체를 만듭니다.</summary>
      <param name="message" vsli:raw="The context-specific error message.">컨텍스트별 오류 메시지입니다.</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">잘못된 JSON이 발견된 경로입니다.</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">역직렬화할 때 잘못된 JSON이 발견된 줄 번호(0부터 시작)입니다.</param>
      <param name="bytePositionInLine" vsli:raw="The byte count within the current line (starting at 0) where the invalid JSON was encountered.">잘못된 JSON이 발견된 현재 줄(0부터 시작)의 바이트 수입니다.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary vsli:raw="Creates a new exception object to relay error information to the user that includes a specified inner exception.">지정된 내부 예외를 포함하는 사용자에게 오류 정보를 릴레이하는 새 예외 개체를 만듭니다.</summary>
      <param name="message" vsli:raw="The context-specific error message.">컨텍스트별 오류 메시지입니다.</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">잘못된 JSON이 발견된 경로입니다.</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">역직렬화할 때 잘못된 JSON이 발견된 줄 번호(0부터 시작)입니다.</param>
      <param name="bytePositionInLine" vsli:raw="The byte count (starting at 0) within the current line where the invalid JSON was encountered.">잘못된 JSON이 발견된 현재 줄의 바이트 수입니다(0부터 시작).</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">현재 예외를 발생시킨 예외입니다.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary vsli:raw="Gets the zero-based number of bytes read within the current line before the exception.">예외 앞의 현재 줄에서 읽은 바이트 수를 가져옵니다(0부터 시작).</summary>
      <returns vsli:raw="The zero-based number of bytes read within the current line before the exception.">예외 앞의 현재 줄에서 읽은 바이트 수 (0부터 시작)입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">예외에 대한 정보를 사용하여 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 설정합니다.</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">throw되는 예외에 대한 serialize된 개체 데이터입니다.</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 개체입니다.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary vsli:raw="Gets the zero-based number of lines read before the exception.">예외 전에 읽은 줄의 수를 가져옵니다(0부터 시작).</summary>
      <returns vsli:raw="The zero-based number of lines read before the exception.">예외 전에 읽은 줄의 0부터 시작 하는 수입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary vsli:raw="Gets a message that describes the current exception.">현재 예외를 설명하는 메시지를 가져옵니다.</summary>
      <returns vsli:raw="The error message that describes the current exception.">현재 예외를 설명하는 오류 메시지입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary vsli:raw="Gets The path within the JSON where the exception was encountered.">예외가 발생한 JSON 내의 경로를 가져옵니다.</summary>
      <returns vsli:raw="The path within the JSON where the exception was encountered.">예외가 발생 한 JSON 내의 경로입니다.</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary vsli:raw="Determines the naming policy used to convert a string-based name to another format, such as a camel-casing format.">문자열 기반 이름을 카멜식 대/소문자 형식과 같은 다른 형식으로 변환하는 데 사용되는 명명 정책을 결정합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">
        <see cref="T:System.Text.Json.JsonNamingPolicy" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary vsli:raw="Gets the naming policy for camel-casing.">카멜식 대/소문자에 대한 명명 정책을 가져옵니다.</summary>
      <returns vsli:raw="The naming policy for camel-casing.">카멜식 대/소문자를 구분 하는 명명 정책입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary vsli:raw="When overridden in a derived class, converts the specified name according to the policy.">파생 클래스에서 재정의된 경우 정책에 따라 지정된 이름을 변환합니다.</summary>
      <param name="name" vsli:raw="The name to convert.">변환할 이름입니다.</param>
      <returns vsli:raw="The converted name.">변환된 이름입니다.</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary vsli:raw="Represents a single property for a JSON object.">JSON 개체의 단일 속성을 나타냅니다.</summary>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary vsli:raw="Gets the name of this property.">이 속성의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of this property.">이 속성의 이름입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the specified UTF-8 encoded text to the name of this property.">지정된 UTF-8로 인코딩된 텍스트를 이 속성의 이름과 비교합니다.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">비교할 UTF-8로 인코딩된 텍스트입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property has the same UTF-8 encoding as &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 속성의 이름에 <paramref name="utf8Text" />와 동일한 UTF-8 인코딩이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">이 값의 <see cref="T:System.Type" />은 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the specified text as a character span to the name of this property.">문자 범위로 지정된 텍스트를 이 속성의 이름과 비교합니다.</summary>
      <param name="text" vsli:raw="The text to compare against.">비교할 대상인 텍스트입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 속성의 이름이 <paramref name="text" />과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">이 값의 <see cref="T:System.Type" />은 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary vsli:raw="Compares the specified string to the name of this property.">지정된 문자열을 이 속성의 이름과 비교합니다.</summary>
      <param name="text" vsli:raw="The text to compare against.">비교할 대상인 텍스트입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">이 속성의 이름이 <paramref name="text" />과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">이 값의 <see cref="T:System.Type" />은 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary vsli:raw="Provides a string representation of the property for debugging purposes.">디버깅 목적으로 속성의 문자열 표현을 제공합니다.</summary>
      <returns vsli:raw="A string containing the uninterpreted value of the property, beginning at the declaring open-quote and ending at the last character that is part of the value.">해석되지 않은 속성 값을 포함하고 있는 문자열이며, 선언 open-quote에서 시작되고 값의 일부인 마지막 문자에서 종료됩니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary vsli:raw="Gets the value of this property.">이 속성의 값을 가져옵니다.</summary>
      <returns vsli:raw="The value of this property.">이 속성의 값입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the property to the provided writer as a named JSON object property.">제공된 기록기에 속성을 명명된 JSON 개체 속성으로 씁니다.</summary>
      <param name="writer" vsli:raw="The writer to which to write the property.">속성을 작성할 기록기입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;see cref=&quot;P:System.Text.Json.JsonProperty.Name&quot; /&gt; is too large to be a JSON object property.">
        <see cref="P:System.Text.Json.JsonProperty.Name" />이 너무 커서 JSON 개체 속성이 될 수 없습니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this JSON property's &lt;see cref=&quot;P:System.Text.Json.JsonProperty.Value&quot; /&gt; would result in invalid JSON.">이 JSON 속성의 <see cref="P:System.Text.Json.JsonProperty.Value" />의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />로 인해 JSON이 잘못될 수 있습니다.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when reading JSON.">JSON을 읽을 때 사용자 지정 동작을 정의할 수 있는 기능을 사용자에게 제공합니다.</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that defines whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">읽고 있는 JSON 페이로드 내에서 개체 또는 배열의 JSON 값 목록 끝에 추가 쉼표가 허용되는지(그리고 무시되는지) 여부를 정의하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">추가 쉼표를 사용할 수 있으면를 <see langword="true" /> 합니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; handles comments when reading through the JSON data.">JSON 데이터를 읽을 때 <see cref="T:System.Text.Json.Utf8JsonReader" />에서 주석을 처리하는 방법을 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">주석을 처리 하는 방법을 나타내는 열거형 값 중 하나입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The property is being set to a value that is not a member of the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enumeration.">속성이 <see cref="T:System.Text.Json.JsonCommentHandling" /> 열거형의 멤버가 아닌 값으로 설정됩니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when reading JSON, with the default (that is, 0) indicating a maximum depth of 64.">최대 깊이 64를 나타내는 기본값(즉, 0)을 사용하여, JSON을 읽을 때 허용되는 최대 깊이를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The maximum depth allowed when reading JSON.">JSON을 읽을 때 허용되는 최대 깊이입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The maximum depth is being set to a negative value.">최대 깊이가 음수 값으로 설정됩니다.</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary vsli:raw="Defines an opaque type that holds and saves all the relevant state information, which must be provided to the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; to continue reading after processing incomplete data.">불완전한 데이터를 처리한 후에도 계속 읽기 위해 <see cref="T:System.Text.Json.Utf8JsonReader" />에 제공되어야 하는 모든 관련 상태 정보를 보유하고 저장하는 불투명 형식을 정의합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Text.Json.JsonReaderState&quot; /&gt; instance.">새 <see cref="T:System.Text.Json.JsonReaderState" /> 인스턴스를 생성합니다.</summary>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that is different from the JSON RFC (for example how to handle comments, or the maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly (comments within the JSON are invalid) and reads up to a maximum depth of 64.">JSON RFC와 다른 <see cref="T:System.Text.Json.Utf8JsonReader" />의 사용자 지정 동작을 정의합니다(예: 주석을 처리하는 방법 또는 읽을 때 허용되는 최대 깊이). 기본적으로 <see cref="T:System.Text.Json.Utf8JsonReader" />는 JSON RFC를 엄격하게 준수하며(JSON 내부의 주석은 유효하지 않음) 최대 깊이 64까지 읽습니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The maximum depth is set to a non-positive value (&amp;lt; 0).">최대 깊이는 양수가 아닌 값(&lt; 0)으로 설정됩니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary vsli:raw="Gets the custom behavior to use when reading JSON data using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct that may deviate from strict adherence to the JSON specification, which is the default behavior.">기본 동작인 JSON 사양을 엄격하게 준수하지 않는 <see cref="T:System.Text.Json.Utf8JsonReader" /> 구조체를 사용하여 JSON 데이터를 읽을 때 사용할 사용자 지정 동작을 가져옵니다.</summary>
      <returns vsli:raw="The custom behavior to use when reading JSON data.">JSON 데이터를 읽을 때 사용할 사용자 지정 동작입니다.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary vsli:raw="Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.">개체 또는 값 형식을 JSON으로 직렬화하고 JSON을 개체 또는 값 형식으로 역직렬화하는 기능을 제공합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.">단일 JSON 값을 지정된 유형의 인스턴스로 나타내는 UTF-8로 인코딩된 텍스트를 구문 분석합니다.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">구문 분석할 JSON 텍스트입니다.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">변환하고 반환할 개체의 형식입니다.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">구문 분석하는 동안 동작을 컨트롤하는 옵션입니다.</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">JSON 값의 <paramref name="returnType" /> 표현입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">JSON이 잘못되었습니다.
-또는-
<typeparamref name="returnType" />가 JSON과 호환되지 않습니다.
-또는-
범위에 단일 JSON 값을 초과하는 남은 데이터가 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of a specified type.">단일 JSON 값을 지정된 유형의 인스턴스로 나타내는 텍스트를 구문 분석합니다.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">구문 분석할 JSON 텍스트입니다.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">변환하고 반환할 개체의 형식입니다.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">구문 분석하는 동안 동작을 컨트롤하는 옵션입니다.</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">JSON 값의 <paramref name="returnType" /> 표현입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> 또는 <paramref name="returnType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">JSON이 잘못되었습니다.
-또는-
<typeparamref name="TValue" />가 JSON과 호환되지 않습니다.
-또는-
문자열에 단일 JSON 값을 초과하는 남은 데이터가 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.">제공된 판독기에서 JSON 값 하나(개체 또는 배열 포함)를 읽고 지정된 형식의 인스턴스로 변환합니다.</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">JSON을 읽을 판독기입니다.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">변환하고 반환할 개체의 형식입니다.</param>
      <param name="options" vsli:raw="Options to control the serializer behavior during reading.">읽는 동안 직렬 변환기 동작을 컨트롤하는 옵션입니다.</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">JSON 값의 <paramref name="returnType" /> 표현입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">JSON이 잘못되었습니다.
-또는-
<typeparamref name="returnType" />가 JSON과 호환되지 않습니다.
-또는-
판독기에서 값을 읽을 수 없습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is using unsupported options.">
        <paramref name="reader" />에서 지원되지 않는 옵션을 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.">단일 JSON 값을 제네릭 형식 매개 변수에 지정된 유형의 인스턴스로 나타내는 UTF-8로 인코딩된 텍스트를 구문 분석합니다.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">구문 분석할 JSON 텍스트입니다.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">구문 분석하는 동안 동작을 컨트롤하는 옵션입니다.</param>
      <typeparam name="TValue" vsli:raw="The target type of the UTF-8 encoded text.">U t f-8로 인코딩된 텍스트의 대상 형식입니다.</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">JSON 값의 <typeparamref name="TValue" /> 표현입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">JSON이 잘못되었습니다.
-또는-
<typeparamref name="TValue" />가 JSON과 호환되지 않습니다.
-또는-
범위에 단일 JSON 값을 초과하는 남은 데이터가 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.">단일 JSON 값을 제네릭 형식 매개 변수에 지정된 유형의 인스턴스로 나타내는 텍스트를 구문 분석합니다.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">구문 분석할 JSON 텍스트입니다.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">구문 분석하는 동안 동작을 컨트롤하는 옵션입니다.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">JSON 값의 대상 형식입니다.</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">JSON 값의 <typeparamref name="TValue" /> 표현입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">JSON이 잘못되었습니다.
-또는-
<typeparamref name="TValue" />가 JSON과 호환되지 않습니다.
-또는-
문자열에 단일 JSON 값을 초과하는 남은 데이터가 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.">제공된 판독기에서 제네릭 형식 매개 변수에 지정된 유형의 인스턴스로 JSON 값 하나(개체 또는 배열 포함)를 읽어옵니다.</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">JSON을 읽을 판독기입니다.</param>
      <param name="options" vsli:raw="Options to control serializer behavior during reading.">읽는 동안 직렬 변환기 동작을 컨트롤하는 옵션입니다.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">JSON 값의 대상 형식입니다.</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">JSON 값의 <typeparamref name="TValue" /> 표현입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">JSON이 잘못되었습니다.
-또는-
<typeparamref name="TValue" />가 JSON과 호환되지 않습니다.
-또는-
판독기에서 값을 읽을 수 없습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; uses unsupported options.">
        <paramref name="reader" />에서 지원되지 않는 옵션을 사용합니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type. The stream will be read to completion.">단일 JSON 값을 지정된 유형의 인스턴스로 나타내는 UTF-8로 인코딩된 텍스트를 비동기적으로 읽습니다. 완료될 때까지 스트림을 읽습니다.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">구문 분석할 JSON 데이터입니다.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">변환하고 반환할 개체의 형식입니다.</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">읽는 동안 동작을 컨트롤하는 옵션입니다.</param>
      <param name="cancellationToken" vsli:raw="A cancellation token that may be used to cancel the read operation.">읽기 작업을 취소하는 데 사용할 수 있는 취소 토큰입니다.</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">JSON 값의 <paramref name="returnType" /> 표현입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> 또는 <paramref name="returnType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">JSON이 잘못되었습니다.
-또는-
<typeparamref name="TValue" />가 JSON과 호환되지 않습니다.
-또는-
스트림에 남은 데이터가 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter. The stream will be read to completion.">단일 JSON 값을 제네릭 형식 매개 변수에 지정된 유형의 인스턴스로 나타내는 UTF-8로 인코딩된 텍스트를 비동기적으로 읽습니다. 완료될 때까지 스트림을 읽습니다.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">구문 분석할 JSON 데이터입니다.</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">읽는 동안 동작을 컨트롤하는 옵션입니다.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the read operation.">읽기 작업을 취소하는 데 사용할 수 있는 토큰입니다.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">JSON 값의 대상 형식입니다.</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">JSON 값의 <typeparamref name="TValue" /> 표현입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">JSON이 잘못되었습니다.
-또는-
<typeparamref name="TValue" />가 JSON과 호환되지 않습니다.
-또는-
스트림에 남은 데이터가 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a specified type into a JSON string.">지정된 형식의 값을 JSON 문자열로 변환합니다.</summary>
      <param name="value" vsli:raw="The value to convert.">변환할 값입니다.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">변환할 <paramref name="value" />의 형식입니다.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">변환 동작을 컨트롤하는 옵션입니다.</param>
      <returns vsli:raw="The JSON string representation of the value.">값의 JSON 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of the specified type to the provided writer.">지정된 형식의 JSON 표현을 제공된 기록기에 씁니다.</summary>
      <param name="writer" vsli:raw="The JSON writer to write to.">쓰는 데 사용할 JSON 기록기입니다.</param>
      <param name="value" vsli:raw="The value to convert and write.">변환하고 쓸 값입니다.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">변환할 <paramref name="value" />의 형식입니다.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">직렬화 동작을 컨트롤하는 옵션입니다.</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string.">제네릭 형식 매개 변수에 지정된 형식의 값을 JSON 문자열로 변환합니다.</summary>
      <param name="value" vsli:raw="The value to convert.">변환할 값입니다.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">직렬화 동작을 컨트롤하는 옵션입니다.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Serialize 할 값의 형식입니다.</typeparam>
      <returns vsli:raw="A JSON string representation of the value.">값의 JSON 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of a type specified by a generic type parameter to the provided writer.">제네릭 형식 매개 변수에 지정된 형식의 JSON 표현을 제공된 기록기에 씁니다.</summary>
      <param name="writer" vsli:raw="A JSON writer to write to.">쓰는 데 사용할 JSON 기록기입니다.</param>
      <param name="value" vsli:raw="The value to convert and write.">변환하고 쓸 값입니다.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">직렬화 동작을 컨트롤하는 옵션입니다.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Serialize 할 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.">지정된 형식의 값을 UTF-8로 인코딩된 JSON 텍스트로 비동기적으로 변환하고 지정된 스트림에 씁니다.</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">쓸 UTF-8 스트림입니다.</param>
      <param name="value" vsli:raw="The value to convert.">변환할 값입니다.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">변환할 <paramref name="value" />의 형식입니다.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">직렬화 동작을 컨트롤하는 옵션입니다.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">쓰기 작업을 취소하는 데 사용할 수 있는 토큰입니다.</param>
      <returns vsli:raw="A task that represents the asynchronous write operation.">비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.">제네릭 형식 매개 변수에 지정된 형식의 값을 UTF-8로 인코딩된 JSON 텍스트로 비동기적으로 변환하고 스트림에 씁니다.</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">쓸 UTF-8 스트림입니다.</param>
      <param name="value" vsli:raw="The value to convert.">변환할 값입니다.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">직렬화 동작을 컨트롤하는 옵션입니다.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">쓰기 작업을 취소하는 데 사용할 수 있는 토큰입니다.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Serialize 할 값의 형식입니다.</typeparam>
      <returns vsli:raw="A task that represents the asynchronous write operation.">비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.">지정된 형식의 값을 UTF-8 바이트로 인코딩된 JSON 문자열로 변환합니다.</summary>
      <param name="value" vsli:raw="The value to convert.">변환할 값입니다.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">변환할 <paramref name="value" />의 형식입니다.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">변환 동작을 컨트롤하는 옵션입니다.</param>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">UTF-8 바이트로 인코딩된 값의 JSON 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.">제네릭 형식 매개 변수에 지정된 형식의 값을 UTF-8 바이트로 인코딩된 JSON 문자열로 변환합니다.</summary>
      <param name="value" vsli:raw="The value to convert.">변환할 값입니다.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">변환 동작을 컨트롤하는 옵션입니다.</param>
      <typeparam name="TValue" vsli:raw="The type of the value.">값의 형식입니다.</typeparam>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">UTF-8 바이트로 인코딩된 값의 JSON 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary vsli:raw="Provides options to be used with &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt;.">
        <see cref="T:System.Text.Json.JsonSerializer" />와 함께 사용할 옵션을 제공합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; class.">
        <see cref="T:System.Text.Json.JsonSerializerOptions" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary vsli:raw="Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized.">역직렬화하고 있는 JSON 페이로드 내에서 개체 또는 배열의 JSON 값 목록 끝에 추가 쉼표가 허용되는지(그리고 무시되는지) 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored); &lt;see langword=&quot;false&quot; /&gt; otherwise.">개체 또는 배열에서 JSON 값 목록의 끝에 추가 쉼표를 사용할 수 있으면이 고, 그렇지 않으면 (무시 됨) <see langword="true" />입니다. 그렇지 않으면 <see langword="false" /> 합니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">이 속성은 serialization 또는 deserialization이 발생한 후에 설정되었습니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary vsli:raw="Gets the list of user-defined converters that were registered.">등록된 사용자 정의 변환기의 목록을 가져옵니다.</summary>
      <returns vsli:raw="The list of custom converters.">사용자 지정 변환기의 목록입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary vsli:raw="Gets or sets the default buffer size, in bytes, to use when creating temporary buffers.">임시 버퍼를 만들 때 사용할 기본 버퍼 크기(바이트)를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The default buffer size in bytes.">기본 버퍼 크기 (바이트)입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The buffer size is less than 1.">버퍼 크기가 1보다 작습니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">이 속성은 serialization 또는 deserialization이 발생한 후에 설정되었습니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary vsli:raw="Gets or sets the policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format, such as camel-casing.">
        <see cref="T:System.Collections.IDictionary" /> 키의 이름을 다른 형식(예: 카멜 대/소문자)으로 변환하는 데 사용하는 정책을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format.">
        <see cref="T:System.Collections.IDictionary" /> 키의 이름을 다른 형식으로 변환 하는 데 사용 되는 정책입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">문자열을 이스케이프할 때 사용할 인코더를 가져오거나 설정합니다. 기본 인코더를 사용하려는 경우에는 <see langword="null" />입니다.</summary>
      <returns vsli:raw="The JavaScript character encoding.">JavaScript 문자 인코딩입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary vsli:raw="Returns the converter for the specified type.">지정된 형식에 대한 변환기를 반환합니다.</summary>
      <param name="typeToConvert" vsli:raw="The type to return a converter for.">변환기를 반환할 형식입니다.</param>
      <returns vsli:raw="The first converter that supports the given type.">지정된 형식을 지원하는 첫 번째 변환기입니다. 또는 변환기가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary vsli:raw="Gets or sets a value that indicates whether &lt;see langword=&quot;null&quot; /&gt; values are ignored during serialization and deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">serialization 및 deserialization 중에 <see langword="null" /> 값을 무시할지 판별하는 값을 가져오거나 설정합니다. 기본값은 <see langword="false" />입니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if null values are ignored during serialization and deserialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">serialization 및 deserialization 중에 null 값을 무시 하려면 <see langword="true" /> 합니다. 그렇지 않으면 langword = "false"/&gt;를 참조 하세요.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.&#xA;&#xA;-or-&#xA;&#xA;&lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition&quot; /&gt; has been set to a non-default value. These properties cannot be used together.">이 속성은 serialization 또는 deserialization이 발생한 후에 설정되었습니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary vsli:raw="Gets a value that indicates whether read-only properties are ignored during serialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">serialization 중에 읽기 전용 속성이 무시되는지를 결정하는 값을 가져옵니다. 기본값은 <see langword="false" />입니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if read-only properties are ignored during serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">직렬화 하는 동안 읽기 전용 속성을 무시 하려면 <see langword="true" /> 합니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">이 속성은 serialization 또는 deserialization이 발생한 후에 설정되었습니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64.">JSON을 직렬화하거나 역직렬화할 때 허용되는 최대 깊이를 가져오거나 설정합니다. 기본값 0이며, 최대 깊이 64를 나타냅니다.</summary>
      <returns vsli:raw="The maximum depth allowed when serializing or deserializing JSON.">JSON을 serialize 또는 deserialize 할 때 허용 되는 최대 깊이입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">이 속성은 serialization 또는 deserialization이 발생한 후에 설정되었습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">최대 깊이가 음수 값으로 설정된 경우</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary vsli:raw="Gets or sets a value that indicates whether a property's name uses a case-insensitive comparison during deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">deserialization을 수행하는 동안 속성의 이름에 대/소문자를 구분하지 않는 비교를 사용할지 결정하는 값을 가져오거나 설정합니다. 기본값은 <see langword="false" />입니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if property names are compared case-insensitively; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">대/소문자를 구분 하지 않는 비교를 사용 하 여 속성 이름을 비교 하려면 <see langword="true" /> 합니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary vsli:raw="Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">개체의 속성 이름을 카멜 대/소문자 구분 또는 속성 이름을 변경하지 않은 채 유지하는 <see langword="null" />과 같은 다른 형식으로 변환하는 데 사용되는 정책을 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A property naming policy, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">속성 명명 정책 또는 속성 이름을 변경 하지 않고 유지 하는 <see langword="null" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary vsli:raw="Gets or sets a value that defines how comments are handled during deserialization.">deserialization 중에 주석을 처리하는 방법을 정의하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A value that indicates whether comments are allowed, disallowed, or skipped.">주석의 허용, 허용 안 함 또는 건너뜀 여부를 나타내는 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">이 속성은 serialization 또는 deserialization이 발생한 후에 설정되었습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">주석 처리 열거형이 지원되지 않거나 <see cref="T:System.Text.Json.JsonCommentHandling" /> 열거형 범위에 포함되지 않는 값으로 설정되어 있습니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary vsli:raw="Gets or sets a value that indicates whether JSON should use pretty printing. By default, JSON is serialized without any extra white space.">JSON에서 자동 서식 지정을 사용해야 하는지를 정의하는 값을 가져오거나 설정합니다. 기본적으로 JSON은 추가 공백 없이 serialize됩니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if JSON is pretty printed on serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">JSON이 serialization에서 매우 인쇄 되어야 하는지 여부를 <see langword="true" /> 합니다. 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">이 속성은 serialization 또는 deserialization이 발생한 후에 설정되었습니다.</exception>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary vsli:raw="Defines the various JSON tokens that make up a JSON text.">JSON 텍스트를 구성하는 다양한 JSON 토큰을 정의합니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary vsli:raw="The token type is a comment string.">토큰 형식이 주석 문자열입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary vsli:raw="The token type is the end of a JSON array.">토큰 형식이 JSON 배열의 끝입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary vsli:raw="The token type is the end of a JSON object.">토큰 형식이 JSON 개체의 끝입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary vsli:raw="The token type is the JSON literal false.">토큰 형식이 JSON 리터럴 false입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;). This is the default token type if no data has been read by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">값이 없습니다(<see cref="F:System.Text.Json.JsonTokenType.Null" />과 다르므로).</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary vsli:raw="The token type is the JSON literal null.">토큰 형식이 JSON 리터럴 null입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary vsli:raw="The token type is a JSON number.">토큰 형식이 JSON 번호입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary vsli:raw="The token type is a JSON property name.">토큰 형식이 JSON 속성 이름입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary vsli:raw="The token type is the start of a JSON array.">토큰 형식이 JSON 배열의 시작입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary vsli:raw="The token type is the start of a JSON object.">토큰 형식이 JSON 개체의 시작입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary vsli:raw="The token type is a JSON string.">토큰 형식이 JSON 문자열입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary vsli:raw="The token type is the JSON literal true.">토큰 형식이 JSON 리터럴 true입니다.</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary vsli:raw="Specifies the data type of a JSON value.">JSON 값의 데이터 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary vsli:raw="A JSON array.">JSON 배열입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary vsli:raw="The JSON value false.">JSON 값 false입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary vsli:raw="The JSON value null.">JSON 값 null입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary vsli:raw="A JSON number.">JSON 번호입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary vsli:raw="A JSON object.">JSON 개체입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary vsli:raw="A JSON string.">JSON 문자열입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary vsli:raw="The JSON value true.">JSON 값 true입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;).">값이 없습니다(<see cref="F:System.Text.Json.JsonValueKind.Null" />과 다르므로).</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary vsli:raw="Allows the user to define custom behavior when writing JSON using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;.">사용자가 <see cref="T:System.Text.Json.Utf8JsonWriter" />를 사용하여 JSON을 작성할 때 사용자 지정 동작을 정의할 수 있습니다.</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">문자열을 이스케이프할 때 사용할 인코더를 가져오거나 설정합니다. 기본 인코더를 사용하려는 경우에는 <see langword="null" />입니다.</summary>
      <returns vsli:raw="The JavaScript character encoder used to override the escaping behavior.">이스케이프 동작을 재정의 하는 데 사용 되는 JavaScript 문자 인코더입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.">
        <see cref="T:System.Text.Json.Utf8JsonWriter" />가 출력 JSON의 형식을 지정해야 하는지를 나타내는 값을 가져오거나 설정합니다. 여기에는 중첩된 JSON 토큰 들여쓰기, 새 줄 추가 및 속성 이름과 값 사이 공백 추가가 포함됩니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON output is formatted; &lt;see langword=&quot;false&quot; /&gt; if the JSON is written without any extra white space. The default is &lt;see langword=&quot;false&quot; /&gt;.">JSON 출력의 형식을 지정 하려면 <see langword="true" /> 합니다. 추가 공백 없이 쓰려면 <see langword="false" /> 합니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should skip structural validation and allow the user to write invalid JSON.">
        <see cref="T:System.Text.Json.Utf8JsonWriter" />가 구조 유효성 검사를 건너뛰고 사용자가 잘못된 JSON을 작성하도록 허용해야 하는지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if structural validation is skipped and invalid JSON is allowed; &lt;see langword=&quot;false&quot; /&gt; if an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown on any attempt to write invalid JSON.">구조 유효성 검사를 건너뛰고 잘못 된 JSON을 허용 하는 <see langword="true" /> 잘못 된 JSON을 쓰려고 시도 하는 경우 <see cref="T:System.InvalidOperationException" />을 throw <see langword="false" /> 합니다.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary vsli:raw="Provides the base class for serialization attributes.">serialization 특성에 대한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonAttribute&quot; /&gt;.">
        <see cref="T:System.Text.Json.Serialization.JsonAttribute" />의 새 인스턴스를 만듭니다.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary vsli:raw="Converts an object or value to or from JSON.">개체 또는 값을 JSON으로 변환하거나 그 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary vsli:raw="When overridden in a derived class, determines whether the converter instance can convert the specified object type.">파생 클래스에서 재정의되는 경우 변환기 인스턴스가 지정된 개체 형식을 변환할 수 있는지 결정합니다.</summary>
      <param name="typeToConvert" vsli:raw="The type of the object to check whether it can be converted by this converter instance.">이 변환기 인스턴스로 변환할 수 있는지를 확인할 개체의 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance can convert the specified object type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">인스턴스가 지정된 개체 형식을 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary vsli:raw="Converts an object or value to or from JSON.">개체 또는 값을 JSON으로 변환하거나 그 반대로 변환합니다.</summary>
      <typeparam name="T" vsli:raw="The type of object or value handled by the converter.">변환기에서 처리 하는 개체 또는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter`1&quot; /&gt; instance.">새 <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted.">지정된 형식을 변환할 수 있는지를 확인합니다.</summary>
      <param name="typeToConvert" vsli:raw="The type to compare against.">비교할 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 형식을 변환할 수 있는; 경우 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads and converts the JSON to type &lt;typeparamref name=&quot;T&quot; /&gt;.">JSON을 읽고 <typeparamref name="T" /> 형식으로 변환합니다.</summary>
      <param name="reader" vsli:raw="The reader.">판독기입니다.</param>
      <param name="typeToConvert" vsli:raw="The type to convert.">변환할 형식입니다.</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">사용할 직렬화 옵션을 지정하는 개체입니다.</param>
      <returns vsli:raw="The converted value.">변환된 값입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes a specified value as JSON.">지정된 값을 JSON으로 씁니다.</summary>
      <param name="writer" vsli:raw="The writer to write to.">쓰려는 대상 작성기입니다.</param>
      <param name="value" vsli:raw="The value to convert to JSON.">JSON으로 변환할 값입니다.</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">사용할 직렬화 옵션을 지정하는 개체입니다.</param>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary vsli:raw="When placed on a property or type, specifies the converter type to use.">속성 또는 형식에 배치될 때 사용할 변환기 유형을 지정합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;.">
        <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt; with the specified converter type.">지정된 변환기 형식을 사용하여 <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="converterType" vsli:raw="The type of the converter.">변환기의 형식입니다.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary vsli:raw="Gets the type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">
        <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />의 형식을 가져옵니다. 또는 형식을 사용하지 않고 만든 경우 <see langword="null" />입니다.</summary>
      <returns vsli:raw="The type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">
        <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />형식 이거나, 형식 없이 만들어진 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary vsli:raw="When overridden in a derived class and &lt;see cref=&quot;P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, allows the derived class to create a &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter&quot; /&gt; in order to pass additional state.">파생 클래스에서 재정의하고 <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" />이 <see langword="null" />이면 추가 상태를 전달하기 위해 파생 클래스를 사용하여 <see cref="T:System.Text.Json.Serialization.JsonConverter" />를 만들 수 있습니다.</summary>
      <param name="typeToConvert" vsli:raw="The type of the converter.">변환기의 형식입니다.</param>
      <returns vsli:raw="The custom converter.">사용자 지정 변환기입니다.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary vsli:raw="Supports converting several types by using a factory pattern.">팩터리 패턴을 통한 여러 형식 변환을 지원합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary vsli:raw="When overridden in a derived class, initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterFactory&quot; /&gt; class.">파생 클래스에서 재정의되는 경우 <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for a specified type.">지정된 형식에 대한 변환기를 만듭니다.</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">변환기에서 처리되는 형식입니다.</param>
      <param name="options" vsli:raw="The serialization options to use.">사용할 serialization 옵션입니다.</param>
      <returns vsli:raw="A converter for which &lt;typeparamref name=&quot;T&quot; /&gt; is compatible with &lt;paramref name=&quot;typeToConvert&quot; /&gt;.">
        <typeparamref name="T" />가 <paramref name="typeToConvert" />와 호환 가능한 변환기입니다.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary vsli:raw="When placed on a property of type &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, any properties that do not have a matching member are added to that dictionary during deserialization and written during serialization.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 형식의 속성에 배치된 경우 일치하는 멤버가 없는 속성은 deserialization 중에 해당 사전에 추가되고 serialization 중에 작성됩니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonExtensionDataAttribute&quot; /&gt; class.">
        <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" /> 클래스의 새 인스턴스를 인스턴스화합니다.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary vsli:raw="Prevents a property from being serialized or deserialized.">속성이 직렬화 또는 역직렬화되지 않도록 합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIgnoreAttribute&quot; /&gt;.">
        <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary vsli:raw="Specifies the property name that is present in the JSON when serializing and deserializing. This overrides any naming policy specified by &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">직렬화 및 역직렬화 시 JSON에 표시되는 속성 이름을 지정합니다. 이는 <see cref="T:System.Text.Json.JsonNamingPolicy" />로 지정된 모든 명명 정책을 재정의합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonPropertyNameAttribute&quot; /&gt; with the specified property name.">지정된 속성 이름을 사용하여 <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the property.">속성의 이름입니다.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the name of the property.">속성 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the property.">속성의 이름입니다.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary vsli:raw="Converts enumeration values to and from strings.">열거형 값을 문자열로 변환하거나 그 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with the default naming policy that allows integer values.">정수 값을 허용하는 기본 명명 정책에 따라 <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> 클래스의 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with a specified naming policy and a value that indicates whether undefined enumeration values are allowed.">지정된 명명 정책과 정의되지 않은 열거형 값이 허용되는지 여부를 나타내는 값을 사용하여 <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> 클래스의 인스턴스를 초기화합니다.</summary>
      <param name="namingPolicy" vsli:raw="The optional naming policy for writing enum values.">열거형 값을 쓰기 위한 선택적 명명 정책입니다.</param>
      <param name="allowIntegerValues" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow undefined enum values; otherwise, &lt;see langword=&quot;false&quot; /&gt;. When &lt;see langword=&quot;true&quot; /&gt;, if an enum value isn't defined, it will output as a number rather than a string.">정의되지 않은 열거형 값을 허용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="true" />일 때 열거형 값이 정의되지 않은 경우 문자열이 아닌 숫자로 출력됩니다.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted to an enum.">지정된 형식을 열거형으로 변환할 수 있는지를 확인합니다.</summary>
      <param name="typeToConvert" vsli:raw="The type to be checked.">확인할 형식입니다.</param>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the type can be converted; otherwise, &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt;.">
        <see langword="true" /> 형식을 변환할 수 있는; 경우 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for the specified type.">지정된 형식에 대한 변환기를 만듭니다.</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">변환기에서 처리되는 형식입니다.</param>
      <param name="options" vsli:raw="The serialization options to use.">사용할 serialization 옵션입니다.</param>
      <returns vsli:raw="A converter for which &lt;code data-dev-comment-type=&quot;typeparamref&quot;&gt;T&lt;/code&gt; is compatible with &lt;code data-dev-comment-type=&quot;paramref&quot;&gt;typeToConvert&lt;/code&gt;.">
        <typeparamref name="T" />가 <paramref name="typeToConvert" />와 호환 가능한 변환기입니다.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary vsli:raw="Provides a high-performance API for forward-only, read-only access to UTF-8 encoded JSON text.">UTF-8 인코딩 JSON 텍스트에 대한 정방향 읽기 전용 액세스를 위한 고성능 API를 제공합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text and indicates whether the input contains all the text to process.">UTF-8로 인코딩된 텍스트의 읽기 전용 시퀀스를 처리하는 <see cref="T:System.Text.Json.Utf8JsonReader" /> 구조의 새 인스턴스를 초기화하고 입력에 처리할 모든 텍스트가 포함되어 있는지 표시합니다.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">처리할 UTF-8 인코딩 JSON 텍스트입니다.</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">입력 시퀀스에 처리할 전체 데이터가 포함되어 있으면 <see langword="true" />이고, 입력 범위에 데이터가 더 추가될 부분 데이터가 포함된 경우 <see langword="false" />입니다.</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">판독기 상태를 포함하는 개체입니다. 생성자에 대한 첫 번째 호출인 경우 기본 상태를 전달합니다. 그렇지 않으면 <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" />의 이전 인스턴스에서 <see cref="T:System.Text.Json.Utf8JsonReader" /> 속성 값을 전달합니다.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text using the specified options.">지정된 옵션을 사용하여 UTF-8 인코딩된 텍스트의 읽기 전용 시퀀스를 처리하는 <see cref="T:System.Text.Json.Utf8JsonReader" /> 구조의 새 인스턴스를 초기화합니다.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">처리할 UTF-8 인코딩 JSON 텍스트입니다.</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">JSON RFC와 다른 <see cref="T:System.Text.Json.Utf8JsonReader" />의 사용자 지정 동작을 정의합니다(예: 주석을 처리하는 방법 또는 읽을 때 허용되는 최대 깊이). 기본적으로 <see cref="T:System.Text.Json.Utf8JsonReader" />는 JSON RFC를 엄격하게 준수하며(JSON 내부의 주석은 유효하지 않음) 최대 깊이는 64입니다.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text and indicates whether the input contains all the text to process.">UTF-8로 인코딩된 텍스트의 읽기 전용 범위를 처리하는 <see cref="T:System.Text.Json.Utf8JsonReader" /> 구조의 새 인스턴스를 초기화하고 입력에 처리할 모든 텍스트가 포함되었는지 표시합니다.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">처리할 UTF-8 인코딩 JSON 텍스트입니다.</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">입력 시퀀스에 처리할 전체 데이터가 포함되어 있으면 <see langword="true" />이고, 입력 범위에 데이터가 더 추가될 부분 데이터가 포함된 경우 <see langword="false" />입니다.</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">판독기 상태를 포함하는 개체입니다. 생성자에 대한 첫 번째 호출인 경우 기본 상태를 전달합니다. 그렇지 않으면 <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" />의 이전 인스턴스에서 <see cref="T:System.Text.Json.Utf8JsonReader" /> 속성 값을 전달합니다.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text using the specified options.">지정된 옵션을 사용하여 UTF-8 인코딩된 텍스트의 읽기 전용 범위를 처리하는 <see cref="T:System.Text.Json.Utf8JsonReader" /> 구조의 새 인스턴스를 초기화합니다.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">처리할 UTF-8 인코딩 JSON 텍스트입니다.</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">JSON RFC와 다른 <see cref="T:System.Text.Json.Utf8JsonReader" />의 사용자 지정 동작을 정의합니다(예: 주석을 처리하는 방법 또는 읽을 때 허용되는 최대 깊이). 기본적으로 <see cref="T:System.Text.Json.Utf8JsonReader" />는 JSON RFC를 엄격하게 준수하며(JSON 내부의 주석은 유효하지 않음) 최대 깊이는 64입니다.</param>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary vsli:raw="Gets the total number of bytes consumed so far by this instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">
        <see cref="T:System.Text.Json.Utf8JsonReader" />의 이 인스턴스에서 지금까지 소비한 총 바이트 수를 가져옵니다.</summary>
      <returns vsli:raw="The total number of bytes consumed so far.">지금까지 사용한 총 바이트 수입니다.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">현재 토큰의 깊이를 가져옵니다.</summary>
      <returns vsli:raw="The depth of the current token.">현재 토큰의 수준입니다.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; state to pass to a &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; constructor with more data.">추가 데이터와 함께 <see cref="T:System.Text.Json.Utf8JsonReader" /> 생성자에 전달할 현재 <see cref="T:System.Text.Json.Utf8JsonReader" /> 상태를 가져옵니다.</summary>
      <returns vsli:raw="The current reader state.">현재 판독기 상태입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary vsli:raw="Reads the next JSON token value from the source as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">원본으로부터 다음 JSON 토큰 값을 <see cref="T:System.Boolean" />으로 읽습니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;.">
        <see langword="true" />이 <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" />이면 <see cref="F:System.Text.Json.JsonTokenType.True" />입니다. 그렇지 않으면 <see langword="false" />이 <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" />인 경우 <see cref="F:System.Text.Json.JsonTokenType.False" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a Boolean value (that is, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;).">JSON 토큰의 값은 부울 값(즉, <see cref="F:System.Text.Json.JsonTokenType.True" /> 또는 <see cref="F:System.Text.Json.JsonTokenType.False" />)이 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">소스로부터 현재 JSON 토큰 값을 <see cref="T:System.Byte" />로 구문 분석합니다.</summary>
      <returns vsli:raw="The value of the UTF-8 encoded token.">UTF-8로 인코딩된 토큰의 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Byte.MinValue&quot;&gt;Byte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Byte.MaxValue&quot;&gt;Byte.MaxValue&lt;/see&gt;.">JSON 토큰 값의 숫자 형식이 잘못되었습니다(예: 소수 값을 포함하거나 과학적 표기법으로 작성됨).
-또는-
JSON 토큰 값이 <see cref="F:System.Byte.MinValue" />보다 작거나 <see cref="F:System.Byte.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary vsli:raw="Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array.">소스에서 현재 JSON 토큰 값을 구문 분석하고 Base 64 인코딩 JSON 문자열을 바이트 배열로 디코딩합니다.</summary>
      <returns vsli:raw="The byte array that represents the current JSON token value.">현재 JSON 토큰 값을 나타내는 바이트 배열입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 토큰의 형식이 <see cref="F:System.Text.Json.JsonTokenType.String" />이 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text, so it can't be decoded to bytes.&#xA;&#xA;-or-&#xA;&#xA;The value contains invalid or more than two padding characters.&#xA;&#xA;-or-&#xA;&#xA;The value is incomplete. That is, the JSON string length is not a multiple of 4.">값은 Base64 텍스트로 인코딩되지 않으므로 바이트에 디코딩할 수 없습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary vsli:raw="Parses the current JSON token value from the source as a comment and transcodes it as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">소스에서 주석으로 현재 JSON 토큰 값을 구문 분석하여 <see cref="T:System.String" />으로 트랜스코딩합니다.</summary>
      <returns vsli:raw="The comment that represents the current JSON token value.">현재 JSON 토큰 값을 나타내는 주석입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a comment.">JSON 토큰이 주석이 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.DateTime" />에 구문 분석합니다.</summary>
      <returns vsli:raw="The date and time value, if the entire UTF-8 encoded token value can be successfully parsed.">UTF-8로 완전히 인코딩된 토큰 값을 성공적으로 구문 분석할 수 있는 경우의 날짜 및 시간 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.String" />이 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.&#xA;        &#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">JSON 토큰 값은 <see cref="T:System.DateTime" />으로 읽을 수 없습니다.
-또는-
UTF-8로 완전히 인코딩된 토큰 값을 <see cref="T:System.DateTime" /> 값으로 구문 분석할 수 없습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.DateTimeOffset" />에 구문 분석합니다.</summary>
      <returns vsli:raw="The date and time offset, if the entire UTF-8 encoded token value can be successfully parsed.">UTF-8로 완전히 인코딩된 토큰 값을 성공적으로 구문 분석할 수 있는 경우의 날짜 및 시간 오프셋입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.String" />이 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.&#xA;&#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">JSON 토큰 값은 <see cref="T:System.DateTimeOffset" />으로 읽을 수 없습니다.
-또는-
UTF-8로 완전히 인코딩된 토큰 값을 <see cref="T:System.DateTimeOffset" /> 값으로 구문 분석할 수 없습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Decimal" />에 구문 분석합니다.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">
        <see cref="T:System.Decimal" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Decimal.MinValue&quot;&gt;Decimal.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">JSON 토큰 값이 <see cref="F:System.Decimal.MinValue" />보다 작거나 <see cref="F:System.Decimal.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Double" />에 구문 분석합니다.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">
        <see cref="T:System.Double" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Double.MinValue&quot;&gt;Double.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Double.MaxValue&quot;&gt;Double.MaxValue&lt;/see&gt;.">JSON 토큰 값이 <see cref="F:System.Double.MinValue" />보다 작거나 <see cref="F:System.Double.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Guid" />에 구문 분석합니다.</summary>
      <returns vsli:raw="The GUID value, if the entire UTF-8 encoded token value can be successfully parsed.">UTF-8로 완전히 인코딩된 토큰 값을 성공적으로 구문 분석할 수 있는 경우의 GUID 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.String" />이 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is in an unsupported format for a Guid.&#xA;        &#xA;-or-&#xA;&#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value.">JSON 토큰 값이 GUID에 지원되지 않는 형식입니다.
-또는-
UTF-8로 완전히 인코딩된 토큰 값을 <see cref="T:System.Guid" /> 값으로 구문 분석할 수 없습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">소스로부터 현재 JSON 토큰 값을 <see cref="T:System.Int16" />로 구문 분석합니다.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <see cref="T:System.Int16" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int16.MinValue&quot;&gt;Int16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int16.MaxValue&quot;&gt;Int16.MaxValue&lt;/see&gt;.">JSON 토큰 값의 숫자 형식이 잘못되었습니다(예: 소수 값을 포함하거나 과학적 표기법으로 작성됨).
-또는-
JSON 토큰 값이 <see cref="F:System.Int16.MinValue" />보다 작거나 <see cref="F:System.Int16.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Int32" />에 구문 분석합니다.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int32.MinValue&quot;&gt;Int32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">JSON 토큰 값이 잘못된 숫자 형식인 경우 예를 들어 10진수가 포함되거나 과학적 표기법으로 작성되었습니다.
-또는-
JSON 토큰 값이 <see cref="F:System.Int32.MinValue" />보다 작거나 <see cref="F:System.Int32.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Int64" />에 구문 분석합니다.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <see cref="T:System.Int64" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int64.MinValue&quot;&gt;Int64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">JSON 토큰 값이 잘못된 숫자 형식인 경우 예를 들어 10진수가 포함되거나 과학적 표기법으로 작성되었습니다.
-또는-
JSON 토큰 값이 <see cref="F:System.Int64.MinValue" />보다 작거나 <see cref="F:System.Int64.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary vsli:raw="Parses the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">소스로부터 현재 JSON 토큰 값을 <see cref="T:System.SByte" />로 구문 분석합니다.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">
        <see cref="T:System.SByte" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.SByte.MinValue&quot;&gt;SByte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.SByte.MaxValue&quot;&gt;SByte.MaxValue&lt;/see&gt;.">JSON 토큰 값의 숫자 형식이 잘못되었습니다(예: 소수 값을 포함하거나 과학적 표기법으로 작성됨).
-또는-
JSON 토큰 값이 <see cref="F:System.SByte.MinValue" />보다 작거나 <see cref="F:System.SByte.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Single" />에 구문 분석합니다.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">
        <see cref="T:System.Single" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Single.MinValue&quot;&gt;Single.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Single.MaxValue&quot;&gt;Single.MaxValue&lt;/see&gt;.">JSON 토큰 값이 <see cref="F:System.Single.MinValue" />보다 작거나 <see cref="F:System.Single.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary vsli:raw="Reads the next JSON token value from the source unescaped and transcodes it as a string.">이스케이프된 소스로부터 다음 JSON 토큰 값을 읽고 문자열로 트랜스코딩합니다.</summary>
      <returns vsli:raw="The token value parsed to a string, or &lt;see langword=&quot;null&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;.">문자열로 구문 분석된 토큰 값입니다. <see langword="null" />이 <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" />이면 <see cref="F:System.Text.Json.JsonTokenType.Null" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a string (that is, not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;, or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;).&#xA;&#xA;-or-&#xA;&#xA;The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates.">JSON 토큰 값은 문자열이 아닙니다(즉, <see cref="F:System.Text.Json.JsonTokenType.String" />, <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> 또는 <see cref="F:System.Text.Json.JsonTokenType.Null" />이 아님).
-또는-
JSON 문자열에 잘못된 UTF-8 바이트 또는 잘못된 UTF-16 서로게이트가 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">소스로부터 현재 JSON 토큰 값을 <see cref="T:System.UInt16" />로 구문 분석합니다.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <see cref="T:System.UInt16" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt16.MinValue&quot;&gt;UInt16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt16.MaxValue&quot;&gt;UInt16.MaxValue&lt;/see&gt;.">JSON 토큰 값의 숫자 형식이 잘못되었습니다(예: 소수 값을 포함하거나 과학적 표기법으로 작성됨).
-또는-
JSON 토큰 값이 <see cref="F:System.UInt16.MinValue" />보다 작거나 <see cref="F:System.UInt16.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.UInt32" />에 구문 분석합니다.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <see cref="T:System.UInt32" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt32.MinValue&quot;&gt;UInt32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt32.MaxValue&quot;&gt;UInt32.MaxValue&lt;/see&gt;.">JSON 토큰 값이 잘못된 숫자 형식인 경우 예를 들어 10진수가 포함되거나 과학적 표기법으로 작성되었습니다.
-또는-
JSON 토큰 값이 <see cref="F:System.UInt32.MinValue" />보다 작거나 <see cref="F:System.UInt32.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.UInt64" />에 구문 분석합니다.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <see cref="T:System.UInt64" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt64.MinValue&quot;&gt;UInt64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt64.MaxValue&quot;&gt;UInt64.MaxValue&lt;/see&gt;.">JSON 토큰 값이 잘못된 숫자 형식인 경우 예를 들어 10진수가 포함되거나 과학적 표기법으로 작성되었습니다.
-또는-
JSON 토큰 값이 <see cref="F:System.UInt64.MinValue" />보다 작거나 <see cref="F:System.UInt64.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary vsli:raw="Gets a value that indicates which &lt;c&gt;Value&lt;/c&gt; property to use to get the token value.">토큰 값을 가져오기 위해 사용할 <c>값</c> 속성을 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSequence&quot; /&gt; should be used to get the token value; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSpan&quot; /&gt; should be used instead.">토큰 값을 얻기 위해 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" />를 사용 해야 하는지 여부를 <see langword="true" /> 합니다. <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" />를 대신 사용 해야 하는지 여부를 <see langword="false" /> 합니다.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary vsli:raw="Gets a value that indicates whether all the JSON data was provided or there is more data to come.">모든 JSON 데이터가 제공되었는지 또는 더 많은 데이터가 있는지를 나타내는 <see cref="T:System.Text.Json.Utf8JsonReader" />의 이 인스턴스 모드를 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader was constructed with the input span or sequence containing the entire JSON data to process; &lt;see langword=&quot;false&quot; /&gt; if the reader was constructed with an input span or sequence that may contain partial JSON data with more data to follow.">처리할 전체 JSON 데이터를 포함 하는 입력 범위 또는 시퀀스를 사용 하 여 판독기가 생성 되었는지 여부를 <see langword="true" /> 합니다. 추가 데이터를 포함 하는 부분 JSON 데이터를 포함할 수 있는 입력 범위 또는 시퀀스를 사용 하 여 판독기가 생성 된 경우에 <see langword="false" /> 합니다.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">
        <see cref="T:System.SequencePosition" /> 구조체가 ReadOnlySpan&lt;byte&gt;로 생성된 경우 제공된 UTF-8 인코딩 입력 ReadOnlySequence<see cref="T:System.SequencePosition" />byte<see cref="T:System.Text.Json.Utf8JsonReader" /> 또는 기본값 &lt; 내에서 현재 &gt;을 가져옵니다.</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">제공 된 u t f-8로 인코딩된 입력 ReadOnlySequence&lt;바이트&gt;의 현재 <see cref="T:System.SequencePosition" /> 또는 <see cref="T:System.Text.Json.Utf8JsonReader" /> 구조체가 ReadOnlySpan&lt;byte&gt;를 사용 하 여 생성 된 경우에는 기본 <see cref="T:System.SequencePosition" />입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary vsli:raw="Reads the next JSON token from the input source.">입력 소스로부터 다음 JSON 토큰을 읽습니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the token was read successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">토큰을 성공적으로 읽은 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token according to the JSON RFC is encountered.&#xA;        &#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">JSON RFC에 따라 잘못된 JSON 토큰이 발견되었습니다.
-또는-
현재 깊이가 최대 깊이에서 설정된 재귀 제한을 초과한 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary vsli:raw="Skips the children of the current JSON token.">현재 JSON 토큰의 자식을 건너뜁니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The reader was given partial data with more data to follow (that is, &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.IsFinalBlock&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;).">판독기에 팔로우할 더 많은 데이터가 포함된 부분 데이터가 제공되었습니다(즉, <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" />이 <see langword="false" />임).</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;&#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">JSON RFC에 따라 건너뛰는 동안 잘못된 JSON 토큰이 발견되었습니다.
-또는-
현재 깊이가 최대 깊이에서 설정된 재귀 제한을 초과한 경우</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary vsli:raw="Gets the index that the last processed JSON token starts at (within the given UTF-8 encoded input text), skipping any white space.">지정된 UTF-8 인코딩 입력 텍스트에서 마지막으로 처리된 JSON 토큰이 시작되는 인덱스를 가져와 공백을 건너뜁니다.</summary>
      <returns vsli:raw="The starting index of the last processed JSON token within the given UTF-8 encoded input text.">지정 된 u t f-8로 인코딩된 입력 텍스트 내에서 마지막으로 처리 된 JSON 토큰의 시작 인덱스입니다.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary vsli:raw="Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.">UTF-8 인코딩 JSON 텍스트로 마지막으로 처리된 JSON 토큰의 형식을 가져옵니다.</summary>
      <returns vsli:raw="The type of the last processed JSON token.">마지막으로 처리 된 JSON 토큰의 형식입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">소스에서 현재 JSON 토큰 값을 <see cref="T:System.Byte" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Byte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전체 UTF-8 인코딩 토큰 값을 <see langword="true" /> 값으로 구문 분석할 수 있는 경우 <see cref="T:System.Byte" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array and returns a value that indicates whether the operation succeeded.">소스에서 현재 JSON 토큰 값을 구문 분석하고 Base64 인코딩된 JSON 문자열을 바이트 배열로 디코딩한 다음 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decoded binary representation of the Base64 text.">이 메서드가 반환될 때 Base64 텍스트의 디코딩된 이진 표현을 포함합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전체 토큰 값이 유효한 Base 64 텍스트로 인코딩되고 바이트에 성공적으로 디코딩할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 토큰이 <see cref="F:System.Text.Json.JsonTokenType.String" />이 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; and returns a value that indicates whether the operation succeeded.">소스에서 현재 JSON 토큰 값을 <see cref="T:System.DateTime" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전체 UTF-8 인코딩 토큰 값을 <see langword="true" /> 값으로 구문 분석할 수 있는 경우 <see cref="T:System.DateTime" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.String" />이 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; and returns a value that indicates whether the operation succeeded.">소스에서 현재 JSON 토큰 값을 <see cref="T:System.DateTimeOffset" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전체 UTF-8 인코딩 토큰 값을 <see langword="true" /> 값으로 구문 분석할 수 있는 경우 <see cref="T:System.DateTimeOffset" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.String" />이 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; and returns a value that indicates whether the operation succeeded.">소스에서 현재 JSON 토큰 값을 <see cref="T:System.Decimal" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전체 UTF-8 인코딩 토큰 값을 <see langword="true" /> 값으로 구문 분석할 수 있는 경우 <see cref="T:System.Decimal" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Double&quot; /&gt; and returns a value that indicates whether the operation succeeded.">소스에서 현재 JSON 토큰 값을 <see cref="T:System.Double" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전체 UTF-8 인코딩 토큰 값을 <see langword="true" /> 값으로 구문 분석할 수 있는 경우 <see cref="T:System.Double" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Guid&quot; /&gt; and returns a value that indicates whether the operation succeeded.">소스에서 현재 JSON 토큰 값을 <see cref="T:System.Guid" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전체 UTF-8 인코딩 토큰 값을 <see langword="true" /> 값으로 구문 분석할 수 있는 경우 <see cref="T:System.Guid" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.String" />이 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">소스에서 현재 JSON 토큰 값을 <see cref="T:System.Int16" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Int16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전체 UTF-8 인코딩 토큰 값을 <see langword="true" /> 값으로 구문 분석할 수 있는 경우 <see cref="T:System.Int16" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">소스에서 현재 JSON 토큰 값을 <see cref="T:System.Int32" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전체 UTF-8 인코딩 토큰 값을 <see langword="true" /> 값으로 구문 분석할 수 있는 경우 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">소스에서 현재 JSON 토큰 값을 <see cref="T:System.Int64" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전체 UTF-8 인코딩 토큰 값을 <see langword="true" /> 값으로 구문 분석할 수 있는 경우 <see cref="T:System.Int64" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">소스에서 현재 JSON 토큰 값을 <see cref="T:System.SByte" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전체 UTF-8 인코딩 토큰 값을 <see langword="true" /> 값으로 구문 분석할 수 있는 경우 <see cref="T:System.SByte" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Single&quot; /&gt; and returns a value that indicates whether the operation succeeded.">소스에서 현재 JSON 토큰 값을 <see cref="T:System.Single" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Single&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전체 UTF-8 인코딩 토큰 값을 <see langword="true" /> 값으로 구문 분석할 수 있는 경우 <see cref="T:System.Single" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">소스에서 현재 JSON 토큰 값을 <see cref="T:System.UInt16" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전체 UTF-8 인코딩 토큰 값을 <see langword="true" /> 값으로 구문 분석할 수 있는 경우 <see cref="T:System.UInt16" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">소스에서 현재 JSON 토큰 값을 <see cref="T:System.UInt32" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전체 UTF-8 인코딩 토큰 값을 <see langword="true" /> 값으로 구문 분석할 수 있는 경우 <see cref="T:System.UInt32" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">소스에서 현재 JSON 토큰 값을 <see cref="T:System.UInt64" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전체 UTF-8 인코딩 토큰 값을 <see langword="true" /> 값으로 구문 분석할 수 있는 경우 <see cref="T:System.UInt64" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary vsli:raw="Tries to skip the children of the current JSON token.">현재 JSON 토큰의 자식을 건너뛰려고 시도합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there was enough data for the children to be skipped successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">자식을 성공적으로 건너뛸 수 있는 충분한 데이터가 있으면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;          &#xA;-or -&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">JSON RFC에 따라 건너뛰는 동안 잘못된 JSON 토큰이 발견되었습니다.
또는
현재 깊이가 최대 깊이에서 설정된 재귀 제한을 초과한 경우</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySequence&amp;lt;byte&amp;gt; slice of the input payload, only if the token is contained within multiple segments.">토큰이 여러 세그먼트에 포함된 경우에만 마지막 처리된 토큰의 원시 값을 입력 페이로드의 ReadOnlySequence&lt;byte&gt; 조각으로 가져옵니다.</summary>
      <returns vsli:raw="A byte read-only sequence.">바이트 읽기 전용 시퀀스입니다.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySpan&amp;lt;byte&amp;gt; slice of the input payload, if the token fits in a single segment or if the reader was constructed with a JSON payload contained in a ReadOnlySpan&amp;lt;byte&amp;gt;.">토큰이 단일 세그먼트에 맞거나 판독기가 ReadOnlySpan&lt;byte&gt;에 포함된 JSON 페이로드를 사용하여 생성된 경우 마지막으로 처리된 토큰의 원시 값을 입력 페이로드의 ReadOnlySpan&lt;byte&gt; 조각으로 가져옵니다.</summary>
      <returns vsli:raw="A read-only span of bytes.">읽기 전용 범위(바이트)입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the UTF-8 encoded text in a read-only byte span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">읽기 전용 바이트 범위의 UTF-8로 인코딩된 텍스트를 소스의 이스케이프되지 않은 JSON 토큰 값과 비교하고, 일치하는지 표시하는 값을 반환합니다.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">비교할 UTF-8로 인코딩된 텍스트입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the UTF-8 encoded lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">소스의 JSON 토큰 값이 UTF-8로 인코딩된 조회 텍스트와 일치하는 경우 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">JSON 토큰이 JSON 문자열이 아닙니다(즉, <see cref="F:System.Text.Json.JsonTokenType.String" /> 또는 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />이 아님).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the text in a read-only character span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">읽기 전용 문자 범위의 텍스트를 소스의 이스케이프되지 않은 JSON 토큰 값과 비교하고, 일치하는지 표시하는 값을 반환합니다.</summary>
      <param name="text" vsli:raw="The text to compare against.">비교할 대상인 텍스트입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">소스의 JSON 토큰 값이 조회 텍스트와 일치하는 경우 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">JSON 토큰이 JSON 문자열이 아닙니다(즉, <see cref="F:System.Text.Json.JsonTokenType.String" /> 또는 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />이 아님).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary vsli:raw="Compares the string text to the unescaped JSON token value in the source and returns a value that indicates whether they match.">지정된 텍스트를 소스의 이스케이프되지 않은 JSON 토큰 값과 비교하고, 일치하는지 표시하는 값을 반환합니다.</summary>
      <param name="text" vsli:raw="The text to compare against.">비교할 대상인 텍스트입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">소스의 JSON 토큰 값이 조회 텍스트와 일치하는 경우 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">JSON 토큰이 JSON 문자열이 아닙니다(즉, <see cref="F:System.Text.Json.JsonTokenType.String" /> 또는 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />이 아님).</exception>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary vsli:raw="Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.">캐시되지 않은 정방향 전용 UTF-8 인코딩 JSON 텍스트를 작성할 수 있는 고성능 API를 제공합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; to write the output to and customization options.">출력을 쓰도록 지정된 <see cref="T:System.Text.Json.Utf8JsonWriter" />와 사용자 지정 옵션을 사용하여 <see cref="T:System.Buffers.IBufferWriter`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">JSON 텍스트를 작성할 대상입니다.</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">
        <see cref="T:System.Text.Json.Utf8JsonWriter" />의 사용자 지정 동작을 정의합니다. 기본적으로 최소화된 JSON(추가 공백 없음)을 작성하고, JSON RFC에 따라 작성 중인 JSON이 구조적으로 유효한지 확인합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified stream to write the output to and customization options.">출력을 쓰도록 지정된 스트림과 사용자 지정 옵션을 사용하여 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">JSON 텍스트를 작성할 대상입니다.</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">
        <see cref="T:System.Text.Json.Utf8JsonWriter" />의 사용자 지정 동작을 정의합니다. 기본적으로 최소화된 JSON(추가 공백 없음)을 작성하고, JSON RFC에 따라 작성 중인 JSON이 구조적으로 유효한지 확인합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary vsli:raw="Gets the total number of bytes committed to the output by the current instance so far.">현재 인스턴스에서 지금까지 출력에 커밋한 총 바이트 수를 가져옵니다.</summary>
      <returns vsli:raw="The total number of bytes committed to the output by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far.">지금까지 <see cref="T:System.Text.Json.Utf8JsonWriter" />에서 출력에 커밋한 총 바이트 수입니다.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary vsli:raw="Gets the number of bytes written by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far that have not yet been flushed to the output and committed.">아직 출력에 플러시되지 않고 커밋되지 않은 <see cref="T:System.Text.Json.Utf8JsonWriter" />에서 지금까지 쓴 바이트 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of bytes written so far by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; that have not yet been flushed to the output and committed.">현재 출력으로 플러시되고 커밋된 적이 없는 <see cref="T:System.Text.Json.Utf8JsonWriter" />에서 지금까지 쓴 바이트 수입니다.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">현재 토큰의 깊이를 가져옵니다.</summary>
      <returns vsli:raw="The depth of the current token.">현재 토큰의 수준입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary vsli:raw="Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">아직 플러시되지 않은 채 남아 있는 모든 JSON 텍스트를 커밋하고, 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary vsli:raw="Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">아직 플러시되지 않은 채 남아 있는 모든 JSON 텍스트를 비동기적으로 커밋하고, 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
      <returns vsli:raw="A task representing the asynchronous dispose operation.">비동기 삭제 조작을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary vsli:raw="Commits the JSON text written so far, which makes it visible to the output destination.">지금까지 작성한 JSON 텍스트를 커밋하여 출력 대상에 표시합니다.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">이 인스턴스가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously commits the JSON text written so far, which makes it visible to the output destination.">지금까지 작성한 JSON 텍스트를 비동기적으로 커밋하여 출력 대상에 표시합니다.</summary>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests. The default value is &lt;see cref=&quot;P:System.Threading.CancellationToken.None&quot; /&gt;.">취소 요청을 모니터링하기 위한 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns vsli:raw="A task representing the asynchronous flush operation.">비동기 플러시 조작을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">이 인스턴스가 삭제되었습니다.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary vsli:raw="Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.">이 인스턴스를 사용하여 JSON을 작성할 때 사용자 지정 동작을 가져옵니다. 이 동작은 쓰기 중에 출력 형식을 지정할지 여부, 구조적 JSON 유효성 검사를 건너뛸지 여부, 그리고 어느 문자를 이스케이프할지를 나타냅니다.</summary>
      <returns vsli:raw="The custom behavior of this instance of the writer for formatting, validating, and escaping.">서식 지정, 유효성 검사 및 이스케이프를 위한이 작성기 인스턴스의 사용자 지정 동작입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused.">다시 사용할 수 있도록 이 인스턴스의 내부 상태를 다시 설정합니다.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">이 인스턴스가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt;.">새 <see cref="T:System.Buffers.IBufferWriter`1" /> 인스턴스에서 다시 사용할 수 있도록 이 인스턴스의 내부 상태를 다시 설정합니다.</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">JSON 텍스트를 작성할 대상입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">이 인스턴스가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">새 <see cref="T:System.IO.Stream" /> 인스턴스에서 다시 사용할 수 있도록 이 인스턴스의 내부 상태를 다시 설정합니다.</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">JSON 텍스트를 작성할 대상입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">이 인스턴스가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">속성 이름 및 원시 바이트 값(Base64 인코딩 JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded name of the property to write.">작성할 속성의 UTF-8 인코딩 이름입니다.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Base64 인코딩 텍스트로 쓸 이진 데이터입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">속성 이름 및 원시 바이트 값(Base64 인코딩 JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 속성 이름입니다.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Base64 인코딩 텍스트로 쓸 이진 데이터입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">속성 이름 및 원시 바이트 값(Base64 인코딩 JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 속성 이름입니다.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Base64 인코딩 텍스트로 쓸 이진 데이터입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 원시 바이트 값(Base64 인코딩 JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON-encoded name of the property to write.">작성할 속성의 JSON 인코딩된 이름입니다.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Base64 인코딩 텍스트로 쓸 이진 데이터입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">지정한 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.">원시 바이트 값을 JSON 배열의 요소로서 Base64 인코딩 JSON 문자열로 작성합니다.</summary>
      <param name="bytes" vsli:raw="The binary data to be written as a Base64 encoded JSON string element of a JSON array.">JSON 배열의 Base64 인코딩 JSON 문자열 요소로 작성할 이진 데이터입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">지정한 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">읽기 전용 바이트 범위로 지정한 속성 이름 및 <see cref="T:System.Boolean" /> 값(JSON 리터럴 true 또는 false)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">이름/값 쌍의 일부로서 JSON 리터럴 true 또는 false로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.Boolean" /> 값(JSON 리터럴 true 또는 false)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">이름/값 쌍의 일부로서 JSON 리터럴 true 또는 false로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">문자열로 지정한 속성 이름 및 <see cref="T:System.Boolean" /> 값(JSON 리터럴 true 또는 false)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">이름/값 쌍의 일부로서 JSON 리터럴 true 또는 false로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 <see cref="T:System.Boolean" /> 값(JSON 리터럴 true 또는 false)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">이름/값 쌍의 일부로서 JSON 리터럴 true 또는 false로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as an element of a JSON array.">
        <see cref="T:System.Boolean" /> 값(JSON 리터럴 true 또는 false)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as an element of a JSON array.">JSON 배열의 요소로서 JSON 리터럴 true 또는 false로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value as a JSON comment.">UTF-8 텍스트 값을 JSON 주석으로 작성합니다.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">/*..*/ 내에서 JSON 주석으로 작성되는 UTF-8로 인코딩된 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">지정한 값이 너무 큽니다.
-또는-
<paramref name="utf8Value" />에 주석 구분 기호(*/)가 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value as a JSON comment.">UTF-16 텍스트 값을 JSON 주석으로 작성합니다.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">/*..*/ 내에서 UTF-8로 트랜스코딩된 JSON 주석으로 작성되는 UTF-16으로 인코딩된 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">지정한 값이 너무 큽니다.
-또는-
<paramref name="value" />에 주석 구분 기호(*/)가 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary vsli:raw="Writes a string text value as a JSON comment.">문자열 텍스트 값을 JSON 주석으로 작성합니다.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">/*..*/ 내에서 UTF-8로 트랜스코딩된 JSON 주석으로 작성되는 UTF-16으로 인코딩된 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">지정한 값이 너무 큽니다.
-또는-
<paramref name="value" />에 주석 구분 기호(*/)가 포함되어 있습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;value&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary vsli:raw="Writes the end of a JSON array.">JSON 배열의 끝 부분을 씁니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary vsli:raw="Writes the end of a JSON object.">JSON 개체의 끝을 씁니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and the JSON literal null as part of a name/value pair of a JSON object.">읽기 전용 바이트 범위로 지정한 속성 이름 및 null JSON 리터럴을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a read-only character span and the JSON literal null as part of a name/value pair of a JSON object.">읽기 전용 문자 범위로 지정한 속성 이름 및 null JSON 리터럴을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary vsli:raw="Writes a property name specified as a string and the JSON literal null as part of a name/value pair of a JSON object.">문자열로 지정한 속성 이름 및 null JSON 리터럴을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and the JSON literal null as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 JSON 리터럴 null을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary vsli:raw="Writes the JSON literal null as an element of a JSON array.">JSON 리터럴 null을 JSON 배열의 요소로서 작성합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">읽기 전용 바이트 범위로 지정한 속성 이름 및 <see cref="T:System.Decimal" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">읽기 전용 바이트 범위로 지정한 속성 이름 및 <see cref="T:System.Double" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">읽기 전용 바이트 범위로 지정한 속성 이름 및 <see cref="T:System.Int32" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">읽기 전용 바이트 범위로 지정한 속성 이름 및 <see cref="T:System.Int64" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">읽기 전용 바이트 범위로 지정한 속성 이름 및 <see cref="T:System.Single" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">읽기 전용 바이트 범위로 지정한 속성 이름 및 <see cref="T:System.UInt32" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">읽기 전용 바이트 범위로 지정한 속성 이름 및 <see cref="T:System.UInt64" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.Decimal" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.Double" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.Int32" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.Int64" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.Single" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.UInt32" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.UInt64" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">문자열로 지정한 속성 이름 및 <see cref="T:System.Decimal" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">문자열로 지정한 속성 이름 및 <see cref="T:System.Double" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">문자열로 지정한 속성 이름 및 <see cref="T:System.Int32" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">문자열로 지정한 속성 이름 및 <see cref="T:System.Int64" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">문자열로 지정한 속성 이름 및 <see cref="T:System.Single" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">문자열로 지정한 속성 이름 및 <see cref="T:System.UInt32" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">문자열로 지정한 속성 이름 및 <see cref="T:System.UInt64" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 <see cref="T:System.Decimal" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 <see cref="T:System.Double" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 <see cref="T:System.Int32" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 <see cref="T:System.Int64" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 <see cref="T:System.Single" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 <see cref="T:System.UInt32" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 <see cref="T:System.UInt64" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as an element of a JSON array.">
        <see cref="T:System.Decimal" /> 값(JSON 숫자)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as an element of a JSON array.">
        <see cref="T:System.Double" /> 값(JSON 숫자)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">
        <see cref="T:System.Int32" /> 값(JSON 숫자)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">
        <see cref="T:System.Int64" /> 값(JSON 숫자)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as an element of a JSON array.">
        <see cref="T:System.Single" /> 값(JSON 숫자)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">
        <see cref="T:System.UInt32" /> 값(JSON 숫자)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">
        <see cref="T:System.UInt64" /> 값(JSON 숫자)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.">UTF-8 속성 이름(JSON 문자열)을 JSON 개체 이름/값 쌍의 첫 번째 파트로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">속성 이름(JSON 문자열)을 JSON 개체 이름/값 쌍의 첫 번째 파트로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">속성 이름(JSON 문자열)을 JSON 개체 이름/값 쌍의 첫 번째 파트로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름(JSON 문자열)을 JSON 개체 이름/값 쌍의 첫 번째 파트로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary vsli:raw="Writes the beginning of a JSON array.">JSON 배열의 시작 부분을 씁니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON의 깊이가 최대 깊이인 1,000을 초과합니다.
-또는-
유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.">읽기 전용 바이트 범위로 지정한 속성 이름을 키로 사용하여 JSON 배열의 시작 부분을 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON array to be written.">작성될 JSON 배열의 UTF-8 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON의 깊이가 최대 깊이인 1,000을 초과합니다.
-또는-
유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.">읽기 전용 문자 범위로 지정한 속성 이름을 키로 사용하여 JSON 배열의 시작 부분을 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 배열의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON의 깊이가 최대 깊이인 1,000을 초과합니다.
-또는-
유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a string as the key.">문자열로 지정한 속성 이름을 키로 사용하여 JSON 배열의 시작 부분을 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 배열의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON의 깊이가 최대 깊이인 1,000을 초과합니다.
-또는-
유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON array with a pre-encoded property name as the key.">미리 인코딩된 속성 이름을 키로 사용하여 JSON 배열의 시작 부분을 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 배열의 JSON 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;    &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">JSON의 깊이가 최대 깊이인 1,000을 초과했습니다.
-또는-
유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary vsli:raw="Writes the beginning of a JSON object.">JSON 개체의 시작 부분을 씁니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and the operation would result in writing invalid JSON.">JSON의 깊이가 최대 깊이인 1,000을 초과합니다.
-또는-
유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.">읽기 전용 바이트 범위로 지정한 속성 이름을 키로 사용하여 JSON 개체의 시작 부분을 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON의 깊이가 최대 깊이인 1,000을 초과합니다.
-또는-
유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only character span as the key.">읽기 전용 문자 범위로 지정한 속성 이름을 키로 사용하여 JSON 개체의 시작 부분을 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON의 깊이가 최대 깊이인 1,000을 초과합니다.
-또는-
유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a string as the key.">문자열로 지정한 속성 이름을 키로 사용하여 JSON 개체의 시작 부분을 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON의 깊이가 최대 깊이인 1,000을 초과합니다.
-또는-
유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON object with a pre-encoded property name as the key.">미리 인코딩된 속성 이름을 키로 사용하여 JSON 개체의 시작 부분을 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;          &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">JSON의 깊이가 최대 깊이인 1,000을 초과했습니다.
-또는-
유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">UTF-8 속성 이름 및 <see cref="T:System.DateTime" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">UTF-8 속성 이름 및 <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">UTF-8 속성 이름 및 <see cref="T:System.Guid" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">UTF-8 속성 이름 및 UTF-8 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">이름/값 쌍의 일부인 JSON 문자열로 작성될 UTF-8 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">UTF-8 속성 이름 및 UTF-16 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary vsli:raw="Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">UTF-8 속성 이름 및 문자열 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">UTF-8 속성 이름 및 미리 인코딩된 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">이름/값 쌍의 일부로서 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.DateTime" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.Guid" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">UTF-16 속성 이름 및 UTF-8 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">이름/값 쌍의 일부인 JSON 문자열로 작성될 UTF-8 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">UTF-16 속성 이름 및 UTF-16 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary vsli:raw="Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">UTF-16 속성 이름 및 문자열 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">속성 이름 및 미리 인코딩된 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 속성 이름입니다.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">이름/값 쌍의 일부로서 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">문자열로 지정한 속성 이름 및 <see cref="T:System.DateTime" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">문자열로 지정한 속성 이름 및 <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">문자열로 지정한 속성 이름 및 <see cref="T:System.Guid" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">문자열로 지정한 속성 이름 및 UTF-8 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">이름/값 쌍의 일부인 JSON 문자열로 작성될 UTF-8 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">문자열로 지정한 속성 이름 및 UTF-16 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary vsli:raw="Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.">문자열로 지정한 속성 이름 및 문자열 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">속성 이름 및 미리 인코딩된 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 속성 이름입니다.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">이름/값 쌍의 일부로서 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 <see cref="T:System.DateTime" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 <see cref="T:System.Guid" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 UTF-8 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">이름/값 쌍의 일부인 JSON 문자열로 작성될 UTF-8 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">지정한 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">이름/값 쌍의 일부로서 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">지정한 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary vsli:raw="Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 문자열 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">이름/값 쌍의 일부로서 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">지정한 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">미리 인코딩된 속성 이름 및 미리 인코딩된 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">이름/값 쌍의 일부로서 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as an element of a JSON array.">
        <see cref="T:System.DateTime" /> 값(JSON 문자열)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">JSON 배열의 요소인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as an element of a JSON array.">
        <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">JSON 배열의 요소인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as an element of a JSON array.">
        <see cref="T:System.Guid" /> 값(JSON 문자열)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">JSON 배열의 요소인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.">UTF-8 텍스트 값(JSON 문자열)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string element of a JSON array.">JSON 배열의 JSON 문자열 요소로 작성될 UTF-8 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">지정한 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.">UTF-16 텍스트 값(JSON 문자열)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">JSON 배열의 UTF-8 트랜스코딩 JSON 문자열 요소로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">지정한 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary vsli:raw="Writes a string text value (as a JSON string) as an element of a JSON array.">문자열 텍스트 값(JSON 문자열)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">JSON 배열의 UTF-8 트랜스코딩 JSON 문자열 요소로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">지정한 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.">미리 인코딩된 텍스트 값(JSON 문자열)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">JSON 배열의 UTF-8 트랜스코딩 JSON 문자열 요소로 작성될 JSON 인코딩 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Cryptography.Algorithms</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.Aes">
      <summary>모든 AES(Advanced Encryption Standard) 구현에서 상속해야 하는 추상 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.Aes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.Create">
      <summary>대칭 알고리즘을 수행하는 데 사용할 암호화 개체를 만듭니다.</summary>
      <returns>대칭 알고리즘을 수행하는 데 사용할 암호화 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Aes.Create(System.String)">
      <summary>대칭 알고리즘을 수행하는 데 사용할 AES의 구현을 지정하는 암호화 개체를 만듭니다.</summary>
      <param name="algorithmName">사용할 AES의 특정 구현 이름입니다.</param>
      <returns>대칭 알고리즘을 수행하는 데 사용할 암호화 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithmName" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.Security.Cryptography.AesCcm">
      <summary>CBC-MAC(CCM) 모드의 작업을 사용하는 카운터와 함께 사용할 AES(Advanced Encryption Standard) 키를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.#ctor(System.Byte[])">
      <summary>제공된 키를 사용하여 <see cref="T:System.Security.Cryptography.AesCcm" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">이 인스턴스에 사용할 비밀 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="key" /> 매개 변수 길이는 16, 24 또는 32바이트 이외의 길이입니다(128, 192 또는 256비트).</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>제공된 키를 사용하여 <see cref="T:System.Security.Cryptography.AesCcm" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">이 인스턴스에 사용할 비밀 키입니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="key" /> 매개 변수 길이는 16, 24 또는 32바이트 이외의 길이입니다(128, 192 또는 256비트).</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>인증 태그의 유효성을 검사할 수 있는 경우 제공된 대상 버퍼의 암호 텍스트를 해독합니다.</summary>
      <param name="nonce">이 메시지와 연결된 nonce로, 암호화 중에 제공된 값과 일치해야 합니다.</param>
      <param name="ciphertext">해독할 암호화된 콘텐츠입니다.</param>
      <param name="tag">암호화하는 동안 이 메시지용으로 생성된 인증 태그입니다.</param>
      <param name="plaintext">해독된 콘텐츠를 받을 바이트 배열입니다.</param>
      <param name="associatedData">이 메시지와 연결된 추가 데이터로, 암호화 중에 제공된 값과 일치해야 합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 매개 변수와 <paramref name="ciphertext" />의 길이가 같지 않습니다.
또는
<paramref name="nonce" /> 매개 변수 길이가 <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" />에서 허용되지 않습니다.
또는
<paramref name="tag" /> 매개 변수 길이가 <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" />에서 허용되지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonce" />, <paramref name="ciphertext" />, <paramref name="tag" /> 또는 <paramref name="plaintext" /> 매개 변수는 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">태그 값을 확인할 수 없거나 암호 해독 작업에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>인증 태그의 유효성을 검사할 수 있는 경우 제공된 대상 버퍼의 암호 텍스트를 해독합니다.</summary>
      <param name="nonce">이 메시지와 연결된 nonce로, 암호화 중에 제공된 값과 일치해야 합니다.</param>
      <param name="ciphertext">해독할 암호화된 콘텐츠입니다.</param>
      <param name="tag">암호화하는 동안 이 메시지용으로 생성된 인증 태그입니다.</param>
      <param name="plaintext">해독된 콘텐츠를 받을 바이트 범위입니다.</param>
      <param name="associatedData">이 메시지와 연결된 추가 데이터로, 암호화 중에 제공된 값과 일치해야 합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 매개 변수와 <paramref name="ciphertext" />의 길이가 같지 않습니다.
또는
<paramref name="nonce" /> 매개 변수 길이가 <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" />에서 허용되지 않습니다.
또는
<paramref name="tag" /> 매개 변수 길이가 <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" />에서 허용되지 않습니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">태그 값을 확인할 수 없거나 암호 해독 작업에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Dispose">
      <summary>
        <see cref="T:System.Security.Cryptography.AesCcm" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>일반 텍스트를 암호화 텍스트 대상 버퍼로 암호화하고 인증 태그를 별도의 버퍼로 생성합니다.</summary>
      <param name="nonce">이 메시지와 연결된 nonce로, 동일한 키를 사용하는 모든 작업에 대해 고유한 값이어야 합니다.</param>
      <param name="plaintext">암호화할 콘텐츠입니다.</param>
      <param name="ciphertext">암호화된 콘텐츠를 받을 바이트 배열입니다.</param>
      <param name="tag">생성된 인증 태그를 수신하는 바이트 배열입니다.</param>
      <param name="associatedData">이 메시지와 연결된 추가 데이터로, 암호 해독 중에도 제공해야 합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 매개 변수와 <paramref name="ciphertext" />의 길이가 같지 않습니다.
또는
<paramref name="nonce" /> 매개 변수 길이가 <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" />에서 허용되지 않습니다.
또는
<paramref name="tag" /> 매개 변수 길이가 <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" />에서 허용되지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonce" />, <paramref name="ciphertext" />, <paramref name="tag" /> 또는 <paramref name="plaintext" /> 매개 변수는 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">암호화 작업에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>일반 텍스트를 암호화 텍스트 대상 버퍼로 암호화하고 인증 태그를 별도의 버퍼로 생성합니다.</summary>
      <param name="nonce">이 메시지와 연결된 nonce로, 동일한 키를 사용하는 모든 작업에 대해 고유한 값이어야 합니다.</param>
      <param name="plaintext">암호화할 콘텐츠입니다.</param>
      <param name="ciphertext">암호화된 콘텐츠를 받을 바이트 범위입니다.</param>
      <param name="tag">생성된 인증 태그를 수신하는 바이트 범위입니다.</param>
      <param name="associatedData">이 메시지와 연결된 추가 데이터로, 암호 해독 중에도 제공해야 합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 매개 변수와 <paramref name="ciphertext" />의 길이가 같지 않습니다.
또는
<paramref name="nonce" /> 매개 변수 길이가 <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" />에서 허용되지 않습니다.
또는
<paramref name="tag" /> 매개 변수 길이가 <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" />에서 허용되지 않습니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">암호화 작업에 실패했습니다.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCcm.NonceByteSizes">
      <summary>이 인스턴스에서 지원하는 nonce 크기(바이트)를 가져옵니다.</summary>
      <returns>이 인스턴스에서 지 원하는 nonce 크기: 7, 8, 9, 10, 11, 12, 13 바이트 (56, 64, 72, 80, 88, 96 또는 104 비트)</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCcm.TagByteSizes">
      <summary>이 인스턴스에서 지원하는 태그 크기(바이트)를 가져옵니다.</summary>
      <returns>이 인스턴스에서 지 원하는 태그 크기: 4, 6, 8, 10, 12, 14 또는 16 바이트 (32, 48, 64, 80, 96, 112 또는 128 비트)</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesGcm">
      <summary>GCM(Galois/Counter Mode) 모드의 작업을 사용하는 카운터와 함께 사용할 AES(Advanced Encryption Standard) 키를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.#ctor(System.Byte[])">
      <summary>제공된 키를 사용하여 <see cref="T:System.Security.Cryptography.AesGcm" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">이 인스턴스에 사용할 비밀 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="key" /> 매개 변수 길이는 16, 24 또는 32바이트 이외의 길이입니다(128, 192 또는 256비트).</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>제공된 키를 사용하여 <see cref="T:System.Security.Cryptography.AesGcm" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">이 인스턴스에 사용할 비밀 키입니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="key" /> 매개 변수 길이는 16, 24 또는 32바이트 이외의 길이입니다(128, 192 또는 256비트).</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>인증 태그의 유효성을 검사할 수 있는 경우 제공된 대상 버퍼의 암호 텍스트를 해독합니다.</summary>
      <param name="nonce">이 메시지와 연결된 nonce로, 암호화 중에 제공된 값과 일치해야 합니다.</param>
      <param name="ciphertext">해독할 암호화된 콘텐츠입니다.</param>
      <param name="tag">암호화하는 동안 이 메시지용으로 생성된 인증 태그입니다.</param>
      <param name="plaintext">해독된 콘텐츠를 받을 바이트 배열입니다.</param>
      <param name="associatedData">이 메시지와 연결된 추가 데이터로, 암호화 중에 제공된 값과 일치해야 합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 매개 변수와 <paramref name="ciphertext" />의 길이가 같지 않습니다.
또는
<paramref name="nonce" /> 매개 변수 길이가 <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" />에서 허용되지 않습니다.
또는
<paramref name="tag" /> 매개 변수 길이가 <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" />에서 허용되지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonce" />, <paramref name="ciphertext" />, <paramref name="tag" /> 또는 <paramref name="plaintext" /> 매개 변수는 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">태그 값을 확인할 수 없거나 암호 해독 작업에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>인증 태그의 유효성을 검사할 수 있는 경우 제공된 대상 버퍼의 암호 텍스트를 해독합니다.</summary>
      <param name="nonce">이 메시지와 연결된 nonce로, 암호화 중에 제공된 값과 일치해야 합니다.</param>
      <param name="ciphertext">해독할 암호화된 콘텐츠입니다.</param>
      <param name="tag">암호화하는 동안 이 메시지용으로 생성된 인증 태그입니다.</param>
      <param name="plaintext">해독된 콘텐츠를 받을 바이트 범위입니다.</param>
      <param name="associatedData">이 메시지와 연결된 추가 데이터로, 암호화 중에 제공된 값과 일치해야 합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 매개 변수와 <paramref name="ciphertext" />의 길이가 같지 않습니다.
또는
<paramref name="nonce" /> 매개 변수 길이가 <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" />에서 허용되지 않습니다.
또는
<paramref name="tag" /> 매개 변수 길이가 <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" />에서 허용되지 않습니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">태그 값을 확인할 수 없거나 암호 해독 작업에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Dispose">
      <summary>
        <see cref="T:System.Security.Cryptography.AesGcm" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>일반 텍스트를 암호화 텍스트 대상 버퍼로 암호화하고 인증 태그를 별도의 버퍼로 생성합니다.</summary>
      <param name="nonce">이 메시지와 연결된 nonce로, 동일한 키를 사용하는 모든 작업에 대해 고유한 값이어야 합니다.</param>
      <param name="plaintext">암호화할 콘텐츠입니다.</param>
      <param name="ciphertext">암호화된 콘텐츠를 받을 바이트 배열입니다.</param>
      <param name="tag">생성된 인증 태그를 수신하는 바이트 배열입니다.</param>
      <param name="associatedData">이 메시지와 연결된 추가 데이터로, 암호 해독 중에도 제공해야 합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 매개 변수와 <paramref name="ciphertext" />의 길이가 같지 않습니다.
또는
<paramref name="nonce" /> 매개 변수 길이가 <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" />에서 허용되지 않습니다.
또는
<paramref name="tag" /> 매개 변수 길이가 <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" />에서 허용되지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonce" />, <paramref name="ciphertext" />, <paramref name="tag" /> 또는 <paramref name="plaintext" /> 매개 변수는 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">암호화 작업에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>일반 텍스트를 암호화 텍스트 대상 버퍼로 암호화하고 인증 태그를 별도의 버퍼로 생성합니다.</summary>
      <param name="nonce">이 메시지와 연결된 nonce로, 동일한 키를 사용하는 모든 작업에 대해 고유한 값이어야 합니다.</param>
      <param name="plaintext">암호화할 콘텐츠입니다.</param>
      <param name="ciphertext">암호화된 콘텐츠를 받을 바이트 배열입니다.</param>
      <param name="tag">생성된 인증 태그를 수신하는 바이트 배열입니다.</param>
      <param name="associatedData">이 메시지와 연결된 추가 데이터로, 암호 해독 중에도 제공해야 합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 매개 변수와 <paramref name="ciphertext" />의 길이가 같지 않습니다.
또는
<paramref name="nonce" /> 매개 변수 길이가 <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" />에서 허용되지 않습니다.
또는
<paramref name="tag" /> 매개 변수 길이가 <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" />에서 허용되지 않습니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">암호화 작업에 실패했습니다.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesGcm.NonceByteSizes">
      <summary>이 인스턴스에서 지원하는 nonce 크기(바이트)를 가져옵니다.</summary>
      <returns>이 인스턴스에서 지 원하는 nonce 크기: 12 바이트 (96 비트)</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesGcm.TagByteSizes">
      <summary>이 인스턴스에서 지원하는 태그 크기(바이트)를 가져옵니다.</summary>
      <returns>이 인스턴스에서 지 원하는 태그 크기는 12, 13, 14, 15 또는 16 바이트 (96, 104, 112, 120 또는 128 비트)입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>AES(Advanced Encryption Standard) 대칭 알고리즘의 관리되는 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.AesManaged" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">FIPS를 위한 Windows 보안 정책 설정을 사용 중인 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 구현은 Windows Platform FIPS 유효성 검사 암호화 알고리즘의 일부가 아닙니다.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.BlockSize">
      <summary>암호화 작업의 블록 크기(비트 단위)를 가져오거나 설정합니다.</summary>
      <returns>암호화 작업의 블록 크기 (비트)입니다. 기본값은 128 비트입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>현재 키 및 IV(초기화 벡터)를 사용하여 대칭 decryptor 개체를 만듭니다.</summary>
      <returns>대칭 decryptor 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>지정된 키와 IV(초기화 벡터)를 사용하여 대칭 decryptor 개체를 만듭니다.</summary>
      <param name="rgbKey">대칭 알고리즘에 사용할 비밀 키입니다.</param>
      <param name="rgbIV">대칭 알고리즘에 사용할 초기화 벡터입니다.</param>
      <returns>대칭 decryptor 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 또는 <paramref name="iv" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>현재 키 및 IV(초기화 벡터)를 사용하여 대칭 encryptor 개체를 만듭니다.</summary>
      <returns>대칭 encryptor 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>지정된 키와 IV(초기화 벡터)를 사용하여 대칭 encryptor 개체를 만듭니다.</summary>
      <param name="rgbKey">대칭 알고리즘에 사용할 비밀 키입니다.</param>
      <param name="rgbIV">대칭 알고리즘에 사용할 초기화 벡터입니다.</param>
      <returns>대칭 encryptor 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 또는 <paramref name="iv" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" />이 잘못되었습니다.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.FeedbackSize">
      <summary>피드백으로 사용할 비트 수를 가져오거나 설정합니다.</summary>
      <returns>피드백 크기(비트 단위)입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>대칭 알고리즘에 사용할 무작위 IV(초기화 벡터)를 생성합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>대칭 알고리즘에 사용할 무작위 키를 생성합니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>대칭 알고리즘에 대한 IV(초기화 벡터)를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘에 사용할 초기화 벡터입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>대칭 알고리즘에 사용되는 비밀 키를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘의 키입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>대칭 알고리즘에 사용되는 비밀 키의 크기(비트 단위)를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘에 사용되는 키 크기(비트 단위)입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalBlockSizes">
      <summary>대칭 알고리즘에서 지원하는 블록 크기(비트 단위)를 가져옵니다.</summary>
      <returns>대칭 알고리즘에서 지 원하는 블록 크기 (비트)입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalKeySizes">
      <summary>대칭 알고리즘에서 지원하는 키 크기(비트 단위)를 가져옵니다.</summary>
      <returns>대칭 알고리즘에서 지 원하는 키 크기 (비트)입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Mode">
      <summary>대칭 알고리즘의 작업 모드를 가져오거나 설정합니다.</summary>
      <returns>암호화에 사용할 블록 암호화 모드를 지정하는 열거형 값 중 하나입니다. 기본값은 <see cref="F:System.Security.Cryptography.CipherMode.CBC" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.AesManaged.Mode" />이 <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> 또는 <see cref="F:System.Security.Cryptography.CipherMode.OFB" />로 설정됩니다.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Padding">
      <summary>대칭 알고리즘에 사용된 패딩 모드를 가져오거나 설정합니다.</summary>
      <returns>적용할 여백 형식을 지정하는 열거형 값 중 하나입니다. 기본값은 <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter">
      <summary>모든 비대칭 키 교환 디포맷터가 파생되는 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>파생 클래스에서 재정의된 경우 암호화된 키 교환 데이터에서 비밀 정보를 추출합니다.</summary>
      <param name="rgb">비밀 정보가 숨겨진 키 교환 데이터입니다.</param>
      <returns>키 교환 데이터에서 파생된 비밀 정보입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.Parameters">
      <summary>파생 클래스에서 재정의된 경우 비대칭 키 교환에 대한 매개 변수를 가져오거나 설정합니다.</summary>
      <returns>비대칭 키 교환 작업의 매개 변수를 포함하는 XML 형식의 문자열입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>파생 클래스에서 재정의된 경우 비밀 정보의 암호를 해독하는 데 사용할 프라이빗 키를 설정합니다.</summary>
      <param name="key">프라이빗 키를 보유하는 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 구현의 인스턴스입니다.</param>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter">
      <summary>모든 비대칭 키 교환 포맷터가 파생되는 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>파생 클래스에서 재정의된 경우 지정된 입력 데이터에서 암호화된 키 교환 데이터를 만듭니다.</summary>
      <param name="data">키 교환 시 전달할 비밀 정보입니다.</param>
      <returns>지정된 수신자에게 보낼 암호화된 키 교환 데이터입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>파생 클래스에서 재정의된 경우 지정된 입력 데이터에서 암호화된 키 교환 데이터를 만듭니다.</summary>
      <param name="data">키 교환 시 전달할 비밀 정보입니다.</param>
      <param name="symAlgType">이 매개 변수는 현재 버전에서 사용되지 않습니다.</param>
      <returns>지정된 수신자에게 보낼 암호화된 키 교환 데이터입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters">
      <summary>파생 클래스에서 재정의하는 경우 비대칭 키 교환에 대한 매개 변수를 가져옵니다.</summary>
      <returns>비대칭 키 교환 작업의 매개 변수를 포함하는 XML 형식의 문자열입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>파생 클래스에서 재정의하는 경우 비밀 정보를 암호화하는 데 사용할 공개 키를 설정합니다.</summary>
      <param name="key">공개 키를 보유하는 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 구현의 인스턴스입니다.</param>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureDeformatter">
      <summary>모든 비대칭 서명 디포맷터의 구현이 파생될 기본 추상 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>파생 클래스에서 재정의하는 경우 서명 확인에 사용할 해시 알고리즘을 설정합니다.</summary>
      <param name="strName">서명을 확인하는 데 사용할 해시 알고리즘의 이름입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>파생 클래스에서 재정의하는 경우 서명 확인에 사용할 공개 키를 설정합니다.</summary>
      <param name="key">공개 키를 보유하는 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 구현의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>파생 클래스에서 재정의하는 경우 지정된 데이터에 대한 서명을 확인합니다.</summary>
      <param name="rgbHash">
        <paramref name="rgbSignature" />로 서명된 데이터입니다.</param>
      <param name="rgbSignature">
        <paramref name="rgbHash" />에 대해 확인할 서명입니다.</param>
      <returns>
        <paramref name="rgbSignature" />가 지정된 해시 알고리즘 및 <paramref name="rgbHash" />의 키를 사용하여 계산된 서명과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
      <summary>지정된 해시 값에서 서명을 확인합니다.</summary>
      <param name="hash">서명을 확인하는데 사용할 해시 알고리즘입니다.</param>
      <param name="rgbSignature">확인할 서명입니다.</param>
      <returns>서명이 해시에 대해 유효하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureFormatter">
      <summary>모든 비대칭 서명 포맷터의 구현이 파생되는 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])">
      <summary>파생 클래스에서 재정의된 경우 지정된 데이터에 대한 서명을 만듭니다.</summary>
      <param name="rgbHash">서명할 데이터입니다.</param>
      <returns>
        <paramref name="rgbHash" /> 매개 변수의 디지털 서명입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)">
      <summary>지정된 해시 값의 서명을 만듭니다.</summary>
      <param name="hash">서명을 만드는 데 사용할 해시 알고리즘입니다.</param>
      <returns>지정된 해시 값의 서명입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>파생 클래스에서 재정의하는 경우 서명을 만드는 데 사용할 해시 알고리즘을 설정합니다.</summary>
      <param name="strName">서명을 만드는 데 사용할 해시 알고리즘의 이름입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>파생 클래스에서 재정의하는 경우 서명을 만드는 데 사용할 비대칭 알고리즘을 설정합니다.</summary>
      <param name="key">서명을 만드는데 사용할 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />의 구현 인스턴스입니다.</param>
    </member>
    <member name="T:System.Security.Cryptography.CryptoConfig">
      <summary>암호화 구성 정보에 액세스합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.CryptoConfig" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])">
      <summary>현재 애플리케이션 도메인에 사용할 알고리즘 매핑에 이름 집합을 추가합니다.</summary>
      <param name="algorithm">매핑할 알고리즘입니다.</param>
      <param name="names">알고리즘에 매핑할 이름 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 또는 <paramref name="names" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="algorithm" />은 어셈블리 외부에서 액세스할 수 없습니다.
또는
<paramref name="names" /> 매개 변수의 항목 중 하나가 비어 있거나 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.AddOID(System.String,System.String[])">
      <summary>현재 애플리케이션 도메인에 사용할 OID(Object Identifier) 매핑에 이름 집합을 추가합니다.</summary>
      <param name="oid">매핑할 OID(Object Identifier)입니다.</param>
      <param name="names">OID에 매핑할 이름 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oid" /> 또는 <paramref name="names" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" /> 매개 변수의 항목 중 하나가 비어 있거나 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms">
      <summary>런타임에서 정책을 적용하여 FIPS(Federal Information Processing Standard) 인증 알고리즘만 만들지 여부를 나타냅니다.</summary>
      <returns>정책을 적용하는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String)">
      <summary>지정된 암호화 개체의 새 인스턴스를 만듭니다.</summary>
      <param name="name">인스턴스를 만드는 암호화 개체의 단순한 이름입니다.</param>
      <returns>지정된 암호화 개체의 새 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <paramref name="name" /> 매개 변수에서 설명하는 알고리즘이 FIPS(Federal Information Processing Standards) 모드를 설정하여 사용되었지만 FIPS 호환이 아닌 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String,System.Object[])">
      <summary>지정된 인수를 사용하여 지정된 암호화 개체의 새 인스턴스를 만듭니다.</summary>
      <param name="name">인스턴스를 만드는 암호화 개체의 단순한 이름입니다.</param>
      <param name="args">지정된 암호화 개체를 만드는 데 사용되는 인수입니다.</param>
      <returns>지정된 암호화 개체의 새 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <paramref name="name" /> 매개 변수에서 설명하는 알고리즘이 FIPS(Federal Information Processing Standards) 모드를 설정하여 사용되었지만 FIPS 호환이 아닌 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.EncodeOID(System.String)">
      <summary>지정된 OID(Object Identifier)를 인코딩합니다.</summary>
      <param name="str">인코딩할 OID입니다.</param>
      <returns>인코딩된 OID를 포함하는 바이트 배열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">OID를 인코딩하는 동안 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)">
      <summary>지정된 단순한 이름에 대응되는 알고리즘의 OID(object identifier)를 가져옵니다.</summary>
      <param name="name">OID를 가져올 알고리즘의 단순한 이름입니다.</param>
      <returns>지정된 알고리즘의 OID입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Security.Cryptography.DeriveBytes">
      <summary>지정된 길이의 바이트 시퀀스를 파생시키는 모든 클래스가 상속되는 추상 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.DeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Dispose">
      <summary>파생 클래스에서 재정의되는 경우 <see cref="T:System.Security.Cryptography.DeriveBytes" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 모두 해제합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)">
      <summary>파생 클래스에서 재정의할 경우, <see cref="T:System.Security.Cryptography.DeriveBytes" /> 클래스에서 사용하는 관리되지 않는 리소스를 해제하고 관리되는 리소스를 선택적으로 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)">
      <summary>파생 클래스에서 재정의하는 경우 의사(pseudo) 난수 키 바이트가 반환됩니다.</summary>
      <param name="cb">생성할 의사(pseudo) 난수 키 바이트의 수입니다.</param>
      <returns>의사(pseudo) 난수 키 바이트로 채워진 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Reset">
      <summary>파생 클래스에서 재정의하는 경우 작업의 상태를 다시 설정합니다.</summary>
    </member>
    <member name="T:System.Security.Cryptography.DES">
      <summary>모든 <see cref="T:System.Security.Cryptography.DES" /> 구현이 파생되어야 하는 DES(데이터 암호화 표준) 알고리즘에 대한 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.DES" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create">
      <summary>데이터 암호화 표준(<see cref="T:System.Security.Cryptography.DES" />) 알고리즘을 수행하는 암호화 개체의 인스턴스를 만듭니다.</summary>
      <returns>암호화 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create(System.String)">
      <summary>암호화 개체의 인스턴스를 만들어 지정된 데이터 암호화 표준(<see cref="T:System.Security.Cryptography.DES" />) 알고리즘을 구현합니다.</summary>
      <param name="algName">사용하려는 <see cref="T:System.Security.Cryptography.DES" />의 특정 구현에 대한 이름입니다.</param>
      <returns>암호화 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])">
      <summary>지정한 키가 semi-weak인지 여부를 확인합니다.</summary>
      <param name="rgbKey">semi-weak 키인지 여부를 테스트할 비밀 키입니다.</param>
      <returns>키가 semi-weak이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 매개 변수의 크기가 올바르지 않은 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])">
      <summary>지정한 키가 weak인지 여부를 확인합니다.</summary>
      <param name="rgbKey">weak 키인지 여부를 테스트할 비밀 키입니다.</param>
      <returns>키가 weak이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 매개 변수의 크기가 올바르지 않은 경우</exception>
    </member>
    <member name="P:System.Security.Cryptography.DES.Key">
      <summary>데이터 암호화 표준(<see cref="T:System.Security.Cryptography.DES" />) 알고리즘에 대한 비밀 키를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.DES" /> 알고리즘에 대한 비밀 키입니다.</returns>
      <exception cref="T:System.ArgumentNullException">키를 <see langword="null" />로 설정하려고 한 경우</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue" />와 길이가 다른 키를 설정하려고 한 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">weak 키(<see cref="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])" /> 참조)나 semi-weak 키(<see cref="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])" /> 참조)를 설정하려고 한 경우</exception>
    </member>
    <member name="T:System.Security.Cryptography.DSA">
      <summary>모든 디지털 서명 알고리즘(<see cref="T:System.Security.Cryptography.DSA" />)의 구현이 상속되어야 하는 기본 추상 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create">
      <summary>비대칭 알고리즘을 수행하는 데 사용하는 기본 암호화 개체를 만듭니다.</summary>
      <returns>비대칭 알고리즘을 수행하는 데 사용하는 암호화 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.Int32)">
      <summary>지정된 키 크기를 이용하여 새 임시 DSA 키를 만듭니다.</summary>
      <param name="keySizeInBits">키의 크기(비트)입니다.</param>
      <returns>지정된 키 크기를 이용하여 만든 새 임시 DSA 키입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySizeInBits" />는 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes" />에서 허용되지 않습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)">
      <summary>지정된 DSA 키 매개 변수를 이용하여 새 임시 DSA 키를 만듭니다.</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.DSA" /> 알고리즘의 매개 변수입니다.</param>
      <returns>새 임시 DSA 키입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.String)">
      <summary>비대칭 알고리즘을 수행하는 데 사용하는 지정된 암호화 개체를 만듭니다.</summary>
      <param name="algName">사용하려는 <see cref="T:System.Security.Cryptography.DSA" />의 특정 구현에 대한 이름입니다.</param>
      <returns>비대칭 알고리즘을 수행하는 데 사용하는 암호화 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[])">
      <summary>파생 클래스에서 재정의되는 경우 지정된 해시 값에 대한 <see cref="T:System.Security.Cryptography.DSA" /> 시그니처를 만듭니다.</summary>
      <param name="rgbHash">서명할 해시 값입니다.</param>
      <returns>지정된 해시 값의 디지털 시그니처입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ExportParameters(System.Boolean)">
      <summary>파생 클래스에서 재정의하는 경우 <see cref="T:System.Security.Cryptography.DSAParameters" />를 내보냅니다.</summary>
      <param name="includePrivateParameters">private 매개 변수를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>
        <see cref="T:System.Security.Cryptography.DSA" />에 대한 매개 변수입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.FromXmlString(System.String)">
      <summary>XML 문자열에서 <see cref="T:System.Security.Cryptography.DSA" /> 개체를 다시 만듭니다.</summary>
      <param name="xmlString">
        <see cref="T:System.Security.Cryptography.DSA" /> 개체를 재생성하는 데 사용할 XML 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlString" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="xmlString" /> 매개 변수의 형식이 올바르지 않습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>파생 클래스에서 재정의할 때 지정된 해싱 알고리즘을 사용하여 지정된 바이트 배열 부분의 해시 값을 계산합니다.</summary>
      <param name="data">해시할 데이터입니다.</param>
      <param name="offset">해시할 <paramref name="data" />에 있는 첫 번째 바이트의 인덱스입니다.</param>
      <param name="count">해시할 바이트 수입니다.</param>
      <param name="hashAlgorithm">데이터를 해시하는 데 사용하는 알고리즘입니다.</param>
      <returns>해시된 데이터입니다.</returns>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>파생 클래스에서 재정의할 때 지정된 해싱 알고리즘을 사용하여 지정된 이진 스트림의 해시 값을 계산합니다.</summary>
      <param name="data">해시할 이진 스트림입니다.</param>
      <param name="hashAlgorithm">데이터를 해시하는 데 사용하는 알고리즘입니다.</param>
      <returns>해시된 데이터입니다.</returns>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>바이트 기반 암호로 해독한 다음 이 개체의 키를 대체하여 PKCS#8 EncryptedPrivateKeyInfo 구조체에서 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="passwordBytes">키 자료를 해독할 때 암호로 사용할 바이트입니다.</param>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#8 EncryptedPrivateKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">암호가 잘못되었습니다.
또는
<paramref name="source" />의 콘텐츠에서는 적용할 KDF(키 파생 함수)가 <see cref="T:System.Char" /> 기반 암호가 필요한 레거시 PKCS#12 KDF임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>문자 기반 암호로 해독한 다음 이 개체의 키를 대체하여 PKCS#8 EncryptedPrivateKeyInfo 구조에서 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="password">키 자료의 암호를 해독하는 데 사용할 암호입니다.</param>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#8 EncryptedPrivateKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">암호가 잘못되었습니다.
또는
<paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)">
      <summary>파생 클래스에서 재정의하는 경우 지정된 <see cref="T:System.Security.Cryptography.DSAParameters" />를 가져옵니다.</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.DSA" />에 대한 매개 변수입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" />에 필수 필드가 없습니다.
또는
<paramref name="parameters" />에 유효한 키의 길이가 일치하지 않는 필드가 있습니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" />가 유효한 DSA 키 매개 변수 세트를 나타내지 않습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>해독한 다음 이 개체의 키를 대체하여 PKCS#8 PrivateKeyInfo 구조에서 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#8 PrivateKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 PrivateKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>해독한 다음 이 개체의 키를 대체하여 X.509 SubjectPublicKeyInfo 구조에서 퍼블릭 키를 가져옵니다.</summary>
      <param name="source">ASN.1-DER 인코딩으로 된 X.509 SubjectPublicKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" />의 콘텐츠에서 ASN.1-DER-encoded X.509 SubjectPublicKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 해시 알고리즘을 사용하여 지정된 바이트 배열 일부의 해시 값을 계산하고 결과 해시 값을 서명합니다.</summary>
      <param name="data">해시를 컴퓨팅할 입력 데이터입니다.</param>
      <param name="offset">데이터 사용을 시작할 배열의 오프셋입니다.</param>
      <param name="count">데이터로 사용할 배열의 바이트 수입니다.</param>
      <param name="hashAlgorithm">해시 값을 만드는 데 사용할 해시 알고리즘입니다.</param>
      <returns>지정된 데이터의 DSA 서명입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" />가 0보다 작은 경우
또는
<paramref name="count" />가 0보다 작은 경우
또는
<paramref name="offset" /> + <paramref name="count" /> – 1의 결과는 <paramref name="data" />의 상한을 초과하는 인덱스입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 해시 알고리즘을 사용하여 지정된 바이트 배열의 해시 값을 계산하고 결과 해시 값을 서명합니다.</summary>
      <param name="data">해시를 컴퓨팅할 입력 데이터입니다.</param>
      <param name="hashAlgorithm">해시 값을 만드는 데 사용할 해시 알고리즘입니다.</param>
      <returns>지정된 데이터의 DSA 서명입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 해시 알고리즘을 사용하여 지정된 스트림의 해시 값을 계산하고 결과 해시 값을 서명합니다.</summary>
      <param name="data">해시를 컴퓨팅할 입력 스트림입니다.</param>
      <param name="hashAlgorithm">해시 값을 만드는 데 사용할 해시 알고리즘입니다.</param>
      <returns>지정된 데이터의 DSA 서명입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ToXmlString(System.Boolean)">
      <summary>현재 <see cref="T:System.Security.Cryptography.DSA" /> 개체의 XML 문자열 표현을 만들고 반환합니다.</summary>
      <param name="includePrivateParameters">private 매개 변수를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>현재 <see cref="T:System.Security.Cryptography.DSA" /> 개체의 XML 문자열 인코딩입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>제공된 버퍼에 지정된 해시의 DSA 시그니처를 만들려고 합니다.</summary>
      <param name="hash">서명할 해시입니다.</param>
      <param name="destination">시그니처를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환하는 경우 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다.</param>
      <returns>
        <paramref name="destination" />이 결과를 받는 데 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">이 인스턴스는 퍼블릭 키만 나타냅니다.
또는
구현 형식은 레거시 DSA(FIPS 186-2)만 지원하며 <paramref name="hash" />가 20바이트 값이 아닙니다.
또는
그 외의 경우에는 시그니처를 만들지 못했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>바이트 기반 암호를 사용하여 PKCS#8 EncryptedPrivateKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="passwordBytes">키 자료를 암호화할 때 암호로 사용할 바이트입니다.</param>
      <param name="pbeParameters">키 자료를 암호화할 때 사용할 PBE(암호 기반 암호화) 매개 변수입니다.</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.
또는
<paramref name="pbeParameters" />는 <see cref="T:System.Char" /> 기반 암호가 필요한 <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />를 사용해야 함을 나타냅니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>문자 기반 암호를 사용하여 PKCS#8 EncryptedPrivateKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="password">키 자료를 암호화할 때 사용할 암호입니다.</param>
      <param name="pbeParameters">키 자료를 암호화할 때 사용할 PBE(암호 기반 암호화) 매개 변수입니다.</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>PKCS#8 PrivateKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="destination">PKCS # 8 PrivateKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>X.509 SubjectPublicKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="destination">X.509 SubjectPublicKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>제공된 버퍼에 제공된 데이터의 해시 값을 컴퓨팅하려고 시도합니다.</summary>
      <param name="data">해시할 데이터입니다.</param>
      <param name="destination">해시 값을 받을 바이트 범위입니다.</param>
      <param name="hashAlgorithm">사용할 해시 알고리즘의 이름입니다.</param>
      <param name="bytesWritten">이 메서드가 반환하는 경우 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다.</param>
      <returns>
        <paramref name="destination" />이 결과를 받는 데 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>제공된 버퍼에 지정된 데이터의 DSA 시그니처를 만들려고 합니다.</summary>
      <param name="data">해시하고 서명할 데이터입니다.</param>
      <param name="destination">시그니처를 받을 바이트 범위입니다.</param>
      <param name="hashAlgorithm">사용할 해시 알고리즘의 이름입니다.</param>
      <param name="bytesWritten">이 메서드가 반환하는 경우 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다.</param>
      <returns>
        <paramref name="destination" />이 결과를 받는 데 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 해시 알고리즘을 사용하여 지정된 데이터의 해시 값을 계산한 다음 이 값을 제공된 서명과 비교하여 디지털 서명이 유효한지 확인합니다.</summary>
      <param name="data">서명된 데이터입니다.</param>
      <param name="signature">확인할 서명 데이터입니다.</param>
      <param name="hashAlgorithm">데이터의 해시 값을 만드는 데 사용하는 해시 알고리즘입니다.</param>
      <returns>디지털 서명이 유효한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우
또는
<paramref name="signature" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">구현 형식은 레거시 DSA(FIPS 186-2)만 지원하며 해시 알고리즘은 SHA-1이 아닙니다.
또는
그 외의 경우에는 시그니처를 확인하지 못했습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 해시 알고리즘을 사용하여 바이트 배열 일부에 있는 데이터의 해시 값을 계산한 다음 이 값을 제공된 서명과 비교하여 디지털 서명이 유효한지 확인합니다.</summary>
      <param name="data">서명된 데이터입니다.</param>
      <param name="offset">해시를 컴퓨팅할 시작 인덱스입니다.</param>
      <param name="count">해시할 바이트 수입니다.</param>
      <param name="signature">확인할 서명 데이터입니다.</param>
      <param name="hashAlgorithm">데이터의 해시 값을 만드는 데 사용하는 해시 알고리즘입니다.</param>
      <returns>디지털 서명이 유효한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우
또는
<paramref name="signature" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" />가 0보다 작은 경우
또는
<paramref name="count" />가 0보다 작은 경우
또는
<paramref name="offset" /> + <paramref name="count" /> – 1의 결과는 <paramref name="data" />의 상한을 초과하는 인덱스입니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">구현 형식은 레거시 DSA(FIPS 186-2)만 지원하며 해시 알고리즘은 SHA-1이 아닙니다.
또는
그 외의 경우에는 시그니처를 확인하지 못했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 해시 알고리즘을 사용하여 지정된 스트림의 해시 값을 계산한 다음 이 값을 제공된 서명과 비교하여 디지털 서명이 유효한지 확인합니다.</summary>
      <param name="data">서명된 데이터입니다.</param>
      <param name="signature">확인할 서명 데이터입니다.</param>
      <param name="hashAlgorithm">데이터의 해시 값을 만드는 데 사용하는 해시 알고리즘입니다.</param>
      <returns>디지털 서명이 유효한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우
또는
<paramref name="signature" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">구현 형식은 레거시 DSA(FIPS 186-2)만 지원하며 해시 알고리즘은 SHA-1이 아닙니다.
또는
그 외의 경우에는 시그니처를 확인하지 못했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 해시 알고리즘을 사용하여 바이트 범위에 있는 데이터의 해시 값을 계산한 다음 이 값을 제공된 서명과 비교하여 디지털 시그니처가 유효한지 확인합니다.</summary>
      <param name="data">서명된 데이터입니다.</param>
      <param name="signature">확인할 서명입니다.</param>
      <param name="hashAlgorithm">데이터의 해시 값을 만드는 데 사용하는 해시 알고리즘입니다.</param>
      <returns>디지털 서명이 유효한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">구현 형식은 레거시 DSA(FIPS 186-2)만 지원하며 해시 알고리즘은 SHA-1이 아닙니다.
또는
그 외의 경우에는 시그니처를 확인하지 못했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])">
      <summary>파생 클래스에서 재정의된 경우 지정한 데이터에 대한 <see cref="T:System.Security.Cryptography.DSA" /> 서명을 확인합니다.</summary>
      <param name="rgbHash">
        <paramref name="rgbSignature" />를 사용하여 서명한 데이터의 해시입니다.</param>
      <param name="rgbSignature">
        <c>rgbData</c>에 대해 확인할 서명입니다.</param>
      <returns>
        <paramref name="rgbSignature" />가 지정된 해시 알고리즘 및 <paramref name="rgbHash" />의 키를 사용하여 계산된 서명과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">구현 형식은 레거시 DSA(FIPS 186-2)만 지원하며 해시 값의 길이는 20바이트가 아닙니다.
또는
그 외의 경우에는 시그니처를 확인하지 못했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>제공된 데이터 해시의 디지털 시그니처가 유효한지 확인합니다.</summary>
      <param name="hash">확인할 데이터 해시입니다.</param>
      <param name="signature">확인할 시그니처입니다.</param>
      <returns>디지털 시그니처가 해시에 대해 유효하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">구현 형식은 레거시 DSA(FIPS 186-2)만 지원하며 해시 값의 길이는 20바이트가 아닙니다.
또는
그 외의 경우에는 시그니처를 확인하지 못했습니다.</exception>
    </member>
    <member name="T:System.Security.Cryptography.DSAParameters">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> 알고리즘에 대한 일반 매개 변수를 포함합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Counter">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> 알고리즘에 대한 카운터를 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.G">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> 알고리즘에 대한 <see langword="G" /> 매개 변수를 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.J">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> 알고리즘에 대한 <see langword="J" /> 매개 변수를 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.P">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> 알고리즘에 대한 <see langword="P" /> 매개 변수를 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Q">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> 알고리즘에 대한 <see langword="Q" /> 매개 변수를 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Seed">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> 알고리즘에 대한 시드를 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.X">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> 알고리즘에 대한 <see langword="X" /> 매개 변수를 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Y">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> 알고리즘에 대한 <see langword="Y" /> 매개 변수를 지정합니다.</summary>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureDeformatter">
      <summary>디지털 서명 알고리즘(<see cref="T:System.Security.Cryptography.DSA" />) PKCS#1 v1.5 서명을 확인합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>지정된 키를 사용하여 <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">키를 보유하는 디지털 서명 알고리즘(<see cref="T:System.Security.Cryptography.DSA" />)의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>디지털 서명 알고리즘(<see cref="T:System.Security.Cryptography.DSA" />) 서명 변형자에 대해 해시 알고리즘을 지정합니다.</summary>
      <param name="strName">서명 변형자에 사용할 해시 알고리즘의 이름입니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
        <paramref name="strName" /> 매개 변수가 <see cref="T:System.Security.Cryptography.SHA1" /> 해시 알고리즘에 매핑되어야 하는 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>디지털 서명 알고리즘(<see cref="T:System.Security.Cryptography.DSA" />) 서명 변형자를 위해 사용되는 키를 지정합니다.</summary>
      <param name="key">키를 보유하는 <see cref="T:System.Security.Cryptography.DSA" />의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>데이터의 디지털 서명 알고리즘(<see cref="T:System.Security.Cryptography.DSA" />) 서명을 확인합니다.</summary>
      <param name="rgbHash">
        <paramref name="rgbSignature" />로 서명된 데이터입니다.</param>
      <param name="rgbSignature">
        <paramref name="rgbHash" />에 대해 확인할 서명입니다.</param>
      <returns>서명이 데이터에 대해 유효하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" />가 <see langword="null" />인 경우
또는
<paramref name="rgbSignature" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">DSA 키가 없는 경우</exception>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureFormatter">
      <summary>디지털 서명 알고리즘(<see cref="T:System.Security.Cryptography.DSA" />) 서명을 만듭니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.DSASignatureFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>지정된 키를 사용하여 <see cref="T:System.Security.Cryptography.DSASignatureFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">키를 보유하는 디지털 서명 알고리즘(<see cref="T:System.Security.Cryptography.DSA" />)의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.CreateSignature(System.Byte[])">
      <summary>지정된 데이터에 대해 디지털 서명 알고리즘(<see cref="T:System.Security.Cryptography.DSA" />) PKCS #1 서명을 만듭니다.</summary>
      <param name="rgbHash">서명할 데이터입니다.</param>
      <returns>지정된 데이터의 디지털 서명입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">OID가 <see langword="null" />인 경우
또는
DSA 키가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>디지털 서명 알고리즘(<see cref="T:System.Security.Cryptography.DSA" />) 서명 형성자에 대해 해시 알고리즘을 지정합니다.</summary>
      <param name="strName">서명 형성자에 사용할 해시 알고리즘의 이름입니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
        <paramref name="strName" /> 매개 변수가 <see cref="T:System.Security.Cryptography.SHA1" /> 해시 알고리즘에 매핑되어야 하는 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>디지털 서명 알고리즘(<see cref="T:System.Security.Cryptography.DSA" />) 서명 형성자를 위해 사용되는 키를 지정합니다.</summary>
      <param name="key">키를 보유하는 <see cref="T:System.Security.Cryptography.DSA" />의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve">
      <summary>타원 곡선을 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.A">
      <summary>명시적 곡선에 대한 첫 번째 계수입니다. 짧은 Weierstrass, Montgomery 및 Twisted Edwards 곡선의 경우 <c>A</c>입니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.B">
      <summary>명시적 곡선의 두 번째 계수입니다. 짧은 Weierstrass의 경우 <c>B</c>이고 Twisted Edwards 곡선의 경우 <c>d</c>입니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Cofactor">
      <summary>곡선의 공통 요소입니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromFriendlyName(System.String)">
      <summary>식별자의 지정된 식별 이름을 사용하여 명명된 곡선을 만듭니다.</summary>
      <param name="oidFriendlyName">식별자의 식별 이름입니다.</param>
      <returns>명명된 곡선을 나타내는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidFriendlyName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromOid(System.Security.Cryptography.Oid)">
      <summary>지정된 <see cref="T:System.Security.Cryptography.Oid" /> 개체를 사용하여 명명된 곡선을 만듭니다.</summary>
      <param name="curveOid">사용할 개체 식별자입니다.</param>
      <returns>명명된 곡선을 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromValue(System.String)">
      <summary>식별자의 지정한 점으로 구분된 10진수 표현을 사용하여 명명된 곡선을 만듭니다.</summary>
      <param name="oidValue">식별자의 점으로 구분된 번호입니다.</param>
      <returns>명명된 곡선을 나타내는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidValue" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.CurveType">
      <summary>
        <see cref="T:System.Security.Cryptography.ECCurve" /> 개체의 컴퍼지션을 식별합니다.</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.ECCurveType">
      <summary>
        <see cref="T:System.Security.Cryptography.ECCurve" /> 개체에 포함된 데이터를 해석하는 방법을 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Characteristic2">
      <summary>곡선 매개 변수는 특성 2 곡선을 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Implicit">
      <summary>곡선 데이터가 해석되지 않았습니다. 호출자가 곡선을 알고 있다고 가정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Named">
      <summary>곡선 매개 변수는 명명된 곡선을 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeMontgomery">
      <summary>곡선 매개 변수는 B*y^2 = x^3 + A*x^2 + x 수식을 사용하여 소수 곡선을 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeShortWeierstrass">
      <summary>곡선 매개 변수는 소수 필드 P에서 y^2 = x^3 + A*x + B 수식을 사용하여 소수 곡선을 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeTwistedEdwards">
      <summary>곡선 매개 변수는 소수 필드 P에서 A*x^2 + y^2 = 1 + B*x^2*y^2 수식을 사용하여 소수 곡선을 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.G">
      <summary>곡선에 대한 작업용 생성기 또는 기준점입니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Hash">
      <summary>ANSI X9.62 생성 알고리즘에 따라 <see cref="F:System.Security.Cryptography.ECCurve.Seed" />에서 곡선 계수(<see cref="F:System.Security.Cryptography.ECCurve.A" /> 및 <see cref="F:System.Security.Cryptography.ECCurve.B" />)를 생성하는 데 사용된 해시 알고리즘의 이름입니다. 명시적 곡선에만 적용됩니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsCharacteristic2">
      <summary>곡선 유형이 명시적 특성 2 곡선을 나타내는지 여부를 지칭하는 값을 가져옵니다.</summary>
      <returns>곡선이 명시적 특성 2 곡선이면 <see langword="true" />이고, 곡선이 명명된 특성 2, 소수 또는 암시적 곡선이면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsExplicit">
      <summary>곡선 유형이 명시적 곡선을 나타내는지 여부를 지칭하는 값(소수 또는 특성 2)을 가져옵니다.</summary>
      <returns>곡선이 명시적 곡선(소수 또는 특성 2)이면 <see langword="true" />이고, 곡선이 명명된 곡선 또는 암시적 곡선이면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsNamed">
      <summary>곡선 유형이 명명된 곡선을 나타내는지 여부를 지칭하는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />곡선이 명명 된 곡선 이면이 고, 그렇지 않으면입니다. <see langword="false" /> 곡선이 암시적 또는 명시적 곡선 (소수 또는 특성 2) 인 경우</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsPrime">
      <summary>곡선 유형이 명시적 소수 곡선을 나타내는지 여부를 지칭하는 값을 가져옵니다.</summary>
      <returns>곡선이 명시적 소수 곡선이면 <see langword="true" />이고, 곡선이 명명된 소수, 특성 2 또는 암시적 곡선이면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.NamedCurves">
      <summary>명명된 곡선을 만들기 위한 팩터리 클래스를 나타냅니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160r1">
      <summary>brainpoolP160r1 명명된 곡선을 가져옵니다.</summary>
      <returns>brainpoolP160r1 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160t1">
      <summary>brainpoolP160t1 명명된 곡선을 가져옵니다.</summary>
      <returns>brainpoolP160t1 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192r1">
      <summary>brainpoolP192r1 명명된 곡선을 가져옵니다.</summary>
      <returns>brainpoolP192r1 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192t1">
      <summary>brainpoolP192t1 명명된 곡선을 가져옵니다.</summary>
      <returns>brainpoolP192t1 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224r1">
      <summary>brainpoolP224r1 명명된 곡선을 가져옵니다.</summary>
      <returns>brainpoolP224r1 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224t1">
      <summary>brainpoolP224t1 명명된 곡선을 가져옵니다.</summary>
      <returns>brainpoolP224t1 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256r1">
      <summary>brainpoolP256r1 명명된 곡선을 가져옵니다.</summary>
      <returns>brainpoolP256r1 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256t1">
      <summary>brainpoolP256t1 명명된 곡선을 가져옵니다.</summary>
      <returns>brainpoolP256t1 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320r1">
      <summary>brainpoolP320r1 명명된 곡선을 가져옵니다.</summary>
      <returns>brainpoolP320r1 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320t1">
      <summary>brainpoolP320t1 명명된 곡선을 가져옵니다.</summary>
      <returns>brainpoolP320t1 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384r1">
      <summary>brainpoolP384r1 명명된 곡선을 가져옵니다.</summary>
      <returns>brainpoolP384r1 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384t1">
      <summary>brainpoolP384t1 명명된 곡선을 가져옵니다.</summary>
      <returns>brainpoolP384t1 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512r1">
      <summary>brainpoolP512r1 명명된 곡선을 가져옵니다.</summary>
      <returns>brainpoolP512r1 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512t1">
      <summary>brainpoolP512t1 명명된 곡선을 가져옵니다.</summary>
      <returns>brainpoolP512t1 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP256">
      <summary>nistP256 명명된 곡선을 가져옵니다.</summary>
      <returns>nistP256 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP384">
      <summary>nistP384 명명된 곡선을 가져옵니다.</summary>
      <returns>nistP384 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP521">
      <summary>nistP521 명명된 곡선을 가져옵니다.</summary>
      <returns>nistP521 명명된 곡선입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.Oid">
      <summary>명명된 곡선의 식별자를 가져옵니다.</summary>
      <returns>명명된 곡선의 식별자입니다.</returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Order">
      <summary>곡선의 순서입니다. 명시적 곡선에만 적용됩니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Polynomial">
      <summary>곡선 다항식입니다. 특성 2 곡선에만 적용됩니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Prime">
      <summary>기준 필드를 지정하는 소수입니다. 소수 곡선에만 적용됩니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Seed">
      <summary>ANSI X9.62 생성 알고리즘에 따른 계수 생성을 위한 시드 값입니다. 명시적 곡선에만 적용됩니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.Validate">
      <summary>현재 곡선의 무결성에 대한 유효성을 검사합니다. 구조체가 유효하지 않으면 <see cref="T:System.Security.Cryptography.CryptographicException" /> 예외를 throw합니다.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">곡선 매개 변수가 현재 곡선 유형에 유효하지 않습니다.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellman">
      <summary>ECDH(Elliptic Curve Diffie-Hellman) 알고리즘 구현이 파생될 수 있는 추상 기본 클래스를 제공합니다. 이 클래스는 모든 ECDH 구현에서 지원해야 하는 기본 작업 집합을 제공합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create">
      <summary>기본 ECDH(Elliptic Curve Diffie-Hellman) 알고리즘 구현의 새 인스턴스를 만듭니다.</summary>
      <returns>이 클래스의 기본 구현의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)">
      <summary>지정한 곡선에서 생성된 새 퍼블릭/프라이빗 키 쌍을 사용하여 ECDH(타원 곡선 Diffie-Hellman) 알고리즘 기본 구현의 새 인스턴스를 만듭니다.</summary>
      <param name="curve">새 퍼블릭/프라이빗 키 쌍을 생성하는 데 사용할 곡선입니다.</param>
      <returns>ECDH(타원 곡선 Diffie-Hellman) 알고리즘 기본 구현의 새 인스턴스입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" />의 유효성을 검사할 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)">
      <summary>지정한 <see cref="T:System.Security.Cryptography.ECParameters" /> 개체로 기술되는 키를 사용하여 ECDH(타원 곡선 Diffie-Hellman) 알고리즘 기본 구현의 새 인스턴스를 만듭니다.</summary>
      <param name="parameters">ECC(타원 곡선 암호화) 알고리즘에 대한 매개 변수입니다.</param>
      <returns>ECDH(타원 곡선 Diffie-Hellman) 알고리즘 기본 구현의 새 인스턴스입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" />의 유효성을 검사할 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)">
      <summary>ECDH(타원 곡선 Diffie-Hellman) 알고리즘의 지정된 구현에 대해 새 인스턴스를 만듭니다.</summary>
      <param name="algorithm">ECDH 알고리즘의 구현 이름입니다.</param>
      <returns>이 클래스의 지정된 구현에 대한 새 인스턴스입니다. 지정된 알고리즘 이름이 ECDH 구현에 매핑되지 않는 경우 이 메서드는 <see langword="null" />을 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 해시 알고리즘을 사용하여 키 파생을 수행합니다.</summary>
      <param name="otherPartyPublicKey">상대방의 공개 키입니다.</param>
      <param name="hashAlgorithm">키 자료를 파생시키는 데 사용할 해시 알고리즘입니다.</param>
      <returns>공유된 비밀의 해시입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" />에서 사용되는 곡선의 크기는 이 키의 곡선 크기와 다릅니다.
또는
<paramref name="hashAlgorithm" /> 매개 변수는 해시를 지정하지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" />에서 사용되는 곡선은 이 키의 곡선과 다릅니다.
또는
이 인스턴스는 퍼블릭 키만 나타냅니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>파생 클래스에서 구현될 경우 앞에 추가되거나 뒤에 추가된 선택적 데이터와 함께 지정된 해시 알고리즘을 사용하여 키 파생을 수행합니다.</summary>
      <param name="otherPartyPublicKey">상대방의 공개 키입니다.</param>
      <param name="hashAlgorithm">키 자료를 파생시키는 데 사용할 해시 알고리즘입니다.</param>
      <param name="secretPrepend">해시 전에 파생된 암호 앞에 추가할 값입니다.</param>
      <param name="secretAppend">해시 전에 파생된 암호 뒤에 추가할 값입니다.</param>
      <returns>요청된 대로 데이터를 앞에 추가하거나 뒤에 추가한 후 공유된 비밀의 해시입니다.</returns>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" />에서 사용되는 곡선의 크기는 이 키의 곡선 크기와 다릅니다.
또는
<paramref name="hashAlgorithm" /> 매개 변수는 해시를 지정하지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" />에서 사용되는 곡선은 이 키의 곡선과 다릅니다.
또는
이 인스턴스는 퍼블릭 키만 나타냅니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>지정된 HMAC(해시 기반 메시지 인증 코드) 알고리즘을 사용하여 키 파생을 수행합니다.</summary>
      <param name="otherPartyPublicKey">상대방의 공개 키입니다.</param>
      <param name="hashAlgorithm">키 자료를 파생시키는 데 사용할 해시 알고리즘입니다.</param>
      <param name="hmacKey">HMAC의 키입니다.</param>
      <returns>공유된 비밀의 HMAC입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" />에서 사용되는 곡선의 크기는 이 키의 곡선 크기와 다릅니다.
또는
<paramref name="hashAlgorithm" /> 매개 변수는 해시를 지정하지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" />에서 사용되는 곡선은 이 키의 곡선과 다릅니다.
또는
이 인스턴스는 퍼블릭 키만 나타냅니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])">
      <summary>파생 클래스에서 추가될 경우 앞에 추가되거나 뒤에 추가된 선택적 데이터와 함께 지정된 HMAC(해시 기반 메시지 인증 코드) 알고리즘을 사용하여 키 파생을 수행합니다.</summary>
      <param name="otherPartyPublicKey">상대방의 공개 키입니다.</param>
      <param name="hashAlgorithm">키 자료를 파생시키는 데 사용할 해시 알고리즘입니다.</param>
      <param name="hmacKey">HMAC의 키입니다.</param>
      <param name="secretPrepend">해시 전에 파생된 암호 앞에 추가할 값입니다.</param>
      <param name="secretAppend">해시 전에 파생된 암호 뒤에 추가할 값입니다.</param>
      <returns>요청된 대로 데이터를 앞에 추가하거나 뒤에 추가한 후 공유된 비밀의 HMAC입니다.</returns>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" />에서 사용되는 곡선의 크기는 이 키의 곡선 크기와 다릅니다.
또는
<paramref name="hashAlgorithm" /> 매개 변수는 해시를 지정하지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" />에서 사용되는 곡선은 이 키의 곡선과 다릅니다.
또는
이 인스턴스는 퍼블릭 키만 나타냅니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>파생 클래스에서 구현될 경우 공유된 비밀을 기반으로 키 파생을 수행합니다.</summary>
      <param name="otherPartyPublicKey">상대방의 공개 키입니다.</param>
      <returns>공유된 비밀을 입력으로 사용하는 키 파생 함수의 결과입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" />에서 사용되는 곡선의 크기는 이 키의 곡선 크기와 다릅니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" />에서 사용되는 곡선은 이 키의 곡선과 다릅니다.
또는
이 인스턴스는 퍼블릭 키만 나타냅니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])">
      <summary>파생 클래스에서 구현될 경우 TLS(전송 계층 보안) 1.1 PRF(의사 난수 함수)를 사용하여 키 파생을 수행합니다.</summary>
      <param name="otherPartyPublicKey">상대방의 공개 키입니다.</param>
      <param name="prfLabel">ASCII로 인코딩된 PRF 레이블입니다.</param>
      <param name="prfSeed">64바이트 PRF 시드입니다.</param>
      <returns>공유된 암호를 키로 사용하는 TLS 1.1 PRF의 처음 48바이트입니다.</returns>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" />에서 사용되는 곡선의 크기는 이 키의 곡선 크기와 다릅니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" />, <paramref name="prfLabel" /> 또는 <paramref name="prfSeed" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="prfSeed" />의 정확한 길이가 64바이트가 아닌 경우
또는
<paramref name="otherPartyPublicKey" />에서 사용되는 곡선은 이 키의 곡선과 다릅니다.
또는
이 인스턴스는 퍼블릭 키만 나타냅니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportECPrivateKey">
      <summary>ECPrivateKey 형식으로 현재 키를 내보냅니다.</summary>
      <returns>이 키의 ECPrivateKey 표현을 포함하는 바이트 배열입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)">
      <summary>파생 클래스에서 재정의하는 경우 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> 메서드로 전달할 수 있도록 명시적 곡선 형식을 사용하여 작동하는 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 키에서 <see cref="T:System.Security.Cryptography.ECParameters" /> 구조체로 퍼블릭 키 정보 또는 퍼블릭 및 프라이빗 키 정보를 내보냅니다.</summary>
      <param name="includePrivateParameters">private 매개 변수를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>이 키에 대한 곡선의 점을 나타내는 개체입니다(명시적 곡선 형식 사용).</returns>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)">
      <summary>파생 클래스에서 재정의하는 경우 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> 메서드로 전달할 수 있도록 작동하는 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 키에서 <see cref="T:System.Security.Cryptography.ECParameters" /> 구조체로 퍼블릭 키 정보 또는 퍼블릭 및 프라이빗 키 정보를 내보냅니다.</summary>
      <param name="includePrivateParameters">private 매개 변수를 포함하려는 경우 <see langword="true" />로 설정하고, public 매개 변수만 포함하려면 <see langword="false" />로 설정합니다.</param>
      <returns>이 키에 대한 곡선의 점을 나타내는 개체입니다. <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> 메서드에 전달할 수 있습니다.</returns>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.FromXmlString(System.String)">
      <summary>이 메서드는 모든 경우에 throw됩니다.</summary>
      <param name="xmlString">
        <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 개체를 재생성하는 데 사용할 XML 문자열입니다.</param>
      <exception cref="T:System.NotImplementedException">모든 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>파생 클래스에서 재정의하는 경우 지정된 곡선에 대해 사용 후 삭제 퍼블릭/프라이빗 키 쌍을 새로 생성합니다.</summary>
      <param name="curve">사용 후 삭제 퍼블릭/프라이빗 키 쌍을 생성하는 데 사용되는 곡선입니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" />의 유효성을 검사할 수 없습니다.</exception>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>ECPrivateKey 구조체에서 이 개체의 키를 대체하여 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="source">ASN.1-BER 인코딩에 있는 ECPrivateKey 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 ECPrivateKey 구조체를 나타내지 않습니다.
또는
키를 가져오지 못했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>바이트 기반 암호로 해독한 다음 이 개체의 키를 대체하여 PKCS#8 EncryptedPrivateKeyInfo 구조체에서 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="passwordBytes">키 자료를 해독할 때 암호로 사용할 바이트입니다.</param>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#8 EncryptedPrivateKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">암호가 잘못되었습니다.
또는
<paramref name="source" />의 콘텐츠에서는 적용할 KDF(키 파생 함수)가 <see cref="T:System.Char" /> 기반 암호가 필요한 레거시 PKCS#12 KDF임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>문자 기반 암호로 해독한 다음 이 개체의 키를 대체하여 PKCS#8 EncryptedPrivateKeyInfo 구조에서 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="password">키 자료의 암호를 해독하는 데 사용할 암호입니다.</param>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#8 EncryptedPrivateKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">암호가 잘못되었습니다.
또는
<paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>파생 클래스에서 재정의하는 경우 <see cref="T:System.Security.Cryptography.ECCurve" />에 대해 지정된 매개 변수를 현재 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 개체에 사용 후 삭제 키로 가져옵니다.</summary>
      <param name="parameters">가져올 곡선의 매개 변수입니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" />의 유효성을 검사할 수 없습니다.</exception>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>해독한 다음 이 개체의 키를 대체하여 PKCS#8 PrivateKeyInfo 구조에서 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#8 PrivateKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 PrivateKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>해독한 다음 이 개체의 키를 대체하여 X.509 SubjectPublicKeyInfo 구조에서 퍼블릭 키를 가져옵니다.</summary>
      <param name="source">ASN.1-DER 인코딩으로 된 X.509 SubjectPublicKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" />의 콘텐츠에서 ASN.1-DER-encoded X.509 SubjectPublicKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm">
      <summary>키 교환 알고리즘의 이름을 가져옵니다.</summary>
      <returns>키 교환 알고리즘의 이름입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.PublicKey">
      <summary>현재 ECDH(Elliptic Curve Diffie-Hellman) 인스턴스에 사용되는 공개 키를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 인스턴스에 사용되는 ECDH 키 쌍의 공개 부분입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm">
      <summary>서명 알고리즘의 이름을 가져옵니다.</summary>
      <returns>항상 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ToXmlString(System.Boolean)">
      <summary>이 메서드는 모든 경우에 throw됩니다.</summary>
      <param name="includePrivateParameters">private 매개 변수를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>이 메서드는 값을 반환하지 않습니다.</returns>
      <exception cref="T:System.NotImplementedException">모든 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>ECPrivateKey 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="destination">ECPrivateKey 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>바이트 기반 암호를 사용하여 PKCS#8 EncryptedPrivateKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="passwordBytes">키 자료를 암호화할 때 암호로 사용할 바이트입니다.</param>
      <param name="pbeParameters">키 자료를 암호화할 때 사용할 PBE(암호 기반 암호화) 매개 변수입니다.</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.
또는
<paramref name="pbeParameters" />는 <see cref="T:System.Char" /> 기반 암호가 필요한 <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />를 사용해야 함을 나타냅니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>문자 기반 암호를 사용하여 PKCS#8 EncryptedPrivateKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="password">키 자료를 암호화할 때 사용할 암호입니다.</param>
      <param name="pbeParameters">키 자료를 암호화할 때 사용할 PBE(암호 기반 암호화) 매개 변수입니다.</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>PKCS#8 PrivateKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="destination">PKCS # 8 PrivateKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>X.509 SubjectPublicKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="destination">X.509 SubjectPublicKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanPublicKey">
      <summary>모든 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 구현에서 상속해야 하는 추상 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor(System.Byte[])">
      <summary>
        <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="keyBlob">
        <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 개체를 나타내는 바이트 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose">
      <summary>
        <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 클래스에 사용되는 관리되지 않는 리소스를 해제하고, 필요에 따라 관리되는 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportExplicitParameters">
      <summary>파생 클래스에서 재정의하는 경우 <see cref="T:System.Security.Cryptography.ECCurve" /> 개체에 대해 명시적 <see cref="T:System.Security.Cryptography.ECParameters" />를 내보냅니다.</summary>
      <returns>이 키에 대한 곡선의 점을 나타내는 개체입니다(명시적 곡선 형식 사용).</returns>
      <exception cref="T:System.NotSupportedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportParameters">
      <summary>파생 클래스에서 재정의하는 경우 <see cref="T:System.Security.Cryptography.ECCurve" /> 개체에 대해 명명된/명시적 <see cref="T:System.Security.Cryptography.ECParameters" />를 내보냅니다.</summary>
      <returns>이 키에 대한 곡선의 점을 나타내는 개체입니다.</returns>
      <exception cref="T:System.NotSupportedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToByteArray">
      <summary>
        <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 키 BLOB을 바이트 배열로 serialize합니다.</summary>
      <returns>serialize된 ECDH(Elliptic Curve Diffie-Hellman) 공개 키가 들어 있는 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToXmlString">
      <summary>
        <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 공개 키를 XML 문자열로 serialize합니다.</summary>
      <returns>serialize된 ECDH(Elliptic Curve Diffie-Hellman) 공개 키가 들어 있는 XML 문자열입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDsa">
      <summary>ECDSA(타원 곡선 디지털 서명 알고리즘)를 캡슐화하는 추상 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.ECDsa" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create">
      <summary>기본 ECDSA(Elliptic Curve Digital Signature Algorithm) 구현의 새 인스턴스를 만듭니다.</summary>
      <returns>이 클래스 기본 구현(<see cref="T:System.Security.Cryptography.ECDsaCng" />)의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)">
      <summary>지정한 곡선에서 새로 생성된 키를 사용하여 ECDSA(타원 곡선 디지털 서명 알고리즘) 기본 구현의 새 인스턴스를 만듭니다.</summary>
      <param name="curve">키 생성에 사용할 곡선입니다.</param>
      <returns>이 클래스 기본 구현(<see cref="T:System.Security.Cryptography.ECDsaCng" />)의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)">
      <summary>지정한 매개 변수를 키로 사용하여 ECDSA(타원 곡선 디지털 서명 알고리즘) 기본 구현의 새 인스턴스를 만듭니다.</summary>
      <param name="parameters">사용할 키를 나타내는 매개 변수입니다.</param>
      <returns>이 클래스 기본 구현(<see cref="T:System.Security.Cryptography.ECDsaCng" />)의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.String)">
      <summary>지정된 ECDSA(Elliptic Curve Digital Signature Algorithm) 구현의 새 인스턴스를 만듭니다.</summary>
      <param name="algorithm">ECDSA 구현의 이름입니다. 다음 문자열은 모두 같은 구현을 참조합니다. .NET Framework에서는 현재 이 구현만 지원됩니다.

"ECDsa"
"ECDsaCng"
"System.Security.Cryptography.ECDsaCng"
사용자 지정 ECDSA 구현의 이름을 제공할 수도 있습니다.</param>
      <returns>이 클래스의 지정된 구현에 대한 새 인스턴스입니다. 지정된 알고리즘 이름이 ECDSA 구현에 매핑되지 않으면 이 메서드는 <see langword="null" />을 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportECPrivateKey">
      <summary>ECPrivateKey 형식으로 현재 키를 내보냅니다.</summary>
      <returns>이 키의 ECPrivateKey 표현을 포함하는 바이트 배열입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)">
      <summary>파생 클래스에서 재정의하는 경우 타원 곡선의 명시적 매개 변수를 내보냅니다.</summary>
      <param name="includePrivateParameters">private 매개 변수를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>이 키에 대한 곡선의 점을 나타내는 매개 변수입니다(명시적 곡선 형식 사용).</returns>
      <exception cref="T:System.NotSupportedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)">
      <summary>파생 클래스에서 재정의하는 경우 타원 곡선의 명명된 매개 변수 또는 명시적 매개 변수를 내보냅니다. 곡선에 이름이 있는 경우 <see cref="F:System.Security.Cryptography.ECParameters.Curve" /> 필드에는 명명된 곡선 매개 변수가 포함되고 그렇지 않으면 명시적 매개 변수가 포함됩니다.</summary>
      <param name="includePrivateParameters">private 매개 변수를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>이 키에 대한 곡선의 점을 나타내는 매개 변수입니다.</returns>
      <exception cref="T:System.NotSupportedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.FromXmlString(System.String)">
      <summary>이 메서드는 모든 경우에 throw됩니다.</summary>
      <param name="xmlString">
        <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 개체를 재생성하는 데 사용할 XML 문자열입니다.</param>
      <exception cref="T:System.NotImplementedException">모든 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>파생 클래스에서 재정의하는 경우 지정된 곡선에 대해 사용 후 삭제 퍼블릭/프라이빗 키 쌍을 새로 생성합니다.</summary>
      <param name="curve">키를 생성하는 데 사용할 곡선입니다.</param>
      <exception cref="T:System.NotSupportedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>파생된 클래스에서 재정의할 때 지정된 해싱 알고리즘을 사용하여 지정된 바이트 배열 부분의 해시 값을 계산합니다.</summary>
      <param name="data">해시할 데이터입니다.</param>
      <param name="offset">해시할 <paramref name="data" />에 있는 첫 번째 바이트의 인덱스입니다.</param>
      <param name="count">해시할 바이트 수입니다.</param>
      <param name="hashAlgorithm">데이터를 해시하는 데 사용하는 알고리즘입니다.</param>
      <returns>해시된 데이터입니다.</returns>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>파생된 클래스에서 재정의할 때 지정된 해싱 알고리즘을 사용하여 지정된 이진 스트림의 해시 값을 계산합니다.</summary>
      <param name="data">해시할 이진 스트림입니다.</param>
      <param name="hashAlgorithm">데이터를 해시하는 데 사용하는 알고리즘입니다.</param>
      <returns>해시된 데이터입니다.</returns>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>ECPrivateKey 구조체에서 이 개체의 키를 대체하여 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="source">ASN.1-BER 인코딩에 있는 ECPrivateKey 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 ECPrivateKey 구조체를 나타내지 않습니다.
또는
키를 가져오지 못했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>바이트 기반 암호로 해독한 다음 이 개체의 키를 대체하여 PKCS#8 EncryptedPrivateKeyInfo 구조체에서 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="passwordBytes">키 자료를 해독할 때 암호로 사용할 바이트입니다.</param>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#8 EncryptedPrivateKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">암호가 잘못되었습니다.
또는
<paramref name="source" />의 콘텐츠에서는 적용할 KDF(키 파생 함수)가 <see cref="T:System.Char" /> 기반 암호가 필요한 레거시 PKCS#12 KDF임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>문자 기반 암호로 해독한 다음 이 개체의 키를 대체하여 PKCS#8 EncryptedPrivateKeyInfo 구조에서 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="password">키 자료의 암호를 해독하는 데 사용할 암호입니다.</param>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#8 EncryptedPrivateKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">암호가 잘못되었습니다.
또는
<paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>파생 클래스에서 재정의하는 경우 지정된 매개 변수를 가져옵니다.</summary>
      <param name="parameters">곡선 매개 변수입니다.</param>
      <exception cref="T:System.NotSupportedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>해독한 다음 이 개체의 키를 대체하여 PKCS#8 PrivateKeyInfo 구조에서 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#8 PrivateKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 PrivateKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>해독한 다음 이 개체의 키를 대체하여 X.509 SubjectPublicKeyInfo 구조에서 퍼블릭 키를 가져옵니다.</summary>
      <param name="source">ASN.1-DER 인코딩으로 된 X.509 SubjectPublicKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" />의 콘텐츠에서 ASN.1-DER-encoded X.509 SubjectPublicKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
      <summary>키 교환 알고리즘의 이름을 가져옵니다.</summary>
      <returns>항상 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
      <summary>서명 알고리즘의 이름을 가져옵니다.</summary>
      <returns>"ECDsa"라는 문자열입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 해시 알고리즘을 사용하여 지정된 바이트 배열 일부의 해시 값을 계산하고 결과 해시 값을 서명합니다.</summary>
      <param name="data">해시를 컴퓨팅할 입력 데이터입니다.</param>
      <param name="offset">데이터 사용을 시작할 배열의 오프셋입니다.</param>
      <param name="count">데이터로 사용할 배열의 바이트 수입니다.</param>
      <param name="hashAlgorithm">해시 값을 만드는 데 사용할 해시 알고리즘입니다.</param>
      <returns>지정된 데이터의 ECDSA 서명입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" />가 0보다 작은 경우
또는
<paramref name="count" />가 0보다 작은 경우
또는
<paramref name="offset" /> + <paramref name="count" /> – 1의 결과는 <paramref name="data" />의 상한을 초과하는 인덱스입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 해시 알고리즘을 사용하여 지정된 바이트 배열의 해시 값을 계산하고 결과 해시 값을 서명합니다.</summary>
      <param name="data">해시를 컴퓨팅할 입력 데이터입니다.</param>
      <param name="hashAlgorithm">해시 값을 만드는 데 사용할 해시 알고리즘입니다.</param>
      <returns>지정된 데이터의 ECDSA 서명입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 해시 알고리즘을 사용하여 지정된 스트림의 해시 값을 계산하고 결과 해시 값을 서명합니다.</summary>
      <param name="data">해시를 컴퓨팅할 입력 스트림입니다.</param>
      <param name="hashAlgorithm">해시 값을 만드는 데 사용할 해시 알고리즘입니다.</param>
      <returns>지정된 데이터의 ECDSA 서명입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
      <summary>지정된 해시 값의 디지털 서명을 생성합니다.</summary>
      <param name="hash">서명할 데이터의 해시 값입니다.</param>
      <returns>지정된 해시 값의 디지털 서명입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)">
      <summary>이 메서드는 모든 경우에 throw됩니다.</summary>
      <param name="includePrivateParameters">private 매개 변수를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>이 메서드는 값을 반환하지 않습니다.</returns>
      <exception cref="T:System.NotImplementedException">모든 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>ECPrivateKey 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="destination">ECPrivateKey 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>바이트 기반 암호를 사용하여 PKCS#8 EncryptedPrivateKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="passwordBytes">키 자료를 암호화할 때 암호로 사용할 바이트입니다.</param>
      <param name="pbeParameters">키 자료를 암호화할 때 사용할 PBE(암호 기반 암호화) 매개 변수입니다.</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.
또는
<paramref name="pbeParameters" />는 <see cref="T:System.Char" /> 기반 암호가 필요한 <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />를 사용해야 함을 나타냅니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>문자 기반 암호를 사용하여 PKCS#8 EncryptedPrivateKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="password">키 자료를 암호화할 때 사용할 암호입니다.</param>
      <param name="pbeParameters">키 자료를 암호화할 때 사용할 PBE(암호 기반 암호화) 매개 변수입니다.</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>PKCS#8 PrivateKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="destination">PKCS # 8 PrivateKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>X.509 SubjectPublicKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="destination">X.509 SubjectPublicKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>지정된 해시 알고리즘을 사용하여 지정된 읽기 전용 바이트 범위의 해시 값을 제공된 대상으로 계산하려고 합니다.</summary>
      <param name="data">해시할 데이터입니다.</param>
      <param name="destination">해시 값을 받을 버퍼입니다.</param>
      <param name="hashAlgorithm">데이터를 해시하는 데 사용하는 알고리즘입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 경우 <paramref name="destination" />에 기록되는 총 바이트 수입니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 길지 않아 해시 값을 받을 수 없는 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>지정된 해시 알고리즘과 현재 키를 사용하여 지정된 읽기 전용 바이트 범위에 대한 ECDSA 디지털 서명을 제공된 대상으로 계산하려고 합니다.</summary>
      <param name="data">서명할 데이터입니다.</param>
      <param name="destination">서명을 받을 버퍼입니다.</param>
      <param name="hashAlgorithm">데이터를 해시하는 데 사용하는 알고리즘입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 경우 <paramref name="destination" />에 기록되는 총 바이트 수입니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 길지 않아 서명을 받을 수 없는 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>현재 키를 사용하여 데이터 해시를 나타내는 지정된 읽기 전용 바이트 범위에 대한 ECDSA 디지털 서명을 제공된 대상으로 계산하려고 합니다.</summary>
      <param name="hash">서명할 데이터의 해시 값입니다.</param>
      <param name="destination">서명을 받을 버퍼입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 경우 <paramref name="destination" />에 기록되는 총 바이트 수입니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 길지 않아 서명을 받을 수 없는 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>디지털 서명이 현재 키와 지정된 해시 알고리즘이 제공된 데이터에 적절한지 확인합니다.</summary>
      <param name="data">서명된 데이터입니다.</param>
      <param name="signature">확인할 서명 데이터입니다.</param>
      <param name="hashAlgorithm">데이터의 해시 값을 만드는 데 사용하는 해시 알고리즘입니다.</param>
      <returns>서명이 유효한 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우
또는
<paramref name="signature" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>디지털 서명이 현재 키와 지정된 해시 알고리즘이 제공된 데이터 부분에 적절한지 확인합니다.</summary>
      <param name="data">서명된 데이터입니다.</param>
      <param name="offset">해시를 컴퓨팅할 시작 인덱스입니다.</param>
      <param name="count">해시할 바이트 수입니다.</param>
      <param name="signature">확인할 서명 데이터입니다.</param>
      <param name="hashAlgorithm">데이터의 해시 값을 만드는 데 사용하는 해시 알고리즘입니다.</param>
      <returns>서명이 유효한 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우
또는
<paramref name="signature" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" />가 0보다 작은 경우
또는
<paramref name="count" />가 0보다 작은 경우
또는
<paramref name="offset" /> + <paramref name="count" /> – 1의 결과는 <paramref name="data" />의 상한을 초과하는 인덱스입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>디지털 서명이 현재 키와 지정된 해시 알고리즘이 제공된 데이터에 적절한지 확인합니다.</summary>
      <param name="data">서명된 데이터입니다.</param>
      <param name="signature">확인할 서명 데이터입니다.</param>
      <param name="hashAlgorithm">데이터의 해시 값을 만드는 데 사용하는 해시 알고리즘입니다.</param>
      <returns>서명이 유효한 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우
또는
<paramref name="signature" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)">
      <summary>디지털 서명이 현재 키와 지정된 해시 알고리즘이 제공된 데이터에 적절한지 확인합니다.</summary>
      <param name="data">서명된 데이터입니다.</param>
      <param name="signature">확인할 서명입니다.</param>
      <param name="hashAlgorithm">데이터의 해시 값을 만드는 데 사용하는 해시 알고리즘입니다.</param>
      <returns>서명이 유효한 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
      <summary>디지털 서명이 현재 키와 제공된 데이터 해시에 적절한지 확인합니다.</summary>
      <param name="hash">확인할 데이터의 해시 값입니다.</param>
      <param name="signature">서명 해시 값에 대해 확인할 데이터의 디지털 서명입니다.</param>
      <returns>서명이 유효한 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 또는 <paramref name="signature" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>디지털 서명이 현재 키와 제공된 데이터 해시에 적절한지 확인합니다.</summary>
      <param name="hash">확인할 데이터의 해시 값입니다.</param>
      <param name="signature">서명 해시 값에 대해 확인할 데이터의 디지털 서명입니다.</param>
      <returns>서명이 유효한 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECParameters">
      <summary>ECC(타원 곡선 암호화) 알고리즘에 대한 표준 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Curve">
      <summary>퍼블릭 키(<see cref="F:System.Security.Cryptography.ECParameters.Q" />) 및 선택적 프라이빗 키(<see cref="F:System.Security.Cryptography.ECParameters.D" />)와 연결된 곡선을 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.D">
      <summary>big endian 형식으로 저장된 ECC(타원 곡선 암호화) 알고리즘에 대한 프라이빗 키 <see langword="D" />를 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Q">
      <summary>ECC(타원 곡선 암호화) 알고리즘에 대한 공개 키 <see langword="Q" />를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECParameters.Validate">
      <summary>현재 개체의 유효성을 검사합니다.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키 또는 곡선 매개 변수가 현재 곡선 유형에 유효하지 않습니다.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECPoint">
      <summary>ECC(타원 곡선 암호화) 구조의 (X,Y) 좌표 쌍을 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.X">
      <summary>X 좌표를 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.Y">
      <summary>Y 좌표를 나타냅니다.</summary>
    </member>
    <member name="T:System.Security.Cryptography.HMACMD5">
      <summary>
        <see cref="T:System.Security.Cryptography.MD5" /> 해시 기능을 사용하여 HMAC(해시 기반 메시지 인증 코드)를 계산합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.#ctor">
      <summary>임의로 생성된 키를 사용하여 <see cref="T:System.Security.Cryptography.HMACMD5" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
      <summary>지정된 키를 사용하여 <see cref="T:System.Security.Cryptography.HMACMD5" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACMD5" /> 암호화에 대한 비밀 키입니다. 키 길이에 제한은 없지만 64바이트를 초과하면 키가 해시되어(SHA-1 사용) 64바이트 키가 파생됩니다. 그러므로 비밀 키에 권장되는 크기는 64바이트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.Dispose(System.Boolean)">
      <param name="disposing" />
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashCore(System.Byte[],System.Int32,System.Int32)">
      <param name="rgb" />
      <param name="ib" />
      <param name="cb" />
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashFinal" />
    <member name="M:System.Security.Cryptography.HMACMD5.Initialize" />
    <member name="P:System.Security.Cryptography.HMACMD5.Key" />
    <member name="M:System.Security.Cryptography.HMACMD5.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA1">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA1" /> 해시 기능을 사용하여 HMAC(해시 기반 메시지 인증 코드)를 계산합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor">
      <summary>임의로 만들어진 키를 사용하여 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
      <summary>지정된 키 데이터를 사용하여 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA1" /> 암호화에 대한 비밀 키입니다. 키 길이에 제한은 없지만 64바이트를 초과하면 키가 해시되어(SHA-1 사용) 64바이트 키가 파생됩니다. 그러므로 비밀 키에 권장되는 크기는 64바이트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
      <summary>지정한 키 데이터와 SHA1 알고리즘의 관리되는 버전을 사용할지 여부를 지정하는 값을 사용하여 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA1" /> 암호화에 대한 비밀 키입니다. 키 길이에 제한은 없지만 64바이트를 초과하면 키가 해시되어(SHA-1 사용) 64바이트 키가 파생됩니다. 그러므로 비밀 키에 권장되는 크기는 64바이트입니다.</param>
      <param name="useManagedSha1">SHA1 알고리즘의 관리되는 구현(<see cref="T:System.Security.Cryptography.SHA1Managed" /> 클래스)을 사용하려면 <see langword="true" />이고, 관리되지 않는 구현(<see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> 클래스)을 사용하려면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)">
      <summary>이 멤버는 <see cref="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)" />를 재정의합니다. 자세한 내용은 해당 항목을 참조하세요.
<see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />이고, 관리되지 않는 리소스만 해제하려면 false입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>HMAC(해시 기반 메시지 인증 코드)를 컴퓨팅하기 위해 개체에 기록된 데이터를 SHA1 해시 알고리즘으로 라우팅합니다.</summary>
      <param name="rgb">입력 데이터입니다.</param>
      <param name="ib">데이터 사용을 시작할 바이트 배열의 오프셋입니다.</param>
      <param name="cb">데이터로 사용할 배열의 바이트 수입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashFinal" />
    <member name="M:System.Security.Cryptography.HMACSHA1.Initialize">
      <summary>
        <see cref="T:System.Security.Cryptography.HMACSHA1" />의 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA1.Key">
      <summary>해시 알고리즘에 사용될 키를 가져오거나 설정합니다.</summary>
      <returns>해시 알고리즘에 사용할 키입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA256">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA256" /> 해시 기능을 사용하여 HMAC(해시 기반 메시지 인증 코드)를 계산합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor">
      <summary>임의로 만들어진 키를 사용하여 <see cref="T:System.Security.Cryptography.HMACSHA256" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
      <summary>지정된 키 데이터를 사용하여 <see cref="T:System.Security.Cryptography.HMACSHA256" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA256" /> 암호화에 대한 비밀 키입니다. 키 길이에 제한은 없지만 단, 권장되는 크기는 64바이트입니다. 키가 64바이트를 초과하면 해시되어(SHA-256 사용) 64바이트 키가 파생됩니다. 64바이트보다 짧은 경우 64바이트까지 채워집니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.Dispose(System.Boolean)">
      <param name="disposing" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashCore(System.Byte[],System.Int32,System.Int32)">
      <param name="rgb" />
      <param name="ib" />
      <param name="cb" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashFinal" />
    <member name="M:System.Security.Cryptography.HMACSHA256.Initialize" />
    <member name="P:System.Security.Cryptography.HMACSHA256.Key" />
    <member name="M:System.Security.Cryptography.HMACSHA256.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA384">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA384" /> 해시 기능을 사용하여 HMAC(해시 기반 메시지 인증 코드)를 계산합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.#ctor">
      <summary>임의로 생성된 키를 사용하여 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
      <summary>지정된 키 데이터를 사용하여 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA384" /> 암호화에 대한 비밀 키입니다. 키 길이에 제한은 없지만 단, 권장되는 크기는 128바이트입니다. 키가 128바이트를 초과하면 해시되어(SHA-384 사용) 128바이트 키가 파생됩니다. 128바이트보다 짧은 경우 128바이트까지 채워집니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)">
      <param name="disposing" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[],System.Int32,System.Int32)">
      <param name="rgb" />
      <param name="ib" />
      <param name="cb" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashFinal" />
    <member name="M:System.Security.Cryptography.HMACSHA384.Initialize" />
    <member name="P:System.Security.Cryptography.HMACSHA384.Key" />
    <member name="P:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues">
      <summary>
        <see cref="T:System.Security.Cryptography.HMACSHA384" /> 알고리즘에 대한 .NET Framework 2.0 구현이 .NET Framework 2.0 서비스 팩 1 구현과 일치하지 않는 문제에 대한 해결 방법을 제공합니다.</summary>
      <returns>.NET Framework 2.0 서비스 팩 1 애플리케이션과 .NET Framework 2.0 애플리케이션의 상호 작용을 설정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA512">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA512" /> 해시 기능을 사용하여 HMAC(해시 기반 메시지 인증 코드)를 계산합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.#ctor">
      <summary>임의로 만들어진 키를 사용하여 <see cref="T:System.Security.Cryptography.HMACSHA512" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
      <summary>지정된 키 데이터를 사용하여 <see cref="T:System.Security.Cryptography.HMACSHA512" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA512" /> 암호화에 대한 비밀 키입니다. 키 길이에 제한은 없지만 단, 권장되는 크기는 128바이트입니다. 키가 128바이트를 초과하면 해시되어(SHA-512 사용) 128바이트 키가 파생됩니다. 128바이트보다 짧은 경우 128바이트까지 채워집니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.Dispose(System.Boolean)">
      <param name="disposing" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashCore(System.Byte[],System.Int32,System.Int32)">
      <param name="rgb" />
      <param name="ib" />
      <param name="cb" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashFinal" />
    <member name="M:System.Security.Cryptography.HMACSHA512.Initialize" />
    <member name="P:System.Security.Cryptography.HMACSHA512.Key" />
    <member name="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
      <summary>.NET Framework 2.0 알고리즘에 대한 <see cref="T:System.Security.Cryptography.HMACSHA512" /> 구현이 .NET Framework 2.0 서비스 팩 1 구현과 일치하지 않는 문제에 대한 해결 방법을 제공합니다.</summary>
      <returns>
        <see langword="true" /> 애플리케이션과 .NET Framework 2.0 서비스 팩 1 애플리케이션의 상호 작용을 설정하려면 .NET Framework 2.0이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.IncrementalHash">
      <summary>여러 세그먼트에서 해시 또는 HMAC(해시 기반 메시지 인증 코드) 값을 증분 방식으로 계산하는 지원을 제공합니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.IncrementalHash.AlgorithmName">
      <summary>수행되는 알고리즘의 이름을 가져옵니다. HMAC 알고리즘이 "HMAC" 앞에 추가되어 키가 적용되지 않은 다이제스트와 구별합니다.</summary>
      <returns>수행되는 알고리즘의 이름입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])">
      <summary>해시 또는 HMAC에서 이미 처리된 데이터에 지정한 데이터를 추가합니다.</summary>
      <param name="data">처리할 데이터입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> 개체가 이미 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[],System.Int32,System.Int32)">
      <summary>지정한 오프셋에서 시작하여 해시 또는 HMAC(해시 기반 메시지 인증 코드)에서 이미 처리된 데이터까지, 지정한 데이터에서 지정한 바이트 수를 추가합니다.</summary>
      <param name="data">처리할 데이터입니다.</param>
      <param name="offset">데이터 사용을 시작할 바이트 배열의 오프셋입니다.</param>
      <param name="count">
        <paramref name="data" />에서 사용할 바이트 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 또는 <paramref name="offset" />가 음수입니다.
또는
<paramref name="count" />가 <paramref name="data" /> 길이보다 큽니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 및 <paramref name="count" />의 합계가 데이터 길이보다 큽니다.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> 개체가 이미 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})">
      <param name="data" />
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정한 알고리즘에 대한 <see cref="T:System.Security.Cryptography.IncrementalHash" />를 만듭니다.</summary>
      <param name="hashAlgorithm">수행할 해시 알고리즘의 이름입니다.</param>
      <returns>
        <see cref="T:System.Security.Cryptography.IncrementalHash" />에 의해 지정된 해시 알고리즘을 컴퓨팅할 준비가 된 <paramref name="hashAlgorithm" /> 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 이 <see langword="null" /> 또는 빈 문자열입니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" />은 알려진 해시 알고리즘이 아닙니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>지정한 해시 알고리즘 및 키를 사용하여 HMAC(해시 기반 메시지 인증 코드) 알고리즘에 대한 <see cref="T:System.Security.Cryptography.IncrementalHash" />를 만듭니다.</summary>
      <param name="hashAlgorithm">HMAC 내에서 수행하는 해시 알고리즘의 이름입니다.</param>
      <param name="key">HMAC에 대한 비밀 키입니다. 키는 길이 제한이 없지만, 지정한 해시 알고리즘의 출력 크기보다 긴 키는 올바른 크기의 키를 파생하기 위해 해시됩니다. 따라서 비밀 키의 권장되는 크기는 지정한 해시 알고리즘의 출력 크기입니다.</param>
      <returns>지정한 해시 알고리즘을 컴퓨팅할 준비가 된 <see cref="T:System.Security.Cryptography.IncrementalHash" /> 클래스의 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 이 <see langword="null" /> 또는 빈 문자열입니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" />은 알려진 해시 알고리즘이 아닙니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.Dispose">
      <summary>
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetHashAndReset">
      <summary>
        <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])" /> 메서드에 대한 이전 호출에서 누적된 데이터의 해시 또는 HMAC(해시 기반 메시지 인증 코드)를 검색하고 개체를 초기 상태로 다시 설정합니다.</summary>
      <returns>계산된 해시 또는 HMAC입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> 개체가 이미 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.TryGetHashAndReset(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.MaskGenerationMethod">
      <summary>모든 마스크 생성기 알고리즘이 파생될 추상 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.MaskGenerationMethod" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>파생 클래스에서 재정의하는 경우 지정된 임의의 시드를 사용하는 지정된 길이로 마스크를 생성합니다.</summary>
      <param name="rgbSeed">마스크를 컴퓨팅하는 데 사용할 임의의 시드입니다.</param>
      <param name="cbReturn">생성된 마스크의 길이(바이트)입니다.</param>
      <returns>길이가 <paramref name="cbReturn" /> 매개 변수와 동일한 임의로 생성된 마스크입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.MD5">
      <summary>
        <see cref="T:System.Security.Cryptography.MD5" /> 해시 알고리즘의 모든 구현이 상속될 추상 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.MD5" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.MD5" /> 해시 알고리즘의 기본 구현 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.MD5" /> 해시 알고리즘의 새 인스턴스입니다.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">FIPS(Federal Information Processing Standards) 모드를 사용하도록 설정한 상태에서 알고리즘이 사용되었지만 이 알고리즘이 FIPS와 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create(System.String)">
      <summary>
        <see cref="T:System.Security.Cryptography.MD5" /> 해시 알고리즘의 지정된 구현의 인스턴스를 만듭니다.</summary>
      <param name="algName">사용하려는 <see cref="T:System.Security.Cryptography.MD5" />의 특정 구현에 대한 이름입니다.</param>
      <returns>
        <see cref="T:System.Security.Cryptography.MD5" />의 지정된 구현의 새 인스턴스입니다.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <paramref name="algName" /> 매개 변수에서 설명하는 알고리즘이 FIPS(Federal Information Processing Standards) 모드를 설정하여 사용되었지만 FIPS 호환이 아닌 경우</exception>
    </member>
    <member name="T:System.Security.Cryptography.PKCS1MaskGenerationMethod">
      <summary>키 교환 알고리즘이 사용할 PKCS #1에 따라 마스크를 계산합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.PKCS1MaskGenerationMethod" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>지정된 길이의 지정된 임의의 시드에서 마스크를 생성하고 반환합니다.</summary>
      <param name="rgbSeed">마스크 계산에 사용할 임의의 시드입니다.</param>
      <param name="cbReturn">생성된 마스크의 길이(바이트)입니다.</param>
      <returns>길이가 <paramref name="cbReturn" /> 매개 변수와 동일한 임의로 생성된 마스크입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.PKCS1MaskGenerationMethod.HashName">
      <summary>마스크를 생성하기 위해 사용할 해시 알고리즘 형식의 이름을 가져오거나 설정합니다.</summary>
      <returns>마스크 계산에 사용할 해시 알고리즘을 구현하는 형식의 이름입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RandomNumberGenerator">
      <summary>임의의 암호화 수 생성기의 모든 구현이 파생될 추상 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create">
      <summary>임의의 데이터를 생성하는 데 사용할 수 있는 임의의 암호화 수 생성기의 기본 구현 인스턴스를 만듭니다.</summary>
      <returns>임의의 암호화 수 생성기의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
      <summary>임의의 암호화 숫자 생성기의 지정된 구현 인스턴스를 만듭니다.</summary>
      <param name="rngName">사용할 난수 생성기 구현의 이름입니다.</param>
      <returns>임의의 암호화 수 생성기의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
      <summary>파생 클래스에서 재정의되는 경우 <see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 모두 해제합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
      <summary>파생 클래스에서 재정의된 경우 <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />에서 사용하는 관리되지 않는 리소스를 해제하고 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Fill(System.Span{System.Byte})">
      <summary>임의의 암호화 수준 바이트로 범위를 채웁니다.</summary>
      <param name="data">임의의 암호화 수준 바이트로 채울 범위입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
      <summary>파생 클래스에 재정의할 경우, 임의의 암호화 수준 시퀀스 값으로 바이트 배열을 채웁니다.</summary>
      <param name="data">임의의 암호화 수준 바이트로 채울 배열입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>임의의 암호화 수준 시퀀스 값으로 지정된 바이트 배열을 채웁니다.</summary>
      <param name="data">임의의 암호화 수준 바이트로 채울 배열입니다.</param>
      <param name="offset">채우기 작업을 시작할 배열의 인덱스입니다.</param>
      <param name="count">채울 바이트 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="count" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 더하기 <paramref name="count" />가 <paramref name="data" />의 길이를 초과합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Span{System.Byte})">
      <summary>임의의 암호화 수준 바이트로 범위를 채웁니다.</summary>
      <param name="data">임의의 암호화 수준 바이트로 채울 범위입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetInt32(System.Int32)">
      <summary>암호화 수준 난수 생성기를 사용하여 0(포함)과 지정된 상한(제외) 사이의 임의의 정수를 생성합니다.</summary>
      <param name="toExclusive">임의 범위의 상한(제외)입니다.</param>
      <returns>0(포함)과 <paramref name="toExclusive" />(제외) 사이의 임의 정수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="toExclusive" /> 매개 변수가 0보다 작거나 같습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetInt32(System.Int32,System.Int32)">
      <summary>암호화 수준 난수 생성기를 사용하여 지정된 하한(포함)과 지정된 상한(제외) 사이의 임의 정수를 생성합니다.</summary>
      <param name="fromInclusive">임의 범위의 하한(포함)입니다.</param>
      <param name="toExclusive">임의 범위의 상한(제외)입니다.</param>
      <returns>
        <paramref name="fromInclusive" />(포함)와 <paramref name="toExclusive" />(제외) 사이의 임의 정수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="toExclusive" /> 매개 변수가 <paramref name="fromInclusive" /> 매개 변수보다 작거나 같습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
      <summary>파생 클래스에 재정의할 경우, 0이 아닌 임의의 암호화 수준 시퀀스 값으로 바이트 배열을 채웁니다.</summary>
      <param name="data">강력하게 암호화된 임의의 0이 아닌 바이트로 채울 배열입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Span{System.Byte})">
      <summary>0이 아닌 임의의 암호화 수준 값 시퀀스로 바이트 범위를 채웁니다.</summary>
      <param name="data">0이 아닌 임의의 암호화 수준 바이트로 채울 범위입니다.</param>
    </member>
    <member name="T:System.Security.Cryptography.RC2">
      <summary>
        <see cref="T:System.Security.Cryptography.RC2" /> 알고리즘의 모든 구현이 파생될 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RC2" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.RC2" /> 알고리즘을 수행할 암호화 개체의 인스턴스를 만듭니다.</summary>
      <returns>암호화 개체의 인스턴스입니다.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">FIPS(Federal Information Processing Standards) 모드를 사용하도록 설정한 상태에서 알고리즘이 사용되었지만 이 알고리즘이 FIPS와 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create(System.String)">
      <summary>암호화 개체의 인스턴스를 만들어 지정된 방식으로 <see cref="T:System.Security.Cryptography.RC2" /> 알고리즘을 구현합니다.</summary>
      <param name="AlgName">사용하려는 <see cref="T:System.Security.Cryptography.RC2" />의 특정 구현에 대한 이름입니다.</param>
      <returns>암호화 개체의 인스턴스입니다.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <paramref name="algName" /> 매개 변수에서 설명하는 알고리즘이 FIPS(Federal Information Processing Standards) 모드를 설정하여 사용되었지만 FIPS 호환이 아닌 경우</exception>
    </member>
    <member name="P:System.Security.Cryptography.RC2.EffectiveKeySize">
      <summary>
        <see cref="T:System.Security.Cryptography.RC2" /> 알고리즘이 bps 단위로 사용한 비밀 키의 효과적인 크기를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.RC2" /> 알고리즘이 사용한 효과적인 키 크기입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">효과적인 키 크기가 유효하지 않은 경우</exception>
    </member>
    <member name="F:System.Security.Cryptography.RC2.EffectiveKeySizeValue">
      <summary>
        <see cref="T:System.Security.Cryptography.RC2" /> 알고리즘이 bps 단위로 사용한 비밀 키의 효과적인 크기를 나타냅니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.RC2.KeySize">
      <summary>
        <see cref="T:System.Security.Cryptography.RC2" /> 알고리즘이 bps 단위로 사용한 비밀 키의 크기를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.RC2" /> 알고리즘이 사용한 비밀 키의 크기입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">RC2 키 크기 값이 유효 키 크기 값보다 작은 경우</exception>
    </member>
    <member name="T:System.Security.Cryptography.Rfc2898DeriveBytes">
      <summary>
        <see cref="T:System.Security.Cryptography.HMACSHA1" /> 기반의 의사(pseudo) 난수 생성기를 사용하여 암호 기반 키 파생 기능인 PBKDF2를 구현합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
      <summary>키를 파생시키는 데 사용할 암호, 솔트 및 반복 횟수를 사용하여 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="password">키 파생에 사용되는 암호입니다.</param>
      <param name="salt">키 파생에 사용되는 키 솔트입니다.</param>
      <param name="iterations">작업의 반복 횟수입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 솔트 크기가 8바이트보다 작거나 반복 횟수가 1보다 작은 경우</exception>
      <exception cref="T:System.ArgumentNullException">암호나 솔트가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 암호, 솔트, 반복 횟수 및 해시 알고리즘 이름을 사용하여 키를 파생시키는 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="password">키를 파생시키는 데 사용할 암호입니다.</param>
      <param name="salt">키를 파생시키는 데 사용할 키 솔트입니다.</param>
      <param name="iterations">작업의 반복 횟수입니다.</param>
      <param name="hashAlgorithm">키를 파생시키는 데 사용할 해시 알고리즘입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="saltSize" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />의 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 속성이 <see langword="null" /> 또는 <see cref="F:System.String.Empty" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">해시 알고리즘 이름이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
      <summary>키를 파생시키는 데 사용할 암호 및 솔트를 사용하여 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="password">키 파생에 사용되는 암호입니다.</param>
      <param name="salt">키 파생에 사용되는 키 솔트입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 솔트 크기가 8바이트보다 작거나 반복 횟수가 1보다 작은 경우</exception>
      <exception cref="T:System.ArgumentNullException">암호나 솔트가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>키를 파생시키는 데 사용할 암호, 솔트 및 반복 횟수를 사용하여 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="password">키 파생에 사용되는 암호입니다.</param>
      <param name="salt">키 파생에 사용되는 키 솔트입니다.</param>
      <param name="iterations">작업의 반복 횟수입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 솔트 크기가 8바이트보다 작거나 반복 횟수가 1보다 작은 경우</exception>
      <exception cref="T:System.ArgumentNullException">암호나 솔트가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 암호, 솔트, 반복 횟수 및 해시 알고리즘 이름을 사용하여 키를 파생시키는 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="password">키를 파생시키는 데 사용할 암호입니다.</param>
      <param name="salt">키를 파생시키는 데 사용할 키 솔트입니다.</param>
      <param name="iterations">작업의 반복 횟수입니다.</param>
      <param name="hashAlgorithm">키를 파생시키는 데 사용할 해시 알고리즘입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />의 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 속성이 <see langword="null" /> 또는 <see cref="F:System.String.Empty" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">해시 알고리즘 이름이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
      <summary>키를 파생시키는 데 사용할 암호 및 솔트 크기를 사용하여 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="password">키 파생에 사용되는 암호입니다.</param>
      <param name="saltSize">클래스에서 생성할 임의의 솔트 크기입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 솔트 크기가 8바이트보다 작은 경우</exception>
      <exception cref="T:System.ArgumentNullException">암호나 솔트가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
      <summary>키를 파생시키는 데 사용할 암호, 솔트 크기 및 반복 횟수를 사용하여 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="password">키 파생에 사용되는 암호입니다.</param>
      <param name="saltSize">클래스에서 생성할 임의의 솔트 크기입니다.</param>
      <param name="iterations">작업의 반복 횟수입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 솔트 크기가 8바이트보다 작거나 반복 횟수가 1보다 작은 경우</exception>
      <exception cref="T:System.ArgumentNullException">암호나 솔트가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iterations" />이 범위에서 벗어난 경우. 이 매개 변수에는 0 또는 양의 정수가 필요합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 암호, 솔트 크기, 반복 횟수 및 해시 알고리즘 이름을 사용하여 키를 파생시키는 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="password">키를 파생시키는 데 사용할 암호입니다.</param>
      <param name="saltSize">클래스에서 생성할 임의의 솔트 크기입니다.</param>
      <param name="iterations">작업의 반복 횟수입니다.</param>
      <param name="hashAlgorithm">키를 파생시키는 데 사용할 해시 알고리즘입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="saltSize" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />의 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 속성이 <see langword="null" /> 또는 <see cref="F:System.String.Empty" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">해시 알고리즘 이름이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
      <summary>
        <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 개체에서 암호화 키를 파생시킵니다.</summary>
      <param name="algname">키를 파생시킬 알고리즘 이름입니다.</param>
      <param name="alghashname">키를 파생시키는 데 사용할 해시 알고리즘 이름입니다.</param>
      <param name="keySize">파생할 키의 크기(비트 단위)입니다.</param>
      <param name="rgbIV">키를 파생시키는 데 사용할 IV(초기화 벡터)입니다.</param>
      <returns>파생된 키입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> 매개 변수가 잘못되었습니다.
또는
CSP(암호화 서비스 공급자)를 가져올 수 없습니다.
또는
<paramref name="algname" /> 매개 변수가 유효한 알고리즘 이름이 아닌 경우
또는
<paramref name="alghashname" /> 매개 변수가 유효한 해시 알고리즘 이름이 아닌 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 클래스에 사용되는 관리되지 않는 리소스를 해제하고, 필요에 따라 관리되는 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
      <summary>이 개체에 대한 의사(pseudo) 난수 키를 반환합니다.</summary>
      <param name="cb">생성할 의사(pseudo) 난수 키 바이트의 수입니다.</param>
      <returns>의사(pseudo) 난수 키 바이트로 채워진 바이트 배열입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cb" />이 범위에서 벗어난 경우. 이 매개 변수에는 0 또는 양의 정수가 필요합니다.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
      <summary>작업의 반복 횟수를 가져오거나 설정합니다.</summary>
      <returns>작업의 반복 횟수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">반복 횟수가 1보다 작은 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset">
      <summary>작업의 상태를 다시 설정합니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
      <summary>작업의 키 솔트 값을 가져오거나 설정합니다.</summary>
      <returns>작업의 키 솔트 값입니다.</returns>
      <exception cref="T:System.ArgumentException">지정된 솔트 크기가 8바이트보다 작은 경우</exception>
      <exception cref="T:System.ArgumentNullException">솔트가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Security.Cryptography.Rijndael">
      <summary>
        <see cref="T:System.Security.Cryptography.Rijndael" /> 대칭 암호화 알고리즘의 모든 구현이 상속받아야 하는 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.Rijndael" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.Rijndael" /> 알고리즘을 수행할 암호화 개체를 만듭니다.</summary>
      <returns>암호화 개체입니다.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">FIPS(Federal Information Processing Standards) 모드를 사용하도록 설정한 상태에서 알고리즘이 사용되었지만 이 알고리즘이 FIPS와 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create(System.String)">
      <summary>
        <see cref="T:System.Security.Cryptography.Rijndael" /> 알고리즘의 지정된 구현을 수행할 암호화 개체를 만듭니다.</summary>
      <param name="algName">만들 <see cref="T:System.Security.Cryptography.Rijndael" />의 특정 구현에 대한 이름입니다.</param>
      <returns>암호화 개체입니다.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <paramref name="algName" /> 매개 변수에서 설명하는 알고리즘이 FIPS(Federal Information Processing Standards) 모드를 설정하여 사용되었지만 FIPS 호환이 아닌 경우</exception>
    </member>
    <member name="T:System.Security.Cryptography.RijndaelManaged">
      <summary>
        <see cref="T:System.Security.Cryptography.Rijndael" /> 알고리즘의 관리되는 버전에 액세스합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RijndaelManaged" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.InvalidOperationException">이 클래스가 FIPS 알고르즘과 호환되지 않는 경우</exception>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.BlockSize">
      <summary>암호화 작업의 블록 크기(비트 단위)를 가져오거나 설정합니다.</summary>
      <returns>암호화 작업의 블록 크기 (비트)입니다. 기본값은 128 비트입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor">
      <summary>현재 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 속성 및 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)를 사용하여 대칭 decryptor 개체를 만듭니다.</summary>
      <returns>대칭 decryptor 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>지정한 <see cref="T:System.Security.Cryptography.Rijndael" />와 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />)를 사용하여 대칭 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" /> decryptor 개체를 만듭니다.</summary>
      <param name="rgbKey">대칭 알고리즘에 사용할 비밀 키입니다. 키 크기는 128, 192 또는 256 비트여야 합니다.</param>
      <param name="rgbIV">대칭 알고리즘에 사용될 IV입니다.</param>
      <returns>대칭 <see cref="T:System.Security.Cryptography.Rijndael" /> decryptor 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> 매개 변수가 <see langword="null" />인 경우
또는
<paramref name="rgbIV" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> 속성의 값은 <see cref="F:System.Security.Cryptography.CipherMode.ECB" />, <see cref="F:System.Security.Cryptography.CipherMode.CBC" /> 또는 <see cref="F:System.Security.Cryptography.CipherMode.CFB" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor">
      <summary>현재 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 속성 및 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)를 사용하여 대칭 encryptor 개체를 만듭니다.</summary>
      <returns>대칭 encryptor 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>지정한 <see cref="T:System.Security.Cryptography.Rijndael" />와 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />)를 사용하여 대칭 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" /> encryptor 개체를 만듭니다.</summary>
      <param name="rgbKey">대칭 알고리즘에 사용할 비밀 키입니다. 키 크기는 128, 192 또는 256 비트여야 합니다.</param>
      <param name="rgbIV">대칭 알고리즘에 사용될 IV입니다.</param>
      <returns>대칭 <see cref="T:System.Security.Cryptography.Rijndael" /> encryptor 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> 매개 변수가 <see langword="null" />인 경우
또는
<paramref name="rgbIV" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> 속성의 값은 <see cref="F:System.Security.Cryptography.CipherMode.ECB" />, <see cref="F:System.Security.Cryptography.CipherMode.CBC" /> 또는 <see cref="F:System.Security.Cryptography.CipherMode.CFB" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateIV">
      <summary>알고리즘에 사용할 임의의 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)를 생성합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateKey">
      <summary>알고리즘에 사용할 임의의 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />를 생성합니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.IV">
      <summary>대칭 알고리즘에 대한 IV(초기화 벡터)를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘에 사용할 IV (initialization vector)입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Key">
      <summary>대칭 알고리즘에 사용되는 비밀 키를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘에 사용 되는 비밀 키입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.KeySize">
      <summary>대칭 알고리즘에 사용되는 비밀 키의 크기(비트 단위)를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘에 사용 되는 비밀 키의 크기 (비트)입니다. 기본값은 256 비트입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.LegalKeySizes">
      <summary>대칭 알고리즘에서 지원하는 키 크기(비트 단위)를 가져옵니다.</summary>
      <returns>대칭 알고리즘에서 지 원하는 키 크기 (비트)입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Mode">
      <summary>대칭 알고리즘의 작업 모드를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘의 작업 모드입니다. 기본값은 <see cref="F:System.Security.Cryptography.CipherMode.CBC" />입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Padding">
      <summary>대칭 알고리즘에 사용된 패딩 모드를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘에 사용된 패딩 모드입니다. 기본값은 <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSA">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> 알고리즘의 모든 구현이 상속될 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> 알고리즘의 기본 구현 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" /> 기본 구현의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.Int32)">
      <summary>지정된 키 크기를 이용하여 새 임시 RSA 키를 만듭니다.</summary>
      <param name="keySizeInBits">키의 크기(비트)입니다.</param>
      <returns>지정된 키 크기를 이용하여 새 임시 RSA 키입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySizeInBits" />는 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" />와 다릅니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.Security.Cryptography.RSAParameters)">
      <summary>지정된 RSA 키 매개 변수를 이용하여 새 임시 RSA 키를 만듭니다.</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.RSA" /> 알고리즘의 매개 변수입니다.</param>
      <returns>새 임시 RSA 키입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.String)">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" />의 지정된 구현 인스턴스를 만듭니다.</summary>
      <param name="algName">사용할 <see cref="T:System.Security.Cryptography.RSA" />의 구현 이름입니다.</param>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" />의 지정된 구현의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>파생 클래스에서 재정의하는 경우 지정된 패딩 모드를 사용하여 입력 데이터를 해독합니다.</summary>
      <param name="data">해독할 데이터입니다.</param>
      <param name="padding">패딩 모드입니다.</param>
      <returns>암호 해독된 데이터입니다.</returns>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.DecryptValue(System.Byte[])">
      <summary>파생 클래스에서 재정의하는 경우 프라이빗 키를 사용하여 입력 데이터를 해독합니다.</summary>
      <param name="rgb">암호 해독할 암호화 텍스트입니다.</param>
      <returns>일반 텍스트로 된 <paramref name="rgb" /> 매개 변수의 해독 결과입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드 호출은 지원되지 않습니다. .NET Framework 4.6부터 이 예외가 발생합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>파생 클래스에서 재정의하는 경우 지정된 패딩 모드를 사용하여 입력 데이터를 암호화합니다.</summary>
      <param name="data">암호화할 데이터입니다.</param>
      <param name="padding">패딩 모드입니다.</param>
      <returns>암호화된 데이터입니다.</returns>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.EncryptValue(System.Byte[])">
      <summary>파생 클래스에서 재정의하는 경우 공개 키를 사용하여 입력 데이터를 암호화합니다.</summary>
      <param name="rgb">암호화할 일반 텍스트입니다.</param>
      <returns>암호화 텍스트로 된 <paramref name="rgb" /> 매개 변수의 암호화 결과입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드 호출은 지원되지 않습니다. .NET Framework 4.6부터 이 예외가 발생합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)">
      <summary>파생 클래스에서 재정의하는 경우 <see cref="T:System.Security.Cryptography.RSAParameters" />를 내보냅니다.</summary>
      <param name="includePrivateParameters">private 매개 변수를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" />에 대한 매개 변수입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportRSAPrivateKey">
      <summary>PKCS#1 RSAPrivateKey 형식으로 현재 키를 내보냅니다.</summary>
      <returns>이 키의 PKCS#1 RSAPrivateKey 표현을 포함하는 바이트 배열입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportRSAPublicKey">
      <summary>PKCS#1 RSAPublicKey 형식으로 현재 키의 퍼블릭 키 부분을 내보냅니다.</summary>
      <returns>이 키의 PKCS#1 RSAPublicKey 표현을 포함하는 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.FromXmlString(System.String)">
      <summary>XML 문자열의 키 정보를 사용하여 <see cref="T:System.Security.Cryptography.RSA" /> 개체를 초기화합니다.</summary>
      <param name="xmlString">
        <see cref="T:System.Security.Cryptography.RSA" /> 키 정보가 들어 있는 XML 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlString" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="xmlString" /> 매개 변수의 형식이 올바르지 않습니다.</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core만 해당: 이 멤버는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>파생 클래스에서 재정의할 때 지정된 해싱 알고리즘을 사용하여 지정된 바이트 배열 부분의 해시 값을 계산합니다.</summary>
      <param name="data">해시할 데이터입니다.</param>
      <param name="offset">해시할 <paramref name="data" />에 있는 첫 번째 바이트의 인덱스입니다.</param>
      <param name="count">해시할 바이트 수입니다.</param>
      <param name="hashAlgorithm">데이터를 해시하는 데 사용하는 알고리즘입니다.</param>
      <returns>해시된 데이터입니다.</returns>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>파생 클래스에서 재정의할 때 지정된 해싱 알고리즘을 사용하여 지정된 이진 스트림의 해시 값을 계산합니다.</summary>
      <param name="data">해시할 이진 스트림입니다.</param>
      <param name="hashAlgorithm">해시 알고리즘입니다.</param>
      <returns>해시된 데이터입니다.</returns>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>바이트 기반 암호로 해독한 다음 이 개체의 키를 대체하여 PKCS#8 EncryptedPrivateKeyInfo 구조에서 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="passwordBytes">키 자료를 해독할 때 암호로 사용할 바이트입니다.</param>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#8 EncryptedPrivateKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">암호가 잘못되었습니다.
또는
<paramref name="source" />의 콘텐츠에서는 적용할 KDF(키 파생 함수)가 <see cref="T:System.Char" /> 기반 암호가 필요한 레거시 PKCS#12 KDF임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>문자 기반 암호로 해독한 다음 이 개체의 키를 대체하여 PKCS#8 EncryptedPrivateKeyInfo 구조에서 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="password">키 자료의 암호를 해독하는 데 사용할 암호입니다.</param>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#8 EncryptedPrivateKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">암호가 잘못되었습니다.
또는
<paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>파생 클래스에서 재정의하는 경우 지정된 <see cref="T:System.Security.Cryptography.RSAParameters" />를 가져옵니다.</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.RSA" />에 대한 매개 변수입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>해독한 다음 이 개체의 키를 대체하여 PKCS#8 PrivateKeyInfo 구조에서 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#8 PrivateKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 PrivateKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportRSAPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>해독한 다음 이 개체의 키를 대체하여 PKCS#1 RSAPrivateKey 구조체에서 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#1 RSAPrivateKey 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#1 RSAPrivateKey 구조체를 나타내지 않습니다.
또는
키를 가져오지 못했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportRSAPublicKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>해독한 다음 이 개체의 키를 대체하여 PKCS#1 RSAPublicKey 구조체에서 퍼블릭 키를 가져옵니다.</summary>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#1 RSAPublicKey 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#1 RSAPublicKey 구조체를 나타내지 않습니다.
또는
키를 가져오지 못했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>해독한 다음 이 개체의 키를 대체하여 X.509 SubjectPublicKeyInfo 구조에서 퍼블릭 키를 가져옵니다.</summary>
      <param name="source">ASN.1-DER 인코딩으로 된 X.509 SubjectPublicKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" />의 콘텐츠에서 ASN.1-DER-encoded X.509 SubjectPublicKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSA.KeyExchangeAlgorithm">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> 구현과 함께 사용 가능한 키 교환 알고리즘의 이름을 가져옵니다.</summary>
      <returns>"RSA"를 반환합니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSA.SignatureAlgorithm">
      <summary>이 <see cref="T:System.Security.Cryptography.RSA" /> 구현과 함께 사용 가능한 서명 알고리즘의 이름을 가져옵니다.</summary>
      <returns>"RSA"를 반환합니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>지정된 해시 알고리즘 및 패딩 모드를 사용하여 지정된 바이트 배열 일부의 해시 값을 계산하고 결과 해시 값을 서명합니다.</summary>
      <param name="data">해시를 컴퓨팅할 입력 데이터입니다.</param>
      <param name="offset">데이터 사용을 시작할 배열의 오프셋입니다.</param>
      <param name="count">데이터로 사용할 배열의 바이트 수입니다.</param>
      <param name="hashAlgorithm">해시 값을 만드는 데 사용할 해시 알고리즘입니다.</param>
      <param name="padding">패딩 모드입니다.</param>
      <returns>지정된 데이터의 RSA 서명입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우
또는
<paramref name="padding" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" />가 0보다 작은 경우
또는
<paramref name="count" />가 0보다 작은 경우
또는
<paramref name="offset" /> + <paramref name="count" /> – 1의 결과는 <paramref name="data" />의 상한을 초과하는 인덱스입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>지정된 해시 알고리즘 및 패딩 모드를 사용하여 지정된 바이트 배열의 해시 값을 계산하고 결과 해시 값을 서명합니다.</summary>
      <param name="data">해시를 컴퓨팅할 입력 데이터입니다.</param>
      <param name="hashAlgorithm">해시 값을 만드는 데 사용할 해시 알고리즘입니다.</param>
      <param name="padding">패딩 모드입니다.</param>
      <returns>지정된 데이터의 RSA 서명입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우
또는
<paramref name="padding" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>지정된 해시 알고리즘 및 패딩 모드를 사용하여 지정된 스트림의 해시 값을 계산하고 결과 해시 값을 서명합니다.</summary>
      <param name="data">해시를 컴퓨팅할 입력 스트림입니다.</param>
      <param name="hashAlgorithm">해시 값을 만드는 데 사용할 해시 알고리즘입니다.</param>
      <param name="padding">패딩 모드입니다.</param>
      <returns>지정된 데이터의 RSA 서명입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우
또는
<paramref name="padding" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>파생 클래스에서 재정의할 때 지정된 패딩을 사용해서 프라이빗 키로 암호화하여 지정된 해시 값에 대한 서명을 계산합니다.</summary>
      <param name="hash">서명할 데이터의 해시 값입니다.</param>
      <param name="hashAlgorithm">데이터의 해시 값을 만드는 데 사용하는 해시 알고리즘입니다.</param>
      <param name="padding">패딩입니다.</param>
      <returns>지정된 해시 값의 RSA 서명입니다.</returns>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ToXmlString(System.Boolean)">
      <summary>현재 <see cref="T:System.Security.Cryptography.RSA" /> 개체의 키가 들어 있는 XML 문자열을 만들고 반환합니다.</summary>
      <param name="includePrivateParameters">퍼블릭 및 퍼블릭 RSA 키를 포함하는 경우 <see langword="true" />이고, 퍼블릭 키만 포함하는 경우는 <see langword="false" />입니다.</param>
      <returns>현재 <see cref="T:System.Security.Cryptography.RSA" /> 개체의 키가 들어 있는 XML 문자열입니다.</returns>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core만 해당: 이 멤버는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryDecrypt(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.RSAEncryptionPadding,System.Int32@)">
      <param name="data" />
      <param name="destination" />
      <param name="padding" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryEncrypt(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.RSAEncryptionPadding,System.Int32@)">
      <param name="data" />
      <param name="destination" />
      <param name="padding" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>바이트 기반 암호를 사용하여 PKCS#8 EncryptedPrivateKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="passwordBytes">키 자료를 암호화할 때 암호로 사용할 바이트입니다.</param>
      <param name="pbeParameters">키 자료를 암호화할 때 사용할 PBE(암호 기반 암호화) 매개 변수입니다.</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환하는 경우 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <see langword="true" />이 출력을 받을 충분한 크기이면 <paramref name="destination" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.
또는
<paramref name="pbeParameters" />는 <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> 기반 암호가 필요한 <see cref="T:System.Char" />를 사용해야 함을 나타냅니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>문자 기반 암호를 사용하여 PKCS#8 EncryptedPrivateKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="password">키 자료를 암호화할 때 사용할 암호입니다.</param>
      <param name="pbeParameters">키 자료를 암호화할 때 사용할 PBE(암호 기반 암호화) 매개 변수입니다.</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환하는 경우 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <see langword="true" />이 출력을 받을 충분한 크기이면 <paramref name="destination" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>PKCS#8 PrivateKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="destination">PKCS # 8 PrivateKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환하는 경우 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <see langword="true" />이 출력을 받을 충분한 크기이면 <paramref name="destination" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportRSAPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>PKCS#1 RSAPrivateKey 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="destination">PKCS#1 RSAPrivateKey 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환하는 경우 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <see langword="true" />이 출력을 받을 충분한 크기이면 <paramref name="destination" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportRSAPublicKey(System.Span{System.Byte},System.Int32@)">
      <summary>PKCS#1 RSAPublicKey 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="destination">PKCS#1 RSAPublicKey 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환하는 경우 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <see langword="true" />이 출력을 받을 충분한 크기이면 <paramref name="destination" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>X.509 SubjectPublicKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="destination">X.509 SubjectPublicKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환하는 경우 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <see langword="true" />이 출력을 받을 충분한 크기이면 <paramref name="destination" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <param name="data" />
      <param name="destination" />
      <param name="hashAlgorithm" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.RSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding,System.Int32@)">
      <param name="data" />
      <param name="destination" />
      <param name="hashAlgorithm" />
      <param name="padding" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.RSA.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding,System.Int32@)">
      <param name="hash" />
      <param name="destination" />
      <param name="hashAlgorithm" />
      <param name="padding" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>지정된 해시 알고리즘 및 패딩을 사용하여 지정된 데이터의 해시 값을 계산한 다음 이 값을 제공된 서명과 비교하여 디지털 서명이 유효한지 확인합니다.</summary>
      <param name="data">서명된 데이터입니다.</param>
      <param name="signature">확인할 서명 데이터입니다.</param>
      <param name="hashAlgorithm">데이터의 해시 값을 만드는 데 사용하는 해시 알고리즘입니다.</param>
      <param name="padding">패딩 모드입니다.</param>
      <returns>서명이 유효한 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우
또는
<paramref name="signature" />가 <see langword="null" />인 경우
또는
<paramref name="padding" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>지정된 해시 알고리즘과 패딩을 사용하여 바이트 배열 일부에 있는 데이터의 해시 값을 계산한 다음 이 값을 제공된 서명과 비교하여 디지털 서명이 유효한지 확인합니다.</summary>
      <param name="data">서명된 데이터입니다.</param>
      <param name="offset">해시를 컴퓨팅할 시작 인덱스입니다.</param>
      <param name="count">해시할 바이트 수입니다.</param>
      <param name="signature">확인할 서명 데이터입니다.</param>
      <param name="hashAlgorithm">데이터의 해시 값을 만드는 데 사용하는 해시 알고리즘입니다.</param>
      <param name="padding">패딩 모드입니다.</param>
      <returns>서명이 유효한 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우
또는
<paramref name="signature" />가 <see langword="null" />인 경우
또는
<paramref name="padding" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" />가 0보다 작은 경우
또는
<paramref name="count" />가 0보다 작은 경우
또는
<paramref name="offset" /> + <paramref name="count" /> – 1의 결과는 <paramref name="data" />의 상한을 초과하는 인덱스입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>지정된 해시 알고리즘 및 패딩을 사용하여 지정된 스트림의 해시 값을 계산한 다음 이 값을 제공된 서명과 비교하여 디지털 서명이 유효한지 확인합니다.</summary>
      <param name="data">서명된 데이터입니다.</param>
      <param name="signature">확인할 서명 데이터입니다.</param>
      <param name="hashAlgorithm">데이터의 해시 값을 만드는 데 사용하는 해시 알고리즘입니다.</param>
      <param name="padding">패딩 모드입니다.</param>
      <returns>서명이 유효한 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" />가 <see langword="null" />인 경우
또는
<paramref name="signature" />가 <see langword="null" />인 경우
또는
<paramref name="padding" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <param name="data" />
      <param name="signature" />
      <param name="hashAlgorithm" />
      <param name="padding" />
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>지정된 해시 알고리즘 및 패딩을 사용하여 서명의 해시 값을 판별한 다음 제공된 해시 값과 비교하여 디지털 서명이 유효한지 확인합니다.</summary>
      <param name="hash">서명된 데이터의 해시 값입니다.</param>
      <param name="signature">확인할 서명 데이터입니다.</param>
      <param name="hashAlgorithm">해시 값을 만드는 데 사용한 해시 알고리즘입니다.</param>
      <param name="padding">패딩 모드입니다.</param>
      <returns>서명이 유효한 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotImplementedException">파생 클래스가 이 메서드를 재정의해야 합니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <param name="hash" />
      <param name="signature" />
      <param name="hashAlgorithm" />
      <param name="padding" />
    </member>
    <member name="T:System.Security.Cryptography.RSAEncryptionPadding">
      <summary>RSA 암호화 또는 암호 해독 작업에 사용할 패딩 모드 및 매개 변수를 지정합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.CreateOaep(System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 해시 알고리즘을 사용하여 <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" />가 <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" />인 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 인스턴스를 만듭니다.</summary>
      <param name="hashAlgorithm">해시 알고리즘입니다.</param>
      <returns>해당 모드가 <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" />인 개체는 <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" />이며 <paramref name="hashAlgorithm" />에 의해 지정된 해시 알고리즘이 적용됩니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />의 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 속성이 <see langword="null" /> 또는 <see cref="F:System.String.Empty" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Object)">
      <summary>현재 인스턴스가 지정된 개체와 같은지 여부를 확인합니다.</summary>
      <param name="obj">비교할 개체입니다.</param>
      <returns>
        <paramref name="obj" />가 현재 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>현재 인스턴스가 지정된 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 개체와 같은지 여부를 확인합니다.</summary>
      <param name="other">비교할 개체입니다.</param>
      <returns>
        <paramref name="other" />가 현재 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.GetHashCode">
      <summary>이 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 개체의 해시 코드를 반환합니다.</summary>
      <returns>이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Mode">
      <summary>이 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 인스턴스가 나타내는 패딩 모드를 가져옵니다.</summary>
      <returns>패딩 모드입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepHashAlgorithm">
      <summary>
        <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" /> 패딩 모드와 함께 사용되는 해시 알고리즘을 가져옵니다.</summary>
      <returns>해시 알고리즘입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1">
      <summary>SHA1 해시 알고리즘을 사용하여 OAEP(Optimal Asymmetric Encryption Padding) 암호화 표준을 나타내는 개체를 가져옵니다.</summary>
      <returns>SHA1 해시 알고리즘을 사용 하 여 OAEP 암호화 표준을 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA256">
      <summary>SHA256 해시 알고리즘을 사용하여 OAEP(Optimal Asymmetric Encryption Padding) 암호화 표준을 나타내는 개체를 가져옵니다.</summary>
      <returns>SHA256 해시 알고리즘을 사용 하 여 OAEP 암호화 표준을 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA384">
      <summary>SHA-384 해시 알고리즘을 사용하여 OAEP(Optimal Asymmetric Encryption Padding) 암호화 표준을 나타내는 개체를 가져옵니다.</summary>
      <returns>SHA384 해시 알고리즘을 사용 하 여 OAEP 암호화 표준을 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA512">
      <summary>SHA512 해시 알고리즘을 사용하여 OAEP(Optimal Asymmetric Encryption Padding) 암호화 표준을 나타내는 개체를 가져옵니다.</summary>
      <returns>SHA512 해시 알고리즘을 사용 하 여 OAEP 암호화 표준을 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.op_Equality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>지정된 두 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 개체가 같은지 여부를 나타냅니다.</summary>
      <param name="left">비교할 첫 번째 개체입니다.</param>
      <param name="right">비교할 두 번째 개체입니다.</param>
      <returns>
        <see langword="left" />과 <see langword="right" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.op_Inequality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>지정된 두 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 개체가 다른지 여부를 나타냅니다.</summary>
      <param name="left">비교할 첫 번째 개체입니다.</param>
      <param name="right">비교할 두 번째 개체입니다.</param>
      <returns>
        <see langword="left" />과 <see langword="right" />가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1">
      <summary>PKCS #1 암호화 표준을 나타내는 개체를 가져옵니다.</summary>
      <returns>PKCS #1 암호화 표준을 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.ToString">
      <summary>현재 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 인스턴스의 문자열 표현을 반환합니다.</summary>
      <returns>현재 개체의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAEncryptionPaddingMode">
      <summary>RSA 암호화 또는 암호 해독 작업에 사용할 패딩 모드를 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep">
      <summary>최적 비대칭형 암호화 패딩입니다. 새 애플리케이션에 대 한 것이 좋습니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Pkcs1">
      <summary>PKCS #1 v1.5입니다. 기존 애플리케이션과 호환성에 대 한 지원 됩니다.</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter">
      <summary>OAEP(Optimal Asymmetric Encryption Padding) 키 교환 데이터를 해독합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>지정된 키를 사용하여 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">프라이빗 키를 보유하는 <see cref="T:System.Security.Cryptography.RSA" /> 알고리즘의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>암호화된 키 교환 데이터에서 비밀 정보를 추출합니다.</summary>
      <param name="rgbData">비밀 정보가 숨겨진 키 교환 데이터입니다.</param>
      <returns>키 교환 데이터에서 파생된 비밀 정보입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키 교환 데이터 검증이 실패한 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">키가 없습니다.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.Parameters">
      <summary>OAEP(Optimal Asymmetric Encryption Padding) 키 교환에 사용할 매개 변수를 가져옵니다.</summary>
      <returns>OAEP 키 교환 작업의 매개 변수를 포함하는 XML 문자열입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>비밀 정보의 암호를 해독하는 데 사용할 프라이빗 키를 설정합니다.</summary>
      <param name="key">프라이빗 키를 보유하는 <see cref="T:System.Security.Cryptography.RSA" /> 알고리즘의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" />를 사용하여 OAEP(Optimal Asymmetric Encryption Padding) 키 교환 데이터를 만듭니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>지정된 키를 사용하여 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">공개 키를 보유하는 <see cref="T:System.Security.Cryptography.RSA" /> 알고리즘의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>지정된 입력 데이터에서 암호화된 키 교환 데이터를 만듭니다.</summary>
      <param name="rgbData">키 교환 시 전달할 비밀 정보입니다.</param>
      <returns>지정된 수신자에게 보낼 암호화된 키 교환 데이터입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">키가 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>지정된 입력 데이터에서 암호화된 키 교환 데이터를 만듭니다.</summary>
      <param name="rgbData">키 교환 시 전달할 비밀 정보입니다.</param>
      <param name="symAlgType">이 매개 변수는 현재 버전에서 사용되지 않습니다.</param>
      <returns>지정된 수신자에게 보낼 암호화된 키 교환 데이터입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter">
      <summary>키 교환 생성 프로세스에서 안쪽 여백을 만드는 데 사용할 매개 변수를 가져오거나 설정합니다.</summary>
      <returns>매개 변수 값입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters">
      <summary>OAEP(Optimal Asymmetric Encryption Padding) 키 교환에 사용할 매개 변수를 가져옵니다.</summary>
      <returns>OAEP 키 교환 작업의 매개 변수를 포함하는 XML 문자열입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng">
      <summary>키 교환을 만들 때 사용할 난수 생성기 알고리즘을 가져오거나 설정합니다.</summary>
      <returns>사용할 난수 생성기 알고리즘의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>키 교환 데이터를 암호화하는 데 사용할 공개 키를 설정합니다.</summary>
      <param name="key">공개 키를 보유하는 <see cref="T:System.Security.Cryptography.RSA" /> 알고리즘의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAParameters">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> 알고리즘에 대한 표준 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.D">
      <summary>
        <see langword="D" /> 알고리즘에 대한 <see cref="T:System.Security.Cryptography.RSA" /> 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DP">
      <summary>
        <see langword="DP" /> 알고리즘에 대한 <see cref="T:System.Security.Cryptography.RSA" /> 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DQ">
      <summary>
        <see langword="DQ" /> 알고리즘에 대한 <see cref="T:System.Security.Cryptography.RSA" /> 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Exponent">
      <summary>
        <see langword="Exponent" /> 알고리즘에 대한 <see cref="T:System.Security.Cryptography.RSA" /> 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.InverseQ">
      <summary>
        <see langword="InverseQ" /> 알고리즘에 대한 <see cref="T:System.Security.Cryptography.RSA" /> 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Modulus">
      <summary>
        <see langword="Modulus" /> 알고리즘에 대한 <see cref="T:System.Security.Cryptography.RSA" /> 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.P">
      <summary>
        <see langword="P" /> 알고리즘에 대한 <see cref="T:System.Security.Cryptography.RSA" /> 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Q">
      <summary>
        <see langword="Q" /> 알고리즘에 대한 <see cref="T:System.Security.Cryptography.RSA" /> 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter">
      <summary>PKCS #1 키 교환 데이터를 해독합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>지정된 키를 사용하여 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">프라이빗 키를 보유하는 <see cref="T:System.Security.Cryptography.RSA" /> 알고리즘의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>암호화된 키 교환 데이터에서 비밀 정보를 추출합니다.</summary>
      <param name="rgbIn">비밀 정보가 숨겨진 키 교환 데이터입니다.</param>
      <returns>키 교환 데이터에서 파생된 비밀 정보입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">키가 없습니다.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.Parameters">
      <summary>PKCS #1 키 교환을 위한 매개 변수를 가져옵니다.</summary>
      <returns>PKCS #1 키 교환 작업의 매개 변수를 포함하는 XML 문자열입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.RNG">
      <summary>키 교환을 만들 때 사용할 난수 생성기 알고리즘을 가져오거나 설정합니다.</summary>
      <returns>사용할 난수 생성기 알고리즘의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>비밀 정보의 암호를 해독하는 데 사용할 프라이빗 키를 설정합니다.</summary>
      <param name="key">프라이빗 키를 보유하는 <see cref="T:System.Security.Cryptography.RSA" /> 알고리즘의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" />를 사용하여 PKCS#1 키 교환 데이터를 만듭니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>지정된 키를 사용하여 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">공개 키를 보유하는 <see cref="T:System.Security.Cryptography.RSA" /> 알고리즘의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>지정된 입력 데이터에서 암호화된 키 교환 데이터를 만듭니다.</summary>
      <param name="rgbData">키 교환 시 전달할 비밀 정보입니다.</param>
      <returns>지정된 수신자에게 보낼 암호화된 키 교환 데이터입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbData" />가 너무 큽니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">키가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>지정된 입력 데이터에서 암호화된 키 교환 데이터를 만듭니다.</summary>
      <param name="rgbData">키 교환 시 전달할 비밀 정보입니다.</param>
      <param name="symAlgType">이 매개 변수는 현재 버전에서 사용되지 않습니다.</param>
      <returns>지정된 수신자에게 보낼 암호화된 키 교환 데이터입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters">
      <summary>PKCS #1 키 교환을 위한 매개 변수를 가져옵니다.</summary>
      <returns>PKCS #1 키 교환 작업의 매개 변수를 포함하는 XML 문자열입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng">
      <summary>키 교환을 만들 때 사용할 난수 생성기 알고리즘을 가져오거나 설정합니다.</summary>
      <returns>사용할 난수 생성기 알고리즘의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>키 교환 데이터를 암호화하는 데 사용할 공개 키를 설정합니다.</summary>
      <param name="key">공개 키를 보유하는 <see cref="T:System.Security.Cryptography.RSA" /> 알고리즘의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 버전 1.5 서명을 확인합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>지정된 키를 사용하여 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">공개 키를 보유하는 <see cref="T:System.Security.Cryptography.RSA" />의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>서명을 확인하기 위해 사용할 해시 알고리즘을 설정합니다.</summary>
      <param name="strName">서명을 확인하는 데 사용할 해시 알고리즘의 이름입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>서명을 확인하기 위해 사용할 공개 키를 설정합니다.</summary>
      <param name="key">공개 키를 보유하는 <see cref="T:System.Security.Cryptography.RSA" />의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>지정된 데이터에 대한 <see cref="T:System.Security.Cryptography.RSA" /> PKCS#1 서명을 확인합니다.</summary>
      <param name="rgbHash">
        <paramref name="rgbSignature" />로 서명된 데이터입니다.</param>
      <param name="rgbSignature">
        <paramref name="rgbHash" />에 대해 확인할 서명입니다.</param>
      <returns>
        <paramref name="rgbSignature" />가 지정된 해시 알고리즘 및 <paramref name="rgbHash" />의 키를 사용하여 계산된 서명과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">키가 <see langword="null" />인 경우
또는
해시 알고리즘이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 매개 변수가 <see langword="null" />인 경우
또는
<paramref name="rgbSignature" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 버전 1.5 서명을 만듭니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>지정된 키를 사용하여 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="key">프라이빗 키를 보유하는 <see cref="T:System.Security.Cryptography.RSA" /> 알고리즘의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.CreateSignature(System.Byte[])">
      <summary>지정된 데이터의 <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 서명을 생성합니다.</summary>
      <param name="rgbHash">서명할 데이터입니다.</param>
      <returns>
        <paramref name="rgbHash" />의 디지털 서명입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">키가 <see langword="null" />인 경우
또는
해시 알고리즘이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>서명을 만들기 위해 사용할 해시 알고리즘을 설정합니다.</summary>
      <param name="strName">서명을 만드는 데 사용할 해시 알고리즘의 이름입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>서명을 만드는 데 사용할 프라이빗 키를 설정합니다.</summary>
      <param name="key">프라이빗 키를 보유하고 있는 <see cref="T:System.Security.Cryptography.RSA" /> 알고리즘의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSASignaturePadding">
      <summary>RSA 서명 생성 또는 확인 작업에 사용할 패딩 모드 및 매개 변수를 지정합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.Equals(System.Object)">
      <summary>이 인스턴스가 지정한 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>지정한 개체가 현재 개체와 같으면 <see langword="true" />이고, 다르면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.Equals(System.Security.Cryptography.RSASignaturePadding)">
      <summary>이 인스턴스가 지정된 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 개체와 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="other">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>지정한 개체가 현재 개체와 같으면 <see langword="true" />이고, 다르면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.GetHashCode">
      <summary>이 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Mode">
      <summary>이 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 인스턴스의 패딩 모드를 가져옵니다.</summary>
      <returns>이 인스턴스의 패딩 모드 ( <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1" /> 또는 <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss" />)입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.op_Equality(System.Security.Cryptography.RSASignaturePadding,System.Security.Cryptography.RSASignaturePadding)">
      <summary>지정된 두 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 개체가 같은지 여부를 나타냅니다.</summary>
      <param name="left">비교할 첫 번째 개체입니다.</param>
      <param name="right">비교할 두 번째 개체입니다.</param>
      <returns>
        <see langword="left" />과 <see langword="right" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.op_Inequality(System.Security.Cryptography.RSASignaturePadding,System.Security.Cryptography.RSASignaturePadding)">
      <summary>지정된 두 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 개체가 다른지 여부를 나타냅니다.</summary>
      <param name="left">비교할 첫 번째 개체입니다.</param>
      <param name="right">비교할 두 번째 개체입니다.</param>
      <returns>
        <see langword="left" />와 <see langword="right" />가 다르면 <see langword="true" />이고,다르지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1">
      <summary>PKCS #1 v1.5 패딩 모드를 사용하는 개체를 가져옵니다.</summary>
      <returns>패딩 모드를 <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1" /> 사용 하는 개체입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Pss">
      <summary>PSS 패딩 모드를 사용하는 개체를 가져옵니다.</summary>
      <returns>해시의 크기와 같은 <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss" /> 솔트 바이트 수와 패딩 모드를 사용 하는 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.ToString">
      <summary>현재 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 인스턴스의 문자열 표현을 반환합니다.</summary>
      <returns>현재 개체의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSASignaturePaddingMode">
      <summary>RSA 서명 생성 또는 확인 작업에 사용할 패딩 모드를 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1">
      <summary>PKCS #1 v1.5입니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss">
      <summary>확률적 시그니처 구성표.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1">
      <summary>입력 데이터에 대한 <see cref="T:System.Security.Cryptography.SHA1" /> 해시를 계산합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA1" />의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.InvalidOperationException">이 개체에 대한 정책이 FIPS 알고리즘과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA1" />의 기본 구현 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA1" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create(System.String)">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA1" />의 지정된 구현 인스턴스를 만듭니다.</summary>
      <param name="hashName">사용할 <see cref="T:System.Security.Cryptography.SHA1" />의 특정 구현 이름입니다.</param>
      <returns>지정된 구현을 사용하는 <see cref="T:System.Security.Cryptography.SHA1" />입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Managed">
      <summary>관리 라이브러리를 사용하여 입력 데이터에 대한 <see cref="T:System.Security.Cryptography.SHA1" /> 해시를 계산합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA1Managed" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.InvalidOperationException">이 클래스가 FIPS 알고르즘과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA1Managed" />개체에서 사용되는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>개체에 쓴 데이터를 해시를 계산하기 위한 <see cref="T:System.Security.Cryptography.SHA1Managed" /> 해시 알고리즘으로 경로 처리합니다.</summary>
      <param name="array">입력 데이터입니다.</param>
      <param name="ibStart">데이터 사용을 시작할 바이트 배열의 오프셋입니다.</param>
      <param name="cbSize">데이터로 사용할 배열의 바이트 수입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.HashFinal">
      <summary>데이터를 모두 개체에 쓴 후에 계산된 <see cref="T:System.Security.Cryptography.SHA1" /> 해시 값을 반환합니다.</summary>
      <returns>계산된 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.Initialize">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA1Managed" />의 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.SHA256">
      <summary>입력 데이터에 대한 <see cref="T:System.Security.Cryptography.SHA256" /> 해시를 계산합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA256" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA256" />의 기본 구현 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA256" />의 새 인스턴스입니다. .NET Framework에서 FIPS 모드가 활성화되어 있지 않으면 이 메서드는 <see cref="T:System.Security.Cryptography.SHA256Managed" /> 클래스의 인스턴스를 만듭니다. FIPS 모드가 활성화되어 있으면 <see cref="T:System.Security.Cryptography.SHA256Cng" /> 클래스의 인스턴스가 만들어집니다. .NET Core에서는 <see cref="T:System.Security.Cryptography.SHA256" />에서 파생된 프라이빗 클래스의 인스턴스를 반환합니다.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">.NET Framework 4.6.1 및 이전 버전에만 해당: FIPS(Federal Information Processing Standards) 모드를 사용하도록 설정한 상태에서 알고리즘이 사용되었지만 이 알고리즘이 FIPS와 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create(System.String)">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA256" />의 지정된 구현 인스턴스를 만듭니다.</summary>
      <param name="hashName">사용할 <see cref="T:System.Security.Cryptography.SHA256" />의 특정 구현 이름입니다.</param>
      <returns>지정된 구현을 사용하는 <see cref="T:System.Security.Cryptography.SHA256" />입니다.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">.NET Framework에만 해당: FIPS 모드가 사용되지만, <paramref name="hashName" /> 요청 <see cref="T:System.Security.Cryptography.SHA256Managed" />가 FIPS와 호환되지 않는 경우</exception>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Managed">
      <summary>관리 라이브러리를 사용하여 입력 데이터에 대한 <see cref="T:System.Security.Cryptography.SHA256" /> 해시를 계산합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.#ctor">
      <summary>관리되는 라이브러리를 사용하여 <see cref="T:System.Security.Cryptography.SHA256Managed" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.InvalidOperationException">FIPS(Federal Information Processing Standard) 보안 설정이 사용된 경우. 이 구현은 Windows Platform FIPS 유효성 검사 암호화 알고리즘의 일부가 아닙니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA256Managed" />개체에서 사용되는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>파생 클래스에 재정의된 경우 개체에 쓰여진 데이터의 경로를 해시를 계산할 <see cref="T:System.Security.Cryptography.SHA256" /> 해시 알고리즘에 지정합니다.</summary>
      <param name="array">입력 데이터입니다.</param>
      <param name="ibStart">데이터 사용을 시작할 바이트 배열의 오프셋입니다.</param>
      <param name="cbSize">데이터로 사용할 배열의 바이트 수입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.HashFinal">
      <summary>파생 클래스에서 재정의된 경우 암호화 스트림 개체에서 마지막 데이터를 처리한 후 해시 계산을 완료합니다.</summary>
      <returns>계산된 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.Initialize">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA256Managed" />의 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.SHA384">
      <summary>입력 데이터에 대한 <see cref="T:System.Security.Cryptography.SHA384" /> 해시를 계산합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA384" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA384" />의 기본 구현 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA384" />의 새 인스턴스입니다.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">FIPS(Federal Information Processing Standards) 모드를 사용하도록 설정한 상태에서 알고리즘이 사용되었지만 이 알고리즘이 FIPS와 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create(System.String)">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA384" />의 지정된 구현 인스턴스를 만듭니다.</summary>
      <param name="hashName">사용할 <see cref="T:System.Security.Cryptography.SHA384" />의 특정 구현 이름입니다.</param>
      <returns>지정된 구현을 사용하는 <see cref="T:System.Security.Cryptography.SHA384" />입니다.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <paramref name="hashName" /> 매개 변수에서 설명하는 알고리즘이 FIPS(Federal Information Processing Standards) 모드를 설정하여 사용되었지만 FIPS 호환이 아닌 경우</exception>
    </member>
    <member name="T:System.Security.Cryptography.SHA384Managed">
      <summary>관리 라이브러리를 사용하여 입력 데이터에 대한 <see cref="T:System.Security.Cryptography.SHA384" /> 해시를 계산합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA384Managed" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.InvalidOperationException">FIPS(Federal Information Processing Standard) 보안 설정이 사용된 경우. 이 구현은 Windows Platform FIPS 유효성 검사 암호화 알고리즘의 일부가 아닙니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA384Managed" />개체에서 사용되는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>파생 클래스에 재정의된 경우 개체에 쓰여진 데이터의 경로를 해시를 계산할 <see cref="T:System.Security.Cryptography.SHA384Managed" /> 해시 알고리즘에 지정합니다.</summary>
      <param name="array">입력 데이터입니다.</param>
      <param name="ibStart">데이터 사용을 시작할 바이트 배열의 오프셋입니다.</param>
      <param name="cbSize">데이터로 사용할 배열의 바이트 수입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.HashFinal">
      <summary>파생 클래스에서 재정의된 경우 암호화 스트림 개체에서 마지막 데이터를 처리한 후 해시 계산을 완료합니다.</summary>
      <returns>계산된 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.Initialize">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA384Managed" />의 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.SHA512">
      <summary>입력 데이터에 대한 <see cref="T:System.Security.Cryptography.SHA512" /> 해시를 계산합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA512" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA512" />의 기본 구현 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA512" />의 새 인스턴스입니다.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">FIPS(Federal Information Processing Standards) 모드를 사용하도록 설정한 상태에서 알고리즘이 사용되었지만 이 알고리즘이 FIPS와 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create(System.String)">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA512" />의 지정된 구현 인스턴스를 만듭니다.</summary>
      <param name="hashName">사용할 <see cref="T:System.Security.Cryptography.SHA512" />의 특정 구현 이름입니다.</param>
      <returns>지정된 구현을 사용하는 <see cref="T:System.Security.Cryptography.SHA512" />입니다.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <paramref name="hashName" /> 매개 변수에서 설명하는 알고리즘이 FIPS(Federal Information Processing Standards) 모드를 설정하여 사용되었지만 FIPS 호환이 아닌 경우</exception>
    </member>
    <member name="T:System.Security.Cryptography.SHA512Managed">
      <summary>관리되는 라이브러리를 사용하여 입력 데이터에 대한 <see cref="T:System.Security.Cryptography.SHA512" /> 해시 알고리즘을 계산합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA512Managed" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.InvalidOperationException">FIPS(Federal Information Processing Standard) 보안 설정이 사용된 경우. 이 구현은 Windows Platform FIPS 유효성 검사 암호화 알고리즘의 일부가 아닙니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA512Managed" />개체에서 사용되는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>파생 클래스에 재정의된 경우 개체에 쓰여진 데이터의 경로를 해시를 계산할 <see cref="T:System.Security.Cryptography.SHA512Managed" /> 해시 알고리즘에 지정합니다.</summary>
      <param name="array">입력 데이터입니다.</param>
      <param name="ibStart">데이터 사용을 시작할 바이트 배열의 오프셋입니다.</param>
      <param name="cbSize">데이터로 사용할 배열의 바이트 수입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.HashFinal">
      <summary>파생 클래스에서 재정의된 경우 암호화 스트림 개체에서 마지막 데이터를 처리한 후 해시 계산을 완료합니다.</summary>
      <returns>계산된 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.Initialize">
      <summary>관리되는 라이브러리를 사용하여 <see cref="T:System.Security.Cryptography.SHA512Managed" /> 클래스의 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.SignatureDescription">
      <summary>디지털 서명의 속성에 대한 정보를 포함합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SignatureDescription" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor(System.Security.SecurityElement)">
      <summary>지정된 <see cref="T:System.Security.SecurityElement" />에서 <see cref="T:System.Security.Cryptography.SignatureDescription" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="el">서명 설명에 대한 알고리즘을 가져올 <see cref="T:System.Security.SecurityElement" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="el" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> 속성을 사용하여 지정된 키가 있는 <see cref="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm" /> 인스턴스를 만듭니다.</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />에서 사용할 키입니다.</param>
      <returns>새로 만든 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDigest">
      <summary>
        <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 속성을 사용하여 <see cref="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm" /> 인스턴스를 만듭니다.</summary>
      <returns>새로 만든 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateFormatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> 속성을 사용하여 지정된 키가 있는 <see cref="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm" /> 인스턴스를 만듭니다.</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" />에서 사용할 키입니다.</param>
      <returns>새로 만든 <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm">
      <summary>서명 설명에 대한 변형자 알고리즘을 가져오거나 설정합니다.</summary>
      <returns>서명 설명에 대한 변형자 알고리즘입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm">
      <summary>서명 설명에 대한 다이제스트 알고리즘을 가져오거나 설정합니다.</summary>
      <returns>서명 설명에 대한 다이제스트 알고리즘입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm">
      <summary>서명 설명에 대한 포맷터 알고리즘을 가져오거나 설정합니다.</summary>
      <returns>서명 설명에 대한 포맷터 알고리즘입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.KeyAlgorithm">
      <summary>서명 설명에 대한 키 알고리즘을 가져오거나 설정합니다.</summary>
      <returns>서명 설명에 대한 키 알고리즘입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.TripleDES">
      <summary>모든 <see cref="T:System.Security.Cryptography.TripleDES" /> 구현이 파생되어야 하는 3중 데이터 암호화 표준 알고리즘에 대한 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.TripleDES" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.TripleDES" /> 알고리즘을 수행할 암호화 개체의 인스턴스를 만듭니다.</summary>
      <returns>암호화 개체의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create(System.String)">
      <summary>암호화 개체의 인스턴스를 만들어 지정된 방식으로 <see cref="T:System.Security.Cryptography.TripleDES" /> 알고리즘을 구현합니다.</summary>
      <param name="str">사용하려는 <see cref="T:System.Security.Cryptography.TripleDES" />의 특정 구현에 대한 이름입니다.</param>
      <returns>암호화 개체의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])">
      <summary>지정한 키가 weak인지 여부를 확인합니다.</summary>
      <param name="rgbKey">weak 키인지 여부를 테스트할 비밀 키입니다.</param>
      <returns>키가 weak이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 매개 변수의 크기가 올바르지 않은 경우</exception>
    </member>
    <member name="P:System.Security.Cryptography.TripleDES.Key">
      <summary>
        <see cref="T:System.Security.Cryptography.TripleDES" /> 알고리즘에 대한 비밀 키를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.TripleDES" /> 알고리즘에 대한 비밀 키입니다.</returns>
      <exception cref="T:System.ArgumentNullException">키를 <see langword="null" />로 설정하려고 한 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">길이가 적절하지 않은 키를 설정하려고 한 경우
또는
weak 키(<see cref="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])" /> 참조)를 설정하려고 한 경우</exception>
    </member>
  </members>
</doc>
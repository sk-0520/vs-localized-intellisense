<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable collection of key/value pairs.  &#xA;&#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">키/값 쌍의 변경할 수 없는 컬렉션을 나타냅니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">사전에 있는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the dictionary.">지정한 키와 값을 가진 요소를 사전에 추가합니다.</summary>
      <param name="key" vsli:raw="The key of the element to add.">추가할 요소의 키입니다.</param>
      <param name="value" vsli:raw="The value of the element to add.">추가할 요소의 값입니다.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">추가 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">지정된 키가 이미 사전에 있지만 값이 다릅니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the dictionary.">지정한 키/값 쌍을 사전에 추가합니다.</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">추가할 키/값 쌍입니다.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">추가 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">지정된 키 중 하나가 이미 사전에 있지만 값이 다릅니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">이 사전 인스턴스와 순서 및 키/값 비교 규칙이 동일한 빈 사전을 검색합니다.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">순서 및 키/값 비교 규칙이 동일한 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains the specified key/value pair.">변경할 수 없는 사전에 지정된 키/값 쌍이 들어 있는지 여부를 확인합니다.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">찾을 키/값 쌍입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 키/값 쌍이 사전에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">변경할 수 없는 사전에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">제거할 요소의 키입니다.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">지정된 요소가 제거된 변경할 수 없는 새 사전입니다. 또는 사전에서 지정된 키를 찾을 수 없는 경우 이 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">변경할 수 없는 사전에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">제거할 요소의 키입니다.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">지정된 키가 제거된 변경할 수 없는 새 사전입니다. 또는 사전에서 지정된 키를 찾을 수 없는 경우 이 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">변경할 수 없는 사전에서 지정된 키와 값을 설정합니다. 키의 기존 값을 덮어쓸 수 있습니다.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">추가할 엔트리의 키입니다.</param>
      <param name="value" vsli:raw="The key value to set.">설정할 키 값입니다.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">지정된 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">변경할 수 없는 사전에서 지정된 키/값 쌍을 설정합니다. 키의 기존 값을 덮어쓸 수 있습니다.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">사전에서 설정할 키/값 쌍입니다. 사전에 키가 이미 있는 경우 이 메서드는 해당 키의 이전 값을 덮어씁니다.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">지정된 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">이 사전에 지정된 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">검색할 키입니다.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">사전에서 일치하는 키가 있으면 그대로이고, 일치하는 키가 없으면 <c>equalkey</c>입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 일치하는 항목이 있으면 <paramref name="equalKey" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary vsli:raw="Represents a list of elements that cannot be modified.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">수정할 수 없는 요소의 목록을 나타냅니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">목록에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary vsli:raw="Makes a copy of the list, and adds the specified object to the end of the copied list.">목록의 복사본을 만들고 복사한 목록의 끝에 지정된 개체를 추가합니다.</summary>
      <param name="value" vsli:raw="The object to add to the list.">목록에 추가할 개체입니다.</param>
      <returns vsli:raw="A new list with the object added.">개체가 추가된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Makes a copy of the list and adds the specified objects to the end of the copied list.">목록의 복사본을 만들고 복사한 목록의 끝에 지정된 개체를 추가합니다.</summary>
      <param name="items" vsli:raw="The objects to add to the list.">목록에 추가할 개체입니다.</param>
      <returns vsli:raw="A new list with the elements added.">요소가 추가된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary vsli:raw="Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.">모든 항목이 제거되었지만 정렬 및 순서 의미 체계가 이 목록과 동일한 목록을 만듭니다.</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">정렬 및 순서 의미 체계가 이 인스턴스와 동일한 빈 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">지정된 개체를 검색하고, 지정된 인덱스에서 시작하여 지정된 수의 요소를 포함하는 <see cref="T:System.Collections.Immutable.IImmutableList`1" />의 요소 범위에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;. This value can be null for reference types.">
        <see cref="T:System.Collections.Immutable.IImmutableList`1" />에서 찾을 개체입니다. 참조 형식의 경우 이 값은 null일 수 있습니다.</param>
      <param name="index" vsli:raw="The zero-based starting indexes of the search. 0 (zero) is valid in an empty list.">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;item&quot; /&gt;.">
        <paramref name="item" />을 찾을 같음 비교자입니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements if found; otherwise -1.">
        <paramref name="index" />에서 시작하여 <paramref name="count" />개의 요소를 포함하는 <see cref="T:System.Collections.Immutable.IImmutableList`1" />의 요소 범위에 <paramref name="item" />이 있으면 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">변경할 수 없는 목록의 지정된 인덱스에 지정된 요소를 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the value.">값을 삽입할 0부터 시작하는 인덱스입니다.</param>
      <param name="element" vsli:raw="The object to insert.">삽입할 개체입니다.</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">지정된 요소가 포함된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">변경할 수 없는 목록의 지정된 인덱스에 지정된 요소를 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">새 요소가 삽입되어야 하는 0부터 시작하는 인덱스입니다.</param>
      <param name="items" vsli:raw="The elements to insert.">삽입할 요소입니다.</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">지정된 요소가 포함된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">지정된 개체를 검색하며, 지정된 수의 요소를 포함하고 지정된 인덱스에서 끝나는 <see cref="T:System.Collections.Immutable.IImmutableList`1" />의 요소 범위에서 마지막으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to match &lt;paramref name=&quot;item&quot; /&gt;.">
        <paramref name="item" />을 일치시킬 같음 비교자입니다.</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of a specified object from this immutable list.">이 변경할 수 없는 목록에서 첫 번째로 나타나는 지정된 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">목록에서 제거할 개체입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" />을 찾을 같음 비교자입니다.</param>
      <returns vsli:raw="A new list with the specified object removed.">지정된 개체가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">지정된 조건자에 정의된 조건과 일치하는 요소를 모두 제거합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">제거할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">요소가 제거된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">변경할 수 없는 목록의 지정한 인덱스에서 요소를 제거합니다.</summary>
      <param name="index" vsli:raw="The index of the element to remove.">제거할 요소의 인덱스입니다.</param>
      <returns vsli:raw="A new list with the element removed.">요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified object from the list.">목록에서 지정한 개체를 제거합니다.</summary>
      <param name="items" vsli:raw="The objects to remove from the list.">목록에서 제거할 개체입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to determine if &lt;paramref name=&quot;items&quot; /&gt; match any objects in the list.">
        <paramref name="items" />가 목록의 개체와 일치하는지 확인하는 데 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="A new immutable list with the specified objects removed, if &lt;paramref name=&quot;items&quot; /&gt; matched objects in the list.">
        <paramref name="items" />가 목록의 개체와 일치하는 경우 지정된 개체가 제거된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements from the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Immutable.IImmutableList`1" />에서 요소의 범위를 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range of elements to remove.">제거할 요소의 범위에 대한 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements to remove.">제거할 요소의 수입니다.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">요소가 제거된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns a new list with the first matching element in the list replaced with the specified element.">목록에서 일치하는 첫 번째 요소가 지정된 요소로 바뀐 새 목록을 반환합니다.</summary>
      <param name="oldValue" vsli:raw="The element to be replaced.">바꿀 요소입니다.</param>
      <param name="newValue" vsli:raw="The element to replace the first occurrence of &lt;paramref name=&quot;oldValue&quot; /&gt; with.">첫 번째로 나타나는 <paramref name="oldValue" />를 바꿀 요소입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use for matching &lt;paramref name=&quot;oldValue&quot; /&gt;.">
        <paramref name="oldValue" />와 일치시키는 데 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="A new list that contains &lt;paramref name=&quot;newValue&quot; /&gt;, even if &lt;paramref name=&quot;oldvalue&quot; /&gt; is the same as &lt;paramref name=&quot;newValue&quot; /&gt;.">
        <paramref name="newValue" />가 포함된 새 목록입니다. 이는 <paramref name="oldvalue" />가 <paramref name="newValue" />와 같은 경우에도 마찬가지입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">
        <paramref name="oldValue" />가 목록에 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">목록에서 지정된 위치에 있는 요소를 지정된 요소로 바꿉니다.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">바꿀 요소의 목록 내 위치입니다.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">이전 요소와 바꿀 요소입니다.</param>
      <returns vsli:raw="A new list that contains the new element, even if the element at the specified location is the same as the new element.">새 요소가 포함된 새 목록입니다. 이는 지정된 위치의 요소가 새 요소와 같은 경우에도 마찬가지입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary vsli:raw="Represents an immutable first-in, first-out collection of objects.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">개체의 변경할 수 없는 선입선출(FIFO) 컬렉션을 나타냅니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">큐에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary vsli:raw="Returns a new queue with all the elements removed.">모든 요소가 제거된 새 큐를 반환합니다.</summary>
      <returns vsli:raw="An empty immutable queue.">변경할 수 없는 빈 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the first element in the immutable queue, and returns the new queue.">변경할 수 없는 큐에서 첫 번째 요소를 제거하고 새 큐를 반환합니다.</summary>
      <returns vsli:raw="The new immutable queue with the first element removed. This value is never &lt;see langword=&quot;null&quot; /&gt;.">첫 번째 요소가 제거된 변경할 수 없는 새 큐입니다. 이 값은 <see langword="null" />일 수 없습니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">큐가 비어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">변경할 수 없는 큐의 끝에 요소를 추가하고 새 큐를 반환합니다.</summary>
      <param name="value" vsli:raw="The element to add.">추가할 요소입니다.</param>
      <returns vsli:raw="The new immutable queue with the specified element added.">지정된 요소가 추가된 변경할 수 없는 새 큐입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.">이 변경할 수 없는 큐가 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 큐가 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">변경할 수 없는 큐의 시작 부분에 있는 요소를 제거하지 않고 반환합니다.</summary>
      <returns vsli:raw="The element at the beginning of the queue.">큐의 시작 부분에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">큐가 비어 있습니다.</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary vsli:raw="Represents a set of elements that can only be modified by creating a new instance of the set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">집합의 새 인스턴스를 만드는 방식으로만 수정할 수 있는 요소 집합을 나타냅니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="The type of element stored in the set.">집합에 저장된 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">지정한 요소를 이 변경할 수 없는 집합에 추가합니다.</summary>
      <param name="value" vsli:raw="The element to add.">추가할 요소입니다.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">요소가 추가된 새 집합입니다. 해당 요소가 집합에 이미 있는 경우 이 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">정렬 및 순서 의미 체계가 이 인스턴스와 동일한 변경할 수 없는 빈 집합을 검색합니다.</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">정렬 및 순서 의미 체계가 이 인스턴스와 동일한 빈 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable set contains a specified element.">이 변경할 수 없는 집합에 지정한 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The element to locate in the set.">집합에서 찾을 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">집합에 지정된 값이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">현재 변경할 수 없는 집합에서 지정된 컬렉션의 요소를 제거합니다.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">이 집합에서 제거할 항목의 컬렉션입니다.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">항목이 제거된 새 집합입니다. 집합에 항목이 없는 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that exist in this set and the specified set.">이 집합과 지정된 집합에 존재하는 요소만 포함된 변경할 수 없는 집합을 만듭니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableSet`1&quot; /&gt;.">현재 <see cref="T:System.Collections.Immutable.IImmutableSet`1" />과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="A new immutable set that contains elements that exist in both sets.">두 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) subset of the specified collection.">현재 변경할 수 없는 집합이 지정된 컬렉션의 적절한(고급) 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 지정된 컬렉션의 적절한 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) superset of the specified collection.">현재 변경할 수 없는 집합이 지정된 컬렉션의 적절한(고급) 상위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 지정된 컬렉션의 적절한 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a subset of a specified collection.">현재 변경할 수 없는 집합이 지정된 컬렉션의 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 지정된 컬렉션의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a superset of a specified collection.">현재 변경할 수 없는 집합이 지정된 컬렉션의 상위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 지정된 컬렉션의 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set overlaps with the specified collection.">현재 변경할 수 없는 집합이 지정된 컬렉션과 겹치는지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합과 지정된 컬렉션이 하나 이상 공통 요소를 공유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">이 변경할 수 없는 집합에서 지정된 요소를 제거합니다.</summary>
      <param name="value" vsli:raw="The element to remove.">제거할 요소입니다.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">지정된 요소가 제거된 새 집합입니다. 집합에서 요소를 찾을 수 없는 경우 현재 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set and the specified collection contain the same elements.">현재 변경할 수 없는 집합과 지정된 컬렉션에 같은 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">집합이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하는 변경할 수 없는 집합을 만듭니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소를 포함하는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Determines whether the set contains a specified value.">집합에 지정된 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">검색할 값입니다.</param>
      <param name="actualValue" vsli:raw="The matching value from the set, if found, or &lt;c&gt;equalvalue&lt;/c&gt; if there are no matches.">집합에 일치하는 값이 있으면 해당 값이고, 일치하는 값이 없으면 <c>equalvalue</c>입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching value was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">일치하는 값이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 모든 요소를 포함하는 변경할 수 없는 새 집합을 만듭니다.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">요소를 추가할 컬렉션입니다.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">항목이 추가된 변경할 수 없는 새 집합입니다. 모든 항목이 집합에 이미 있던 경우 원래 집합입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary vsli:raw="Represents an immutable last-in-first-out (LIFO) collection.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">변경할 수 없는 LIFO(후입선출) 방식의 컬렉션을 나타냅니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the stack.">스택에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">변경할 수 없는 스택에서 모든 개체를 제거합니다.</summary>
      <returns vsli:raw="An empty immutable stack.">변경할 수 없는 빈 스택입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable stack is empty.">이 변경할 수 없는 스택이 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this stack is empty; otherwise,&lt;see langword=&quot;false&quot; /&gt;.">이 스택이 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary vsli:raw="Returns the element at the top of the immutable stack without removing it.">변경할 수 없는 스택의 맨 위에 있는 요소를 제거하지 않고 반환합니다.</summary>
      <returns vsli:raw="The element at the top of the stack.">스택의 맨 위에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">스택이 비어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">변경할 수 없는 스택의 맨 위에 있는 요소를 제거하고 새 스택을 반환합니다.</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">새 스택입니다. <see langword="null" />일 수 없습니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">스택이 비어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">변경할 수 없는 스택의 맨 위에 요소를 삽입하고 새 스택을 반환합니다.</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">스택에 적용할 요소입니다.</param>
      <returns vsli:raw="The new stack.">새 스택입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary vsli:raw="Provides methods for creating an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">변경할 수 없는 배열을 만드는 메서드를 제공합니다. 즉, 배열을 만든 후에는 변경할 수 없습니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary vsli:raw="Searches the sorted immutable array for a specified element using the default comparer and returns the zero-based index of the element, if it's found.">기본 비교자를 사용하여 지정된 요소에서 정렬된 불변형 배열을 검색하고 해당 요소의 0부터 시작하는 인덱스(있는 경우)를 반환합니다.</summary>
      <param name="array" vsli:raw="The sorted array to search.">검색할 정렬된 배열입니다.</param>
      <param name="value" vsli:raw="The object to search for.">검색할 개체입니다.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">항목이 있으면 배열에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 <paramref name="value" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.ICollection`1.Count" />의 비트 보수입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" />가 <see cref="T:System.IComparable" />을 구현하지 않거나 검색 중에 <see cref="T:System.IComparable" />을 구현하지 않는 요소가 발견되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">지정된 요소에서 정렬된 불변형 배열을 검색하고 해당 요소의 0부터 시작하는 인덱스(있는 경우)를 반환합니다.</summary>
      <param name="array" vsli:raw="The sorted array to search.">검색할 정렬된 배열입니다.</param>
      <param name="value" vsli:raw="The object to search for.">검색할 개체입니다.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or null to use the default comparer.">요소를 비교할 때 사용할 비교자 구현이거나, 기본 비교자를 사용하려면 null입니다.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">항목이 있으면 배열에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 <paramref name="value" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.ICollection`1.Count" />의 비트 보수입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" />가 null이고 <paramref name="value" />가 <see cref="T:System.IComparable" />을 구현하지 않거나 검색 중에 <see cref="T:System.IComparable" />을 구현하지 않는 요소가 발견되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">지정된 요소에서 정렬된 불변형 배열을 검색하고 해당 요소의 0부터 시작하는 인덱스(있는 경우)를 반환합니다.</summary>
      <param name="array" vsli:raw="The sorted array to search.">검색할 정렬된 배열입니다.</param>
      <param name="index" vsli:raw="The starting index of the range to search.">검색할 범위의 시작 인덱스입니다.</param>
      <param name="length" vsli:raw="The length of the range to search.">검색할 범위의 길이입니다.</param>
      <param name="value" vsli:raw="The object to search for.">검색할 개체입니다.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">항목이 있으면 배열에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 <paramref name="value" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.ICollection`1.Count" />의 비트 보수입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" />가 <see cref="T:System.IComparable" />을 구현하지 않거나 검색 중에 <see cref="T:System.IComparable" />을 구현하지 않는 요소가 발견되었습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> 및 <paramref name="length" />가 <paramref name="array" />의 올바른 범위를 지정하지 않습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" />가 <paramref name="array" />의 하한값보다 작습니다.
-또는-
<paramref name="length" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element.">변경할 수 없는 정렬된 배열에서 지정된 요소를 검색하고 해당 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="array" vsli:raw="The sorted array to search.">검색할 정렬된 배열입니다.</param>
      <param name="index" vsli:raw="The starting index of the range to search.">검색할 범위의 시작 인덱스입니다.</param>
      <param name="length" vsli:raw="The length of the range to search.">검색할 범위의 길이입니다.</param>
      <param name="value" vsli:raw="The object to search for.">검색할 개체입니다.</param>
      <param name="comparer" vsli:raw="The comparer to use when comparing elements for equality or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">요소가 같은지 비교할 때 사용할 비교자이거나, 기본 비교자를 사용하려면 <see langword="null" />입니다.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">항목이 있으면 배열에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 <paramref name="value" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.ICollection`1.Count" />의 비트 보수입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" />가 null이고 <paramref name="value" />가 <see cref="T:System.IComparable" />을 구현하지 않거나 검색 중에 <see cref="T:System.IComparable" />을 구현하지 않는 요소가 발견되었습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not compatible with the elements of &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> 및 <paramref name="length" />가 <paramref name="array" />의 올바른 범위를 지정하지 않습니다.
-또는-
<paramref name="comparer" />가 <see langword="null" />이고 <paramref name="value" />가 <paramref name="array" />의 요소와 호환되지 않는 형식입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" />가 <paramref name="array" />의 하한값보다 작습니다.
-또는-
<paramref name="length" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary vsli:raw="Creates an empty immutable array.">변경할 수 없는 빈 배열을 만듭니다.</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An empty immutable array.">변경할 수 없는 빈 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified object.">지정된 개체를 포함하는 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="item" vsli:raw="The object to store in the array.">배열에 저장할 개체입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified object.">지정된 개체를 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">지정된 개체를 포함하는 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">배열에 저장할 첫 번째 개체입니다.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">배열에 저장할 두 번째 개체입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">지정된 개체를 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">지정된 개체를 포함하는 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">배열에 저장할 첫 번째 개체입니다.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">배열에 저장할 두 번째 개체입니다.</param>
      <param name="item3" vsli:raw="The third object to store in the array.">배열에 저장할 세 번째 개체입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">지정된 개체를 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">지정된 개체를 포함하는 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">배열에 저장할 첫 번째 개체입니다.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">배열에 저장할 두 번째 개체입니다.</param>
      <param name="item3" vsli:raw="The third object to store in the array.">배열에 저장할 세 번째 개체입니다.</param>
      <param name="item4" vsli:raw="The fourth object to store in the array.">배열에 저장할 네 번째 개체입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">지정된 개체를 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary vsli:raw="Creates an immutable array from the specified array of objects.">지정된 개체 배열에서 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="items" vsli:raw="The array of objects to populate the array with.">배열을 채울 개체의 배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable array that contains the array of items.">항목의 배열을 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with specified objects from another array.">다른 배열의 지정된 개체가 있는 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="items" vsli:raw="The source array of objects.">개체의 원본 배열입니다.</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="items" />에서 복사할 첫 번째 요소의 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">이 변경할 수 없는 배열에 포함할 <paramref name="items" />의 요소 수입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">원본 배열의 지정된 개체를 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with the specified objects from another immutable array.">다른 변경할 수 없는 배열의 지정된 개체가 있는 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="items" vsli:raw="The source array of objects.">개체의 원본 배열입니다.</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="items" />에서 복사할 첫 번째 요소의 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">이 변경할 수 없는 배열에 포함할 <paramref name="items" />의 요소 수입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">원본 배열의 지정된 개체를 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">새 메모리를 할당하지 않고 <see cref="T:System.Collections.Immutable.ImmutableArray" />로 변환할 수 있는 변경 가능한 배열을 만듭니다.</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">작성기에 저장된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">변경할 수 없는 배열로 효율적으로 변환할 수 있는 지정된 형식의 변경 가능한 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">새 메모리를 할당하지 않고 <see cref="T:System.Collections.Immutable.ImmutableArray" />로 변환할 수 있는 변경 가능한 배열을 만듭니다.</summary>
      <param name="initialCapacity" vsli:raw="The initial capacity of the builder.">작성기의 초기 용량입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">작성기에 저장된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">변경할 수 없는 배열로 효율적으로 변환할 수 있는 지정된 형식의 변경 가능한 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; populated with the specified items.">지정된 항목으로 채워진 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />를 만듭니다.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">배열에 추가할 요소입니다.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified items.">지정된 항목을 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">결과 배열을 초기화할 원본 배열입니다.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">원본 배열의 각 요소에 적용할 함수입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">결과 배열을 초기화할 원본 배열입니다.</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">결과 배열에 포함할 원본 배열에 있는 첫 번째 요소 의 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">결과 배열에 포함할 원본 배열의 요소 수입니다.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">결과 배열에 포함된 소스 배열의 각 요소에 적용할 함수입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">결과 배열을 초기화할 원본 배열입니다.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">원본 배열의 각 요소에 적용할 함수입니다.</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">선택기 매핑 함수에 전달될 인수입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to pass to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">결과 배열을 초기화할 원본 배열입니다.</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">결과 배열에 포함할 원본 배열에 있는 첫 번째 요소 의 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">결과 배열에 포함할 원본 배열의 요소 수입니다.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">결과 배열에 포함된 소스 배열의 각 요소에 적용할 함수입니다.</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">선택기 매핑 함수에 전달될 인수입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to be passed to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to be stored in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates an immutable array from the specified collection.">지정된 컬렉션에서 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="items" vsli:raw="The collection of objects to copy to the immutable array.">변경할 수 없는 배열에 복사할 개체의 컬렉션입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="items" />에 포함된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified collection of objects.">지정된 개체 컬렉션을 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Creates an immutable array from the current contents of the builder's array.">작성기 배열의 현재 콘텐츠에서 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable array from.">변경할 수 없는 배열을 만들 작성기입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in the immutable array.">변경할 수 없는 배열에 포함 된 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable array that contains the current contents of the builder's array.">작성기 배열의 현재 콘텐츠를 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary vsli:raw="Represents an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">변경할 수 없는 배열을 나타냅니다. 즉, 배열을 만든 후에는 변경할 수 없습니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">배열에 의해 저장되는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">지정된 항목이 끝에 추가된 원래 배열의 복사본을 반환합니다.</summary>
      <param name="item" vsli:raw="The item to be added to the end of the array.">배열의 끝에 추가할 항목입니다.</param>
      <returns vsli:raw="A new array with the specified item added to the end.">지정된 항목이 끝에 추가된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">지정된 요소가 배열의 끝에 추가된 원래 배열의 복사본을 반환합니다.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">배열에 추가할 요소입니다.</param>
      <returns vsli:raw="A new array with the elements added.">요소가 추가된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">지정된 요소가 배열의 끝에 추가된 원래 배열의 복사본을 반환합니다.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">배열에 추가할 요소입니다.</param>
      <returns vsli:raw="A new array with the elements added.">요소가 추가된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary vsli:raw="Returns a new immutable array that contains the elements of this array cast to a different type.">다른 형식으로 캐스팅된 이 배열의 요소를 포함하는 변경할 수 없는 새 배열을 반환합니다.</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return.">반환할 배열 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable array that contains the elements of this array, cast to a different type. If the cast fails, returns an array whose &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">다른 형식으로 캐스팅된 이 배열의 요소를 포함하는 변경할 수 없는 배열입니다. 캐스팅에 실패한 경우 해당 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성에서 <see langword="true" />를 반환하는 배열을 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary vsli:raw="Creates a new read-only memory region over this immutable array.">이 변경할 수 없는 배열에 대해 새 읽기 전용 메모리 영역을 만듭니다.</summary>
      <returns vsli:raw="The read-only memory representation of this immutable array.">이 변경할 수 없는 배열의 읽기 전용 메모리 표현입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary vsli:raw="Creates a new read-only span over this immutable array.">이 변경할 수 없는 배열에 대해 새 읽기 전용 범위를 만듭니다.</summary>
      <returns vsli:raw="The read-only span representation of this immutable array.">이 변경할 수 없는 배열의 읽기 전용 범위 표현입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary vsli:raw="A writable array accessor that can be converted into an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; instance without allocating extra memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">추가 메모리 할당 없이 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 인스턴스로 변환할 수 있는 쓰기 가능한 배열 접근자입니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the array.">지정된 항목을 배열에 추가합니다.</summary>
      <param name="item" vsli:raw="The object to add to the array.">배열에 추가할 개체입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary vsli:raw="Adds the specified items to the end of the array.">지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items" vsli:raw="The items to add to the array.">배열에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items" vsli:raw="The items to add to the array.">배열에 추가할 항목입니다.</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">추가할 원본 배열의 요소 수입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items" vsli:raw="The items to add to the array.">배열에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items" vsli:raw="The items to add to the array.">배열에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items" vsli:raw="The items to add to the array.">배열에 추가할 항목입니다.</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">추가할 원본 배열의 요소 수입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary vsli:raw="Adds the specified items to the end of the array.">지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items" vsli:raw="The items to add to the array.">배열에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">현재 배열의 형식에서 파생된 지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items" vsli:raw="The items to add to end of the array.">배열의 끝에 추가할 항목입니다.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">배열에 이미 있는 항목의 형식에서 파생되는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">현재 배열의 형식에서 파생된 지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">배열의 끝에 추가할 항목입니다.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">배열에 이미 있는 항목의 형식에서 파생되는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">현재 배열의 형식에서 파생된 지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">배열의 끝에 추가할 항목입니다.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">배열에 이미 있는 항목의 형식에서 파생되는 형식입니다.</typeparam>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary vsli:raw="Gets or sets the length of the internal array. When set, the internal array is reallocated to the given capacity if it is not already the specified length.">내부 배열의 길이를 가져오거나 설정합니다. 설정될 때 내부 배열에 길이가 지정되지 않으면 지정된 용량에 다시 할당됩니다.</summary>
      <returns vsli:raw="The length of the internal array.">내부 배열의 길이입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the array.">배열에서 모든 항목을 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the array contains a specific value.">배열에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the array.">배열에서 찾을 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">개체가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the current contents to the specified array.">현재 내용을 지정된 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The array to copy to.">복사할 대상 배열입니다.</param>
      <param name="index" vsli:raw="The index to start the copy operation.">복사 작업을 시작할 인덱스입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary vsli:raw="Gets or sets the number of items in the array.">배열의 항목 수를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The number of items in the array.">배열의 항목 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary vsli:raw="Gets an object that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Determines the index of a specific item in the array.">배열에서 특정 항목의 인덱스를 확인합니다.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">배열에서 찾을 항목입니다.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">목록에 있으면 <paramref name="item" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">지정된 항목의 인덱스를 확인합니다.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">배열에서 찾을 항목입니다.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">검색을 시작할 위치입니다.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">목록에 있으면 <paramref name="item" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">지정된 항목의 인덱스를 확인합니다.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">배열에서 찾을 항목입니다.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">검색을 시작할 위치입니다.</param>
      <param name="count" vsli:raw="The number of elements to search.">검색할 요소의 수입니다.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">목록에 있으면 <paramref name="item" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the index for the specified item.">지정된 항목의 인덱스를 확인합니다.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">배열에서 찾을 항목입니다.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">검색을 시작할 인덱스입니다.</param>
      <param name="count" vsli:raw="The starting position of the search.">검색을 시작할 위치입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">목록에 있으면 <paramref name="item" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the array at the specified index.">배열의 지정된 인덱스에 항목을 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">항목을 삽입할 0부터 시작하는 인덱스입니다.</param>
      <param name="item" vsli:raw="The object to insert into the array.">배열에 삽입할 개체입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the item at the specified index.">지정된 인덱스에 있는 항목을 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">가져오거나 설정할 항목의 인덱스입니다.</param>
      <returns vsli:raw="The item at the specified index.">지정된 인덱스에 있는 항목입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The specified index is not in the array.">지정된 인덱스가 배열에 포함되지 않는 경우</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified index.">지정된 인덱스에 있는 요소에 대한 읽기 전용 참조를 가져옵니다.</summary>
      <param name="index" vsli:raw="The item index.">항목 인덱스입니다.</param>
      <returns vsli:raw="The read-only reference to the element at the specified index.">지정된 인덱스에 있는 요소에 대한 읽기 전용 참조입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is greater or equal to the array count.">
        <paramref name="index" />가 배열 수보다 크거나 같습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">이 배열에서 마지막으로 나타나는 지정된 항목의 0부터 시작하는 인덱스를 확인합니다.</summary>
      <param name="item" vsli:raw="The item to search for.">검색할 항목입니다.</param>
      <returns vsli:raw="The 0-based index where the item was found; or -1 if it could not be found.">항목을 찾은 0부터 시작하는 인덱스입니다. 항목을 찾을 수 없는 경우 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">이 배열에서 마지막으로 나타나는 지정된 항목의 0부터 시작하는 인덱스를 확인합니다.</summary>
      <param name="item" vsli:raw="The item to search for.">검색할 항목입니다.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">검색을 시작할 위치입니다.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">항목을 찾은 배열의 0부터 시작하는 인덱스입니다. 항목을 찾을 수 없는 경우 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">이 배열에서 마지막으로 나타나는 지정된 항목의 0부터 시작하는 인덱스를 확인합니다.</summary>
      <param name="item" vsli:raw="The item to search for.">검색할 항목입니다.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">검색을 시작할 위치입니다.</param>
      <param name="count" vsli:raw="The number of elements to search.">검색할 요소의 수입니다.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">항목을 찾은 배열의 0부터 시작하는 인덱스입니다. 항목을 찾을 수 없는 경우 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">이 배열에서 마지막으로 나타나는 지정된 항목의 0부터 시작하는 인덱스를 확인합니다.</summary>
      <param name="item" vsli:raw="The item to search for.">검색할 항목입니다.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">검색을 시작할 위치입니다.</param>
      <param name="count" vsli:raw="The number of elements to search.">검색할 요소의 수입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">항목을 찾은 배열의 0부터 시작하는 인덱스입니다. 항목을 찾을 수 없는 경우 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary vsli:raw="Extracts the internal array as an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; and replaces it              with a zero length array.">내부 배열을 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />로 추출하고 길이가 0인 배열로 바꿉니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="When &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Count&quot; /&gt; doesn't              equal &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" />가 <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" />와 같지 않은 경우입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the specified element.">지정된 요소를 제거합니다.</summary>
      <param name="element" vsli:raw="The item to remove.">제거할 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;element&quot; /&gt; was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="element" />을 찾아 제거했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index from the array.">배열에서 지정된 인덱스의 항목을 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">제거할 항목의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of elements in the collection.">컬렉션에서 요소의 순서를 반대로 바꿉니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary vsli:raw="Sorts the contents of the array.">배열의 내용을 정렬합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">배열의 내용을 정렬합니다.</summary>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">정렬에 사용할 비교자입니다. 비교자가 <see langword="null" />인 경우 배열에 있는 요소 형식의 기본 비교자가 사용됩니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire array using the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">지정된 <see cref="T:System.Comparison`1" />을 사용하여 전체 배열의 요소를 정렬합니다.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">요소를 비교할 때 사용할 <see cref="T:System.Comparison`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">배열의 내용을 정렬합니다.</summary>
      <param name="index" vsli:raw="The starting index for the sort.">정렬의 시작 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">정렬에 포함할 요소 수입니다.</param>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">정렬에 사용할 비교자입니다. 비교자가 <see langword="null" />인 경우 배열에 있는 요소 형식의 기본 비교자가 사용됩니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">배열에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">배열에서 반복되는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">배열에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">배열에서 반복되는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary vsli:raw="Creates a new array with the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">이 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />의 현재 내용이 포함된 새 배열을 만듭니다.</summary>
      <returns vsli:raw="A new array with the contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">이 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />의 현재 내용이 포함된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary vsli:raw="Returns an immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">이 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />의 현재 내용이 포함된 변경할 수 없는 배열을 반환합니다.</summary>
      <returns vsli:raw="An immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">이 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />의 현재 내용이 포함된 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct by casting the underlying array to an array of type &lt;typeparamref name=&quot;TOther&quot; /&gt;.">기본 배열을 <typeparamref name="TOther" /> 형식의 배열로 캐스팅하여 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return." />
      <exception cref="T:System.InvalidCastException" vsli:raw="The cast is illegal.">캐스팅이 잘못된 경우 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct based on the contents of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.">기존 인스턴스를 내용에 따라 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 구조체의 새 인스턴스를 초기화하면 공변(covariant) 고정 캐스트가 기존 배열을 효율적으로 다시 사용할 수 있습니다.</summary>
      <param name="items" vsli:raw="The array to initialize the array with. No copy is made.">배열을 초기화할 배열입니다. 복사는 수행되지 않습니다.</param>
      <typeparam name="TDerived" vsli:raw="The type of array element to return." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">모든 요소가 제거된 배열을 반환합니다.</summary>
      <returns vsli:raw="An array with all of the elements removed.">모든 요소가 제거된 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary vsli:raw="Determines whether the specified item exists in the array.">지정한 항목이 배열에 있는지 확인합니다.</summary>
      <param name="item" vsli:raw="The item to search for.">검색할 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified item was found in the array; otherwise &lt;see langword=&quot;false&quot; /&gt;.">지정된 항목이 배열에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the contents of this array to the specified array.">이 배열의 내용을 지정된 배열에 복사합니다.</summary>
      <param name="destination" vsli:raw="The array to copy to.">복사할 대상 배열입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the contents of this array to the specified array starting at the specified destination index.">지정된 대상 인덱스에서 시작하여 이 배열의 내용을 지정된 배열에 복사합니다.</summary>
      <param name="destination" vsli:raw="The array to copy to.">복사할 대상 배열입니다.</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">복사를 시작할 <paramref name="array" />의 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the specified items in this array to the specified array at the specified starting index.">지정된 시작 인덱스에서 이 배열의 지정된 항목을 지정된 배열에 복사합니다.</summary>
      <param name="sourceIndex" vsli:raw="The index of this array where copying begins.">복사를 시작할 이 배열의 인덱스입니다.</param>
      <param name="destination" vsli:raw="The array to copy to.">복사할 대상 배열입니다.</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">복사를 시작할 <paramref name="array" />의 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of elements to copy from this array.">이 배열에서 복사할 요소 수입니다.</param>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary vsli:raw="Gets an empty immutable array.">변경할 수 없는 빈 배열을 가져옵니다.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary vsli:raw="An array enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">배열 열거자입니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary vsli:raw="Gets the current item.">현재 항목을 가져옵니다.</summary>
      <returns vsli:raw="The current item.">현재 항목입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances to the next value in the array.">배열의 다음 값으로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if another item exists in the array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">배열에 다른 항목이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Indicates whether specified array is equal to this array.">지정된 배열이 이 배열과 같은지 여부를 나타냅니다.</summary>
      <param name="other" vsli:raw="An object to compare with this object.">이 개체와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; is equal to this array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 이 배열과 같으면 <paramref name="other" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary vsli:raw="Determines if this array is equal to the specified object.">이 배열이 지정된 개체와 같은지 여부를 확인합니다.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this array.">이 배열과 비교할 <see cref="T:System.Object" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this array is equal to &lt;paramref name=&quot;obj&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 배열이 <paramref name="obj" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the contents of the array.">배열 내용에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator.">열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary vsli:raw="Returns a hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.">해시 알고리즘 및 해시 테이블과 같은 데이터 구조에 사용하기 적합한 이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item.">배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item" vsli:raw="The item to search for.">검색할 항목입니다.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">해당 항목이 있으면 항목의 0부터 시작하는 인덱스 위치이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item" vsli:raw="The item to search for.">검색할 항목입니다.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">검색을 시작할 인덱스입니다.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">해당 항목이 있으면 항목의 0부터 시작하는 인덱스 위치이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item" vsli:raw="The item to search for.">검색할 항목입니다.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">검색을 시작할 인덱스입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">해당 항목이 있으면 항목의 0부터 시작하는 인덱스 위치이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item" vsli:raw="The item to search for.">검색할 항목입니다.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">검색을 시작할 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements to search.">검색할 요소의 수입니다.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">해당 항목이 있으면 항목의 0부터 시작하는 인덱스 위치이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item" vsli:raw="The item to search for.">검색할 항목입니다.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">검색을 시작할 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements to search.">검색할 요소의 수입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">해당 항목이 있으면 항목의 0부터 시작하는 인덱스 위치이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">지정된 위치에 지정된 값이 삽입된 새 배열을 반환합니다.</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">새 항목을 추가해야 하는 배열의 0부터 시작하는 인덱스입니다.</param>
      <param name="item" vsli:raw="The item to insert at the start of the array.">배열의 시작 부분에 삽입할 항목입니다.</param>
      <returns vsli:raw="A new array with the item inserted at the specified index.">지정된 인덱스에 항목이 삽입된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">지정된 인덱스에 지정된 값을 삽입합니다.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">값을 삽입할 인덱스입니다.</param>
      <param name="items" vsli:raw="The elements to insert.">삽입할 요소입니다.</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">지정된 인덱스에 항목이 삽입된 변경할 수 없는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">지정된 인덱스에 지정된 값을 삽입합니다.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">값을 삽입할 인덱스입니다.</param>
      <param name="items" vsli:raw="The elements to insert.">삽입할 요소입니다.</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">지정된 인덱스에 항목이 삽입된 변경할 수 없는 새 배열입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary vsli:raw="Gets a value indicating whether this array was declared but not initialized.">이 배열이 선언되었지만 초기화되지 않았는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" />가 <see langword="null" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty or is not initialized.">
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" />가 비어 있는지 또는 초기화되지 않았는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.Collections.Immutable.ImmutableArray`1.Empty&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" />
        <see langword="null" /> 또는 <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" />경우 <see langword="true" /> 합니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty.">이 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />가 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 비어 있으면 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index in the immutable array.">변경할 수 없는 배열에서 지정된 인덱스의 요소를 가져옵니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">가져올 요소의 0부터 시작하는 인덱스입니다.</param>
      <returns vsli:raw="The element at the specified index in the immutable array.">변경할 수 없는 배열의 지정된 인덱스에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">읽기 전용 목록에서 지정된 <paramref name="index" />에 있는 요소에 대한 읽기 전용 참조를 가져옵니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get a reference to.">참조를 가져올 요소의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="A read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">읽기 전용 목록에서 지정된 <paramref name="index" />에 있는 요소에 대한 읽기 전용 참조입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">배열에서 끝에서 시작하여 배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item" vsli:raw="The item to search for.">검색할 항목입니다.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">항목을 찾은 배열의 0부터 시작하는 인덱스입니다. 항목을 찾을 수 없는 경우 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">배열에서 끝에서 시작하여 배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item" vsli:raw="The item to search for.">검색할 항목입니다.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">검색을 시작할 인덱스입니다.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">항목을 찾은 배열의 0부터 시작하는 인덱스입니다. 항목을 찾을 수 없는 경우 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">배열에서 끝에서 시작하여 배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item" vsli:raw="The item to search for.">검색할 항목입니다.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">검색을 시작할 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements to search.">검색할 요소의 수입니다.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">항목을 찾은 배열의 0부터 시작하는 인덱스입니다. 항목을 찾을 수 없는 경우 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">배열에서 끝에서 시작하여 배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item" vsli:raw="The item to search for.">검색할 항목입니다.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">검색을 시작할 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements to search.">검색할 요소의 수입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">항목을 찾은 배열의 0부터 시작하는 인덱스입니다. 항목을 찾을 수 없는 경우 -1입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary vsli:raw="Gets the number of elements in the array.">배열의 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements in the array.">배열의 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary vsli:raw="Filters the elements of this array to those assignable to the specified type.">이 배열의 요소를 지정된 형식에 할당할 수 있는 요소로 필터링합니다.</summary>
      <typeparam name="TResult" vsli:raw="The type to filter the elements of the sequence on.">시퀀스의 요소를 필터링할 형식입니다.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; that contains elements from the input sequence of type of &lt;paramref name=&quot;TResult&quot; /&gt;.">
        <paramref name="TResult" /> 형식의 입력 시퀀스에서 가져온 요소가 들어 있는 <see cref="T:System.Collections.IEnumerable" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">두 배열이 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">연산자 왼쪽에 있는 배열입니다.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">연산자 오른쪽에 있는 배열입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">배열이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">두 배열이 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">연산자 왼쪽에 있는 배열입니다.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">연산자 오른쪽에 있는 배열입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">배열이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates whether two arrays are not equal.">두 배열이 다른지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">연산자 왼쪽에 있는 배열입니다.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">연산자 오른쪽에 있는 배열입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">배열이 서로 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Checks for inequality between two array.">두 배열이 다른지 확인합니다.</summary>
      <param name="left" vsli:raw="The object to the left of the operator.">연산자 왼쪽에 있는 개체입니다.</param>
      <param name="right" vsli:raw="The object to the right of the operator.">연산자 오른쪽에 있는 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">두 배열이 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array. If no match is found, the current array is returned.">첫 번째로 나타나는 지정된 요소가 제거된 배열을 반환합니다. 일치하는 항목이 없는 경우 현재 배열이 반환됩니다.</summary>
      <param name="item" vsli:raw="The item to remove.">제거할 항목입니다.</param>
      <returns vsli:raw="A new array with the item removed.">항목이 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array.  &#xA;  &#xA; If no match is found, the current array is returned.">첫 번째로 나타나는 지정된 요소가 제거된 배열을 반환합니다.
일치하는 항목이 없는 경우 현재 배열이 반환됩니다.</summary>
      <param name="item" vsli:raw="The item to remove.">제거할 항목입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="A new array with the specified item removed.">지정된 항목이 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">지정된 조건을 충족하는 모든 항목을 배열에서 제거합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">제거할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">지정된 조건을 충족하는 항목이 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">지정된 위치의 요소가 제거된 배열을 반환합니다.</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">반환된 배열에서 제거할 요소의 0부터 시작하는 인덱스입니다.</param>
      <returns vsli:raw="A new array with the item at the specified index removed.">지정된 인덱스의 항목이 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified items from this array.">이 배열에서 지정된 항목을 제거합니다.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">이 목록에 일치하는 항목이 있는 경우 제거할 항목입니다.</param>
      <returns vsli:raw="A new array with the elements removed.">요소가 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">이 배열에서 지정된 항목을 제거합니다.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">이 목록에 일치하는 항목이 있는 경우 제거할 항목입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="A new array with the elements removed.">요소가 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Removes the specified values from this list.">이 목록에서 지정된 값을 제거합니다.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">이 목록에 일치하는 항목이 있는 경우 제거할 항목입니다.</param>
      <returns vsli:raw="A new list with the elements removed.">요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this list.">이 목록에서 지정된 항목을 제거합니다.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">이 목록에 일치하는 항목이 있는 경우 제거할 항목입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="A new array with the elements removed.">요소가 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">지정된 위치의 요소가 제거된 배열을 반환합니다.</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">배열에서 제거할 시작 요소의 0부터 시작하는 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of elements to remove from the array.">배열에서 제거할 요소 수입니다.</param>
      <returns vsli:raw="The new array with the specified elements removed.">지정된 요소가 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">배열에서 지정된 값과 같은 첫 번째 요소를 찾아 해당 값을 지정된 새 값으로 바꿉니다.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">배열에서 찾아서 바꿀 값입니다.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">
        <c>oldvalue</c>를 바꿀 값입니다.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">
        <paramref name="newValue" />가 포함된 새 배열입니다. 이는 새 값과 이전 값이 동일한 경우에도 마찬가지입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" />가 배열에 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">배열에서 지정된 값과 같은 첫 번째 요소를 찾아 해당 값을 지정된 새 값으로 바꿉니다.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">배열에서 찾아서 바꿀 값입니다.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">
        <c>oldvalue</c>를 바꿀 값입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">값을 비교하는 데 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">
        <paramref name="newValue" />가 포함된 새 배열입니다. 이는 새 값과 이전 값이 동일한 경우에도 마찬가지입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" />가 배열에 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">지정된 인덱스에 있는 항목을 지정된 항목으로 바꿉니다.</summary>
      <param name="index" vsli:raw="The index of the item to replace.">바꿀 항목의 인덱스입니다.</param>
      <param name="item" vsli:raw="The item to add to the list.">목록에 추가할 항목입니다.</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">지정된 인덱스에 있는 <paramref name="item" />을 포함하는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary vsli:raw="Sorts the elements in the immutable array using the default comparer.">기본 비교자를 사용하여 변경할 수 없는 배열의 요소를 정렬합니다.</summary>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">이 배열의 항목을 정렬된 순서대로 포함하는 변경할 수 없는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the immutable array using the specified comparer.">지정된 비교자를 사용하여 변경할 수 없는 배열의 요소를 정렬합니다.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">요소를 비교할 때 사용할 구현이거나, 기본 비교자를 사용하려면 <see langword="null" />입니다.</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">이 배열의 항목을 정렬된 순서대로 포함하는 변경할 수 없는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; using             the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">지정된 <see cref="T:System.Comparison`1" />을 사용하여 전체 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />의 요소를 정렬합니다.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">요소를 비교할 때 사용할 <see cref="T:System.Comparison`1" />입니다.</param>
      <returns vsli:raw="The sorted list.">정렬된 목록입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the specified elements in the immutable array using the specified comparer.">지정된 비교자를 사용하여 변경할 수 없는 배열의 지정된 요소를 정렬합니다.</summary>
      <param name="index" vsli:raw="The index of the first element to sort.">정렬할 첫 번째 요소의 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">정렬에 포함할 요소 수입니다.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">요소를 비교할 때 사용할 구현이거나, 기본 비교자를 사용하려면 <see langword="null" />입니다.</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">이 배열의 항목을 정렬된 순서대로 포함하는 변경할 수 없는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="item" vsli:raw="The item to add to the end of the array.">배열의 끝에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">컬렉션에서 배열의 수를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성이 true를 반환하는 경우 throw됩니다.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">이 인스턴스가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 인스턴스가 읽기 전용 이면 <see langword="true" />이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="item" vsli:raw="The object to remove from the array.">배열에서 제거할 개체입니다.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">배열에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">배열에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="index" vsli:raw="The index of the location to insert the item.">항목을 삽입할 위치의 인덱스입니다.</param>
      <param name="item" vsli:raw="The item to insert.">삽입할 항목입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index in the read-only list.">읽기 전용 목록에서 지정된 인덱스의 요소를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">가져올 요소의 0부터 시작하는 인덱스입니다.</param>
      <returns vsli:raw="The element at the specified index in the read-only list.">읽기 전용 목록에서 지정된 인덱스의 요소입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">setter에서 항상 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성이 true를 반환하는 경우 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="index" vsli:raw="The index.">인덱스입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">컬렉션에서 배열의 수를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성이 true를 반환하는 경우 throw됩니다.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index.">지정한 인덱스에 있는 요소를 가져옵니다.</summary>
      <param name="index" vsli:raw="The index.">인덱스입니다.</param>
      <returns vsli:raw="The element.">요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성이 true를 반환하는 경우 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies this array to another array starting at the specified index.">지정된 인덱스에서 시작하여 이 배열을 다른 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The array to copy this array to.">이 배열을 복사할 배열입니다.</param>
      <param name="index" vsli:raw="The index in the destination array to start the copy operation.">복사 작업을 시작할 대상 배열의 인덱스입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the size of the array.">배열의 크기를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성이 true를 반환하는 경우 throw됩니다.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface. Always returns &lt;see langword=&quot;true&quot; /&gt; since since immutable collections are thread-safe.">
        <see cref="T:System.Collections.ICollection" /> 인터페이스를 확인합니다.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the sync root.">동기화 루트를 가져옵니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable array.">변경할 수 없는 배열에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that iterates through the immutable array.">변경할 수 없는 배열에서 반복되는 열거자입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성이 <see langword="true" />를 반환합니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="value" vsli:raw="The value to add to the array.">배열에 추가할 값입니다.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">모든 경우에 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">모든 경우에 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="value" vsli:raw="The value to check for.">확인할 값입니다.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Gets the value at the specified index.">지정한 인덱스의 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The value to return the index of.">인덱스를 반환할 값입니다.</param>
      <returns vsli:raw="The value of the element at the specified index.">지정된 인덱스에 있는 요소의 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="index" vsli:raw="Index that indicates where to insert the item.">항목을 삽입할 위치를 나타내는 인덱스입니다.</param>
      <param name="value" vsli:raw="The value to insert.">삽입할 값입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">모든 경우에 throw됩니다.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether this instance is fixed size.">이 인스턴스가 고정된 크기인지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 인스턴스가 고정 크기 이면를 <see langword="true" /> 합니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">이 인스턴스가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 인스턴스가 읽기 전용 이면 <see langword="true" />이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">지정된 인덱스에 있는 <see cref="T:System.Object" />를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index.">인덱스입니다.</param>
      <returns vsli:raw="The object at the specified index.">지정된 인덱스의 개체입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">setter에서 항상 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성이 true를 반환하는 경우 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="value" vsli:raw="The value to remove from the array.">배열에서 제거할 값입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">모든 경우에 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="index" vsli:raw="The index of the item to remove.">제거할 항목의 인덱스입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">모든 경우에 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">지정된 항목이 끝에 추가된 원래 배열의 복사본을 반환합니다.</summary>
      <param name="value" vsli:raw="The value to add to the end of the array.">배열의 끝에 추가할 값입니다.</param>
      <returns vsli:raw="A new array with the specified item added to the end.">지정된 항목이 끝에 추가된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">지정된 요소가 배열의 끝에 추가된 원래 배열의 복사본을 반환합니다.</summary>
      <param name="items" vsli:raw="The elements to add to the end of the array.">배열의 끝에 추가할 요소입니다.</param>
      <returns vsli:raw="A new array with the elements added to the end.">요소가 끝에 추가된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">모든 요소가 제거된 배열을 반환합니다.</summary>
      <returns vsli:raw="An array with all the elements removed.">모든 요소가 제거된 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">지정된 위치에 지정된 값이 삽입된 새 배열을 반환합니다.</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">새 항목을 추가해야 하는 배열의 0부터 시작하는 인덱스입니다.</param>
      <param name="element" vsli:raw="The item to insert at the start of the array.">배열의 시작 부분에 삽입할 항목입니다.</param>
      <returns vsli:raw="A new array with the specified value inserted.">지정된 값이 삽입된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">지정된 인덱스에 지정된 값을 삽입합니다.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">값을 삽입할 인덱스입니다.</param>
      <param name="items" vsli:raw="The elements to insert.">삽입할 요소입니다.</param>
      <returns vsli:raw="A new array with the specified values inserted.">지정된 값이 삽입된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array; if no match is found, the current array is returned.">첫 번째로 나타나는 지정된 요소가 제거된 배열을 반환합니다. 일치하는 항목이 없는 경우 현재 배열이 반환됩니다.</summary>
      <param name="value" vsli:raw="The value to remove from the array.">배열에서 제거할 값입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="A new array with the value removed.">값이 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">지정된 조건을 충족하는 모든 항목을 배열에서 제거합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">제거할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">지정된 조건을 충족하는 항목이 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">지정된 위치의 요소가 제거된 배열을 반환합니다.</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">반환된 배열에서 제거할 요소의 0부터 시작하는 인덱스입니다.</param>
      <returns vsli:raw="A new array with the specified item removed.">지정된 항목이 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">이 배열에서 지정된 항목을 제거합니다.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">이 목록에 일치하는 항목이 있는 경우 제거할 항목입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="A new array with the elements removed.">요소가 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">지정된 위치의 요소가 제거된 배열을 반환합니다.</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">배열에서 제거할 시작 요소의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements to remove from the array.">배열에서 제거할 요소 수입니다.</param>
      <returns vsli:raw="The new array with the specified elements removed.">지정된 요소가 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">배열에서 지정된 값과 같은 첫 번째 요소를 찾아 해당 값을 지정된 새 값으로 바꿉니다.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">배열에서 찾아서 바꿀 값입니다.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">
        <c>oldvalue</c>를 바꿀 값입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">값을 비교하는 데 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">
        <paramref name="newValue" />가 포함된 새 배열입니다. 이는 새 값과 이전 값이 동일한 경우에도 마찬가지입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" />가 배열에 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">지정된 인덱스에 있는 항목을 지정된 항목으로 바꿉니다.</summary>
      <param name="index" vsli:raw="The index of the item to replace.">바꿀 항목의 인덱스입니다.</param>
      <param name="value" vsli:raw="The value to add to the list.">목록에 추가할 값입니다.</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">지정된 인덱스에 있는 <paramref name="item" />을 포함하는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary vsli:raw="Determines whether the current collection element precedes, occurs in the same position as, or follows another element in the sort order.">정렬 순서에서 현재 컬렉션 요소의 위치가 다른 요소보다 앞인지, 뒤인지 또는 동일한지를 확인합니다.</summary>
      <param name="other" vsli:raw="The element to compare with the current instance.">현재 인스턴스와 비교할 요소입니다.</param>
      <param name="comparer" vsli:raw="The object used to compare members of the current array with the corresponding members of other array.">현재 배열의 구성원을 다른 배열의 해당 구성원과 비교하는 데 사용되는 개체입니다.</param>
      <returns vsli:raw="An integer that indicates whether the current element precedes, is in the same position or follows the other element.">현재 요소가 다른 요소 앞에 있는지, 같은 위치에 있는지 또는 뒤에 있는지를 나타내는 정수입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The arrays are not the same length.">배열은 길이가 동일하지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary vsli:raw="Determines whether this array is structurally equal to the specified array.">이 배열이 지정된 배열과 구조적으로 동일한지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The array to compare with the current instance.">현재 인스턴스와 비교할 배열입니다.</param>
      <param name="comparer" vsli:raw="An object that determines whether the current instance and other are structurally equal.">현재 인스턴스와 다른 인스턴스가 구조적으로 동일한지 여부를 확인하는 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are structurally equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">두 배열이 구조적으로 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary vsli:raw="Returns a hash code for the current instance.">현재 인스턴스의 해시 코드를 반환합니다.</summary>
      <param name="comparer" vsli:raw="An object that computes the hash code of the current object.">현재 개체의 해시 코드를 계산하는 개체입니다.</param>
      <returns vsli:raw="The hash code for the current instance.">현재 인스턴스에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary vsli:raw="Creates a mutable array that has the same contents as this array and can be efficiently mutated across multiple operations using standard mutable interfaces.">변경 가능한 표준 인터페이스를 사용하여 여러 작업 간에 효율적으로 변경할 수 있으며 이 배열과 내용이 동일한 변경 가능한 해시 집합을 만듭니다.</summary>
      <returns vsli:raw="The new builder with the same contents as this array.">이 배열과 내용이 동일한 새 작성기입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">
        <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" /> 클래스의 인스턴스에 대한 초기화 메서드 집합을 제공합니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Determines whether the specified immutable dictionary contains the specified key/value pair.">변경할 수 없는 지정된 사전에 지정된 키/값 쌍이 들어 있는지 여부를 확인합니다.</summary>
      <param name="map" vsli:raw="The immutable dictionary to search.">검색할 변경할 수 없는 사전입니다.</param>
      <param name="key" vsli:raw="The key to locate in the immutable dictionary.">변경할 수 없는 사전에서 찾을 키입니다.</param>
      <param name="value" vsli:raw="The value to locate on the specified key, if the key is found.">키가 있는 경우 지정된 키에서 찾을 값입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the immutable dictionary.">변경할 수 없는 사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the immutable dictionary.">변경할 수 없는 사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this map contains the specified key/value pair; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 맵에 지정된 키/값 쌍이 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable dictionary.">변경할 수 없는 빈 사전을 만듭니다.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">변경할 수 없는 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key comparer.">지정된 키 비교자를 사용하는 변경할 수 없는 빈 사전을 만듭니다.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">사전의 키와 동일한지 확인하는 데 사용할 구현입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">변경할 수 없는 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key and value comparers.">지정된 키 및 값 비교자를 사용하는 변경할 수 없는 빈 사전을 만듭니다.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">사전의 키와 동일한지 확인하는 데 사용할 구현입니다.</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">사전의 값과 동일한지 확인하는 데 사용할 구현입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">변경할 수 없는 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable dictionary builder.">변경할 수 없는 새 사전 작성기를 만듭니다.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="The new builder.">새 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">변경할 수 없는 새 사전 작성기를 만듭니다.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">키 비교자입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="The new builder.">새 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">변경할 수 없는 새 사전 작성기를 만듭니다.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">키 비교자입니다.</param>
      <param name="valueComparer" vsli:raw="The value comparer.">값 비교자입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="The new builder.">새 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 사전을 만듭니다.</summary>
      <param name="items" vsli:raw="The items used to populate the dictionary before it's immutable.">변경할 수 없는 상태가 되기 전에 사전을 채우는 데 사용할 항목입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">지정된 항목을 포함하고 지정된 키 비교자를 사용하는 변경할 수 없는 새 사전을 만듭니다.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">키가 같은지 비교하는 데 사용할 비교자 구현입니다.</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">변경할 수 없는 상태가 되기 전에 사전에 추가할 항목입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">지정된 항목을 포함하고 지정된 비교자를 사용하는 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">지정된 항목을 포함하고 지정된 키 비교자를 사용하는 변경할 수 없는 새 사전을 만듭니다.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">키가 같은지 비교하는 데 사용할 비교자 구현입니다.</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">값이 같은지 비교하는 데 사용할 비교자 구현입니다.</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">변경할 수 없는 상태가 되기 전에 사전에 추가할 항목입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">지정된 항목을 포함하고 지정된 비교자를 사용하는 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">일치하는 키가 사전에 있는 경우 지정된 키의 값을 가져옵니다.</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">값을 검색할 사전입니다.</param>
      <param name="key" vsli:raw="The key to search for.">검색할 키입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">값의 형식입니다.</typeparam>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">키의 값입니다. 일치하는 키가 없는 경우 <c>기본값(TValue)</c>입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">일치하는 키가 사전에 있는 경우 지정된 키의 값을 가져옵니다.</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">값을 검색할 사전입니다.</param>
      <param name="key" vsli:raw="The key to search for.">검색할 키입니다.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">일치하는 키가 사전에 없는 경우에 반환할 기본값입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">값의 형식입니다.</typeparam>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">키의 값입니다. 일치하는 키가 없는 경우 <paramref name="defaultValue" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Constructs an immutable dictionary from an existing collection of elements, applying a transformation function to the source keys.">원본 키에 변형 함수를 적용하여 기존 요소 컬렉션에서 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">변경할 수 없는 사전을 생성하는 데 사용되는 원본 컬렉션입니다.</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">변경할 수 없는 사전에 대한 키를 변환하는 데 사용되는 함수입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">원본 컬렉션에 있는 요소의 형식입니다.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">변경할 수 없는 결과 사전에 있는 키의 형식입니다.</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">
        <paramref name="source" />의 요소를 포함하고 <paramref name="keySelector" />를 적용하여 키를 변환한 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Constructs an immutable dictionary based on some transformation of a sequence.">시퀀스의 일부 변환에 따라 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">변경할 수 없는 사전을 생성하는 데 사용되는 원본 컬렉션입니다.</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">변경할 수 없는 사전에 대한 키를 변환하는 데 사용되는 함수입니다.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">사전에 사용할 키 비교자입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">원본 컬렉션에 있는 요소의 형식입니다.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">변경할 수 없는 결과 사전에 있는 키의 형식입니다.</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">
        <paramref name="source" />의 요소를 포함하고 <paramref name="keySelector" />를 적용하여 키를 변환한 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents.">키/값 쌍의 시퀀스를 열거하고 해당 시퀀스의 내용에 대한 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">열거할 키/값 쌍의 시퀀스입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">지정된 시퀀스의 키/값 쌍이 포함된 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">키/값 쌍의 시퀀스를 열거하고, 지정된 키 비교자를 사용하여 해당 시퀀스의 내용에 대한 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">열거할 키/값 쌍의 시퀀스입니다.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">변경할 수 없는 사전을 바인딩할 때 사용할 키 비교자입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">지정된 시퀀스의 키/값 쌍이 포함된 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key and value comparers.">키/값 쌍의 시퀀스를 열거하고, 지정된 키 및 값 비교자를 사용하여 해당 시퀀스의 내용에 대한 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">열거할 키/값 쌍의 시퀀스입니다.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">변경할 수 없는 사전을 바인딩할 때 사용할 키 비교자입니다.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">변경할 수 없는 사전에 사용할 값 비교자입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">지정된 시퀀스의 키/값 쌍이 포함된 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable dictionary from the current contents of the builder's dictionary.">작성기 사전의 현재 콘텐츠에서 변경할 수 없는 사전을 만듭니다.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable dictionary from.">변경할 수 없는 사전을 만들 작성기입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the current contents in the builder's dictionary.">작성기 사전의 현재 콘텐츠를 포함하는 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents.">시퀀스를 열거 및 변형하고 해당 시퀀스의 내용에 대한 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">사전을 생성하기 위해 열거할 시퀀스입니다.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">각 시퀀스 요소에서 사전에 대한 키를 생성하는 함수입니다.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">각 시퀀스 요소에서 사전에 대한 값을 생성하는 함수입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">결과 사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">결과 사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">지정된 시퀀스의 항목을 포함하는 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key comparer.">시퀀스를 열거 및 변형하고, 지정된 키 비교자를 사용하여 해당 시퀀스의 내용에 대한 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">사전을 생성하기 위해 열거할 시퀀스입니다.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">각 시퀀스 요소에서 사전에 대한 키를 생성하는 함수입니다.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">각 시퀀스 요소에서 사전에 대한 값을 생성하는 함수입니다.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">사전에 사용할 키 비교자입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">결과 사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">결과 사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">지정된 시퀀스의 항목을 포함하는 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key and value comparers.">시퀀스를 열거 및 변형하고, 지정된 키 및 값 비교자를 사용하여 해당 시퀀스의 내용에 대한 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">사전을 생성하기 위해 열거할 시퀀스입니다.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">각 시퀀스 요소에서 사전에 대한 키를 생성하는 함수입니다.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">각 시퀀스 요소에서 사전에 대한 값을 생성하는 함수입니다.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">사전에 사용할 키 비교자입니다.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">사전에 사용할 값 비교자입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">결과 사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">결과 사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">지정된 시퀀스의 항목을 포함하는 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable, unordered collection of keys and values.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">순서가 지정되지 않은 변경할 수 없는 키/값 컬렉션을 나타냅니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">사전에 있는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable dictionary.">지정한 키와 값을 가진 요소를 변경할 수 없는 사전에 추가합니다.</summary>
      <param name="key" vsli:raw="The key of the element to add.">추가할 요소의 키입니다.</param>
      <param name="value" vsli:raw="The value of the element to add.">추가할 요소의 값입니다.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">추가 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">지정된 키가 이미 사전에 있지만 값이 다릅니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the immutable dictionary.">지정한 키/값 쌍을 변경할 수 없는 사전에 추가합니다.</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">추가할 키/값 쌍입니다.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">추가 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">지정된 키 중 하나가 이미 사전에 있지만 값이 다릅니다.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary vsli:raw="Represents a hash map that mutates with little or no memory allocations and that can produce or build on immutable hash map instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">메모리 할당 없이 변경되고, 변경할 수 없는 해시 맵 인스턴스를 매우 효율적으로 생성하거나 빌드할 수 있는 해시 맵을 나타냅니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable dictionary.">지정한 키와 값을 가진 요소를 변경할 수 없는 사전에 추가합니다.</summary>
      <param name="key" vsli:raw="The key of the element to add.">추가할 요소의 키입니다.</param>
      <param name="value" vsli:raw="The value of the element to add.">추가할 요소의 값입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the dictionary.">같은 키를 가진 요소가 이미 사전에 있습니다.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">사전은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable dictionary.">변경할 수 없는 사전에 지정된 항목을 추가합니다.</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">사전에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">사전은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to this collection.">값의 시퀀스를 이 컬렉션에 추가합니다.</summary>
      <param name="items" vsli:raw="The items to add to this collection.">이 컬렉션에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable dictionary.">변경할 수 없는 사전에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">사전은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains a specific value.">변경할 수 없는 사전에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">사전에서 찾을 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 사전에 있으면 <paramref name="item" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified key.">변경할 수 없는 사전에 지정된 키를 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">사전에서 찾을 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">키를 가진 요소가 사전에 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" />가 null인 경우</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified value.">변경할 수 없는 사전에 지정된 값을 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The value to locate in the immutable dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">변경할 수 없는 사전에서 찾을 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">사전에 지정된 값을 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable dictionary.">변경할 수 없는 사전에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements contained in the immutable dictionary.">변경할 수 없는 사전에 포함된 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">변경할 수 없는 사전에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">일치하는 키가 사전에 있는 경우 지정된 키의 값을 가져옵니다.</summary>
      <param name="key" vsli:raw="The key to search for.">검색할 키입니다.</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">키의 값입니다. 일치하는 키가 없는 경우 <c>기본값(TValue)</c>입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">일치하는 키가 사전에 있는 경우 지정된 키의 값을 가져옵니다.</summary>
      <param name="key" vsli:raw="The key to search for.">검색할 키입니다.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">일치하는 키가 사전에 없는 경우에 반환할 기본값입니다.</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">키의 값입니다. 일치하는 키가 없는 경우 <paramref name="defaultValue" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the element with the specified key.">지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="key" vsli:raw="The element to get or set.">가져오거나 설정할 요소입니다.</param>
      <returns vsli:raw="The element that has the specified key.">지정된 키를 가진 요소입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is being retrieved, and &lt;paramref name=&quot;key&quot; /&gt; is not found.">속성을 검색중이며 <paramref name="key" />가 없습니다.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The property is being set, and the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">속성을 설정중이며 <see cref="T:System.Collections.Generic.IDictionary`2" />가 읽기 전용입니다.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">키 비교자를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The key comparer.">키 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a collection that contains the keys of the immutable dictionary.">변경할 수 없는 사전의 키가 들어 있는 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A collection that contains the keys of the object that implements the immutable dictionary.">변경할 수 없는 사전을 구현하는 개체의 키가 들어 있는 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">변경할 수 없는 사전에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">제거할 요소의 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the dictionary.">요소가 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 메서드는 <see langword="false" />가 사전에 없는 경우에도 <paramref name="key" />를 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" />가 null인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">사전은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable dictionary.">변경할 수 없는 사전에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">사전에서 제거할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns false if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">
        <see langword="true" />이 사전에서 제거되었으면 <paramref name="item" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <paramref name="item" />이 사전에 없는 경우에도 false를 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">사전은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable dictionary.">지정된 시퀀스에서 찾은 것과 일치하는 키를 가진 모든 항목을 변경할 수 없는 사전에서 제거합니다.</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">사전에서 제거할 항목의 키입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, starting at the specified array index.">지정한 배열 인덱스부터 사전의 요소를 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 형식의 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">사전에서 복사한 요소의 대상인 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 형식의 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">제공한 키와 값을 가진 요소를 사전 개체에 추가합니다.</summary>
      <param name="key" vsli:raw="The key of the element to add.">추가할 요소의 키입니다.</param>
      <param name="value" vsli:raw="The value of the element to add.">추가할 요소의 값입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">사전 개체에 지정된 키를 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="key" vsli:raw="The key to locate.">찾을 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">키를 가진 요소가 사전에 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">사전의 <see cref="T:System.Collections.IDictionaryEnumerator" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">사전의 <see cref="T:System.Collections.IDictionaryEnumerator" /> 개체입니다.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">
        <see cref="T:System.Collections.IDictionary" /> 개체의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> 개체의 크기가 고정 되어 있으면이 고, 그렇지 않으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="key" vsli:raw="The key.">키입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" />를 구현 하는 개체의 키를 포함 하는 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">지정된 키를 가진 요소를 사전에서 제거합니다.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">제거할 요소의 키입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값이 들어 있는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" />를 구현 하는 개체의 값을 포함 하는 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 열거자 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable dictionary based on the contents of this instance.">이 인스턴스의 내용을 기반으로 변경할 수 없는 사전을 만듭니다.</summary>
      <returns vsli:raw="An immutable dictionary.">변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">이 사전에 지정된 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">검색할 키입니다.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">사전에서 일치하는 키가 있으면 그대로이고, 일치하는 키가 없으면 <c>equalkey</c>입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 일치하는 항목이 있으면 <paramref name="equalKey" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Returns the value associated with the specified key.">지정된 키와 연결된 값을 가져옵니다.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">값을 검색할 키입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, returns the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값을 포함하고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식의 기본값을 반환합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">변경할 수 없는 사전을 구현하는 개체에 지정된 키를 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" />가 null인 경우</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">값 비교자를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The value comparer.">값 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable dictionary.">변경할 수 없는 사전의 값이 들어 있는 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">사전을 구현하는 개체의 값이 들어 있는 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">이 사전 인스턴스와 순서 및 키/값 비교 규칙이 동일한 변경할 수 없는 빈 사전을 검색합니다.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">순서 및 키/값 비교 규칙이 동일한 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable dictionary contains the specified key/value pair.">이 변경할 수 없는 사전에 지정된 키/값 쌍이 들어 있는지 여부를 확인합니다.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">찾을 키/값 쌍입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 키/값 쌍이 사전에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified key.">변경할 수 없는 사전에 지정된 키를 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="key" vsli:raw="The key to locate.">찾을 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">변경할 수 없는 사전에 지정된 키를 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified value.">변경할 수 없는 사전에 지정된 값을 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">찾을 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">사전에 지정된 값을 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable dictionary.">변경할 수 없는 사전에서 키/값 쌍 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">사전에 있는 키/값 쌍 수를 가져옵니다.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable dictionary.">변경할 수 없는 빈 사전을 가져옵니다.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable dictionary without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">메모리를 할당하지 않고 변경할 수 없는 사전의 내용을 열거합니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the dictionary at the current position of the enumerator.">사전에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator&quot; /&gt; class.">
        <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable dictionary.">열거자를 변경할 수 없는 사전의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the dictionary.">열거자가 다음 요소로 이동했으면 <see langword="true" />이고, 사전의 끝을 지났으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">열거자가 만들어진 후에 사전이 수정되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the dictionary.">사전의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">열거자가 만들어진 후에 사전이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">현재 요소를 가져옵니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">변경할 수 없는 사전에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">사전에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable dictionary is empty.">변경할 수 없는 사전의 이 인스턴스가 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 인스턴스가 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">지정된 키와 연결된 <paramref name="TValue" />를 가져옵니다.</summary>
      <param name="key" vsli:raw="The type of the key.">키의 형식입니다.</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">지정한 키와 연결된 값입니다. 결과가 없으면 작업에서 예외를 throw합니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable dictionary.">변경할 수 없는 사전에 대한 키 비교자를 가져옵니다.</summary>
      <returns vsli:raw="The key comparer.">키 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable dictionary.">변경할 수 없는 사전에서 키를 가져옵니다.</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">변경할 수 없는 사전의 키입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">변경할 수 없는 사전에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">제거할 요소의 키입니다.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">지정된 요소가 제거된 변경할 수 없는 새 사전입니다. 또는 사전에서 지정된 키를 찾을 수 없는 경우 이 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">변경할 수 없는 사전에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">제거할 요소의 키입니다.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">지정된 키가 제거된 변경할 수 없는 새 사전입니다. 또는 사전에서 지정된 키를 찾을 수 없는 경우 이 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">변경할 수 없는 사전에서 지정된 키와 값을 설정합니다. 키의 기존 값을 덮어쓸 수 있습니다.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">추가할 엔트리의 키입니다.</param>
      <param name="value" vsli:raw="The key value to set.">설정할 키 값입니다.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">지정된 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">변경할 수 없는 사전에서 지정된 키/값 쌍을 설정합니다. 키의 기존 값을 덮어쓸 수 있습니다.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">사전에서 설정할 키/값 쌍입니다. 사전에 키가 이미 있는 경우 이 메서드는 해당 키의 이전 값을 덮어씁니다.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">지정된 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The type of the key." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">특정 배열 인덱스부터 시작하여 사전의 요소를 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">사전에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the immutable dictionary object.">제공한 키와 값을 가진 요소를 변경할 수 없는 사전 개체에 추가합니다.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">추가할 요소의 키로 사용할 개체입니다.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">추가할 요소의 값으로 사용할 개체입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">이 인스턴스를 지웁니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">사전 개체는 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">변경할 수 없는 사전 개체에 지정된 키를 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">사전 개체에서 찾을 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">키를 가진 요소가 사전에 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">변경할 수 없는 사전 개체에 대한 <see cref="T:System.Collections.IDictionaryEnumerator" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">사전 개체에 대한 열거자 개체입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">
        <see cref="T:System.Collections.IDictionary" /> 개체의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> 개체의 크기가 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="key" vsli:raw="The key.">키입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />를 구현하는 개체의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">변경할 수 없는 사전 개체에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">제거할 요소의 키입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값이 들어 있는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />를 구현하는 개체의 값을 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 열거자 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added to the dictionary." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of the entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="The key-value pairs to set on the map. Any keys that conflict with existing keys will replace the previous values." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">변경 가능한 표준 인터페이스를 사용하여 여러 작업 간에 효율적으로 변경할 수 있으며 이 사전과 내용이 동일한 변경할 수 없는 사전을 만듭니다.</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">변경 가능한 표준 인터페이스를 사용하여 여러 작업 간에 효율적으로 변경할 수 있으며 이 사전과 내용이 동일한 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">이 사전에 지정된 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">검색할 키입니다.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">사전에서 일치하는 키가 있으면 그대로이고, 일치하는 키가 없으면 <c>equalkey</c>입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="equalKey" />에 대한 일치하는 항목이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">지정한 키와 연결된 값을 가져옵니다.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">값을 검색할 키입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값을 포함하고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식에 대한 기본값을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">사전을 구현하는 개체에 지정된 키를 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" />가 null입니다.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">값이 같은지 여부를 확인하는 데 사용되는 값 비교자를 가져옵니다.</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">값이 같은지 여부를 확인하는 데 사용되는 값 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable dictionary.">변경할 수 없는 사전에서 값을 가져옵니다.</summary>
      <returns vsli:raw="The values in the immutable dictionary.">변경할 수 없는 사전의 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key comparer.">지정된 키 비교자를 사용하는 변경할 수 없는 사전의 인스턴스를 가져옵니다.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">사용할 키 비교자입니다.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">지정된 비교자를 사용하는 변경할 수 없는 사전의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key and value comparers.">지정된 키 및 값 비교자를 사용하는 변경할 수 없는 사전의 인스턴스를 가져옵니다.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">사용할 키 비교자입니다.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">사용할 값 비교자입니다.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">지정된 비교자를 사용하는 변경할 수 없는 사전의 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">
        <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> 클래스의 인스턴스에 대한 초기화 메서드 집합을 제공합니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary vsli:raw="Creates an empty immutable hash set.">변경할 수 없는 빈 해시 집합을 만듭니다.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable hash set.">변경할 수 없는 해시 집합에 저장할 항목의 형식입니다.</typeparam>
      <returns vsli:raw="An empty immutable hash set.">변경할 수 없는 빈 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item.">지정된 항목이 포함된 변경할 수 없는 새 해시 집합을 만듭니다.</summary>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">해시 집합을 미리 채울 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">변경할 수 없는 해시 집합에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">지정된 항목이 포함된 변경할 수 없는 새 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified array of items.">지정된 항목 배열이 포함된 변경할 수 없는 새 해시 집합을 만듭니다.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">해시 집합을 미리 채우는 데 사용할 항목이 포함된 배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">변경할 수 없는 해시 집합에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable hash set that uses the specified equality comparer.">지정된 같음 비교자를 사용하는 변경할 수 없는 빈 해시 집합을 만듭니다.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">집합의 개체가 같은지 비교하는 데 사용할 개체입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">변경할 수 없는 해시 집합에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="An empty immutable hash set.">변경할 수 없는 빈 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item and uses the specified equality comparer for the set type.">지정된 항목을 포함하고 집합 형식에 지정된 같음 비교자를 사용하는 변경할 수 없는 새 해시 집합을 만듭니다.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">집합의 개체가 같은지 비교하는 데 사용할 개체입니다.</param>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">해시 집합을 미리 채울 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">변경할 수 없는 해시 집합에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">지정된 항목이 포함된 변경할 수 없는 새 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the items in the specified collection and uses the specified equality comparer for the set type.">지정된 컬렉션의 항목을 포함하고 집합 형식에 지정된 같음 비교자를 사용하는 변경할 수 없는 새 해시 집합을 만듭니다.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">집합의 개체가 같은지 비교하는 데 사용할 개체입니다.</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">해시 집합을 미리 채우는 데 사용할 항목이 포함된 배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable hash set.">변경할 수 없는 해시 집합에 저장된 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable hash set builder.">변경할 수 없는 새 해시 집합 작성기를 만듭니다.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">컬렉션에 의해 저장되는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The immutable hash set builder.">변경할 수 없는 해시 집합 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable hash set builder.">변경할 수 없는 새 해시 집합 작성기를 만듭니다.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">집합의 개체가 같은지 비교하는 데 사용할 개체입니다.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">컬렉션에 의해 저장되는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The new immutable hash set builder.">변경할 수 없는 새 해시 집합 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set prefilled with the specified items.">지정된 항목으로 미리 채워진 변경할 수 없는 새 해시 집합을 만듭니다.</summary>
      <param name="items" vsli:raw="The items to add to the hash set.">해시 집합에 추가할 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">컬렉션에 의해 저장되는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The new immutable hash set that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified items and uses the specified equality comparer for the set type.">지정된 항목을 포함하고 집합 형식에 지정된 같음 비교자를 사용하는 변경할 수 없는 새 해시 집합을 만듭니다.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">집합의 개체가 같은지 비교하는 데 사용할 개체입니다.</param>
      <param name="items" vsli:raw="The items add to the collection before immutability is applied.">불변성이 적용되기 전에 컬렉션에 추가할 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the collection.">컬렉션에 저장되는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The new immutable hash set.">변경할 수 없는 새 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable hash set of its contents.">시퀀스를 열거하고 해당 시퀀스의 내용에 대한 변경할 수 없는 해시 집합을 생성합니다.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">열거할 시퀀스입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">시퀀스의 요소 형식입니다.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence.">지정된 시퀀스의 항목을 포함하는 변경할 수 없는 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable hash set of its contents, and uses the specified equality comparer for the set type.">시퀀스를 열거하고, 해당 시퀀스의 내용에 대한 변경할 수 없는 해시 집합을 생성하며, 형식 집합에 지정된 같음 비교자를 사용합니다.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">열거할 시퀀스입니다.</param>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">집합의 개체가 같은지 비교하는 데 사용할 개체입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">시퀀스의 요소 형식입니다.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence and uses the specified equality comparer.">지정된 시퀀스의 항목을 포함하고 지정된 같음 비교자를 사용하는 변경할 수 없는 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable hash set from the current contents of the builder's set.">작성기 집합의 현재 콘텐츠에서 변경할 수 없는 해시 집합을 만듭니다.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable hash set from.">변경할 수 없는 해시 집합을 만들 작성기입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the hash set.">해시 집합에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the current contents in the builder's set.">작성기 집합의 현재 콘텐츠를 포함하는 변경할 수 없는 해시 집합입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary vsli:raw="Represents an immutable, unordered hash set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">변경할 수 없는 정렬되지 않은 해시 집합을 나타냅니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the hash set.">해시 집합에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to the hash set.">지정한 요소를 해시 집합에 추가합니다.</summary>
      <param name="item" vsli:raw="The element to add to the set.">집합에 추가할 요소입니다.</param>
      <returns vsli:raw="A hash set that contains the added value and any values previously held by the  &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; object.">추가된 값 및 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> 개체에서 이전에 보유한 모든 값을 포함하는 해시 집합입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary vsli:raw="Represents a hash set that mutates with little or no memory allocations and that can produce or build on immutable hash set instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">메모리 할당 없이 변경되고, 변경할 수 없는 해시 집합 인스턴스를 매우 효율적으로 생성하거나 빌드할 수 있는 해시 집합을 나타냅니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable hash set.">변경할 수 없는 해시 집합에 지정된 항목을 추가합니다.</summary>
      <param name="item" vsli:raw="The item to add.">추가할 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item did not already belong to the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목이 컬렉션에 이미 속해 있으면 <see langword="false" />이고, 그렇지 않으면 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable hash set.">변경할 수 없는 해시 집합에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The hash set is read-only.">해시 집합은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable hash set contains a specific value.">변경할 수 없는 해시 집합에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the hash set.">해시 집합에서 찾을 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the hash set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="item" />이 해시 집합에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable hash set.">변경할 수 없는 해시 집합에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements contained in the immutable hash set.">변경할 수 없는 해시 집합에 포함된 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current hash set.">현재 해시 집합에서 지정된 컬렉션의 모든 요소를 제거합니다.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">집합에서 제거할 항목의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable hash set.">변경할 수 없는 해시 집합에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">집합에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">지정된 컬렉션에도 있는 요소만 포함되도록 현재 집합을 수정합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">현재 집합이 지정된 컬렉션의 적절한(고급) 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 <paramref name="other" />의 적절한 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">현재 집합이 지정된 컬렉션의 적절한(고급) 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 <paramref name="other" />의 적절한 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">현재 집합이 지정된 컬렉션의 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 <paramref name="other" />의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">현재 집합이 지정된 컬렉션의 상위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 <paramref name="other" />의 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">키 비교자를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The key comparer.">키 비교자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">현재 집합이 지정된 컬렉션과 겹치는지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합과 <paramref name="other" />가 적어도 하나의 공통 요소를 공유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable hash set.">변경할 수 없는 해시 집합에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">집합에서 제거할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original set.">
        <paramref name="item" />이 집합에서 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <paramref name="item" />이 원래 집합에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">집합은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">현재 집합과 지정된 컬렉션에 같은 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 <paramref name="other" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하도록 현재 집합을 수정합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the hash set.">해시 집합에 항목을 추가합니다.</summary>
      <param name="item" vsli:raw="The object to add to the set.">집합에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">집합은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the hash set to an array, starting at a particular array index.">해시 집합의 요소를 특정 배열 인덱스에서 시작하여 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the hash set. The array must have zero-based indexing.">해시 집합에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable hash set based on the contents of this instance.">이 인스턴스의 내용을 기반으로 변경할 수 없는 해시 집합을 만듭니다.</summary>
      <returns vsli:raw="An immutable set.">변경할 수 없는 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">현재 집합과 지정된 컬렉션 둘 다에 있는 모든 요소를 포함하도록 현재 집합을 수정합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable hash set that has the same sorting and ordering semantics as this instance.">정렬 및 순서 의미 체계가 이 인스턴스와 동일한 변경할 수 없는 빈 해시 집합을 검색합니다.</summary>
      <returns vsli:raw="An empty hash set that has the same sorting and ordering semantics as this instance.">정렬 및 순서 의미 체계가 이 인스턴스와 동일한 변경할 수 없는 빈 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable hash set contains the specified element.">이 변경할 수 없는 해시 집합에 지정한 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable hash set.">변경할 수 없는 해시 집합에서 찾을 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable hash set.">변경할 수 없는 해시 집합의 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements in the hash set.">해시 집합에 있는 요소 수입니다.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary vsli:raw="Gets an immutable hash set for this type that uses the default &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">기본 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />를 사용하는 이 형식에 대한 변경할 수 없는 해시 집합을 가져옵니다.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable hash set without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">메모리를 할당하지 않고 변경할 수 없는 해시 집합의 내용을 열거합니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator&quot; /&gt; class.">
        <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable hash set.">열거자를 변경할 수 없는 해시 집합의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the hash set.">열거자가 다음 요소로 이동했으면 <see langword="true" />이고, 해시 집합의 끝을 지났으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">열거자가 생성된 후에 해시 집합이 수정됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the hash set.">해시 집합의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">열거자가 생성된 후에 해시 집합이 수정됩니다.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">현재 요소를 가져옵니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable hash set.">현재 변경할 수 없는 해시 집합에서 지정된 컬렉션의 요소를 제거합니다.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">이 집합에서 제거할 항목의 컬렉션입니다.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">항목이 제거된 새 집합입니다. 집합에 항목이 없는 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains elements that exist in both this set and the specified set.">이 집합과 지정된 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 해시 집합을 만듭니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">두 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the current immutable hash set is empty.">현재 변경할 수 없는 해시 집합이 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 인스턴스가 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) subset of a specified collection.">현재 변경할 수 없는 해시 집합이 지정된 컬렉션의 적절한(고급) 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 지정된 컬렉션의 적절한 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) superset of a specified collection.">현재 변경할 수 없는 해시 집합이 지정된 컬렉션의 적절한(고급) 상위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 지정된 컬렉션의 적절한 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a subset of a specified collection.">현재 변경할 수 없는 해시 집합이 지정된 컬렉션의 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 지정된 컬렉션의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a superset of a specified collection.">현재 변경할 수 없는 해시 집합이 지정된 컬렉션의 상위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 지정된 컬렉션의 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary vsli:raw="Gets the object that is used to obtain hash codes for the keys and to check the equality of values in the immutable hash set.">키의 해시 코드를 가져오고 변경할 수 없는 해시 집합의 값과 동일한지 확인하는 데 사용되는 개체를 가져옵니다.</summary>
      <returns vsli:raw="The comparer used to obtain hash codes for the keys and check equality.">키에 대 한 해시 코드를 가져오고 같은지 여부를 확인하는 데 사용되는 비교자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set overlaps with the specified collection.">현재 변경할 수 없는 해시 집합이 지정된 컬렉션과 겹치는지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합과 지정된 컬렉션이 하나 이상 공통 요소를 공유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable hash set.">이 변경할 수 없는 해시 집합에서 지정된 요소를 제거합니다.</summary>
      <param name="item" vsli:raw="The element to remove.">제거할 요소입니다.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">지정된 요소가 제거된 새 집합입니다. 집합에서 요소를 찾을 수 없는 경우 현재 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set and the specified collection contain the same elements.">현재 변경할 수 없는 해시 집합과 지정된 컬렉션에 같은 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">집합이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains only elements that are present either in the current set or in the specified collection, but not both.">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하는 변경할 수 없는 해시 집합을 만듭니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소를 포함하는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the set.">집합에 항목을 추가합니다.</summary>
      <param name="item" vsli:raw="The object to add to the set.">집합에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">집합은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from this set.">이 집합서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">집합은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">특정 인덱스에서 시작하여 집합의 요소를 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">집합에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 인터페이스를 확인합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">집합에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">집합에서 제거할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">요소가 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that iterates through the collection.">컬렉션을 반복하는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value that indicates whether the element was successfully added.">현재 집합에 요소를 추가하고 요소가 성공적으로 추가되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="item" vsli:raw="The element to add to the collection.">컬렉션에 추가할 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">요소가 집합에 추가되었으면 <see langword="true" />이고, 요소가 집합에 이미 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">현재 집합에서 지정된 컬렉션의 모든 요소를 제거합니다.</summary>
      <param name="other" vsli:raw="The collection of items to remove.">제거할 항목의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">지정된 컬렉션에도 있는 요소만 포함되도록 현재 집합을 수정합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current collection.">현재 컬렉션과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하도록 현재 집합을 수정합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or in the specified collection.">현재 집합 또는 지정된 컬렉션 중 하나에 있는 요소가 모두 포함되도록 현재 집합을 수정합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">특정 인덱스에서 시작하여 집합의 요소를 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">집합에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">
        <see cref="T:System.Collections.ICollection" /> 인터페이스를 확인합니다.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />을 참조하세요.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a set.">집합에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">집합에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">지정한 요소를 이 변경할 수 없는 집합에 추가합니다.</summary>
      <param name="item" vsli:raw="The element to add.">추가할 요소입니다.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">요소가 추가된 새 집합입니다. 해당 요소가 집합에 이미 있는 경우 이 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty set that has the same sorting and ordering semantics as this instance.">정렬 및 순서 의미 체계가 이 인스턴스와 동일한 변경할 수 없는 빈 집합을 검색합니다.</summary>
      <returns vsli:raw="An empty set that has the same sorting or ordering semantics as this instance.">정렬 또는 순서 의미 체계가 이 인스턴스와 동일한 빈 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current set.">현재 집합에서 지정된 컬렉션의 요소를 제거합니다.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">이 집합에서 제거할 항목의 컬렉션입니다.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">항목이 제거된 새 집합입니다. 집합에 항목이 없는 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">이 집합과 지정된 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 집합을 만듭니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">두 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">이 변경할 수 없는 집합에서 지정된 요소를 제거합니다.</summary>
      <param name="item" vsli:raw="The element to remove.">제거할 요소입니다.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">지정된 요소가 제거된 새 집합입니다. 집합에서 요소를 찾을 수 없는 경우 현재 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하는 변경할 수 없는 집합을 만듭니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소를 포함하는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 모든 요소를 포함하는 변경할 수 없는 새 집합을 만듭니다.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">요소를 추가할 컬렉션입니다.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">항목이 추가된 변경할 수 없는 새 집합입니다. 모든 항목이 집합에 이미 있던 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary vsli:raw="Creates an immutable hash set that has the same contents as this set and can be efficiently mutated across multiple operations by using standard mutable interfaces.">변경 가능한 표준 인터페이스를 사용하여 여러 작업 간에 효율적으로 변경할 수 있으며 이 집합과 내용이 동일한 변경할 수 없는 해시 집합을 만듭니다.</summary>
      <returns vsli:raw="A set with the same contents as this set that can be efficiently mutated across multiple operations by using standard mutable interfaces.">변경 가능한 표준 인터페이스를 사용하여 여러 작업 간에 효율적으로 변경할 수 있으며 이 집합과 내용이 동일한 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">집합에서 지정된 값을 검색하여 동일한 값을 찾은 경우 해당 값을 반환합니다.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">검색할 값입니다.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">집합에서 검색한 값입니다. 검색에서 일치하는 항목을 찾지 못한 경우 원래 값입니다.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">검색에 성공했는지 여부를 나타내는 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable hash set that contains all elements that are present in either the current set or in the specified collection.">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 모든 요소를 포함하는 변경할 수 없는 새 해시 집합을 만듭니다.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">요소를 추가할 컬렉션입니다.</param>
      <returns vsli:raw="A new immutable hash set with the items added; or the original set if all the items were already in the set.">항목이 추가된 변경할 수 없는 새 해시 집합입니다. 모든 항목이 집합에 이미 있던 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable hash set that uses the specified equality comparer for its search methods.">해당 검색 메서드에 지정된 같음 비교자를 사용하는 변경할 수 없는 해시 집합의 인스턴스를 가져옵니다.</summary>
      <param name="equalityComparer" vsli:raw="The equality comparer to use.">사용할 같음 비교자입니다.</param>
      <returns vsli:raw="An instance of this immutable hash set that uses the given comparer.">지정된 비교자를 사용하는 이 변경할 수 없는 해시 집합의 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary vsli:raw="Contains interlocked exchange mechanisms for immutable collections.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">변경할 수 없는 컬렉션에 대한 연동된 교환 메커니즘을 포함합니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">값을 추가하거나 기존 항목을 업데이트한 후 사전에서 값을 가져옵니다.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">지정된 키가 사전에 없는 경우 원자적으로 업데이트할 변수 또는 필드입니다.</param>
      <param name="key" vsli:raw="The key for the value to add or update.">추가하거나 업데이트할 값의 키입니다.</param>
      <param name="addValue" vsli:raw="The value to use if no previous value exists.">이전 값이 없는 경우에 사용할 값입니다.</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">키와 이전 값을 받고 사전을 업데이트할 새 값을 반환하는 함수입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">사전에 저장 된 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">사전에 의해 저장 되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="The added or updated value.">추가되거나 업데이트된 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">값을 추가하거나 기존 항목을 업데이트한 후 사전에서 값을 가져옵니다.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">지정된 키가 사전에 없는 경우 원자적으로 업데이트할 변수 또는 필드입니다.</param>
      <param name="key" vsli:raw="The key for the value to add or update.">추가하거나 업데이트할 값의 키입니다.</param>
      <param name="addValueFactory" vsli:raw="The function that receives the key and returns a new value to add to the dictionary when no value previously exists.">키를 받고 이전 값이 없는 경우 사전에 추가할 새 값을 반환하는 함수입니다.</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">키와 이전 값을 받고 사전을 업데이트할 새 값을 반환하는 함수입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">사전에 저장 된 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">사전에 의해 저장 되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="The added or updated value.">추가되거나 업데이트된 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary vsli:raw="Atomically enqueues an element to the end of a queue.">원자적으로 큐의 끝에 요소를 넣습니다.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">원자적으로 업데이트할 변수 또는 필드입니다.</param>
      <param name="value" vsli:raw="The value to enqueue.">큐에 넣을 값입니다.</param>
      <typeparam name="T" vsli:raw="The type of items contained in the collection.">컬렉션에 포함된 항목의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">사전에서 지정된 키의 값을 가져오거나, 키가 없는 경우 새 값을 사전에 추가합니다.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified key is not in the dictionary.">지정된 키가 사전에 없는 경우 원자적으로 업데이트할 변수 또는 필드입니다.</param>
      <param name="key" vsli:raw="The key for the value to get or add.">가져오거나 추가할 값의 키입니다.</param>
      <param name="value" vsli:raw="The value to add to the dictionary the key is not found.">키가 없는 경우 사전에 추가할 값입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">컬렉션에 포함된 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">컬렉션에 포함된 값의 형식입니다.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">지정된 키의 값 또는 <paramref name="valueFactory" />(키가 없는 경우)입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">사전에서 지정된 키의 값을 가져오거나, 키가 없는 경우 새 값을 사전에 추가합니다.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">지정된 키가 사전에 없는 경우 원자적으로 업데이트할 변수 또는 필드입니다.</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">검색하거나 추가할 값의 키입니다.</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found. This delegate will not be invoked more than once.">키가 없는 경우 사전에 삽입할 값을 가져오기 위해 실행할 함수입니다. 이 대리자는 두 번 이상 호출되지 않습니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">컬렉션에 포함된 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">컬렉션에 포함된 값의 형식입니다.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">지정된 키의 값 또는 <paramref name="valueFactory" />(키가 없는 경우)입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">사전에서 지정된 키의 값을 가져오거나, 키가 없는 경우 새 값을 사전에 추가합니다.</summary>
      <param name="location" vsli:raw="The variable or field to update if the specified is not in the dictionary.">지정된 키가 사전에 없는 경우 업데이트할 변수 또는 필드입니다.</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">검색하거나 추가할 값의 키입니다.</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found.">키가 없는 경우 사전에 삽입할 값을 가져오기 위해 실행할 함수입니다.</param>
      <param name="factoryArgument" vsli:raw="The argument to pass to the value factory.">값 팩터리에 전달할 인수입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">컬렉션에 포함된 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">컬렉션에 포함된 값의 형식입니다.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of the argument supplied to the value factory.">값 팩터리에 제공 된 인수의 형식입니다.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">지정된 키의 값 또는 <paramref name="valueFactory" />(키가 없는 경우)입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.">변경할 수 없는 두 배열이 같은지 비교하여 같으면 배열 중 하나를 바꿉니다.</summary>
      <param name="location" vsli:raw="The destination, whose value is compared with &lt;paramref name=&quot;comparand&quot; /&gt; and possibly replaced.">
        <paramref name="comparand" />와 비교하여 바뀔 수 있는 값을 가진 대상입니다.</param>
      <param name="value" vsli:raw="The value that replaces the destination value if the comparison results in equality.">비교 결과가 같은 경우 대상 값을 바꿀 값입니다.</param>
      <param name="comparand" vsli:raw="The value that is compared to the value at &lt;paramref name=&quot;location&quot; /&gt;.">
        <paramref name="location" />의 값과 비교할 값입니다.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">배열에 의해 저장되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The original value in &lt;paramref name=&quot;location&quot; /&gt;.">
        <paramref name="location" />의 원래 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array and returns a reference to the original array, as an atomic operation.">원자 단위 연산으로 배열을 지정된 배열로 설정하고 참조를 원래 배열로 반환합니다.</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">지정된 값으로 설정할 배열입니다.</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set.">
        <paramref name="location" /> 매개 변수의 설정 값입니다.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">배열에 의해 저장되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The original value of &lt;paramref name=&quot;location&quot; /&gt;.">
        <paramref name="location" />의 원래 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array if the array has not been initialized.">배열이 초기화되지 않은 경우 배열을 지정된 배열로 설정합니다.</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">지정된 값으로 설정할 배열입니다.</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set, if it's not initialized.">매개 변수가 초기화되지 않은 경우 <paramref name="location" /> 매개 변수의 설정 값입니다.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">배열에 의해 저장되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array was assigned the specified value;  otherwise, &lt;see langword=&quot;false&quot; /&gt;.">배열에 지정된 값이 할당되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary vsli:raw="Pushes a new element onto the stack.">새 요소를 스택에 푸시합니다.</summary>
      <param name="location" vsli:raw="The stack to update.">업데이트할 스택입니다.</param>
      <param name="value" vsli:raw="The value to push on the stack.">스택에 푸시할 값입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">스택에 있는 항목의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Adds the specified key and value to the dictionary if the key is not in the dictionary.">키가 사전에 없는 경우 지정된 키와 값을 사전에 추가합니다.</summary>
      <param name="location" vsli:raw="The dictionary to update with the specified key and value.">지정한 키와 값으로 업데이트할 사전입니다.</param>
      <param name="key" vsli:raw="The key to add, if is not already defined in the dictionary.">사전에 아직 정의되지 않은 경우 추가할 키입니다.</param>
      <param name="value" vsli:raw="The value to add.">추가할 값입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">컬렉션에 포함된 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">컬렉션에 포함된 값의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is not in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">키가 사전에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary vsli:raw="Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.">큐가 비어 있지 않은 경우 큐의 헤드에서 지정된 요소를 원자적으로 제거하고 반환합니다.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">원자적으로 업데이트할 변수 또는 필드입니다.</param>
      <param name="value" vsli:raw="Set to the value from the head of the queue, if the queue not empty.">큐가 비어 있지 않은 경우 큐의 헤드에 있는 값으로 설정합니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the queue.">큐에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the queue is not empty and the head element is removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">큐가 비어 있지 않고 헤드 요소가 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary vsli:raw="Removes an element from the top of the stack, if there is an element to remove.">스택의 맨 위에 제거할 요소가 있는 경우 해당 요소를 제거합니다.</summary>
      <param name="location" vsli:raw="The stack to update.">업데이트할 스택입니다.</param>
      <param name="value" vsli:raw="Receives the value removed from the stack, if the stack is not empty.">스택이 비어 있지 않은 경우 스택에서 제거된 값을 받습니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">스택에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element is removed from the stack; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">스택에서 요소가 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary vsli:raw="Removes the element with the specified key, if the key exists.">키가 있는 경우 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="location" vsli:raw="The dictionary to update.">업데이트할 사전입니다.</param>
      <param name="key" vsli:raw="The key to remove.">제거할 키입니다.</param>
      <param name="value" vsli:raw="Receives the value of the removed item, if the dictionary is not empty.">사전이 비어 있지 않은 경우 제거된 항목의 값을 받습니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">컬렉션에 포함된 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">컬렉션에 포함된 값의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">키를 찾아서 제거했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary vsli:raw="Sets the specified key to the specified value if the specified key already is set to a specific value.">지정된 키가 특정 값으로 이미 설정된 경우 지정된 키를 지정된 값으로 설정합니다.</summary>
      <param name="location" vsli:raw="The dictionary to update.">업데이트할 사전입니다.</param>
      <param name="key" vsli:raw="The key to update.">업데이트할 키입니다.</param>
      <param name="newValue" vsli:raw="The new value to set.">설정할 새 값입니다.</param>
      <param name="comparisonValue" vsli:raw="The current value for &lt;paramref name=&quot;key&quot; /&gt; in order for the update to succeed.">업데이트에 성공하기 위한 <paramref name="key" />의 현재 값입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">컬렉션에 포함된 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">컬렉션에 포함된 값의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; and &lt;paramref name=&quot;comparisonValue&quot; /&gt; are present in the dictionary and comparison was updated to &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 및 <paramref name="key" />가 사전에 있고 비교가 <paramref name="comparisonValue" />로 업데이트되었으면 <paramref name="newValue" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">지정된 변환 함수를 통해 낙관적 잠금 트랜잭션 의미 체계를 사용하여 준비된 값을 변경합니다.             변환은 낙관적 잠금 레이스에서 이기기 위해 필요한 만큼 여러 번 다시 시도됩니다.</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">여러 스레드에서 액세스할 수 있는 변경될 변수 또는 필드입니다.</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">값을 변경하는 함수입니다. 이 함수는 다른 스레드에서 레이스가 발생하는 경우 여러 번 실행할 수 있으므로 부작용이 없어야 합니다.</param>
      <typeparam name="T" vsli:raw="The type of data.">데이터의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">
        <see langword="true" /> 함수의 결과를 적용하여 해당 위치 값이 변경되면 <paramref name="transformer" />이고, <see langword="false" />의 마지막 호출이 기존 값을 반환하기 때문에 해당 위치 값이 동일하게 유지되면 <paramref name="transformer" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">지정된 변환 함수를 통해 낙관적 잠금 트랜잭션 의미 체계를 사용하여 준비된 값을 변경합니다.             변환은 낙관적 잠금 레이스에서 이기기 위해 필요한 만큼 여러 번 다시 시도됩니다.</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">여러 스레드에서 액세스할 수 있는 변경될 변수 또는 필드입니다.</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">값을 변경하는 함수입니다. 이 함수는 다른 스레드에서 레이스가 발생하는 경우 여러 번 실행할 수 있으므로 부작용이 없어야 합니다.</param>
      <param name="transformerArgument" vsli:raw="The argument to pass to &lt;paramref name=&quot;transformer&quot; /&gt;.">
        <paramref name="transformer" />에 전달할 인수입니다.</param>
      <typeparam name="T" vsli:raw="The type of data.">데이터의 형식입니다.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of argument passed to the &lt;paramref name=&quot;transformer&quot; /&gt;.">에 전달 된 인수 형식이 <paramref name="transformer" />합니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">
        <see langword="true" /> 함수의 결과를 적용하여 해당 위치 값이 변경되면 <paramref name="transformer" />이고, <see langword="false" />의 마지막 호출이 기존 값을 반환하기 때문에 해당 위치 값이 동일하게 유지되면 <paramref name="transformer" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">
        <see cref="T:System.Collections.Immutable.ImmutableList`1" /> 클래스의 인스턴스에 대한 초기화 메서드 집합을 제공합니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary vsli:raw="Creates an empty immutable list.">변경할 수 없는 빈 목록을 만듭니다.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the .">변경할 수 없는 목록에 저장할 항목의 형식입니다.</typeparam>
      <returns vsli:raw="An empty immutable list.">변경할 수 없는 빈 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable list that contains the specified item.">지정된 항목이 포함된 변경할 수 없는 새 목록을 만듭니다.</summary>
      <param name="item" vsli:raw="The item to prepopulate the list with.">목록을 미리 채울 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">변경할 수 없는 목록에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A new  that contains the specified item.">지정된 항목이 포함된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable list that contains the specified array of items.">지정된 항목 배열이 포함된 변경할 수 없는 새 목록을 만듭니다.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the list with.">목록을 미리 채우는 데 사용할 항목이 포함된 배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">변경할 수 없는 목록에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable list that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable list builder.">변경할 수 없는 새 목록 작성기를 만듭니다.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">컬렉션에 의해 저장되는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The immutable collection builder.">변경할 수 없는 컬렉션 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable list that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 목록을 만듭니다.</summary>
      <param name="items" vsli:raw="The items to add to the list.">목록에 추가할 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">변경할 수 없는 목록에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable list that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">지정된 개체를 검색하고, 목록에서 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="list" vsli:raw="The list to search.">검색할 목록입니다.</param>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">목록에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that extends from index to the last element, if found; otherwise, -1.">인덱스에서 마지막 요소까지 확장하는 목록의 요소 범위 내에서 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">지정된 개체를 검색하고, 목록에서 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="list" vsli:raw="The list to search.">검색할 목록입니다.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">목록에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from index to the last element, if found; otherwise, -1.">인덱스에서 마지막 요소까지 확장하는 변경할 수 없는 목록의 요소 범위 내에서 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">지정된 개체를 검색하고, 지정된 인덱스에서 마지막 요소로 확장하는 변경할 수 없는 목록의 요소 범위 내에서 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="list" vsli:raw="The list to search.">검색할 목록입니다.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">목록에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">인덱스에서 마지막 요소까지 확장하는 변경할 수 없는 목록의 요소 범위 내에서 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">지정된 개체를 검색하고, 지정된 인덱스에서 마지막 요소로 확장하는 변경할 수 없는 목록의 요소 범위 내에서 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="list" vsli:raw="The list to search.">검색할 목록입니다.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">검색할 섹션에 있는 요소 수입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">목록에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">인덱스에서 마지막 요소까지 확장하는 변경할 수 없는 목록의 요소 범위 내에서 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">지정된 개체를 검색하고 전체 변경할 수 없는 목록에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="list" vsli:raw="The list to search.">검색할 목록입니다.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">목록에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">전체 변경할 수 없는 목록 내에서 항목이 있으면 마지막으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">지정된 개체를 검색하고 전체 변경할 수 없는 목록에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="list" vsli:raw="The list to search.">검색할 목록입니다.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">목록에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">전체 변경할 수 없는 목록 내에서 항목이 있으면 마지막으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">지정된 개체를 검색하고, 첫 번째 요소에서 지정된 인덱스로 확장하는 변경할 수 없는 목록의 요소 범위 내에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="list" vsli:raw="The list to search.">검색할 목록입니다.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">목록에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">첫 번째 요소에서 인덱스로 확장되는 변경할 수 없는 목록의 요소 범위 내에서 항목이 있으면 마지막으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">지정된 개체를 검색하고, 첫 번째 요소에서 지정된 인덱스로 확장하는 변경할 수 없는 목록의 요소 범위 내에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="list" vsli:raw="The list to search.">검색할 목록입니다.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">검색할 섹션에 있는 요소 수입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">목록에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">첫 번째 요소에서 인덱스로 확장되는 변경할 수 없는 목록의 요소 범위 내에서 항목이 있으면 마지막으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Removes the specified value from this list.">이 목록에서 지정된 값을 제거합니다.</summary>
      <param name="list" vsli:raw="The list to search.">검색할 목록입니다.</param>
      <param name="value" vsli:raw="The value to remove.">제거할 값입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">목록에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable list with the element removed, or this list if the element is not in this list.">요소가 제거된 변경할 수 없는 새 목록입니다. 요소가 이 목록에 없는 경우 이 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Removes the specified values from this list.">이 목록에서 지정된 값을 제거합니다.</summary>
      <param name="list" vsli:raw="The list to search.">검색할 목록입니다.</param>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">이 목록에 일치하는 항목이 있는 경우 제거할 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">목록에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable list with the elements removed.">요소가 제거된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary vsli:raw="Replaces the first equal element in the list with the specified element.">목록에서 동일한 첫 번째 요소를 지정된 요소로 바꿉니다.</summary>
      <param name="list" vsli:raw="The list to search.">검색할 목록입니다.</param>
      <param name="oldValue" vsli:raw="The element to replace.">바꿀 요소입니다.</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">이전 요소와 바꿀 요소입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">목록에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The new list -- even if the value being replaced is equal to the new value for that position.">새 목록입니다. 이는 바꾸려는 값이 해당 위치의 새 값과 동일한 경우에도 마찬가지입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">이전 값이 목록에 없는 경우 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable list of its contents.">시퀀스를 열거하고 해당 시퀀스의 내용에 대한 변경할 수 없는 목록을 생성합니다.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">열거할 시퀀스입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">시퀀스의 요소 형식입니다.</typeparam>
      <returns vsli:raw="An immutable list that contains the items in the specified sequence.">지정된 시퀀스의 항목을 포함하는 변경할 수 없는 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary vsli:raw="Creates an immutable list from the current contents of the builder's collection.">작성기 컬렉션의 현재 콘텐츠에서 변경할 수 없는 목록을 만듭니다.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable list from.">변경할 수 없는 목록을 만들 작성기입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the list.">목록에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable list that contains the current contents in the builder's collection.">작성기 컬렉션의 현재 콘텐츠를 포함하는 변경할 수 없는 목록입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary vsli:raw="Represents an immutable list, which is a strongly typed list of objects that can be accessed by index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">인덱스로 액세스할 수 있는 강력한 형식의 개체 목록인 변경할 수 없는 목록을 나타냅니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">목록에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary vsli:raw="Adds the specified object to the end of the immutable list.">변경할 수 없는 목록의 끝에 지정된 개체를 추가합니다.</summary>
      <param name="value" vsli:raw="The object to add.">추가할 개체입니다.</param>
      <returns vsli:raw="A new immutable list with the object added.">개체가 추가된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the elements of the specified collection to the end of the immutable list.">지정된 컬렉션의 요소를 변경할 수 없는 목록의 끝에 추가합니다.</summary>
      <param name="items" vsli:raw="The collection whose elements will be added to the end of the list.">요소를 목록의 끝에 추가할 컬렉션입니다.</param>
      <returns vsli:raw="A new immutable list with the elements added.">요소가 추가된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element.">기본 비교자를 사용하여 정렬된 전체 목록에서 요소를 검색하고 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">항목이 있으면 정렬된 목록에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 항목보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.ICollection.Count" />의 비트 보수입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer cannot find a comparer implementation of the for type T.">기본 비교자는 T 형식의 비교자 구현을 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire sorted list for an element using the specified comparer and returns the zero-based index of the element.">지정된 비교자를 사용하여 정렬된 전체 목록에서 요소를 검색하고 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements or null to use the default comparer.">요소를 비교할 때 사용할 비교자 구현이거나, 기본 비교자를 사용하려면 null입니다.</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">항목이 있으면 정렬된 목록에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 항목보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.ICollection.Count" />의 비트 보수입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="comparer is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">비교자는 <see langword="null" />이며 기본 비교자는 T 형식의 비교자 구현을 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches a range of elements in the sorted list for an element using the specified comparer and returns the zero-based index of the element.">지정된 비교자를 사용하여 정렬된 목록의 요소 범위에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">검색할 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The length of the range to search.">검색할 범위의 길이입니다.</param>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">요소를 비교할 때 사용할 비교자 구현이거나, 기본 비교자를 사용하려면 <see langword="null" />입니다.</param>
      <returns vsli:raw="The zero-based index of item in the sorted list, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;paramref name=&quot;count&quot; /&gt;.">항목이 있으면 정렬된 목록에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 항목보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <paramref name="count" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="index is less than 0 or &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">인덱스가 0보다 작거나 <paramref name="count" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="index and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the list.">인덱스 및 <paramref name="count" />가 목록에서 올바른 범위를 나타내지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">
        <paramref name="comparer" />는 <see langword="null" />이며 기본 비교자는 T 형식의 비교자 구현을 찾을 수 없습니다.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary vsli:raw="Represents a list that mutates with little or no memory allocations and that can produce or build on immutable list instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">메모리 할당 없이 변경되고, 변경할 수 없는 목록 인스턴스를 매우 효율적으로 생성하거나 빌드할 수 있는 목록을 나타냅니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an item to the immutable list.">변경할 수 없는 목록에 항목을 추가합니다.</summary>
      <param name="item" vsli:raw="The item to add to the list.">목록에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a series of elements to the end of this list.">이 목록의 끝에 일련의 요소를 추가합니다.</summary>
      <param name="items" vsli:raw="The elements to add to the end of the list.">목록의 끝에 추가할 요소입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the default comparer and returns the zero-based index of the element.">기본 비교자를 사용하여 전체 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />에서 요소를 검색하고 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">항목이 있으면 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 <paramref name="item" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 T의 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">지정된 비교자를 사용하여 정렬된 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />에서 요소를 검색하고 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">찾을 개체입니다. 참조 형식의 경우 이 값은 null일 수 있습니다.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">요소를 비교할 때 사용할 구현이거나, 기본 비교자의 경우 <see langword="null" />입니다.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">항목이 있으면 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 <paramref name="item" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" />가 <see langword="null" />이고 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 T의 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the specified range of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">지정된 비교자를 사용하여 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />의 지정된 범위에서 요소를 검색하고 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">검색할 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The length of the range to search.">검색할 범위의 길이입니다.</param>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">찾을 개체입니다. 참조 형식의 경우 이 값은 null일 수 있습니다.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">요소를 비교할 때 사용할 구현이거나, 기본 비교자의 경우 <see langword="null" />입니다.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">항목이 있으면 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 <paramref name="item" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" />가 0보다 작습니다.
또는
<paramref name="count" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />의 올바른 범위를 나타내지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" />가 <see langword="null" />이고 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 T의 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable list.">변경할 수 없는 목록에서 모든 항목을 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">변경할 수 없는 목록에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the list.">목록에서 찾을 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">목록에서 항목을 찾은 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Creates a new immutable list from the list represented by this builder by using the converter function.">변환기 함수를 사용하여 이 작성기가 나타내는 목록에서 변경할 수 없는 새 목록을 만듭니다.</summary>
      <param name="converter" vsli:raw="The converter function.">변환기 함수입니다.</param>
      <typeparam name="TOutput" vsli:raw="The type of the output of the delegate converter function.">대리자 변환기 함수의 출력 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable list from the list represented by this builder.">이 작성기가 나타내는 목록에서 만든 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">대상 배열의 처음부터 시작하여 변경할 수 없는 전체 목록을 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">변경할 수 없는 목록에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">대상 배열의 지정된 인덱스에서 시작하여 변경할 수 없는 전체 목록을 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">변경할 수 없는 목록에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">배열에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">대상 배열의 지정된 인덱스에서 시작하여 변경할 수 없는 전체 목록을 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">변경할 수 없는 원본 목록에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">변경할 수 없는 목록에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</param>
      <param name="count" vsli:raw="The number of elements to copy.">복사할 요소의 수입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable list.">이 변경할 수 없는 목록에 있는 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements in this list.">이 목록에 있는 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">지정된 조건자에 정의된 조건과 일치하는 요소가 변경할 수 없는 목록에 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 조건자에 정의된 조건과 일치하는 요소가 변경할 수 없는 목록에 하나 이상 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 전체 변경할 수 없는 목록에서 첫 번째로 나타나는 요소를 반환합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째 요소이고, 그렇지 않으면 <paramref name="T" /> 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">지정한 조건자에 정의된 조건과 일치하는 모든 요소를 검색합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="An immutable list containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 해당 요소를 모두 포함하는 변경할 수 없는 목록이고, 그렇지 않으면 변경할 수 없는 빈 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 지정된 인덱스부터 시작하여 지정된 수의 요소를 포함하는 변경할 수 없는 목록의 요소 범위에서 일치하는 요소 중 첫 번째로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째로 나타나는 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 지정된 인덱스에서 마지막 요소로 확장되는 변경할 수 없는 목록의 요소 범위 내에서 일치하는 요소 중 첫 번째 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째로 나타나는 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 전체 변경할 수 없는 목록에서 일치하는 요소 중 첫 번째로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째로 나타나는 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 전체 변경할 수 없는 목록에서 마지막으로 나타나는 요소를 반환합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막 요소이고, 그렇지 않으면 <paramref name="T" /> 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 지정된 수의 요소가 들어 있고 지정된 인덱스에서 끝나는 변경할 수 없는 목록의 요소 범위에서 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 그 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 첫 번째 요소에서 지정된 인덱스로 확장하는 변경할 수 없는 목록의 요소 범위에서 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 그 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 전체 변경할 수 없는 목록에서 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 그 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the list.">목록의 각 요소에 대해 지정된 작업을 수행합니다.</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the list.">목록의 각 요소에 대해 수행할 대리자입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">목록에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">변경할 수 없는 원본 목록에 있는 일련의 요소에 대한 부분 복사본을 만듭니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">범위가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements in the range.">범위의 요소 수입니다.</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">변경할 수 없는 원본 목록에 있는 일련의 요소에 대한 부분 복사본입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list.">지정된 개체를 검색하고, 변경할 수 없는 목록의 요소 범위 내에서 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list, if found; otherwise, -1.">변경할 수 없는 목록의 요소 범위 내에서 <paramref name="item" />이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">지정된 개체를 검색하고, 지정된 인덱스에서 마지막 요소로 확장하는 변경할 수 없는 목록의 요소 범위 내에서 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from &lt;paramref name=&quot;index&quot; /&gt; to the last element, if found; otherwise, -1.">
        <paramref name="index" />에서 마지막 요소로 확장되는 변경할 수 없는 목록의 요소 범위 내에 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">지정된 개체를 검색하고, 지정된 인덱스에서 시작하여 지정된 수의 요소를 포함하는 변경할 수 없는 목록의 요소 범위 내에서 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">검색할 섹션에 있는 요소 수입니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1.">
        <paramref name="index" />에서 시작하여 <paramref name="count" />개의 요소를 포함하는 변경할 수 없는 목록의 요소 범위 내에 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; that starts at the specified index and contains the specified number of elements.">지정된 개체를 검색하고, 지정된 인덱스에서 시작하여 지정된 수의 요소를 포함하는 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />의 요소 범위에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count" vsli:raw="The number of elements to search.">검색할 요소의 수입니다.</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">요소가 같은지 비교하는 데 사용할 값 비교자입니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">
        <paramref name="index" />에서 시작하여 <paramref name="count" />개의 요소를 포함하는 변경할 수 없는 목록의 요소 범위 내에 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item to the immutable list at the specified index.">변경할 수 없는 목록의 지정된 인덱스에 항목을 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">
        <paramref name="item" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="item" vsli:raw="The object to insert into the immutable list.">변경할 수 없는 목록에 삽입할 개체입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">변경할 수 없는 목록의 지정된 인덱스에 컬렉션의 요소를 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">새 요소가 삽입되어야 하는 0부터 시작하는 인덱스입니다.</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted into the immutable list. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are null, if type &lt;c&gt;T&lt;/c&gt; is a reference type.">변경할 수 없는 목록에 요소를 삽입해야 하는 컬렉션입니다. 컬렉션 자체가 <see langword="null" />일 수는 없지만 <c>T</c> 형식이 참조 형식인 경우 null인 요소를 포함할 수 있습니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value for a given index in the list.">목록에서 지정된 인덱스의 값을 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">가져오거나 설정할 항목의 인덱스입니다.</param>
      <returns vsli:raw="The value at the specified index.">지정한 인덱스의 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the value for a given &lt;paramref name=&quot;index&quot; /&gt; into the list.">지정된 <paramref name="index" />의 값에 대한 읽기 전용 참조를 목록으로 가져옵니다.</summary>
      <param name="index" vsli:raw="The index of the desired element.">원하는 요소의 인덱스입니다.</param>
      <returns vsli:raw="A read-only reference to the value at the specified &lt;paramref name=&quot;index&quot; /&gt;.">지정된 <paramref name="index" />에서 값에 대한 읽기 전용 참조입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">지정된 개체를 검색하고 전체 변경할 수 없는 목록에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire immutable list, if found; otherwise, -1.">전체 변경할 수 없는 목록에 <paramref name="item" />이 있으면 마지막으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">지정된 개체를 검색하고, 첫 번째 요소에서 지정된 인덱스로 확장하는 변경할 수 없는 목록의 요소 범위 내에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that extends from the first element to &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">첫 번째 요소에서 <paramref name="item" />로 확장하는 변경할 수 없는 목록의 요소 범위 내에서 <paramref name="index" />이 있으면 마지막으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">지정된 개체를 검색하며, 지정된 수의 요소를 포함하고 지정된 인덱스에서 끝나는 변경할 수 없는 목록의 요소 범위 내에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">검색할 섹션에 있는 요소 수입니다.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that contains &lt;paramref name=&quot;count&quot; /&gt; number of elements and ends at &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="item" />개의 요소를 포함하고 <paramref name="count" />에서 끝나는 변경할 수 없는 목록의 요소 범위 내에 <paramref name="index" />이 있으면 마지막으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">지정된 개체를 검색하며, 지정된 수의 요소를 포함하고 지정된 인덱스에서 끝나는 변경할 수 없는 목록의 요소 범위 내에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count" vsli:raw="The number of elements to search.">검색할 요소의 수입니다.</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">요소가 같은지 비교하는 데 사용할 값 비교자입니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">
        <paramref name="index" />에서 시작하여 <paramref name="count" />개의 요소를 포함하는 변경할 수 없는 목록의 요소 범위 내에 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">변경할 수 없는 목록에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="item" vsli:raw="The object to remove from the list.">목록에서 제거할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item is not found in the list.">항목이 목록에서 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 항목이 목록에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">지정된 조건자에 정의된 조건과 일치하는 요소를 모두 제거합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">제거할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The number of elements removed from the immutable list.">변경할 수 없는 목록에서 제거한 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">변경할 수 없는 목록의 지정한 인덱스에서 항목을 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove from the list.">목록에서 제거할 항목의 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">전체 변경할 수 없는 목록에서 요소의 순서를 반대로 바꿉니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">변경할 수 없는 목록의 지정된 범위에서 요소의 순서를 반대로 바꿉니다.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">순서를 반대로 바꿀 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">순서를 반대로 바꿀 범위의 요소 수입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the default comparer.">기본 비교자를 사용하여 전체 변경할 수 없는 목록의 요소를 정렬합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparer.">지정된 비교자를 사용하여 전체 변경할 수 없는 목록의 요소를 정렬합니다.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">요소를 비교할 때 사용할 구현이거나, 기본 비교자(<see langword="null" />)를 사용하려면 <see cref="P:System.Collections.Generic.Comparer`1.Default" />입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparison object.">지정된 비교 개체를 사용하여 전체 변경할 수 없는 목록의 요소를 정렬합니다.</summary>
      <param name="comparison" vsli:raw="The object to use when comparing elements.">요소를 비교할 때 사용할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in a range of elements in the immutable list  by using the specified comparer.">지정된 비교자를 사용하여 변경할 수 없는 목록의 요소 범위에 있는 요소를 정렬합니다.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">정렬할 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The length of the range to sort.">정렬할 범위의 길이입니다.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">요소를 비교할 때 사용할 구현이거나, 기본 비교자(<see langword="null" />)를 사용하려면 <see cref="P:System.Collections.Generic.Comparer`1.Default" />입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">이 인스턴스가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the list to an array, starting at a particular array index.">목록의 요소를 특정 배열 인덱스에서 시작하여 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the list. The array must have zero-based indexing.">목록에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the list.">목록에 항목을 추가합니다.</summary>
      <param name="value" vsli:raw="The object to add to the list.">목록에 추가할 개체입니다.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">새 요소가 삽입된 위치 또는 -1(항목이 컬렉션에 삽입되지 않았음을 나타냄)입니다.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the list.">목록에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the list contains a specific value.">목록에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">목록에서 찾을 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 목록에 있으면 <see cref="T:System.Object" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the list.">목록에서 특정 항목의 인덱스를 확인합니다.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">목록에서 찾을 개체입니다.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the list at the specified index.">지정한 인덱스의 목록에 항목을 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value" vsli:raw="The object to insert into the list.">목록에 삽입할 개체입니다.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">지정된 인덱스에 있는 <see cref="T:System.Object" />를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index.">인덱스입니다.</param>
      <returns vsli:raw="The object at the specified index.">지정 된 인덱스에 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the list.">목록에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">목록에서 제거할 개체입니다.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable list based on the contents of this instance.">이 인스턴스의 내용을 기반으로 변경할 수 없는 목록을 만듭니다.</summary>
      <returns vsli:raw="An immutable list.">변경할 수 없는 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">변경할 수 없는 목록의 모든 요소가 지정한 조건자에 정의된 조건과 일치하는지를 확인합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">요소에 대해 확인할 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">변경할 수 없는 목록의 모든 요소가 지정된 조건자에 정의된 조건과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 목록에 요소가 없으면 반환 값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable list.">변경할 수 없는 목록에서 모든 요소를 제거합니다.</summary>
      <returns vsli:raw="An empty list that retains the same sort or unordered semantics that this instance has.">이 인스턴스와 동일한 정렬 또는 순서가 지정되지 않은 의미 체계를 유지하는 빈 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable list contains the specified value.">변경할 수 없는 이 목록에 지정한 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The value to locate.">찾을 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">목록에 지정된 값이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Converts the elements in the current immutable list to another type, and returns a list containing the converted elements.">현재 변경할 수 없는 목록의 요소를 다른 형식으로 변환하고 변환된 요소를 포함하는 목록을 반환합니다.</summary>
      <param name="converter" vsli:raw="A delegate that converts each element from one type to another type.">각 요소를 한 형식에서 다른 형식으로 변환하는 대리자입니다.</param>
      <typeparam name="TOutput" vsli:raw="The type of the elements of the target array.">대상 배열 요소의 형식입니다.</typeparam>
      <returns vsli:raw="A list of the target type containing the converted elements from the current &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt;.">현재 <see cref="T:System.Collections.Immutable.ImmutableList`1" />에서 변환된 요소를 포함하는 대상 유형의 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">대상 배열의 처음부터 시작하여 변경할 수 없는 전체 목록을 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">변경할 수 없는 목록에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">대상 배열의 지정된 인덱스에서 시작하여 변경할 수 없는 전체 목록을 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">변경할 수 없는 목록에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a range of elements from the immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">대상 배열의 지정된 인덱스에서 시작하여 변경할 수 없는 목록에 있는 일련의 요소를 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">변경할 수 없는 원본 목록에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">변경할 수 없는 목록에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">배열에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</param>
      <param name="count" vsli:raw="The number of elements to copy.">복사할 요소의 수입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the list.">목록에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements in the list.">목록에 있는 요소의 수입니다.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary vsli:raw="Gets an empty immutable list.">기본 정렬 비교자를 사용하는 빈 집합을 가져옵니다.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">이진 트리의 내용을 열거합니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Enumerator&quot; /&gt; class.">
        <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances enumeration to the next element of the immutable list.">열거형을 변경할 수 없는 목록의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the list.">열거자가 다음 요소로 이동했으면 <see langword="true" />이고, 목록의 끝을 지났으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable list.">변경할 수 없는 목록의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">현재 요소입니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">지정된 조건자에 정의된 조건과 일치하는 요소가 변경할 수 없는 목록에 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 조건자에 정의된 조건과 일치하는 요소가 변경할 수 없는 목록에 하나 이상 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 전체 변경할 수 없는 목록에서 첫 번째로 나타나는 요소를 반환합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째 요소이고, 그렇지 않으면 <paramref name="T" /> 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">지정한 조건자에 정의된 조건과 일치하는 모든 요소를 검색합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="An immutable list that contains all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 해당 요소를 모두 포함하는 변경할 수 없는 목록이고, 그렇지 않으면 변경할 수 없는 빈 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 지정된 인덱스부터 시작하여 지정된 수의 요소를 포함하는 변경할 수 없는 목록의 요소 범위에서 일치하는 요소 중 첫 번째로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">일치 항목에 의해 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 처음으로 나타나는 요소의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 지정된 인덱스에서 마지막 요소로 확장되는 변경할 수 없는 목록의 요소 범위 내에서 일치하는 요소 중 첫 번째 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">일치 항목에 의해 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 처음으로 나타나는 요소의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 전체 변경할 수 없는 목록에서 일치하는 요소 중 첫 번째로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, -1.">일치 항목에 의해 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 처음으로 나타나는 요소의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 전체 변경할 수 없는 목록에서 마지막으로 나타나는 요소를 반환합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막 요소이고, 그렇지 않으면 <paramref name="T" /> 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 지정된 수의 요소가 들어 있고 지정된 인덱스에서 끝나는 변경할 수 없는 목록의 요소 범위에서 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 첫 번째 요소에서 지정된 인덱스로 확장하는 변경할 수 없는 목록의 요소 범위에서 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 전체 변경할 수 없는 목록에서 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the immutable list.">변경할 수 없는 목록의 각 요소에 대해 지정된 작업을 수행합니다.</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the immutable list.">변경할 수 없는 목록의 각 요소에 대해 수행할 대리자입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">변경할 수 없는 목록에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the immutable list.">변경할 수 없는 목록에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">변경할 수 없는 원본 목록에 있는 일련의 요소에 대한 부분 복사본을 만듭니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">범위가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements in the range.">범위의 요소 수입니다.</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">변경할 수 없는 원본 목록에 있는 일련의 요소에 대한 부분 복사본입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the entire immutable list.">지정된 개체를 검색하고 전체 변경할 수 없는 목록에서 처음으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="value" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;value&quot; /&gt; within the entire immutable list, if found; otherwise, ?1.">전체 변경할 수 없는 목록에 <paramref name="value" />이 있으면 처음으로 나타나는 개체의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the list that starts at the specified index and contains the specified number of elements.">지정된 개체를 검색하고, 지정된 인덱스에서 시작하여 지정된 수의 요소를 포함하는 목록의 요소 범위에서 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the list The value can be null for reference types.">목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that starts at index and contains count number of elements, if found; otherwise, -1.">인덱스에서 시작하여 요소 수를 포함하는 목록의 요소 범위 내에서 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified object into the immutable list at the specified index.">변경할 수 없는 목록의 지정된 인덱스에 지정된 개체를 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the object.">개체를 삽입할 0부터 시작하는 인덱스입니다.</param>
      <param name="item" vsli:raw="The object to insert.">삽입할 개체입니다.</param>
      <returns vsli:raw="The new immutable list after the object is inserted.">개체가 삽입된 이후의 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">변경할 수 없는 목록의 지정된 인덱스에 컬렉션의 요소를 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the elements.">요소를 삽입할 0부터 시작하는 인덱스입니다.</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted.">요소를 삽입해야 하는 컬렉션입니다.</param>
      <returns vsli:raw="The new immutable list after the elements are inserted.">요소가 삽입된 이후의 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this list is empty.">이 목록이 비어 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">목록이 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index of the list.">목록의 지정된 인덱스에서 요소를 가져옵니다.</summary>
      <param name="index" vsli:raw="The index of the element to retrieve.">검색할 요소의 인덱스입니다.</param>
      <returns vsli:raw="The element at the specified index.">지정한 인덱스의 요소입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="In a get operation, &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">가져오기 작업에서 <paramref name="index" />는 음수이거나 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />보다 작지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">지정된 <paramref name="index" />에 있는 집합 요소의 읽기 전용 참조를 가져옵니다.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">반환할 집합에서 요소의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">지정된 위치에 있는 요소에 대한 읽기 전용 참조입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">
        <paramref name="index" />가 음수이거나 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />보다 작지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the list that contains the specified number of elements and ends at the specified index.">지정된 개체를 검색하며, 지정된 수의 요소를 포함하고 지정된 인덱스에서 끝나는 목록의 요소 범위에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the list that contains count number of elements and ends at index, if found; otherwise, -1.">요소 수를 포함하고 인덱스에서 끝나는 목록의 요소 범위 내에서 항목이 있으면 마지막으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from this immutable list.">이 변경할 수 없는 목록에서 첫 번째로 나타나는 지정된 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The object to remove.">제거할 개체입니다.</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">개체가 제거된 새 목록입니다. 지정된 개체가 이 목록에 없는 경우 이 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of the object that matches the specified value from this immutable list.">이 변경할 수 없는 목록의 지정된 값과 일치하는 첫 번째로 나타나는 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">목록에서 제거할 요소의 값입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">개체가 제거된 새 목록입니다. 지정된 개체가 이 목록에 없는 경우 이 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">지정된 조건자에 정의된 조건과 일치하는 요소를 모두 제거합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">제거할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The new list with the elements removed.">요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index.">지정된 인덱스에 있는 요소를 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">제거할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="A new list with the element removed.">요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list.">이 변경할 수 없는 목록에서 요소 범위를 제거합니다.</summary>
      <param name="items" vsli:raw="The collection whose elements should be removed if matches are found in this list.">이 목록에 일치하는 항목이 있는 경우 해당 요소를 제거해야 하는 컬렉션입니다.</param>
      <returns vsli:raw="A new list with the elements removed.">요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified values from this list.">이 목록에서 지정된 값을 제거합니다.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">이 목록에 일치하는 항목이 있는 경우 제거할 항목입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="A new list with the elements removed.">요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements, starting from the specified index and containing the specified number of elements, from this immutable list.">지정된 인덱스에서 시작하여 지정된 개수의 요소를 포함하는 요소 범위를 이 변경할 수 없는 목록에서 제거합니다.</summary>
      <param name="index" vsli:raw="The starting index to begin removal.">제거를 시작할 시작 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements to remove.">제거할 요소의 수입니다.</param>
      <returns vsli:raw="A new list with the elements removed.">요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">변경할 수 없는 목록의 지정된 요소를 새 요소로 바꿉니다.</summary>
      <param name="oldValue" vsli:raw="The element to replace.">바꿀 요소입니다.</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">
        <paramref name="oldValue" />를 바꿀 요소입니다.</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element.">바뀐 요소가 있는 새 목록입니다. 이는 바뀐 요소가 이전 요소와 동일한 경우에도 마찬가지입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the immutable list.">
        <paramref name="oldValue" />가 변경할 수 없는 목록에 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">변경할 수 없는 목록의 지정된 요소를 새 요소로 바꿉니다.</summary>
      <param name="oldValue" vsli:raw="The element to replace in the list.">목록에서 바꿀 요소입니다.</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">
        <paramref name="oldValue" />를 바꿀 요소입니다.</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to check for equality.">같은지 확인하는 데 사용할 비교자입니다.</param>
      <returns vsli:raw="A new list with the object replaced, or this list if the specified object is not in this list.">개체가 바뀐 새 목록입니다. 지정된 개체가 이 목록에 없는 경우 이 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">전체 변경할 수 없는 목록에서 요소의 순서를 반대로 바꿉니다.</summary>
      <returns vsli:raw="The reversed list.">역순 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">변경할 수 없는 목록의 지정된 범위에서 요소의 순서를 반대로 바꿉니다.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">순서를 반대로 바꿀 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">순서를 반대로 바꿀 범위의 요소 수입니다.</param>
      <returns vsli:raw="The reversed list.">역순 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element at a given position in the immutable list with the specified element.">변경할 수 없는 목록에서 지정된 위치에 있는 요소를 지정된 요소로 바꿉니다.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">바꿀 요소의 목록 내 위치입니다.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">이전 요소와 바꿀 요소입니다.</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element at that position.">바뀐 요소가 있는 새 목록입니다. 이는 바뀐 요소가 해당 위치의 이전 요소와 동일한 경우에도 마찬가지입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the default comparer.">기본 비교자를 사용하여 전체 변경할 수 없는 목록의 요소를 정렬합니다.</summary>
      <returns vsli:raw="The sorted list.">정렬된 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">지정된 비교자를 사용하여 전체 변경할 수 없는 목록의 요소를 정렬합니다.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">요소를 비교할 때 사용할 구현이거나, 기본 비교자(<see langword="null" />)를 사용하려면 <see cref="P:System.Collections.Generic.Comparer`1.Default" />입니다.</param>
      <returns vsli:raw="The sorted list.">정렬된 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">지정된 비교자를 사용하여 전체 변경할 수 없는 목록의 요소를 정렬합니다.</summary>
      <param name="comparison" vsli:raw="The delegate to use when comparing elements.">요소를 비교할 때 사용할 대리자입니다.</param>
      <returns vsli:raw="The sorted list.">정렬된 목록입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts a range of elements in the immutable list using the specified comparer.">지정된 비교자를 사용하여 변경할 수 없는 목록의 요소 범위를 정렬합니다.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">정렬할 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The length of the range to sort.">정렬할 범위의 길이입니다.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">요소를 비교할 때 사용할 구현이거나, 기본 비교자(<see langword="null" />)를 사용하려면 <see cref="P:System.Collections.Generic.Comparer`1.Default" />입니다.</param>
      <returns vsli:raw="The sorted list.">정렬된 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable list.">변경할 수 없는 목록에 지정된 항목을 추가합니다.</summary>
      <param name="item" vsli:raw="The item to add.">추가할 항목입니다.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">변경할 수 없는 목록에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">변경할 수 없는 목록에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="item" vsli:raw="The object to remove.">제거할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original list.">
        <see langword="true" />가 목록에서 제거되었으면 <paramref name="item" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <see langword="false" />가 원래 목록에 없는 경우에도 <paramref name="item" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">변경할 수 없는 목록에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">목록에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an object in the immutable list at the specified index.">변경할 수 없는 목록의 지정된 인덱스에 개체를 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">
        <paramref name="item" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="item" vsli:raw="The object to insert.">삽입할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value at the specified index.">지정한 인덱스에 있는 값을 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">
        <paramref name="index" />가 음수이거나 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />보다 작지 않은 경우 getter에서 throw됩니다.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">setter에서 항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the value at the specified index.">지정한 인덱스의 값을 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">제거할 항목의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified array index.">지정된 배열 인덱스에서 시작하여 변경할 수 없는 전체 목록을 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from immutable list.">변경할 수 없는 목록에서 복사한 요소의 대상인 1차원 배열입니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="This type is immutable, so it is always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">
        <see cref="T:System.Collections.ICollection" /> 인터페이스를 확인합니다.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />을 참조하세요.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">변경할 수 없는 목록에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">목록에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the immutable list.">변경할 수 없는 목록에 항목을 추가합니다.</summary>
      <param name="value" vsli:raw="The object to add to the list.">목록에 추가할 개체입니다.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the list.">새 요소가 삽입된 위치 또는 -1(항목이 목록에 삽입되지 않았음을 나타냄)입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">변경할 수 없는 목록에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">변경할 수 없는 목록에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">목록에서 찾을 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">개체가 목록에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the immutable list.">변경할 수 없는 목록에서 특정 항목의 인덱스를 확인합니다.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">목록에서 찾을 개체입니다.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the immutable list at the specified index.">변경할 수 없는 목록의 지정된 인덱스에 항목을 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value" vsli:raw="The object to insert into the list.">목록에 삽입할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">항상 throw됩니다.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">지정된 인덱스에 있는 <see cref="T:System.Object" />를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index.">인덱스입니다.</param>
      <returns vsli:raw="The value at the specified index.">지정한 인덱스의 값입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">
        <paramref name="index" />가 음수이거나 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />보다 작지 않은 경우 getter에서 throw됩니다.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">setter에서 항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">변경할 수 없는 목록에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">목록에서 제거할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">변경할 수 없는 목록의 지정한 인덱스에서 항목을 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">제거할 항목의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable list.">이 변경할 수 없는 목록에 지정된 값을 추가합니다.</summary>
      <param name="value" vsli:raw="The value to add.">추가할 값입니다.</param>
      <returns vsli:raw="A new list with the element added.">요소가 추가된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified values to this immutable list.">이 변경할 수 없는 목록에 지정된 값을 추가합니다.</summary>
      <param name="items" vsli:raw="The values to add.">추가할 값입니다.</param>
      <returns vsli:raw="A new list with the elements added.">요소가 추가된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Retrieves an empty list that has the same sorting and ordering semantics as this instance.">정렬 및 순서 의미 체계가 이 인스턴스와 동일한 변경할 수 없는 빈 목록을 검색합니다.</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">정렬 및 순서 의미 체계가 이 인스턴스와 동일한 빈 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">변경할 수 없는 목록의 지정된 인덱스에 지정된 요소를 삽입합니다.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">값을 삽입할 인덱스입니다.</param>
      <param name="item" vsli:raw="The element to insert.">삽입할 요소입니다.</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">지정된 요소가 포함된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">변경할 수 없는 목록의 지정된 인덱스에 지정된 요소를 삽입합니다.</summary>
      <param name="index" vsli:raw="The index at which to insert the elements.">요소를 삽입할 인덱스입니다.</param>
      <param name="items" vsli:raw="The elements to insert.">삽입할 요소입니다.</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">지정된 요소가 포함된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the element with the specified value from the list.">목록에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">목록에서 제거할 요소의 값입니다.</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to compare elements for equality.">요소가 같은지 비교하는 데 사용할 비교자입니다.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; with the specified element removed.">지정된 개체가 제거된 새 <see cref="T:System.Collections.Immutable.ImmutableList`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">지정된 조건자에 정의된 조건과 일치하는 요소를 모두 제거합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">제거할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">요소가 제거된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">변경할 수 없는 목록의 지정한 인덱스에서 요소를 제거합니다.</summary>
      <param name="index" vsli:raw="The index of the element to remove.">제거할 요소의 인덱스입니다.</param>
      <returns vsli:raw="A new list with the element removed.">요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list that match the items specified.">이 변경할 수 없는 목록에서 지정된 항목과 일치하는 요소 범위를 제거합니다.</summary>
      <param name="items" vsli:raw="The range of items to remove from the list, if found.">목록에서 제거할 항목의 범위입니다(있는 경우).</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare elements.">요소를 비교하는 데 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="An immutable list with the items removed.">항목이 제거된 변경할 수 없는 목록입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; or &lt;paramref name=&quot;equalityComparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="items" /> 또는 <paramref name="equalityComparer" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the specified number of elements at the specified location from this list.">지정된 위치에 있는 지정된 개수의 요소를 이 목록에서 제거합니다.</summary>
      <param name="index" vsli:raw="The starting index of the range of elements to remove.">제거할 요소 범위의 시작 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements to remove.">제거할 요소의 수입니다.</param>
      <returns vsli:raw="A new list with the elements removed.">요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces an element in the list with the specified element.">목록의 요소를 지정된 요소로 바꿉니다.</summary>
      <param name="oldValue" vsli:raw="The element to replace.">바꿀 요소입니다.</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">이전 요소와 바꿀 요소입니다.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">검색에서 사용할 같음 비교자입니다.</param>
      <returns vsli:raw="The new list.">새 목록입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">이전 값이 목록에 없는 경우 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">목록에서 지정된 위치에 있는 요소를 지정된 요소로 바꿉니다.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">바꿀 요소의 목록 내 위치입니다.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">이전 요소와 바꿀 요소입니다.</param>
      <returns vsli:raw="The new list.">새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary vsli:raw="Creates a list that has the same contents as this list and can be efficiently mutated across multiple operations using standard mutable interfaces.">변경 가능한 표준 인터페이스를 사용하여 여러 작업 간에 효율적으로 변경할 수 있으며 이 목록과 내용이 동일한 목록을 만듭니다.</summary>
      <returns vsli:raw="The created list with the same contents as this list.">이 목록과 내용이 동일한 새로 만든 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">변경할 수 없는 목록의 모든 요소가 지정한 조건자에 정의된 조건과 일치하는지를 확인합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">요소에 대해 확인할 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">변경할 수 없는 목록의 모든 요소가 지정된 조건자에 정의된 조건과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 목록에 요소가 없으면 반환 값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableQueue`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">
        <see cref="T:System.Collections.Immutable.ImmutableQueue`1" /> 클래스의 인스턴스에 대한 초기화 메서드 집합을 제공합니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary vsli:raw="Creates an empty immutable queue.">변경할 수 없는 빈 큐를 만듭니다.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable queue.">변경할 수 없는 큐에 저장할 항목의 형식입니다.</typeparam>
      <returns vsli:raw="An empty immutable queue.">변경할 수 없는 빈 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable queue that contains the specified item.">지정된 항목이 포함된 변경할 수 없는 새 큐를 만듭니다.</summary>
      <param name="item" vsli:raw="The item to prepopulate the queue with.">큐를 미리 채울 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">변경할 수 없는 큐에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified item.">지정된 항목이 포함된 변경할 수 없는 새 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable queue that contains the specified array of items.">지정된 항목 배열이 포함된 변경할 수 없는 새 큐를 만듭니다.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the queue with.">큐를 미리 채우는 데 사용할 항목이 포함된 배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">변경할 수 없는 큐에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable queue that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 큐를 만듭니다.</summary>
      <param name="items" vsli:raw="The items to add to the queue before immutability is applied.">불변성이 적용되기 전에 큐에 추가할 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">큐에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable queue that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">변경할 수 없는 큐의 시작 부분에 있는 요소를 제거하고 새 큐를 반환합니다.</summary>
      <param name="queue" vsli:raw="The queue to remove the item from.">항목을 제거할 큐입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the item from the beginning of the queue.">이 메서드가 반환되는 경우 큐의 시작 부분에서 항목을 포함합니다.</param>
      <typeparam name="T" vsli:raw="The type of elements in the immutable queue.">변경할 수 없는 큐에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The new queue with the item removed.">항목이 제거된 새 큐입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">스택이 비어 있습니다.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary vsli:raw="Represents an immutable queue.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">변경할 수 없는 큐를 나타냅니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">큐에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable queue.">변경할 수 없는 큐에서 모든 개체를 제거합니다.</summary>
      <returns vsli:raw="The empty immutable queue.">변경할 수 없는 빈 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">변경할 수 없는 큐의 시작 부분에 있는 요소를 제거하고 새 큐를 반환합니다.</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">변경할 수 없는 새 큐입니다. <see langword="null" />일 수 없습니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">큐가 비어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">변경할 수 없는 큐의 시작 부분에 있는 요소를 제거하고 새 큐를 반환합니다.</summary>
      <param name="value" vsli:raw="When this method returns, contains the element from the beginning of the queue.">이 메서드가 반환되는 경우 큐의 시작 부분에서 요소를 포함합니다.</param>
      <returns vsli:raw="The new immutable queue with the beginning element removed.">시작 요소가 제거된 변경할 수 없는 새 큐입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">큐가 비어 있습니다.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary vsli:raw="Gets an empty immutable queue.">변경할 수 없는 빈 큐를 가져옵니다.</summary>
      <returns vsli:raw="An empty immutable queue.">변경할 수 없는 빈 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">변경할 수 없는 큐의 끝에 요소를 추가하고 새 큐를 반환합니다.</summary>
      <param name="value" vsli:raw="The element to add.">추가할 요소입니다.</param>
      <returns vsli:raw="The new immutable queue.">변경할 수 없는 새 큐입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable queue without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">메모리를 할당하지 않고 변경할 수 없는 큐의 내용을 열거합니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable queue.">열거자를 변경할 수 없는 큐의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the queue.">열거자가 다음 요소로 이동했으면 <see langword="true" />이고, 큐의 끝을 지났으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable queue.">변경할 수 없는 큐에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the queue.">큐에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">이 변경할 수 없는 큐가 비어 있는지 여부를 나타내는 값을 가져옵니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 큐가 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">변경할 수 없는 큐의 시작 부분에 있는 요소를 제거하지 않고 반환합니다.</summary>
      <returns vsli:raw="The element at the beginning of the queue.">큐의 시작 부분에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">큐가 비어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element at the front of the queue.">큐 앞에 있는 요소의 읽기 전용 참조를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">큐가 비어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable queue.">변경할 수 없는 큐에서 모든 요소를 제거합니다.</summary>
      <returns vsli:raw="The empty immutable queue.">변경할 수 없는 빈 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">변경할 수 없는 큐의 시작 부분에 있는 요소를 제거하고 새 큐를 반환합니다.</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">변경할 수 없는 새 큐입니다. <see langword="null" />일 수 없습니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">변경할 수 없는 큐의 끝에 요소를 추가하고 새 큐를 반환합니다.</summary>
      <param name="value" vsli:raw="The element to add.">추가할 요소입니다.</param>
      <returns vsli:raw="The new immutable queue.">변경할 수 없는 새 큐입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">
        <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" /> 클래스의 인스턴스에 대한 초기화 메서드 집합을 제공합니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable sorted dictionary.">변경할 수 없는 정렬된 빈 사전을 만듭니다.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">변경할 수 없는 정렬된 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key comparer.">지정된 키 비교자를 사용하는 변경할 수 없는 정렬된 빈 사전을 만듭니다.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">사전의 키와 동일한지 확인하는 데 사용할 구현입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">변경할 수 없는 정렬된 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key and value comparers.">지정된 키 및 값 비교자를 사용하는 변경할 수 없는 정렬된 빈 사전을 만듭니다.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">사전의 키와 동일한지 확인하는 데 사용할 구현입니다.</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">사전의 값과 동일한지 확인하는 데 사용할 구현입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">변경할 수 없는 정렬된 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">변경할 수 없는 정렬된 새 사전 작성기를 만듭니다.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="The immutable collection builder.">변경할 수 없는 컬렉션 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">변경할 수 없는 정렬된 새 사전 작성기를 만듭니다.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">키 비교자입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="The immutable collection builder.">변경할 수 없는 컬렉션 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">변경할 수 없는 정렬된 새 사전 작성기를 만듭니다.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">키 비교자입니다.</param>
      <param name="valueComparer" vsli:raw="The value comparer.">값 비교자입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="The immutable collection builder.">변경할 수 없는 컬렉션 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key comparer.">지정된 키 비교자를 사용하여 지정된 항목 범위에서 변경할 수 없는 정렬된 새 사전을 만듭니다.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to evaluate keys for equality and sorting.">키가 같은지 비교하고 정렬하는 데 사용할 비교자 구현입니다.</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary.">정렬된 사전에 추가할 항목입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">사전에 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">사전에 저장되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="The new immutable sorted dictionary that contains the specified items and uses the specified key comparer.">지정된 항목을 포함하고 지정된 키 비교자를 사용하는 변경할 수 없는 정렬된 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key and value comparers.">지정된 키 및 값 비교자를 사용하여 지정된 항목 범위에서 변경할 수 없는 정렬된 새 사전을 만듭니다.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality and sorting.">키가 같은지 비교하고 정렬하는 데 사용할 비교자 구현입니다.</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">값이 같은지 비교하고 정렬하는 데 사용할 비교자 구현입니다.</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">변경할 수 없는 상태가 되기 전에 정렬된 사전에 추가할 항목입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">사전에 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">사전에 저장되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items and uses the specified comparers.">지정된 항목을 포함하고 지정된 비교자를 사용하는 변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates an immutable sorted dictionary that contains the specified items and uses the default comparer.">지정된 항목을 포함하고 기본 비교자를 사용하는 변경할 수 없는 정렬된 사전을 만듭니다.</summary>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">변경할 수 없는 상태가 되기 전에 정렬된 사전에 추가할 항목입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">사전에 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">사전에 저장되는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents.">키/값 쌍의 시퀀스를 열거하고 해당 시퀀스의 내용에 대한 변경할 수 없는 정렬된 사전을 생성합니다.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">열거할 키/값 쌍의 시퀀스입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">지정된 시퀀스의 키/값 쌍이 포함된 변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">키/값 쌍의 시퀀스를 열거하고, 지정된 키 비교자를 사용하여 해당 시퀀스의 내용에 대한 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">열거할 키/값 쌍의 시퀀스입니다.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">변경할 수 없는 사전을 바인딩할 때 사용할 키 비교자입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">지정된 시퀀스의 키/값 쌍이 포함된 변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">키/값 쌍의 시퀀스를 열거하고, 지정된 키 및 값 비교자를 사용하여 해당 시퀀스의 내용에 대한 변경할 수 없는 정렬된 사전을 생성합니다.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">열거할 키/값 쌍의 시퀀스입니다.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">변경할 수 없는 사전을 바인딩할 때 사용할 키 비교자입니다.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">변경할 수 없는 사전에 사용할 값 비교자입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">지정된 시퀀스의 키/값 쌍이 포함된 변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable sorted dictionary from the current contents of the builder's dictionary.">작성기 사전의 현재 콘텐츠에서 변경할 수 없는 정렬된 사전을 만듭니다.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted dictionary from.">변경할 수 없는 정렬된 사전을 만들 작성기입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the current contents in the builder's dictionary.">작성기 사전의 현재 콘텐츠를 포함하는 변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents.">시퀀스를 열거 및 변환하고 해당 시퀀스의 내용에 대한 변경할 수 없는 정렬된 사전을 생성합니다.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">사전을 생성하기 위해 열거할 시퀀스입니다.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">각 시퀀스 요소에서 사전에 대한 키를 생성하는 함수입니다.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">각 시퀀스 요소에서 사전에 대한 값을 생성하는 함수입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">결과 사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">결과 사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">지정된 시퀀스의 항목을 포함하는 변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key comparer.">시퀀스를 열거 및 변형하고, 지정된 키 비교자를 사용하여 해당 시퀀스의 내용에 대한 변경할 수 없는 정렬된 사전을 생성합니다.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">사전을 생성하기 위해 열거할 시퀀스입니다.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">각 시퀀스 요소에서 사전에 대한 키를 생성하는 함수입니다.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">각 시퀀스 요소에서 사전에 대한 값을 생성하는 함수입니다.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">사전에 사용할 키 비교자입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">결과 사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">결과 사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">지정된 시퀀스의 항목을 포함하는 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">시퀀스를 열거 및 변형하고, 지정된 키 및 값 비교자를 사용하여 해당 시퀀스의 내용에 대한 변경할 수 없는 정렬된 사전을 생성합니다.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">사전을 생성하기 위해 열거할 시퀀스입니다.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">각 시퀀스 요소에서 사전에 대한 키를 생성하는 함수입니다.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">각 시퀀스 요소에서 사전에 대한 값을 생성하는 함수입니다.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">사전에 사용할 키 비교자입니다.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">사전에 사용할 값 비교자입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">결과 사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">결과 사전에 있는 값의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">지정된 시퀀스의 항목을 포함하는 변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary vsli:raw="Represents an immutable sorted dictionary.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">변경할 수 없는 정렬된 사전을 나타냅니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="TKey" vsli:raw="The type of the key contained in the dictionary.">사전에 포함된 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value contained in the dictionary.">사전에 포함된 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable sorted dictionary.">지정한 키와 값을 가진 요소를 변경할 수 없는 정렬된 사전에 추가합니다.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">추가할 엔트리의 키입니다.</param>
      <param name="value" vsli:raw="The value of entry to add.">추가할 항목의 값입니다.</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the additional key/value pair.">추가 키/값 쌍이 포함된 변경할 수 없는 정렬된 새 사전입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">지정된 키가 이미 사전에 있지만 값이 다릅니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specific key/value pairs to the immutable sorted dictionary.">특정 키/값 쌍을 변경할 수 없는 정렬된 사전에 추가합니다.</summary>
      <param name="items" vsli:raw="The key/value pairs to add.">추가할 키/값 쌍입니다.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">추가 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">지정된 키 중 하나가 이미 사전에 있지만 값이 다릅니다.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary vsli:raw="Represents a sorted dictionary that mutates with little or no memory allocations and that can produce or build on immutable sorted dictionary instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">메모리 할당 없이 변경되고, 변경할 수 없는 정렬된 사전 인스턴스를 매우 효율적으로 생성하거나 빌드할 수 있는 정렬된 사전을 나타냅니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable sorted dictionary.">지정한 키와 값을 가진 요소를 변경할 수 없는 정렬된 사전에 추가합니다.</summary>
      <param name="key" vsli:raw="The key of the element to add.">추가할 요소의 키입니다.</param>
      <param name="value" vsli:raw="The value of the element to add.">추가할 요소의 값입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable sorted dictionary.">변경할 수 없는 정렬된 사전에 지정된 항목을 추가합니다.</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">사전에 추가할 개체입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to the immutable sorted dictionary.">변경할 수 없는 정렬된 사전에 값의 시퀀스를 추가합니다.</summary>
      <param name="items" vsli:raw="The items to add to the dictionary.">사전에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable sorted dictionary.">변경할 수 없는 정렬된 사전에서 모든 항목을 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains a specific value.">변경할 수 없는 정렬된 사전에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">사전에서 찾을 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 사전에 있으면 <paramref name="item" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified key.">변경할 수 없는 정렬된 사전에 지정된 키를 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">사전에서 찾을 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">키를 가진 요소가 사전에 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">변경할 수 없는 정렬된 사전에 지정된 값을 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The value to locate in the dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">사전에서 찾을 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable sorted dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">변경할 수 없는 정렬된 사전에 지정된 값을 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable sorted dictionary.">이 변경할 수 없는 정렬된 사전에 있는 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements in this dictionary.">이 사전에 있는 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">변경할 수 없는 정렬된 사전에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">사전에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">일치하는 키가 사전에 있는 경우 지정된 키의 값을 가져오고, 그렇지 않으면 기본값을 가져옵니다.</summary>
      <param name="key" vsli:raw="The key to search for.">검색할 키입니다.</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">키의 값입니다. 일치하는 키가 없는 경우 <c>기본값(TValue)</c>입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">일치하는 키가 사전에 있는 경우 지정된 키의 값을 가져오고, 그렇지 않으면 기본값을 가져옵니다.</summary>
      <param name="key" vsli:raw="The key to search for.">검색할 키입니다.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">일치하는 키가 사전에 없는 경우에 반환할 기본값입니다.</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">키의 값입니다. 일치하는 키가 없는 경우 <paramref name="defaultValue" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the value for a specified key in the immutable sorted dictionary.">변경할 수 없는 정렬된 사전에서 지정된 키의 값을 가져오거나 설정합니다.</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">값을 검색할 키입니다.</param>
      <returns vsli:raw="The value associated with the given key.">지정된 키와 연결된 값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">키 비교자를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The key comparer.">키 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a strongly typed, read-only collection of elements.">강력한 형식의 읽기 전용 요소 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A strongly typed, read-only collection of elements.">강력한 형식의 읽기 전용 요소 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable sorted dictionary.">변경할 수 없는 정렬된 사전에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">제거할 요소의 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original dictionary.">요소가 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <see langword="false" />가 원래 사전에 없는 경우에도 <paramref name="key" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable sorted dictionary.">변경할 수 없는 정렬된 사전에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">사전에서 제거할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">
        <see langword="true" />이 사전에서 제거되었으면 <paramref name="item" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <see langword="false" />가 사전에 없는 경우에도 <paramref name="item" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable sorted dictionary.">지정된 시퀀스에서 찾은 것과 일치하는 키를 가진 모든 항목을 변경할 수 없는 정렬된 사전에서 제거합니다.</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">사전에서 제거할 항목의 키입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">특정 배열 인덱스부터 시작하여 사전의 요소를 배열에 복사합니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">사전에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">제공한 키와 값을 가진 요소를 사전 개체에 추가합니다.</summary>
      <param name="key" vsli:raw="The key of the element to add.">추가할 요소의 키입니다.</param>
      <param name="value" vsli:raw="The value of the element to add.">추가할 요소의 값입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">사전 개체에 지정된 키를 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="key" vsli:raw="The key to locate.">찾을 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">키를 가진 요소가 사전에 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">사전의 <see cref="T:System.Collections.IDictionaryEnumerator" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">사전의 <see cref="T:System.Collections.IDictionaryEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">
        <see cref="T:System.Collections.IDictionary" /> 개체의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> 개체의 크기가 고정 되어 있으면이 고, 그렇지 않으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="key" vsli:raw="The key.">키입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" />를 구현 하는 개체의 키를 포함 하는 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">지정된 키를 가진 요소를 사전에서 제거합니다.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">제거할 요소의 키입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값이 들어 있는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" />를 구현 하는 개체의 값을 포함 하는 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 열거자 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted dictionary based on the contents of this instance.">이 인스턴스의 내용을 기반으로 변경할 수 없는 정렬된 사전을 만듭니다.</summary>
      <returns vsli:raw="An immutable sorted dictionary.">변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">이 사전에 지정된 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">검색할 키입니다.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">사전에서 일치하는 키가 있으면 그대로이고, 일치하는 키가 없으면 <c>equalkey</c>입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 일치하는 항목이 있으면 <paramref name="equalKey" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">지정한 키와 연결된 값을 가져옵니다.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">값을 검색할 키입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값을 포함하고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식에 대한 기본값을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">사전을 구현하는 개체에 지정된 키를 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">값 비교자를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The value comparer.">값 비교자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">제공된 <paramref name="key" />과 연결된 값의 읽기 전용 참조를 반환합니다.</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">
        <paramref name="key" />가 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable sorted dictionary.">변경할 수 없는 정렬된 사전의 값이 들어 있는 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">사전을 구현하는 개체의 값이 들어 있는 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable sorted dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">이 사전 인스턴스와 순서 및 키/값 비교 규칙이 동일한 변경할 수 없는 정렬된 빈 사전을 검색합니다.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">순서 및 키/값 비교 규칙이 동일한 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable sorted dictionary contains the specified key/value pair.">이 변경할 수 없는 정렬된 사전에 지정된 키/값 쌍이 들어 있는지 여부를 확인합니다.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">찾을 키/값 쌍입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 키/값 쌍이 사전에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether this immutable sorted map contains the specified key.">이 변경할 수 없는 정렬된 맵에 지정한 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="key" vsli:raw="The key to locate.">찾을 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">변경할 수 없는 사전에 지정된 키가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">변경할 수 없는 정렬된 사전에 지정된 값을 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">찾을 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">사전에 지정된 값을 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable sorted dictionary.">변경할 수 없는 정렬된 사전에서 키/값 쌍 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">사전에 있는 키/값 쌍 수를 가져옵니다.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable sorted dictionary.">변경할 수 없는 정렬된 빈 사전을 가져옵니다.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">이진 트리의 내용을 열거합니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator&quot; /&gt; class.">
        <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted dictionary.">열거자를 변경할 수 없는 정렬된 사전의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted dictionary.">열거자가 다음 요소로 이동했으면 <see langword="true" />이고, 정렬된 사전의 끝을 지났으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted dictionary.">변경할 수 없는 정렬된 사전의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">현재 요소입니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">변경할 수 없는 정렬된 사전에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">사전에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable sorted dictionary is empty.">변경할 수 없는 정렬된 사전의 이 인스턴스가 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 인스턴스가 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">지정된 키와 연결된 <paramref name="TValue" />를 가져옵니다.</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">값을 검색할 키입니다.</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">지정한 키와 연결된 값입니다. 결과가 없으면 작업에서 예외를 throw합니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable sorted dictionary.">변경할 수 없는 정렬된 사전에 대한 키 비교자를 가져옵니다.</summary>
      <returns vsli:raw="The key comparer for the dictionary.">사전의 키 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable sorted dictionary.">변경할 수 없는 정렬된 사전의 키를 가져옵니다.</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">변경할 수 없는 사전의 키입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified value from the immutable sorted dictionary.">변경할 수 없는 정렬된 사전에서 지정된 값을 가진 요소를 제거합니다.</summary>
      <param name="value" vsli:raw="The value of the element to remove.">제거할 요소의 값입니다.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified value cannot be found in the dictionary.">지정된 요소가 제거된 변경할 수 없는 새 사전입니다. 또는 사전에서 지정된 값을 찾을 수 없는 경우 이 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable sorted dictionary.">변경할 수 없는 정렬된 사전에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">제거할 요소의 키입니다.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">지정된 키가 제거된 변경할 수 없는 새 사전입니다. 또는 사전에서 지정된 키를 찾을 수 없는 경우 이 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable sorted dictionary, possibly overwriting an existing value for the given key.">변경할 수 없는 정렬된 사전에서 지정된 키와 값을 설정합니다. 지정된 키의 기존 값을 덮어쓸 수 있습니다.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">추가할 엔트리의 키입니다.</param>
      <param name="value" vsli:raw="The key value to set.">설정할 키 값입니다.</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the specified key/value pair.">지정된 키/값 쌍이 포함된 변경할 수 없는 정렬된 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable sorted dictionary, possibly overwriting existing values for the keys.">변경할 수 없는 정렬된 사전에서 지정된 키/값 쌍을 설정합니다. 키의 기존 값을 덮어쓸 수 있습니다.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">사전에서 설정할 키/값 쌍입니다. 사전에 키가 이미 있는 경우 이 메서드는 해당 키의 이전 값을 덮어씁니다.</param>
      <returns vsli:raw="An immutable dictionary that contains the specified key/value pairs.">지정된 키/값 쌍이 포함된 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The object to use as the key of the element to access." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">특정 배열 인덱스부터 시작하여 사전의 요소를 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">사전에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">제공한 키와 값을 가진 요소를 사전 개체에 추가합니다.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">추가할 요소의 키로 사용할 개체입니다.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">추가할 요소의 값으로 사용할 개체입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">이 인스턴스를 지웁니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">사전 개체는 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">변경할 수 없는 사전 개체에 지정된 키를 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">사전 개체에서 찾을 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">키를 가진 요소가 사전에 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">변경할 수 없는 사전 개체에 대한 <see cref="T:System.Collections.IDictionaryEnumerator" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">사전 개체에 대한 열거자 개체입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">
        <see cref="T:System.Collections.IDictionary" /> 개체의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> 개체의 크기가 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="key" vsli:raw="The key of the element to be accessed.">키입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />를 구현하는 개체의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">변경할 수 없는 사전 개체에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">제거할 요소의 키입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값이 들어 있는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />를 구현하는 개체의 값을 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 열거자 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be updated." />
      <param name="value" vsli:raw="Value of entry to be updated." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="A set of key-value pairs to set on the map." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable sorted dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">변경 가능한 표준 인터페이스를 사용하여 여러 작업 간에 효율적으로 변경할 수 있으며 이 사전과 내용이 동일한 변경할 수 없는 정렬된 사전을 만듭니다.</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary.">이 사전과 내용이 동일한 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">이 사전에 지정된 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">검색할 키입니다.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">사전에서 일치하는 키가 있으면 그대로이고, 일치하는 키가 없으면 <c>equalkey</c>입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="equalKey" />에 대한 일치하는 항목이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">지정한 키와 연결된 값을 가져옵니다.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">값을 검색할 키입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값을 포함하고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식에 대한 기본값을 포함합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">사전에 지정된 키를 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">값이 같은지 여부를 확인하는 데 사용되는 값 비교자를 가져옵니다.</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">값이 같은지 여부를 확인하는 데 사용되는 값 비교자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">제공된 <paramref name="key" />과 연결된 값의 읽기 전용 참조를 반환합니다.</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">
        <paramref name="key" />가 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable sorted dictionary.">변경할 수 없는 정렬된 사전의 값을 가져옵니다.</summary>
      <returns vsli:raw="The values in the dictionary.">사전의 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key comparer.">지정된 키 비교자를 사용하는 변경할 수 없는 정렬된 사전의 인스턴스를 가져옵니다.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">사용할 키 비교자입니다.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">지정된 비교자를 사용하는 변경할 수 없는 사전의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key and value comparers.">지정된 키 및 값 비교자를 사용하는 변경할 수 없는 정렬된 사전의 인스턴스를 가져옵니다.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">사용할 키 비교자입니다.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">사용할 값 비교자입니다.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">지정된 비교자를 사용하는 변경할 수 없는 사전의 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">
        <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" /> 클래스의 인스턴스에 대한 초기화 메서드 집합을 제공합니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary vsli:raw="Creates an empty immutable sorted set.">변경할 수 없는 정렬된 빈 집합을 만듭니다.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable set.">변경할 수 없는 집합에 저장할 항목의 형식입니다.</typeparam>
      <returns vsli:raw="An empty immutable sorted set.">변경할 수 없는 정렬된 빈 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item.">지정된 항목이 포함된 변경할 수 없는 정렬된 새 집합을 만듭니다.</summary>
      <param name="item" vsli:raw="The item to prepopulate the set with.">집합을 미리 채울 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">변경할 수 없는 집합에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">지정된 항목이 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items.">지정된 항목 배열이 포함된 변경할 수 없는 정렬된 새 집합을 만듭니다.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">집합을 미리 채우는 데 사용할 항목이 포함된 배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">변경할 수 없는 집합에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted set that uses the specified comparer.">지정된 비교자를 사용하는 변경할 수 없는 정렬된 빈 집합을 만듭니다.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">집합의 항목을 비교할 때 사용할 구현입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">변경할 수 없는 집합에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="An empty immutable set.">변경할 수 없는 빈 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item and uses the specified comparer.">지정된 항목을 포함하고 지정된 비교자를 사용하는 변경할 수 없는 정렬된 새 집합을 만듭니다.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">집합의 항목을 비교할 때 사용할 구현입니다.</param>
      <param name="item" vsli:raw="The item to prepopulate the set with.">집합을 미리 채울 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable set.">변경할 수 없는 집합에 저장된 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">지정된 항목이 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items and uses the specified comparer.">지정된 항목 배열을 포함하고 지정된 비교자를 사용하는 변경할 수 없는 정렬된 새 집합을 만듭니다.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">집합의 항목을 비교할 때 사용할 구현입니다.</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">집합을 미리 채우는 데 사용할 항목이 포함된 배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">변경할 수 없는 집합에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">변경할 수 없는 정렬된 집합을 작성하는 데 사용할 수 있는 컬렉션을 반환합니다.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">컬렉션에 의해 저장되는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The immutable collection builder.">변경할 수 없는 컬렉션 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">변경할 수 없는 정렬된 집합을 작성하는 데 사용할 수 있는 컬렉션을 반환합니다.</summary>
      <param name="comparer" vsli:raw="The comparer used to compare items in the set for equality.">집합의 항목이 같은지 비교하는 데 사용되는 비교자입니다.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">컬렉션에 의해 저장되는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The immutable collection.">변경할 수 없는 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 컬렉션을 만듭니다.</summary>
      <param name="comparer" vsli:raw="The comparer to use to compare elements in this set.">이 집합의 요소를 비교하는 데 사용할 비교자입니다.</param>
      <param name="items" vsli:raw="The items to add to the set before it's immutable.">변경할 수 없는 상태가 되기 전에 집합에 추가할 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">컬렉션에 의해 저장되는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 컬렉션을 만듭니다.</summary>
      <param name="items" vsli:raw="The items to add to the set with before it's immutable.">변경할 수 없는 상태가 되기 전에 집합에 추가할 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">컬렉션에 의해 저장되는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable sorted set of its contents.">시퀀스를 열거하고 해당 시퀀스의 내용에 대한 변경할 수 없는 정렬된 집합을 생성합니다.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">열거할 시퀀스입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">시퀀스의 요소 형식입니다.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">지정된 시퀀스의 항목을 포함하는 변경할 수 없는 정렬된 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable sorted set of its contents, and uses the specified comparer.">시퀀스를 열거하고, 해당 시퀀스의 내용에 대한 변경할 수 없는 정렬된 집합을 생성하며, 지정된 비교자를 사용합니다.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">열거할 시퀀스입니다.</param>
      <param name="comparer" vsli:raw="The comparer to use for initializing and adding members to the sorted set.">정렬된 집합을 초기화하고 구성원을 추가하는 데 사용할 비교자입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">시퀀스의 요소 형식입니다.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">지정된 시퀀스의 항목을 포함하는 변경할 수 없는 정렬된 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable sorted set from the current contents of the builder's set.">작성기 집합의 현재 콘텐츠에서 변경할 수 없는 정렬된 집합을 만듭니다.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted set from.">변경할 수 없는 정렬된 집합을 만들 작성기입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the immutable sorted set.">변경할 수 없는 정렬 된 집합에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the current contents in the builder's set.">작성기 집합의 현재 콘텐츠를 포함하는 변경할 수 없는 정렬된 집합입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary vsli:raw="Represents an immutable sorted set implementation.&#xA;&#xA;NuGet package: System.Collections.Immutable (about immutable collections and how to install)">변경할 수 없는 정렬된 집합 구현을 나타냅니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the set.">집합에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable sorted set.">이 변경할 수 없는 정렬된 집합에 지정된 값을 추가합니다.</summary>
      <param name="value" vsli:raw="The value to add.">추가할 값입니다.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in this set.">요소가 추가된 새 집합입니다. 해당 요소가 이 집합에 이미 있는 경우 이 집합입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary vsli:raw="Represents a sorted set that enables changes with little or no memory allocations, and efficiently manipulates or builds immutable sorted sets.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">메모리 할당 없이 변경 가능하고 변경할 수 없는 정렬된 집합을 효율적으로 조작하거나 작성하는 정렬된 집합을 나타냅니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">현재 집합에 요소를 추가하고 요소가 성공적으로 추가되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="item" vsli:raw="The element to add to the set.">집합에 추가할 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">요소가 집합에 추가되었으면 <see langword="true" />이고, 요소가 집합에 이미 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary vsli:raw="Removes all elements from this set.">이 집합에서 모든 요소를 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the set contains the specified object.">집합에 지정한 개체가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the set.">집합에서 찾을 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 집합에 있으면 <paramref name="item" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">변경할 수 없는 정렬된 집합의 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements in this set.">이 집합의 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified set of items from the current set.">현재 집합에서 지정된 항목 집합을 제거합니다.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">집합에서 제거할 항목의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the set.">집합에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the set.">집합에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">지정된 컬렉션에도 있는 요소만 포함되도록 현재 집합을 수정합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">현재 집합이 지정된 컬렉션의 적절한(고급) 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 <see langword="true" />의 적절한 하위 집합이면 <paramref name="other" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">현재 집합이 지정된 컬렉션의 적절한(고급) 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 <see langword="true" />의 적절한 상위 집합이면 <paramref name="other" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">현재 집합이 지정된 컬렉션의 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection is compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 <see langword="true" />의 하위 집합이면 <paramref name="other" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">현재 집합이 지정된 컬렉션의 상위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 <see langword="true" />의 상위 집합이면 <paramref name="other" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the set at the given index.">지정된 인덱스에서 집합의 요소를 가져옵니다.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">반환할 집합에서 요소의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="The element at the given position.">지정 된 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">지정된 <paramref name="index" />에 있는 집합 요소의 읽기 전용 참조를 가져옵니다.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">반환할 집합에서 요소의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">지정된 위치에 있는 요소에 대한 읽기 전용 참조입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the object that is used to determine equality for the values in the immutable sorted set.">변경할 수 없는 정렬된 집합의 값이 같은지 확인하는 데 사용되는 개체를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The comparer that is used to determine equality for the values in the set.">집합의 값이 같은지 확인하는 데 사용되는 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">비교자로 정의된 변경할 수 없는 정렬된 집합의 최대값을 가져옵니다.</summary>
      <returns vsli:raw="The maximum value in the set.">집합의 최대값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">비교자로 정의된 변경할 수 없는 정렬된 집합의 최소값을 가져옵니다.</summary>
      <returns vsli:raw="The minimum value in the set.">집합의 최소값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">현재 집합이 지정된 컬렉션과 겹치는지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합과 <see langword="true" />가 적어도 하나의 공통 요소를 공유하면 <paramref name="other" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from the set.">집합에서 첫 번째로 나타나는 지정된 개체를 제거합니다.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">집합에서 제거할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was removed from the set; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the set.">
        <see langword="true" />가 집합에서 제거되었으면 <paramref name="item" />이고, <see langword="false" />가 집합에 없으면 <paramref name="item" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary vsli:raw="Returns an enumerator that iterates over the immutable sorted set in reverse order.">이 변경할 수 없는 정렬된 집합을 역순으로 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that iterates over the set in reverse order.">집합을 역순으로 반복하는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">현재 집합과 지정된 컬렉션에 같은 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 <see langword="true" />와 같으면 <paramref name="other" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하도록 현재 집합을 수정합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">현재 집합에 요소를 추가하고 요소가 성공적으로 추가되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="item" vsli:raw="The element to add to the set.">집합에 추가할 요소입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">특정 배열 인덱스부터 시작하여 컬렉션의 요소를 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">컬렉션에서 복사된 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">이 인스턴스가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">집합의 요소를 특정 배열 인덱스에서 시작하여 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">집합에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대 한 액세스가 동기화 되어 스레드로부터 안전 하 게 보호 되는지 여부를 <see langword="true" /> 합니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted set based on the contents of this instance.">이 인스턴스의 내용을 기반으로 변경할 수 없는 정렬된 집합을 만듭니다.</summary>
      <returns vsli:raw="An immutable set.">변경할 수 없는 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">현재 집합과 지정된 컬렉션 둘 다에 있는 모든 요소를 포함하도록 현재 집합을 수정합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current state.">현재 상태와 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable sorted set.">변경할 수 없는 정렬된 집합에서 모든 요소를 제거합니다.</summary>
      <returns vsli:raw="An empty set with the elements removed.">요소가 제거된 빈 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable sorted set contains the specified value.">이 변경할 수 없는 정렬된 집합에 지정한 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The value to check for.">확인할 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">집합에 지정된 값이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">변경할 수 없는 정렬된 집합의 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements in the immutable sorted set.">변경할 수 없는 정렬된 집합의 요소 수입니다.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary vsli:raw="Gets an empty immutable sorted set.">변경할 수 없는 정렬된 빈 집합을 가져옵니다.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">이진 트리의 내용을 열거합니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">열거자의 현재 위치에 있는 요소를 가져옵니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">
        <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">열거자를 변경할 수 없는 정렬된 집합의 다음 요소로 이동합니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted set.">열거자가 다음 요소로 이동했으면 <see langword="true" />이고, 정렬된 집합의 끝을 지났으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">변경할 수 없는 정렬된 집합의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">현재 요소입니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a specified set of items from this immutable sorted set.">이 변경할 수 없는 정렬된 집합에서 지정된 항목 집합을 제거합니다.</summary>
      <param name="other" vsli:raw="The items to remove from this set.">이 집합에서 제거할 항목입니다.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">항목이 제거된 새 집합입니다. 집합에 항목이 없는 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted set.">변경할 수 없는 정렬된 집합을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">집합에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary vsli:raw="Gets the position within this immutable sorted set that the specified value appears in.">이 변경할 수 없는 정렬된 집합 내에서 지정된 값이 표시되는 위치를 가져옵니다.</summary>
      <param name="item" vsli:raw="The value whose position is being sought.">해당 위치를 찾아야 하는 값입니다.</param>
      <returns vsli:raw="The index of the specified &lt;paramref name=&quot;item&quot; /&gt; in the sorted set, if &lt;paramref name=&quot;item&quot; /&gt; is found. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1.">
        <paramref name="item" />이 있는 경우 정렬된 집합에 있는 지정된 <paramref name="item" />의 인덱스입니다. <paramref name="item" />이 없고 이 집합에 있는 하나 이상의 요소보다 작은 경우 이 메서드는 값보다 큰 첫 번째 요소 인덱스의 비트 보수인 음수를 반환합니다. <paramref name="item" />이 없고 집합에 있는 요소보다 큰 경우 이 메서드는 마지막 요소에 1을 더한 인덱스의 비트 보수인 음수를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist both in this set and in the specified set.">이 집합과 지정된 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 정렬된 집합을 만듭니다.</summary>
      <param name="other" vsli:raw="The set to intersect with this one.">이 집합과 교차하는 집합입니다.</param>
      <returns vsli:raw="A new immutable sorted set that contains any elements that exist in both sets.">두 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 정렬된 새 집합입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable sorted set is empty.">이 변경할 수 없는 정렬된 집합이 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this set is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 집합이 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection.">현재 변경할 수 없는 정렬된 집합이 지정된 컬렉션의 적절한(고급) 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 <paramref name="other" />의 적절한 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper superset of a specified collection.">현재 변경할 수 없는 정렬된 집합이 지정된 컬렉션의 적절한 상위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 <paramref name="other" />의 적절한 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a subset of a specified collection.">현재 변경할 수 없는 정렬된 집합이 지정된 컬렉션의 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 <paramref name="other" />의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a superset of a specified collection.">현재 변경할 수 없는 정렬된 집합이 지정된 컬렉션의 상위 집합인지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합이 <paramref name="other" />의 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the immutable sorted set at the given index.">지정된 인덱스에서 변경할 수 없는 정렬된 집합의 요소를 가져옵니다.</summary>
      <param name="index" vsli:raw="The index of the element to retrieve from the sorted set.">정렬된 집합에서 검색할 요소의 인덱스입니다.</param>
      <returns vsli:raw="The element at the given index.">지정된 인덱스의 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference of the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">지정된 <paramref name="index" />에 있는 집합 요소에 대한 읽기 전용 참조를 가져옵니다.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">반환할 집합에서 요소의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="A read-only reference of the element at the given position.">지정된 위치에 있는 요소의 읽기 전용 참조입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary vsli:raw="Gets the comparer used to sort keys in the immutable sorted set.">변경할 수 없는 정렬된 집합에서 키를 정렬하는 데 사용되는 비교자를 가져옵니다.</summary>
      <returns vsli:raw="The comparer used to sort keys.">키를 정렬하는 데 사용되는 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">비교자로 정의된 변경할 수 없는 정렬된 집합의 최대값을 가져옵니다.</summary>
      <returns vsli:raw="The maximum value in the set.">집합의 최대값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">비교자로 정의된 변경할 수 없는 정렬된 집합의 최소값을 가져옵니다.</summary>
      <returns vsli:raw="The minimum value in the set.">집합의 최소값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and a specified collection share common elements.">현재 변경할 수 없는 정렬된 집합과 지정된 컬렉션이 공통 요소를 공유하는지 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 집합과 <paramref name="other" />가 적어도 하나의 공통 요소를 공유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified value from this immutable sorted set.">이 변경할 수 없는 정렬된 집합에서 지정된 값을 제거합니다.</summary>
      <param name="value" vsli:raw="The element to remove.">제거할 요소입니다.</param>
      <returns vsli:raw="A new immutable sorted set with the element removed, or this set if the element was not found in the set.">요소가 제거된 변경할 수 없는 정렬된 새 집합입니다. 집합에 요소가 없는 경우 이 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that iterates over this immutable sorted set in reverse order.">이 변경할 수 없는 정렬된 집합을 역순으로 반복하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</summary>
      <returns vsli:raw="An enumerator that iterates over the immutable sorted set in reverse order.">이 변경할 수 없는 정렬된 집합을 역순으로 반복하는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and the specified collection contain the same elements.">현재 변경할 수 없는 정렬된 집합과 지정된 컬렉션에 같은 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">집합이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both.">이 집합에 존재하거나 아니면 지정된 시퀀스로 존재하는(둘 중 하나로 존재) 요소가 포함된 변경할 수 없는 정렬된 집합을 만듭니다.</summary>
      <param name="other" vsli:raw="The other sequence of items.">항목의 다른 시퀀스입니다.</param>
      <returns vsli:raw="The new immutable sorted set.">변경할 수 없는 정렬된 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to the collection.">지정된 값을 컬렉션에 추가합니다.</summary>
      <param name="item" vsli:raw="The value to add.">추가할 값입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all the items from the collection.">컬렉션에서 모든 항목을 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">특정 배열 인덱스부터 시작하여 컬렉션의 요소를 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">컬렉션에서 복사된 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Returns true, since immutable collections are always read-only. See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 인터페이스를 확인합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">컬렉션에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="item" vsli:raw="The object to remove from the collection.">컬렉션에서 제거할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에서 <paramref name="item" />이 성공적으로 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the set at the specified index.">지정된 인덱스에 세트의 항목을 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">
        <paramref name="item" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="item" vsli:raw="The object to insert into the set.">집합에 삽입할 개체입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; interface.">
        <see cref="T:System.Collections.Generic.IList`1" /> 인터페이스를 확인합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">지정한 인덱스에서 해당 항목을 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">제거할 항목의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate if the element was successfully added.">현재 집합에 요소를 추가하고 요소가 성공적으로 추가되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="item" vsli:raw="The element to add to the set.">집합에 추가할 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">요소가 집합에 추가되었으면 <see langword="true" />이고, 요소가 집합에 이미 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">현재 집합에서 지정된 컬렉션의 모든 요소를 제거합니다.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">집합에서 제거할 항목의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">지정된 컬렉션에도 있는 요소만 포함되도록 현재 집합을 수정합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하도록 현재 집합을 수정합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or the specified collection.">현재 집합 또는 지정된 컬렉션 중 하나에 있는 요소가 모두 포함되도록 현재 집합을 수정합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">집합의 요소를 특정 배열 인덱스에서 시작하여 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">집합에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Returns true, since immutable collections are always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">
        <see cref="T:System.Collections.ICollection" /> 인터페이스를 확인합니다.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />을 참조하세요.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 열거자 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the set.">집합에 항목을 추가합니다.</summary>
      <param name="value" vsli:raw="The object to add to the set.">집합에 추가할 개체입니다.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">새 요소가 삽입된 위치 또는 -1(항목이 컬렉션에 삽입되지 않았음을 나타냄)입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">집합이 읽기 전용이거나 크기가 고정되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the set.">집합에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">모든 경우에 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the set contains a specific value.">집합에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The object to locate in the set.">집합에서 찾을 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">집합에 개체가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the set.">집합에서 특정 항목의 인덱스를 확인합니다.</summary>
      <param name="value" vsli:raw="The object to locate in the set.">집합에서 찾을 개체입니다.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the set at the specified index.">집합 내의 지정된 인덱스에 항목을 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value" vsli:raw="The object to insert into the set.">집합에 삽입할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">집합이 읽기 전용이거나 크기가 고정되어 있습니다.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">지정된 인덱스에 있는 <see cref="T:System.Object" />를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index.">인덱스입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.Object" />
      </returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">집합에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The object to remove from the set.">집합에서 제거할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">집합이 읽기 전용이거나 크기가 고정되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the set.">집합의 지정된 인덱스에서 항목을 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">제거할 항목의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">집합이 읽기 전용이거나 크기가 고정되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">지정한 요소를 이 변경할 수 없는 집합에 추가합니다.</summary>
      <param name="value" vsli:raw="The element to add.">추가할 요소입니다.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">요소가 추가된 새 집합입니다. 해당 요소가 집합에 이미 있는 경우 이 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">정렬 및 순서 의미 체계가 이 인스턴스와 동일한 변경할 수 없는 빈 집합을 검색합니다.</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">정렬 및 순서 의미 체계가 이 인스턴스와 동일한 빈 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">현재 변경할 수 없는 집합에서 지정된 컬렉션의 요소를 제거합니다.</summary>
      <param name="other" vsli:raw="The items to remove from this set.">이 집합에서 제거할 항목입니다.</param>
      <returns vsli:raw="The new set with the items removed; or the original set if none of the items were in the set.">항목이 제거된 새 집합입니다. 집합에 항목이 없는 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">이 집합과 지정된 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 집합을 만듭니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">두 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">이 변경할 수 없는 집합에서 지정된 요소를 제거합니다.</summary>
      <param name="value" vsli:raw="The element to remove.">제거할 요소입니다.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">지정된 요소가 제거된 새 집합입니다. 집합에서 요소를 찾을 수 없는 경우 현재 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하는 변경할 수 없는 집합을 만듭니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">현재 집합과 비교할 컬렉션입니다.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소를 포함하는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 모든 요소를 포함하는 변경할 수 없는 새 집합을 만듭니다.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">요소를 추가할 컬렉션입니다.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">항목이 추가된 변경할 수 없는 새 집합입니다. 모든 항목이 집합에 이미 있던 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary vsli:raw="Creates a collection that has the same contents as this immutable sorted set that can be efficiently manipulated by using standard mutable interfaces.">변경 가능한 표준 인터페이스를 사용하여 효율적으로 조작할 수 있으며 이 변경할 수 없는 정렬된 집합과 내용이 동일한 컬렉션을 만듭니다.</summary>
      <returns vsli:raw="The sorted set builder.">정렬된 집합 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">집합에서 지정된 값을 검색하여 동일한 값을 찾은 경우 해당 값을 반환합니다.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">검색할 값입니다.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">집합에서 검색한 값입니다. 검색에서 일치하는 항목을 찾지 못한 경우 원래 값입니다.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">검색에 성공했는지 여부를 나타내는 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a given set of items to this immutable sorted set.">지정된 항목 집합을 이 변경할 수 없는 정렬된 집합에 추가합니다.</summary>
      <param name="other" vsli:raw="The items to add.">추가할 항목입니다.</param>
      <returns vsli:raw="The new set with the items added; or the original set if all the items were already in the set.">항목이 추가된 새 집합입니다. 모든 항목이 집합에 이미 있던 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Returns the immutable sorted set that has the specified key comparer.">지정된 키 비교자가 있는 변경할 수 없는 정렬된 집합을 반환합니다.</summary>
      <param name="comparer" vsli:raw="The comparer to check for.">확인할 비교자입니다.</param>
      <returns vsli:raw="The immutable sorted set that has the specified key comparer.">지정된 키 비교자가 있는 변경할 수 없는 정렬된 집합입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableStack`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">
        <see cref="T:System.Collections.Immutable.ImmutableStack`1" /> 클래스의 인스턴스에 대한 초기화 메서드 집합을 제공합니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary vsli:raw="Creates an empty immutable stack.">변경할 수 없는 빈 스택을 만듭니다.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable stack.">변경할 수 없는 스택에 저장할 항목의 형식입니다.</typeparam>
      <returns vsli:raw="An empty immutable stack.">변경할 수 없는 빈 스택입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable stack that contains the specified item.">지정된 항목이 포함된 변경할 수 없는 새 스택을 만듭니다.</summary>
      <param name="item" vsli:raw="The item to prepopulate the stack with.">스택을 미리 채울 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">변경할 수 없는 스택에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable collection that contains the specified item.">지정된 항목이 포함된 변경할 수 없는 새 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable stack that contains the specified array of items.">지정된 항목 배열이 포함된 변경할 수 없는 새 스택을 만듭니다.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the stack with.">스택을 미리 채우는 데 사용할 항목이 포함된 배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">변경할 수 없는 스택에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A new immutable stack that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 스택입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable stack that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 새 스택을 만듭니다.</summary>
      <param name="items" vsli:raw="The items to add to the stack before it's immutable.">변경할 수 없는 상태가 되기 전에 스택에 추가할 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">스택에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="An immutable stack that contains the specified items.">지정된 항목이 포함된 변경할 수 없는 스택입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary vsli:raw="Removes the specified item from an immutable stack.">변경할 수 없는 스택에서 지정된 항목을 제거합니다.</summary>
      <param name="stack" vsli:raw="The stack to modify.">수정할 스택입니다.</param>
      <param name="value" vsli:raw="The item to remove from the stack.">스택에서 제거할 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of items contained in the stack.">스택에 들어 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">스택입니다. <see langword="null" />일 수 없습니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">스택이 비어 있습니다.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary vsli:raw="Represents an immutable stack.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">변경할 수 없는 스택을 나타냅니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="The type of element on the stack.">스택에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">변경할 수 없는 스택에서 모든 개체를 제거합니다.</summary>
      <returns vsli:raw="An empty immutable stack.">변경할 수 없는 빈 스택입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary vsli:raw="Gets an empty immutable stack.">변경할 수 없는 빈 스택을 가져옵니다.</summary>
      <returns vsli:raw="An empty immutable stack.">변경할 수 없는 빈 스택입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable stack without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">메모리를 할당하지 않고 변경할 수 없는 스택의 내용을 열거합니다.
NuGet 패키지: System.Collections.Immutable(변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable stack.">열거자를 변경할 수 없는 스택의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the stack.">열거자가 다음 요소로 이동했으면 <see langword="true" />이고, 스택의 끝을 지났으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable stack.">변경할 수 없는 스택에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the stack.">스택에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable stack is empty.">변경할 수 없는 스택의 이 인스턴스가 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 인스턴스가 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary vsli:raw="Returns the object at the top of the stack without removing it.">스택의 맨 위에 있는 개체를 제거하지 않고 반환합니다.</summary>
      <returns vsli:raw="The object at the top of the stack.">스택의 맨 위에 있는 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">스택이 비어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element on the top of the stack.">스택의 맨 위에 있는 요소의 읽기 전용 참조를 가져옵니다.</summary>
      <returns vsli:raw="A read-only reference to the element on the top of the stack.">스택의 맨 위에 있는 요소의 읽기 전용 참조입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">스택이 비어 있는 경우 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the stack after the removal.">변경할 수 없는 스택의 맨 위에 있는 요소를 제거한 후 스택을 반환합니다.</summary>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">스택입니다. <see langword="null" />일 수 없습니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">스택이 비어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary vsli:raw="Removes the specified element from the immutable stack and returns the stack after the removal.">변경할 수 없는 스택에서 지정된 요소를 제거한 후 스택을 반환합니다.</summary>
      <param name="value" vsli:raw="The value to remove from the stack.">스택에서 제거할 값입니다.</param>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">스택입니다. <see langword="null" />일 수 없습니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the immutable stack and returns the new stack.">변경할 수 없는 스택의 맨 위에 개체를 삽입하고 새 스택을 반환합니다.</summary>
      <param name="value" vsli:raw="The object to push onto the stack.">스택에 적용할 개체입니다.</param>
      <returns vsli:raw="The new stack.">새 스택입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable stack.">변경할 수 없는 스택에서 모든 요소를 제거합니다.</summary>
      <returns vsli:raw="The empty immutable stack.">변경할 수 없는 빈 스택입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">변경할 수 없는 스택의 맨 위에 있는 요소를 제거하고 새 스택을 반환합니다.</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">새 스택입니다. <see langword="null" />일 수 없습니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">변경할 수 없는 스택의 맨 위에 요소를 삽입하고 새 스택을 반환합니다.</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">스택에 적용할 요소입니다.</param>
      <returns vsli:raw="The new stack.">새 스택입니다.</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary vsli:raw="LINQ extension method overrides that offer greater efficiency for &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; than the standard LINQ methods  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">표준 LINQ 메서드보다 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />에 대한 효율성이 뛰어난 LINQ 확장명 메서드 재정의입니다.
NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">누적 방식으로 요소의 시퀀스에 함수를 적용합니다.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">함수를 적용할 컬렉션입니다.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">누적 방식으로 각 요소에서 호출할 함수입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The final value after the cumulative function has been applied to all elements.">누적 함수가 모든 요소에 적용된 이후의 최종 값입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">누적 방식으로 요소의 시퀀스에 함수를 적용합니다.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">함수를 적용할 컬렉션입니다.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">초기 누적기 값입니다.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">누적 방식으로 각 요소에서 호출할 함수입니다.</param>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">누적된 값의 형식입니다.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The final accumulator value.">최종 누적기 값입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">누적 방식으로 요소의 시퀀스에 함수를 적용합니다.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">함수를 적용할 컬렉션입니다.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">초기 누적기 값입니다.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">누적 방식으로 각 요소에서 호출할 함수입니다.</param>
      <param name="resultSelector" vsli:raw="A function to transform the final accumulator value into the result type." />
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">누적된 값의 형식입니다.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of result returned by the result selector.">결과 선택기에서 반환되는 결과의 형식입니다.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The final accumulator value.">최종 누적기 값입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether all elements in this array match a given condition.">이 배열의 모든 요소가 지정된 조건과 일치하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="immutableArray" vsli:raw="The array to check for matches.">일치하는 항목을 확인할 배열입니다.</param>
      <param name="predicate" vsli:raw="The predicate.">조건자입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element of the source sequence passes the test in the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">원본 시퀀스의 모든 요소가 지정된 조건자의 테스트를 통과하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements.">배열에 요소가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">요소를 확인할 배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array contains an elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">배열에 요소가 들어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements that match a specified condition.">배열에 지정된 조건과 일치하는 요소가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">요소를 확인할 배열입니다.</param>
      <param name="predicate" vsli:raw="The delegate that defines the condition to match to an element.">요소와 일치시킬 조건을 정의하는 대리자입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element matches the specified condition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">요소가 지정된 조건과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns a value indicating whether this collection contains any elements.">이 컬렉션에 요소가 들어 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="builder" vsli:raw="The builder to check for matches.">일치하는 항목을 확인할 작성기입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements in the array.">배열 요소의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array builder contains any elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">배열 작성기에 요소가 들어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in the array.">배열의 지정된 인덱스에 있는 요소를 반환합니다.</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">요소를 찾을 배열입니다.</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">검색할 요소의 인덱스입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The item at the specified index.">지정된 인덱스에 있는 항목입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence or a default value if the index is out of range.">시퀀스에서 지정된 인덱스의 요소를 반환하거나, 인덱스가 범위를 벗어나면 기본 값을 반환합니다.</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">요소를 찾을 배열입니다.</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">검색할 요소의 인덱스입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The item at the specified index, or the default value if the index is not found.">지정된 인덱스의 항목입니다. 인덱스가 없는 경우 기본값입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element in an array.">배열의 첫 번째 요소를 반환합니다.</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">항목을 가져올 배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The first item in the array.">배열의 첫 번째 항목입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">배열이 비어 있는 경우입니다.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element in a sequence that satisfies a specified condition.">시퀀스에서 지정된 조건에 맞는 첫 번째 요소를 반환합니다.</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">항목을 가져올 배열입니다.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The first item in the list if it meets the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <paramref name="predicate" />에 의해 지정된 조건을 충족하는 경우 목록의 첫 번째 항목입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">배열이 비어 있는 경우입니다.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection.">컬렉션의 첫 번째 요소를 반환합니다.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an item from.">항목을 검색할 작성기입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the array.">컬렉션에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The first item in the list.">목록의 첫 번째 항목입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">배열이 비어 있는 경우입니다.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element of a sequence, or a default value if the sequence contains no elements.">시퀀스의 첫 번째 요소를 반환하거나, 시퀀스에 요소가 없으면 기본값을 반환합니다.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">항목을 검색할 배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">목록의 첫 번째 항목(있는 경우) 또는 항목 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.">시퀀스에서 특정 조건에 맞는 첫 번째 요소를 반환하거나, 이러한 요소가 없으면 기본값을 반환합니다.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">요소를 검색할 배열입니다.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">목록의 첫 번째 항목(있는 경우) 또는 항목 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection, or the default value if the collection is empty.">컬렉션의 첫 번째 요소 또는 기본값(컬렉션이 비어 있는 경우)을 반환합니다.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">요소를 검색할 작성기입니다.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">작성기에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">목록의 첫 번째 항목(있는 경우) 또는 항목 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of the array.">배열의 마지막 요소를 반환합니다.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">항목을 검색할 배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the array.">배열에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The last element in the array.">배열의 마지막 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">컬렉션이 비어 있는 경우 throw됩니다.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a specified condition.">시퀀스에서 지정된 조건에 맞는 마지막 요소를 반환합니다.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">요소를 검색할 배열입니다.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to retrieve.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The last element of the array that satisfies the &lt;paramref name=&quot;predicate&quot; /&gt; condition.">
        <paramref name="predicate" /> 조건을 충족하는 배열의 마지막 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">컬렉션이 비어 있는 경우 throw됩니다.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection.">컬렉션의 마지막 요소를 반환합니다.</summary>
      <param name="builder" vsli:raw="The builder to retrieve elements from.">요소를 검색할 작성기입니다.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">작성기에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The last element in the builder.">작성기의 마지막 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">컬렉션이 비어 있는 경우 throw됩니다.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of a sequence, or a default value if the sequence contains no elements.">시퀀스의 마지막 요소를 반환하거나, 시퀀스에 요소가 없으면 기본값을 반환합니다.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">항목을 검색할 배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">시퀀스의 마지막 요소 또는 기본값(시퀀스에 요소가 없는 경우)입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.">시퀀스에서 특정 조건에 맞는 마지막 요소를 반환하거나, 이러한 요소가 없으면 기본값을 반환합니다.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve an element from.">요소를 검색할 배열입니다.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">시퀀스의 마지막 요소 또는 기본값(시퀀스에 요소가 없는 경우)입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection, or the default value if the collection is empty.">컬렉션의 마지막 요소 또는 기본값(컬렉션이 비어 있는 경우)을 반환합니다.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">요소를 검색할 작성기입니다.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">작성기에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">시퀀스의 마지막 요소 또는 기본값(시퀀스에 요소가 없는 경우)입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Projects each element of a sequence into a new form.">시퀀스의 각 요소를 새 폼에 투영합니다.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to select items from.">항목을 선택할 변경할 수 없는 배열입니다.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result element.">결과 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the transform function on each element of source.">해당 요소가 원본의 각 요소에 대해 변형 함수를 호출한 결과인 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;,             flattens the resulting sequences into one sequence, and invokes a result             selector function on each element therein.">시퀀스의 각 요소를 <see cref="T:System.Collections.Generic.IEnumerable`1" />로 투영하고, 결과 시퀀스를 단일 시퀀스로 평면화한 다음 포함된 각 요소에 대해 결과 선택기 함수를 호출합니다.</summary>
      <param name="immutableArray" vsli:raw="The immutable array.">변경할 수 없는 배열입니다.</param>
      <param name="collectionSelector" vsli:raw="A transform function to apply to each element of the input sequence.">입력된 시퀀스의 각 요소에 적용할 변형 함수입니다.</param>
      <param name="resultSelector" vsli:raw="A transform function to apply to each element of the intermediate sequence.">중간 시퀀스의 각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;immutableArray&quot; /&gt;.">
        <paramref name="immutableArray" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">수집 하는 중간 요소의 형식 <paramref name="collectionSelector" />합니다.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">결과 시퀀스 요소의 형식입니다.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result             of invoking the one-to-many transform function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each             element of &lt;paramref name=&quot;immutableArray&quot; /&gt; and then mapping each of those sequence elements and their             corresponding source element to a result element.">해당 요소가 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 각 요소에 대해 일대다 변형 함수 <paramref name="collectionSelector" />를 호출한 다음 이러한 시퀀스 요소와 해당 소스 요소를 각각 결과 요소에 매핑한 결과인 <paramref name="immutableArray" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">같음 비교자에 따라 두 시퀀스가 서로 같은지 확인합니다.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">비교에 사용할 배열입니다.</param>
      <param name="items" vsli:raw="The items to use for comparison.">비교에 사용할 항목입니다.</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">같은지 확인하는 데 사용할 비교자입니다.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">비교한 배열에 있는 요소의 형식입니다.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">시퀀스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">같음 비교자에 따라 두 시퀀스가 서로 같은지 확인합니다.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">비교에 사용할 배열입니다.</param>
      <param name="items" vsli:raw="The items to use for comparison.">비교에 사용할 항목입니다.</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">같은지 확인하는 데 사용할 비교자입니다.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">비교한 배열에 있는 요소의 형식입니다.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">시퀀스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">같음 비교자에 따라 두 시퀀스가 서로 같은지 확인합니다.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">비교에 사용할 배열입니다.</param>
      <param name="items" vsli:raw="The items to use for comparison.">비교에 사용할 항목입니다.</param>
      <param name="predicate" vsli:raw="The comparer to use to check for equality.">같은지 확인하는 데 사용할 비교자입니다.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">비교한 배열에 있는 요소의 형식입니다.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">시퀀스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.">시퀀스의 유일한 요소를 반환하고, 시퀀스에 요소가 정확히 하나 들어 있지 않으면 예외를 throw합니다.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve the element from.">요소를 검색할 배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The element in the sequence.">시퀀스의 요소입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.">시퀀스에서 지정된 조건에 맞는 유일한 요소를 반환하고, 이러한 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to return a single element from." />
      <param name="predicate" vsli:raw="The function to test whether an element should be returned." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">
        <see cref="T:System.Boolean" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of the array, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.">배열의 유일한 요소를 반환하거나 시퀀스가 비어 있으면 기본값을 반환합니다. 시퀀스에 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <param name="immutableArray" vsli:raw="The array.">배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The element in the array, or the default value if the array is empty.">배열의 요소 또는 기본값(배열이 비어 있는 경우)입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains more than one element.">
        <paramref name="source" />에는 둘 이상의 요소가 있습니다.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.">시퀀스에서 지정된 조건에 맞는 유일한 요소를 반환하거나 이러한 요소가 없으면 기본값을 반환합니다. 조건에 맞는 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <param name="immutableArray" vsli:raw="The array to get the element from.">요소를 가져올 배열입니다.</param>
      <param name="predicate" vsli:raw="The condition the element must satisfy.">요소가 충족해야 하는 조건입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The element if it satisfies the specified condition; otherwise the default element.">지정된 조건을 충족하면 해당 요소이고, 그렇지 않으면 기본 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">조건을 충족 하는 요소가 둘 이상 <paramref name="predicate" />합니다.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Copies the contents of this array to a mutable array.">이 배열의 내용을 변경 가능한 배열에 복사합니다.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to copy into a mutable one." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The newly instantiated array.">새로 인스턴스화된 배열입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">이 배열의 내용을 기반으로 사전을 만듭니다.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">사전을 만들 배열입니다.</param>
      <param name="keySelector" vsli:raw="The key selector.">키 선택기입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">키의 형식입니다.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">새로 초기화된 사전입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">이 배열의 내용을 기반으로 사전을 만듭니다.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">사전을 만들 배열입니다.</param>
      <param name="keySelector" vsli:raw="The key selector.">키 선택기입니다.</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">사전을 초기화할 비교자입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">키의 형식입니다.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">새로 초기화된 사전입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">이 배열의 내용을 기반으로 사전을 만듭니다.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">사전을 만들 배열입니다.</param>
      <param name="keySelector" vsli:raw="The key selector.">키 선택기입니다.</param>
      <param name="elementSelector" vsli:raw="The element selector.">요소 선택기입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">키의 형식입니다.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">요소의 형식입니다.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">새로 초기화된 사전입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">이 배열의 내용을 기반으로 사전을 만듭니다.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">사전을 만들 배열입니다.</param>
      <param name="keySelector" vsli:raw="The key selector.">키 선택기입니다.</param>
      <param name="elementSelector" vsli:raw="The element selector.">요소 선택기입니다.</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">사전을 초기화할 비교자입니다.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">키의 형식입니다.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">요소의 형식입니다.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">새로 초기화된 사전입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Filters a sequence of values based on a predicate.">조건자에 따라 값의 시퀀스를 필터링합니다.</summary>
      <param name="immutableArray" vsli:raw="The array to filter.">필터링할 배열입니다.</param>
      <param name="predicate" vsli:raw="The condition to use for filtering the array content.">배열 내용을 필터링하는 데 사용할 조건입니다.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements that meet the condition.">조건을 충족하는 요소가 포함된 <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</returns>
    </member>
  </members>
</doc>
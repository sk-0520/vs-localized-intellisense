<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.Contracts</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.Contracts.Contract">
      <summary vsli:raw="Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.">사전 조건, 사후 조건, 개체 고정 조건 같은 프로그램 계약을 나타내는 정적 메서드가 포함됩니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set for the analyzer.">조건을 확인합니다. 조건이 <see langword="false" />이면 분석기에 설정된 에스컬레이션 정책을 따릅니다.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">테스트할 조건식입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set by the analyzer and displays the specified message.">조건을 확인합니다. 조건이 <see langword="false" />이면 분석기에 설정된 에스컬레이션 정책을 따르고 지정된 메시지를 표시합니다.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">테스트할 조건식입니다.</param>
      <param name="userMessage" vsli:raw="A message to display if the condition is not met.">조건이 충족되지 않으면 표시할 메시지입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
      <summary vsli:raw="Instructs code analysis tools to assume that the specified condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;.">조건이 항상 <see langword="true" />인지 고정적으로 입증할 수 없는 경우를 포함하여, 코드 분석 도구가 지정된 조건을 <see langword="true" />라고 가정하도록 지시합니다.</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />라고 가정할 조건식입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
      <summary vsli:raw="Instructs code analysis tools to assume that a condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;, and displays a message if the assumption fails.">조건이 항상 <see langword="true" />인지 고정적으로 입증할 수 없는 경우를 포함하여, 코드 분석 도구가 조건을 <see langword="true" />라고 가정하고 가정이 실패한 경우 메시지를 표시하도록 지시합니다.</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />라고 가정할 조건식입니다.</param>
      <param name="userMessage" vsli:raw="The message to post if the assumption fails.">가정이 실패할 경우 게시되는 메시지입니다.</param>
    </member>
    <member name="E:System.Diagnostics.Contracts.Contract.ContractFailed">
      <summary vsli:raw="Occurs when a contract fails.">계약이 실패한 경우 발생합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
      <summary vsli:raw="Marks the end of the contract section when a method's contracts contain only preconditions in the &lt;see langword=&quot;if&quot; /&gt;-&lt;see langword=&quot;then&quot; /&gt;-&lt;see langword=&quot;throw&quot; /&gt; form.">메서드의 계약에 <see langword="if" />-<see langword="then" />-<see langword="throw" /> 형태의 사전 조건만 포함되어 있을 때 계약 섹션의 끝을 표시합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property.">바깥쪽 메서드 또는 속성에 대한 사후 조건 계약을 지정합니다.</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">테스트할 조건식입니다. 식에는 <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" />, <see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" /> 및 <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> 값이 포함될 수 있습니다.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract for a provided exit condition and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">제공된 종료 조건에 대한 사후 조건 계약과 조건이 <see langword="false" />인 경우 표시할 메시지를 지정합니다.</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">테스트할 조건식입니다. 식에는 <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /> 및 <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> 값이 포함될 수 있습니다.</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is not &lt;see langword=&quot;true&quot; /&gt;.">식이 <see langword="true" />가 아니면 표시할 메시지입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.">제공된 예외와 조건에 따라 바깥쪽 메서드 또는 속성에 대한 사후 조건 계약을 지정합니다.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">테스트할 조건식입니다.</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">사후 조건 확인을 호출하는 예외의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt; for the enclosing method or property, based on the provided exception and condition.">제공된 예외와 조건에 따라 바깥쪽 메서드 또는 속성에 대한 해당 조건이 <see langword="false" />인 경우 표시할 사후 조건 계약과 메시지를 지정합니다.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">테스트할 조건식입니다.</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is &lt;see langword=&quot;false&quot; /&gt;.">식이 <see langword="false" />이면 표시할 메시지입니다.</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">사후 조건 확인을 호출하는 예외의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a specified test is true for any integer within a range of integers.">정수 범위 내의 정수에 대해 지정된 테스트가 true인지 여부를 확인합니다.</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <paramref name="predicate" />에 전달할 첫 번째 정수입니다.</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <paramref name="predicate" />에 전달할 마지막 정수보다 1 더 큽니다.</param>
      <param name="predicate" vsli:raw="The function to evaluate for any value of the integer in the specified range.">지정된 범위에 있는 정수의 값을 평가하기 위한 함수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any integer starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">
        <paramref name="predicate" />가 <paramref name="fromInclusive" />부터 <paramref name="toExclusive" /> - 1 사이의 정수에 대해 <see langword="true" />를 반환하면 <see langword="true" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" />가 <paramref name="fromInclusive" />보다 작은 경우</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether an element within a collection of elements exists within a function.">요소 컬렉션에 속하는 요소가 함수에 존재하는지 확인합니다.</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <c>T</c> 형식의 요소를 <paramref name="predicate" />로 전달할 컬렉션입니다.</param>
      <param name="predicate" vsli:raw="The function to evaluate for an element in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <paramref name="collection" />에 있는 요소를 평가하기 위한 함수입니다.</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <paramref name="collection" />에 포함된 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any element of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <paramref name="predicate" />가 <paramref name="T" />에서 <paramref name="collection" /> 형식의 요소에 대해 <see langword="true" />를 반환하는 경우에만 <see langword="true" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> 또는 <paramref name="predicate" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a particular condition is valid for all integers in a specified range.">지정된 범위의 모든 정수에 대해 특정 조건이 유효한지 여부를 확인합니다.</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <paramref name="predicate" />에 전달할 첫 번째 정수입니다.</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <paramref name="predicate" />에 전달할 마지막 정수보다 1 더 큽니다.</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of the integers in the specified range.">지정된 범위의 정수가 존재하는지 확인할 함수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all integers starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">
        <paramref name="predicate" />가 <paramref name="fromInclusive" />에서 <paramref name="toExclusive" /> - 1 사이의 모든 정수에 대해 <see langword="true" />를 반환하면 <see langword="true" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" />가 <paramref name="fromInclusive" />보다 작은 경우</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether all the elements in a collection exist within a function.">컬렉션의 모든 요소가 함수에 존재하는지 확인합니다.</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <c>T</c> 형식의 요소를 <paramref name="predicate" />로 전달할 컬렉션입니다.</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of all the elements in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <paramref name="collection" />에 모든 요소가 존재하는지 확인할 함수입니다.</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <paramref name="collection" />에 포함된 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all elements of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <paramref name="predicate" />가 <paramref name="T" />에 있는 모든 <paramref name="collection" /> 형식 요소에 대해 <see langword="true" />를 반환하는 경우에만 <see langword="true" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> 또는 <paramref name="predicate" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property.">바깥쪽 메서드 또는 속성에 대한 고정 계약을 지정합니다.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">테스트할 조건식입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.">바깥쪽 메서드나 속성에 대한 invariant 계약을 지정하고 계약의 조건이 실패한 경우 메시지를 표시합니다.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">테스트할 조건식입니다.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">조건이 <see langword="false" />인 경우 표시할 메시지입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
      <summary vsli:raw="Represents values as they were at the start of a method or property.">값을 메서드나 속성의 시작 위치에 있었던 그대로 나타냅니다.</summary>
      <param name="value" vsli:raw="The value to represent (field or parameter).">나타낼 값(필드 또는 매개 변수)입니다.</param>
      <typeparam name="T" vsli:raw="The type of value.">값의 형식입니다.</typeparam>
      <returns vsli:raw="The value of the parameter or field at the start of a method or property.">메서드나 속성의 시작 위치에 있는 필드 또는 매개 변수의 값입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property.">바깥쪽 메서드 또는 속성에 대한 사전 조건 계약을 지정합니다.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">테스트할 조건식입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.">바깥쪽 메서드나 속성에 대한 사전 조건 계약을 지정하고 계약의 조건이 실패한 경우 메시지를 표시합니다.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">테스트할 조건식입니다.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">조건이 <see langword="false" />인 경우 표시할 메시지입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.">바깥쪽 메서드나 속성에 대한 사전 조건 계약을 지정하고 계약의 조건이 실패한 경우 예외를 throw합니다.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">테스트할 조건식입니다.</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">조건이 <see langword="false" />인 경우 throw할 예외입니다.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.">바깥쪽 메서드 또는 속성에 대한 사전 조건 계약을 지정하고 계약의 조건이 실패할 경우 제공된 메시지와 함께 예외를 throw합니다.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">테스트할 조건식입니다.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">조건이 <see langword="false" />인 경우 표시할 메시지입니다.</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">조건이 <see langword="false" />인 경우 throw할 예외입니다.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
      <summary vsli:raw="Represents the return value of a method or property.">메서드나 속성의 반환 값을 나타냅니다.</summary>
      <typeparam name="T" vsli:raw="Type of return value of the enclosing method or property.">바깥쪽 메서드나 속성의 반환 값 형식입니다.</typeparam>
      <returns vsli:raw="Return value of the enclosing method or property.">바깥쪽 메서드나 속성의 반환 값입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
      <summary vsli:raw="Represents the final (output) value of an &lt;see langword=&quot;out&quot; /&gt; parameter when returning from a method.">메서드에서 반환되는 <see langword="out" /> 매개 변수의 최종(출력) 값을 나타냅니다.</summary>
      <param name="value" vsli:raw="The &lt;see langword=&quot;out&quot; /&gt; parameter.">
        <see langword="out" /> 매개 변수입니다.</param>
      <typeparam name="T" vsli:raw="The type of the &lt;see langword=&quot;out&quot; /&gt; parameter.">
        <see langword="out" /> 매개 변수의 형식입니다.</typeparam>
      <returns vsli:raw="The output value of the &lt;see langword=&quot;out&quot; /&gt; parameter.">
        <see langword="out" /> 매개 변수의 출력 값입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
      <summary vsli:raw="Defines abbreviations that you can use in place of the full contract syntax.">전체 계약 구문을 대신 사용할 수 있는 약어를 정의합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
      <summary vsli:raw="Enables the factoring of legacy &lt;see langword=&quot;if-then-throw&quot; /&gt; code into separate methods for reuse, and provides full control over thrown exceptions and arguments.">다시 사용하기 위해 별도의 메서드로 레거시 <see langword="if-then-throw" /> 코드의 팩터링을 사용하도록 설정하고 throw된 예외 및 인수를 완전히 제어할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
      <summary vsli:raw="Specifies that a separate type contains the code contracts for this type.">이 형식에 대한 코드 계약이 별도 형식에 포함된다고 지정합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeContainingContracts" vsli:raw="The type that contains the code contracts for this type.">이 형식에 대한 코드 계약을 포함하는 형식입니다.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
      <summary vsli:raw="Gets the type that contains the code contracts for this type.">이 형식에 대한 코드 계약을 포함하는 형식을 가져옵니다.</summary>
      <returns vsli:raw="The type that contains the code contracts for this type.">이 형식에 대한 코드 계약을 포함하는 형식입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
      <summary vsli:raw="Specifies that a class is a contract for a type.">클래스가 형식에 대한 계약임을 지정합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassForAttribute&quot; /&gt; class, specifying the type the current class is a contract for.">현재 클래스의 계약 형식을 지정하여 <see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeContractsAreFor" vsli:raw="The type the current class is a contract for.">현재 클래스의 계약 형식입니다.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
      <summary vsli:raw="Gets the type that this code contract applies to.">이 코드 계약이 적용되는 형식을 가져옵니다.</summary>
      <returns vsli:raw="The type that this contract applies to.">이 계약이 적용되는 형식입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailedEventArgs">
      <summary vsli:raw="Provides methods and data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">
        <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 이벤트에 대한 메서드와 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">
        <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 이벤트에 대한 데이터를 제공합니다.</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the contract that failed.">실패한 계약을 지정하는 열거형 값 중 하나입니다.</param>
      <param name="message" vsli:raw="The message for the event.">이벤트의 메시지입니다.</param>
      <param name="condition" vsli:raw="The condition for the event.">이벤트에 대한 조건입니다.</param>
      <param name="originalException" vsli:raw="The exception that caused the event.">이벤트를 발생시킨 예외입니다.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition">
      <summary vsli:raw="Gets the condition for the failure of the contract.">계약의 실패에 대한 조건을 가져옵니다.</summary>
      <returns vsli:raw="The condition for the failure.">실패에 대한 조건입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind">
      <summary vsli:raw="Gets the type of contract that failed.">실패한 계약의 형식을 가져옵니다.</summary>
      <returns vsli:raw="One of the enumeration values that specifies the type of contract that failed.">실패한 계약의 형식을 지정하는 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event has been handled.">
        <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 이벤트가 처리되었는지 여부를 나타냅니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이벤트가 처리되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message">
      <summary vsli:raw="Gets the message that describes the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">
        <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 이벤트를 설명하는 메시지를 가져옵니다.</summary>
      <returns vsli:raw="The message that describes the event.">이벤트를 설명하는 메시지입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException">
      <summary vsli:raw="Gets the original exception that caused the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">
        <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 이벤트를 발생시킨 원래 예외를 가져옵니다.</summary>
      <returns vsli:raw="The exception that caused the event.">이벤트를 발생시킨 예외입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled" /> 속성을 <see langword="true" />로 설정합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind" /> 속성을 <see langword="true" />로 설정합니다.</summary>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind">
      <summary vsli:raw="Indicates whether the code contract escalation policy should be applied.">코드 계약 에스컬레이션 정책을 적용해야 하는지 여부를 나타냅니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to apply the escalation policy; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">에스컬레이션 정책을 적용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
      <summary vsli:raw="Specifies the type of contract that failed.">실패한 계약의 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assert&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert" /> 계약이 실패했습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assume&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume" /> 계약이 실패했습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Invariant&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant" /> 계약이 실패했습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Ensures&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures" /> 계약이 실패했습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow" /> 계약이 실패했습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
      <summary vsli:raw="A &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Requires&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires" /> 계약이 실패했습니다.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
      <summary vsli:raw="Marks a method as being the invariant method for a class.">메서드가 클래스에 대한 고정 메서드가 됨을 표시합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
      <summary vsli:raw="Enables you to set contract and tool options at assembly, type, or method granularity.">어셈블리, 형식 또는 메서드 세분 수준에서 계약 및 도구 옵션을 설정할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and enable/disable value.">제공된 범주, 설정 및 활성화/비활성화 값을 사용하여 <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="category" vsli:raw="The category for the option to be set.">설정할 옵션에 대한 범주입니다.</param>
      <param name="setting" vsli:raw="The option setting.">옵션 설정입니다.</param>
      <param name="enabled" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enable the option; &lt;see langword=&quot;false&quot; /&gt; to disable the option.">옵션을 활성화하려면 <see langword="true" />이고 옵션을 비활성화하려면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and value.">제공된 범주, 설정 및 값을 사용하여 <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="category" vsli:raw="The category of the option to be set.">설정할 옵션의 범주입니다.</param>
      <param name="setting" vsli:raw="The option setting.">옵션 설정입니다.</param>
      <param name="value" vsli:raw="The value for the setting.">설정의 값입니다.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Category">
      <summary vsli:raw="Gets the category of the option.">옵션의 범주를 가져옵니다.</summary>
      <returns vsli:raw="The category of the option.">옵션의 범주입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Enabled">
      <summary vsli:raw="Determines if an option is enabled.">옵션을 사용할 수 있는지 여부를 확인합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the option is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">옵션을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Setting">
      <summary vsli:raw="Gets the setting for the option.">옵션에 대한 설정을 가져옵니다.</summary>
      <returns vsli:raw="The setting for the option.">옵션에 대한 설정입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Value">
      <summary vsli:raw="Gets the value for the option.">옵션의 값을 가져옵니다.</summary>
      <returns vsli:raw="The value for the option.">옵션에 대한 값입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
      <summary vsli:raw="Specifies that a field can be used in method contracts when the field has less visibility than the method.">필드가 메서드보다 잘 표시되지 않을 때 메서드 계약에서 필드를 사용할 수 있다고 지정합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The property name to apply to the field.">필드에 적용할 속성 이름입니다.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the property name to be applied to the field.">필드에 적용되는 속성 이름을 가져옵니다.</summary>
      <returns vsli:raw="The property name to be applied to the field.">필드에 적용되는 속성 이름입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
      <summary vsli:raw="Specifies that an assembly is a reference assembly that contains contracts.">어셈블리가 계약을 포함하는 참조 어셈블리임을 지정합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
      <summary vsli:raw="Identifies a member that has no run-time behavior.">런타임 동작이 없는 멤버를 식별합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
      <summary vsli:raw="Instructs analysis tools to assume the correctness of an assembly, type, or member without performing static verification.">분석 도구가 정적 확인을 수행하지 않고도 어셈블리, 형식 또는 멤버의 정확성을 가정하도록 지시합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractVerificationAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to require verification; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">확인이 필요하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
      <summary vsli:raw="Gets the value that indicates whether to verify the contract of the target.">대상의 계약을 확인할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if verification is required; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">확인이 필요하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
      <summary vsli:raw="Indicates that a type or method is pure, that is, it does not make any visible state changes.">시각적인 상태 변화가 없는 순수한 형식이나 메서드를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.PureAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.PureAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ContractHelper">
      <summary vsli:raw="Provides methods that the binary rewriter uses to handle contract failures.">이진 재작성기에서 계약 실패를 처리하는 데 사용하는 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Used by the binary rewriter to activate the default failure behavior.">이진 재작성기에서 기본 실패 동작을 활성화하는 데 사용됩니다.</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the type of failure.">실패 유형을 지정하는 열거형 값 중 하나입니다.</param>
      <param name="userMessage" vsli:raw="Additional user information.">추가 사용자 정보입니다.</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">실패를 발생시킨 조건에 대한 설명입니다.</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">현재 예외를 발생시킨 내부 예외입니다.</param>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) if the event was handled and should not trigger a failure; otherwise, returns the localized failure message.">이벤트가 처리되고 실패를 트리거하지 않으면 null 참조(Visual Basic의 <see langword="Nothing" />)이고, 그렇지 않으면 지역화된 실패 메시지를 반환합니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;failureKind&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractFailureKind&quot; /&gt; value.">
        <paramref name="failureKind" />는 유효한 <see cref="T:System.Diagnostics.Contracts.ContractFailureKind" /> 값이 아닙니다.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
      <summary vsli:raw="Triggers the default failure behavior.">기본 실패 동작을 트리거합니다.</summary>
      <param name="kind" vsli:raw="One of the enumeration values that specifies the type of failure.">실패 유형을 지정하는 열거형 값 중 하나입니다.</param>
      <param name="displayMessage" vsli:raw="The message to display.">표시할 메시지입니다.</param>
      <param name="userMessage" vsli:raw="Additional user information.">추가 사용자 정보입니다.</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">실패를 발생시킨 조건에 대한 설명입니다.</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">현재 예외를 발생시킨 내부 예외입니다.</param>
    </member>
  </members>
</doc>
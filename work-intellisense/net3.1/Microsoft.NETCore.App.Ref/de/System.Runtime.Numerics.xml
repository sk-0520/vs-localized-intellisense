<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Numerics</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.BigInteger">
      <summary>Stellt eine beliebig große ganze Zahl mit Vorzeichen dar.</summary>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Byte[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Numerics.BigInteger" />-Struktur unter Verwendung der Werte in einem Bytearray.</summary>
      <param name="value">Ein Array der Bytewerte in Little-Endian-Reihenfolge.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Decimal)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Numerics.BigInteger" />-Struktur mit einem <see cref="T:System.Decimal" />-Wert.</summary>
      <param name="value">Eine Dezimalzahl.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Double)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Numerics.BigInteger" />-Struktur unter Verwendung eines Gleitkommawerts mit doppelter Genauigkeit.</summary>
      <param name="value">Ein Gleitkommawert mit doppelter Genauigkeit.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> ist <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> oder <see cref="F:System.Double.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Numerics.BigInteger" />-Struktur unter Verwendung des Werts einer 32-Bit-Ganzzahl mit Vorzeichen.</summary>
      <param name="value">Eine 32-Bit-Ganzzahl mit Vorzeichen.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int64)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Numerics.BigInteger" />-Struktur unter Verwendung des Werts einer 64-Bit-Ganzzahl mit Vorzeichen.</summary>
      <param name="value">Eine 64-Bit-Ganzzahl mit Vorzeichen.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Numerics.BigInteger" />-Struktur unter Verwendung der Werte in einer schreibgeschützten Spanne von Bytes und zeigt optional die Signaturcodierung und die Endianness-Bytereihenfolge an.</summary>
      <param name="value">Eine schreibgeschützte Spanne von Bytes, die den BigInteger-Wert darstellen.</param>
      <param name="isUnsigned">
        <see langword="true" />, um anzugeben, dass <paramref name="value" /> nicht signierte Codierung verwendet. Andernfalls <see langword="false" /> (der Standardwert).</param>
      <param name="isBigEndian">
        <see langword="true" />, um anzugeben, dass <paramref name="value" /> Big-Endian-Bytereihenfolge verwendet. Andernfalls <see langword="false" /> (der Standardwert).</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Single)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Numerics.BigInteger" />-Struktur unter Verwendung eines Gleitkommawerts mit einfacher Genauigkeit.</summary>
      <param name="value">Ein Gleitkommawert mit einfacher Genauigkeit.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> ist <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> oder <see cref="F:System.Single.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Numerics.BigInteger" />-Struktur unter Verwendung des Werts einer 32-Bit-Ganzzahl ohne Vorzeichen.</summary>
      <param name="value">Ein 32-Bit-Ganzzahlwert ohne Vorzeichen.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt64)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Numerics.BigInteger" />-Struktur mit dem Wert einer 64-Bit-Ganzzahl ohne Vorzeichen.</summary>
      <param name="value">Eine 64-Bit-Ganzzahl ohne Vorzeichen.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)">
      <summary>Ruft den absoluten Wert eines <see cref="T:System.Numerics.BigInteger" />-Objekts ab.</summary>
      <param name="value">Eine Zahl.</param>
      <returns>Der Absolutbetrag von <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Addiert zwei <see cref="T:System.Numerics.BigInteger" />-Werte und gibt das Ergebnis zurück.</summary>
      <param name="left">Der erste zu addierende Wert.</param>
      <param name="right">Der zweite zu addierende Wert.</param>
      <returns>Die Summe von <paramref name="left" /> und <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Vergleicht zwei <see cref="T:System.Numerics.BigInteger" />-Werte und gibt eine ganze Zahl zurück, die angibt, ob der erste Wert kleiner oder größer als der zweite Wert oder gleich dem zweiten Wert ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>Eine ganze Zahl mit Vorzeichen, die die relativen Werte von <paramref name="left" /> und <paramref name="right" /> angibt, wie in der folgenden Tabelle veranschaulicht.
  Wert 
  Bedingung 
  Kleiner als 0 (null) 
 <paramref name="left" /> ist kleiner als <paramref name="right" />.  
  
  Zero 
 <paramref name="left" /> ist gleich <paramref name="right" />.  
  
  Größer als 0 (null) 
 <paramref name="left" /> ist größer als <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Int64)">
      <summary>Vergleicht diese Instanz mit einer 64-Bit-Ganzzahl mit Vorzeichen und gibt eine ganze Zahl zurück, die angibt, ob der Wert dieser Instanz kleiner oder größer als der Wert der 64-Bit-Ganzzahl mit Vorzeichen ist oder mit diesem übereinstimmt.</summary>
      <param name="other">Die 64-Bit-Ganzzahl mit Vorzeichen für den Vergleich.</param>
      <returns>Der Wert einer ganzen Zahl mit Vorzeichen, der die Beziehung dieser Instanz zu <paramref name="other" /> angibt, wie in der folgenden Tabelle veranschaulicht.
  Rückgabewert 
  Beschreibung 
  Kleiner als 0 (null) 
  Die aktuelle Instanz ist kleiner als <paramref name="other" />.  
  
  Zero 
  Die aktuelle Instanz ist gleich <paramref name="other" />.  
  
  Größer als 0 (null) 
  Die aktuelle Instanz ist größer als <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)">
      <summary>Vergleicht diese Instanz mit einem zweiten <see cref="T:System.Numerics.BigInteger" /> und gibt eine ganze Zahl zurück, die angibt, ob der Wert dieser Instanz kleiner oder größer als der Wert des angegebenen Objekts ist oder mit diesem übereinstimmt.</summary>
      <param name="other">Das zu vergleichende Objekt.</param>
      <returns>Der Wert einer ganzen Zahl mit Vorzeichen, der die Beziehung dieser Instanz zu <paramref name="other" /> angibt, wie in der folgenden Tabelle veranschaulicht.
  Rückgabewert 
  Beschreibung 
  Kleiner als 0 (null) 
  Die aktuelle Instanz ist kleiner als <paramref name="other" />.  
  
  Zero 
  Die aktuelle Instanz ist gleich <paramref name="other" />.  
  
  Größer als 0 (null) 
  Die aktuelle Instanz ist größer als <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Object)">
      <summary>Vergleicht diese Instanz mit einem angegebenen Objekt und gibt eine ganze Zahl zurück, die angibt, ob der Wert dieser Instanz kleiner oder größer als der Wert des angegebenen Objekts ist oder mit diesem übereinstimmt.</summary>
      <param name="obj">Das zu vergleichende Objekt.</param>
      <returns>Eine ganze Zahl mit Vorzeichen, die die Beziehung der aktuellen Instanz zum <paramref name="obj" />-Parameter angibt, wie in der folgenden Tabelle veranschaulicht.
  Rückgabewert 
  Beschreibung 
  Kleiner als 0 (null) 
  Die aktuelle Instanz ist kleiner als <paramref name="obj" />.  
  
  Zero 
  Die aktuelle Instanz ist gleich <paramref name="obj" />.  
  
  Größer als 0 (null) 
  Die aktuelle Instanz ist größer als <paramref name="obj" />, oder der <paramref name="obj" />-Parameter ist <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> ist keine <see cref="T:System.Numerics.BigInteger" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.UInt64)">
      <summary>Vergleicht diese Instanz mit einer 64-Bit-Ganzzahl ohne Vorzeichen und gibt eine ganze Zahl zurück, die angibt, ob der Wert dieser Instanz kleiner oder größer als der Wert der 64-Bit-Ganzzahl ohne Vorzeichen ist oder mit diesem übereinstimmt.</summary>
      <param name="other">Die 64-Bit-Ganzzahl ohne Vorzeichen für den Vergleich.</param>
      <returns>Eine ganze Zahl mit Vorzeichen, die den relativen Wert dieser Instanz und von <paramref name="other" /> angibt, wie in der folgenden Tabelle veranschaulicht.
RückgabewertBeschreibungKleiner als 0 (null)Die aktuelle Instanz ist kleiner als <paramref name="other" />.ZeroDie aktuelle Instanz ist gleich <paramref name="other" />.Größer als 0 (null)Die aktuelle Instanz ist größer als <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Dividiert einen <see cref="T:System.Numerics.BigInteger" />-Wert durch einen anderen und gibt das Ergebnis zurück.</summary>
      <param name="dividend">Der zu dividierende Wert.</param>
      <param name="divisor">Der Wert, durch den dividiert werden soll.</param>
      <returns>Der Quotient der Division.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> ist 0 (null).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)">
      <summary>Dividiert einen <see cref="T:System.Numerics.BigInteger" />-Wert durch einen anderen, gibt das Ergebnis zurück und gibt den Rest in einem Ausgabeparameter zurück.</summary>
      <param name="dividend">Der zu dividierende Wert.</param>
      <param name="divisor">Der Wert, durch den dividiert werden soll.</param>
      <param name="remainder">Die Rückgabe dieser Methode enthält einen <see cref="T:System.Numerics.BigInteger" />-Wert, der den Rest der Division darstellt. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns>Der Quotient der Division.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> ist 0 (null).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Int64)">
      <summary>Gibt einen Wert zurück, der angibt, ob die aktuelle Instanz und eine 64-Bit-Ganzzahl mit Vorzeichen über den gleichen Wert verfügen.</summary>
      <param name="other">Der Wert der 64-Bit-Ganzzahl mit Vorzeichen für den Vergleich.</param>
      <returns>
        <see langword="true" />, wenn die 64-Bit-Ganzzahl mit Vorzeichen und die aktuelle Instanz über den gleichen Wert verfügen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob die aktuelle Instanz und ein angegebenes <see cref="T:System.Numerics.BigInteger" />-Objekt über den gleichen Wert verfügen.</summary>
      <param name="other">Das zu vergleichende Objekt.</param>
      <returns>
        <see langword="true" />, wenn dieses <see cref="T:System.Numerics.BigInteger" />-Objekt und <paramref name="other" /> über den gleichen Wert verfügen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Object)">
      <summary>Gibt einen Wert zurück, der angibt, ob die aktuelle Instanz und ein angegebenes Objekt über den gleichen Wert verfügen.</summary>
      <param name="obj">Das zu vergleichende Objekt.</param>
      <returns>
        <see langword="true" />, wenn das <paramref name="obj" />-Argument ein <see cref="T:System.Numerics.BigInteger" />-Objekt darstellt und dessen Wert der aktuellen <see cref="T:System.Numerics.BigInteger" />-Instanz entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.UInt64)">
      <summary>Gibt einen Wert zurück, der angibt, ob die aktuelle Instanz und eine 64-Bit-Ganzzahl ohne Vorzeichen über den gleichen Wert verfügen.</summary>
      <param name="other">Die 64-Bit-Ganzzahl ohne Vorzeichen für den Vergleich.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Instanz und die 64-Bit-Ganzzahl ohne Vorzeichen über den gleichen Wert verfügen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetByteCount(System.Boolean)">
      <summary>Ruft die Anzahl der Bytes ab, die von <see cref="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" /> und <see cref="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" /> ausgegeben werden.</summary>
      <param name="isUnsigned">
        <see langword="true" />, um die Codierung ohne Vorzeichen zu verwenden, andernfalls <see langword="false" />.</param>
      <returns>Die Anzahl der Bytes.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetHashCode">
      <summary>Gibt den Hashcode für das aktuelle <see cref="T:System.Numerics.BigInteger" />-Objekt zurück.</summary>
      <returns>Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Sucht den größten gemeinsamen Divisor von zwei <see cref="T:System.Numerics.BigInteger" />-Werten.</summary>
      <param name="left">Der erste Wert.</param>
      <param name="right">Der zweite Wert.</param>
      <returns>Der größte gemeinsame Divisor von <paramref name="left" /> und <paramref name="right" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsEven">
      <summary>Gibt an, ob der Wert des aktuellen <see cref="T:System.Numerics.BigInteger" />-Objekts eine gerade Zahl ist.</summary>
      <returns>
        <see langword="true" />, wenn der Wert des <see cref="T:System.Numerics.BigInteger" />-Objekts eine gerade Zahl ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsOne">
      <summary>Gibt an, ob der Wert des aktuellen <see cref="T:System.Numerics.BigInteger" />-Objekts <see cref="P:System.Numerics.BigInteger.One" /> ist.</summary>
      <returns>
        <see langword="true" />, wenn der Wert des <see cref="T:System.Numerics.BigInteger" />-Objekts <see cref="P:System.Numerics.BigInteger.One" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsPowerOfTwo">
      <summary>Gibt an, ob der Wert des aktuellen <see cref="T:System.Numerics.BigInteger" />-Objekts eine Potenz von Zwei ist.</summary>
      <returns>
        <see langword="true" />, wenn der Wert des <see cref="T:System.Numerics.BigInteger" />-Objekts eine Potenz von Zwei ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsZero">
      <summary>Gibt an, ob der Wert des aktuellen <see cref="T:System.Numerics.BigInteger" />-Objekts <see cref="P:System.Numerics.BigInteger.Zero" /> ist.</summary>
      <returns>
        <see langword="true" />, wenn der Wert des <see cref="T:System.Numerics.BigInteger" />-Objekts <see cref="P:System.Numerics.BigInteger.Zero" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)">
      <summary>Gibt den natürlichen Logarithmus (zur Basis <see langword="e" />) der angegebenen Zahl zurück.</summary>
      <param name="value">Die Zahl, deren Logarithmus bestimmt werden soll.</param>
      <returns>Der natürliche Logarithmus (Basis <see langword="e" />) von <paramref name="value" />, wie in der Tabelle im Abschnitt "Hinweise" veranschaulicht.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Der natürliche Logarithmus von <paramref name="value" /> liegt außerhalb des Bereichs des <see cref="T:System.Double" />-Datentyps.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)">
      <summary>Gibt den Logarithmus einer angegebenen Zahl bezüglich einer angegebenen Basis zurück.</summary>
      <param name="value">Eine Zahl, deren Logarithmus gesucht wird.</param>
      <param name="baseValue">Die Basis des Logarithmus.</param>
      <returns>Der Logarithmus zur Basis <paramref name="baseValue" /> von <paramref name="value" />, wie in der Tabelle im Abschnitt "Hinweise" veranschaulicht.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Das Protokoll von <paramref name="value" /> liegt außerhalb des Bereichs des <see cref="T:System.Double" />-Datentyps.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)">
      <summary>Gibt den Logarithmus einer angegebenen Zahl zur Basis 10 zurück.</summary>
      <param name="value">Eine Zahl, deren Logarithmus gesucht wird.</param>
      <returns>Der Logarithmus zur Basis 10 von <paramref name="value" />, wie in der Tabelle im Abschnitt "Hinweise" veranschaulicht.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Der Logarithmus zur Basis 10 von <paramref name="value" /> liegt außerhalb des Bereichs des <see cref="T:System.Double" />-Datentyps.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Gibt den größeren der beiden <see cref="T:System.Numerics.BigInteger" />-Werte zurück.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>Der größere der Parameter <paramref name="left" /> und <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Gibt den kleineren der beiden <see cref="T:System.Numerics.BigInteger" />-Werte zurück.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>Der kleinere der Parameter <paramref name="left" /> und <paramref name="right" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.MinusOne">
      <summary>Ruft einen Wert ab, der die Zahl -1 darstellt.</summary>
      <returns>Eine ganze Zahl, deren Wert -1 ist.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Führt eine Modulodivision für eine zur Potenz einer anderen Zahl erhobene Zahl aus.</summary>
      <param name="value">Die Zahl, deren <paramref name="exponent" />. Potenz berechnet werden soll.</param>
      <param name="exponent">Der Exponent, mit dem <paramref name="value" /> potenziert werden soll.</param>
      <param name="modulus">Die Zahl, durch die <paramref name="value" /> hoch <paramref name="exponent" /> dividiert wird.</param>
      <returns>Der Rest nach der Division von <paramref name="value" />exponent durch <paramref name="modulus" />.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="modulus" /> ist 0 (null).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exponent" /> ist ein negativer Wert.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Gibt das Produkt der beiden <see cref="T:System.Numerics.BigInteger" />-Werte zurück.</summary>
      <param name="left">Die erste zu multiplizierende Zahl.</param>
      <param name="right">Die zweite zu multiplizierende Zahl.</param>
      <returns>Das Produkt des <paramref name="left" />-Parameters und des <paramref name="right" />-Parameters.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)">
      <summary>Negiert einen angegebenen <see cref="T:System.Numerics.BigInteger" />-Wert.</summary>
      <param name="value">Der zu negierende Wert.</param>
      <returns>Das Ergebnis des <paramref name="value" />-Parameters, multipliziert mit -1.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.One">
      <summary>Ruft einen Wert ab, der die Zahl 1 darstellt.</summary>
      <returns>Ein Objekt, dessen Wert 1 ist.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Addiert die Werte von zwei angegebenen <see cref="T:System.Numerics.BigInteger" />-Objekten.</summary>
      <param name="left">Der erste zu addierende Wert.</param>
      <param name="right">Der zweite zu addierende Wert.</param>
      <returns>Die Summe von <paramref name="left" /> und <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Führt eine bitweise <see langword="And" />-Operation für zwei <see cref="T:System.Numerics.BigInteger" />-Werte aus.</summary>
      <param name="left">Der erste Wert.</param>
      <param name="right">Der zweite Wert.</param>
      <returns>Das Ergebnis der bitweisen <see langword="And" />-Operation.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Führt eine bitweise <see langword="Or" />-Operation für zwei <see cref="T:System.Numerics.BigInteger" />-Werte aus.</summary>
      <param name="left">Der erste Wert.</param>
      <param name="right">Der zweite Wert.</param>
      <returns>Das Ergebnis der bitweisen <see langword="Or" />-Operation.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)">
      <summary>Dekrementiert einen <see cref="T:System.Numerics.BigInteger" />-Wert um 1.</summary>
      <param name="value">Der zu dekrementierende Wert.</param>
      <returns>Der um 1 dekrementierte Wert des <paramref name="value" />-Parameters.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Dividiert einen angegebenen <see cref="T:System.Numerics.BigInteger" />-Wert durch einen anderen angegebenen <see cref="T:System.Numerics.BigInteger" />-Wert mit einer Ganzzahldivision.</summary>
      <param name="dividend">Der zu dividierende Wert.</param>
      <param name="divisor">Der Wert, durch den dividiert werden soll.</param>
      <returns>Das ganzzahlige Ergebnis der Division.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> ist 0 (null).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob der Wert einer langen ganzen Zahl mit Vorzeichen und ein <see cref="T:System.Numerics.BigInteger" />-Wert gleich sind.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn der <paramref name="left" />-Parameter und der <paramref name="right" />-Parameter denselben Wert aufweisen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" />-Wert und der Wert einer langen ganzen Zahl mit Vorzeichen gleich sind.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn der <paramref name="left" />-Parameter und der <paramref name="right" />-Parameter denselben Wert aufweisen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob die Werte von zwei <see cref="T:System.Numerics.BigInteger" />-Objekten gleich sind.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn der <paramref name="left" />-Parameter und der <paramref name="right" />-Parameter denselben Wert aufweisen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" />-Wert und der Wert einer langen ganzen Zahl ohne Vorzeichen gleich sind.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn der <paramref name="left" />-Parameter und der <paramref name="right" />-Parameter denselben Wert aufweisen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob der Wert einer langen ganzen Zahl ohne Vorzeichen und ein <see cref="T:System.Numerics.BigInteger" />-Wert gleich sind.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn der <paramref name="left" />-Parameter und der <paramref name="right" />-Parameter denselben Wert aufweisen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Führt eine bitweise exklusive <see langword="Or" />-Operation (<see langword="XOr" />-Operation) für zwei <see cref="T:System.Numerics.BigInteger" />-Werte aus.</summary>
      <param name="left">Der erste Wert.</param>
      <param name="right">Der zweite Wert.</param>
      <returns>Das Ergebnis der bitweisen <see langword="Or" />-Operation.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger">
      <summary>Definiert eine explizite Konvertierung eines <see cref="T:System.Decimal" />-Objekts in einen <see cref="T:System.Numerics.BigInteger" />-Wert.</summary>
      <param name="value">Der Wert, der in einen <see cref="T:System.Numerics.BigInteger" /> konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger">
      <summary>Definiert eine explizite Konvertierung eines <see cref="T:System.Double" />-Werts in einen <see cref="T:System.Numerics.BigInteger" />-Wert.</summary>
      <param name="value">Der Wert, der in einen <see cref="T:System.Numerics.BigInteger" /> konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> ist <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" /> oder <see cref="F:System.Double.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte">
      <summary>Definiert eine explizite Konvertierung eines <see cref="T:System.Numerics.BigInteger" />-Objekts in einen Bytewert ohne Vorzeichen.</summary>
      <param name="value">Der Wert, der in einen <see cref="T:System.Byte" /> konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> ist kleiner als <see cref="F:System.Byte.MinValue" /> oder größer als <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal">
      <summary>Definiert eine explizite Konvertierung eines <see cref="T:System.Numerics.BigInteger" />-Objekts in einen <see cref="T:System.Decimal" />-Wert.</summary>
      <param name="value">Der Wert, der in einen <see cref="T:System.Decimal" /> konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> ist kleiner als <see cref="F:System.Decimal.MinValue" /> oder größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double">
      <summary>Definiert eine explizite Konvertierung eines <see cref="T:System.Numerics.BigInteger" />-Objekts in einen <see cref="T:System.Double" />-Wert.</summary>
      <param name="value">Der Wert, der in einen <see cref="T:System.Double" /> konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16">
      <summary>Definiert eine explizite Konvertierung eines <see cref="T:System.Numerics.BigInteger" />-Objekts in den Wert einer 16-Bit-Ganzzahl mit Vorzeichen.</summary>
      <param name="value">Der Wert, der in eine 16-Bit-Ganzzahl mit Vorzeichen konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> ist kleiner als <see cref="F:System.Int16.MinValue" /> oder größer als <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32">
      <summary>Definiert eine explizite Konvertierung eines <see cref="T:System.Numerics.BigInteger" />-Objekts in den Wert einer 32-Bit-Ganzzahl mit Vorzeichen.</summary>
      <param name="value">Der Wert, der in eine 32-Bit-Ganzzahl mit Vorzeichen konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> ist kleiner als <see cref="F:System.Int32.MinValue" /> oder größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64">
      <summary>Definiert eine explizite Konvertierung eines <see cref="T:System.Numerics.BigInteger" />-Objekts in den Wert einer 64-Bit-Ganzzahl mit Vorzeichen.</summary>
      <param name="value">Der Wert, der in eine 64-Bit-Ganzzahl mit Vorzeichen konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> ist kleiner als <see cref="F:System.Int64.MinValue" /> oder größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte">
      <summary>Definiert eine explizite Konvertierung eines <see cref="T:System.Numerics.BigInteger" />-Objekts in einen 8-Bit-Wert mit Vorzeichen.
Diese API ist nicht CLS-kompatibel. Die kompatible Alternative ist <see cref="T:System.Int16" />.</summary>
      <param name="value">Der Wert, der in einen 8-Bit-Wert mit Vorzeichen konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> ist kleiner als <see cref="F:System.SByte.MinValue" /> oder größer als <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single">
      <summary>Definiert eine explizite Konvertierung eines <see cref="T:System.Numerics.BigInteger" />-Objekts in einen Gleitkommawert mit einfacher Genauigkeit.</summary>
      <param name="value">Der Wert, der in einen Gleitkommawert mit einfacher Genauigkeit konvertiert werden soll.</param>
      <returns>Ein Objekt, das die nächstmögliche Darstellung des <paramref name="value" />-Parameters enthält.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16">
      <summary>Definiert eine explizite Konvertierung eines <see cref="T:System.Numerics.BigInteger" />-Objekts in den Wert einer 16-Bit-Ganzzahl ohne Vorzeichen.
Diese API ist nicht CLS-kompatibel. Die kompatible Alternative ist <see cref="T:System.Int32" />.</summary>
      <param name="value">Der Wert, der in eine 16-Bit-Ganzzahl ohne Vorzeichen konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> ist kleiner als <see cref="F:System.UInt16.MinValue" /> oder größer als <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32">
      <summary>Definiert eine explizite Konvertierung eines <see cref="T:System.Numerics.BigInteger" />-Objekts in den Wert einer 32-Bit-Ganzzahl ohne Vorzeichen.
Diese API ist nicht CLS-kompatibel. Die kompatible Alternative ist <see cref="T:System.Int64" />.</summary>
      <param name="value">Der Wert, der in eine 32-Bit-Ganzzahl ohne Vorzeichen konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> ist kleiner als <see cref="F:System.UInt32.MinValue" /> oder größer als <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64">
      <summary>Definiert eine explizite Konvertierung eines <see cref="T:System.Numerics.BigInteger" />-Objekts in den Wert einer 64-Bit-Ganzzahl ohne Vorzeichen.
Diese API ist nicht CLS-kompatibel. Die kompatible Alternative ist <see cref="T:System.Double" />.</summary>
      <param name="value">Der Wert, der in eine 64-Bit-Ganzzahl ohne Vorzeichen konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> ist kleiner als <see cref="F:System.UInt64.MinValue" /> oder größer als <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger">
      <summary>Definiert eine explizite Konvertierung eines <see cref="T:System.Single" />-Werts in einen <see cref="T:System.Numerics.BigInteger" />-Wert.</summary>
      <param name="value">Der Wert, der in einen <see cref="T:System.Numerics.BigInteger" /> konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> ist <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" /> oder <see cref="F:System.Single.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob eine 64-Bit-Ganzzahl mit Vorzeichen größer als ein <see cref="T:System.Numerics.BigInteger" />-Wert ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> größer als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" /> größer als der Wert einer 64-Bit-Ganzzahl mit Vorzeichen ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> größer als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" />-Wert größer als ein anderer <see cref="T:System.Numerics.BigInteger" />-Wert ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> größer als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" />-Wert größer als eine 64-Bit-Ganzzahl ohne Vorzeichen ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> größer als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" />-Wert größer als eine 64-Bit-Ganzzahl ohne Vorzeichen ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> größer als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob eine 64-Bit-Ganzzahl mit Vorzeichen größer als ein oder gleich einem <see cref="T:System.Numerics.BigInteger" />-Wert ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> größer als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" />-Wert größer als der oder gleich dem Wert einer 64-Bit-Ganzzahl mit Vorzeichen ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> größer als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" />-Wert größer oder gleich einem anderen <see cref="T:System.Numerics.BigInteger" />-Wert ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> größer als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" />-Wert größer als der oder gleich dem Wert einer 64-Bit-Ganzzahl ohne Vorzeichen ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> größer als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob eine 64-Bit-Ganzzahl ohne Vorzeichen größer als ein oder gleich einem <see cref="T:System.Numerics.BigInteger" />-Wert ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> größer als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger">
      <summary>Definiert eine implizite Konvertierung eines Bytewerts ohne Vorzeichen in ein <see cref="T:System.Numerics.BigInteger" />-Objekt.</summary>
      <param name="value">Der Wert, der in einen <see cref="T:System.Numerics.BigInteger" /> konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger">
      <summary>Definiert eine implizite Konvertierung einer 16-Bit-Ganzzahl mit Vorzeichen in einen <see cref="T:System.Numerics.BigInteger" />-Wert.</summary>
      <param name="value">Der Wert, der in einen <see cref="T:System.Numerics.BigInteger" /> konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger">
      <summary>Definiert eine implizite Konvertierung einer 32-Bit-Ganzzahl mit Vorzeichen in einen <see cref="T:System.Numerics.BigInteger" />-Wert.</summary>
      <param name="value">Der Wert, der in einen <see cref="T:System.Numerics.BigInteger" /> konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger">
      <summary>Definiert eine implizite Konvertierung einer 64-Bit-Ganzzahl mit Vorzeichen in einen <see cref="T:System.Numerics.BigInteger" />-Wert.</summary>
      <param name="value">Der Wert, der in einen <see cref="T:System.Numerics.BigInteger" /> konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger">
      <summary>Definiert eine implizite Konvertierung einer 8-Bit-Ganzzahl mit Vorzeichen in einen <see cref="T:System.Numerics.BigInteger" />-Wert.
Diese API ist nicht CLS-kompatibel. Die kompatible Alternative ist <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />.</summary>
      <param name="value">Der Wert, der in einen <see cref="T:System.Numerics.BigInteger" /> konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger">
      <summary>Definiert eine implizite Konvertierung einer 16-Bit-Ganzzahl ohne Vorzeichen in einen <see cref="T:System.Numerics.BigInteger" />-Wert.
Diese API ist nicht CLS-kompatibel. Die kompatible Alternative ist <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />.</summary>
      <param name="value">Der Wert, der in einen <see cref="T:System.Numerics.BigInteger" /> konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger">
      <summary>Definiert eine implizite Konvertierung einer 32-Bit-Ganzzahl ohne Vorzeichen in einen <see cref="T:System.Numerics.BigInteger" />-Wert.
Diese API ist nicht CLS-kompatibel. Die kompatible Alternative ist <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />.</summary>
      <param name="value">Der Wert, der in einen <see cref="T:System.Numerics.BigInteger" /> konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger">
      <summary>Definiert eine implizite Konvertierung einer 64-Bit-Ganzzahl ohne Vorzeichen in einen <see cref="T:System.Numerics.BigInteger" />-Wert.
Diese API ist nicht CLS-kompatibel. Die kompatible Alternative ist <see cref="T:System.Double" />.</summary>
      <param name="value">Der Wert, der in einen <see cref="T:System.Numerics.BigInteger" /> konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters enthält.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)">
      <summary>Inkrementiert einen <see cref="T:System.Numerics.BigInteger" />-Wert um 1.</summary>
      <param name="value">Der zu inkrementierende Wert.</param>
      <returns>Der um 1 inkrementierte Wert des <paramref name="value" />-Parameters.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob eine 64-Bit-Ganzzahl mit Vorzeichen und ein <see cref="T:System.Numerics.BigInteger" />-Wert ungleich sind.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" />-Wert und eine 64-Bit-Ganzzahl mit Vorzeichen ungleich sind.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob zwei <see cref="T:System.Numerics.BigInteger" />-Objekte über unterschiedliche Werte verfügen.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" />-Wert und eine 64-Bit-Ganzzahl ohne Vorzeichen ungleich sind.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob eine 64-Bit-Ganzzahl ohne Vorzeichen und ein <see cref="T:System.Numerics.BigInteger" />-Wert ungleich sind.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)">
      <summary>Verschiebt einen <see cref="T:System.Numerics.BigInteger" />-Wert um eine angegebene Anzahl von Bits nach links.</summary>
      <param name="value">Der Wert, dessen Bits verschoben werden sollen.</param>
      <param name="shift">Die Anzahl der Bits, um die <paramref name="value" /> nach links verschoben werden soll.</param>
      <returns>Ein Wert, der um die angegebene Anzahl von Bits nach links verschoben wurde.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob eine 64-Bit-Ganzzahl mit Vorzeichen kleiner als ein <see cref="T:System.Numerics.BigInteger" />-Wert ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> kleiner als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" />-Wert kleiner als eine 64-Bit-Ganzzahl mit Vorzeichen ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> kleiner als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" />-Wert kleiner als ein anderer <see cref="T:System.Numerics.BigInteger" />-Wert ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> kleiner als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" />-Wert kleiner als eine 64-Bit-Ganzzahl ohne Vorzeichen ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> kleiner als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob eine 64-Bit-Ganzzahl ohne Vorzeichen kleiner als ein <see cref="T:System.Numerics.BigInteger" />-Wert ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> kleiner als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob eine 64-Bit-Ganzzahl mit Vorzeichen kleiner als ein oder gleich einem <see cref="T:System.Numerics.BigInteger" />-Wert ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> kleiner oder gleich <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" />-Wert kleiner als oder gleich einer 64-Bit-Ganzzahl mit Vorzeichen ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> kleiner oder gleich <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" />-Wert kleiner oder gleich einem anderen <see cref="T:System.Numerics.BigInteger" />-Wert ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> kleiner oder gleich <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.Numerics.BigInteger" />-Wert kleiner als oder gleich einer 64-Bit-Ganzzahl ohne Vorzeichen ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> kleiner oder gleich <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary>Gibt einen Wert zurück, der angibt, ob eine 64-Bit-Ganzzahl ohne Vorzeichen kleiner als ein oder gleich einem <see cref="T:System.Numerics.BigInteger" />-Wert ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> kleiner oder gleich <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Gibt den Rest aus der Division zweier angegebener <see cref="T:System.Numerics.BigInteger" />-Werte zurück.</summary>
      <param name="dividend">Der zu dividierende Wert.</param>
      <param name="divisor">Der Wert, durch den dividiert werden soll.</param>
      <returns>Der Rest, der sich aus der Division ergibt.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> ist 0 (null).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Multipliziert zwei angegebene <see cref="T:System.Numerics.BigInteger" />-Werte.</summary>
      <param name="left">Der erste zu multiplizierende Wert.</param>
      <param name="right">Der zweite zu multiplizierende Wert.</param>
      <returns>Das Produkt von <paramref name="left" /> und <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)">
      <summary>Gibt das bitweise Einerkomplement eines <see cref="T:System.Numerics.BigInteger" />-Werts zurück.</summary>
      <param name="value">Ein Ganzzahlwert.</param>
      <returns>Das bitweise Einerkomplement von <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)">
      <summary>Verschiebt einen <see cref="T:System.Numerics.BigInteger" />-Wert um eine angegebene Anzahl von Bits nach rechts.</summary>
      <param name="value">Der Wert, dessen Bits verschoben werden sollen.</param>
      <param name="shift">Die Anzahl der Bits, um die <paramref name="value" /> nach rechts verschoben werden soll.</param>
      <returns>Ein Wert, der um die angegebene Anzahl von Bits nach rechts verschoben wurde.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Subtrahiert einen <see cref="T:System.Numerics.BigInteger" />-Wert von einem anderen <see cref="T:System.Numerics.BigInteger" />-Wert.</summary>
      <param name="left">Der Wert, von dem subtrahiert werden soll (der Minuend).</param>
      <param name="right">Der Wert, der subtrahiert werden soll (der Subtrahend).</param>
      <returns>Das Ergebnis der Subtraktion von <paramref name="right" /> von <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)">
      <summary>Negiert einen angegebenen BigInteger-Wert.</summary>
      <param name="value">Der zu negierende Wert.</param>
      <returns>Das Ergebnis des <paramref name="value" />-Parameters, multipliziert mit -1.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)">
      <summary>Gibt den Wert des <see cref="T:System.Numerics.BigInteger" />-Operanden zurück. (Das Vorzeichen des Operanden wird nicht geändert.)</summary>
      <param name="value">Ein Ganzzahlwert.</param>
      <returns>Der Wert des <paramref name="value" />-Operanden.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Konvertiert die-Darstellung einer Zahl, die in der angegebenen schreibgeschützten Spanne von Zeichen enthalten ist, in einem angegebenen Stil in die jeweilige <see cref="T:System.Numerics.BigInteger" />-Entsprechung.</summary>
      <param name="value">Eine schreibgeschützte Spanne von Zeichen, die die zu konvertierende Zahl enthält.</param>
      <param name="style">Eine bitweise Kombination der Enumerationswerte, die das zulässige Format von <paramref name="value" /> angeben.</param>
      <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="value" /> bereitstellt.</param>
      <returns>Ein Wert, der der im <paramref name="value" />-Parameter angegebenen Zahl entspricht.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> ist kein <see cref="T:System.Globalization.NumberStyles" />-Wert.
- oder -
<paramref name="style" /> schließt das <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />-Flag oder <see cref="F:System.Globalization.NumberStyles.HexNumber" />-Flag mit einem anderen Wert ein.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> folgt nicht dem mit <paramref name="style" /> angegebenen Eingabemuster.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String)">
      <summary>Wandelt die angegebene Zeichenfolgendarstellung einer Zahl in ihre <see cref="T:System.Numerics.BigInteger" />-Entsprechung um.</summary>
      <param name="value">Eine Zeichenfolge, die die zu konvertierende Zahl enthält.</param>
      <returns>Ein Wert, der der im <paramref name="value" />-Parameter angegebenen Zahl entspricht.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> weist nicht das richtige Format auf.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Konvertiert die Zeichenfolgendarstellung einer Zahl in einem angegebenen Stil in die <see cref="T:System.Numerics.BigInteger" />-Entsprechung.</summary>
      <param name="value">Eine Zeichenfolge, die eine zu konvertierende Zahl enthält.</param>
      <param name="style">Eine bitweise Kombination der Enumerationswerte, die das zulässige Format von <paramref name="value" /> angeben.</param>
      <returns>Ein Wert, der der im <paramref name="value" />-Parameter angegebenen Zahl entspricht.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> ist kein <see cref="T:System.Globalization.NumberStyles" />-Wert.
- oder -
<paramref name="style" /> schließt das <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />-Flag oder <see cref="F:System.Globalization.NumberStyles.HexNumber" />-Flag mit einem anderen Wert ein.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> folgt nicht dem mit <see cref="T:System.Globalization.NumberStyles" /> angegebenen Eingabemuster.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Konvertiert die Zeichenfolgendarstellung einer Zahl in einem angegebenen Stil und kulturabhängigen Format in das entsprechende <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Eine Zeichenfolge, die eine zu konvertierende Zahl enthält.</param>
      <param name="style">Eine bitweise Kombination der Enumerationswerte, die das zulässige Format von <paramref name="value" /> angeben.</param>
      <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="value" /> bereitstellt.</param>
      <returns>Ein Wert, der der im <paramref name="value" />-Parameter angegebenen Zahl entspricht.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> ist kein <see cref="T:System.Globalization.NumberStyles" />-Wert.
- oder -
<paramref name="style" /> schließt das <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />-Flag oder <see cref="F:System.Globalization.NumberStyles.HexNumber" />-Flag mit einem anderen Wert ein.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> folgt nicht dem mit <paramref name="style" /> angegebenen Eingabemuster.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)">
      <summary>Konvertiert die Zeichenfolgendarstellung einer Zahl in einem angegebenen kulturspezifischen Format in die <see cref="T:System.Numerics.BigInteger" />-Entsprechung.</summary>
      <param name="value">Eine Zeichenfolge, die eine zu konvertierende Zahl enthält.</param>
      <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="value" /> bereitstellt.</param>
      <returns>Ein Wert, der der im <paramref name="value" />-Parameter angegebenen Zahl entspricht.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> weist nicht das richtige Format auf.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)">
      <summary>Potenziert einen <see cref="T:System.Numerics.BigInteger" />-Wert mit einem angegebenen Wert.</summary>
      <param name="value">Die Zahl, deren <paramref name="exponent" />. Potenz berechnet werden soll.</param>
      <param name="exponent">Der Exponent, mit dem <paramref name="value" /> potenziert werden soll.</param>
      <returns>Das Ergebnis der Potenzierung von <paramref name="value" /> mit <paramref name="exponent" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exponent" /> ist ein negativer Wert.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Führt die Ganzzahldivision von zwei <see cref="T:System.Numerics.BigInteger" />-Werten aus und gibt den Rest zurück.</summary>
      <param name="dividend">Der zu dividierende Wert.</param>
      <param name="divisor">Der Wert, durch den dividiert werden soll.</param>
      <returns>Der Rest aus der Division von <paramref name="dividend" /> durch <paramref name="divisor" />.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> ist 0 (null).</exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Sign">
      <summary>Ruft eine Zahl ab, die das Vorzeichen (negativ, positiv, oder 0 (null)) des aktuellen <see cref="T:System.Numerics.BigInteger" />-Objekts angibt.</summary>
      <returns>Eine Zahl, die das Vorzeichen des <see cref="T:System.Numerics.BigInteger" />-Objekts angibt, wie in der folgenden Tabelle veranschaulicht.
  Anzahl 
  Beschreibung 
  -1 
  Der Wert dieses Objekts ist negativ.  
  
  0 
  Der Wert dieses Objekts ist null (0).  
  
  1 
  Der Wert dieses Objekts ist positiv.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Subtrahiert einen <see cref="T:System.Numerics.BigInteger" />-Wert von einem anderen und gibt das Ergebnis zurück.</summary>
      <param name="left">Der Wert, von dem subtrahiert werden soll (der Minuend).</param>
      <param name="right">Der Wert, der subtrahiert werden soll (der Subtrahend).</param>
      <returns>Das Ergebnis der Subtraktion von <paramref name="right" /> von <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray">
      <summary>Konvertiert einen <see cref="T:System.Numerics.BigInteger" />-Wert in ein Bytearray.</summary>
      <returns>Der Wert des aktuellen, in ein Bytearray konvertierten <see cref="T:System.Numerics.BigInteger" />-Objekts.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)">
      <summary>Liefert den Wert dieses <see cref="T:System.Numerics.BigInteger" /> als Bytearray mit der kleinstmöglichen Anzahl von Bytes. Wenn der Wert Null (0) ist, wird ein Array von einem Byte zurückgegeben, dessen Element 0x00 ist.</summary>
      <param name="isUnsigned">
        <see langword="true" />, um die Codierung ohne Vorzeichen zu verwenden, andernfalls <see langword="false" />.</param>
      <param name="isBigEndian">
        <see langword="true" />, um die Bytes in einer Big-Endian-Bytereihenfolge zu schreiben, andernfalls <see langword="false" />.</param>
      <returns>Der Wert des aktuellen, in ein Bytearray konvertierten <see cref="T:System.Numerics.BigInteger" />-Objekts.</returns>
      <exception cref="T:System.OverflowException">Wenn <paramref name="isUnsigned" /><see langword="true" /> und <see cref="P:System.Numerics.BigInteger.Sign" /> negativ ist.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString">
      <summary>Konvertiert den numerischen Wert des aktuellen <see cref="T:System.Numerics.BigInteger" />-Objekts in die entsprechende Zeichenfolgendarstellung.</summary>
      <returns>Die Zeichenfolgendarstellung des aktuellen <see cref="T:System.Numerics.BigInteger" />-Werts.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)">
      <summary>Konvertiert den numerischen Wert des aktuellen <see cref="T:System.Numerics.BigInteger" />-Objekts unter Verwendung der angegebenen kulturspezifischen Formatierungsinformationen in die entsprechende Zeichenfolgendarstellung.</summary>
      <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
      <returns>Die Zeichenfolgendarstellung des aktuellen <see cref="T:System.Numerics.BigInteger" />-Werts im durch den <paramref name="provider" />-Parameter angegebenen Format.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String)">
      <summary>Konvertiert den numerischen Wert des aktuellen <see cref="T:System.Numerics.BigInteger" />-Objekts unter Verwendung des angegebenen Formats in die entsprechende Zeichenfolgendarstellung.</summary>
      <param name="format">Eine standardmäßige oder benutzerdefinierte numerische Formatierungszeichenfolge.</param>
      <returns>Die Zeichenfolgendarstellung des aktuellen <see cref="T:System.Numerics.BigInteger" />-Werts im durch den <paramref name="format" />-Parameter angegebenen Format.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> ist keine gültige Formatzeichenfolge.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)">
      <summary>Konvertiert den numerischen Wert des aktuellen <see cref="T:System.Numerics.BigInteger" />-Objekts unter Verwendung des angegebenen Formats und der angegebenen kulturspezifischen Formatierungsinformationen in die entsprechende Zeichenfolgendarstellung.</summary>
      <param name="format">Eine standardmäßige oder benutzerdefinierte numerische Formatierungszeichenfolge.</param>
      <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
      <returns>Die Zeichenfolgendarstellung des aktuellen <see cref="T:System.Numerics.BigInteger" />-Werts entsprechend den Angaben in den Parametern <paramref name="format" /> und <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> ist keine gültige Formatzeichenfolge.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Formatiert diese BigInteger-Instanz in eine Spanne von Zeichen.</summary>
      <param name="destination">Die Spanne von Zeichen, in die diese Instanz geschrieben werden soll.</param>
      <param name="charsWritten">Enthält bei der Rückgabe der Methode die Länge der Spanne als Anzahl der Zeichen.</param>
      <param name="format">Eine schreibgeschützte Spanne von Zeichen, die das Format für den Formatierungsvorgang angibt.</param>
      <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="value" /> bereitstellt.</param>
      <returns>
        <see langword="true" />, wenn der Formatierungsvorgang erfolgreich ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary>Versucht, die Zeichenfolgendarstellung einer Zahl in deren <see cref="T:System.Numerics.BigInteger" />-Entsprechung zu konvertieren, und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich durchgeführt wurde.</summary>
      <param name="value">Die Darstellung einer Zahl als schreibgeschützte Spanne von Zeichen.</param>
      <param name="style">Eine bitweise Kombination von Enumerationswerten, die die Stilelemente angeben, die in <paramref name="value" /> vorhanden sein können. Ein häufig angegebener Wert ist <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="value" /> bereitstellt.</param>
      <param name="result">Die Rückgabe dieser Methode enthält die <see cref="T:System.Numerics.BigInteger" />-Entsprechung der Zahl in <paramref name="value" />, oder <see cref="P:System.Numerics.BigInteger.Zero" />, wenn die Konvertierung nicht ausgeführt werden konnte. Die Konvertierung schlägt fehl, wenn der Parameter <paramref name="value" /> eine leere Zeichenspanne ist oder nicht in einem Format vorliegt, das mit <paramref name="style" /> kompatibel ist. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="value" /> erfolgreich konvertiert wurde, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> ist kein <see cref="T:System.Globalization.NumberStyles" />-Wert.
- oder -
<paramref name="style" /> schließt das <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />-Flag oder <see cref="F:System.Globalization.NumberStyles.HexNumber" />-Flag mit einem anderen Wert ein.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Numerics.BigInteger@)">
      <summary>Versucht, die Darstellung einer Zahl, die in der angegebenen schreibgeschützten Zeichenspanne enthalten ist, in ihre Entsprechung <see cref="T:System.Numerics.BigInteger" /> zu konvertieren, und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich war.</summary>
      <param name="value">Die Darstellung einer Zahl als schreibgeschützte Spanne von Zeichen.</param>
      <param name="result">Die Rückgabe dieser Methode enthält die <see cref="T:System.Numerics.BigInteger" />-Entsprechung der Zahl in <paramref name="value" />, oder null (0), wenn die Konvertierung nicht ausgeführt werden konnte. Die Konvertierung schlägt fehl, wenn der <paramref name="value" />-Parameter eine leere Zeichenspanne ist oder nicht im richtigen Format vorliegt. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="value" /> erfolgreich konvertiert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary>Konvertiert die Zeichenfolgendarstellung einer Zahl in einem angegebenen Stil und kulturspezifischen Format in das entsprechende <see cref="T:System.Numerics.BigInteger" /> und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich abgeschlossen wurde.</summary>
      <param name="value">Die Zeichenfolgendarstellung einer Zahl. Die Zeichenfolge wird unter Verwendung des durch <paramref name="style" /> angegebenen Formats interpretiert.</param>
      <param name="style">Eine bitweise Kombination von Enumerationswerten, die die Stilelemente angeben, die in <paramref name="value" /> vorhanden sein können. Ein häufig angegebener Wert ist <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="value" /> bereitstellt.</param>
      <param name="result">Die Rückgabe dieser Methode enthält die <see cref="T:System.Numerics.BigInteger" />-Entsprechung der Zahl in <paramref name="value" />, oder <see cref="P:System.Numerics.BigInteger.Zero" />, wenn die Konvertierung nicht ausgeführt werden konnte. Die Konvertierung schlägt fehl, wenn der <paramref name="value" />-Parameter gleich <see langword="null" /> ist oder nicht in einem Format vorliegt, das mit <paramref name="style" /> kompatibel ist. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns>
        <see langword="true" />, wenn der <paramref name="value" />-Parameter erfolgreich konvertiert wurde, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> ist kein <see cref="T:System.Globalization.NumberStyles" />-Wert.
- oder -
<paramref name="style" /> schließt das <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />-Flag oder <see cref="F:System.Globalization.NumberStyles.HexNumber" />-Flag mit einem anderen Wert ein.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)">
      <summary>Versucht, die Zeichenfolgendarstellung einer Zahl in deren <see cref="T:System.Numerics.BigInteger" />-Entsprechung zu konvertieren, und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich durchgeführt wurde.</summary>
      <param name="value">Die Zeichenfolgendarstellung einer Zahl.</param>
      <param name="result">Die Rückgabe dieser Methode enthält die <see cref="T:System.Numerics.BigInteger" />-Entsprechung der Zahl in <paramref name="value" />, oder null (0), wenn die Konvertierung nicht ausgeführt werden konnte. Die Konvertierung schlägt fehl, wenn der <paramref name="value" />-Parameter <see langword="null" /> ist oder nicht im korrekten Format vorliegt. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="value" /> erfolgreich konvertiert wurde, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)">
      <summary>Kopiert den Wert dieses <see cref="T:System.Numerics.BigInteger" /> als Little-Endian-Zweierkomplementbytes mit der geringstmöglichen Anzahl von Bytes. Wenn der Wert Null (0) ist, wird nur ein Byte ausgegeben, dessen Element 0x00 ist.</summary>
      <param name="destination">Die Zielspanne, in die die resultierenden Bytes geschrieben werden sollen.</param>
      <param name="bytesWritten">Die Anzahl der Bytes, die in <paramref name="destination" /> geschrieben wurden.</param>
      <param name="isUnsigned">
        <see langword="true" />, um die Codierung ohne Vorzeichen zu verwenden, andernfalls <see langword="false" />.</param>
      <param name="isBigEndian">
        <see langword="true" />, um die Bytes in einer Big-Endian-Bytereihenfolge zu schreiben, andernfalls <see langword="false" />.</param>
      <returns>
        <see langword="true" />, wenn die Bytes in <paramref name="destination" /> passen. <see langword="false" />, wenn aufgrund von unzureichendem Speicherplatz nicht alle Bytes geschrieben werden konnten.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="isUnsigned" /> ist <see langword="true" /> und <see cref="P:System.Numerics.BigInteger.Sign" /> ist negativ.</exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Zero">
      <summary>Ruft einen Wert ab, der die Zahl null (0) darstellt.</summary>
      <returns>Eine ganze Zahl, deren Wert 0 (null) ist.</returns>
    </member>
    <member name="T:System.Numerics.Complex">
      <summary>Stellt eine komplexe Zahl dar.</summary>
    </member>
    <member name="M:System.Numerics.Complex.#ctor(System.Double,System.Double)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Numerics.Complex" />-Struktur mit den angegebenen reellen und imaginären Werten.</summary>
      <param name="real">Der reelle Teil der komplexen Zahl.</param>
      <param name="imaginary">Der imaginäre Teil der komplexen Zahl.</param>
    </member>
    <member name="M:System.Numerics.Complex.Abs(System.Numerics.Complex)">
      <summary>Ruft den absoluten Wert (oder die Größenordnung) einer komplexen Zahl ab.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>Der Absolutbetrag von <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Acos(System.Numerics.Complex)">
      <summary>Gibt den Winkel zurück, der der Arkuskosinus der angegebenen komplexen Zahl ist.</summary>
      <param name="value">Eine komplexe Zahl, die einen Kosinus darstellt.</param>
      <returns>Der Winkel im Bogenmaß, der der Arkuskosinus von <paramref name="value" /> ist.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Double,System.Numerics.Complex)">
      <summary>Fügt einer komplexen Zahl eine reelle Zahl mit doppelter Genauigkeit hinzu und gibt das Ergebnis zurück.</summary>
      <param name="left">Der reelle Wert mit doppelter Genauigkeit, der hinzugefügt werden soll.</param>
      <param name="right">Der komplexe Wert, der hinzugefügt werden soll.</param>
      <returns>Die Summe von <paramref name="left" /> und <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Double)">
      <summary>Fügt einer reellen Zahl mit doppelter Genauigkeit eine komplexe Zahl hinzu und gibt das Ergebnis zurück.</summary>
      <param name="left">Der komplexe Wert, der hinzugefügt werden soll.</param>
      <param name="right">Der reelle Wert mit doppelter Genauigkeit, der hinzugefügt werden soll.</param>
      <returns>Die Summe von <paramref name="left" /> und <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Addiert zwei komplexe Zahlen und gibt das Ergebnis zurück.</summary>
      <param name="left">Die erste zu addierende komplexe Zahl.</param>
      <param name="right">Die zweite zu addierende komplexe Zahl.</param>
      <returns>Die Summe von <paramref name="left" /> und <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Asin(System.Numerics.Complex)">
      <summary>Gibt den Winkel zurück, der der Arkussinus der angegebenen komplexen Zahl ist.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>Der Winkel, der der Arkussinus von <paramref name="value" /> ist.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Atan(System.Numerics.Complex)">
      <summary>Gibt den Winkel zurück, der der Arkustangens der angegebenen komplexen Zahl ist.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>Der Winkel, der der Arkustangens von <paramref name="value" /> ist.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)">
      <summary>Berechnet die konjugierte Zahl einer komplexen Zahl und gibt das Ergebnis zurück.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>Die konjugierte Zahl von <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Cos(System.Numerics.Complex)">
      <summary>Gibt den Kosinus der angegebenen komplexen Zahl zurück.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>Der Kosinus von <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Cosh(System.Numerics.Complex)">
      <summary>Gibt den Hyperbelkosinus der angegebenen komplexen Zahl zurück.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>Der Hyperbelkosinus von <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Double,System.Numerics.Complex)">
      <summary>Dividiert eine reelle Zahl mit doppelter Genauigkeit durch eine komplexe Zahl und gibt das Ergebnis zurück.</summary>
      <param name="dividend">Die reelle Zahl mit doppelter Genauigkeit, die dividiert werden soll.</param>
      <param name="divisor">Die komplexe Zahl, durch die dividiert wird.</param>
      <returns>Der Quotient der Division.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Double)">
      <summary>Dividiert eine komplexe Zahl durch eine reelle Zahl mit doppelter Genauigkeit und gibt das Ergebnis zurück.</summary>
      <param name="dividend">Die zu dividierende komplexe Zahl.</param>
      <param name="divisor">Die reelle Zahl mit doppelter Genauigkeit, durch die dividiert werden soll.</param>
      <returns>Der Quotient der Division.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Dividiert eine komplexe Zahl durch eine andere komplexe Zahl und gibt das Ergebnis zurück.</summary>
      <param name="dividend">Die zu dividierende komplexe Zahl.</param>
      <param name="divisor">Die komplexe Zahl, durch die dividiert wird.</param>
      <returns>Der Quotient der Division.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Numerics.Complex)">
      <summary>Gibt einen Wert zurück, der angibt, ob die aktuelle Instanz und eine angegebene komplexe Zahl den gleichen Wert haben.</summary>
      <param name="value">Die zu vergleichende komplexe Zahl.</param>
      <returns>
        <see langword="true" />, wenn die komplexe Zahl und <paramref name="value" /> den gleichen Wert haben, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Object)">
      <summary>Gibt einen Wert zurück, der angibt, ob die aktuelle Instanz und ein angegebenes Objekt über den gleichen Wert verfügen.</summary>
      <param name="obj">Das zu vergleichende Objekt.</param>
      <returns>
        <see langword="true" />, wenn der <paramref name="obj" />-Parameter ein <see cref="T:System.Numerics.Complex" />-Objekt oder ein Typ ist, der die implizite Konvertierung in ein <see cref="T:System.Numerics.Complex" />-Objekt unterstützt, und der Wert gleich dem aktuellen <see cref="T:System.Numerics.Complex" />-Objekt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Exp(System.Numerics.Complex)">
      <summary>Gibt <see langword="e" /> potenziert mit einer angegebenen komplexen Zahl zurück.</summary>
      <param name="value">Eine komplexe Zahl, die einen Exponenten angibt.</param>
      <returns>Die Zahl <see langword="e" /> hoch <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)">
      <summary>Erstellt eine komplexe Zahl aus den Polarkoordinaten eines Punkts.</summary>
      <param name="magnitude">Die Größe, die die Entfernung vom Ursprung (dem Schnittpunkt der x-Achse mit der y-Achse) zur Zahl ist.</param>
      <param name="phase">Die Phase, d. h. der Winkel von der Linie zur horizontalen Achse, gemessen im Bogenmaß.</param>
      <returns>Eine komplexe Zahl.</returns>
    </member>
    <member name="M:System.Numerics.Complex.GetHashCode">
      <summary>Gibt den Hashcode für das aktuelle <see cref="T:System.Numerics.Complex" />-Objekt zurück.</summary>
      <returns>Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Imaginary">
      <summary>Ruft die imaginäre Komponente des aktuellen <see cref="T:System.Numerics.Complex" />-Objekts ab.</summary>
      <returns>Die imaginäre Komponente einer komplexen Zahl.</returns>
    </member>
    <member name="F:System.Numerics.Complex.ImaginaryOne">
      <summary>Gibt eine neue <see cref="T:System.Numerics.Complex" />-Instanz mit einer reellen Zahl gleich 0 und einer imaginären Zahl gleich 1 zurück.</summary>
    </member>
    <member name="F:System.Numerics.Complex.Infinity">
      <summary>Stellt Unendlichkeit als komplexe Zahl dar.</summary>
    </member>
    <member name="M:System.Numerics.Complex.IsFinite(System.Numerics.Complex)">
      <summary>Bestimmt, ob die angegebene komplexe Zahl endlich ist.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>
        <see langword="true" />, wenn sowohl der reelle als auch der imaginäre Teil endlich ist (null, subnormal oder normal); andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsInfinity(System.Numerics.Complex)">
      <summary>Gibt einen Wert zurück, der angibt, ob die angegebene komplexe Zahl als unendlich ausgewertet wird.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>
        <see langword="true" />, wenn entweder der reelle oder der imaginäre Teil <see cref="F:System.Double.PositiveInfinity" /> oder <see cref="F:System.Double.NegativeInfinity" /> lautet; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsNaN(System.Numerics.Complex)">
      <summary>Gibt einen Wert zurück, der angibt, ob die angegebene komplexe Instanz keine Zahl ist (NaN).</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>
        <see langword="true" />, wenn der angegebene Wert weder endlich noch unendlich ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex)">
      <summary>Gibt den natürlichen Logarithmus (zur Basis <see langword="e" />) einer komplexen Zahl zurück.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>Der natürliche Logarithmus (zur Basis <see langword="e" />) von <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)">
      <summary>Gibt den Logarithmus einer angegebenen komplexen Zahl zu einer angegebenen Basis zurück.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <param name="baseValue">Die Basis des Logarithmus.</param>
      <returns>Der Logarithmus von <paramref name="value" /> zur Basis <paramref name="baseValue" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log10(System.Numerics.Complex)">
      <summary>Gibt den Logarithmus einer angegebenen komplexen Zahl zur Basis 10 zurück.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>Der Logarithmus zur Basis 10 von <paramref name="value" />.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Magnitude">
      <summary>Ruft die Größenordnung (oder den absoluten Wert) einer komplexen Zahl ab.</summary>
      <returns>Die Größe der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Double,System.Numerics.Complex)">
      <summary>Gibt das Produkt einer reellen Zahl mit doppelter Genauigkeit und einer komplexen Zahl zurück.</summary>
      <param name="left">Die reelle Zahl mit doppelter Genauigkeit, mit der multipliziert werden soll.</param>
      <param name="right">Die komplexe Zahl, mit der multipliziert werden soll.</param>
      <returns>Das Produkt des <paramref name="left" />-Parameters und des <paramref name="right" />-Parameters.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Double)">
      <summary>Gibt das Produkt einer komplexen Zahl und einer reellen Zahl mit doppelter Genauigkeit zurück.</summary>
      <param name="left">Die komplexe Zahl, mit der multipliziert werden soll.</param>
      <param name="right">Die reelle Zahl mit doppelter Genauigkeit, mit der multipliziert werden soll.</param>
      <returns>Das Produkt des <paramref name="left" />-Parameters und des <paramref name="right" />-Parameters.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Gibt das Produkt zweier komplexer Zahlen zurück.</summary>
      <param name="left">Die erste zu multiplizierende komplexe Zahl.</param>
      <param name="right">Die zweite zu multiplizierende komplexe Zahl.</param>
      <returns>Das Produkt des <paramref name="left" />-Parameters und des <paramref name="right" />-Parameters.</returns>
    </member>
    <member name="F:System.Numerics.Complex.NaN">
      <summary>Stellt eine komplexe Instanz dar, die keine Zahl ist (NaN).</summary>
    </member>
    <member name="M:System.Numerics.Complex.Negate(System.Numerics.Complex)">
      <summary>Gibt die additive Inverse einer angegebenen komplexen Zahl zurück.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>Das Ergebnis der <see cref="P:System.Numerics.Complex.Real" />- und <see cref="P:System.Numerics.Complex.Imaginary" />-Komponenten des <paramref name="value" />-Parameters multipliziert mit -1.</returns>
    </member>
    <member name="F:System.Numerics.Complex.One">
      <summary>Gibt eine neue <see cref="T:System.Numerics.Complex" />-Instanz mit einer reellen Zahl gleich 1 und einer imaginären Zahl gleich 0 zurück.</summary>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Double,System.Numerics.Complex)">
      <summary>Fügt einer komplexen Zahl eine reelle Zahl mit doppelter Genauigkeit hinzu.</summary>
      <param name="left">Der reelle Wert mit doppelter Genauigkeit, der hinzugefügt werden soll.</param>
      <param name="right">Der komplexe Wert, der hinzugefügt werden soll.</param>
      <returns>Die Summe von <paramref name="left" /> und <paramref name="right" /> als komplexe Zahl.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Double)">
      <summary>Fügt einer reellen Zahl mit doppelter Genauigkeit eine komplexe Zahl hinzu.</summary>
      <param name="left">Der komplexe Wert, der hinzugefügt werden soll.</param>
      <param name="right">Der reelle Wert mit doppelter Genauigkeit, der hinzugefügt werden soll.</param>
      <returns>Die Summe von <paramref name="left" /> und <paramref name="right" /> als komplexe Zahl.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Addiert zwei komplexe Zahlen.</summary>
      <param name="left">Der erste komplexe Wert, der hinzugefügt werden soll.</param>
      <param name="right">Der zweite komplexe Wert, der hinzugefügt werden soll.</param>
      <returns>Die Summe von <paramref name="left" /> und <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Double,System.Numerics.Complex)">
      <summary>Dividiert eine angegebene reelle Zahl mit doppelter Genauigkeit durch eine angegebene komplexe Zahl.</summary>
      <param name="left">Der reelle Wert mit doppelter Genauigkeit, der dividiert werden soll.</param>
      <param name="right">Der komplexe Wert, durch den dividiert werden soll.</param>
      <returns>Das Ergebnis der Division von <paramref name="left" /> durch <paramref name="right" /> als komplexe Zahl.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Double)">
      <summary>Dividiert eine angegebene komplexe Zahl durch eine reelle Zahl mit doppelter Genauigkeit.</summary>
      <param name="left">Der komplexe Wert, der dividiert werden soll.</param>
      <param name="right">Der reelle Wert mit doppelter Genauigkeit, durch den dividiert werden soll.</param>
      <returns>Das Ergebnis der Division von <paramref name="left" /> durch <paramref name="right" /> als komplexe Zahl.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Dividiert eine angegebene komplexe Zahl durch eine andere angegebene komplexe Zahl.</summary>
      <param name="left">Der komplexe Wert, der dividiert werden soll.</param>
      <param name="right">Der komplexe Wert, durch den dividiert werden soll.</param>
      <returns>Das Ergebnis der Division von <paramref name="left" /> durch <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Gibt einen Wert zurück, der angibt, ob zwei komplexe Zahlen gleich sind.</summary>
      <param name="left">Die erste zu vergleichende komplexe Zahl.</param>
      <param name="right">Die zweite zu vergleichende komplexe Zahl.</param>
      <returns>
        <see langword="true" />, wenn der <paramref name="left" />-Parameter und der <paramref name="right" />-Parameter denselben Wert aufweisen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex">
      <summary>Definiert eine explizite Konvertierung eines <see cref="T:System.Decimal" />-Werts in eine komplexe Zahl.</summary>
      <param name="value">Der Wert, der in eine komplexe Zahl konvertiert werden soll.</param>
      <returns>Eine komplexe Zahl mit einer reellen Komponente gleich <paramref name="value" /> und einer imaginären Komponente gleich 0.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex">
      <summary>Definiert eine explizite Konvertierung eines <see cref="T:System.Numerics.BigInteger" />-Werts in eine komplexe Zahl.</summary>
      <param name="value">Der Wert, der in eine komplexe Zahl konvertiert werden soll.</param>
      <returns>Eine komplexe Zahl mit einer reellen Komponente gleich <paramref name="value" /> und einer imaginären Komponente gleich 0.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex">
      <summary>Definiert eine implizite Konvertierung eines Bytewerts ohne Vorzeichen in eine komplexe Zahl.</summary>
      <param name="value">Der Wert, der in eine komplexe Zahl konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters als reellen Teil und 0 als imaginären Teil enthält.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex">
      <summary>Definiert eine implizite Konvertierung einer Gleitkommazahl mit doppelter Genauigkeit in eine komplexe Zahl.</summary>
      <param name="value">Der Wert, der in eine komplexe Zahl konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters als reellen Teil und 0 als imaginären Teil enthält.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex">
      <summary>Definiert eine implizite Konvertierung einer 16-Bit-Ganzzahl mit Vorzeichen in eine komplexe Zahl.</summary>
      <param name="value">Der Wert, der in eine komplexe Zahl konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters als reellen Teil und 0 als imaginären Teil enthält.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex">
      <summary>Definiert eine implizite Konvertierung einer 32-Bit-Ganzzahl mit Vorzeichen in eine komplexe Zahl.</summary>
      <param name="value">Der Wert, der in eine komplexe Zahl konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters als reellen Teil und 0 als imaginären Teil enthält.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex">
      <summary>Definiert eine implizite Konvertierung einer 64-Bit-Ganzzahl mit Vorzeichen in eine komplexe Zahl.</summary>
      <param name="value">Der Wert, der in eine komplexe Zahl konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters als reellen Teil und 0 als imaginären Teil enthält.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex">
      <summary>Definiert eine implizite Konvertierung eines Bytewerts mit Vorzeichen in eine komplexe Zahl.
Diese API ist nicht CLS-kompatibel.</summary>
      <param name="value">Der Wert, der in eine komplexe Zahl konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters als reellen Teil und 0 als imaginären Teil enthält.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex">
      <summary>Definiert eine implizite Konvertierung einer Gleitkommazahl mit einfacher Genauigkeit in eine komplexe Zahl.</summary>
      <param name="value">Der Wert, der in eine komplexe Zahl konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters als reellen Teil und 0 als imaginären Teil enthält.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex">
      <summary>Definiert eine implizite Konvertierung einer 16-Bit-Ganzzahl ohne Vorzeichen in eine komplexe Zahl.
Diese API ist nicht CLS-kompatibel.</summary>
      <param name="value">Der Wert, der in eine komplexe Zahl konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters als reellen Teil und 0 als imaginären Teil enthält.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex">
      <summary>Definiert eine implizite Konvertierung einer 32-Bit-Ganzzahl ohne Vorzeichen in eine komplexe Zahl.
Diese API ist nicht CLS-kompatibel.</summary>
      <param name="value">Der Wert, der in eine komplexe Zahl konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters als reellen Teil und 0 als imaginären Teil enthält.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex">
      <summary>Definiert eine implizite Konvertierung einer 64-Bit-Ganzzahl ohne Vorzeichen in eine komplexe Zahl.
Diese API ist nicht CLS-kompatibel.</summary>
      <param name="value">Der Wert, der in eine komplexe Zahl konvertiert werden soll.</param>
      <returns>Ein Objekt, das den Wert des <paramref name="value" />-Parameters als reellen Teil und 0 als imaginären Teil enthält.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Gibt einen Wert zurück, der angibt, ob zwei komplexe Zahlen ungleich sind.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Double,System.Numerics.Complex)">
      <summary>Multipliziert eine angegebene reelle Zahl mit doppelter Genauigkeit durch eine angegebene komplexe Zahl.</summary>
      <param name="left">Der reelle Wert mit doppelter Genauigkeit, mit dem multipliziert werden soll.</param>
      <param name="right">Der komplexe Wert, mit dem multipliziert werden soll.</param>
      <returns>Das Produkt von <paramref name="left" /> und <paramref name="right" /> als komplexe Zahl.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Double)">
      <summary>Multipliziert die angegebene komplexe Zahl durch eine angegebene reelle Zahl mit doppelter Genauigkeit.</summary>
      <param name="left">Der komplexe Wert, mit dem multipliziert werden soll.</param>
      <param name="right">Der reelle Wert mit doppelter Genauigkeit, mit dem multipliziert werden soll.</param>
      <returns>Das Produkt von <paramref name="left" /> und <paramref name="right" /> als komplexe Zahl.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Multipliziert zwei angegebene komplexe Zahlen.</summary>
      <param name="left">Der erste komplexe Wert, mit dem multipliziert werden soll.</param>
      <param name="right">Der zweite komplexe Wert, mit dem multipliziert werden soll.</param>
      <returns>Das Produkt von <paramref name="left" /> und <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Double,System.Numerics.Complex)">
      <summary>Subtrahiert eine komplexe Zahl von einer reellen Zahl mit doppelter Genauigkeit.</summary>
      <param name="left">Der reelle Wert mit doppelter Genauigkeit, von dem subtrahiert werden soll (Minuend).</param>
      <param name="right">Der komplexe Wert, der subtrahiert werden soll (Subtrahend).</param>
      <returns>Das Ergebnis der Subtraktion von <paramref name="right" /> von <paramref name="left" /> als komplexe Zahl.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Double)">
      <summary>Subtrahiert eine reelle Zahl mit doppelter Genauigkeit von einer komplexen Zahl.</summary>
      <param name="left">Der komplexe Wert, von dem subtrahiert werden soll (Minuend).</param>
      <param name="right">Der reelle Wert mit doppelter Genauigkeit, der subtrahiert werden soll (Subtrahend).</param>
      <returns>Das Ergebnis der Subtraktion von <paramref name="right" /> von <paramref name="left" /> als komplexe Zahl.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Subtrahiert eine komplexe Zahl von einer anderen komplexen Zahl.</summary>
      <param name="left">Der Wert, von dem subtrahiert werden soll (der Minuend).</param>
      <param name="right">Der Wert, der subtrahiert werden soll (der Subtrahend).</param>
      <returns>Das Ergebnis der Subtraktion von <paramref name="right" /> von <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)">
      <summary>Gibt die additive Inverse einer angegebenen komplexen Zahl zurück.</summary>
      <param name="value">Der zu negierende Wert.</param>
      <returns>Das Ergebnis der <see cref="P:System.Numerics.Complex.Real" />- und <see cref="P:System.Numerics.Complex.Imaginary" />-Komponenten des <paramref name="value" />-Parameters multipliziert mit -1.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Phase">
      <summary>Ruft die Phase einer komplexen Zahl ab.</summary>
      <returns>Die Phase einer komplexen Zahl im Bogenmaß.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)">
      <summary>Gibt eine angegebene komplexe Zahl potenziert mit einem als Gleitkommazahl mit doppelter Genauigkeit angegebenen Exponenten zurück.</summary>
      <param name="value">Eine komplexe Zahl, die mit einem Exponenten potenziert werden soll.</param>
      <param name="power">Eine Gleitkommazahl mit doppelter Genauigkeit, die einen Exponenten darstellt.</param>
      <returns>Die komplexe Zahl <paramref name="value" /> potenziert mit <paramref name="power" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Gibt eine komplexe Zahl potenziert mit einem durch eine komplexe Zahl angegebenen Exponenten zurück.</summary>
      <param name="value">Eine komplexe Zahl, die mit einem Exponenten potenziert werden soll.</param>
      <param name="power">Eine komplexe Zahl, die einen Exponenten angibt.</param>
      <returns>Die komplexe Zahl <paramref name="value" /> potenziert mit <paramref name="power" />.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Real">
      <summary>Ruft die reelle Komponente des aktuellen <see cref="T:System.Numerics.Complex" />-Objekts ab.</summary>
      <returns>Die reelle Komponente einer komplexen Zahl.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)">
      <summary>Gibt den Kehrwert einer komplexen Zahl zurück.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>Der Kehrwert von <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sin(System.Numerics.Complex)">
      <summary>Gibt den Sinus der angegebenen komplexen Zahl zurück.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>Der Sinus von <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sinh(System.Numerics.Complex)">
      <summary>Gibt den Hyperbelsinus der angegebenen komplexen Zahl zurück.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>Der Hyperbelsinus von <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)">
      <summary>Gibt die Quadratwurzel einer angegebenen komplexen Zahl zurück.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>Die Quadratwurzel von <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Double,System.Numerics.Complex)">
      <summary>Subtrahiert eine komplexe Zahl von einer reellen Zahl mit doppelter Genauigkeit und gibt das Ergebnis zurück.</summary>
      <param name="left">Der reelle Wert mit doppelter Genauigkeit, von dem subtrahiert werden soll (Minuend).</param>
      <param name="right">Der komplexe Wert, der subtrahiert werden soll (Subtrahend).</param>
      <returns>Das Ergebnis der Subtraktion von <paramref name="right" /> von <paramref name="left" /> als komplexe Zahl.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Double)">
      <summary>Subtrahiert eine reelle Zahl mit doppelter Genauigkeit von einer komplexen Zahl und gibt das Ergebnis zurück.</summary>
      <param name="left">Der komplexe Wert, von dem subtrahiert werden soll (Minuend).</param>
      <param name="right">Der reelle Wert mit doppelter Genauigkeit, der subtrahiert werden soll (Subtrahend).</param>
      <returns>Das Ergebnis der Subtraktion von <paramref name="right" /> von <paramref name="left" /> als komplexe Zahl.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Subtrahiert eine komplexe Zahl von einer anderen komplexen Zahl und gibt das Ergebnis zurück.</summary>
      <param name="left">Der Wert, von dem subtrahiert werden soll (der Minuend).</param>
      <param name="right">Der Wert, der subtrahiert werden soll (der Subtrahend).</param>
      <returns>Das Ergebnis der Subtraktion von <paramref name="right" /> von <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Tan(System.Numerics.Complex)">
      <summary>Gibt den Tangens der angegebenen komplexen Zahl zurück.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>Der Tangens von <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Tanh(System.Numerics.Complex)">
      <summary>Gibt den Hyperbeltangens der angegebenen komplexen Zahl zurück.</summary>
      <param name="value">Eine komplexe Zahl.</param>
      <returns>Der Hyperbeltangens von <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString">
      <summary>Konvertiert den Wert der aktuellen komplexen Zahl in die entsprechende Zeichenfolgendarstellung in kartesischer Form.</summary>
      <returns>Die Zeichenfolgendarstellung der aktuellen Instanz in kartesischer Form.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.IFormatProvider)">
      <summary>Konvertiert den Wert der aktuellen komplexen Zahl unter Verwendung der angegebenen kulturabhängigen Formatierungsinformationen in die entsprechende Zeichenfolgendarstellung in kartesischer Form.</summary>
      <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
      <returns>Die Zeichenfolgendarstellung der aktuellen Instanz in kartesischer Form entsprechend dem Wert von <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String)">
      <summary>Konvertiert den Wert der aktuellen komplexen Zahl unter Verwendung des angegebenen Formats für die reellen und imaginären Teile in die entsprechende Zeichenfolgendarstellung in kartesischer Form.</summary>
      <param name="format">Eine standardmäßige oder benutzerdefinierte numerische Formatierungszeichenfolge.</param>
      <returns>Die Zeichenfolgendarstellung der aktuellen Instanz in kartesischer Form.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> ist keine gültige Formatzeichenfolge.</exception>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)">
      <summary>Konvertiert den Wert der aktuellen komplexen Zahl unter Verwendung des angegebenen Formats und der angegebenen kulturabhängigen Formatierungsinformationen für die reellen und imaginären Teile in die entsprechende Zeichenfolgendarstellung in kartesischer Form.</summary>
      <param name="format">Eine standardmäßige oder benutzerdefinierte numerische Formatierungszeichenfolge.</param>
      <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
      <returns>Die Zeichenfolgendarstellung der aktuellen Instanz in kartesischer Form entsprechend den Werten von <paramref name="format" /> und <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> ist keine gültige Formatzeichenfolge.</exception>
    </member>
    <member name="F:System.Numerics.Complex.Zero">
      <summary>Gibt eine neue <see cref="T:System.Numerics.Complex" />-Instanz mit einer reellen Zahl gleich 0 und einer imaginären Zahl gleich 0 zurück.</summary>
    </member>
  </members>
</doc>